#!/usr/bin/perl

use Getopt::Long;
use Mysql;

use Env qw(LSBUSER LSBDBPASSWD LSBDB LSBDBHOST);

sub usage()
{
print STDERR "mklibspec -l <libname> -a <archname>\n";
die;
}

# Uncomment to trace SQL statments
#$trace=1;

#
# 1) process the arguments
#
GetOptions("l=s" => \$libname,
	   "a=s" => \$archname);

if( !$libname ) { usage(); }
if( !$archname ) { usage(); }

#
# 2) Establish connection to the database
#
$Dbh = Mysql->connect($LSBDBHOST,$LSBDB,$LSBUSER, $LSBDBPASSWD) || die $Mysql::db_errstr;

#
# 3) get & print the architecture info
#
$select = "SELECT * FROM Architecture WHERE ";
$select.= "Architecture.Aname=".$Dbh->quote($archname);
print STDERR $select,"\n" if $trace;
$sth = $Dbh->query($select) || die $select."\n".$Dbh->errmsg();

%entry=$sth->fetchhash;
$Aid=$entry{'Aid'};
$Aname=$entry{'Aname'};

#
# 4) get & print the library info
#
$select = "SELECT * FROM Library WHERE ";
$select.= "Library.Lname=".$Dbh->quote($libname);
print STDERR $select,"\n" if $trace;
$sth = $Dbh->query($select) || die $select."\n".$Dbh->errmsg();

%entry=$sth->fetchhash;
$Lid=$entry{'Lid'};
$Lname=$entry{'Lname'};

printf("<!-- Start of text generated from database -->\n");
printf("<!-- generated from the LSB specification database -->\n");
printf("<!--    by \$Header: /home/mats.deb/cvsrepo/lsb/lsbspec.smaller/mklibspec,v 1.20 2001-04-25 17:38:13 anderson Exp $- -->\n");
my $now_string = localtime;
printf("<!--    at %s -->\n", $now_string );

print "<SECT1 ID=", $libname, ">\n";
print "<TITLE>", $Lname, "</TITLE>\n";
print "<PARA>\n";
print "</PARA>\n";
print "<TABLE>\n";
print "<TITLE></TITLE>\n";
print "<TGROUP COLS=2>\n";
print "<TBODY>\n";
print "<ROW>\n";
print "<ENTRY>Library:</ENTRY>\n";
print "<ENTRY>", $entry{'Lname'}, "</ENTRY>\n";
print "</ROW>\n";
print "<ROW>\n";
print "<ENTRY>Runtime Path:</ENTRY>\n";
print "<ENTRY>", $entry{'Lrunname'}, "</ENTRY>\n";
print "</ROW>\n";
# These aren't needed right now, and they are no longer stored in the
# DB after the Fall 2000 redesign. Maybe later....
#print "<ROW>\n";
#print "<ENTRY>Development Name:</ENTRY>\n";
#print "<ENTRY>", $entry{'LDevname'}, "</ENTRY>\n";
#print "</ROW>\n";
#print "<ROW>\n";
#print "<ENTRY>Header Location:</ENTRY>\n";
#print "<ENTRY>", $entry{'Lheaderpath'}, "</ENTRY>\n";
#print "</ROW>\n";
print "</TBODY>\n";
print "</TGROUP>\n";
print "</TABLE>\n";

#
# 5) Check for additional description text for the library
#
if(open(DESC,"<$Lname.txt" )) {
	while(<DESC>) {
		print $_;
	}
}

#
# 6) Get a list of the Standards that are used by this library
#
print "<PARA>\n";
$select = "SELECT DISTINCT Sfull,Sid FROM Standard,LibGroup,LGInt,Interface ";
$select.= "WHERE Sid=Istandard AND Iid=LGIint AND LGIlibg=LGid ";
$select.= "AND LGlib=$Lid AND Iarch=$Aid ORDER BY Sname";
print STDERR $select,"\n" if $trace;
$lsh = $Dbh->query($select) || die $select."\n".$Dbh->errmsg();
if( $lsh->numrows) {
	print "The behaviour of the interfaces in this library is specified ";
	print "by the following Standards.";
	print "<SIMPLELIST COLUMNS=1>\n";
	for(1..$lsh->numrows) {
		local(*entry);
		%entry=$lsh->fetchhash;
		# NB: Footnotes must be unique across the entire document
		print "<MEMBER>\n";
		print $entry{'Sfull'};
		if( $entry{'Sid'} != 0 ) {
			printf "<FOOTNOTE ID=\"std-%d-%d\">\n",
					$Lid, $entry{'Sid'};
			print "<PARA>\n";
			print $entry{'Sfull'};
			print "</PARA>\n";
			print "</FOOTNOTE>\n";
		}
		print "</MEMBER>\n";
		}
	print "</SIMPLELIST>\n";
	}
print "</PARA>\n";

#
# 7) Get a list of the libgroups in the library
#
$select = "SELECT * FROM LibGroup WHERE LGlib=$Lid ORDER BY LGorder";
print STDERR $select,"\n" if $trace;
$lgh = $Dbh->query($select) || die $select."\n".$Dbh->errmsg();
for(1..$lgh->numrows) {
	local(*entry);
	local(*std);
	local(*mangle);
	%entry=$lgh->fetchhash;
	$LGid=$entry{'LGid'};
	$LGname=$entry{'LGname'};
#
# 8) Foreach group, make a table of the interfaces
#
	$select = "SELECT Version.Vname,Interface.* FROM Interface,LGInt ";
	$select.= "LEFT JOIN Version ON Vid=Iversion ";
	$select.= "WHERE Iid=LGIint AND LGIlibg=$LGid AND Itype='Function' ";
	$select.= "AND Iarch=$Aid AND Istatus='Included' ";
	$select.= "ORDER BY Iname";
	$inh = $Dbh->query($select) || die $select."\n".$Dbh->errmsg();
	print STDERR $select,"\n" if $trace;
	for(1..$inh->numrows) {
		%entry=$inh->fetchhash;
		$entry[$_]=$entry{'Iname'};
		$std[$_]=$entry{'Istandard'};
		$symver[$_]=$entry{'Vname'};
	}
	if( $inh->numrows > 0 ) {
	print "<SECT2>\n";
	print "<TITLE>";
	print $LGname;
	print "</TITLE>\n";
	print "<PARA>\n";
	print "</PARA>\n";
	print "<TABLE>\n";
	print "<TITLE></TITLE>\n";
	print "<TGROUP COLS=5>\n";
	print "<TBODY>\n";
	$inc=int(($inh->numrows+4)/5);
	for(1..$inc) {
		print "<ROW>";
		printf "<ENTRY>";
		if( $entry[$_] ) {
		printf "%s", $entry[$_];
		if( $symver[$_] ) {
			printf "(%s)", $symver[$_];
		}
		if( $std[$_] ) {
			printf "<FOOTNOTEREF LINKEND=\"std-%d-%d\">",
							$Lid, $std[$_];
		}
		}
		printf "</ENTRY>";
		printf "<ENTRY>";
		if( $entry[$_+$inc] ) {
		printf "%s", $entry[$_+$inc];
		if( $symver[$_+$inc] ) {
			printf "(%s)", $symver[$_];
		}
		if( $std[$_+$inc] ) {
			printf "<FOOTNOTEREF LINKEND=\"std-%d-%d\">",
							$Lid, $std[$_+$inc];
		}
		}
		printf "</ENTRY>";
		printf "<ENTRY>";
		if( $entry[$_+(2*$inc)] ) {
		printf "%s", $entry[$_+(2*$inc)];
		if( $symver[$_+(2*$inc)] ) {
			printf "(%s)", $symver[$_];
		}
		if( $std[$_+(2*$inc)] ) {
			printf "<FOOTNOTEREF LINKEND=\"std-%d-%d\">",
							$Lid, $std[$_+(2*$inc)];
		}
		}
		printf "</ENTRY>";
		printf "<ENTRY>";
		if( $entry[$_+(3*$inc)] ) {
		printf "%s", $entry[$_+(3*$inc)];
		if( $symver[$_+(3*$inc)] ) {
			printf "(%s)", $symver[$_];
		}
		if( $std[$_+(3*$inc)] ) {
			printf "<FOOTNOTEREF LINKEND=\"std-%d-%d\">",
							$Lid, $std[$_+(3*$inc)];
		}
		}
		printf "</ENTRY>";
		printf "<ENTRY>";
		if( $entry[$_+(4*$inc)] ) {
		printf "%s", $entry[$_+(4*$inc)];
		if( $symver[$_+(4*$inc)] ) {
			printf "(%s)", $symver[$_];
		}
		if( $std[$_+(4*$inc)] ) {
			printf "<FOOTNOTEREF LINKEND=\"std-%d-%d\">",
							$Lid, $std[$_+(4*$inc)];
		}
		}
		printf "</ENTRY>";
		print "</ROW>\n";
	}
	print "</TBODY>\n";
	print "</TGROUP>\n";
	print "</TABLE>\n";
	print "</SECT2>\n";
	}

#
# 10) Make a table of data interfaces
#
{
	local(*datasym);
	local(*std);
	$select = "SELECT * FROM Interface,LGInt ";
	$select.= "WHERE Iid=LGIint AND LGIlibg=$LGid AND Itype='Data' ";
	$select.= "AND Iarch=$Aid ";
	$select.= "ORDER BY Iname";
	print STDERR $select,"\n" if $trace;
	$sth = $Dbh->query($select) || die $select."\n".$Dbh->errmsg();
	if ($sth->numrows > 0 ) {
		print "<SECT2>\n";
		print "<TITLE>Data Symbols</TITLE>\n";
		print "<PARA>\n";
		print "</PARA>\n";
		for(1..$sth->numrows) {
			%datasym=$sth->fetchhash;
			$datasym[$_]=$datasym{'Iname'};
			$std[$_]=$datasym{'Istandard'};
		}
		print "<TABLE>\n";
		print "<TITLE></TITLE>\n";
		print "<TGROUP COLS=5>\n";
		print "<TBODY>\n";
		$inc=($sth->numrows+4)/5;
		for(1..$inc) {
			print "<ROW>";
			printf "<ENTRY>%s",$datasym[$_];
			if( $datasym[$_] && $std[$_] ) {
				printf "<FOOTNOTEREF LINKEND=\"std-%d-%d\">",
								$Lid, $std[$_];
			}
			printf "</ENTRY>";
			printf "<ENTRY>%s</ENTRY>",$datasym[$_+$inc];
			printf "<ENTRY>%s</ENTRY>",$datasym[$_+(2*$inc)];
			printf "<ENTRY>%s</ENTRY>",$datasym[$_+(3*$inc)];
			printf "<ENTRY>%s</ENTRY>",$datasym[$_+(4*$inc)];
			print "</ROW>\n";
		}
		print "</TBODY>\n";
		print "</TGROUP>\n";
		print "</TABLE>\n";
		print "</SECT2>\n";
	}
}
}

print "</SECT1>\n";

#
# List the data definitions by including the related headers here
#
#
# Now, get a list of all headers associate with this library
#
$select = "SELECT DISTINCT Hname,Hid FROM Header,LibGroup,LGInt,Interface ";
$select.= "WHERE Hid=Iheader AND Iid=LGIint AND LGIlibg=LGid ";
$select.= "AND LGlib=$Lid ORDER BY Hname";
$hdh = $Dbh->query($select) || die $select."\n".$Dbh->errmsg();
if( $hdh->numrows ) {
	print "<SECT1 ID=", $libname, "-ddefs>\n";
	print "<TITLE> Data Definitions for ", $Lname, "</TITLE>\n";
	print "<PARA>\n";
	print "</PARA>\n";
	for(1..$hdh->numrows) {
		local(*entry);
		%entry=$hdh->fetchhash;
		$Hname=$entry{'Hname'};
		$headname="../../../src/include/".$Hname;
		print "<SECT2>\n";
		print "<TITLE>";
		print $entry{'Hname'};
		print "</TITLE>\n";
		print "<PARA>\n";
		print "</PARA>\n";
		print "<SCREEN>\n";
		open(HEADER,"<".$headname) || open(HEADER,"<../".$headname) || die "Can't open $headname";
		while(<HEADER>) {
			print $_;
			}
		print "</SCREEN>\n";
		print "</SECT2>\n";
	}
	print "</SECT1>\n";
}
printf("<!-- End of text generated from database -->\n");
printf("<!--    by \$Header: /home/mats.deb/cvsrepo/lsb/lsbspec.smaller/mklibspec,v 1.20 2001-04-25 17:38:13 anderson Exp $- -->\n");
