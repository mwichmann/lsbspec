#!/usr/bin/perl

use Getopt::Long;
use Mysql;

use Env qw(LSBUSER LSBDBPASSWD LSBDB LSBDBHOST);

sub usage()
{
print STDERR "mklibspec -l <libname> -a <archname>\n";
die;
}

sub output_table($$$$$)
{
local ($i,*int,*symver,*std,$title) = @_;

print "<TABLE>\n";
print "<TITLE>$title</TITLE>\n";
print "<TGROUP COLS=$numcols>\n";
print "<TBODY>\n";
$inc=int(($i+($numcols-1))/$numcols);
for $row (1..$inc) {
	print "<ROW>\n";
	for $col (0..$numcols-1) {
		printf "<ENTRY>";
		if( $int[$row+($col*$inc)] ) {
			printf "%s", $int[$row+($col*$inc)];
			if( $symver[$row+($col*$inc)] ) {
				printf "(%s)", $symver[$row];
				}
			if( $std[$row+($col*$inc)] ) {
				printf "<FOOTNOTEREF LINKEND=\"std-%d-%d\">",
						$Lid, $std[$row+($col*$inc)];
				}
			}
		printf "</ENTRY>\n";
	}
	print "</ROW>\n";
	}
print "</TBODY>\n";
print "</TGROUP>\n";
print "</TABLE>\n";
}

# Uncomment to trace SQL statements
#$trace=1;

# A default value 

$numcols=5;

#
# 1) process the arguments
#


GetOptions("l=s" => \$libname,
	   "c=i" => \$numcols,
	   "a=s" => \$archname);

if( !$libname ) { usage(); }
if( !$archname ) { usage(); }

#
# 2) Establish connection to the database
#
$Dbh = Mysql->connect($LSBDBHOST,$LSBDB,$LSBUSER, $LSBDBPASSWD) || die $Mysql::db_errstr;

#
# 3) get & print the architecture info
#
$select = "SELECT * FROM Architecture WHERE ";
$select.= "Architecture.Aname=".$Dbh->quote($archname);
print STDERR $select,"\n" if $trace;
$sth = $Dbh->query($select) || die $select."\n".$Dbh->errmsg();

%entry=$sth->fetchhash;
$Aid=$entry{'Aid'};
$Aname=$entry{'Aname'};

printf("<!-- Start of text generated from database -->\n");
printf("<!-- generated from the LSB specification database -->\n");
printf("<!--    by \$Header: /home/mats.deb/cvsrepo/lsb/lsbspec.smaller/mklibspec,v 1.46 2002-09-24 13:10:00 anderson Exp $- -->\n");
my $now_string = localtime;
printf("<!--    at %s -->\n", $now_string );

print "<SECT1 ID=", $libname, ">\n";
print "<TITLE>Interfaces for ", $libname, "</TITLE>\n";
print "<PARA>\n";
print "</PARA>\n";

#
# 4) get & print the library info
#
$select = "SELECT * FROM Library ";
$select.= "LEFT JOIN ArchLib ON Lid=ALlid ";
$select.= "WHERE Library.Lname=".$Dbh->quote($libname)." ";
$select.= "AND Lstd!='No'";
$select.= "AND ALaid=$Aid";
print STDERR $select,"\n" if $trace;
$sth = $Dbh->query($select) || die $select."\n".$Dbh->errmsg();

%entry=$sth->fetchhash;
$Lid=$entry{'Lid'};
$Lname=$entry{'Lname'};
$Larch=$entry{'ALaid'};

if( $Larch == $Aid ) {
	print "<TABLE>\n";
	print "<TITLE>$Lname Definition</TITLE>\n";
	print "<TGROUP COLS=2>\n";
	print "<TBODY>\n";
	print "<ROW>\n";
	print "<ENTRY>Library:</ENTRY>\n";
	print "<ENTRY>", $entry{'Lname'}, "</ENTRY>\n";
	print "</ROW>\n";
	print "<ROW>\n";
	print "<ENTRY>SONAME:</ENTRY>\n";
	if( $entry{'ALrunname'} ne "" ) {
		print "<ENTRY>", $entry{'ALrunname'}, "</ENTRY>\n";
	} else {
		print "<ENTRY>See archLSB.</ENTRY>\n";
	}
	print "</ROW>\n";
	print "</TBODY>\n";
	print "</TGROUP>\n";
	print "</TABLE>\n";
}

#
# 5) Check for additional description text for the library
#
if(open(DESC,"<$Lname.txt" )) {
	while(<DESC>) {
		print $_;
	}
}

#
# 6) Get a list of the Standards that are used by this library
#
print "<PARA>\n";
$select = "SELECT DISTINCT Sfull,Sid FROM Standard ";
$select.= "LEFT JOIN Interface ON Sid=Istandard ";
$select.= "LEFT JOIN LGInt ON LGIint=Iid ";
$select.= "LEFT JOIN LibGroup ON LGid=LGIlibg ";
$select.= "LEFT JOIN ArchInt ON AIint=Iid ";
$select.= "WHERE LGlib=$Lid ";
$select.= "AND ( AIarch=$Aid OR Iarch=$Aid ) ";
$select.= "ORDER BY Sname";
print STDERR $select,"\n" if $trace;
$lsh = $Dbh->query($select) || die $select."\n".$Dbh->errmsg();
if( $lsh->numrows) {
	print "The behavior of the interfaces in this library is specified ";
	print "by the following standards.";
	print "<SIMPLELIST COLUMNS=1>\n";
	for(1..$lsh->numrows) {
		local(*entry);
		%entry=$lsh->fetchhash;
		# NB: Footnotes must be unique across the entire document
		print "<MEMBER>\n";
		print $entry{'Sfull'};
		if( $entry{'Sid'} != 0 ) {
			printf "<FOOTNOTE ID=\"std-%d-%d\">\n",
					$Lid, $entry{'Sid'};
			print "<PARA>\n";
			print $entry{'Sfull'};
			print "</PARA>\n";
			print "</FOOTNOTE>\n";
		}
		print "</MEMBER>\n";
		}
	print "</SIMPLELIST>\n";
	}
print "</PARA>\n";

#
# 7) Get a list of the libgroups in the library
#
$select = "SELECT * FROM LibGroup WHERE LGlib=$Lid ORDER BY LGorder";
print STDERR $select,"\n" if $trace;
$lgh = $Dbh->query($select) || die $select."\n".$Dbh->errmsg();
for(1..$lgh->numrows) {
	local(*entry);
	local(*std);
	local(*mangle);
	%entry=$lgh->fetchhash;
	$LGid=$entry{'LGid'};
	$LGname=$entry{'LGname'};

	print "<SECT2>\n";
	print "<!--libgroup-->\n";
	print "<TITLE>";
	print $LGname;
	print "</TITLE>\n";
	print "<PARA>\n";
	print "</PARA>\n";
#
# 8) For each group, make a table of the interfaces
#
{
	local(*entry);
	local(*symver);
	local(*std);
	$select = "SELECT * FROM Interface ";
	$select.= "LEFT JOIN LGInt ON Iid=LGIint ";
	$select.= "LEFT JOIN ArchInt ON Iid=AIint ";
	$select.= "LEFT JOIN Version ON Vid=AIversion ";
	$select.= "WHERE LGIlibg=$LGid AND Itype='Function' ";
	$select.= "AND Istatus='Included' ";
	$select.= "AND ( AIarch=$Aid OR Iarch=$Aid ) ";
	$select.= "ORDER BY Iname";
	$inh = $Dbh->query($select) || die $select."\n".$Dbh->errmsg();
	print STDERR $select,"\n" if $trace;
	$i=0;
	for(1..$inh->numrows) {
		%entry=$inh->fetchhash;
		if( $entry[$i] ne $entry{'Iname'} ) {
			$i++;
		}
		$entry[$i]=$entry{'Iname'};
		if( $entry{'AIarch'} == $Aid ) { 
			$symver[$i]=$entry{'Vname'};
		}
		$std[$i]=$entry{'Istandard'};
	}
	if( $i > 0 ) {
		output_table($i,*entry,*symver,*std,"$Lname - $LGname Function Interfaces");
		}
}
#
# 9) For each group, make a table of the deprecated interfaces
#
{
	local(*entry);
	local(*symver);
	local(*std);
	$select = "SELECT * FROM Interface ";
	$select.= "LEFT JOIN LGInt ON Iid=LGIint ";
	$select.= "LEFT JOIN ArchInt ON Iid=AIint ";
	$select.= "LEFT JOIN Version ON Vid=AIversion ";
	$select.= "WHERE LGIlibg=$LGid AND Itype='Function' ";
	$select.= "AND Istatus='Deprecated' ";
	$select.= "AND ( AIarch=$Aid OR Iarch=$Aid ) ";
	$select.= "ORDER BY Iname";
	$inh = $Dbh->query($select) || die $select."\n".$Dbh->errmsg();
	print STDERR $select,"\n" if $trace;
	$i=0;
	for(1..$inh->numrows) {
		%entry=$inh->fetchhash;
		if( $entry[$i] ne $entry{'Iname'} ) {
			$i++;
		}
		$entry[$i]=$entry{'Iname'};
		if( $entry{'AIarch'} == $Aid ) { 
			$symver[$i]=$entry{'Vname'};
		}
		$std[$i]=$entry{'Istandard'};
	}
	if( $i > 0 ) {
		output_table($i,*entry,*symver,*std,"$Lname - $LGname Deprecated Function Interfaces");
		}
}

#
# 10) Make a table of data interfaces
#
{
	local(*sth);
	local(*entry);
	local(*symver);
	local(*std);

	$select = "SELECT DISTINCT * FROM Interface ";
	$select.= "LEFT JOIN LGInt ON Iid=LGIint ";
	$select.= "LEFT JOIN ArchInt ON Iid=AIint ";
	$select.= "LEFT JOIN Version ON Vid=AIversion ";
	$select.= "WHERE LGIlibg=$LGid AND Itype != 'Function' ";
	$select.= "AND Istatus='Included' ";
	$select.= "AND ( AIarch=$Aid OR Iarch=$Aid ) ";
	$select.= "ORDER BY Iname";
	print STDERR $select,"\n" if $trace;
	$sth = $Dbh->query($select) || die $select."\n".$Dbh->errmsg();
	$i=0;
	for(1..$sth->numrows) {
		%entry=$sth->fetchhash;
		if( $entry[$i] ne $entry{'Iname'} ) {
			$i++;
		}
		$entry[$i]=$entry{'Iname'};
		if( $entry{'AIarch'} == $Aid ) { 
			$symver[$i]=$entry{'Vname'};
		}
		$std[$i]=$entry{'Istandard'};
	}
	if( $i > 0 ) {
		print "<!--libgroupdata-->\n";
		output_table($i,*entry,*symver,*std,"$Lname - $LGname Data Interfaces");
		}
}
#
# 11) Make a table of deprecated data interfaces
#
{
	local(*sth);
	local(*entry);
	local(*symver);
	local(*std);

	$select = "SELECT DISTINCT * FROM Interface ";
	$select.= "LEFT JOIN LGInt ON Iid=LGIint ";
	$select.= "LEFT JOIN ArchInt ON Iid=AIint ";
	$select.= "LEFT JOIN Version ON Vid=AIversion ";
	$select.= "WHERE LGIlibg=$LGid AND Itype != 'Function' ";
	$select.= "AND Istatus='Deprecated' ";
	$select.= "AND ( AIarch=$Aid OR Iarch=$Aid ) ";
	$select.= "ORDER BY Iname";
	print STDERR $select,"\n" if $trace;
	$sth = $Dbh->query($select) || die $select."\n".$Dbh->errmsg();
	$i=0;
	for(1..$sth->numrows) {
		%entry=$sth->fetchhash;
		if( $entry[$i] ne $entry{'Iname'} ) {
			$i++;
		}
		$entry[$i]=$entry{'Iname'};
		if( $entry{'AIarch'} == $Aid ) { 
			$symver[$i]=$entry{'Vname'};
		}
		$std[$i]=$entry{'Istandard'};
	}
	if( $i > 0 ) {
		print "<!--libgroupdata-->\n";
		output_table($i,*entry,*symver,*std,"$Lname - $LGname Deprecated Data Interfaces");
		}

}
	print "</SECT2>\n";
}

print "</SECT1>\n";

#
# List the data definitions by including the related headers here
#
#
# Now, get a list of all headers associate with this library
#
$select = "SELECT DISTINCT Hname,Hid FROM Header,LibGroup,LGInt,Interface ";
$select.= "WHERE Hid=Iheader AND Iid=LGIint AND LGIlibg=LGid ";
$select.= "AND LGlib=$Lid ORDER BY Hname";
$hdh = $Dbh->query($select) || die $select."\n".$Dbh->errmsg();
if( $hdh->numrows ) {
	print "<SECT1 ID=", $libname, "-ddefs>\n";
	print "<TITLE>Data Definitions for ", $Lname, "</TITLE>\n";
	print "<PARA>\n";
	print "This section contains standard data definitions that describe ";
	print "system data. These definitions are organized into groups that ";
	print "correspond to system headers. This convention is used as a ";
	print "convenience for the reader, and does not imply the existence ";
	print "of these headers, or their content.";
	print "</PARA>\n";
	print "<PARA>\n";
	print "ISO C serves as the LSB reference programming language, and ";
	print "data definitions are specified in ISO C format. The C language ";
	print "is used here as a convenient notation. Using a C language ";
	print "description of these data objects does not preclude their use ";
	print "by other programming languages.";
	print "</PARA>\n";
	for(1..$hdh->numrows) {
		local(*entry);
		%entry=$hdh->fetchhash;
		$Hname=$entry{'Hname'};
		$headname="../../../src/include//$archname/".$Hname.".defs";
		open(HEADER,"<".$headname) ||
			open(HEADER,"<../".$headname) ||
			next;
		if( -s HEADER ) { # Make sure it's not empty
			print "<SECT2>\n";
			print "<TITLE>";
			print $entry{'Hname'};
			print "</TITLE>\n";
			print "<PARA>\n";
			print "</PARA>\n";
			print "<SCREEN>\n";
			while(<HEADER>) {
				print $_;
				}
			print "</SCREEN>\n";
			print "</SECT2>\n";
		}
	}
	print "</SECT1>\n";
}
#
# List the Interface Definitions of things specified by the LSB document.
#
$select = "SELECT Iname,Istandard FROM Interface ";
$select.= "LEFT JOIN LGInt ON Iid=LGIint ";
$select.= "LEFT JOIN LibGroup ON LGid=LGIlibg ";
$select.= "LEFT JOIN Library ON Lid=LGlib ";
$select.= "LEFT JOIN Standard ON Sid=Istandard ";
$select.= "WHERE Lid=$Lid AND Iarch=$Aid ";
$select.= "AND ( Istatus='Included' OR Istatus='Deprecated' ) ";
$select.= "AND Sname='LSB'";
$select.= "ORDER BY Iname";
print STDERR $select,"\n" if $trace;
$sth = $Dbh->query($select) || die $select."\n".$Dbh->errmsg();
if($sth->numrows) {
	print "<SECT1 ID=", $libname, "man>\n";
	print "<TITLE>Interfaces Definitions for ", $libname, "</TITLE>\n";
	print "<PARA>\n";
	print "</PARA>\n";

	for(1..$sth->numrows) {
		local(*entry);
		%entry=$sth->fetchhash;
		# NB: Footnotes must be unique across the entire document
		print "include(".$entry{'Iname'}.".sgml)\n";
	}
	print "</SECT1>\n";
}


printf("<!-- End of text generated from database -->\n");
printf("<!--    by \$Header: /home/mats.deb/cvsrepo/lsb/lsbspec.smaller/mklibspec,v 1.46 2002-09-24 13:10:00 anderson Exp $- -->\n");
