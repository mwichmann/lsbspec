<!-- Start of generated text - do not edit! -->
<!-- generated from the LSB specification database by mklibspec -->
<SECT1 ID=libgmodule-2.0>
<TITLE>Interfaces for libgmodule-2.0</TITLE>
<PARA>
<XREF LINKEND="lib-libgmodule-2.0-def"> defines the library name and shared object name
for the libgmodule-2.0 library
</PARA>
<TABLE id="lib-libgmodule-2.0-def">
<TITLE>libgmodule-2.0 Definition</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Library:</ENTRY>
<ENTRY>libgmodule-2.0</ENTRY>
</ROW>
<ROW>
<ENTRY>SONAME:</ENTRY>
<ENTRY>libgmodule-2.0.so.0</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The behavior of the interfaces in this library is specified by the following specifications:<SIMPLELIST COLUMNS=1>
<MEMBER ID='REFSTD.libgmodule.2.0.1'>
[Glib 2.32] <XREF LINKEND="std.Glib">
</MEMBER>
</SIMPLELIST>
</PARA>
<!-- debug: database interface name Glib-Dynamic loading of Modules -->
<SECT2>
<!--libgroup-->
<TITLE>Glib-Dynamic loading of Modules</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for Glib-Dynamic loading of Modules</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic functions
for Glib-Dynamic loading of Modules specified in <XREF linkend="tbl-libgmodule-2.0-glib-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<TABLE id="tbl-libgmodule-2.0-glib-ints">
<TITLE>libgmodule-2.0 - Glib-Dynamic loading of Modules Function Interfaces</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY><indexterm><primary>g_module_build_path</primary></indexterm>g_module_build_path <LINK LINKEND="REFSTD.libgmodule.2.0.1">[Glib 2.32]</LINK></ENTRY>
<ENTRY><indexterm><primary>g_module_close</primary></indexterm>g_module_close <LINK LINKEND="REFSTD.libgmodule.2.0.1">[Glib 2.32]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>g_module_error</primary></indexterm>g_module_error <LINK LINKEND="REFSTD.libgmodule.2.0.1">[Glib 2.32]</LINK></ENTRY>
<ENTRY><indexterm><primary>g_module_make_resident</primary></indexterm>g_module_make_resident <LINK LINKEND="REFSTD.libgmodule.2.0.1">[Glib 2.32]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>g_module_name</primary></indexterm>g_module_name <LINK LINKEND="REFSTD.libgmodule.2.0.1">[Glib 2.32]</LINK></ENTRY>
<ENTRY><indexterm><primary>g_module_open</primary></indexterm>g_module_open <LINK LINKEND="REFSTD.libgmodule.2.0.1">[Glib 2.32]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>g_module_supported</primary></indexterm>g_module_supported <LINK LINKEND="REFSTD.libgmodule.2.0.1">[Glib 2.32]</LINK></ENTRY>
<ENTRY><indexterm><primary>g_module_symbol</primary></indexterm>g_module_symbol <LINK LINKEND="REFSTD.libgmodule.2.0.1">[Glib 2.32]</LINK></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>
</SECT2>
</SECT1>
<SECT1 ID=libgmodule-2.0-ddefs>
<TITLE>Data Definitions for libgmodule-2.0</TITLE>
<PARA>
This section defines global identifiers and their values that are associated
with interfaces contained in libgmodule-2.0.
These definitions are organized into groups that
correspond to system headers. This convention is used as a
convenience for the reader, and does not imply the existence
of these headers, or their content.
Where an interface is defined as requiring a particular system header file
all of the data definitions for that system header file presented here shall be in effect.
</PARA>
<PARA>
This section gives data definitions to promote binary application
portability, not to repeat source interface definitions available
elsewhere. System providers and application developers should use this ABI
to supplement - not to replace - source interface definition specifications.
</PARA>
<PARA>
This specification uses the <XREF LINKEND='std.ISOC99'> C Language as the reference programming language, and data definitions are specified in ISO C format. The C language is used here as a convenient notation. Using a C language description of these data objects does not preclude their use by other programming languages.</PARA>
<SECT2>
<TITLE>glib-2.0/gmodule.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define G_MODULE_EXPORT
#define G_MODULE_IMPORT	extern

typedef struct _GModule GModule;
typedef enum {
    G_MODULE_BIND_LAZY = 1 &lt;&lt; 0,
    G_MODULE_BIND_LOCAL = 1 &lt;&lt; 1,
    G_MODULE_BIND_MASK = 0x03
} GModuleFlags;
typedef void (*GModuleUnload) (GModule *);
typedef const gchar *(*GModuleCheckInit) (GModule *);
extern gchar *g_module_build_path(const gchar * directory,
				  const gchar * module_name);
extern gboolean g_module_close(GModule * module);
extern const gchar *g_module_error(void);
extern void g_module_make_resident(GModule * module);
extern const gchar *g_module_name(GModule * module);
extern GModule *g_module_open(const gchar * file_name, GModuleFlags flags);
extern gboolean g_module_supported(void);
extern gboolean g_module_symbol(GModule * module,
				const gchar * symbol_name,
				gpointer * symbol);
</SCREEN>
</SECT2>
</SECT1>
<!-- End of text generated from database -->
