<!-- Start of generated text - do not edit! -->
<!-- generated from the LSB specification database by mklibspec -->
<SECT1 ID=libpangoxft-1.0>
<TITLE>Interfaces for libpangoxft-1.0</TITLE>
<PARA>
<XREF LINKEND="lib-libpangoxft-1.0-def"> defines the library name and shared object name
for the libpangoxft-1.0 library
</PARA>
<TABLE id="lib-libpangoxft-1.0-def">
<TITLE>libpangoxft-1.0 Definition</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Library:</ENTRY>
<ENTRY>libpangoxft-1.0</ENTRY>
</ROW>
<ROW>
<ENTRY>SONAME:</ENTRY>
<ENTRY>libpangoxft-1.0.so.0</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The behavior of the interfaces in this library is specified by the following specifications:<SIMPLELIST COLUMNS=1>
<MEMBER ID='REFSTD.libpangoxft.1.0.1'>
[Gobject 2.32] <XREF LINKEND="std.Gobject">
</MEMBER>
</SIMPLELIST>
</PARA>
<!-- debug: database interface name Pango Xft Fonts and Rendering library -->
<SECT2>
<!--libgroup-->
<TITLE>Pango Xft Fonts and Rendering library</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for Pango Xft Fonts and Rendering library</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic functions
for Pango Xft Fonts and Rendering library specified in <XREF linkend="tbl-libpangoxft-1.0-pango-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<TABLE id="tbl-libpangoxft-1.0-pango-ints">
<TITLE>libpangoxft-1.0 - Pango Xft Fonts and Rendering library Function Interfaces</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY><indexterm><primary>pango_xft_font_get_type</primary></indexterm>pango_xft_font_get_type <LINK LINKEND="REFSTD.libpangoxft.1.0.1">[Gobject 2.32]</LINK></ENTRY>
<ENTRY><indexterm><primary>pango_xft_font_map_get_type</primary></indexterm>pango_xft_font_map_get_type <LINK LINKEND="REFSTD.libpangoxft.1.0.1">[Gobject 2.32]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>pango_xft_renderer_get_type</primary></indexterm>pango_xft_renderer_get_type <LINK LINKEND="REFSTD.libpangoxft.1.0.1">[Gobject 2.32]</LINK></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>
</SECT2>
</SECT1>
<SECT1 ID=libpangoxft-1.0-ddefs>
<TITLE>Data Definitions for libpangoxft-1.0</TITLE>
<PARA>
This section defines global identifiers and their values that are associated
with interfaces contained in libpangoxft-1.0.
These definitions are organized into groups that
correspond to system headers. This convention is used as a
convenience for the reader, and does not imply the existence
of these headers, or their content.
Where an interface is defined as requiring a particular system header file
all of the data definitions for that system header file presented here shall be in effect.
</PARA>
<PARA>
This section gives data definitions to promote binary application
portability, not to repeat source interface definitions available
elsewhere. System providers and application developers should use this ABI
to supplement - not to replace - source interface definition specifications.
</PARA>
<PARA>
This specification uses the <XREF LINKEND='std.ISOC99'> C Language as the reference programming language, and data definitions are specified in ISO C format. The C language is used here as a convenient notation. Using a C language description of these data objects does not preclude their use by other programming languages.</PARA>
<SECT2>
<TITLE>pango-1.0/pango/pangoxft.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define PANGO_XFT_RENDERER_CLASS(klass)	 \
	(G_TYPE_CHECK_CLASS_CAST ((klass), PANGO_TYPE_XFT_RENDERER, \
	PangoXftRendererClass))
#define PANGO_IS_XFT_RENDERER_CLASS(klass)	 \
	(G_TYPE_CHECK_CLASS_TYPE ((klass), PANGO_TYPE_XFT_RENDERER))
#define PANGO_XFT_FONT(object)	 \
	(G_TYPE_CHECK_INSTANCE_CAST ((object), PANGO_TYPE_XFT_FONT, \
	PangoXftFont))
#define PANGO_XFT_FONT_MAP(object)	 \
	(G_TYPE_CHECK_INSTANCE_CAST ((object), PANGO_TYPE_XFT_FONT_MAP, \
	PangoXftFontMap))
#define PANGO_XFT_RENDERER(object)	 \
	(G_TYPE_CHECK_INSTANCE_CAST ((object), PANGO_TYPE_XFT_RENDERER, \
	PangoXftRenderer))
#define PANGO_XFT_IS_FONT(object)	 \
	(G_TYPE_CHECK_INSTANCE_TYPE ((object), PANGO_TYPE_XFT_FONT))
#define PANGO_XFT_IS_FONT_MAP(object)	 \
	(G_TYPE_CHECK_INSTANCE_TYPE ((object), PANGO_TYPE_XFT_FONT_MAP))
#define PANGO_IS_XFT_RENDERER(object)	 \
	(G_TYPE_CHECK_INSTANCE_TYPE ((object), PANGO_TYPE_XFT_RENDERER))
#define PANGO_XFT_RENDERER_GET_CLASS(obj)	 \
	(G_TYPE_INSTANCE_GET_CLASS ((obj), PANGO_TYPE_XFT_RENDERER, \
	PangoXftRendererClass))
#define PANGO_TYPE_XFT_FONT	(pango_xft_font_get_type ())
#define PANGO_TYPE_XFT_FONT_MAP	(pango_xft_font_map_get_type ())
#define PANGO_TYPE_XFT_RENDERER	(pango_xft_renderer_get_type())
#define PANGO_RENDER_TYPE_XFT	"PangoRenderXft"

typedef struct _PangoXftRenderer {
    PangoRenderer parent_instance;
    Display *display;
    int screen;
    XftDraw *draw;
    PangoXftRendererPrivate *priv;
} PangoXftRenderer;
typedef void (*PangoXftSubstituteFunc) (FcPattern * pattern,
					gpointer data);
typedef struct _PangoXftFontMap PangoXftFontMap;
typedef struct _PangoXftRendererClass {
    PangoRendererClass parent_class;
    void (*composite_trapezoids) (PangoXftRenderer * xftrenderer,
				  PangoRenderPart part,
				  XTrapezoid * trapezoids,
				  int n_trapezoids);
    void (*composite_glyphs) (PangoXftRenderer * xftrenderer,
			      XftFont * xft_font, XftGlyphSpec * glyphs,
			      int n_glyphs);
} PangoXftRendererClass;
typedef struct _PangoFcFontClass PangoFcFontClass;
typedef struct _PangoFcFont PangoFcFont;
typedef struct _PangoXftFont PangoXftFont;
typedef struct _PangoXftRendererPrivate PangoXftRendererPrivate;
extern GType pango_xft_font_get_type(void);
extern GType pango_xft_font_map_get_type(void);
extern PangoContext *pango_xft_get_context(Display * display, int screen);
extern PangoFontMap *pango_xft_get_font_map(Display * display, int screen);
extern void pango_xft_picture_render(Display * display,
				     Picture src_picture,
				     Picture dest_picture,
				     PangoFont * font,
				     PangoGlyphString * glyphs, gint x,
				     gint y);
extern void pango_xft_render(XftDraw * draw, XftColor * color,
			     PangoFont * font, PangoGlyphString * glyphs,
			     gint x, gint y);
extern void pango_xft_render_layout(XftDraw * draw, XftColor * color,
				    PangoLayout * layout, int x, int y);
extern void pango_xft_render_layout_line(XftDraw * draw, XftColor * color,
					 PangoLayoutLine * line, int x,
					 int y);
extern void pango_xft_render_transformed(XftDraw * draw, XftColor * color,
					 PangoMatrix * matrix,
					 PangoFont * font,
					 PangoGlyphString * glyphs, int x,
					 int y);
extern GType pango_xft_renderer_get_type(void);
extern PangoRenderer *pango_xft_renderer_new(Display * display,
					     int screen);
extern void pango_xft_renderer_set_default_color(PangoXftRenderer *
						 xftrenderer,
						 PangoColor *
						 default_color);
extern void pango_xft_renderer_set_draw(PangoXftRenderer * xftrenderer,
					XftDraw * draw);
extern void pango_xft_set_default_substitute(Display * display, int screen,
					     PangoXftSubstituteFunc func,
					     gpointer data,
					     GDestroyNotify notify);
extern void pango_xft_shutdown_display(Display * display, int screen);
extern void pango_xft_substitute_changed(Display * display, int screen);
</SCREEN>
</SECT2>
</SECT1>
<!-- End of text generated from database -->
