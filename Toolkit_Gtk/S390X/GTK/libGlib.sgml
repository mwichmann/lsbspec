<!-- Start of text generated from database -->
<!-- generated from the LSB specification database -->
<!--    by $Header: /cvsroot/lsb/lsbspec/mklibspec,v 1.82 2006/03/29 19:10:18 mats Exp 0 -->
<!--    at Fri Apr  7 03:51:08 2006 -->
<SECT1 ID=libglib-2.0>
<TITLE>Interfaces for libglib-2.0</TITLE>
<PARA>
<XREF LINKEND="lib-libglib-2.0-def"> defines the library name and shared object name
for the libglib-2.0 library
</PARA>
<TABLE id="lib-libglib-2.0-def">
<TITLE>libglib-2.0 Definition</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Library:</ENTRY>
<ENTRY>libglib-2.0</ENTRY>
</ROW>
<ROW>
<ENTRY>SONAME:</ENTRY>
<ENTRY>libglib-2.0.so.0</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
</PARA>
<!-- debug: database interface name GTK General purpose utility library -->
<SECT2>
<!--libgroup-->
<TITLE>GTK General purpose utility library</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for GTK General purpose utility library</TITLE>
<PARA>
No external functions are defined for libglib-2.0 - GTK General purpose utility library
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
</SECT1>
<SECT1 ID=libglib-2.0-ddefs>
<TITLE>Data Definitions for libglib-2.0</TITLE>
<PARA>
This section defines global identifiers and their values that are associated
with interfaces contained in libglib-2.0.
These definitions are organized into groups that
correspond to system headers. This convention is used as a
convenience for the reader, and does not imply the existence
of these headers, or their content.
Where an interface is defined as requiring a particular system header file
all of the data definitions for that system header file presented here shall be in effect.
</PARA>
<PARA>
This section gives data definitions to promote binary application
portability, not to repeat source interface definitions available
elsewhere. System providers and application developers should use this ABI
to supplement - not to replace - source interface definition specifications.
</PARA>
<PARA>
This specification uses the <XREF LINKEND='std.ISOC99'> C Language as the reference programming language, and data definitions are specified in ISO C format. The C language is used here as a convenient notation. Using a C language description of these data objects does not preclude their use by other programming languages.</PARA>
<SECT2>
<TITLE>glib-2.0/glib.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define G_STATIC_MUTEX_INIT	 \
	{ NULL, { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} } }
#define GPOINTER_TO_INT(p)	((glong) (p))
#define GLONG_TO_BE(val)	((glong) GINT64_TO_BE (val))
#define GLONG_TO_LE(val)	((glong) GINT64_TO_LE (val))
#define GINT_TO_POINTER(i)	((gpointer) (glong) (i))
#define GUINT_TO_POINTER(u)	((gpointer) (gulong) (u))
#define GPOINTER_TO_UINT(p)	((gulong) (p))
#define GULONG_TO_BE(val)	((gulong) GUINT64_TO_BE (val))
#define GULONG_TO_LE(val)	((gulong) GUINT64_TO_LE (val))
#define G_GINT64_CONSTANT(val)	(G_GNUC_EXTENSION (val ##L))
#define G_VA_COPY_AS_ARRAY	1
#define GLIB_LSB_PADDING_SIZE	40
#define GLIB_LSB_DATA_SIZE	8
#define GLIB_SIZEOF_LONG	8
#define GLIB_SIZEOF_SIZE_T	8
#define GLIB_SIZEOF_VOID_P	8
#define G_MAXSIZE	G_MAXULONG
#define G_GINT64_MODIFIER	"l"
#define G_GSIZE_MODIFIER	"l"
#define G_GINT64_FORMAT	"li"
#define G_GSSIZE_FORMAT	"li"
#define G_GSIZE_FORMAT	"lu"
#define G_GUINT64_FORMAT	"lu"

typedef long int gint64;
typedef unsigned long int guint64;
typedef long int gssize;
typedef unsigned long int gsize;
</SCREEN>
</SECT2>
<!-- empty header file S390X/glib-2.0/glib/gprintf.h -->
<SECT2>
<TITLE>glib-2.0/glib/gstdio.h</TITLE>
<PARA>
</PARA>
<SCREEN>

/*
 * This header is architecture neutral
 * Please refer to the generic specification for details
 */
</SCREEN>
</SECT2>
</SECT1>
<!-- End of text generated from database -->
<!--    by $Header: /cvsroot/lsb/lsbspec/mklibspec,v 1.82 2006/03/29 19:10:18 mats Exp 0 -->
