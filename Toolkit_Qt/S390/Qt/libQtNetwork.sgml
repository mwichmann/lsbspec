<!-- Start of text generated from database -->
<!-- generated from the LSB specification database -->
<!--    by $Header: /cvsroot/lsb/lsbspec/mklibspec,v 1.78 2006/01/18 19:35:13 rajesh Exp 0 -->
<!--    at Sun Feb  5 21:47:14 2006 -->
<SECT1 ID=libQtNetwork>
<TITLE>Interfaces for libQtNetwork</TITLE>
<PARA>
<XREF LINKEND="lib-libQtNetwork-def"> defines the library name and shared object name
for the libQtNetwork library
</PARA>
<TABLE id="lib-libQtNetwork-def">
<TITLE>libQtNetwork Definition</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Library:</ENTRY>
<ENTRY>libQtNetwork</ENTRY>
</ROW>
<ROW>
<ENTRY>SONAME:</ENTRY>
<ENTRY>libQtNetwork.so.4</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
</PARA>
<!-- debug: database interface name QtNetwork -->
<SECT2>
<!--libgroup-->
<TITLE>QtNetwork</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for QHttpHeader</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the QHttpHeader class
is described by <XREF LINKEND="cls-46739-0">
</PARA>
<!--classdata-->
<TABLE id="cls-46739-0">
<TITLE>Primary vtable for QHttpHeader</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>Virtual Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>RTTI</ENTRY>
<ENTRY><indexterm><primary>typeinfo for QHttpHeader</primary></indexterm>typeinfo for QHttpHeader</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QHttpHeader::~QHttpHeader()</primary></indexterm>QHttpHeader::~QHttpHeader()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QHttpHeader::~QHttpHeader()</primary></indexterm>QHttpHeader::~QHttpHeader()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QHttpHeader::toString() const</primary></indexterm>QHttpHeader::toString() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QHttpHeader::parseLine(QString const&, int)</primary></indexterm>QHttpHeader::parseLine(QString const&, int)</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The Run Time Type Information for the QHttpHeader  class
is described by <XREF LINKEND="rtti-46724">
</PARA>
<!--classdata-->
<TABLE ID="rtti-46724">
<TITLE>typeinfo for QHttpHeader</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Vtable</ENTRY>
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__class_type_info</primary></indexterm>vtable for __cxxabiv1::__class_type_info</ENTRY>
</ROW>
<ROW>
<ENTRY>Name</ENTRY>
<ENTRY><indexterm><primary>typeinfo name for QHttpHeader</primary></indexterm>typeinfo name for QHttpHeader</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>


<SECT3>
<TITLE>Class data for QHttpResponseHeader</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the QHttpResponseHeader class
is described by <XREF LINKEND="cls-46742-0">
</PARA>
<!--classdata-->
<TABLE id="cls-46742-0">
<TITLE>Primary vtable for QHttpResponseHeader</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>Virtual Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>RTTI</ENTRY>
<ENTRY><indexterm><primary>typeinfo for QHttpResponseHeader</primary></indexterm>typeinfo for QHttpResponseHeader</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QHttpResponseHeader::~QHttpResponseHeader()</primary></indexterm>QHttpResponseHeader::~QHttpResponseHeader()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QHttpResponseHeader::~QHttpResponseHeader()</primary></indexterm>QHttpResponseHeader::~QHttpResponseHeader()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QHttpResponseHeader::toString() const</primary></indexterm>QHttpResponseHeader::toString() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QHttpResponseHeader::majorVersion() const</primary></indexterm>QHttpResponseHeader::majorVersion() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QHttpResponseHeader::minorVersion() const</primary></indexterm>QHttpResponseHeader::minorVersion() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QHttpResponseHeader::parseLine(QString const&, int)</primary></indexterm>QHttpResponseHeader::parseLine(QString const&, int)</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The Run Time Type Information for the QHttpResponseHeader  class
is described by <XREF LINKEND="rtti-46727">
</PARA>
<!--classdata-->
<TABLE ID="rtti-46727">
<TITLE>typeinfo for QHttpResponseHeader</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Vtable</ENTRY>
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
</ROW>
<ROW>
<ENTRY>Name</ENTRY>
<ENTRY><indexterm><primary>typeinfo name for QHttpResponseHeader</primary></indexterm>typeinfo name for QHttpResponseHeader</ENTRY>
</ROW>
<ROW>
<ENTRY>basetype:</ENTRY>
<ENTRY><indexterm><primary>typeinfo for QHttpHeader</primary></indexterm>typeinfo for QHttpHeader</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>


<SECT3>
<TITLE>Class data for QHttpRequestHeader</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the QHttpRequestHeader class
is described by <XREF LINKEND="cls-46741-0">
</PARA>
<!--classdata-->
<TABLE id="cls-46741-0">
<TITLE>Primary vtable for QHttpRequestHeader</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>Virtual Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>RTTI</ENTRY>
<ENTRY><indexterm><primary>typeinfo for QHttpRequestHeader</primary></indexterm>typeinfo for QHttpRequestHeader</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QHttpRequestHeader::~QHttpRequestHeader()</primary></indexterm>QHttpRequestHeader::~QHttpRequestHeader()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QHttpRequestHeader::~QHttpRequestHeader()</primary></indexterm>QHttpRequestHeader::~QHttpRequestHeader()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QHttpRequestHeader::toString() const</primary></indexterm>QHttpRequestHeader::toString() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QHttpRequestHeader::majorVersion() const</primary></indexterm>QHttpRequestHeader::majorVersion() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QHttpRequestHeader::minorVersion() const</primary></indexterm>QHttpRequestHeader::minorVersion() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QHttpRequestHeader::parseLine(QString const&, int)</primary></indexterm>QHttpRequestHeader::parseLine(QString const&, int)</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The Run Time Type Information for the QHttpRequestHeader  class
is described by <XREF LINKEND="rtti-46726">
</PARA>
<!--classdata-->
<TABLE ID="rtti-46726">
<TITLE>typeinfo for QHttpRequestHeader</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Vtable</ENTRY>
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
</ROW>
<ROW>
<ENTRY>Name</ENTRY>
<ENTRY><indexterm><primary>typeinfo name for QHttpRequestHeader</primary></indexterm>typeinfo name for QHttpRequestHeader</ENTRY>
</ROW>
<ROW>
<ENTRY>basetype:</ENTRY>
<ENTRY><indexterm><primary>typeinfo for QHttpHeader</primary></indexterm>typeinfo for QHttpHeader</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>


<SECT3>
<TITLE>Class data for QHttp</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the QHttp class
is described by <XREF LINKEND="cls-46749-0">
</PARA>
<!--classdata-->
<TABLE id="cls-46749-0">
<TITLE>Primary vtable for QHttp</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>Virtual Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>RTTI</ENTRY>
<ENTRY><indexterm><primary>typeinfo for QHttp</primary></indexterm>typeinfo for QHttp</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QHttp::metaObject() const</primary></indexterm>QHttp::metaObject() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QHttp::qt_metacast(char const*)</primary></indexterm>QHttp::qt_metacast(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QHttp::qt_metacall(QMetaObject::Call, int, void**)</primary></indexterm>QHttp::qt_metacall(QMetaObject::Call, int, void**)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QHttp::~QHttp()</primary></indexterm>QHttp::~QHttp()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QHttp::~QHttp()</primary></indexterm>QHttp::~QHttp()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::event(QEvent*)</primary></indexterm>QObject::event(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::eventFilter(QObject*, QEvent*)</primary></indexterm>QObject::eventFilter(QObject*, QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::timerEvent(QTimerEvent*)</primary></indexterm>QObject::timerEvent(QTimerEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::childEvent(QChildEvent*)</primary></indexterm>QObject::childEvent(QChildEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::customEvent(QEvent*)</primary></indexterm>QObject::customEvent(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::connectNotify(char const*)</primary></indexterm>QObject::connectNotify(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;11&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::disconnectNotify(char const*)</primary></indexterm>QObject::disconnectNotify(char const*)</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The Run Time Type Information for the QHttp  class
is described by <XREF LINKEND="rtti-46734">
</PARA>
<!--classdata-->
<TABLE ID="rtti-46734">
<TITLE>typeinfo for QHttp</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Vtable</ENTRY>
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
</ROW>
<ROW>
<ENTRY>Name</ENTRY>
<ENTRY><indexterm><primary>typeinfo name for QHttp</primary></indexterm>typeinfo name for QHttp</ENTRY>
</ROW>
<ROW>
<ENTRY>basetype:</ENTRY>
<ENTRY><indexterm><primary>typeinfo for QObject</primary></indexterm>typeinfo for QObject</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>


<SECT3>
<TITLE>Class data for QAbstractSocket</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the QAbstractSocket class
is described by <XREF LINKEND="cls-46740-0">
</PARA>
<!--classdata-->
<TABLE id="cls-46740-0">
<TITLE>Primary vtable for QAbstractSocket</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>Virtual Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>RTTI</ENTRY>
<ENTRY><indexterm><primary>typeinfo for QAbstractSocket</primary></indexterm>typeinfo for QAbstractSocket</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::metaObject() const</primary></indexterm>QAbstractSocket::metaObject() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::qt_metacast(char const*)</primary></indexterm>QAbstractSocket::qt_metacast(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::qt_metacall(QMetaObject::Call, int, void**)</primary></indexterm>QAbstractSocket::qt_metacall(QMetaObject::Call, int, void**)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::~QAbstractSocket()</primary></indexterm>QAbstractSocket::~QAbstractSocket()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::~QAbstractSocket()</primary></indexterm>QAbstractSocket::~QAbstractSocket()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::event(QEvent*)</primary></indexterm>QObject::event(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::eventFilter(QObject*, QEvent*)</primary></indexterm>QObject::eventFilter(QObject*, QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::timerEvent(QTimerEvent*)</primary></indexterm>QObject::timerEvent(QTimerEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::childEvent(QChildEvent*)</primary></indexterm>QObject::childEvent(QChildEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::customEvent(QEvent*)</primary></indexterm>QObject::customEvent(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::connectNotify(char const*)</primary></indexterm>QObject::connectNotify(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;11&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::disconnectNotify(char const*)</primary></indexterm>QObject::disconnectNotify(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;12&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::isSequential() const</primary></indexterm>QAbstractSocket::isSequential() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;13&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::open(QFlags&lt;QIODevice::OpenModeFlag&gt;)</primary></indexterm>QIODevice::open(QFlags&lt;QIODevice::OpenModeFlag&gt;)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;14&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::close()</primary></indexterm>QAbstractSocket::close()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;15&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::pos() const</primary></indexterm>QIODevice::pos() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;16&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::size() const</primary></indexterm>QIODevice::size() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;17&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::seek(long long)</primary></indexterm>QIODevice::seek(long long)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;18&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::atEnd() const</primary></indexterm>QAbstractSocket::atEnd() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;19&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::reset()</primary></indexterm>QIODevice::reset()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;20&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::bytesAvailable() const</primary></indexterm>QAbstractSocket::bytesAvailable() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;21&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::bytesToWrite() const</primary></indexterm>QAbstractSocket::bytesToWrite() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;22&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::canReadLine() const</primary></indexterm>QAbstractSocket::canReadLine() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;23&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::waitForReadyRead(int)</primary></indexterm>QAbstractSocket::waitForReadyRead(int)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;24&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::waitForBytesWritten(int)</primary></indexterm>QAbstractSocket::waitForBytesWritten(int)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;25&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::readData(char*, long long)</primary></indexterm>QAbstractSocket::readData(char*, long long)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;26&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::readLineData(char*, long long)</primary></indexterm>QAbstractSocket::readLineData(char*, long long)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;27&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::writeData(char const*, long long)</primary></indexterm>QAbstractSocket::writeData(char const*, long long)</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The Run Time Type Information for the QAbstractSocket  class
is described by <XREF LINKEND="rtti-46725">
</PARA>
<!--classdata-->
<TABLE ID="rtti-46725">
<TITLE>typeinfo for QAbstractSocket</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Vtable</ENTRY>
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
</ROW>
<ROW>
<ENTRY>Name</ENTRY>
<ENTRY><indexterm><primary>typeinfo name for QAbstractSocket</primary></indexterm>typeinfo name for QAbstractSocket</ENTRY>
</ROW>
<ROW>
<ENTRY>basetype:</ENTRY>
<ENTRY><indexterm><primary>typeinfo for QIODevice</primary></indexterm>typeinfo for QIODevice</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>


<SECT3>
<TITLE>Class data for QUrlInfo</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the QUrlInfo class
is described by <XREF LINKEND="cls-46750-0">
</PARA>
<!--classdata-->
<TABLE id="cls-46750-0">
<TITLE>Primary vtable for QUrlInfo</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>Virtual Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>RTTI</ENTRY>
<ENTRY><indexterm><primary>typeinfo for QUrlInfo</primary></indexterm>typeinfo for QUrlInfo</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QUrlInfo::~QUrlInfo()</primary></indexterm>QUrlInfo::~QUrlInfo()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QUrlInfo::~QUrlInfo()</primary></indexterm>QUrlInfo::~QUrlInfo()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QUrlInfo::setName(QString const&)</primary></indexterm>QUrlInfo::setName(QString const&)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QUrlInfo::setDir(bool)</primary></indexterm>QUrlInfo::setDir(bool)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QUrlInfo::setFile(bool)</primary></indexterm>QUrlInfo::setFile(bool)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QUrlInfo::setSymLink(bool)</primary></indexterm>QUrlInfo::setSymLink(bool)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QUrlInfo::setOwner(QString const&)</primary></indexterm>QUrlInfo::setOwner(QString const&)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QUrlInfo::setGroup(QString const&)</primary></indexterm>QUrlInfo::setGroup(QString const&)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QUrlInfo::setSize(long long)</primary></indexterm>QUrlInfo::setSize(long long)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QUrlInfo::setWritable(bool)</primary></indexterm>QUrlInfo::setWritable(bool)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QUrlInfo::setReadable(bool)</primary></indexterm>QUrlInfo::setReadable(bool)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;11&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QUrlInfo::setPermissions(int)</primary></indexterm>QUrlInfo::setPermissions(int)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;12&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QUrlInfo::setLastModified(QDateTime const&)</primary></indexterm>QUrlInfo::setLastModified(QDateTime const&)</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The Run Time Type Information for the QUrlInfo  class
is described by <XREF LINKEND="rtti-46735">
</PARA>
<!--classdata-->
<TABLE ID="rtti-46735">
<TITLE>typeinfo for QUrlInfo</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Vtable</ENTRY>
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__class_type_info</primary></indexterm>vtable for __cxxabiv1::__class_type_info</ENTRY>
</ROW>
<ROW>
<ENTRY>Name</ENTRY>
<ENTRY><indexterm><primary>typeinfo name for QUrlInfo</primary></indexterm>typeinfo name for QUrlInfo</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>


<SECT3>
<TITLE>Class data for QFtp</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the QFtp class
is described by <XREF LINKEND="cls-46748-0">
</PARA>
<!--classdata-->
<TABLE id="cls-46748-0">
<TITLE>Primary vtable for QFtp</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>Virtual Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>RTTI</ENTRY>
<ENTRY><indexterm><primary>typeinfo for QFtp</primary></indexterm>typeinfo for QFtp</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFtp::metaObject() const</primary></indexterm>QFtp::metaObject() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFtp::qt_metacast(char const*)</primary></indexterm>QFtp::qt_metacast(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFtp::qt_metacall(QMetaObject::Call, int, void**)</primary></indexterm>QFtp::qt_metacall(QMetaObject::Call, int, void**)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFtp::~QFtp()</primary></indexterm>QFtp::~QFtp()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFtp::~QFtp()</primary></indexterm>QFtp::~QFtp()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::event(QEvent*)</primary></indexterm>QObject::event(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::eventFilter(QObject*, QEvent*)</primary></indexterm>QObject::eventFilter(QObject*, QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::timerEvent(QTimerEvent*)</primary></indexterm>QObject::timerEvent(QTimerEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::childEvent(QChildEvent*)</primary></indexterm>QObject::childEvent(QChildEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::customEvent(QEvent*)</primary></indexterm>QObject::customEvent(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::connectNotify(char const*)</primary></indexterm>QObject::connectNotify(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;11&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::disconnectNotify(char const*)</primary></indexterm>QObject::disconnectNotify(char const*)</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The Run Time Type Information for the QFtp  class
is described by <XREF LINKEND="rtti-46733">
</PARA>
<!--classdata-->
<TABLE ID="rtti-46733">
<TITLE>typeinfo for QFtp</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Vtable</ENTRY>
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
</ROW>
<ROW>
<ENTRY>Name</ENTRY>
<ENTRY><indexterm><primary>typeinfo name for QFtp</primary></indexterm>typeinfo name for QFtp</ENTRY>
</ROW>
<ROW>
<ENTRY>basetype:</ENTRY>
<ENTRY><indexterm><primary>typeinfo for QObject</primary></indexterm>typeinfo for QObject</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>


<SECT3>
<TITLE>Class data for QTcpServer</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the QTcpServer class
is described by <XREF LINKEND="cls-46736-0">
</PARA>
<!--classdata-->
<TABLE id="cls-46736-0">
<TITLE>Primary vtable for QTcpServer</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>Virtual Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>RTTI</ENTRY>
<ENTRY><indexterm><primary>typeinfo for QTcpServer</primary></indexterm>typeinfo for QTcpServer</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QTcpServer::metaObject() const</primary></indexterm>QTcpServer::metaObject() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QTcpServer::qt_metacast(char const*)</primary></indexterm>QTcpServer::qt_metacast(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QTcpServer::qt_metacall(QMetaObject::Call, int, void**)</primary></indexterm>QTcpServer::qt_metacall(QMetaObject::Call, int, void**)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QTcpServer::~QTcpServer()</primary></indexterm>QTcpServer::~QTcpServer()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QTcpServer::~QTcpServer()</primary></indexterm>QTcpServer::~QTcpServer()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::event(QEvent*)</primary></indexterm>QObject::event(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::eventFilter(QObject*, QEvent*)</primary></indexterm>QObject::eventFilter(QObject*, QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::timerEvent(QTimerEvent*)</primary></indexterm>QObject::timerEvent(QTimerEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::childEvent(QChildEvent*)</primary></indexterm>QObject::childEvent(QChildEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::customEvent(QEvent*)</primary></indexterm>QObject::customEvent(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::connectNotify(char const*)</primary></indexterm>QObject::connectNotify(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;11&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::disconnectNotify(char const*)</primary></indexterm>QObject::disconnectNotify(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;12&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QTcpServer::hasPendingConnections() const</primary></indexterm>QTcpServer::hasPendingConnections() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;13&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QTcpServer::nextPendingConnection()</primary></indexterm>QTcpServer::nextPendingConnection()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;14&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QTcpServer::incomingConnection(int)</primary></indexterm>QTcpServer::incomingConnection(int)</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The Run Time Type Information for the QTcpServer  class
is described by <XREF LINKEND="rtti-46721">
</PARA>
<!--classdata-->
<TABLE ID="rtti-46721">
<TITLE>typeinfo for QTcpServer</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Vtable</ENTRY>
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
</ROW>
<ROW>
<ENTRY>Name</ENTRY>
<ENTRY><indexterm><primary>typeinfo name for QTcpServer</primary></indexterm>typeinfo name for QTcpServer</ENTRY>
</ROW>
<ROW>
<ENTRY>basetype:</ENTRY>
<ENTRY><indexterm><primary>typeinfo for QObject</primary></indexterm>typeinfo for QObject</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>


<SECT3>
<TITLE>Class data for QUdpSocket</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the QUdpSocket class
is described by <XREF LINKEND="cls-46738-0">
</PARA>
<!--classdata-->
<TABLE id="cls-46738-0">
<TITLE>Primary vtable for QUdpSocket</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>Virtual Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>RTTI</ENTRY>
<ENTRY><indexterm><primary>typeinfo for QUdpSocket</primary></indexterm>typeinfo for QUdpSocket</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QUdpSocket::metaObject() const</primary></indexterm>QUdpSocket::metaObject() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QUdpSocket::qt_metacast(char const*)</primary></indexterm>QUdpSocket::qt_metacast(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QUdpSocket::qt_metacall(QMetaObject::Call, int, void**)</primary></indexterm>QUdpSocket::qt_metacall(QMetaObject::Call, int, void**)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QUdpSocket::~QUdpSocket()</primary></indexterm>QUdpSocket::~QUdpSocket()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QUdpSocket::~QUdpSocket()</primary></indexterm>QUdpSocket::~QUdpSocket()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::event(QEvent*)</primary></indexterm>QObject::event(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::eventFilter(QObject*, QEvent*)</primary></indexterm>QObject::eventFilter(QObject*, QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::timerEvent(QTimerEvent*)</primary></indexterm>QObject::timerEvent(QTimerEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::childEvent(QChildEvent*)</primary></indexterm>QObject::childEvent(QChildEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::customEvent(QEvent*)</primary></indexterm>QObject::customEvent(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::connectNotify(char const*)</primary></indexterm>QObject::connectNotify(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;11&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::disconnectNotify(char const*)</primary></indexterm>QObject::disconnectNotify(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;12&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::isSequential() const</primary></indexterm>QAbstractSocket::isSequential() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;13&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::open(QFlags&lt;QIODevice::OpenModeFlag&gt;)</primary></indexterm>QIODevice::open(QFlags&lt;QIODevice::OpenModeFlag&gt;)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;14&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::close()</primary></indexterm>QAbstractSocket::close()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;15&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::pos() const</primary></indexterm>QIODevice::pos() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;16&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::size() const</primary></indexterm>QIODevice::size() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;17&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::seek(long long)</primary></indexterm>QIODevice::seek(long long)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;18&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::atEnd() const</primary></indexterm>QAbstractSocket::atEnd() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;19&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::reset()</primary></indexterm>QIODevice::reset()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;20&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::bytesAvailable() const</primary></indexterm>QAbstractSocket::bytesAvailable() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;21&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::bytesToWrite() const</primary></indexterm>QAbstractSocket::bytesToWrite() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;22&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::canReadLine() const</primary></indexterm>QAbstractSocket::canReadLine() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;23&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::waitForReadyRead(int)</primary></indexterm>QAbstractSocket::waitForReadyRead(int)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;24&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::waitForBytesWritten(int)</primary></indexterm>QAbstractSocket::waitForBytesWritten(int)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;25&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::readData(char*, long long)</primary></indexterm>QAbstractSocket::readData(char*, long long)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;26&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::readLineData(char*, long long)</primary></indexterm>QAbstractSocket::readLineData(char*, long long)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;27&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::writeData(char const*, long long)</primary></indexterm>QAbstractSocket::writeData(char const*, long long)</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The Run Time Type Information for the QUdpSocket  class
is described by <XREF LINKEND="rtti-46723">
</PARA>
<!--classdata-->
<TABLE ID="rtti-46723">
<TITLE>typeinfo for QUdpSocket</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Vtable</ENTRY>
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
</ROW>
<ROW>
<ENTRY>Name</ENTRY>
<ENTRY><indexterm><primary>typeinfo name for QUdpSocket</primary></indexterm>typeinfo name for QUdpSocket</ENTRY>
</ROW>
<ROW>
<ENTRY>basetype:</ENTRY>
<ENTRY><indexterm><primary>typeinfo for QAbstractSocket</primary></indexterm>typeinfo for QAbstractSocket</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>


<SECT3>
<TITLE>Class data for QTcpSocket</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the QTcpSocket class
is described by <XREF LINKEND="cls-46737-0">
</PARA>
<!--classdata-->
<TABLE id="cls-46737-0">
<TITLE>Primary vtable for QTcpSocket</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>Virtual Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>RTTI</ENTRY>
<ENTRY><indexterm><primary>typeinfo for QTcpSocket</primary></indexterm>typeinfo for QTcpSocket</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QTcpSocket::metaObject() const</primary></indexterm>QTcpSocket::metaObject() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QTcpSocket::qt_metacast(char const*)</primary></indexterm>QTcpSocket::qt_metacast(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QTcpSocket::qt_metacall(QMetaObject::Call, int, void**)</primary></indexterm>QTcpSocket::qt_metacall(QMetaObject::Call, int, void**)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QTcpSocket::~QTcpSocket()</primary></indexterm>QTcpSocket::~QTcpSocket()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QTcpSocket::~QTcpSocket()</primary></indexterm>QTcpSocket::~QTcpSocket()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::event(QEvent*)</primary></indexterm>QObject::event(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::eventFilter(QObject*, QEvent*)</primary></indexterm>QObject::eventFilter(QObject*, QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::timerEvent(QTimerEvent*)</primary></indexterm>QObject::timerEvent(QTimerEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::childEvent(QChildEvent*)</primary></indexterm>QObject::childEvent(QChildEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::customEvent(QEvent*)</primary></indexterm>QObject::customEvent(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::connectNotify(char const*)</primary></indexterm>QObject::connectNotify(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;11&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::disconnectNotify(char const*)</primary></indexterm>QObject::disconnectNotify(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;12&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::isSequential() const</primary></indexterm>QAbstractSocket::isSequential() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;13&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::open(QFlags&lt;QIODevice::OpenModeFlag&gt;)</primary></indexterm>QIODevice::open(QFlags&lt;QIODevice::OpenModeFlag&gt;)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;14&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::close()</primary></indexterm>QAbstractSocket::close()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;15&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::pos() const</primary></indexterm>QIODevice::pos() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;16&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::size() const</primary></indexterm>QIODevice::size() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;17&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::seek(long long)</primary></indexterm>QIODevice::seek(long long)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;18&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::atEnd() const</primary></indexterm>QAbstractSocket::atEnd() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;19&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::reset()</primary></indexterm>QIODevice::reset()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;20&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::bytesAvailable() const</primary></indexterm>QAbstractSocket::bytesAvailable() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;21&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::bytesToWrite() const</primary></indexterm>QAbstractSocket::bytesToWrite() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;22&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::canReadLine() const</primary></indexterm>QAbstractSocket::canReadLine() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;23&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::waitForReadyRead(int)</primary></indexterm>QAbstractSocket::waitForReadyRead(int)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;24&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::waitForBytesWritten(int)</primary></indexterm>QAbstractSocket::waitForBytesWritten(int)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;25&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::readData(char*, long long)</primary></indexterm>QAbstractSocket::readData(char*, long long)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;26&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::readLineData(char*, long long)</primary></indexterm>QAbstractSocket::readLineData(char*, long long)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;27&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::writeData(char const*, long long)</primary></indexterm>QAbstractSocket::writeData(char const*, long long)</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The Run Time Type Information for the QTcpSocket  class
is described by <XREF LINKEND="rtti-46722">
</PARA>
<!--classdata-->
<TABLE ID="rtti-46722">
<TITLE>typeinfo for QTcpSocket</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Vtable</ENTRY>
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
</ROW>
<ROW>
<ENTRY>Name</ENTRY>
<ENTRY><indexterm><primary>typeinfo name for QTcpSocket</primary></indexterm>typeinfo name for QTcpSocket</ENTRY>
</ROW>
<ROW>
<ENTRY>basetype:</ENTRY>
<ENTRY><indexterm><primary>typeinfo for QAbstractSocket</primary></indexterm>typeinfo for QAbstractSocket</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>


<SECT3>
<TITLE>Interfaces for QtNetwork</TITLE>
<PARA>
No external functions are defined for libQtNetwork - QtNetwork
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
</SECT1>
<SECT1 ID=libQtNetwork-ddefs>
<TITLE>Data Definitions for libQtNetwork</TITLE>
<PARA>
This section defines global identifiers and their values that are associated
with interfaces contained in libQtNetwork.
These definitions are organized into groups that
correspond to system headers. This convention is used as a
convenience for the reader, and does not imply the existence
of these headers, or their content.
Where an interface is defined as requiring a particular system header file
all of the data definitions for that system header file presented here shall be in effect.
</PARA>
<PARA>
This section gives data definitions to promote binary application
portability, not to repeat source interface definitions available
elsewhere. System providers and application developers should use this ABI
to supplement - not to replace - source interface definition specifications.
</PARA>
<PARA>
This specification uses the <XREF LINKEND='std.ISOC99'> C Language as the reference programming language, and data definitions are specified in ISO C format. The C language is used here as a convenient notation. Using a C language description of these data objects does not preclude their use by other programming languages.</PARA>
<SECT2>
<TITLE>QtNetwork/qabstractsocket.h</TITLE>
<PARA>
</PARA>
<SCREEN>

/*
 * This header is architecture neutral
 * Please refer to the generic specification for details
 */
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtNetwork/qftp.h</TITLE>
<PARA>
</PARA>
<SCREEN>

/*
 * This header is architecture neutral
 * Please refer to the generic specification for details
 */
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtNetwork/qhostaddress.h</TITLE>
<PARA>
</PARA>
<SCREEN>

/*
 * This header is architecture neutral
 * Please refer to the generic specification for details
 */
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtNetwork/qhostinfo.h</TITLE>
<PARA>
</PARA>
<SCREEN>

/*
 * This header is architecture neutral
 * Please refer to the generic specification for details
 */
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtNetwork/qhttp.h</TITLE>
<PARA>
</PARA>
<SCREEN>

/*
 * This header is architecture neutral
 * Please refer to the generic specification for details
 */
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtNetwork/qnetworkproxy.h</TITLE>
<PARA>
</PARA>
<SCREEN>

/*
 * This header is architecture neutral
 * Please refer to the generic specification for details
 */
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtNetwork/qtcpserver.h</TITLE>
<PARA>
</PARA>
<SCREEN>

/*
 * This header is architecture neutral
 * Please refer to the generic specification for details
 */
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtNetwork/qtcpsocket.h</TITLE>
<PARA>
</PARA>
<SCREEN>

/*
 * This header is architecture neutral
 * Please refer to the generic specification for details
 */
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtNetwork/qudpsocket.h</TITLE>
<PARA>
</PARA>
<SCREEN>

/*
 * This header is architecture neutral
 * Please refer to the generic specification for details
 */
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtNetwork/qurlinfo.h</TITLE>
<PARA>
</PARA>
<SCREEN>

/*
 * This header is architecture neutral
 * Please refer to the generic specification for details
 */
</SCREEN>
</SECT2>
</SECT1>
<!-- End of text generated from database -->
<!--    by $Header: /cvsroot/lsb/lsbspec/mklibspec,v 1.78 2006/01/18 19:35:13 rajesh Exp 0 -->
