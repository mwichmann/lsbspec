<!-- Start of text generated from database -->
<!-- generated from the LSB specification database -->
<!--    by $Header: /cvsroot/lsb/lsbspec/mklibspec,v 1.76 2005/12/02 01:32:08 nick Exp 0 -->
<!--    at Thu Jan 12 15:05:14 2006 -->
<SECT1 ID=libQtCore>
<TITLE>Interfaces for libQtCore</TITLE>
<PARA>
<XREF LINKEND="lib-libQtCore-def"> defines the library name and shared object name
for the libQtCore library
</PARA>
<TABLE id="lib-libQtCore-def">
<TITLE>libQtCore Definition</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Library:</ENTRY>
<ENTRY>libQtCore</ENTRY>
</ROW>
<ROW>
<ENTRY>SONAME:</ENTRY>
<ENTRY>libQtCore.so.4</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The behavior of the interfaces in this library is specified by the following specifications:<SIMPLELIST COLUMNS=1>
<MEMBER ID='REFSTD.libQtCore.1'>
[QtCore] <XREF LINKEND="std.QtCore">
</MEMBER>
</SIMPLELIST>
</PARA>
<!-- debug: database interface name QtCore -->
<SECT2>
<!--libgroup-->
<TITLE>QtCore</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for QObject</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the QObject class
is described by <XREF LINKEND="cls-301-0">
</PARA>
<!--classdata-->
<TABLE id="cls-301-0">
<TITLE>Primary vtable for QObject</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>Virtual Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>RTTI</ENTRY>
<ENTRY><indexterm><primary>typeinfo for QObject</primary></indexterm>typeinfo for QObject</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::metaObject() const</primary></indexterm>QObject::metaObject() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::qt_metacast(char const*)</primary></indexterm>QObject::qt_metacast(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::qt_metacall(QMetaObject::Call, int, void**)</primary></indexterm>QObject::qt_metacall(QMetaObject::Call, int, void**)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::~QObject()</primary></indexterm>QObject::~QObject()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::~QObject()</primary></indexterm>QObject::~QObject()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::event(QEvent*)</primary></indexterm>QObject::event(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::eventFilter(QObject*, QEvent*)</primary></indexterm>QObject::eventFilter(QObject*, QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::timerEvent(QTimerEvent*)</primary></indexterm>QObject::timerEvent(QTimerEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::childEvent(QChildEvent*)</primary></indexterm>QObject::childEvent(QChildEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::customEvent(QEvent*)</primary></indexterm>QObject::customEvent(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::connectNotify(char const*)</primary></indexterm>QObject::connectNotify(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;11&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::disconnectNotify(char const*)</primary></indexterm>QObject::disconnectNotify(char const*)</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The Run Time Type Information for the QObject  class
is described by <XREF LINKEND="rtti-300">
</PARA>
<!--classdata-->
<TABLE ID="rtti-300">
<TITLE>typeinfo for QObject</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Vtable</ENTRY>
<ENTRY><indexterm><primary></primary></indexterm></ENTRY>
</ROW>
<ROW>
<ENTRY>Name</ENTRY>
<ENTRY><indexterm><primary>typeinfo name for QObject</primary></indexterm>typeinfo name for QObject</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>


<SECT3>
<TITLE>Class data for QDataStream</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the QDataStream class
is described by <XREF LINKEND="cls-302-0">
</PARA>
<!--classdata-->
<TABLE id="cls-302-0">
<TITLE>Primary vtable for QDataStream</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>Virtual Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>RTTI</ENTRY>
<ENTRY><indexterm><primary>typeinfo for QDataStream</primary></indexterm>typeinfo for QDataStream</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QDataStream::~QDataStream()</primary></indexterm>QDataStream::~QDataStream()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QDataStream::~QDataStream()</primary></indexterm>QDataStream::~QDataStream()</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The Run Time Type Information for the QDataStream  class
is described by <XREF LINKEND="rtti-303">
</PARA>
<!--classdata-->
<TABLE ID="rtti-303">
<TITLE>typeinfo for QDataStream</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Vtable</ENTRY>
<ENTRY><indexterm><primary></primary></indexterm></ENTRY>
</ROW>
<ROW>
<ENTRY>Name</ENTRY>
<ENTRY><indexterm><primary>typeinfo name for QDataStream</primary></indexterm>typeinfo name for QDataStream</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>


<SECT3>
<TITLE>Class data for QThread</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the QThread class
is described by <XREF LINKEND="cls-304-0">
</PARA>
<!--classdata-->
<TABLE id="cls-304-0">
<TITLE>Primary vtable for QThread</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>Virtual Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>RTTI</ENTRY>
<ENTRY><indexterm><primary>typeinfo for QThread</primary></indexterm>typeinfo for QThread</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QThread::metaObject() const</primary></indexterm>QThread::metaObject() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QThread::qt_metacast(char const*)</primary></indexterm>QThread::qt_metacast(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QThread::qt_metacall(QMetaObject::Call, int, void**)</primary></indexterm>QThread::qt_metacall(QMetaObject::Call, int, void**)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QThread::~QThread()</primary></indexterm>QThread::~QThread()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QThread::~QThread()</primary></indexterm>QThread::~QThread()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::event(QEvent*)</primary></indexterm>QObject::event(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::eventFilter(QObject*, QEvent*)</primary></indexterm>QObject::eventFilter(QObject*, QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::timerEvent(QTimerEvent*)</primary></indexterm>QObject::timerEvent(QTimerEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::childEvent(QChildEvent*)</primary></indexterm>QObject::childEvent(QChildEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::customEvent(QEvent*)</primary></indexterm>QObject::customEvent(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::connectNotify(char const*)</primary></indexterm>QObject::connectNotify(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;11&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::disconnectNotify(char const*)</primary></indexterm>QObject::disconnectNotify(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;12&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The Run Time Type Information for the QThread  class
is described by <XREF LINKEND="rtti-305">
</PARA>
<!--classdata-->
<TABLE ID="rtti-305">
<TITLE>typeinfo for QThread</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Vtable</ENTRY>
<ENTRY><indexterm><primary>vtable for QObject</primary></indexterm>vtable for QObject</ENTRY>
</ROW>
<ROW>
<ENTRY>Name</ENTRY>
<ENTRY><indexterm><primary>typeinfo name for QThread</primary></indexterm>typeinfo name for QThread</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>


<SECT3>
<TITLE>Class data for QObjectUserData</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the QObjectUserData class
is described by <XREF LINKEND="cls-306-0">
</PARA>
<!--classdata-->
<TABLE id="cls-306-0">
<TITLE>Primary vtable for QObjectUserData</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>Virtual Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>RTTI</ENTRY>
<ENTRY><indexterm><primary>typeinfo for QObjectUserData</primary></indexterm>typeinfo for QObjectUserData</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObjectUserData::~QObjectUserData()</primary></indexterm>QObjectUserData::~QObjectUserData()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObjectUserData::~QObjectUserData()</primary></indexterm>QObjectUserData::~QObjectUserData()</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The Run Time Type Information for the QObjectUserData  class
is described by <XREF LINKEND="rtti-307">
</PARA>
<!--classdata-->
<TABLE ID="rtti-307">
<TITLE>typeinfo for QObjectUserData</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Vtable</ENTRY>
<ENTRY><indexterm><primary></primary></indexterm></ENTRY>
</ROW>
<ROW>
<ENTRY>Name</ENTRY>
<ENTRY><indexterm><primary>typeinfo name for QObjectUserData</primary></indexterm>typeinfo name for QObjectUserData</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>


<SECT3>
<TITLE>Class data for QIODevice</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the QIODevice class
is described by <XREF LINKEND="cls-308-0">
</PARA>
<!--classdata-->
<TABLE id="cls-308-0">
<TITLE>Primary vtable for QIODevice</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>Virtual Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>RTTI</ENTRY>
<ENTRY><indexterm><primary>typeinfo for QIODevice</primary></indexterm>typeinfo for QIODevice</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::metaObject() const</primary></indexterm>QIODevice::metaObject() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::qt_metacast(char const*)</primary></indexterm>QIODevice::qt_metacast(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::qt_metacall(QMetaObject::Call, int, void**)</primary></indexterm>QIODevice::qt_metacall(QMetaObject::Call, int, void**)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::~QIODevice()</primary></indexterm>QIODevice::~QIODevice()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::~QIODevice()</primary></indexterm>QIODevice::~QIODevice()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::event(QEvent*)</primary></indexterm>QObject::event(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::eventFilter(QObject*, QEvent*)</primary></indexterm>QObject::eventFilter(QObject*, QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::timerEvent(QTimerEvent*)</primary></indexterm>QObject::timerEvent(QTimerEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::childEvent(QChildEvent*)</primary></indexterm>QObject::childEvent(QChildEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::customEvent(QEvent*)</primary></indexterm>QObject::customEvent(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::connectNotify(char const*)</primary></indexterm>QObject::connectNotify(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;11&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::disconnectNotify(char const*)</primary></indexterm>QObject::disconnectNotify(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;12&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::isSequential() const</primary></indexterm>QIODevice::isSequential() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;13&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::open(QFlags&lt;QIODevice::OpenModeFlag&gt;)</primary></indexterm>QIODevice::open(QFlags&lt;QIODevice::OpenModeFlag&gt;)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;14&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::close()</primary></indexterm>QIODevice::close()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;15&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::pos() const</primary></indexterm>QIODevice::pos() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;16&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::size() const</primary></indexterm>QIODevice::size() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;17&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::seek(long long)</primary></indexterm>QIODevice::seek(long long)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;18&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::atEnd() const</primary></indexterm>QIODevice::atEnd() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;19&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::reset()</primary></indexterm>QIODevice::reset()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;20&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::bytesAvailable() const</primary></indexterm>QIODevice::bytesAvailable() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;21&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::bytesToWrite() const</primary></indexterm>QIODevice::bytesToWrite() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;22&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::canReadLine() const</primary></indexterm>QIODevice::canReadLine() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;23&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::waitForReadyRead(int)</primary></indexterm>QIODevice::waitForReadyRead(int)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;24&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::waitForBytesWritten(int)</primary></indexterm>QIODevice::waitForBytesWritten(int)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;25&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;26&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::readLineData(char*, long long)</primary></indexterm>QIODevice::readLineData(char*, long long)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;27&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The Run Time Type Information for the QIODevice  class
is described by <XREF LINKEND="rtti-309">
</PARA>
<!--classdata-->
<TABLE ID="rtti-309">
<TITLE>typeinfo for QIODevice</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Vtable</ENTRY>
<ENTRY><indexterm><primary>vtable for QObject</primary></indexterm>vtable for QObject</ENTRY>
</ROW>
<ROW>
<ENTRY>Name</ENTRY>
<ENTRY><indexterm><primary>typeinfo name for QIODevice</primary></indexterm>typeinfo name for QIODevice</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>


<SECT3>
<TITLE>Class data for QTextCodec</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the QTextCodec class
is described by <XREF LINKEND="cls-310-0">
</PARA>
<!--classdata-->
<TABLE id="cls-310-0">
<TITLE>Primary vtable for QTextCodec</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>Virtual Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>RTTI</ENTRY>
<ENTRY><indexterm><primary>typeinfo for QTextCodec</primary></indexterm>typeinfo for QTextCodec</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QTextCodec::aliases() const</primary></indexterm>QTextCodec::aliases() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QTextCodec::~QTextCodec()</primary></indexterm>QTextCodec::~QTextCodec()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QTextCodec::~QTextCodec()</primary></indexterm>QTextCodec::~QTextCodec()</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The Run Time Type Information for the QTextCodec  class
is described by <XREF LINKEND="rtti-311">
</PARA>
<!--classdata-->
<TABLE ID="rtti-311">
<TITLE>typeinfo for QTextCodec</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Vtable</ENTRY>
<ENTRY><indexterm><primary></primary></indexterm></ENTRY>
</ROW>
<ROW>
<ENTRY>Name</ENTRY>
<ENTRY><indexterm><primary>typeinfo name for QTextCodec</primary></indexterm>typeinfo name for QTextCodec</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>


<SECT3>
<TITLE>Class data for QTextStream</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the QTextStream class
is described by <XREF LINKEND="cls-312-0">
</PARA>
<!--classdata-->
<TABLE id="cls-312-0">
<TITLE>Primary vtable for QTextStream</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>Virtual Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>RTTI</ENTRY>
<ENTRY><indexterm><primary>typeinfo for QTextStream</primary></indexterm>typeinfo for QTextStream</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QTextStream::~QTextStream()</primary></indexterm>QTextStream::~QTextStream()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QTextStream::~QTextStream()</primary></indexterm>QTextStream::~QTextStream()</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The Run Time Type Information for the QTextStream  class
is described by <XREF LINKEND="rtti-313">
</PARA>
<!--classdata-->
<TABLE ID="rtti-313">
<TITLE>typeinfo for QTextStream</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Vtable</ENTRY>
<ENTRY><indexterm><primary></primary></indexterm></ENTRY>
</ROW>
<ROW>
<ENTRY>Name</ENTRY>
<ENTRY><indexterm><primary>typeinfo name for QTextStream</primary></indexterm>typeinfo name for QTextStream</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>


<SECT3>
<TITLE>Class data for QFile</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the QFile class
is described by <XREF LINKEND="cls-314-0">
</PARA>
<!--classdata-->
<TABLE id="cls-314-0">
<TITLE>Primary vtable for QFile</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>Virtual Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>RTTI</ENTRY>
<ENTRY><indexterm><primary>typeinfo for QFile</primary></indexterm>typeinfo for QFile</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFile::metaObject() const</primary></indexterm>QFile::metaObject() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFile::qt_metacast(char const*)</primary></indexterm>QFile::qt_metacast(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFile::qt_metacall(QMetaObject::Call, int, void**)</primary></indexterm>QFile::qt_metacall(QMetaObject::Call, int, void**)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFile::~QFile()</primary></indexterm>QFile::~QFile()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFile::~QFile()</primary></indexterm>QFile::~QFile()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::event(QEvent*)</primary></indexterm>QObject::event(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::eventFilter(QObject*, QEvent*)</primary></indexterm>QObject::eventFilter(QObject*, QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::timerEvent(QTimerEvent*)</primary></indexterm>QObject::timerEvent(QTimerEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::childEvent(QChildEvent*)</primary></indexterm>QObject::childEvent(QChildEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::customEvent(QEvent*)</primary></indexterm>QObject::customEvent(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::connectNotify(char const*)</primary></indexterm>QObject::connectNotify(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;11&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::disconnectNotify(char const*)</primary></indexterm>QObject::disconnectNotify(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;12&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFile::isSequential() const</primary></indexterm>QFile::isSequential() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;13&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFile::open(QFlags&lt;QIODevice::OpenModeFlag&gt;)</primary></indexterm>QFile::open(QFlags&lt;QIODevice::OpenModeFlag&gt;)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;14&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFile::close()</primary></indexterm>QFile::close()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;15&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFile::pos() const</primary></indexterm>QFile::pos() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;16&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFile::size() const</primary></indexterm>QFile::size() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;17&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFile::seek(long long)</primary></indexterm>QFile::seek(long long)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;18&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFile::atEnd() const</primary></indexterm>QFile::atEnd() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;19&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::reset()</primary></indexterm>QIODevice::reset()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;20&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::bytesAvailable() const</primary></indexterm>QIODevice::bytesAvailable() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;21&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::bytesToWrite() const</primary></indexterm>QIODevice::bytesToWrite() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;22&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::canReadLine() const</primary></indexterm>QIODevice::canReadLine() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;23&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::waitForReadyRead(int)</primary></indexterm>QIODevice::waitForReadyRead(int)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;24&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::waitForBytesWritten(int)</primary></indexterm>QIODevice::waitForBytesWritten(int)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;25&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFile::readData(char*, long long)</primary></indexterm>QFile::readData(char*, long long)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;26&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFile::readLineData(char*, long long)</primary></indexterm>QFile::readLineData(char*, long long)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;27&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFile::writeData(char const*, long long)</primary></indexterm>QFile::writeData(char const*, long long)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;28&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFile::fileEngine() const</primary></indexterm>QFile::fileEngine() const</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The Run Time Type Information for the QFile  class
is described by <XREF LINKEND="rtti-315">
</PARA>
<!--classdata-->
<TABLE ID="rtti-315">
<TITLE>typeinfo for QFile</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Vtable</ENTRY>
<ENTRY><indexterm><primary>vtable for QIODevice</primary></indexterm>vtable for QIODevice</ENTRY>
</ROW>
<ROW>
<ENTRY>Name</ENTRY>
<ENTRY><indexterm><primary>typeinfo name for QFile</primary></indexterm>typeinfo name for QFile</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>


<SECT3>
<TITLE>Class data for QAbstractFileEngine</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the QAbstractFileEngine class
is described by <XREF LINKEND="cls-316-0">
</PARA>
<!--classdata-->
<TABLE id="cls-316-0">
<TITLE>Primary vtable for QAbstractFileEngine</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>Virtual Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>RTTI</ENTRY>
<ENTRY><indexterm><primary>typeinfo for QAbstractFileEngine</primary></indexterm>typeinfo for QAbstractFileEngine</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractFileEngine::~QAbstractFileEngine()</primary></indexterm>QAbstractFileEngine::~QAbstractFileEngine()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractFileEngine::~QAbstractFileEngine()</primary></indexterm>QAbstractFileEngine::~QAbstractFileEngine()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractFileEngine::open(QFlags&lt;QIODevice::OpenModeFlag&gt;)</primary></indexterm>QAbstractFileEngine::open(QFlags&lt;QIODevice::OpenModeFlag&gt;)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractFileEngine::close()</primary></indexterm>QAbstractFileEngine::close()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractFileEngine::flush()</primary></indexterm>QAbstractFileEngine::flush()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractFileEngine::size() const</primary></indexterm>QAbstractFileEngine::size() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractFileEngine::pos() const</primary></indexterm>QAbstractFileEngine::pos() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractFileEngine::seek(long long)</primary></indexterm>QAbstractFileEngine::seek(long long)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractFileEngine::isSequential() const</primary></indexterm>QAbstractFileEngine::isSequential() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractFileEngine::remove()</primary></indexterm>QAbstractFileEngine::remove()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractFileEngine::copy(QString const&)</primary></indexterm>QAbstractFileEngine::copy(QString const&)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;11&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractFileEngine::rename(QString const&)</primary></indexterm>QAbstractFileEngine::rename(QString const&)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;12&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractFileEngine::link(QString const&)</primary></indexterm>QAbstractFileEngine::link(QString const&)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;13&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractFileEngine::mkdir(QString const&, bool) const</primary></indexterm>QAbstractFileEngine::mkdir(QString const&, bool) const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;14&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractFileEngine::rmdir(QString const&, bool) const</primary></indexterm>QAbstractFileEngine::rmdir(QString const&, bool) const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;15&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractFileEngine::setSize(long long)</primary></indexterm>QAbstractFileEngine::setSize(long long)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;16&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractFileEngine::caseSensitive() const</primary></indexterm>QAbstractFileEngine::caseSensitive() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;17&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractFileEngine::isRelativePath() const</primary></indexterm>QAbstractFileEngine::isRelativePath() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;18&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractFileEngine::entryList(QFlags&lt;QDir::Filter&gt;, QStringList const&) const</primary></indexterm>QAbstractFileEngine::entryList(QFlags&lt;QDir::Filter&gt;, QStringList const&) const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;19&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractFileEngine::fileFlags(QFlags&lt;QAbstractFileEngine::FileFlag&gt;) const</primary></indexterm>QAbstractFileEngine::fileFlags(QFlags&lt;QAbstractFileEngine::FileFlag&gt;) const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;20&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractFileEngine::setPermissions(unsigned int)</primary></indexterm>QAbstractFileEngine::setPermissions(unsigned int)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;21&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractFileEngine::fileName(QAbstractFileEngine::FileName) const</primary></indexterm>QAbstractFileEngine::fileName(QAbstractFileEngine::FileName) const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;22&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractFileEngine::ownerId(QAbstractFileEngine::FileOwner) const</primary></indexterm>QAbstractFileEngine::ownerId(QAbstractFileEngine::FileOwner) const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;23&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractFileEngine::owner(QAbstractFileEngine::FileOwner) const</primary></indexterm>QAbstractFileEngine::owner(QAbstractFileEngine::FileOwner) const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;24&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractFileEngine::fileTime(QAbstractFileEngine::FileTime) const</primary></indexterm>QAbstractFileEngine::fileTime(QAbstractFileEngine::FileTime) const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;25&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractFileEngine::setFileName(QString const&)</primary></indexterm>QAbstractFileEngine::setFileName(QString const&)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;26&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractFileEngine::handle() const</primary></indexterm>QAbstractFileEngine::handle() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;27&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractFileEngine::beginEntryList(QFlags&lt;QDir::Filter&gt;, QStringList const&)</primary></indexterm>QAbstractFileEngine::beginEntryList(QFlags&lt;QDir::Filter&gt;, QStringList const&)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;28&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractFileEngine::endEntryList()</primary></indexterm>QAbstractFileEngine::endEntryList()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;29&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractFileEngine::read(char*, long long)</primary></indexterm>QAbstractFileEngine::read(char*, long long)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;30&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractFileEngine::readLine(char*, long long)</primary></indexterm>QAbstractFileEngine::readLine(char*, long long)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;31&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractFileEngine::write(char const*, long long)</primary></indexterm>QAbstractFileEngine::write(char const*, long long)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;32&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractFileEngine::extension(QAbstractFileEngine::Extension, QAbstractFileEngine::ExtensionOption const*, QAbstractFileEngine::ExtensionReturn*)</primary></indexterm>QAbstractFileEngine::extension(QAbstractFileEngine::Extension, QAbstractFileEngine::ExtensionOption const*, QAbstractFileEngine::ExtensionReturn*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;33&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractFileEngine::supportsExtension(QAbstractFileEngine::Extension) const</primary></indexterm>QAbstractFileEngine::supportsExtension(QAbstractFileEngine::Extension) const</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The Run Time Type Information for the QAbstractFileEngine  class
is described by <XREF LINKEND="rtti-317">
</PARA>
<!--classdata-->
<TABLE ID="rtti-317">
<TITLE>typeinfo for QAbstractFileEngine</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Vtable</ENTRY>
<ENTRY><indexterm><primary></primary></indexterm></ENTRY>
</ROW>
<ROW>
<ENTRY>Name</ENTRY>
<ENTRY><indexterm><primary>typeinfo name for QAbstractFileEngine</primary></indexterm>typeinfo name for QAbstractFileEngine</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>


<SECT3>
<TITLE>Class data for QTemporaryFile</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the QTemporaryFile class
is described by <XREF LINKEND="cls-318-0">
</PARA>
<!--classdata-->
<TABLE id="cls-318-0">
<TITLE>Primary vtable for QTemporaryFile</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>Virtual Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>RTTI</ENTRY>
<ENTRY><indexterm><primary>typeinfo for QTemporaryFile</primary></indexterm>typeinfo for QTemporaryFile</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QTemporaryFile::metaObject() const</primary></indexterm>QTemporaryFile::metaObject() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QTemporaryFile::qt_metacast(char const*)</primary></indexterm>QTemporaryFile::qt_metacast(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QTemporaryFile::qt_metacall(QMetaObject::Call, int, void**)</primary></indexterm>QTemporaryFile::qt_metacall(QMetaObject::Call, int, void**)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QTemporaryFile::~QTemporaryFile()</primary></indexterm>QTemporaryFile::~QTemporaryFile()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QTemporaryFile::~QTemporaryFile()</primary></indexterm>QTemporaryFile::~QTemporaryFile()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::event(QEvent*)</primary></indexterm>QObject::event(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::eventFilter(QObject*, QEvent*)</primary></indexterm>QObject::eventFilter(QObject*, QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::timerEvent(QTimerEvent*)</primary></indexterm>QObject::timerEvent(QTimerEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::childEvent(QChildEvent*)</primary></indexterm>QObject::childEvent(QChildEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::customEvent(QEvent*)</primary></indexterm>QObject::customEvent(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::connectNotify(char const*)</primary></indexterm>QObject::connectNotify(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;11&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::disconnectNotify(char const*)</primary></indexterm>QObject::disconnectNotify(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;12&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFile::isSequential() const</primary></indexterm>QFile::isSequential() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;13&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QTemporaryFile::open(QFlags&lt;QIODevice::OpenModeFlag&gt;)</primary></indexterm>QTemporaryFile::open(QFlags&lt;QIODevice::OpenModeFlag&gt;)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;14&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFile::close()</primary></indexterm>QFile::close()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;15&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFile::pos() const</primary></indexterm>QFile::pos() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;16&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFile::size() const</primary></indexterm>QFile::size() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;17&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFile::seek(long long)</primary></indexterm>QFile::seek(long long)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;18&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFile::atEnd() const</primary></indexterm>QFile::atEnd() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;19&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::reset()</primary></indexterm>QIODevice::reset()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;20&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::bytesAvailable() const</primary></indexterm>QIODevice::bytesAvailable() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;21&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::bytesToWrite() const</primary></indexterm>QIODevice::bytesToWrite() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;22&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::canReadLine() const</primary></indexterm>QIODevice::canReadLine() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;23&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::waitForReadyRead(int)</primary></indexterm>QIODevice::waitForReadyRead(int)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;24&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::waitForBytesWritten(int)</primary></indexterm>QIODevice::waitForBytesWritten(int)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;25&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFile::readData(char*, long long)</primary></indexterm>QFile::readData(char*, long long)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;26&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFile::readLineData(char*, long long)</primary></indexterm>QFile::readLineData(char*, long long)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;27&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFile::writeData(char const*, long long)</primary></indexterm>QFile::writeData(char const*, long long)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;28&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QTemporaryFile::fileEngine() const</primary></indexterm>QTemporaryFile::fileEngine() const</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The Run Time Type Information for the QTemporaryFile  class
is described by <XREF LINKEND="rtti-319">
</PARA>
<!--classdata-->
<TABLE ID="rtti-319">
<TITLE>typeinfo for QTemporaryFile</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Vtable</ENTRY>
<ENTRY><indexterm><primary>vtable for QFile</primary></indexterm>vtable for QFile</ENTRY>
</ROW>
<ROW>
<ENTRY>Name</ENTRY>
<ENTRY><indexterm><primary>typeinfo name for QTemporaryFile</primary></indexterm>typeinfo name for QTemporaryFile</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>


<SECT3>
<TITLE>Class data for QAbstractFileEngineHandler</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the QAbstractFileEngineHandler class
is described by <XREF LINKEND="cls-320-0">
</PARA>
<!--classdata-->
<TABLE id="cls-320-0">
<TITLE>Primary vtable for QAbstractFileEngineHandler</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>Virtual Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>RTTI</ENTRY>
<ENTRY><indexterm><primary>typeinfo for QAbstractFileEngineHandler</primary></indexterm>typeinfo for QAbstractFileEngineHandler</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractFileEngineHandler::~QAbstractFileEngineHandler()</primary></indexterm>QAbstractFileEngineHandler::~QAbstractFileEngineHandler()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractFileEngineHandler::~QAbstractFileEngineHandler()</primary></indexterm>QAbstractFileEngineHandler::~QAbstractFileEngineHandler()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The Run Time Type Information for the QAbstractFileEngineHandler  class
is described by <XREF LINKEND="rtti-321">
</PARA>
<!--classdata-->
<TABLE ID="rtti-321">
<TITLE>typeinfo for QAbstractFileEngineHandler</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Vtable</ENTRY>
<ENTRY><indexterm><primary></primary></indexterm></ENTRY>
</ROW>
<ROW>
<ENTRY>Name</ENTRY>
<ENTRY><indexterm><primary>typeinfo name for QAbstractFileEngineHandler</primary></indexterm>typeinfo name for QAbstractFileEngineHandler</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>


<SECT3>
<TITLE>Class data for QFSFileEngine</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the QFSFileEngine class
is described by <XREF LINKEND="cls-322-0">
</PARA>
<!--classdata-->
<TABLE id="cls-322-0">
<TITLE>Primary vtable for QFSFileEngine</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>Virtual Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>RTTI</ENTRY>
<ENTRY><indexterm><primary>typeinfo for QFSFileEngine</primary></indexterm>typeinfo for QFSFileEngine</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFSFileEngine::~QFSFileEngine()</primary></indexterm>QFSFileEngine::~QFSFileEngine()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFSFileEngine::~QFSFileEngine()</primary></indexterm>QFSFileEngine::~QFSFileEngine()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFSFileEngine::open(QFlags&lt;QIODevice::OpenModeFlag&gt;)</primary></indexterm>QFSFileEngine::open(QFlags&lt;QIODevice::OpenModeFlag&gt;)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFSFileEngine::close()</primary></indexterm>QFSFileEngine::close()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFSFileEngine::flush()</primary></indexterm>QFSFileEngine::flush()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFSFileEngine::size() const</primary></indexterm>QFSFileEngine::size() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFSFileEngine::pos() const</primary></indexterm>QFSFileEngine::pos() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFSFileEngine::seek(long long)</primary></indexterm>QFSFileEngine::seek(long long)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFSFileEngine::isSequential() const</primary></indexterm>QFSFileEngine::isSequential() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFSFileEngine::remove()</primary></indexterm>QFSFileEngine::remove()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFSFileEngine::copy(QString const&)</primary></indexterm>QFSFileEngine::copy(QString const&)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;11&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFSFileEngine::rename(QString const&)</primary></indexterm>QFSFileEngine::rename(QString const&)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;12&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFSFileEngine::link(QString const&)</primary></indexterm>QFSFileEngine::link(QString const&)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;13&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFSFileEngine::mkdir(QString const&, bool) const</primary></indexterm>QFSFileEngine::mkdir(QString const&, bool) const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;14&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFSFileEngine::rmdir(QString const&, bool) const</primary></indexterm>QFSFileEngine::rmdir(QString const&, bool) const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;15&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFSFileEngine::setSize(long long)</primary></indexterm>QFSFileEngine::setSize(long long)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;16&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFSFileEngine::caseSensitive() const</primary></indexterm>QFSFileEngine::caseSensitive() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;17&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFSFileEngine::isRelativePath() const</primary></indexterm>QFSFileEngine::isRelativePath() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;18&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFSFileEngine::entryList(QFlags&lt;QDir::Filter&gt;, QStringList const&) const</primary></indexterm>QFSFileEngine::entryList(QFlags&lt;QDir::Filter&gt;, QStringList const&) const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;19&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFSFileEngine::fileFlags(QFlags&lt;QAbstractFileEngine::FileFlag&gt;) const</primary></indexterm>QFSFileEngine::fileFlags(QFlags&lt;QAbstractFileEngine::FileFlag&gt;) const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;20&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFSFileEngine::setPermissions(unsigned int)</primary></indexterm>QFSFileEngine::setPermissions(unsigned int)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;21&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFSFileEngine::fileName(QAbstractFileEngine::FileName) const</primary></indexterm>QFSFileEngine::fileName(QAbstractFileEngine::FileName) const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;22&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFSFileEngine::ownerId(QAbstractFileEngine::FileOwner) const</primary></indexterm>QFSFileEngine::ownerId(QAbstractFileEngine::FileOwner) const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;23&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFSFileEngine::owner(QAbstractFileEngine::FileOwner) const</primary></indexterm>QFSFileEngine::owner(QAbstractFileEngine::FileOwner) const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;24&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFSFileEngine::fileTime(QAbstractFileEngine::FileTime) const</primary></indexterm>QFSFileEngine::fileTime(QAbstractFileEngine::FileTime) const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;25&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFSFileEngine::setFileName(QString const&)</primary></indexterm>QFSFileEngine::setFileName(QString const&)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;26&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFSFileEngine::handle() const</primary></indexterm>QFSFileEngine::handle() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;27&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFSFileEngine::beginEntryList(QFlags&lt;QDir::Filter&gt;, QStringList const&)</primary></indexterm>QFSFileEngine::beginEntryList(QFlags&lt;QDir::Filter&gt;, QStringList const&)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;28&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFSFileEngine::endEntryList()</primary></indexterm>QFSFileEngine::endEntryList()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;29&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFSFileEngine::read(char*, long long)</primary></indexterm>QFSFileEngine::read(char*, long long)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;30&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFSFileEngine::readLine(char*, long long)</primary></indexterm>QFSFileEngine::readLine(char*, long long)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;31&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFSFileEngine::write(char const*, long long)</primary></indexterm>QFSFileEngine::write(char const*, long long)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;32&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFSFileEngine::extension(QAbstractFileEngine::Extension, QAbstractFileEngine::ExtensionOption const*, QAbstractFileEngine::ExtensionReturn*)</primary></indexterm>QFSFileEngine::extension(QAbstractFileEngine::Extension, QAbstractFileEngine::ExtensionOption const*, QAbstractFileEngine::ExtensionReturn*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;33&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFSFileEngine::supportsExtension(QAbstractFileEngine::Extension) const</primary></indexterm>QFSFileEngine::supportsExtension(QAbstractFileEngine::Extension) const</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The Run Time Type Information for the QFSFileEngine  class
is described by <XREF LINKEND="rtti-323">
</PARA>
<!--classdata-->
<TABLE ID="rtti-323">
<TITLE>typeinfo for QFSFileEngine</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Vtable</ENTRY>
<ENTRY><indexterm><primary>vtable for QAbstractFileEngine</primary></indexterm>vtable for QAbstractFileEngine</ENTRY>
</ROW>
<ROW>
<ENTRY>Name</ENTRY>
<ENTRY><indexterm><primary>typeinfo name for QFSFileEngine</primary></indexterm>typeinfo name for QFSFileEngine</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>


<SECT3>
<TITLE>Class data for QProcess</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the QProcess class
is described by <XREF LINKEND="cls-324-0">
</PARA>
<!--classdata-->
<TABLE id="cls-324-0">
<TITLE>Primary vtable for QProcess</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>Virtual Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>RTTI</ENTRY>
<ENTRY><indexterm><primary>typeinfo for QProcess</primary></indexterm>typeinfo for QProcess</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QProcess::metaObject() const</primary></indexterm>QProcess::metaObject() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QProcess::qt_metacast(char const*)</primary></indexterm>QProcess::qt_metacast(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QProcess::qt_metacall(QMetaObject::Call, int, void**)</primary></indexterm>QProcess::qt_metacall(QMetaObject::Call, int, void**)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QProcess::~QProcess()</primary></indexterm>QProcess::~QProcess()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QProcess::~QProcess()</primary></indexterm>QProcess::~QProcess()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::event(QEvent*)</primary></indexterm>QObject::event(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::eventFilter(QObject*, QEvent*)</primary></indexterm>QObject::eventFilter(QObject*, QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::timerEvent(QTimerEvent*)</primary></indexterm>QObject::timerEvent(QTimerEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::childEvent(QChildEvent*)</primary></indexterm>QObject::childEvent(QChildEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::customEvent(QEvent*)</primary></indexterm>QObject::customEvent(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::connectNotify(char const*)</primary></indexterm>QObject::connectNotify(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;11&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::disconnectNotify(char const*)</primary></indexterm>QObject::disconnectNotify(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;12&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QProcess::isSequential() const</primary></indexterm>QProcess::isSequential() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;13&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::open(QFlags&lt;QIODevice::OpenModeFlag&gt;)</primary></indexterm>QIODevice::open(QFlags&lt;QIODevice::OpenModeFlag&gt;)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;14&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QProcess::close()</primary></indexterm>QProcess::close()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;15&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::pos() const</primary></indexterm>QIODevice::pos() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;16&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::size() const</primary></indexterm>QIODevice::size() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;17&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::seek(long long)</primary></indexterm>QIODevice::seek(long long)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;18&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QProcess::atEnd() const</primary></indexterm>QProcess::atEnd() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;19&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::reset()</primary></indexterm>QIODevice::reset()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;20&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QProcess::bytesAvailable() const</primary></indexterm>QProcess::bytesAvailable() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;21&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QProcess::bytesToWrite() const</primary></indexterm>QProcess::bytesToWrite() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;22&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QProcess::canReadLine() const</primary></indexterm>QProcess::canReadLine() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;23&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QProcess::waitForReadyRead(int)</primary></indexterm>QProcess::waitForReadyRead(int)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;24&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QProcess::waitForBytesWritten(int)</primary></indexterm>QProcess::waitForBytesWritten(int)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;25&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QProcess::readData(char*, long long)</primary></indexterm>QProcess::readData(char*, long long)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;26&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::readLineData(char*, long long)</primary></indexterm>QIODevice::readLineData(char*, long long)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;27&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QProcess::writeData(char const*, long long)</primary></indexterm>QProcess::writeData(char const*, long long)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;28&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QProcess::setupChildProcess()</primary></indexterm>QProcess::setupChildProcess()</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The Run Time Type Information for the QProcess  class
is described by <XREF LINKEND="rtti-325">
</PARA>
<!--classdata-->
<TABLE ID="rtti-325">
<TITLE>typeinfo for QProcess</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Vtable</ENTRY>
<ENTRY><indexterm><primary>vtable for QIODevice</primary></indexterm>vtable for QIODevice</ENTRY>
</ROW>
<ROW>
<ENTRY>Name</ENTRY>
<ENTRY><indexterm><primary>typeinfo name for QProcess</primary></indexterm>typeinfo name for QProcess</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>


<SECT3>
<TITLE>Class data for QBuffer</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the QBuffer class
is described by <XREF LINKEND="cls-326-0">
</PARA>
<!--classdata-->
<TABLE id="cls-326-0">
<TITLE>Primary vtable for QBuffer</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>Virtual Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>RTTI</ENTRY>
<ENTRY><indexterm><primary>typeinfo for QBuffer</primary></indexterm>typeinfo for QBuffer</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QBuffer::metaObject() const</primary></indexterm>QBuffer::metaObject() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QBuffer::qt_metacast(char const*)</primary></indexterm>QBuffer::qt_metacast(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QBuffer::qt_metacall(QMetaObject::Call, int, void**)</primary></indexterm>QBuffer::qt_metacall(QMetaObject::Call, int, void**)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QBuffer::~QBuffer()</primary></indexterm>QBuffer::~QBuffer()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QBuffer::~QBuffer()</primary></indexterm>QBuffer::~QBuffer()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::event(QEvent*)</primary></indexterm>QObject::event(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::eventFilter(QObject*, QEvent*)</primary></indexterm>QObject::eventFilter(QObject*, QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::timerEvent(QTimerEvent*)</primary></indexterm>QObject::timerEvent(QTimerEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::childEvent(QChildEvent*)</primary></indexterm>QObject::childEvent(QChildEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::customEvent(QEvent*)</primary></indexterm>QObject::customEvent(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::connectNotify(char const*)</primary></indexterm>QObject::connectNotify(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;11&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::disconnectNotify(char const*)</primary></indexterm>QObject::disconnectNotify(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;12&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::isSequential() const</primary></indexterm>QIODevice::isSequential() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;13&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QBuffer::open(QFlags&lt;QIODevice::OpenModeFlag&gt;)</primary></indexterm>QBuffer::open(QFlags&lt;QIODevice::OpenModeFlag&gt;)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;14&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QBuffer::close()</primary></indexterm>QBuffer::close()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;15&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QBuffer::pos() const</primary></indexterm>QBuffer::pos() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;16&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QBuffer::size() const</primary></indexterm>QBuffer::size() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;17&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QBuffer::seek(long long)</primary></indexterm>QBuffer::seek(long long)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;18&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QBuffer::atEnd() const</primary></indexterm>QBuffer::atEnd() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;19&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::reset()</primary></indexterm>QIODevice::reset()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;20&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::bytesAvailable() const</primary></indexterm>QIODevice::bytesAvailable() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;21&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::bytesToWrite() const</primary></indexterm>QIODevice::bytesToWrite() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;22&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QBuffer::canReadLine() const</primary></indexterm>QBuffer::canReadLine() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;23&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::waitForReadyRead(int)</primary></indexterm>QIODevice::waitForReadyRead(int)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;24&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::waitForBytesWritten(int)</primary></indexterm>QIODevice::waitForBytesWritten(int)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;25&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QBuffer::readData(char*, long long)</primary></indexterm>QBuffer::readData(char*, long long)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;26&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::readLineData(char*, long long)</primary></indexterm>QIODevice::readLineData(char*, long long)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;27&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QBuffer::writeData(char const*, long long)</primary></indexterm>QBuffer::writeData(char const*, long long)</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The Run Time Type Information for the QBuffer  class
is described by <XREF LINKEND="rtti-327">
</PARA>
<!--classdata-->
<TABLE ID="rtti-327">
<TITLE>typeinfo for QBuffer</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Vtable</ENTRY>
<ENTRY><indexterm><primary>vtable for QIODevice</primary></indexterm>vtable for QIODevice</ENTRY>
</ROW>
<ROW>
<ENTRY>Name</ENTRY>
<ENTRY><indexterm><primary>typeinfo name for QBuffer</primary></indexterm>typeinfo name for QBuffer</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>


<SECT3>
<TITLE>Class data for QSettings</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the QSettings class
is described by <XREF LINKEND="cls-328-0">
</PARA>
<!--classdata-->
<TABLE id="cls-328-0">
<TITLE>Primary vtable for QSettings</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>Virtual Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>RTTI</ENTRY>
<ENTRY><indexterm><primary>typeinfo for QSettings</primary></indexterm>typeinfo for QSettings</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QSettings::metaObject() const</primary></indexterm>QSettings::metaObject() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QSettings::qt_metacast(char const*)</primary></indexterm>QSettings::qt_metacast(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QSettings::qt_metacall(QMetaObject::Call, int, void**)</primary></indexterm>QSettings::qt_metacall(QMetaObject::Call, int, void**)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QSettings::~QSettings()</primary></indexterm>QSettings::~QSettings()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QSettings::~QSettings()</primary></indexterm>QSettings::~QSettings()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QSettings::event(QEvent*)</primary></indexterm>QSettings::event(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::eventFilter(QObject*, QEvent*)</primary></indexterm>QObject::eventFilter(QObject*, QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::timerEvent(QTimerEvent*)</primary></indexterm>QObject::timerEvent(QTimerEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::childEvent(QChildEvent*)</primary></indexterm>QObject::childEvent(QChildEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::customEvent(QEvent*)</primary></indexterm>QObject::customEvent(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::connectNotify(char const*)</primary></indexterm>QObject::connectNotify(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;11&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::disconnectNotify(char const*)</primary></indexterm>QObject::disconnectNotify(char const*)</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The Run Time Type Information for the QSettings  class
is described by <XREF LINKEND="rtti-329">
</PARA>
<!--classdata-->
<TABLE ID="rtti-329">
<TITLE>typeinfo for QSettings</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Vtable</ENTRY>
<ENTRY><indexterm><primary>vtable for QObject</primary></indexterm>vtable for QObject</ENTRY>
</ROW>
<ROW>
<ENTRY>Name</ENTRY>
<ENTRY><indexterm><primary>typeinfo name for QSettings</primary></indexterm>typeinfo name for QSettings</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>


<SECT3>
<TITLE>Class data for QTextCodecFactoryInterface</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the QTextCodecFactoryInterface class
is described by <XREF LINKEND="cls-330-0">
</PARA>
<!--classdata-->
<TABLE id="cls-330-0">
<TITLE>Primary vtable for QTextCodecFactoryInterface</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>Virtual Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>RTTI</ENTRY>
<ENTRY><indexterm><primary>typeinfo for QTextCodecFactoryInterface</primary></indexterm>typeinfo for QTextCodecFactoryInterface</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QTextCodecFactoryInterface::~QTextCodecFactoryInterface()</primary></indexterm>QTextCodecFactoryInterface::~QTextCodecFactoryInterface()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QTextCodecFactoryInterface::~QTextCodecFactoryInterface()</primary></indexterm>QTextCodecFactoryInterface::~QTextCodecFactoryInterface()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The Run Time Type Information for the QTextCodecFactoryInterface  class
is described by <XREF LINKEND="rtti-331">
</PARA>
<!--classdata-->
<TABLE ID="rtti-331">
<TITLE>typeinfo for QTextCodecFactoryInterface</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Vtable</ENTRY>
<ENTRY><indexterm><primary></primary></indexterm></ENTRY>
</ROW>
<ROW>
<ENTRY>Name</ENTRY>
<ENTRY><indexterm><primary>typeinfo name for QTextCodecFactoryInterface</primary></indexterm>typeinfo name for QTextCodecFactoryInterface</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>


<SECT3>
<TITLE>Class data for QTextCodecPlugin</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the QTextCodecPlugin class
is described by <XREF LINKEND="cls-332-0">
</PARA>
<!--classdata-->
<TABLE id="cls-332-0">
<TITLE>Primary vtable for QTextCodecPlugin</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>Virtual Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>RTTI</ENTRY>
<ENTRY><indexterm><primary>typeinfo for QTextCodecPlugin</primary></indexterm>typeinfo for QTextCodecPlugin</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QTextCodecPlugin::metaObject() const</primary></indexterm>QTextCodecPlugin::metaObject() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QTextCodecPlugin::qt_metacast(char const*)</primary></indexterm>QTextCodecPlugin::qt_metacast(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QTextCodecPlugin::qt_metacall(QMetaObject::Call, int, void**)</primary></indexterm>QTextCodecPlugin::qt_metacall(QMetaObject::Call, int, void**)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QTextCodecPlugin::~QTextCodecPlugin()</primary></indexterm>QTextCodecPlugin::~QTextCodecPlugin()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QTextCodecPlugin::~QTextCodecPlugin()</primary></indexterm>QTextCodecPlugin::~QTextCodecPlugin()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::event(QEvent*)</primary></indexterm>QObject::event(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::eventFilter(QObject*, QEvent*)</primary></indexterm>QObject::eventFilter(QObject*, QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::timerEvent(QTimerEvent*)</primary></indexterm>QObject::timerEvent(QTimerEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::childEvent(QChildEvent*)</primary></indexterm>QObject::childEvent(QChildEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::customEvent(QEvent*)</primary></indexterm>QObject::customEvent(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::connectNotify(char const*)</primary></indexterm>QObject::connectNotify(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;11&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::disconnectNotify(char const*)</primary></indexterm>QObject::disconnectNotify(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;12&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;13&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;14&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;15&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;16&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;17&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QTextCodecPlugin::keys() const</primary></indexterm>QTextCodecPlugin::keys() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;18&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QTextCodecPlugin::create(QString const&)</primary></indexterm>QTextCodecPlugin::create(QString const&)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;19&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>non-virtual thunk to QTextCodecPlugin::~QTextCodecPlugin()</primary></indexterm>non-virtual thunk to QTextCodecPlugin::~QTextCodecPlugin()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;20&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>non-virtual thunk to QTextCodecPlugin::~QTextCodecPlugin()</primary></indexterm>non-virtual thunk to QTextCodecPlugin::~QTextCodecPlugin()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;21&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>non-virtual thunk to QTextCodecPlugin::keys() const</primary></indexterm>non-virtual thunk to QTextCodecPlugin::keys() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;22&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>non-virtual thunk to QTextCodecPlugin::create(QString const&)</primary></indexterm>non-virtual thunk to QTextCodecPlugin::create(QString const&)</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The Run Time Type Information for the QTextCodecPlugin  class
is described by <XREF LINKEND="rtti-333">
</PARA>
<!--classdata-->
<TABLE ID="rtti-333">
<TITLE>typeinfo for QTextCodecPlugin</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Vtable</ENTRY>
<ENTRY><indexterm><primary>vtable for QObject</primary></indexterm>vtable for QObject</ENTRY>
</ROW>
<ROW>
<ENTRY>Name</ENTRY>
<ENTRY><indexterm><primary>typeinfo name for QTextCodecPlugin</primary></indexterm>typeinfo name for QTextCodecPlugin</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>


<SECT3>
<TITLE>Class data for QTranslator</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the QTranslator class
is described by <XREF LINKEND="cls-334-0">
</PARA>
<!--classdata-->
<TABLE id="cls-334-0">
<TITLE>Primary vtable for QTranslator</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>Virtual Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>RTTI</ENTRY>
<ENTRY><indexterm><primary>typeinfo for QTranslator</primary></indexterm>typeinfo for QTranslator</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QTranslator::metaObject() const</primary></indexterm>QTranslator::metaObject() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QTranslator::qt_metacast(char const*)</primary></indexterm>QTranslator::qt_metacast(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QTranslator::qt_metacall(QMetaObject::Call, int, void**)</primary></indexterm>QTranslator::qt_metacall(QMetaObject::Call, int, void**)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QTranslator::~QTranslator()</primary></indexterm>QTranslator::~QTranslator()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QTranslator::~QTranslator()</primary></indexterm>QTranslator::~QTranslator()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::event(QEvent*)</primary></indexterm>QObject::event(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::eventFilter(QObject*, QEvent*)</primary></indexterm>QObject::eventFilter(QObject*, QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::timerEvent(QTimerEvent*)</primary></indexterm>QObject::timerEvent(QTimerEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::childEvent(QChildEvent*)</primary></indexterm>QObject::childEvent(QChildEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::customEvent(QEvent*)</primary></indexterm>QObject::customEvent(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::connectNotify(char const*)</primary></indexterm>QObject::connectNotify(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;11&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::disconnectNotify(char const*)</primary></indexterm>QObject::disconnectNotify(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;12&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QTranslator::translate(char const*, char const*, char const*) const</primary></indexterm>QTranslator::translate(char const*, char const*, char const*) const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;13&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QTranslator::isEmpty() const</primary></indexterm>QTranslator::isEmpty() const</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The Run Time Type Information for the QTranslator  class
is described by <XREF LINKEND="rtti-335">
</PARA>
<!--classdata-->
<TABLE ID="rtti-335">
<TITLE>typeinfo for QTranslator</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Vtable</ENTRY>
<ENTRY><indexterm><primary>vtable for QObject</primary></indexterm>vtable for QObject</ENTRY>
</ROW>
<ROW>
<ENTRY>Name</ENTRY>
<ENTRY><indexterm><primary>typeinfo name for QTranslator</primary></indexterm>typeinfo name for QTranslator</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>


<SECT3>
<TITLE>Class data for QMimeData</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the QMimeData class
is described by <XREF LINKEND="cls-336-0">
</PARA>
<!--classdata-->
<TABLE id="cls-336-0">
<TITLE>Primary vtable for QMimeData</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>Virtual Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>RTTI</ENTRY>
<ENTRY><indexterm><primary>typeinfo for QMimeData</primary></indexterm>typeinfo for QMimeData</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QMimeData::metaObject() const</primary></indexterm>QMimeData::metaObject() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QMimeData::qt_metacast(char const*)</primary></indexterm>QMimeData::qt_metacast(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QMimeData::qt_metacall(QMetaObject::Call, int, void**)</primary></indexterm>QMimeData::qt_metacall(QMetaObject::Call, int, void**)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QMimeData::~QMimeData()</primary></indexterm>QMimeData::~QMimeData()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QMimeData::~QMimeData()</primary></indexterm>QMimeData::~QMimeData()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::event(QEvent*)</primary></indexterm>QObject::event(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::eventFilter(QObject*, QEvent*)</primary></indexterm>QObject::eventFilter(QObject*, QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::timerEvent(QTimerEvent*)</primary></indexterm>QObject::timerEvent(QTimerEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::childEvent(QChildEvent*)</primary></indexterm>QObject::childEvent(QChildEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::customEvent(QEvent*)</primary></indexterm>QObject::customEvent(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::connectNotify(char const*)</primary></indexterm>QObject::connectNotify(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;11&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::disconnectNotify(char const*)</primary></indexterm>QObject::disconnectNotify(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;12&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QMimeData::hasFormat(QString const&) const</primary></indexterm>QMimeData::hasFormat(QString const&) const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;13&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QMimeData::formats() const</primary></indexterm>QMimeData::formats() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;14&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QMimeData::retrieveData(QString const&, QVariant::Type) const</primary></indexterm>QMimeData::retrieveData(QString const&, QVariant::Type) const</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The Run Time Type Information for the QMimeData  class
is described by <XREF LINKEND="rtti-337">
</PARA>
<!--classdata-->
<TABLE ID="rtti-337">
<TITLE>typeinfo for QMimeData</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Vtable</ENTRY>
<ENTRY><indexterm><primary>vtable for QObject</primary></indexterm>vtable for QObject</ENTRY>
</ROW>
<ROW>
<ENTRY>Name</ENTRY>
<ENTRY><indexterm><primary>typeinfo name for QMimeData</primary></indexterm>typeinfo name for QMimeData</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>


<SECT3>
<TITLE>Class data for QEventLoop</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the QEventLoop class
is described by <XREF LINKEND="cls-338-0">
</PARA>
<!--classdata-->
<TABLE id="cls-338-0">
<TITLE>Primary vtable for QEventLoop</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>Virtual Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>RTTI</ENTRY>
<ENTRY><indexterm><primary>typeinfo for QEventLoop</primary></indexterm>typeinfo for QEventLoop</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QEventLoop::metaObject() const</primary></indexterm>QEventLoop::metaObject() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QEventLoop::qt_metacast(char const*)</primary></indexterm>QEventLoop::qt_metacast(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QEventLoop::qt_metacall(QMetaObject::Call, int, void**)</primary></indexterm>QEventLoop::qt_metacall(QMetaObject::Call, int, void**)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QEventLoop::~QEventLoop()</primary></indexterm>QEventLoop::~QEventLoop()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QEventLoop::~QEventLoop()</primary></indexterm>QEventLoop::~QEventLoop()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::event(QEvent*)</primary></indexterm>QObject::event(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::eventFilter(QObject*, QEvent*)</primary></indexterm>QObject::eventFilter(QObject*, QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::timerEvent(QTimerEvent*)</primary></indexterm>QObject::timerEvent(QTimerEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::childEvent(QChildEvent*)</primary></indexterm>QObject::childEvent(QChildEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::customEvent(QEvent*)</primary></indexterm>QObject::customEvent(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::connectNotify(char const*)</primary></indexterm>QObject::connectNotify(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;11&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::disconnectNotify(char const*)</primary></indexterm>QObject::disconnectNotify(char const*)</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The Run Time Type Information for the QEventLoop  class
is described by <XREF LINKEND="rtti-339">
</PARA>
<!--classdata-->
<TABLE ID="rtti-339">
<TITLE>typeinfo for QEventLoop</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Vtable</ENTRY>
<ENTRY><indexterm><primary>vtable for QObject</primary></indexterm>vtable for QObject</ENTRY>
</ROW>
<ROW>
<ENTRY>Name</ENTRY>
<ENTRY><indexterm><primary>typeinfo name for QEventLoop</primary></indexterm>typeinfo name for QEventLoop</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>


<SECT3>
<TITLE>Class data for QEvent</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the QEvent class
is described by <XREF LINKEND="cls-340-0">
</PARA>
<!--classdata-->
<TABLE id="cls-340-0">
<TITLE>Primary vtable for QEvent</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>Virtual Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>RTTI</ENTRY>
<ENTRY><indexterm><primary>typeinfo for QEvent</primary></indexterm>typeinfo for QEvent</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QEvent::~QEvent()</primary></indexterm>QEvent::~QEvent()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QEvent::~QEvent()</primary></indexterm>QEvent::~QEvent()</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The Run Time Type Information for the QEvent  class
is described by <XREF LINKEND="rtti-341">
</PARA>
<!--classdata-->
<TABLE ID="rtti-341">
<TITLE>typeinfo for QEvent</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Vtable</ENTRY>
<ENTRY><indexterm><primary></primary></indexterm></ENTRY>
</ROW>
<ROW>
<ENTRY>Name</ENTRY>
<ENTRY><indexterm><primary>typeinfo name for QEvent</primary></indexterm>typeinfo name for QEvent</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>


<SECT3>
<TITLE>Class data for QTimerEvent</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the QTimerEvent class
is described by <XREF LINKEND="cls-342-0">
</PARA>
<!--classdata-->
<TABLE id="cls-342-0">
<TITLE>Primary vtable for QTimerEvent</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>Virtual Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>RTTI</ENTRY>
<ENTRY><indexterm><primary>typeinfo for QTimerEvent</primary></indexterm>typeinfo for QTimerEvent</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QTimerEvent::~QTimerEvent()</primary></indexterm>QTimerEvent::~QTimerEvent()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QTimerEvent::~QTimerEvent()</primary></indexterm>QTimerEvent::~QTimerEvent()</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The Run Time Type Information for the QTimerEvent  class
is described by <XREF LINKEND="rtti-343">
</PARA>
<!--classdata-->
<TABLE ID="rtti-343">
<TITLE>typeinfo for QTimerEvent</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Vtable</ENTRY>
<ENTRY><indexterm><primary>vtable for QEvent</primary></indexterm>vtable for QEvent</ENTRY>
</ROW>
<ROW>
<ENTRY>Name</ENTRY>
<ENTRY><indexterm><primary>typeinfo name for QTimerEvent</primary></indexterm>typeinfo name for QTimerEvent</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>


<SECT3>
<TITLE>Class data for QChildEvent</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the QChildEvent class
is described by <XREF LINKEND="cls-344-0">
</PARA>
<!--classdata-->
<TABLE id="cls-344-0">
<TITLE>Primary vtable for QChildEvent</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>Virtual Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>RTTI</ENTRY>
<ENTRY><indexterm><primary>typeinfo for QChildEvent</primary></indexterm>typeinfo for QChildEvent</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QChildEvent::~QChildEvent()</primary></indexterm>QChildEvent::~QChildEvent()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QChildEvent::~QChildEvent()</primary></indexterm>QChildEvent::~QChildEvent()</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The Run Time Type Information for the QChildEvent  class
is described by <XREF LINKEND="rtti-345">
</PARA>
<!--classdata-->
<TABLE ID="rtti-345">
<TITLE>typeinfo for QChildEvent</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Vtable</ENTRY>
<ENTRY><indexterm><primary>vtable for QEvent</primary></indexterm>vtable for QEvent</ENTRY>
</ROW>
<ROW>
<ENTRY>Name</ENTRY>
<ENTRY><indexterm><primary>typeinfo name for QChildEvent</primary></indexterm>typeinfo name for QChildEvent</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>


<SECT3>
<TITLE>Class data for QCustomEvent</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the QCustomEvent class
is described by <XREF LINKEND="cls-346-0">
</PARA>
<!--classdata-->
<TABLE id="cls-346-0">
<TITLE>Primary vtable for QCustomEvent</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>Virtual Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>RTTI</ENTRY>
<ENTRY><indexterm><primary>typeinfo for QCustomEvent</primary></indexterm>typeinfo for QCustomEvent</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QCustomEvent::~QCustomEvent()</primary></indexterm>QCustomEvent::~QCustomEvent()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QCustomEvent::~QCustomEvent()</primary></indexterm>QCustomEvent::~QCustomEvent()</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The Run Time Type Information for the QCustomEvent  class
is described by <XREF LINKEND="rtti-347">
</PARA>
<!--classdata-->
<TABLE ID="rtti-347">
<TITLE>typeinfo for QCustomEvent</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Vtable</ENTRY>
<ENTRY><indexterm><primary>vtable for QEvent</primary></indexterm>vtable for QEvent</ENTRY>
</ROW>
<ROW>
<ENTRY>Name</ENTRY>
<ENTRY><indexterm><primary>typeinfo name for QCustomEvent</primary></indexterm>typeinfo name for QCustomEvent</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>


<SECT3>
<TITLE>Class data for QCoreApplication</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the QCoreApplication class
is described by <XREF LINKEND="cls-348-0">
</PARA>
<!--classdata-->
<TABLE id="cls-348-0">
<TITLE>Primary vtable for QCoreApplication</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>Virtual Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>RTTI</ENTRY>
<ENTRY><indexterm><primary>typeinfo for QCoreApplication</primary></indexterm>typeinfo for QCoreApplication</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QCoreApplication::metaObject() const</primary></indexterm>QCoreApplication::metaObject() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QCoreApplication::qt_metacast(char const*)</primary></indexterm>QCoreApplication::qt_metacast(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QCoreApplication::qt_metacall(QMetaObject::Call, int, void**)</primary></indexterm>QCoreApplication::qt_metacall(QMetaObject::Call, int, void**)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QCoreApplication::~QCoreApplication()</primary></indexterm>QCoreApplication::~QCoreApplication()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QCoreApplication::~QCoreApplication()</primary></indexterm>QCoreApplication::~QCoreApplication()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QCoreApplication::event(QEvent*)</primary></indexterm>QCoreApplication::event(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::eventFilter(QObject*, QEvent*)</primary></indexterm>QObject::eventFilter(QObject*, QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::timerEvent(QTimerEvent*)</primary></indexterm>QObject::timerEvent(QTimerEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::childEvent(QChildEvent*)</primary></indexterm>QObject::childEvent(QChildEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::customEvent(QEvent*)</primary></indexterm>QObject::customEvent(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::connectNotify(char const*)</primary></indexterm>QObject::connectNotify(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;11&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::disconnectNotify(char const*)</primary></indexterm>QObject::disconnectNotify(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;12&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QCoreApplication::notify(QObject*, QEvent*)</primary></indexterm>QCoreApplication::notify(QObject*, QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;13&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QCoreApplication::compressEvent(QEvent*, QObject*, QPostEventList*)</primary></indexterm>QCoreApplication::compressEvent(QEvent*, QObject*, QPostEventList*)</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The Run Time Type Information for the QCoreApplication  class
is described by <XREF LINKEND="rtti-349">
</PARA>
<!--classdata-->
<TABLE ID="rtti-349">
<TITLE>typeinfo for QCoreApplication</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Vtable</ENTRY>
<ENTRY><indexterm><primary>vtable for QObject</primary></indexterm>vtable for QObject</ENTRY>
</ROW>
<ROW>
<ENTRY>Name</ENTRY>
<ENTRY><indexterm><primary>typeinfo name for QCoreApplication</primary></indexterm>typeinfo name for QCoreApplication</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>


<SECT3>
<TITLE>Class data for QAbstractItemModel</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the QAbstractItemModel class
is described by <XREF LINKEND="cls-350-0">
</PARA>
<!--classdata-->
<TABLE id="cls-350-0">
<TITLE>Primary vtable for QAbstractItemModel</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>Virtual Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>RTTI</ENTRY>
<ENTRY><indexterm><primary>typeinfo for QAbstractItemModel</primary></indexterm>typeinfo for QAbstractItemModel</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::metaObject() const</primary></indexterm>QAbstractItemModel::metaObject() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::qt_metacast(char const*)</primary></indexterm>QAbstractItemModel::qt_metacast(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::qt_metacall(QMetaObject::Call, int, void**)</primary></indexterm>QAbstractItemModel::qt_metacall(QMetaObject::Call, int, void**)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::~QAbstractItemModel()</primary></indexterm>QAbstractItemModel::~QAbstractItemModel()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::~QAbstractItemModel()</primary></indexterm>QAbstractItemModel::~QAbstractItemModel()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::event(QEvent*)</primary></indexterm>QObject::event(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::eventFilter(QObject*, QEvent*)</primary></indexterm>QObject::eventFilter(QObject*, QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::timerEvent(QTimerEvent*)</primary></indexterm>QObject::timerEvent(QTimerEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::childEvent(QChildEvent*)</primary></indexterm>QObject::childEvent(QChildEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::customEvent(QEvent*)</primary></indexterm>QObject::customEvent(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::connectNotify(char const*)</primary></indexterm>QObject::connectNotify(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;11&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::disconnectNotify(char const*)</primary></indexterm>QObject::disconnectNotify(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;12&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;13&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;14&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;15&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;16&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::hasChildren(QModelIndex const&) const</primary></indexterm>QAbstractItemModel::hasChildren(QModelIndex const&) const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;17&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;18&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::setData(QModelIndex const&, QVariant const&, int)</primary></indexterm>QAbstractItemModel::setData(QModelIndex const&, QVariant const&, int)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;19&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::headerData(int, Qt::Orientation, int) const</primary></indexterm>QAbstractItemModel::headerData(int, Qt::Orientation, int) const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;20&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::setHeaderData(int, Qt::Orientation, QVariant const&, int)</primary></indexterm>QAbstractItemModel::setHeaderData(int, Qt::Orientation, QVariant const&, int)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;21&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::itemData(QModelIndex const&) const</primary></indexterm>QAbstractItemModel::itemData(QModelIndex const&) const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;22&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::setItemData(QModelIndex const&, QMap&lt;int, QVariant&gt; const&)</primary></indexterm>QAbstractItemModel::setItemData(QModelIndex const&, QMap&lt;int, QVariant&gt; const&)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;23&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::mimeTypes() const</primary></indexterm>QAbstractItemModel::mimeTypes() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;24&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::mimeData(QList&lt;QModelIndex&gt; const&) const</primary></indexterm>QAbstractItemModel::mimeData(QList&lt;QModelIndex&gt; const&) const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;25&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::dropMimeData(QMimeData const*, Qt::DropAction, int, int, QModelIndex const&)</primary></indexterm>QAbstractItemModel::dropMimeData(QMimeData const*, Qt::DropAction, int, int, QModelIndex const&)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;26&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::supportedDropActions() const</primary></indexterm>QAbstractItemModel::supportedDropActions() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;27&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::insertRows(int, int, QModelIndex const&)</primary></indexterm>QAbstractItemModel::insertRows(int, int, QModelIndex const&)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;28&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::insertColumns(int, int, QModelIndex const&)</primary></indexterm>QAbstractItemModel::insertColumns(int, int, QModelIndex const&)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;29&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::removeRows(int, int, QModelIndex const&)</primary></indexterm>QAbstractItemModel::removeRows(int, int, QModelIndex const&)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;30&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::removeColumns(int, int, QModelIndex const&)</primary></indexterm>QAbstractItemModel::removeColumns(int, int, QModelIndex const&)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;31&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::fetchMore(QModelIndex const&)</primary></indexterm>QAbstractItemModel::fetchMore(QModelIndex const&)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;32&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::canFetchMore(QModelIndex const&) const</primary></indexterm>QAbstractItemModel::canFetchMore(QModelIndex const&) const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;33&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::flags(QModelIndex const&) const</primary></indexterm>QAbstractItemModel::flags(QModelIndex const&) const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;34&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::sort(int, Qt::SortOrder)</primary></indexterm>QAbstractItemModel::sort(int, Qt::SortOrder)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;35&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::buddy(QModelIndex const&) const</primary></indexterm>QAbstractItemModel::buddy(QModelIndex const&) const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;36&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::match(QModelIndex const&, int, QVariant const&, int, QFlags&lt;Qt::MatchFlag&gt;) const</primary></indexterm>QAbstractItemModel::match(QModelIndex const&, int, QVariant const&, int, QFlags&lt;Qt::MatchFlag&gt;) const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;37&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::span(QModelIndex const&) const</primary></indexterm>QAbstractItemModel::span(QModelIndex const&) const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;38&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::submit()</primary></indexterm>QAbstractItemModel::submit()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;39&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::revert()</primary></indexterm>QAbstractItemModel::revert()</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The Run Time Type Information for the QAbstractItemModel  class
is described by <XREF LINKEND="rtti-351">
</PARA>
<!--classdata-->
<TABLE ID="rtti-351">
<TITLE>typeinfo for QAbstractItemModel</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Vtable</ENTRY>
<ENTRY><indexterm><primary>vtable for QObject</primary></indexterm>vtable for QObject</ENTRY>
</ROW>
<ROW>
<ENTRY>Name</ENTRY>
<ENTRY><indexterm><primary>typeinfo name for QAbstractItemModel</primary></indexterm>typeinfo name for QAbstractItemModel</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>


<SECT3>
<TITLE>Class data for QAbstractTableModel</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the QAbstractTableModel class
is described by <XREF LINKEND="cls-352-0">
</PARA>
<!--classdata-->
<TABLE id="cls-352-0">
<TITLE>Primary vtable for QAbstractTableModel</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>Virtual Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>RTTI</ENTRY>
<ENTRY><indexterm><primary>typeinfo for QAbstractTableModel</primary></indexterm>typeinfo for QAbstractTableModel</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractTableModel::metaObject() const</primary></indexterm>QAbstractTableModel::metaObject() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractTableModel::qt_metacast(char const*)</primary></indexterm>QAbstractTableModel::qt_metacast(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractTableModel::qt_metacall(QMetaObject::Call, int, void**)</primary></indexterm>QAbstractTableModel::qt_metacall(QMetaObject::Call, int, void**)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractTableModel::~QAbstractTableModel()</primary></indexterm>QAbstractTableModel::~QAbstractTableModel()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractTableModel::~QAbstractTableModel()</primary></indexterm>QAbstractTableModel::~QAbstractTableModel()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::event(QEvent*)</primary></indexterm>QObject::event(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::eventFilter(QObject*, QEvent*)</primary></indexterm>QObject::eventFilter(QObject*, QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::timerEvent(QTimerEvent*)</primary></indexterm>QObject::timerEvent(QTimerEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::childEvent(QChildEvent*)</primary></indexterm>QObject::childEvent(QChildEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::customEvent(QEvent*)</primary></indexterm>QObject::customEvent(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::connectNotify(char const*)</primary></indexterm>QObject::connectNotify(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;11&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::disconnectNotify(char const*)</primary></indexterm>QObject::disconnectNotify(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;12&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractTableModel::index(int, int, QModelIndex const&) const</primary></indexterm>QAbstractTableModel::index(int, int, QModelIndex const&) const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;13&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractTableModel::parent(QModelIndex const&) const</primary></indexterm>QAbstractTableModel::parent(QModelIndex const&) const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;14&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;15&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;16&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractTableModel::hasChildren(QModelIndex const&) const</primary></indexterm>QAbstractTableModel::hasChildren(QModelIndex const&) const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;17&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;18&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::setData(QModelIndex const&, QVariant const&, int)</primary></indexterm>QAbstractItemModel::setData(QModelIndex const&, QVariant const&, int)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;19&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::headerData(int, Qt::Orientation, int) const</primary></indexterm>QAbstractItemModel::headerData(int, Qt::Orientation, int) const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;20&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::setHeaderData(int, Qt::Orientation, QVariant const&, int)</primary></indexterm>QAbstractItemModel::setHeaderData(int, Qt::Orientation, QVariant const&, int)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;21&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::itemData(QModelIndex const&) const</primary></indexterm>QAbstractItemModel::itemData(QModelIndex const&) const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;22&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::setItemData(QModelIndex const&, QMap&lt;int, QVariant&gt; const&)</primary></indexterm>QAbstractItemModel::setItemData(QModelIndex const&, QMap&lt;int, QVariant&gt; const&)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;23&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::mimeTypes() const</primary></indexterm>QAbstractItemModel::mimeTypes() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;24&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::mimeData(QList&lt;QModelIndex&gt; const&) const</primary></indexterm>QAbstractItemModel::mimeData(QList&lt;QModelIndex&gt; const&) const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;25&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractTableModel::dropMimeData(QMimeData const*, Qt::DropAction, int, int, QModelIndex const&)</primary></indexterm>QAbstractTableModel::dropMimeData(QMimeData const*, Qt::DropAction, int, int, QModelIndex const&)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;26&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::supportedDropActions() const</primary></indexterm>QAbstractItemModel::supportedDropActions() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;27&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::insertRows(int, int, QModelIndex const&)</primary></indexterm>QAbstractItemModel::insertRows(int, int, QModelIndex const&)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;28&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::insertColumns(int, int, QModelIndex const&)</primary></indexterm>QAbstractItemModel::insertColumns(int, int, QModelIndex const&)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;29&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::removeRows(int, int, QModelIndex const&)</primary></indexterm>QAbstractItemModel::removeRows(int, int, QModelIndex const&)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;30&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::removeColumns(int, int, QModelIndex const&)</primary></indexterm>QAbstractItemModel::removeColumns(int, int, QModelIndex const&)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;31&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::fetchMore(QModelIndex const&)</primary></indexterm>QAbstractItemModel::fetchMore(QModelIndex const&)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;32&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::canFetchMore(QModelIndex const&) const</primary></indexterm>QAbstractItemModel::canFetchMore(QModelIndex const&) const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;33&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::flags(QModelIndex const&) const</primary></indexterm>QAbstractItemModel::flags(QModelIndex const&) const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;34&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::sort(int, Qt::SortOrder)</primary></indexterm>QAbstractItemModel::sort(int, Qt::SortOrder)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;35&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::buddy(QModelIndex const&) const</primary></indexterm>QAbstractItemModel::buddy(QModelIndex const&) const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;36&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::match(QModelIndex const&, int, QVariant const&, int, QFlags&lt;Qt::MatchFlag&gt;) const</primary></indexterm>QAbstractItemModel::match(QModelIndex const&, int, QVariant const&, int, QFlags&lt;Qt::MatchFlag&gt;) const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;37&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::span(QModelIndex const&) const</primary></indexterm>QAbstractItemModel::span(QModelIndex const&) const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;38&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::submit()</primary></indexterm>QAbstractItemModel::submit()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;39&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::revert()</primary></indexterm>QAbstractItemModel::revert()</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The Run Time Type Information for the QAbstractTableModel  class
is described by <XREF LINKEND="rtti-353">
</PARA>
<!--classdata-->
<TABLE ID="rtti-353">
<TITLE>typeinfo for QAbstractTableModel</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Vtable</ENTRY>
<ENTRY><indexterm><primary>vtable for QAbstractItemModel</primary></indexterm>vtable for QAbstractItemModel</ENTRY>
</ROW>
<ROW>
<ENTRY>Name</ENTRY>
<ENTRY><indexterm><primary>typeinfo name for QAbstractTableModel</primary></indexterm>typeinfo name for QAbstractTableModel</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>


<SECT3>
<TITLE>Class data for QAbstractListModel</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the QAbstractListModel class
is described by <XREF LINKEND="cls-354-0">
</PARA>
<!--classdata-->
<TABLE id="cls-354-0">
<TITLE>Primary vtable for QAbstractListModel</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>Virtual Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>RTTI</ENTRY>
<ENTRY><indexterm><primary>typeinfo for QAbstractListModel</primary></indexterm>typeinfo for QAbstractListModel</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractListModel::metaObject() const</primary></indexterm>QAbstractListModel::metaObject() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractListModel::qt_metacast(char const*)</primary></indexterm>QAbstractListModel::qt_metacast(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractListModel::qt_metacall(QMetaObject::Call, int, void**)</primary></indexterm>QAbstractListModel::qt_metacall(QMetaObject::Call, int, void**)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractListModel::~QAbstractListModel()</primary></indexterm>QAbstractListModel::~QAbstractListModel()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractListModel::~QAbstractListModel()</primary></indexterm>QAbstractListModel::~QAbstractListModel()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::event(QEvent*)</primary></indexterm>QObject::event(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::eventFilter(QObject*, QEvent*)</primary></indexterm>QObject::eventFilter(QObject*, QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::timerEvent(QTimerEvent*)</primary></indexterm>QObject::timerEvent(QTimerEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::childEvent(QChildEvent*)</primary></indexterm>QObject::childEvent(QChildEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::customEvent(QEvent*)</primary></indexterm>QObject::customEvent(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::connectNotify(char const*)</primary></indexterm>QObject::connectNotify(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;11&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::disconnectNotify(char const*)</primary></indexterm>QObject::disconnectNotify(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;12&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractListModel::index(int, int, QModelIndex const&) const</primary></indexterm>QAbstractListModel::index(int, int, QModelIndex const&) const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;13&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractListModel::parent(QModelIndex const&) const</primary></indexterm>QAbstractListModel::parent(QModelIndex const&) const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;14&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;15&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractListModel::columnCount(QModelIndex const&) const</primary></indexterm>QAbstractListModel::columnCount(QModelIndex const&) const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;16&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractListModel::hasChildren(QModelIndex const&) const</primary></indexterm>QAbstractListModel::hasChildren(QModelIndex const&) const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;17&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;18&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::setData(QModelIndex const&, QVariant const&, int)</primary></indexterm>QAbstractItemModel::setData(QModelIndex const&, QVariant const&, int)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;19&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::headerData(int, Qt::Orientation, int) const</primary></indexterm>QAbstractItemModel::headerData(int, Qt::Orientation, int) const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;20&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::setHeaderData(int, Qt::Orientation, QVariant const&, int)</primary></indexterm>QAbstractItemModel::setHeaderData(int, Qt::Orientation, QVariant const&, int)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;21&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::itemData(QModelIndex const&) const</primary></indexterm>QAbstractItemModel::itemData(QModelIndex const&) const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;22&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::setItemData(QModelIndex const&, QMap&lt;int, QVariant&gt; const&)</primary></indexterm>QAbstractItemModel::setItemData(QModelIndex const&, QMap&lt;int, QVariant&gt; const&)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;23&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::mimeTypes() const</primary></indexterm>QAbstractItemModel::mimeTypes() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;24&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::mimeData(QList&lt;QModelIndex&gt; const&) const</primary></indexterm>QAbstractItemModel::mimeData(QList&lt;QModelIndex&gt; const&) const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;25&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractListModel::dropMimeData(QMimeData const*, Qt::DropAction, int, int, QModelIndex const&)</primary></indexterm>QAbstractListModel::dropMimeData(QMimeData const*, Qt::DropAction, int, int, QModelIndex const&)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;26&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::supportedDropActions() const</primary></indexterm>QAbstractItemModel::supportedDropActions() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;27&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::insertRows(int, int, QModelIndex const&)</primary></indexterm>QAbstractItemModel::insertRows(int, int, QModelIndex const&)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;28&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::insertColumns(int, int, QModelIndex const&)</primary></indexterm>QAbstractItemModel::insertColumns(int, int, QModelIndex const&)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;29&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::removeRows(int, int, QModelIndex const&)</primary></indexterm>QAbstractItemModel::removeRows(int, int, QModelIndex const&)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;30&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::removeColumns(int, int, QModelIndex const&)</primary></indexterm>QAbstractItemModel::removeColumns(int, int, QModelIndex const&)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;31&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::fetchMore(QModelIndex const&)</primary></indexterm>QAbstractItemModel::fetchMore(QModelIndex const&)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;32&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::canFetchMore(QModelIndex const&) const</primary></indexterm>QAbstractItemModel::canFetchMore(QModelIndex const&) const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;33&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::flags(QModelIndex const&) const</primary></indexterm>QAbstractItemModel::flags(QModelIndex const&) const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;34&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::sort(int, Qt::SortOrder)</primary></indexterm>QAbstractItemModel::sort(int, Qt::SortOrder)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;35&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::buddy(QModelIndex const&) const</primary></indexterm>QAbstractItemModel::buddy(QModelIndex const&) const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;36&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::match(QModelIndex const&, int, QVariant const&, int, QFlags&lt;Qt::MatchFlag&gt;) const</primary></indexterm>QAbstractItemModel::match(QModelIndex const&, int, QVariant const&, int, QFlags&lt;Qt::MatchFlag&gt;) const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;37&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::span(QModelIndex const&) const</primary></indexterm>QAbstractItemModel::span(QModelIndex const&) const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;38&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::submit()</primary></indexterm>QAbstractItemModel::submit()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;39&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractItemModel::revert()</primary></indexterm>QAbstractItemModel::revert()</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The Run Time Type Information for the QAbstractListModel  class
is described by <XREF LINKEND="rtti-355">
</PARA>
<!--classdata-->
<TABLE ID="rtti-355">
<TITLE>typeinfo for QAbstractListModel</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Vtable</ENTRY>
<ENTRY><indexterm><primary>vtable for QAbstractItemModel</primary></indexterm>vtable for QAbstractItemModel</ENTRY>
</ROW>
<ROW>
<ENTRY>Name</ENTRY>
<ENTRY><indexterm><primary>typeinfo name for QAbstractListModel</primary></indexterm>typeinfo name for QAbstractListModel</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>


<SECT3>
<TITLE>Class data for QSignalMapper</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the QSignalMapper class
is described by <XREF LINKEND="cls-356-0">
</PARA>
<!--classdata-->
<TABLE id="cls-356-0">
<TITLE>Primary vtable for QSignalMapper</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>Virtual Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>RTTI</ENTRY>
<ENTRY><indexterm><primary>typeinfo for QSignalMapper</primary></indexterm>typeinfo for QSignalMapper</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QSignalMapper::metaObject() const</primary></indexterm>QSignalMapper::metaObject() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QSignalMapper::qt_metacast(char const*)</primary></indexterm>QSignalMapper::qt_metacast(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QSignalMapper::qt_metacall(QMetaObject::Call, int, void**)</primary></indexterm>QSignalMapper::qt_metacall(QMetaObject::Call, int, void**)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QSignalMapper::~QSignalMapper()</primary></indexterm>QSignalMapper::~QSignalMapper()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QSignalMapper::~QSignalMapper()</primary></indexterm>QSignalMapper::~QSignalMapper()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::event(QEvent*)</primary></indexterm>QObject::event(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::eventFilter(QObject*, QEvent*)</primary></indexterm>QObject::eventFilter(QObject*, QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::timerEvent(QTimerEvent*)</primary></indexterm>QObject::timerEvent(QTimerEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::childEvent(QChildEvent*)</primary></indexterm>QObject::childEvent(QChildEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::customEvent(QEvent*)</primary></indexterm>QObject::customEvent(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::connectNotify(char const*)</primary></indexterm>QObject::connectNotify(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;11&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::disconnectNotify(char const*)</primary></indexterm>QObject::disconnectNotify(char const*)</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The Run Time Type Information for the QSignalMapper  class
is described by <XREF LINKEND="rtti-357">
</PARA>
<!--classdata-->
<TABLE ID="rtti-357">
<TITLE>typeinfo for QSignalMapper</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Vtable</ENTRY>
<ENTRY><indexterm><primary>vtable for QObject</primary></indexterm>vtable for QObject</ENTRY>
</ROW>
<ROW>
<ENTRY>Name</ENTRY>
<ENTRY><indexterm><primary>typeinfo name for QSignalMapper</primary></indexterm>typeinfo name for QSignalMapper</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>


<SECT3>
<TITLE>Class data for QObjectCleanupHandler</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the QObjectCleanupHandler class
is described by <XREF LINKEND="cls-358-0">
</PARA>
<!--classdata-->
<TABLE id="cls-358-0">
<TITLE>Primary vtable for QObjectCleanupHandler</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>Virtual Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>RTTI</ENTRY>
<ENTRY><indexterm><primary>typeinfo for QObjectCleanupHandler</primary></indexterm>typeinfo for QObjectCleanupHandler</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObjectCleanupHandler::metaObject() const</primary></indexterm>QObjectCleanupHandler::metaObject() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObjectCleanupHandler::qt_metacast(char const*)</primary></indexterm>QObjectCleanupHandler::qt_metacast(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObjectCleanupHandler::qt_metacall(QMetaObject::Call, int, void**)</primary></indexterm>QObjectCleanupHandler::qt_metacall(QMetaObject::Call, int, void**)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObjectCleanupHandler::~QObjectCleanupHandler()</primary></indexterm>QObjectCleanupHandler::~QObjectCleanupHandler()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObjectCleanupHandler::~QObjectCleanupHandler()</primary></indexterm>QObjectCleanupHandler::~QObjectCleanupHandler()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::event(QEvent*)</primary></indexterm>QObject::event(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::eventFilter(QObject*, QEvent*)</primary></indexterm>QObject::eventFilter(QObject*, QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::timerEvent(QTimerEvent*)</primary></indexterm>QObject::timerEvent(QTimerEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::childEvent(QChildEvent*)</primary></indexterm>QObject::childEvent(QChildEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::customEvent(QEvent*)</primary></indexterm>QObject::customEvent(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::connectNotify(char const*)</primary></indexterm>QObject::connectNotify(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;11&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::disconnectNotify(char const*)</primary></indexterm>QObject::disconnectNotify(char const*)</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The Run Time Type Information for the QObjectCleanupHandler  class
is described by <XREF LINKEND="rtti-359">
</PARA>
<!--classdata-->
<TABLE ID="rtti-359">
<TITLE>typeinfo for QObjectCleanupHandler</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Vtable</ENTRY>
<ENTRY><indexterm><primary>vtable for QObject</primary></indexterm>vtable for QObject</ENTRY>
</ROW>
<ROW>
<ENTRY>Name</ENTRY>
<ENTRY><indexterm><primary>typeinfo name for QObjectCleanupHandler</primary></indexterm>typeinfo name for QObjectCleanupHandler</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>


<SECT3>
<TITLE>Class data for QSocketNotifier</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the QSocketNotifier class
is described by <XREF LINKEND="cls-360-0">
</PARA>
<!--classdata-->
<TABLE id="cls-360-0">
<TITLE>Primary vtable for QSocketNotifier</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>Virtual Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>RTTI</ENTRY>
<ENTRY><indexterm><primary>typeinfo for QSocketNotifier</primary></indexterm>typeinfo for QSocketNotifier</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QSocketNotifier::metaObject() const</primary></indexterm>QSocketNotifier::metaObject() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QSocketNotifier::qt_metacast(char const*)</primary></indexterm>QSocketNotifier::qt_metacast(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QSocketNotifier::qt_metacall(QMetaObject::Call, int, void**)</primary></indexterm>QSocketNotifier::qt_metacall(QMetaObject::Call, int, void**)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QSocketNotifier::~QSocketNotifier()</primary></indexterm>QSocketNotifier::~QSocketNotifier()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QSocketNotifier::~QSocketNotifier()</primary></indexterm>QSocketNotifier::~QSocketNotifier()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QSocketNotifier::event(QEvent*)</primary></indexterm>QSocketNotifier::event(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::eventFilter(QObject*, QEvent*)</primary></indexterm>QObject::eventFilter(QObject*, QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::timerEvent(QTimerEvent*)</primary></indexterm>QObject::timerEvent(QTimerEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::childEvent(QChildEvent*)</primary></indexterm>QObject::childEvent(QChildEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::customEvent(QEvent*)</primary></indexterm>QObject::customEvent(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::connectNotify(char const*)</primary></indexterm>QObject::connectNotify(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;11&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::disconnectNotify(char const*)</primary></indexterm>QObject::disconnectNotify(char const*)</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The Run Time Type Information for the QSocketNotifier  class
is described by <XREF LINKEND="rtti-361">
</PARA>
<!--classdata-->
<TABLE ID="rtti-361">
<TITLE>typeinfo for QSocketNotifier</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Vtable</ENTRY>
<ENTRY><indexterm><primary>vtable for QObject</primary></indexterm>vtable for QObject</ENTRY>
</ROW>
<ROW>
<ENTRY>Name</ENTRY>
<ENTRY><indexterm><primary>typeinfo name for QSocketNotifier</primary></indexterm>typeinfo name for QSocketNotifier</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>


<SECT3>
<TITLE>Class data for QTimer</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the QTimer class
is described by <XREF LINKEND="cls-362-0">
</PARA>
<!--classdata-->
<TABLE id="cls-362-0">
<TITLE>Primary vtable for QTimer</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>Virtual Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>RTTI</ENTRY>
<ENTRY><indexterm><primary>typeinfo for QTimer</primary></indexterm>typeinfo for QTimer</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QTimer::metaObject() const</primary></indexterm>QTimer::metaObject() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QTimer::qt_metacast(char const*)</primary></indexterm>QTimer::qt_metacast(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QTimer::qt_metacall(QMetaObject::Call, int, void**)</primary></indexterm>QTimer::qt_metacall(QMetaObject::Call, int, void**)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QTimer::~QTimer()</primary></indexterm>QTimer::~QTimer()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QTimer::~QTimer()</primary></indexterm>QTimer::~QTimer()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::event(QEvent*)</primary></indexterm>QObject::event(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::eventFilter(QObject*, QEvent*)</primary></indexterm>QObject::eventFilter(QObject*, QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QTimer::timerEvent(QTimerEvent*)</primary></indexterm>QTimer::timerEvent(QTimerEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::childEvent(QChildEvent*)</primary></indexterm>QObject::childEvent(QChildEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::customEvent(QEvent*)</primary></indexterm>QObject::customEvent(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::connectNotify(char const*)</primary></indexterm>QObject::connectNotify(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;11&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::disconnectNotify(char const*)</primary></indexterm>QObject::disconnectNotify(char const*)</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The Run Time Type Information for the QTimer  class
is described by <XREF LINKEND="rtti-363">
</PARA>
<!--classdata-->
<TABLE ID="rtti-363">
<TITLE>typeinfo for QTimer</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Vtable</ENTRY>
<ENTRY><indexterm><primary>vtable for QObject</primary></indexterm>vtable for QObject</ENTRY>
</ROW>
<ROW>
<ENTRY>Name</ENTRY>
<ENTRY><indexterm><primary>typeinfo name for QTimer</primary></indexterm>typeinfo name for QTimer</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>


<SECT3>
<TITLE>Class data for QAbstractEventDispatcher</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the QAbstractEventDispatcher class
is described by <XREF LINKEND="cls-364-0">
</PARA>
<!--classdata-->
<TABLE id="cls-364-0">
<TITLE>Primary vtable for QAbstractEventDispatcher</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>Virtual Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>RTTI</ENTRY>
<ENTRY><indexterm><primary>typeinfo for QAbstractEventDispatcher</primary></indexterm>typeinfo for QAbstractEventDispatcher</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractEventDispatcher::metaObject() const</primary></indexterm>QAbstractEventDispatcher::metaObject() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractEventDispatcher::qt_metacast(char const*)</primary></indexterm>QAbstractEventDispatcher::qt_metacast(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractEventDispatcher::qt_metacall(QMetaObject::Call, int, void**)</primary></indexterm>QAbstractEventDispatcher::qt_metacall(QMetaObject::Call, int, void**)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractEventDispatcher::~QAbstractEventDispatcher()</primary></indexterm>QAbstractEventDispatcher::~QAbstractEventDispatcher()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractEventDispatcher::~QAbstractEventDispatcher()</primary></indexterm>QAbstractEventDispatcher::~QAbstractEventDispatcher()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::event(QEvent*)</primary></indexterm>QObject::event(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::eventFilter(QObject*, QEvent*)</primary></indexterm>QObject::eventFilter(QObject*, QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::timerEvent(QTimerEvent*)</primary></indexterm>QObject::timerEvent(QTimerEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::childEvent(QChildEvent*)</primary></indexterm>QObject::childEvent(QChildEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::customEvent(QEvent*)</primary></indexterm>QObject::customEvent(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::connectNotify(char const*)</primary></indexterm>QObject::connectNotify(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;11&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::disconnectNotify(char const*)</primary></indexterm>QObject::disconnectNotify(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;12&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;13&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;14&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;15&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;16&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;17&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;18&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;19&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;20&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;21&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;22&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;23&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractEventDispatcher::startingUp()</primary></indexterm>QAbstractEventDispatcher::startingUp()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;24&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractEventDispatcher::closingDown()</primary></indexterm>QAbstractEventDispatcher::closingDown()</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The Run Time Type Information for the QAbstractEventDispatcher  class
is described by <XREF LINKEND="rtti-365">
</PARA>
<!--classdata-->
<TABLE ID="rtti-365">
<TITLE>typeinfo for QAbstractEventDispatcher</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Vtable</ENTRY>
<ENTRY><indexterm><primary>vtable for QObject</primary></indexterm>vtable for QObject</ENTRY>
</ROW>
<ROW>
<ENTRY>Name</ENTRY>
<ENTRY><indexterm><primary>typeinfo name for QAbstractEventDispatcher</primary></indexterm>typeinfo name for QAbstractEventDispatcher</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>


<SECT3>
<TITLE>Class data for QPluginLoader</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the QPluginLoader class
is described by <XREF LINKEND="cls-366-0">
</PARA>
<!--classdata-->
<TABLE id="cls-366-0">
<TITLE>Primary vtable for QPluginLoader</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>Virtual Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>RTTI</ENTRY>
<ENTRY><indexterm><primary>typeinfo for QPluginLoader</primary></indexterm>typeinfo for QPluginLoader</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QPluginLoader::metaObject() const</primary></indexterm>QPluginLoader::metaObject() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QPluginLoader::qt_metacast(char const*)</primary></indexterm>QPluginLoader::qt_metacast(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QPluginLoader::qt_metacall(QMetaObject::Call, int, void**)</primary></indexterm>QPluginLoader::qt_metacall(QMetaObject::Call, int, void**)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QPluginLoader::~QPluginLoader()</primary></indexterm>QPluginLoader::~QPluginLoader()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QPluginLoader::~QPluginLoader()</primary></indexterm>QPluginLoader::~QPluginLoader()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::event(QEvent*)</primary></indexterm>QObject::event(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::eventFilter(QObject*, QEvent*)</primary></indexterm>QObject::eventFilter(QObject*, QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::timerEvent(QTimerEvent*)</primary></indexterm>QObject::timerEvent(QTimerEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::childEvent(QChildEvent*)</primary></indexterm>QObject::childEvent(QChildEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::customEvent(QEvent*)</primary></indexterm>QObject::customEvent(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::connectNotify(char const*)</primary></indexterm>QObject::connectNotify(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;11&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::disconnectNotify(char const*)</primary></indexterm>QObject::disconnectNotify(char const*)</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The Run Time Type Information for the QPluginLoader  class
is described by <XREF LINKEND="rtti-367">
</PARA>
<!--classdata-->
<TABLE ID="rtti-367">
<TITLE>typeinfo for QPluginLoader</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Vtable</ENTRY>
<ENTRY><indexterm><primary>vtable for QObject</primary></indexterm>vtable for QObject</ENTRY>
</ROW>
<ROW>
<ENTRY>Name</ENTRY>
<ENTRY><indexterm><primary>typeinfo name for QPluginLoader</primary></indexterm>typeinfo name for QPluginLoader</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>


<SECT3>
<TITLE>Class data for QLibrary</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the QLibrary class
is described by <XREF LINKEND="cls-368-0">
</PARA>
<!--classdata-->
<TABLE id="cls-368-0">
<TITLE>Primary vtable for QLibrary</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>Virtual Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>RTTI</ENTRY>
<ENTRY><indexterm><primary>typeinfo for QLibrary</primary></indexterm>typeinfo for QLibrary</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QLibrary::metaObject() const</primary></indexterm>QLibrary::metaObject() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QLibrary::qt_metacast(char const*)</primary></indexterm>QLibrary::qt_metacast(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QLibrary::qt_metacall(QMetaObject::Call, int, void**)</primary></indexterm>QLibrary::qt_metacall(QMetaObject::Call, int, void**)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QLibrary::~QLibrary()</primary></indexterm>QLibrary::~QLibrary()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QLibrary::~QLibrary()</primary></indexterm>QLibrary::~QLibrary()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::event(QEvent*)</primary></indexterm>QObject::event(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::eventFilter(QObject*, QEvent*)</primary></indexterm>QObject::eventFilter(QObject*, QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::timerEvent(QTimerEvent*)</primary></indexterm>QObject::timerEvent(QTimerEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::childEvent(QChildEvent*)</primary></indexterm>QObject::childEvent(QChildEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::customEvent(QEvent*)</primary></indexterm>QObject::customEvent(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::connectNotify(char const*)</primary></indexterm>QObject::connectNotify(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;11&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::disconnectNotify(char const*)</primary></indexterm>QObject::disconnectNotify(char const*)</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The Run Time Type Information for the QLibrary  class
is described by <XREF LINKEND="rtti-369">
</PARA>
<!--classdata-->
<TABLE ID="rtti-369">
<TITLE>typeinfo for QLibrary</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Vtable</ENTRY>
<ENTRY><indexterm><primary>vtable for QObject</primary></indexterm>vtable for QObject</ENTRY>
</ROW>
<ROW>
<ENTRY>Name</ENTRY>
<ENTRY><indexterm><primary>typeinfo name for QLibrary</primary></indexterm>typeinfo name for QLibrary</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>


<SECT3>
<TITLE>Interfaces for QtCore</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic functions
for QtCore specified in <XREF linkend="tbl-libQtCore-qtc-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<TABLE id="tbl-libQtCore-qtc-ints">
<TITLE>libQtCore - QtCore Function Interfaces</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY><indexterm><primary>_Z10forcepointR11QTextStream</primary></indexterm>_Z10forcepointR11QTextStream <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_Z10noshowbaseR11QTextStream</primary></indexterm>_Z10noshowbaseR11QTextStream <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_Z10scientificR11QTextStream</primary></indexterm>_Z10scientificR11QTextStream <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_Z11noforcesignR11QTextStream</primary></indexterm>_Z11noforcesignR11QTextStream <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_Z11qUncompressPKhi</primary></indexterm>_Z11qUncompressPKhi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_Z11qt_assert_xPKcS0_S0_i</primary></indexterm>_Z11qt_assert_xPKcS0_S0_i <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_Z12noforcepointR11QTextStream</primary></indexterm>_Z12noforcepointR11QTextStream <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_Z12qInstallPathv</primary></indexterm>_Z12qInstallPathv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_Z12qSharedBuildv</primary></indexterm>_Z12qSharedBuildv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_Z13lowercasebaseR11QTextStream</primary></indexterm>_Z13lowercasebaseR11QTextStream <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_Z13qErrnoWarningPKcz</primary></indexterm>_Z13qErrnoWarningPKcz <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_Z13qErrnoWarningiPKcz</primary></indexterm>_Z13qErrnoWarningiPKcz <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_Z13uppercasebaseR11QTextStream</primary></indexterm>_Z13uppercasebaseR11QTextStream <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_Z14qSystemWarningPKci</primary></indexterm>_Z14qSystemWarningPKci <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_Z15lowercasedigitsR11QTextStream</primary></indexterm>_Z15lowercasedigitsR11QTextStream <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_Z15qAddPostRoutinePFvvE</primary></indexterm>_Z15qAddPostRoutinePFvvE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_Z15qt_error_stringi</primary></indexterm>_Z15qt_error_stringi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_Z15uppercasedigitsR11QTextStream</primary></indexterm>_Z15uppercasedigitsR11QTextStream <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_Z16qInstallPathBinsv</primary></indexterm>_Z16qInstallPathBinsv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_Z16qInstallPathDatav</primary></indexterm>_Z16qInstallPathDatav <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_Z16qInstallPathDocsv</primary></indexterm>_Z16qInstallPathDocsv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_Z16qInstallPathLibsv</primary></indexterm>_Z16qInstallPathLibsv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_Z16qt_check_pointerPKci</primary></indexterm>_Z16qt_check_pointerPKci <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_Z17qt_message_output9QtMsgTypePKc</primary></indexterm>_Z17qt_message_output9QtMsgTypePKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_Z18qInstallMsgHandlerPFv9QtMsgTypePKcE</primary></indexterm>_Z18qInstallMsgHandlerPFv9QtMsgTypePKcE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_Z18qRemovePostRoutinePFvvE</primary></indexterm>_Z18qRemovePostRoutinePFvvE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_Z19qInstallPathHeadersv</primary></indexterm>_Z19qInstallPathHeadersv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_Z19qInstallPathPluginsv</primary></indexterm>_Z19qInstallPathPluginsv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_Z19qInstallPathSysconfv</primary></indexterm>_Z19qInstallPathSysconfv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_Z20qt_qFindChild_helperPK7QObjectRK7QStringRK11QMetaObject</primary></indexterm>_Z20qt_qFindChild_helperPK7QObjectRK7QStringRK11QMetaObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_Z21qRegisterResourceDataiPKhS0_S0_</primary></indexterm>_Z21qRegisterResourceDataiPKhS0_S0_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_Z23qUnregisterResourceDataiPKhS0_S0_</primary></indexterm>_Z23qUnregisterResourceDataiPKhS0_S0_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_Z23qt_qFindChildren_helperPK7QObjectRK7QStringPK7QRegExpRK11QMetaObjectP5QListIPvE</primary></indexterm>_Z23qt_qFindChildren_helperPK7QObjectRK7QStringPK7QRegExpRK11QMetaObjectP5QListIPvE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_Z24qInstallPathTranslationsv</primary></indexterm>_Z24qInstallPathTranslationsv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_Z2wsR11QTextStream</primary></indexterm>_Z2wsR11QTextStream <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_Z32qt_register_signal_spy_callbacksRK21QSignalSpyCallbackSet</primary></indexterm>_Z32qt_register_signal_spy_callbacksRK21QSignalSpyCallbackSet <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_Z37qRegisterStaticPluginInstanceFunctionPFP7QObjectvE</primary></indexterm>_Z37qRegisterStaticPluginInstanceFunctionPFP7QObjectvE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_Z3binR11QTextStream</primary></indexterm>_Z3binR11QTextStream <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_Z3bomR11QTextStream</primary></indexterm>_Z3bomR11QTextStream <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_Z3decR11QTextStream</primary></indexterm>_Z3decR11QTextStream <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_Z3hexR11QTextStream</primary></indexterm>_Z3hexR11QTextStream <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_Z3octR11QTextStream</primary></indexterm>_Z3octR11QTextStream <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_Z4endlR11QTextStream</primary></indexterm>_Z4endlR11QTextStream <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_Z4leftR11QTextStream</primary></indexterm>_Z4leftR11QTextStream <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_Z5fixedR11QTextStream</primary></indexterm>_Z5fixedR11QTextStream <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_Z5flushR11QTextStream</primary></indexterm>_Z5flushR11QTextStream <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_Z5qFreePv</primary></indexterm>_Z5qFreePv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_Z5qHashRK10QByteArray</primary></indexterm>_Z5qHashRK10QByteArray <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_Z5qHashRK7QString</primary></indexterm>_Z5qHashRK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_Z5resetR11QTextStream</primary></indexterm>_Z5resetR11QTextStream <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_Z5rightR11QTextStream</primary></indexterm>_Z5rightR11QTextStream <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_Z6centerR11QTextStream</primary></indexterm>_Z6centerR11QTextStream <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_Z6qDebugPKcz</primary></indexterm>_Z6qDebugPKcz <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_Z6qFatalPKcz</primary></indexterm>_Z6qFatalPKcz <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_Z7qgetenvPKc</primary></indexterm>_Z7qgetenvPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_Z7qstrcmpPKcS0_</primary></indexterm>_Z7qstrcmpPKcS0_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_Z7qstrcpyPcPKc</primary></indexterm>_Z7qstrcpyPcPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_Z7qstrdupPKc</primary></indexterm>_Z7qstrdupPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_Z8qAppNamev</primary></indexterm>_Z8qAppNamev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_Z8qVersionv</primary></indexterm>_Z8qVersionv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_Z8qWarningPKcz</primary></indexterm>_Z8qWarningPKcz <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_Z8qstricmpPKcS0_</primary></indexterm>_Z8qstricmpPKcS0_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_Z8qstrncpyPcPKcj</primary></indexterm>_Z8qstrncpyPcPKcj <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_Z8showbaseR11QTextStream</primary></indexterm>_Z8showbaseR11QTextStream <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_Z9forcesignR11QTextStream</primary></indexterm>_Z9forcesignR11QTextStream <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_Z9qChecksumPKcj</primary></indexterm>_Z9qChecksumPKcj <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_Z9qCompressPKhii</primary></indexterm>_Z9qCompressPKhii <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_Z9qCriticalPKcz</primary></indexterm>_Z9qCriticalPKcz <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_Z9qstrnicmpPKcS0_j</primary></indexterm>_Z9qstrnicmpPKcS0_j <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_Z9qt_assertPKcS0_i</primary></indexterm>_Z9qt_assertPKcS0_i <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN10QByteArray10fromBase64ERKS_</primary></indexterm>_ZN10QByteArray10fromBase64ERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN10QByteArray11fromRawDataEPKci</primary></indexterm>_ZN10QByteArray11fromRawDataEPKci <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN10QByteArray4chopEi</primary></indexterm>_ZN10QByteArray4chopEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN10QByteArray4fillEci</primary></indexterm>_ZN10QByteArray4fillEci <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN10QByteArray5clearEv</primary></indexterm>_ZN10QByteArray5clearEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN10QByteArray6appendEPKc</primary></indexterm>_ZN10QByteArray6appendEPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN10QByteArray6appendERKS_</primary></indexterm>_ZN10QByteArray6appendERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN10QByteArray6appendEc</primary></indexterm>_ZN10QByteArray6appendEc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN10QByteArray6expandEi</primary></indexterm>_ZN10QByteArray6expandEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN10QByteArray6insertEiPKc</primary></indexterm>_ZN10QByteArray6insertEiPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN10QByteArray6insertEiRKS_</primary></indexterm>_ZN10QByteArray6insertEiRKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN10QByteArray6insertEic</primary></indexterm>_ZN10QByteArray6insertEic <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN10QByteArray6numberEdci</primary></indexterm>_ZN10QByteArray6numberEdci <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN10QByteArray6numberEii</primary></indexterm>_ZN10QByteArray6numberEii <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN10QByteArray6numberEji</primary></indexterm>_ZN10QByteArray6numberEji <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN10QByteArray6numberExi</primary></indexterm>_ZN10QByteArray6numberExi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN10QByteArray6numberEyi</primary></indexterm>_ZN10QByteArray6numberEyi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN10QByteArray6removeEii</primary></indexterm>_ZN10QByteArray6removeEii <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN10QByteArray6resizeEi</primary></indexterm>_ZN10QByteArray6resizeEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN10QByteArray6setNumEdci</primary></indexterm>_ZN10QByteArray6setNumEdci <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN10QByteArray6setNumExi</primary></indexterm>_ZN10QByteArray6setNumExi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN10QByteArray6setNumEyi</primary></indexterm>_ZN10QByteArray6setNumEyi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN10QByteArray7prependEPKc</primary></indexterm>_ZN10QByteArray7prependEPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN10QByteArray7prependERKS_</primary></indexterm>_ZN10QByteArray7prependERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN10QByteArray7prependEc</primary></indexterm>_ZN10QByteArray7prependEc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN10QByteArray7reallocEi</primary></indexterm>_ZN10QByteArray7reallocEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN10QByteArray7replaceERKS_S1_</primary></indexterm>_ZN10QByteArray7replaceERKS_S1_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN10QByteArray7replaceEcRKS_</primary></indexterm>_ZN10QByteArray7replaceEcRKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN10QByteArray7replaceEcc</primary></indexterm>_ZN10QByteArray7replaceEcc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN10QByteArray7replaceEiiRKS_</primary></indexterm>_ZN10QByteArray7replaceEiiRKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN10QByteArray8truncateEi</primary></indexterm>_ZN10QByteArray8truncateEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN10QByteArrayC1EPKc</primary></indexterm>_ZN10QByteArrayC1EPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN10QByteArrayC1EPKci</primary></indexterm>_ZN10QByteArrayC1EPKci <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN10QByteArrayC1Eic</primary></indexterm>_ZN10QByteArrayC1Eic <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN10QByteArrayC2EPKc</primary></indexterm>_ZN10QByteArrayC2EPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN10QByteArrayC2EPKci</primary></indexterm>_ZN10QByteArrayC2EPKci <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN10QByteArrayC2Eic</primary></indexterm>_ZN10QByteArrayC2Eic <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN10QByteArrayaSEPKc</primary></indexterm>_ZN10QByteArrayaSEPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN10QByteArrayaSERKS_</primary></indexterm>_ZN10QByteArrayaSERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN10QEventLoop11qt_metacallEN11QMetaObject4CallEiPPv</primary></indexterm>_ZN10QEventLoop11qt_metacallEN11QMetaObject4CallEiPPv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN10QEventLoop11qt_metacastEPKc</primary></indexterm>_ZN10QEventLoop11qt_metacastEPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN10QEventLoop13processEventsE6QFlagsINS_17ProcessEventsFlagEE</primary></indexterm>_ZN10QEventLoop13processEventsE6QFlagsINS_17ProcessEventsFlagEE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN10QEventLoop13processEventsE6QFlagsINS_17ProcessEventsFlagEEi</primary></indexterm>_ZN10QEventLoop13processEventsE6QFlagsINS_17ProcessEventsFlagEEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN10QEventLoop4execE6QFlagsINS_17ProcessEventsFlagEE</primary></indexterm>_ZN10QEventLoop4execE6QFlagsINS_17ProcessEventsFlagEE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN10QEventLoop4exitEi</primary></indexterm>_ZN10QEventLoop4exitEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN10QEventLoop4quitEv</primary></indexterm>_ZN10QEventLoop4quitEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN10QEventLoop6wakeUpEv</primary></indexterm>_ZN10QEventLoop6wakeUpEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN10QEventLoopC1EP7QObject</primary></indexterm>_ZN10QEventLoopC1EP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN10QEventLoopC2EP7QObject</primary></indexterm>_ZN10QEventLoopC2EP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN10QEventLoopD0Ev</primary></indexterm>_ZN10QEventLoopD0Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN10QEventLoopD1Ev</primary></indexterm>_ZN10QEventLoopD1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN10QEventLoopD2Ev</primary></indexterm>_ZN10QEventLoopD2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN10QSemaphore10tryAcquireEi</primary></indexterm>_ZN10QSemaphore10tryAcquireEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN10QSemaphore7acquireEi</primary></indexterm>_ZN10QSemaphore7acquireEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN10QSemaphore7releaseEi</primary></indexterm>_ZN10QSemaphore7releaseEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN10QSemaphoreC1Ei</primary></indexterm>_ZN10QSemaphoreC1Ei <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN10QSemaphoreC2Ei</primary></indexterm>_ZN10QSemaphoreC2Ei <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN10QSemaphoreD1Ev</primary></indexterm>_ZN10QSemaphoreD1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN10QSemaphoreD2Ev</primary></indexterm>_ZN10QSemaphoreD2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN10QTextCodec11codecForMibEi</primary></indexterm>_ZN10QTextCodec11codecForMibEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN10QTextCodec12codecForHtmlERK10QByteArray</primary></indexterm>_ZN10QTextCodec12codecForHtmlERK10QByteArray <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN10QTextCodec12codecForNameERK10QByteArray</primary></indexterm>_ZN10QTextCodec12codecForNameERK10QByteArray <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN10QTextCodec13availableMibsEv</primary></indexterm>_ZN10QTextCodec13availableMibsEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN10QTextCodec14codecForLocaleEv</primary></indexterm>_ZN10QTextCodec14codecForLocaleEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN10QTextCodec15availableCodecsEv</primary></indexterm>_ZN10QTextCodec15availableCodecsEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN10QTextCodec17setCodecForLocaleEPS_</primary></indexterm>_ZN10QTextCodec17setCodecForLocaleEPS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN10QTextCodec6localeEv</primary></indexterm>_ZN10QTextCodec6localeEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN10QTextCodecC1Ev</primary></indexterm>_ZN10QTextCodecC1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN10QTextCodecC2Ev</primary></indexterm>_ZN10QTextCodecC2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN10QTextCodecD0Ev</primary></indexterm>_ZN10QTextCodecD0Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN10QTextCodecD1Ev</primary></indexterm>_ZN10QTextCodecD1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN10QTextCodecD2Ev</primary></indexterm>_ZN10QTextCodecD2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QBasicTimer4stopEv</primary></indexterm>_ZN11QBasicTimer4stopEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QBasicTimer5startEiP7QObject</primary></indexterm>_ZN11QBasicTimer5startEiP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QChildEventC1EN6QEvent4TypeEP7QObject</primary></indexterm>_ZN11QChildEventC1EN6QEvent4TypeEP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QChildEventC2EN6QEvent4TypeEP7QObject</primary></indexterm>_ZN11QChildEventC2EN6QEvent4TypeEP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QChildEventD0Ev</primary></indexterm>_ZN11QChildEventD0Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QChildEventD1Ev</primary></indexterm>_ZN11QChildEventD1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QChildEventD2Ev</primary></indexterm>_ZN11QChildEventD2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QDataStream10writeBytesEPKcj</primary></indexterm>_ZN11QDataStream10writeBytesEPKcj <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QDataStream11readRawDataEPci</primary></indexterm>_ZN11QDataStream11readRawDataEPci <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QDataStream11resetStatusEv</primary></indexterm>_ZN11QDataStream11resetStatusEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QDataStream11skipRawDataEi</primary></indexterm>_ZN11QDataStream11skipRawDataEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QDataStream11unsetDeviceEv</primary></indexterm>_ZN11QDataStream11unsetDeviceEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QDataStream12setByteOrderENS_9ByteOrderE</primary></indexterm>_ZN11QDataStream12setByteOrderENS_9ByteOrderE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QDataStream12writeRawDataEPKci</primary></indexterm>_ZN11QDataStream12writeRawDataEPKci <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QDataStream9readBytesERPcRj</primary></indexterm>_ZN11QDataStream9readBytesERPcRj <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QDataStream9setDeviceEP9QIODevice</primary></indexterm>_ZN11QDataStream9setDeviceEP9QIODevice <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QDataStream9setStatusENS_6StatusE</primary></indexterm>_ZN11QDataStream9setStatusENS_6StatusE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QDataStreamC1EP10QByteArray6QFlagsIN9QIODevice12OpenModeFlagEE</primary></indexterm>_ZN11QDataStreamC1EP10QByteArray6QFlagsIN9QIODevice12OpenModeFlagEE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QDataStreamC1EP10QByteArrayi</primary></indexterm>_ZN11QDataStreamC1EP10QByteArrayi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QDataStreamC1EP9QIODevice</primary></indexterm>_ZN11QDataStreamC1EP9QIODevice <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QDataStreamC1ERK10QByteArray</primary></indexterm>_ZN11QDataStreamC1ERK10QByteArray <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QDataStreamC1Ev</primary></indexterm>_ZN11QDataStreamC1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QDataStreamC2EP10QByteArray6QFlagsIN9QIODevice12OpenModeFlagEE</primary></indexterm>_ZN11QDataStreamC2EP10QByteArray6QFlagsIN9QIODevice12OpenModeFlagEE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QDataStreamC2EP10QByteArrayi</primary></indexterm>_ZN11QDataStreamC2EP10QByteArrayi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QDataStreamC2EP9QIODevice</primary></indexterm>_ZN11QDataStreamC2EP9QIODevice <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QDataStreamC2ERK10QByteArray</primary></indexterm>_ZN11QDataStreamC2ERK10QByteArray <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QDataStreamC2Ev</primary></indexterm>_ZN11QDataStreamC2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QDataStreamD0Ev</primary></indexterm>_ZN11QDataStreamD0Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QDataStreamD1Ev</primary></indexterm>_ZN11QDataStreamD1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QDataStreamD2Ev</primary></indexterm>_ZN11QDataStreamD2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QDataStreamlsEPKc</primary></indexterm>_ZN11QDataStreamlsEPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QDataStreamlsEa</primary></indexterm>_ZN11QDataStreamlsEa <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QDataStreamlsEb</primary></indexterm>_ZN11QDataStreamlsEb <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QDataStreamlsEd</primary></indexterm>_ZN11QDataStreamlsEd <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QDataStreamlsEf</primary></indexterm>_ZN11QDataStreamlsEf <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QDataStreamlsEi</primary></indexterm>_ZN11QDataStreamlsEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QDataStreamlsEs</primary></indexterm>_ZN11QDataStreamlsEs <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QDataStreamlsEx</primary></indexterm>_ZN11QDataStreamlsEx <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QDataStreamrsERPc</primary></indexterm>_ZN11QDataStreamrsERPc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QDataStreamrsERa</primary></indexterm>_ZN11QDataStreamrsERa <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QDataStreamrsERb</primary></indexterm>_ZN11QDataStreamrsERb <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QDataStreamrsERd</primary></indexterm>_ZN11QDataStreamrsERd <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QDataStreamrsERf</primary></indexterm>_ZN11QDataStreamrsERf <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QDataStreamrsERi</primary></indexterm>_ZN11QDataStreamrsERi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QDataStreamrsERs</primary></indexterm>_ZN11QDataStreamrsERs <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QDataStreamrsERx</primary></indexterm>_ZN11QDataStreamrsERx <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QMetaObject10disconnectEPK7QObjectiS2_i</primary></indexterm>_ZN11QMetaObject10disconnectEPK7QObjectiS2_i <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QMetaObject11changeGuardEPP7QObjectS1_</primary></indexterm>_ZN11QMetaObject11changeGuardEPP7QObjectS1_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QMetaObject11removeGuardEPP7QObject</primary></indexterm>_ZN11QMetaObject11removeGuardEPP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QMetaObject12invokeMethodEP7QObjectPKcN2Qt14ConnectionTypeE22QGenericReturnArgument16QGenericArgumentS7_S7_S7_S7_S7_S7_S7_S7_S7_</primary></indexterm>_ZN11QMetaObject12invokeMethodEP7QObjectPKcN2Qt14ConnectionTypeE22QGenericReturnArgument16QGenericArgumentS7_S7_S7_S7_S7_S7_S7_S7_S7_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QMetaObject16checkConnectArgsEPKcS1_</primary></indexterm>_ZN11QMetaObject16checkConnectArgsEPKcS1_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QMetaObject18connectSlotsByNameEP7QObject</primary></indexterm>_ZN11QMetaObject18connectSlotsByNameEP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QMetaObject19normalizedSignatureEPKc</primary></indexterm>_ZN11QMetaObject19normalizedSignatureEPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QMetaObject7connectEPK7QObjectiS2_iiPi</primary></indexterm>_ZN11QMetaObject7connectEPK7QObjectiS2_iiPi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QMetaObject8activateEP7QObjectPKS_iPPv</primary></indexterm>_ZN11QMetaObject8activateEP7QObjectPKS_iPPv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QMetaObject8activateEP7QObjectPKS_iiPPv</primary></indexterm>_ZN11QMetaObject8activateEP7QObjectPKS_iiPPv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QMetaObject8activateEP7QObjectiPPv</primary></indexterm>_ZN11QMetaObject8activateEP7QObjectiPPv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QMetaObject8activateEP7QObjectiiPPv</primary></indexterm>_ZN11QMetaObject8activateEP7QObjectiiPPv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QMetaObject8addGuardEPP7QObject</primary></indexterm>_ZN11QMetaObject8addGuardEPP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QTextStream10setPadCharE5QChar</primary></indexterm>_ZN11QTextStream10setPadCharE5QChar <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QTextStream11resetStatusEv</primary></indexterm>_ZN11QTextStream11resetStatusEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QTextStream11setEncodingENS_8EncodingE</primary></indexterm>_ZN11QTextStream11setEncodingENS_8EncodingE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QTextStream13setFieldWidthEi</primary></indexterm>_ZN11QTextStream13setFieldWidthEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QTextStream14setIntegerBaseEi</primary></indexterm>_ZN11QTextStream14setIntegerBaseEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QTextStream14setNumberFlagsE6QFlagsINS_10NumberFlagEE</primary></indexterm>_ZN11QTextStream14setNumberFlagsE6QFlagsINS_10NumberFlagEE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QTextStream14skipWhiteSpaceEv</primary></indexterm>_ZN11QTextStream14skipWhiteSpaceEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QTextStream17setFieldAlignmentENS_14FieldAlignmentE</primary></indexterm>_ZN11QTextStream17setFieldAlignmentENS_14FieldAlignmentE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QTextStream20setAutoDetectUnicodeEb</primary></indexterm>_ZN11QTextStream20setAutoDetectUnicodeEb <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QTextStream21setRealNumberNotationENS_18RealNumberNotationE</primary></indexterm>_ZN11QTextStream21setRealNumberNotationENS_18RealNumberNotationE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QTextStream22setRealNumberPrecisionEi</primary></indexterm>_ZN11QTextStream22setRealNumberPrecisionEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QTextStream24setGenerateByteOrderMarkEb</primary></indexterm>_ZN11QTextStream24setGenerateByteOrderMarkEb <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QTextStream4readEx</primary></indexterm>_ZN11QTextStream4readEx <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QTextStream4seekEx</primary></indexterm>_ZN11QTextStream4seekEx <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QTextStream5flushEv</primary></indexterm>_ZN11QTextStream5flushEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QTextStream5resetEv</primary></indexterm>_ZN11QTextStream5resetEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QTextStream7readAllEv</primary></indexterm>_ZN11QTextStream7readAllEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QTextStream8readLineEx</primary></indexterm>_ZN11QTextStream8readLineEx <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QTextStream8setCodecEP10QTextCodec</primary></indexterm>_ZN11QTextStream8setCodecEP10QTextCodec <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QTextStream8setCodecEPKc</primary></indexterm>_ZN11QTextStream8setCodecEPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QTextStream9setDeviceEP9QIODevice</primary></indexterm>_ZN11QTextStream9setDeviceEP9QIODevice <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QTextStream9setStatusENS_6StatusE</primary></indexterm>_ZN11QTextStream9setStatusENS_6StatusE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QTextStream9setStringEP7QString6QFlagsIN9QIODevice12OpenModeFlagEE</primary></indexterm>_ZN11QTextStream9setStringEP7QString6QFlagsIN9QIODevice12OpenModeFlagEE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QTextStreamC1EP10QByteArray6QFlagsIN9QIODevice12OpenModeFlagEE</primary></indexterm>_ZN11QTextStreamC1EP10QByteArray6QFlagsIN9QIODevice12OpenModeFlagEE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QTextStreamC1EP7QString6QFlagsIN9QIODevice12OpenModeFlagEE</primary></indexterm>_ZN11QTextStreamC1EP7QString6QFlagsIN9QIODevice12OpenModeFlagEE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QTextStreamC1EP8_IO_FILE6QFlagsIN9QIODevice12OpenModeFlagEE</primary></indexterm>_ZN11QTextStreamC1EP8_IO_FILE6QFlagsIN9QIODevice12OpenModeFlagEE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QTextStreamC1EP9QIODevice</primary></indexterm>_ZN11QTextStreamC1EP9QIODevice <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QTextStreamC1ERK10QByteArray6QFlagsIN9QIODevice12OpenModeFlagEE</primary></indexterm>_ZN11QTextStreamC1ERK10QByteArray6QFlagsIN9QIODevice12OpenModeFlagEE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QTextStreamC1Ev</primary></indexterm>_ZN11QTextStreamC1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QTextStreamC2EP10QByteArray6QFlagsIN9QIODevice12OpenModeFlagEE</primary></indexterm>_ZN11QTextStreamC2EP10QByteArray6QFlagsIN9QIODevice12OpenModeFlagEE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QTextStreamC2EP7QString6QFlagsIN9QIODevice12OpenModeFlagEE</primary></indexterm>_ZN11QTextStreamC2EP7QString6QFlagsIN9QIODevice12OpenModeFlagEE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QTextStreamC2EP8_IO_FILE6QFlagsIN9QIODevice12OpenModeFlagEE</primary></indexterm>_ZN11QTextStreamC2EP8_IO_FILE6QFlagsIN9QIODevice12OpenModeFlagEE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QTextStreamC2EP9QIODevice</primary></indexterm>_ZN11QTextStreamC2EP9QIODevice <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QTextStreamC2ERK10QByteArray6QFlagsIN9QIODevice12OpenModeFlagEE</primary></indexterm>_ZN11QTextStreamC2ERK10QByteArray6QFlagsIN9QIODevice12OpenModeFlagEE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QTextStreamC2Ev</primary></indexterm>_ZN11QTextStreamC2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QTextStreamD0Ev</primary></indexterm>_ZN11QTextStreamD0Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QTextStreamD1Ev</primary></indexterm>_ZN11QTextStreamD1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QTextStreamD2Ev</primary></indexterm>_ZN11QTextStreamD2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QTextStreamlsE5QBool</primary></indexterm>_ZN11QTextStreamlsE5QBool <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QTextStreamlsE5QChar</primary></indexterm>_ZN11QTextStreamlsE5QChar <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QTextStreamlsEPKc</primary></indexterm>_ZN11QTextStreamlsEPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QTextStreamlsEPKv</primary></indexterm>_ZN11QTextStreamlsEPKv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QTextStreamlsERK10QByteArray</primary></indexterm>_ZN11QTextStreamlsERK10QByteArray <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QTextStreamlsERK7QString</primary></indexterm>_ZN11QTextStreamlsERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QTextStreamlsEc</primary></indexterm>_ZN11QTextStreamlsEc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QTextStreamlsEd</primary></indexterm>_ZN11QTextStreamlsEd <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QTextStreamlsEf</primary></indexterm>_ZN11QTextStreamlsEf <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QTextStreamlsEi</primary></indexterm>_ZN11QTextStreamlsEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QTextStreamlsEj</primary></indexterm>_ZN11QTextStreamlsEj <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QTextStreamlsEl</primary></indexterm>_ZN11QTextStreamlsEl <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QTextStreamlsEm</primary></indexterm>_ZN11QTextStreamlsEm <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QTextStreamlsEs</primary></indexterm>_ZN11QTextStreamlsEs <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QTextStreamlsEt</primary></indexterm>_ZN11QTextStreamlsEt <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QTextStreamlsEx</primary></indexterm>_ZN11QTextStreamlsEx <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QTextStreamlsEy</primary></indexterm>_ZN11QTextStreamlsEy <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QTextStreamrsEPc</primary></indexterm>_ZN11QTextStreamrsEPc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QTextStreamrsER10QByteArray</primary></indexterm>_ZN11QTextStreamrsER10QByteArray <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QTextStreamrsER5QChar</primary></indexterm>_ZN11QTextStreamrsER5QChar <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QTextStreamrsER7QString</primary></indexterm>_ZN11QTextStreamrsER7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QTextStreamrsERc</primary></indexterm>_ZN11QTextStreamrsERc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QTextStreamrsERd</primary></indexterm>_ZN11QTextStreamrsERd <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QTextStreamrsERf</primary></indexterm>_ZN11QTextStreamrsERf <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QTextStreamrsERi</primary></indexterm>_ZN11QTextStreamrsERi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QTextStreamrsERj</primary></indexterm>_ZN11QTextStreamrsERj <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QTextStreamrsERl</primary></indexterm>_ZN11QTextStreamrsERl <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QTextStreamrsERm</primary></indexterm>_ZN11QTextStreamrsERm <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QTextStreamrsERs</primary></indexterm>_ZN11QTextStreamrsERs <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QTextStreamrsERt</primary></indexterm>_ZN11QTextStreamrsERt <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QTextStreamrsERx</primary></indexterm>_ZN11QTextStreamrsERx <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QTextStreamrsERy</primary></indexterm>_ZN11QTextStreamrsERy <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QTimerEventC1Ei</primary></indexterm>_ZN11QTimerEventC1Ei <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QTimerEventC2Ei</primary></indexterm>_ZN11QTimerEventC2Ei <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QTimerEventD0Ev</primary></indexterm>_ZN11QTimerEventD0Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QTimerEventD1Ev</primary></indexterm>_ZN11QTimerEventD1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QTimerEventD2Ev</primary></indexterm>_ZN11QTimerEventD2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QTranslator11qt_metacallEN11QMetaObject4CallEiPPv</primary></indexterm>_ZN11QTranslator11qt_metacallEN11QMetaObject4CallEiPPv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QTranslator11qt_metacastEPKc</primary></indexterm>_ZN11QTranslator11qt_metacastEPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QTranslator4loadEPKhi</primary></indexterm>_ZN11QTranslator4loadEPKhi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QTranslator4loadERK7QStringS2_S2_S2_</primary></indexterm>_ZN11QTranslator4loadERK7QStringS2_S2_S2_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QTranslatorC1EP7QObject</primary></indexterm>_ZN11QTranslatorC1EP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QTranslatorC1EP7QObjectPKc</primary></indexterm>_ZN11QTranslatorC1EP7QObjectPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QTranslatorC2EP7QObject</primary></indexterm>_ZN11QTranslatorC2EP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QTranslatorC2EP7QObjectPKc</primary></indexterm>_ZN11QTranslatorC2EP7QObjectPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QTranslatorD0Ev</primary></indexterm>_ZN11QTranslatorD0Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QTranslatorD1Ev</primary></indexterm>_ZN11QTranslatorD1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QTranslatorD2Ev</primary></indexterm>_ZN11QTranslatorD2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QVectorData4growEiiib</primary></indexterm>_ZN11QVectorData4growEiiib <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QVectorData6mallocEiiiPS_</primary></indexterm>_ZN11QVectorData6mallocEiiiPS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN12QCustomEventC1EiPv</primary></indexterm>_ZN12QCustomEventC1EiPv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN12QCustomEventC2EiPv</primary></indexterm>_ZN12QCustomEventC2EiPv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN12QCustomEventD0Ev</primary></indexterm>_ZN12QCustomEventD0Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN12QCustomEventD1Ev</primary></indexterm>_ZN12QCustomEventD1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN12QCustomEventD2Ev</primary></indexterm>_ZN12QCustomEventD2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN12QLibraryInfo16licensedProductsEv</primary></indexterm>_ZN12QLibraryInfo16licensedProductsEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN12QLibraryInfo8buildKeyEv</primary></indexterm>_ZN12QLibraryInfo8buildKeyEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN12QLibraryInfo8licenseeEv</primary></indexterm>_ZN12QLibraryInfo8licenseeEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN12QLibraryInfo8locationENS_15LibraryLocationE</primary></indexterm>_ZN12QLibraryInfo8locationENS_15LibraryLocationE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN12QTextDecoder9toUnicodeEPKci</primary></indexterm>_ZN12QTextDecoder9toUnicodeEPKci <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN12QTextDecoder9toUnicodeERK10QByteArray</primary></indexterm>_ZN12QTextDecoder9toUnicodeERK10QByteArray <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN12QTextDecoderD1Ev</primary></indexterm>_ZN12QTextDecoderD1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN12QTextDecoderD2Ev</primary></indexterm>_ZN12QTextDecoderD2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN12QTextEncoder11fromUnicodeEPK5QChari</primary></indexterm>_ZN12QTextEncoder11fromUnicodeEPK5QChari <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN12QTextEncoder11fromUnicodeERK7QString</primary></indexterm>_ZN12QTextEncoder11fromUnicodeERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN12QTextEncoder11fromUnicodeERK7QStringRi</primary></indexterm>_ZN12QTextEncoder11fromUnicodeERK7QStringRi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN12QTextEncoderD1Ev</primary></indexterm>_ZN12QTextEncoderD1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN12QTextEncoderD2Ev</primary></indexterm>_ZN12QTextEncoderD2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN13QFSFileEngine11currentPathERK7QString</primary></indexterm>_ZN13QFSFileEngine11currentPathERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN13QFSFileEngine11setFileNameERK7QString</primary></indexterm>_ZN13QFSFileEngine11setFileNameERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN13QFSFileEngine12endEntryListEv</primary></indexterm>_ZN13QFSFileEngine12endEntryListEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN13QFSFileEngine14beginEntryListE6QFlagsIN4QDir6FilterEERK11QStringList</primary></indexterm>_ZN13QFSFileEngine14beginEntryListE6QFlagsIN4QDir6FilterEERK11QStringList <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN13QFSFileEngine14setCurrentPathERK7QString</primary></indexterm>_ZN13QFSFileEngine14setCurrentPathERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN13QFSFileEngine14setPermissionsEj</primary></indexterm>_ZN13QFSFileEngine14setPermissionsEj <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN13QFSFileEngine4copyERK7QString</primary></indexterm>_ZN13QFSFileEngine4copyERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN13QFSFileEngine4linkERK7QString</primary></indexterm>_ZN13QFSFileEngine4linkERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN13QFSFileEngine4openE6QFlagsIN9QIODevice12OpenModeFlagEE</primary></indexterm>_ZN13QFSFileEngine4openE6QFlagsIN9QIODevice12OpenModeFlagEE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN13QFSFileEngine4openE6QFlagsIN9QIODevice12OpenModeFlagEEP8_IO_FILE</primary></indexterm>_ZN13QFSFileEngine4openE6QFlagsIN9QIODevice12OpenModeFlagEEP8_IO_FILE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN13QFSFileEngine4openE6QFlagsIN9QIODevice12OpenModeFlagEEi</primary></indexterm>_ZN13QFSFileEngine4openE6QFlagsIN9QIODevice12OpenModeFlagEEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN13QFSFileEngine4readEPcx</primary></indexterm>_ZN13QFSFileEngine4readEPcx <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN13QFSFileEngine4seekEx</primary></indexterm>_ZN13QFSFileEngine4seekEx <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN13QFSFileEngine5closeEv</primary></indexterm>_ZN13QFSFileEngine5closeEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN13QFSFileEngine5flushEv</primary></indexterm>_ZN13QFSFileEngine5flushEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN13QFSFileEngine5writeEPKcx</primary></indexterm>_ZN13QFSFileEngine5writeEPKcx <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN13QFSFileEngine6drivesEv</primary></indexterm>_ZN13QFSFileEngine6drivesEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN13QFSFileEngine6removeEv</primary></indexterm>_ZN13QFSFileEngine6removeEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN13QFSFileEngine6renameERK7QString</primary></indexterm>_ZN13QFSFileEngine6renameERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN13QFSFileEngine7setSizeEx</primary></indexterm>_ZN13QFSFileEngine7setSizeEx <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN13QFSFileEngine8homePathEv</primary></indexterm>_ZN13QFSFileEngine8homePathEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN13QFSFileEngine8readLineEPcx</primary></indexterm>_ZN13QFSFileEngine8readLineEPcx <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN13QFSFileEngine8rootPathEv</primary></indexterm>_ZN13QFSFileEngine8rootPathEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN13QFSFileEngine8tempPathEv</primary></indexterm>_ZN13QFSFileEngine8tempPathEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN13QFSFileEngine9extensionEN19QAbstractFileEngine9ExtensionEPKNS0_15ExtensionOptionEPNS0_15ExtensionReturnE</primary></indexterm>_ZN13QFSFileEngine9extensionEN19QAbstractFileEngine9ExtensionEPKNS0_15ExtensionOptionEPNS0_15ExtensionReturnE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN13QFSFileEngineC1ER20QFSFileEnginePrivate</primary></indexterm>_ZN13QFSFileEngineC1ER20QFSFileEnginePrivate <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN13QFSFileEngineC1ERK7QString</primary></indexterm>_ZN13QFSFileEngineC1ERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN13QFSFileEngineC1Ev</primary></indexterm>_ZN13QFSFileEngineC1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN13QFSFileEngineC2ER20QFSFileEnginePrivate</primary></indexterm>_ZN13QFSFileEngineC2ER20QFSFileEnginePrivate <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN13QFSFileEngineC2ERK7QString</primary></indexterm>_ZN13QFSFileEngineC2ERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN13QFSFileEngineC2Ev</primary></indexterm>_ZN13QFSFileEngineC2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN13QFSFileEngineD0Ev</primary></indexterm>_ZN13QFSFileEngineD0Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN13QFSFileEngineD1Ev</primary></indexterm>_ZN13QFSFileEngineD1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN13QFSFileEngineD2Ev</primary></indexterm>_ZN13QFSFileEngineD2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN13QMetaPropertyC1Ev</primary></indexterm>_ZN13QMetaPropertyC1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN13QMetaPropertyC2Ev</primary></indexterm>_ZN13QMetaPropertyC2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN13QPluginLoader11qt_metacallEN11QMetaObject4CallEiPPv</primary></indexterm>_ZN13QPluginLoader11qt_metacallEN11QMetaObject4CallEiPPv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN13QPluginLoader11qt_metacastEPKc</primary></indexterm>_ZN13QPluginLoader11qt_metacastEPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN13QPluginLoader11setFileNameERK7QString</primary></indexterm>_ZN13QPluginLoader11setFileNameERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN13QPluginLoader15staticInstancesEv</primary></indexterm>_ZN13QPluginLoader15staticInstancesEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN13QPluginLoader4loadEv</primary></indexterm>_ZN13QPluginLoader4loadEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN13QPluginLoader6unloadEv</primary></indexterm>_ZN13QPluginLoader6unloadEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN13QPluginLoader8instanceEv</primary></indexterm>_ZN13QPluginLoader8instanceEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN13QPluginLoaderC1EP7QObject</primary></indexterm>_ZN13QPluginLoaderC1EP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN13QPluginLoaderC1ERK7QStringP7QObject</primary></indexterm>_ZN13QPluginLoaderC1ERK7QStringP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN13QPluginLoaderC2EP7QObject</primary></indexterm>_ZN13QPluginLoaderC2EP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN13QPluginLoaderC2ERK7QStringP7QObject</primary></indexterm>_ZN13QPluginLoaderC2ERK7QStringP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN13QPluginLoaderD0Ev</primary></indexterm>_ZN13QPluginLoaderD0Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN13QPluginLoaderD1Ev</primary></indexterm>_ZN13QPluginLoaderD1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN13QPluginLoaderD2Ev</primary></indexterm>_ZN13QPluginLoaderD2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN13QSignalMapper10setMappingEP7QObjectP7QWidget</primary></indexterm>_ZN13QSignalMapper10setMappingEP7QObjectP7QWidget <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN13QSignalMapper10setMappingEP7QObjectRK7QString</primary></indexterm>_ZN13QSignalMapper10setMappingEP7QObjectRK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN13QSignalMapper10setMappingEP7QObjectS1_</primary></indexterm>_ZN13QSignalMapper10setMappingEP7QObjectS1_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN13QSignalMapper10setMappingEP7QObjecti</primary></indexterm>_ZN13QSignalMapper10setMappingEP7QObjecti <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN13QSignalMapper11qt_metacallEN11QMetaObject4CallEiPPv</primary></indexterm>_ZN13QSignalMapper11qt_metacallEN11QMetaObject4CallEiPPv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN13QSignalMapper11qt_metacastEPKc</primary></indexterm>_ZN13QSignalMapper11qt_metacastEPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN13QSignalMapper14removeMappingsEP7QObject</primary></indexterm>_ZN13QSignalMapper14removeMappingsEP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN13QSignalMapper3mapEP7QObject</primary></indexterm>_ZN13QSignalMapper3mapEP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN13QSignalMapper3mapEv</primary></indexterm>_ZN13QSignalMapper3mapEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN13QSignalMapper6mappedEP7QObject</primary></indexterm>_ZN13QSignalMapper6mappedEP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN13QSignalMapper6mappedEP7QWidget</primary></indexterm>_ZN13QSignalMapper6mappedEP7QWidget <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN13QSignalMapper6mappedERK7QString</primary></indexterm>_ZN13QSignalMapper6mappedERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN13QSignalMapper6mappedEi</primary></indexterm>_ZN13QSignalMapper6mappedEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN13QSignalMapperC1EP7QObject</primary></indexterm>_ZN13QSignalMapperC1EP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN13QSignalMapperC1EP7QObjectPKc</primary></indexterm>_ZN13QSignalMapperC1EP7QObjectPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN13QSignalMapperC2EP7QObject</primary></indexterm>_ZN13QSignalMapperC2EP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN13QSignalMapperC2EP7QObjectPKc</primary></indexterm>_ZN13QSignalMapperC2EP7QObjectPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN13QSignalMapperD0Ev</primary></indexterm>_ZN13QSignalMapperD0Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN13QSignalMapperD1Ev</primary></indexterm>_ZN13QSignalMapperD1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN13QSignalMapperD2Ev</primary></indexterm>_ZN13QSignalMapperD2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN14QReadWriteLock11lockForReadEv</primary></indexterm>_ZN14QReadWriteLock11lockForReadEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN14QReadWriteLock12lockForWriteEv</primary></indexterm>_ZN14QReadWriteLock12lockForWriteEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN14QReadWriteLock14tryLockForReadEv</primary></indexterm>_ZN14QReadWriteLock14tryLockForReadEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN14QReadWriteLock15tryLockForWriteEv</primary></indexterm>_ZN14QReadWriteLock15tryLockForWriteEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN14QReadWriteLock6unlockEv</primary></indexterm>_ZN14QReadWriteLock6unlockEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN14QReadWriteLockC1Ev</primary></indexterm>_ZN14QReadWriteLockC1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN14QReadWriteLockC2Ev</primary></indexterm>_ZN14QReadWriteLockC2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN14QReadWriteLockD1Ev</primary></indexterm>_ZN14QReadWriteLockD1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN14QReadWriteLockD2Ev</primary></indexterm>_ZN14QReadWriteLockD2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN14QStringMatcher10setPatternERK7QString</primary></indexterm>_ZN14QStringMatcher10setPatternERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN14QStringMatcher18setCaseSensitivityEN2Qt15CaseSensitivityE</primary></indexterm>_ZN14QStringMatcher18setCaseSensitivityEN2Qt15CaseSensitivityE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN14QStringMatcherC1ERK7QStringN2Qt15CaseSensitivityE</primary></indexterm>_ZN14QStringMatcherC1ERK7QStringN2Qt15CaseSensitivityE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN14QStringMatcherC1ERKS_</primary></indexterm>_ZN14QStringMatcherC1ERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN14QStringMatcherC1Ev</primary></indexterm>_ZN14QStringMatcherC1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN14QStringMatcherC2ERK7QStringN2Qt15CaseSensitivityE</primary></indexterm>_ZN14QStringMatcherC2ERK7QStringN2Qt15CaseSensitivityE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN14QStringMatcherC2ERKS_</primary></indexterm>_ZN14QStringMatcherC2ERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN14QStringMatcherC2Ev</primary></indexterm>_ZN14QStringMatcherC2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN14QStringMatcherD1Ev</primary></indexterm>_ZN14QStringMatcherD1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN14QStringMatcherD2Ev</primary></indexterm>_ZN14QStringMatcherD2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN14QStringMatcheraSERKS_</primary></indexterm>_ZN14QStringMatcheraSERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN14QTemporaryFile11qt_metacallEN11QMetaObject4CallEiPPv</primary></indexterm>_ZN14QTemporaryFile11qt_metacallEN11QMetaObject4CallEiPPv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN14QTemporaryFile11qt_metacastEPKc</primary></indexterm>_ZN14QTemporaryFile11qt_metacastEPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN14QTemporaryFile13setAutoRemoveEb</primary></indexterm>_ZN14QTemporaryFile13setAutoRemoveEb <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN14QTemporaryFile15createLocalFileER5QFile</primary></indexterm>_ZN14QTemporaryFile15createLocalFileER5QFile <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN14QTemporaryFile15setFileTemplateERK7QString</primary></indexterm>_ZN14QTemporaryFile15setFileTemplateERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN14QTemporaryFile4openE6QFlagsIN9QIODevice12OpenModeFlagEE</primary></indexterm>_ZN14QTemporaryFile4openE6QFlagsIN9QIODevice12OpenModeFlagEE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN14QTemporaryFileC1EP7QObject</primary></indexterm>_ZN14QTemporaryFileC1EP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN14QTemporaryFileC1ERK7QString</primary></indexterm>_ZN14QTemporaryFileC1ERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN14QTemporaryFileC1ERK7QStringP7QObject</primary></indexterm>_ZN14QTemporaryFileC1ERK7QStringP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN14QTemporaryFileC1Ev</primary></indexterm>_ZN14QTemporaryFileC1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN14QTemporaryFileC2EP7QObject</primary></indexterm>_ZN14QTemporaryFileC2EP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN14QTemporaryFileC2ERK7QString</primary></indexterm>_ZN14QTemporaryFileC2ERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN14QTemporaryFileC2ERK7QStringP7QObject</primary></indexterm>_ZN14QTemporaryFileC2ERK7QStringP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN14QTemporaryFileC2Ev</primary></indexterm>_ZN14QTemporaryFileC2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN14QTemporaryFileD0Ev</primary></indexterm>_ZN14QTemporaryFileD0Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN14QTemporaryFileD1Ev</primary></indexterm>_ZN14QTemporaryFileD1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN14QTemporaryFileD2Ev</primary></indexterm>_ZN14QTemporaryFileD2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN14QUnicodeTables5lowerEj</primary></indexterm>_ZN14QUnicodeTables5lowerEj <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN14QWaitCondition4waitEP6QMutexm</primary></indexterm>_ZN14QWaitCondition4waitEP6QMutexm <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN14QWaitCondition7wakeAllEv</primary></indexterm>_ZN14QWaitCondition7wakeAllEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN14QWaitCondition7wakeOneEv</primary></indexterm>_ZN14QWaitCondition7wakeOneEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN14QWaitConditionC1Ev</primary></indexterm>_ZN14QWaitConditionC1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN14QWaitConditionC2Ev</primary></indexterm>_ZN14QWaitConditionC2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN14QWaitConditionD1Ev</primary></indexterm>_ZN14QWaitConditionD1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN14QWaitConditionD2Ev</primary></indexterm>_ZN14QWaitConditionD2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN15QObjectUserDataD0Ev</primary></indexterm>_ZN15QObjectUserDataD0Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN15QObjectUserDataD1Ev</primary></indexterm>_ZN15QObjectUserDataD1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN15QObjectUserDataD2Ev</primary></indexterm>_ZN15QObjectUserDataD2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN15QSocketNotifier10setEnabledEb</primary></indexterm>_ZN15QSocketNotifier10setEnabledEb <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN15QSocketNotifier11qt_metacallEN11QMetaObject4CallEiPPv</primary></indexterm>_ZN15QSocketNotifier11qt_metacallEN11QMetaObject4CallEiPPv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN15QSocketNotifier11qt_metacastEPKc</primary></indexterm>_ZN15QSocketNotifier11qt_metacastEPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN15QSocketNotifier5eventEP6QEvent</primary></indexterm>_ZN15QSocketNotifier5eventEP6QEvent <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN15QSocketNotifier9activatedEi</primary></indexterm>_ZN15QSocketNotifier9activatedEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN15QSocketNotifierC1EiNS_4TypeEP7QObject</primary></indexterm>_ZN15QSocketNotifierC1EiNS_4TypeEP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN15QSocketNotifierC1EiNS_4TypeEP7QObjectPKc</primary></indexterm>_ZN15QSocketNotifierC1EiNS_4TypeEP7QObjectPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN15QSocketNotifierC2EiNS_4TypeEP7QObject</primary></indexterm>_ZN15QSocketNotifierC2EiNS_4TypeEP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN15QSocketNotifierC2EiNS_4TypeEP7QObjectPKc</primary></indexterm>_ZN15QSocketNotifierC2EiNS_4TypeEP7QObjectPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN15QSocketNotifierD0Ev</primary></indexterm>_ZN15QSocketNotifierD0Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN15QSocketNotifierD1Ev</primary></indexterm>_ZN15QSocketNotifierD1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN15QSocketNotifierD2Ev</primary></indexterm>_ZN15QSocketNotifierD2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN16QCoreApplication10enter_loopEv</primary></indexterm>_ZN16QCoreApplication10enter_loopEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN16QCoreApplication10startingUpEv</primary></indexterm>_ZN16QCoreApplication10startingUpEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN16QCoreApplication10unixSignalEi</primary></indexterm>_ZN16QCoreApplication10unixSignalEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN16QCoreApplication11aboutToQuitEv</primary></indexterm>_ZN16QCoreApplication11aboutToQuitEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN16QCoreApplication11closingDownEv</primary></indexterm>_ZN16QCoreApplication11closingDownEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN16QCoreApplication11filterEventEPvPl</primary></indexterm>_ZN16QCoreApplication11filterEventEPvPl <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN16QCoreApplication11qt_metacallEN11QMetaObject4CallEiPPv</primary></indexterm>_ZN16QCoreApplication11qt_metacallEN11QMetaObject4CallEiPPv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN16QCoreApplication11qt_metacastEPKc</primary></indexterm>_ZN16QCoreApplication11qt_metacastEPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN16QCoreApplication12libraryPathsEv</primary></indexterm>_ZN16QCoreApplication12libraryPathsEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN16QCoreApplication13compressEventEP6QEventP7QObjectP14QPostEventList</primary></indexterm>_ZN16QCoreApplication13compressEventEP6QEventP7QObjectP14QPostEventList <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN16QCoreApplication13processEventsE6QFlagsIN10QEventLoop17ProcessEventsFlagEE</primary></indexterm>_ZN16QCoreApplication13processEventsE6QFlagsIN10QEventLoop17ProcessEventsFlagEE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN16QCoreApplication13processEventsE6QFlagsIN10QEventLoop17ProcessEventsFlagEEi</primary></indexterm>_ZN16QCoreApplication13processEventsE6QFlagsIN10QEventLoop17ProcessEventsFlagEEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN16QCoreApplication14addLibraryPathERK7QString</primary></indexterm>_ZN16QCoreApplication14addLibraryPathERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN16QCoreApplication14setEventFilterEPFbPvPlE</primary></indexterm>_ZN16QCoreApplication14setEventFilterEPFbPvPlE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN16QCoreApplication15applicationNameEv</primary></indexterm>_ZN16QCoreApplication15applicationNameEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN16QCoreApplication15setLibraryPathsERK11QStringList</primary></indexterm>_ZN16QCoreApplication15setLibraryPathsERK11QStringList <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN16QCoreApplication15watchUnixSignalEib</primary></indexterm>_ZN16QCoreApplication15watchUnixSignalEib <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN16QCoreApplication16hasPendingEventsEv</primary></indexterm>_ZN16QCoreApplication16hasPendingEventsEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN16QCoreApplication16organizationNameEv</primary></indexterm>_ZN16QCoreApplication16organizationNameEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN16QCoreApplication16removeTranslatorEP11QTranslator</primary></indexterm>_ZN16QCoreApplication16removeTranslatorEP11QTranslator <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN16QCoreApplication16sendPostedEventsEP7QObjecti</primary></indexterm>_ZN16QCoreApplication16sendPostedEventsEP7QObjecti <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN16QCoreApplication17installTranslatorEP11QTranslator</primary></indexterm>_ZN16QCoreApplication17installTranslatorEP11QTranslator <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN16QCoreApplication17removeLibraryPathERK7QString</primary></indexterm>_ZN16QCoreApplication17removeLibraryPathERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN16QCoreApplication18applicationDirPathEv</primary></indexterm>_ZN16QCoreApplication18applicationDirPathEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN16QCoreApplication18organizationDomainEv</primary></indexterm>_ZN16QCoreApplication18organizationDomainEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN16QCoreApplication18removePostedEventsEP7QObject</primary></indexterm>_ZN16QCoreApplication18removePostedEventsEP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN16QCoreApplication18setApplicationNameERK7QString</primary></indexterm>_ZN16QCoreApplication18setApplicationNameERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN16QCoreApplication19applicationFilePathEv</primary></indexterm>_ZN16QCoreApplication19applicationFilePathEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN16QCoreApplication19setOrganizationNameERK7QString</primary></indexterm>_ZN16QCoreApplication19setOrganizationNameERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN16QCoreApplication21setOrganizationDomainERK7QString</primary></indexterm>_ZN16QCoreApplication21setOrganizationDomainERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN16QCoreApplication4argcEv</primary></indexterm>_ZN16QCoreApplication4argcEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN16QCoreApplication4argvEv</primary></indexterm>_ZN16QCoreApplication4argvEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN16QCoreApplication4execEv</primary></indexterm>_ZN16QCoreApplication4execEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN16QCoreApplication4exitEi</primary></indexterm>_ZN16QCoreApplication4exitEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN16QCoreApplication4quitEv</primary></indexterm>_ZN16QCoreApplication4quitEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN16QCoreApplication5eventEP6QEvent</primary></indexterm>_ZN16QCoreApplication5eventEP6QEvent <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN16QCoreApplication5flushEv</primary></indexterm>_ZN16QCoreApplication5flushEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN16QCoreApplication6notifyEP7QObjectP6QEvent</primary></indexterm>_ZN16QCoreApplication6notifyEP7QObjectP6QEvent <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN16QCoreApplication9argumentsEv</primary></indexterm>_ZN16QCoreApplication9argumentsEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN16QCoreApplication9exit_loopEv</primary></indexterm>_ZN16QCoreApplication9exit_loopEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN16QCoreApplication9loopLevelEv</primary></indexterm>_ZN16QCoreApplication9loopLevelEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN16QCoreApplication9postEventEP7QObjectP6QEvent</primary></indexterm>_ZN16QCoreApplication9postEventEP7QObjectP6QEvent <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN16QCoreApplication9translateEPKcS1_S1_NS_8EncodingE</primary></indexterm>_ZN16QCoreApplication9translateEPKcS1_S1_NS_8EncodingE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN16QCoreApplicationC1ER23QCoreApplicationPrivate</primary></indexterm>_ZN16QCoreApplicationC1ER23QCoreApplicationPrivate <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN16QCoreApplicationC1ERiPPc</primary></indexterm>_ZN16QCoreApplicationC1ERiPPc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN16QCoreApplicationC2ER23QCoreApplicationPrivate</primary></indexterm>_ZN16QCoreApplicationC2ER23QCoreApplicationPrivate <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN16QCoreApplicationC2ERiPPc</primary></indexterm>_ZN16QCoreApplicationC2ERiPPc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN16QCoreApplicationD0Ev</primary></indexterm>_ZN16QCoreApplicationD0Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN16QCoreApplicationD1Ev</primary></indexterm>_ZN16QCoreApplicationD1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN16QCoreApplicationD2Ev</primary></indexterm>_ZN16QCoreApplicationD2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN16QTextCodecPlugin11qt_metacallEN11QMetaObject4CallEiPPv</primary></indexterm>_ZN16QTextCodecPlugin11qt_metacallEN11QMetaObject4CallEiPPv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN16QTextCodecPlugin11qt_metacastEPKc</primary></indexterm>_ZN16QTextCodecPlugin11qt_metacastEPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN16QTextCodecPlugin6createERK7QString</primary></indexterm>_ZN16QTextCodecPlugin6createERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN16QTextCodecPluginC1EP7QObject</primary></indexterm>_ZN16QTextCodecPluginC1EP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN16QTextCodecPluginC2EP7QObject</primary></indexterm>_ZN16QTextCodecPluginC2EP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN16QTextCodecPluginD0Ev</primary></indexterm>_ZN16QTextCodecPluginD0Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN16QTextCodecPluginD1Ev</primary></indexterm>_ZN16QTextCodecPluginD1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN16QTextCodecPluginD2Ev</primary></indexterm>_ZN16QTextCodecPluginD2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN17QByteArrayMatcher10setPatternERK10QByteArray</primary></indexterm>_ZN17QByteArrayMatcher10setPatternERK10QByteArray <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN17QByteArrayMatcherC1ERK10QByteArray</primary></indexterm>_ZN17QByteArrayMatcherC1ERK10QByteArray <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN17QByteArrayMatcherC1ERKS_</primary></indexterm>_ZN17QByteArrayMatcherC1ERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN17QByteArrayMatcherC1Ev</primary></indexterm>_ZN17QByteArrayMatcherC1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN17QByteArrayMatcherC2ERK10QByteArray</primary></indexterm>_ZN17QByteArrayMatcherC2ERK10QByteArray <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN17QByteArrayMatcherC2ERKS_</primary></indexterm>_ZN17QByteArrayMatcherC2ERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN17QByteArrayMatcherC2Ev</primary></indexterm>_ZN17QByteArrayMatcherC2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN17QByteArrayMatcherD1Ev</primary></indexterm>_ZN17QByteArrayMatcherD1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN17QByteArrayMatcherD2Ev</primary></indexterm>_ZN17QByteArrayMatcherD2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN17QByteArrayMatcheraSERKS_</primary></indexterm>_ZN17QByteArrayMatcheraSERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN18QAbstractItemModel10decodeDataEiiRK11QModelIndexR11QDataStream</primary></indexterm>_ZN18QAbstractItemModel10decodeDataEiiRK11QModelIndexR11QDataStream <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN18QAbstractItemModel10insertRowsEiiRK11QModelIndex</primary></indexterm>_ZN18QAbstractItemModel10insertRowsEiiRK11QModelIndex <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN18QAbstractItemModel10removeRowsEiiRK11QModelIndex</primary></indexterm>_ZN18QAbstractItemModel10removeRowsEiiRK11QModelIndex <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN18QAbstractItemModel11dataChangedERK11QModelIndexS2_</primary></indexterm>_ZN18QAbstractItemModel11dataChangedERK11QModelIndexS2_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN18QAbstractItemModel11qt_metacallEN11QMetaObject4CallEiPPv</primary></indexterm>_ZN18QAbstractItemModel11qt_metacallEN11QMetaObject4CallEiPPv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN18QAbstractItemModel11qt_metacastEPKc</primary></indexterm>_ZN18QAbstractItemModel11qt_metacastEPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN18QAbstractItemModel11setItemDataERK11QModelIndexRK4QMapIi8QVariantE</primary></indexterm>_ZN18QAbstractItemModel11setItemDataERK11QModelIndexRK4QMapIi8QVariantE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN18QAbstractItemModel12dropMimeDataEPK9QMimeDataN2Qt10DropActionEiiRK11QModelIndex</primary></indexterm>_ZN18QAbstractItemModel12dropMimeDataEPK9QMimeDataN2Qt10DropActionEiiRK11QModelIndex <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN18QAbstractItemModel13endInsertRowsEv</primary></indexterm>_ZN18QAbstractItemModel13endInsertRowsEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN18QAbstractItemModel13endRemoveRowsEv</primary></indexterm>_ZN18QAbstractItemModel13endRemoveRowsEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN18QAbstractItemModel13insertColumnsEiiRK11QModelIndex</primary></indexterm>_ZN18QAbstractItemModel13insertColumnsEiiRK11QModelIndex <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN18QAbstractItemModel13layoutChangedEv</primary></indexterm>_ZN18QAbstractItemModel13layoutChangedEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN18QAbstractItemModel13removeColumnsEiiRK11QModelIndex</primary></indexterm>_ZN18QAbstractItemModel13removeColumnsEiiRK11QModelIndex <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN18QAbstractItemModel13setHeaderDataEiN2Qt11OrientationERK8QVarianti</primary></indexterm>_ZN18QAbstractItemModel13setHeaderDataEiN2Qt11OrientationERK8QVarianti <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN18QAbstractItemModel15beginInsertRowsERK11QModelIndexii</primary></indexterm>_ZN18QAbstractItemModel15beginInsertRowsERK11QModelIndexii <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN18QAbstractItemModel15beginRemoveRowsERK11QModelIndexii</primary></indexterm>_ZN18QAbstractItemModel15beginRemoveRowsERK11QModelIndexii <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN18QAbstractItemModel16endInsertColumnsEv</primary></indexterm>_ZN18QAbstractItemModel16endInsertColumnsEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN18QAbstractItemModel16endRemoveColumnsEv</primary></indexterm>_ZN18QAbstractItemModel16endRemoveColumnsEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN18QAbstractItemModel17headerDataChangedEN2Qt11OrientationEii</primary></indexterm>_ZN18QAbstractItemModel17headerDataChangedEN2Qt11OrientationEii <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN18QAbstractItemModel18beginInsertColumnsERK11QModelIndexii</primary></indexterm>_ZN18QAbstractItemModel18beginInsertColumnsERK11QModelIndexii <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN18QAbstractItemModel18beginRemoveColumnsERK11QModelIndexii</primary></indexterm>_ZN18QAbstractItemModel18beginRemoveColumnsERK11QModelIndexii <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN18QAbstractItemModel21changePersistentIndexERK11QModelIndexS2_</primary></indexterm>_ZN18QAbstractItemModel21changePersistentIndexERK11QModelIndexS2_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN18QAbstractItemModel25changePersistentIndexListERK5QListI11QModelIndexES4_</primary></indexterm>_ZN18QAbstractItemModel25changePersistentIndexListERK5QListI11QModelIndexES4_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN18QAbstractItemModel4sortEiN2Qt9SortOrderE</primary></indexterm>_ZN18QAbstractItemModel4sortEiN2Qt9SortOrderE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN18QAbstractItemModel5resetEv</primary></indexterm>_ZN18QAbstractItemModel5resetEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN18QAbstractItemModel6revertEv</primary></indexterm>_ZN18QAbstractItemModel6revertEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN18QAbstractItemModel6submitEv</primary></indexterm>_ZN18QAbstractItemModel6submitEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN18QAbstractItemModel7setDataERK11QModelIndexRK8QVarianti</primary></indexterm>_ZN18QAbstractItemModel7setDataERK11QModelIndexRK8QVarianti <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN18QAbstractItemModel9fetchMoreERK11QModelIndex</primary></indexterm>_ZN18QAbstractItemModel9fetchMoreERK11QModelIndex <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN18QAbstractItemModelC1EP7QObject</primary></indexterm>_ZN18QAbstractItemModelC1EP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN18QAbstractItemModelC1ER25QAbstractItemModelPrivateP7QObject</primary></indexterm>_ZN18QAbstractItemModelC1ER25QAbstractItemModelPrivateP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN18QAbstractItemModelC2EP7QObject</primary></indexterm>_ZN18QAbstractItemModelC2EP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN18QAbstractItemModelC2ER25QAbstractItemModelPrivateP7QObject</primary></indexterm>_ZN18QAbstractItemModelC2ER25QAbstractItemModelPrivateP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN18QAbstractItemModelD0Ev</primary></indexterm>_ZN18QAbstractItemModelD0Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN18QAbstractItemModelD1Ev</primary></indexterm>_ZN18QAbstractItemModelD1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN18QAbstractItemModelD2Ev</primary></indexterm>_ZN18QAbstractItemModelD2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN18QAbstractListModel11qt_metacallEN11QMetaObject4CallEiPPv</primary></indexterm>_ZN18QAbstractListModel11qt_metacallEN11QMetaObject4CallEiPPv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN18QAbstractListModel11qt_metacastEPKc</primary></indexterm>_ZN18QAbstractListModel11qt_metacastEPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN18QAbstractListModel12dropMimeDataEPK9QMimeDataN2Qt10DropActionEiiRK11QModelIndex</primary></indexterm>_ZN18QAbstractListModel12dropMimeDataEPK9QMimeDataN2Qt10DropActionEiiRK11QModelIndex <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN18QAbstractListModelC1EP7QObject</primary></indexterm>_ZN18QAbstractListModelC1EP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN18QAbstractListModelC1ER25QAbstractItemModelPrivateP7QObject</primary></indexterm>_ZN18QAbstractListModelC1ER25QAbstractItemModelPrivateP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN18QAbstractListModelC2EP7QObject</primary></indexterm>_ZN18QAbstractListModelC2EP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN18QAbstractListModelC2ER25QAbstractItemModelPrivateP7QObject</primary></indexterm>_ZN18QAbstractListModelC2ER25QAbstractItemModelPrivateP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN18QAbstractListModelD0Ev</primary></indexterm>_ZN18QAbstractListModelD0Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN18QAbstractListModelD1Ev</primary></indexterm>_ZN18QAbstractListModelD1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN18QAbstractListModelD2Ev</primary></indexterm>_ZN18QAbstractListModelD2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN18QThreadStorageData3setEPv</primary></indexterm>_ZN18QThreadStorageData3setEPv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN18QThreadStorageData6finishEPPv</primary></indexterm>_ZN18QThreadStorageData6finishEPPv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN18QThreadStorageDataC1EPFvPvE</primary></indexterm>_ZN18QThreadStorageDataC1EPFvPvE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN18QThreadStorageDataC2EPFvPvE</primary></indexterm>_ZN18QThreadStorageDataC2EPFvPvE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN18QThreadStorageDataD1Ev</primary></indexterm>_ZN18QThreadStorageDataD1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN18QThreadStorageDataD2Ev</primary></indexterm>_ZN18QThreadStorageDataD2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN19QAbstractFileEngine11setFileNameERK7QString</primary></indexterm>_ZN19QAbstractFileEngine11setFileNameERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN19QAbstractFileEngine12endEntryListEv</primary></indexterm>_ZN19QAbstractFileEngine12endEntryListEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN19QAbstractFileEngine14beginEntryListE6QFlagsIN4QDir6FilterEERK11QStringList</primary></indexterm>_ZN19QAbstractFileEngine14beginEntryListE6QFlagsIN4QDir6FilterEERK11QStringList <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN19QAbstractFileEngine14setPermissionsEj</primary></indexterm>_ZN19QAbstractFileEngine14setPermissionsEj <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN19QAbstractFileEngine4copyERK7QString</primary></indexterm>_ZN19QAbstractFileEngine4copyERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN19QAbstractFileEngine4linkERK7QString</primary></indexterm>_ZN19QAbstractFileEngine4linkERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN19QAbstractFileEngine4openE6QFlagsIN9QIODevice12OpenModeFlagEE</primary></indexterm>_ZN19QAbstractFileEngine4openE6QFlagsIN9QIODevice12OpenModeFlagEE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN19QAbstractFileEngine4readEPcx</primary></indexterm>_ZN19QAbstractFileEngine4readEPcx <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN19QAbstractFileEngine4seekEx</primary></indexterm>_ZN19QAbstractFileEngine4seekEx <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN19QAbstractFileEngine5closeEv</primary></indexterm>_ZN19QAbstractFileEngine5closeEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN19QAbstractFileEngine5flushEv</primary></indexterm>_ZN19QAbstractFileEngine5flushEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN19QAbstractFileEngine5writeEPKcx</primary></indexterm>_ZN19QAbstractFileEngine5writeEPKcx <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN19QAbstractFileEngine6createERK7QString</primary></indexterm>_ZN19QAbstractFileEngine6createERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN19QAbstractFileEngine6removeEv</primary></indexterm>_ZN19QAbstractFileEngine6removeEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN19QAbstractFileEngine6renameERK7QString</primary></indexterm>_ZN19QAbstractFileEngine6renameERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN19QAbstractFileEngine7setSizeEx</primary></indexterm>_ZN19QAbstractFileEngine7setSizeEx <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN19QAbstractFileEngine8readLineEPcx</primary></indexterm>_ZN19QAbstractFileEngine8readLineEPcx <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN19QAbstractFileEngine8setErrorEN5QFile9FileErrorERK7QString</primary></indexterm>_ZN19QAbstractFileEngine8setErrorEN5QFile9FileErrorERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN19QAbstractFileEngine9extensionENS_9ExtensionEPKNS_15ExtensionOptionEPNS_15ExtensionReturnE</primary></indexterm>_ZN19QAbstractFileEngine9extensionENS_9ExtensionEPKNS_15ExtensionOptionEPNS_15ExtensionReturnE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN19QAbstractFileEngineC1ER26QAbstractFileEnginePrivate</primary></indexterm>_ZN19QAbstractFileEngineC1ER26QAbstractFileEnginePrivate <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN19QAbstractFileEngineC1Ev</primary></indexterm>_ZN19QAbstractFileEngineC1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN19QAbstractFileEngineC2ER26QAbstractFileEnginePrivate</primary></indexterm>_ZN19QAbstractFileEngineC2ER26QAbstractFileEnginePrivate <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN19QAbstractFileEngineC2Ev</primary></indexterm>_ZN19QAbstractFileEngineC2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN19QAbstractFileEngineD0Ev</primary></indexterm>_ZN19QAbstractFileEngineD0Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN19QAbstractFileEngineD1Ev</primary></indexterm>_ZN19QAbstractFileEngineD1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN19QAbstractFileEngineD2Ev</primary></indexterm>_ZN19QAbstractFileEngineD2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN19QAbstractTableModel11qt_metacallEN11QMetaObject4CallEiPPv</primary></indexterm>_ZN19QAbstractTableModel11qt_metacallEN11QMetaObject4CallEiPPv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN19QAbstractTableModel11qt_metacastEPKc</primary></indexterm>_ZN19QAbstractTableModel11qt_metacastEPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN19QAbstractTableModel12dropMimeDataEPK9QMimeDataN2Qt10DropActionEiiRK11QModelIndex</primary></indexterm>_ZN19QAbstractTableModel12dropMimeDataEPK9QMimeDataN2Qt10DropActionEiiRK11QModelIndex <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN19QAbstractTableModelC1EP7QObject</primary></indexterm>_ZN19QAbstractTableModelC1EP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN19QAbstractTableModelC1ER25QAbstractItemModelPrivateP7QObject</primary></indexterm>_ZN19QAbstractTableModelC1ER25QAbstractItemModelPrivateP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN19QAbstractTableModelC2EP7QObject</primary></indexterm>_ZN19QAbstractTableModelC2EP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN19QAbstractTableModelC2ER25QAbstractItemModelPrivateP7QObject</primary></indexterm>_ZN19QAbstractTableModelC2ER25QAbstractItemModelPrivateP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN19QAbstractTableModelD0Ev</primary></indexterm>_ZN19QAbstractTableModelD0Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN19QAbstractTableModelD1Ev</primary></indexterm>_ZN19QAbstractTableModelD1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN19QAbstractTableModelD2Ev</primary></indexterm>_ZN19QAbstractTableModelD2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN21QObjectCleanupHandler11qt_metacallEN11QMetaObject4CallEiPPv</primary></indexterm>_ZN21QObjectCleanupHandler11qt_metacallEN11QMetaObject4CallEiPPv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN21QObjectCleanupHandler11qt_metacastEPKc</primary></indexterm>_ZN21QObjectCleanupHandler11qt_metacastEPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN21QObjectCleanupHandler3addEP7QObject</primary></indexterm>_ZN21QObjectCleanupHandler3addEP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN21QObjectCleanupHandler5clearEv</primary></indexterm>_ZN21QObjectCleanupHandler5clearEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN21QObjectCleanupHandler6removeEP7QObject</primary></indexterm>_ZN21QObjectCleanupHandler6removeEP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN21QObjectCleanupHandlerC1Ev</primary></indexterm>_ZN21QObjectCleanupHandlerC1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN21QObjectCleanupHandlerC2Ev</primary></indexterm>_ZN21QObjectCleanupHandlerC2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN21QObjectCleanupHandlerD0Ev</primary></indexterm>_ZN21QObjectCleanupHandlerD0Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN21QObjectCleanupHandlerD1Ev</primary></indexterm>_ZN21QObjectCleanupHandlerD1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN21QObjectCleanupHandlerD2Ev</primary></indexterm>_ZN21QObjectCleanupHandlerD2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN21QPersistentModelIndexC1ERK11QModelIndex</primary></indexterm>_ZN21QPersistentModelIndexC1ERK11QModelIndex <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN21QPersistentModelIndexC1ERKS_</primary></indexterm>_ZN21QPersistentModelIndexC1ERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN21QPersistentModelIndexC1Ev</primary></indexterm>_ZN21QPersistentModelIndexC1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN21QPersistentModelIndexC2ERK11QModelIndex</primary></indexterm>_ZN21QPersistentModelIndexC2ERK11QModelIndex <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN21QPersistentModelIndexC2ERKS_</primary></indexterm>_ZN21QPersistentModelIndexC2ERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN21QPersistentModelIndexC2Ev</primary></indexterm>_ZN21QPersistentModelIndexC2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN21QPersistentModelIndexD1Ev</primary></indexterm>_ZN21QPersistentModelIndexD1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN21QPersistentModelIndexD2Ev</primary></indexterm>_ZN21QPersistentModelIndexD2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN21QPersistentModelIndexaSERK11QModelIndex</primary></indexterm>_ZN21QPersistentModelIndexaSERK11QModelIndex <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN21QPersistentModelIndexaSERKS_</primary></indexterm>_ZN21QPersistentModelIndexaSERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN24QAbstractEventDispatcher10startingUpEv</primary></indexterm>_ZN24QAbstractEventDispatcher10startingUpEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN24QAbstractEventDispatcher11closingDownEv</primary></indexterm>_ZN24QAbstractEventDispatcher11closingDownEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN24QAbstractEventDispatcher11filterEventEPv</primary></indexterm>_ZN24QAbstractEventDispatcher11filterEventEPv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN24QAbstractEventDispatcher11qt_metacallEN11QMetaObject4CallEiPPv</primary></indexterm>_ZN24QAbstractEventDispatcher11qt_metacallEN11QMetaObject4CallEiPPv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN24QAbstractEventDispatcher11qt_metacastEPKc</primary></indexterm>_ZN24QAbstractEventDispatcher11qt_metacastEPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN24QAbstractEventDispatcher12aboutToBlockEv</primary></indexterm>_ZN24QAbstractEventDispatcher12aboutToBlockEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN24QAbstractEventDispatcher13registerTimerEiP7QObject</primary></indexterm>_ZN24QAbstractEventDispatcher13registerTimerEiP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN24QAbstractEventDispatcher14setEventFilterEPFbPvE</primary></indexterm>_ZN24QAbstractEventDispatcher14setEventFilterEPFbPvE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN24QAbstractEventDispatcher5awakeEv</primary></indexterm>_ZN24QAbstractEventDispatcher5awakeEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN24QAbstractEventDispatcher8instanceEP7QThread</primary></indexterm>_ZN24QAbstractEventDispatcher8instanceEP7QThread <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN24QAbstractEventDispatcherC1EP7QObject</primary></indexterm>_ZN24QAbstractEventDispatcherC1EP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN24QAbstractEventDispatcherC1ER31QAbstractEventDispatcherPrivateP7QObject</primary></indexterm>_ZN24QAbstractEventDispatcherC1ER31QAbstractEventDispatcherPrivateP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN24QAbstractEventDispatcherC2EP7QObject</primary></indexterm>_ZN24QAbstractEventDispatcherC2EP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN24QAbstractEventDispatcherC2ER31QAbstractEventDispatcherPrivateP7QObject</primary></indexterm>_ZN24QAbstractEventDispatcherC2ER31QAbstractEventDispatcherPrivateP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN24QAbstractEventDispatcherD0Ev</primary></indexterm>_ZN24QAbstractEventDispatcherD0Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN24QAbstractEventDispatcherD1Ev</primary></indexterm>_ZN24QAbstractEventDispatcherD1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN24QAbstractEventDispatcherD2Ev</primary></indexterm>_ZN24QAbstractEventDispatcherD2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN26QAbstractFileEngineHandlerC1Ev</primary></indexterm>_ZN26QAbstractFileEngineHandlerC1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN26QAbstractFileEngineHandlerC2Ev</primary></indexterm>_ZN26QAbstractFileEngineHandlerC2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN26QAbstractFileEngineHandlerD0Ev</primary></indexterm>_ZN26QAbstractFileEngineHandlerD0Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN26QAbstractFileEngineHandlerD1Ev</primary></indexterm>_ZN26QAbstractFileEngineHandlerD1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN26QAbstractFileEngineHandlerD2Ev</primary></indexterm>_ZN26QAbstractFileEngineHandlerD2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN26QTextCodecFactoryInterfaceD0Ev</primary></indexterm>_ZN26QTextCodecFactoryInterfaceD0Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN26QTextCodecFactoryInterfaceD1Ev</primary></indexterm>_ZN26QTextCodecFactoryInterfaceD1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN4QDir10setCurrentERK7QString</primary></indexterm>_ZN4QDir10setCurrentERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN4QDir10setSortingE6QFlagsINS_8SortFlagEE</primary></indexterm>_ZN4QDir10setSortingE6QFlagsINS_8SortFlagEE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN4QDir11currentPathEv</primary></indexterm>_ZN4QDir11currentPathEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN4QDir12makeAbsoluteEv</primary></indexterm>_ZN4QDir12makeAbsoluteEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN4QDir13setNameFilterERK7QString</primary></indexterm>_ZN4QDir13setNameFilterERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN4QDir14isRelativePathERK7QString</primary></indexterm>_ZN4QDir14isRelativePathERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN4QDir14setNameFiltersERK11QStringList</primary></indexterm>_ZN4QDir14setNameFiltersERK11QStringList <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN4QDir15setMatchAllDirsEb</primary></indexterm>_ZN4QDir15setMatchAllDirsEb <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN4QDir17convertSeparatorsERK7QString</primary></indexterm>_ZN4QDir17convertSeparatorsERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN4QDir21addResourceSearchPathERK7QString</primary></indexterm>_ZN4QDir21addResourceSearchPathERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN4QDir21nameFiltersFromStringERK7QString</primary></indexterm>_ZN4QDir21nameFiltersFromStringERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN4QDir2cdERK7QString</primary></indexterm>_ZN4QDir2cdERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN4QDir4cdUpEv</primary></indexterm>_ZN4QDir4cdUpEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN4QDir5matchERK11QStringListRK7QString</primary></indexterm>_ZN4QDir5matchERK11QStringListRK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN4QDir5matchERK7QStringS2_</primary></indexterm>_ZN4QDir5matchERK7QStringS2_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN4QDir6drivesEv</primary></indexterm>_ZN4QDir6drivesEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN4QDir6removeERK7QString</primary></indexterm>_ZN4QDir6removeERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN4QDir6renameERK7QStringS2_</primary></indexterm>_ZN4QDir6renameERK7QStringS2_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN4QDir7setPathERK7QString</primary></indexterm>_ZN4QDir7setPathERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN4QDir8homePathEv</primary></indexterm>_ZN4QDir8homePathEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN4QDir8rootPathEv</primary></indexterm>_ZN4QDir8rootPathEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN4QDir8tempPathEv</primary></indexterm>_ZN4QDir8tempPathEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN4QDir9cleanPathERK7QString</primary></indexterm>_ZN4QDir9cleanPathERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN4QDir9separatorEv</primary></indexterm>_ZN4QDir9separatorEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN4QDir9setFilterE6QFlagsINS_6FilterEE</primary></indexterm>_ZN4QDir9setFilterE6QFlagsINS_6FilterEE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN4QDirC1ERK7QString</primary></indexterm>_ZN4QDirC1ERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN4QDirC1ERK7QStringS2_6QFlagsINS_8SortFlagEES3_INS_6FilterEE</primary></indexterm>_ZN4QDirC1ERK7QStringS2_6QFlagsINS_8SortFlagEES3_INS_6FilterEE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN4QDirC1ERKS_</primary></indexterm>_ZN4QDirC1ERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN4QDirC2ERK7QString</primary></indexterm>_ZN4QDirC2ERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN4QDirC2ERK7QStringS2_6QFlagsINS_8SortFlagEES3_INS_6FilterEE</primary></indexterm>_ZN4QDirC2ERK7QStringS2_6QFlagsINS_8SortFlagEES3_INS_6FilterEE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN4QDirC2ERKS_</primary></indexterm>_ZN4QDirC2ERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN4QDirD1Ev</primary></indexterm>_ZN4QDirD1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN4QDirD2Ev</primary></indexterm>_ZN4QDirD2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN4QDiraSERK7QString</primary></indexterm>_ZN4QDiraSERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN4QDiraSERKS_</primary></indexterm>_ZN4QDiraSERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN4QUrl10toPunycodeERK7QString</primary></indexterm>_ZN4QUrl10toPunycodeERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN4QUrl11fromEncodedERK10QByteArray</primary></indexterm>_ZN4QUrl11fromEncodedERK10QByteArray <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN4QUrl11fromEncodedERK10QByteArrayNS_11ParsingModeE</primary></indexterm>_ZN4QUrl11fromEncodedERK10QByteArrayNS_11ParsingModeE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN4QUrl11setFileNameERK7QString</primary></indexterm>_ZN4QUrl11setFileNameERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN4QUrl11setFragmentERK7QString</primary></indexterm>_ZN4QUrl11setFragmentERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN4QUrl11setPasswordERK7QString</primary></indexterm>_ZN4QUrl11setPasswordERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN4QUrl11setUserInfoERK7QString</primary></indexterm>_ZN4QUrl11setUserInfoERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN4QUrl11setUserNameERK7QString</primary></indexterm>_ZN4QUrl11setUserNameERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN4QUrl12addQueryItemERK7QStringS2_</primary></indexterm>_ZN4QUrl12addQueryItemERK7QStringS2_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN4QUrl12fromPunycodeERK10QByteArray</primary></indexterm>_ZN4QUrl12fromPunycodeERK10QByteArray <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN4QUrl12setAuthorityERK7QString</primary></indexterm>_ZN4QUrl12setAuthorityERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN4QUrl13fromLocalFileERK7QString</primary></indexterm>_ZN4QUrl13fromLocalFileERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN4QUrl13setEncodedUrlERK10QByteArray</primary></indexterm>_ZN4QUrl13setEncodedUrlERK10QByteArray <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN4QUrl13setEncodedUrlERK10QByteArrayNS_11ParsingModeE</primary></indexterm>_ZN4QUrl13setEncodedUrlERK10QByteArrayNS_11ParsingModeE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN4QUrl13setQueryItemsERK5QListI5QPairI7QStringS2_EE</primary></indexterm>_ZN4QUrl13setQueryItemsERK5QListI5QPairI7QStringS2_EE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN4QUrl15removeQueryItemERK7QString</primary></indexterm>_ZN4QUrl15removeQueryItemERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN4QUrl15setEncodedQueryERK10QByteArray</primary></indexterm>_ZN4QUrl15setEncodedQueryERK10QByteArray <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN4QUrl17toPercentEncodingERK7QStringRK10QByteArrayS5_</primary></indexterm>_ZN4QUrl17toPercentEncodingERK7QStringRK10QByteArrayS5_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN4QUrl18setQueryDelimitersEcc</primary></indexterm>_ZN4QUrl18setQueryDelimitersEcc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN4QUrl19fromPercentEncodingERK10QByteArray</primary></indexterm>_ZN4QUrl19fromPercentEncodingERK10QByteArray <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN4QUrl19removeAllQueryItemsERK7QString</primary></indexterm>_ZN4QUrl19removeAllQueryItemsERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN4QUrl5clearEv</primary></indexterm>_ZN4QUrl5clearEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN4QUrl6detachEv</primary></indexterm>_ZN4QUrl6detachEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN4QUrl6setUrlERK7QString</primary></indexterm>_ZN4QUrl6setUrlERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN4QUrl6setUrlERK7QStringNS_11ParsingModeE</primary></indexterm>_ZN4QUrl6setUrlERK7QStringNS_11ParsingModeE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN4QUrl7setHostERK7QString</primary></indexterm>_ZN4QUrl7setHostERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN4QUrl7setPathERK7QString</primary></indexterm>_ZN4QUrl7setPathERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN4QUrl7setPortEi</primary></indexterm>_ZN4QUrl7setPortEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN4QUrl9setSchemeERK7QString</primary></indexterm>_ZN4QUrl9setSchemeERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN4QUrlC1ERK7QString</primary></indexterm>_ZN4QUrlC1ERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN4QUrlC1ERK7QStringNS_11ParsingModeE</primary></indexterm>_ZN4QUrlC1ERK7QStringNS_11ParsingModeE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN4QUrlC1ERKS_</primary></indexterm>_ZN4QUrlC1ERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN4QUrlC1Ev</primary></indexterm>_ZN4QUrlC1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN4QUrlC2ERK7QString</primary></indexterm>_ZN4QUrlC2ERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN4QUrlC2ERK7QStringNS_11ParsingModeE</primary></indexterm>_ZN4QUrlC2ERK7QStringNS_11ParsingModeE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN4QUrlC2ERKS_</primary></indexterm>_ZN4QUrlC2ERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN4QUrlC2Ev</primary></indexterm>_ZN4QUrlC2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN4QUrlD1Ev</primary></indexterm>_ZN4QUrlD1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN4QUrlD2Ev</primary></indexterm>_ZN4QUrlD2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN4QUrlaSERK7QString</primary></indexterm>_ZN4QUrlaSERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN4QUrlaSERKS_</primary></indexterm>_ZN4QUrlaSERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN5QChar9fromAsciiEc</primary></indexterm>_ZN5QChar9fromAsciiEc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN5QCharC1Ec</primary></indexterm>_ZN5QCharC1Ec <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN5QCharC1Eh</primary></indexterm>_ZN5QCharC1Eh <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN5QCharC2Ec</primary></indexterm>_ZN5QCharC2Ec <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN5QCharC2Eh</primary></indexterm>_ZN5QCharC2Eh <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN5QDate10fromStringERK7QStringN2Qt10DateFormatE</primary></indexterm>_ZN5QDate10fromStringERK7QStringN2Qt10DateFormatE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN5QDate10fromStringERK7QStringS2_</primary></indexterm>_ZN5QDate10fromStringERK7QStringS2_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN5QDate10isLeapYearEi</primary></indexterm>_ZN5QDate10isLeapYearEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN5QDate11currentDateEv</primary></indexterm>_ZN5QDate11currentDateEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN5QDate11longDayNameEi</primary></indexterm>_ZN5QDate11longDayNameEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN5QDate12shortDayNameEi</primary></indexterm>_ZN5QDate12shortDayNameEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN5QDate13longMonthNameEi</primary></indexterm>_ZN5QDate13longMonthNameEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN5QDate14shortMonthNameEi</primary></indexterm>_ZN5QDate14shortMonthNameEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN5QDate17gregorianToJulianEiii</primary></indexterm>_ZN5QDate17gregorianToJulianEiii <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN5QDate17julianToGregorianEjRiS0_S0_</primary></indexterm>_ZN5QDate17julianToGregorianEjRiS0_S0_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN5QDate6setYMDEiii</primary></indexterm>_ZN5QDate6setYMDEiii <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN5QDate7isValidEiii</primary></indexterm>_ZN5QDate7isValidEiii <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN5QDateC1Eiii</primary></indexterm>_ZN5QDateC1Eiii <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN5QDateC2Eiii</primary></indexterm>_ZN5QDateC2Eiii <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN5QFile10decodeNameERK10QByteArray</primary></indexterm>_ZN5QFile10decodeNameERK10QByteArray <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN5QFile10encodeNameERK7QString</primary></indexterm>_ZN5QFile10encodeNameERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN5QFile10unsetErrorEv</primary></indexterm>_ZN5QFile10unsetErrorEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN5QFile11permissionsERK7QString</primary></indexterm>_ZN5QFile11permissionsERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN5QFile11qt_metacallEN11QMetaObject4CallEiPPv</primary></indexterm>_ZN5QFile11qt_metacallEN11QMetaObject4CallEiPPv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN5QFile11qt_metacastEPKc</primary></indexterm>_ZN5QFile11qt_metacastEPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN5QFile11setFileNameERK7QString</primary></indexterm>_ZN5QFile11setFileNameERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN5QFile12readLineDataEPcx</primary></indexterm>_ZN5QFile12readLineDataEPcx <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN5QFile14setPermissionsE6QFlagsINS_10PermissionEE</primary></indexterm>_ZN5QFile14setPermissionsE6QFlagsINS_10PermissionEE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN5QFile14setPermissionsERK7QString6QFlagsINS_10PermissionEE</primary></indexterm>_ZN5QFile14setPermissionsERK7QString6QFlagsINS_10PermissionEE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN5QFile19setDecodingFunctionEPF7QStringRK10QByteArrayE</primary></indexterm>_ZN5QFile19setDecodingFunctionEPF7QStringRK10QByteArrayE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN5QFile19setEncodingFunctionEPF10QByteArrayRK7QStringE</primary></indexterm>_ZN5QFile19setEncodingFunctionEPF10QByteArrayRK7QStringE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN5QFile4copyERK7QString</primary></indexterm>_ZN5QFile4copyERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN5QFile4copyERK7QStringS2_</primary></indexterm>_ZN5QFile4copyERK7QStringS2_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN5QFile4linkERK7QString</primary></indexterm>_ZN5QFile4linkERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN5QFile4linkERK7QStringS2_</primary></indexterm>_ZN5QFile4linkERK7QStringS2_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN5QFile4openE6QFlagsIN9QIODevice12OpenModeFlagEE</primary></indexterm>_ZN5QFile4openE6QFlagsIN9QIODevice12OpenModeFlagEE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN5QFile4openEP8_IO_FILE6QFlagsIN9QIODevice12OpenModeFlagEE</primary></indexterm>_ZN5QFile4openEP8_IO_FILE6QFlagsIN9QIODevice12OpenModeFlagEE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN5QFile4openEi6QFlagsIN9QIODevice12OpenModeFlagEE</primary></indexterm>_ZN5QFile4openEi6QFlagsIN9QIODevice12OpenModeFlagEE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN5QFile4seekEx</primary></indexterm>_ZN5QFile4seekEx <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN5QFile5closeEv</primary></indexterm>_ZN5QFile5closeEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN5QFile5flushEv</primary></indexterm>_ZN5QFile5flushEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN5QFile6existsERK7QString</primary></indexterm>_ZN5QFile6existsERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN5QFile6removeERK7QString</primary></indexterm>_ZN5QFile6removeERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN5QFile6removeEv</primary></indexterm>_ZN5QFile6removeEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN5QFile6renameERK7QString</primary></indexterm>_ZN5QFile6renameERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN5QFile6renameERK7QStringS2_</primary></indexterm>_ZN5QFile6renameERK7QStringS2_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN5QFile6resizeERK7QStringx</primary></indexterm>_ZN5QFile6resizeERK7QStringx <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN5QFile6resizeEx</primary></indexterm>_ZN5QFile6resizeEx <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN5QFile8readDataEPcx</primary></indexterm>_ZN5QFile8readDataEPcx <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN5QFile8readLinkERK7QString</primary></indexterm>_ZN5QFile8readLinkERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN5QFile9writeDataEPKcx</primary></indexterm>_ZN5QFile9writeDataEPKcx <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN5QFileC1EP7QObject</primary></indexterm>_ZN5QFileC1EP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN5QFileC1ER12QFilePrivateP7QObject</primary></indexterm>_ZN5QFileC1ER12QFilePrivateP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN5QFileC1ERK7QString</primary></indexterm>_ZN5QFileC1ERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN5QFileC1ERK7QStringP7QObject</primary></indexterm>_ZN5QFileC1ERK7QStringP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN5QFileC1Ev</primary></indexterm>_ZN5QFileC1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN5QFileC2EP7QObject</primary></indexterm>_ZN5QFileC2EP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN5QFileC2ER12QFilePrivateP7QObject</primary></indexterm>_ZN5QFileC2ER12QFilePrivateP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN5QFileC2ERK7QString</primary></indexterm>_ZN5QFileC2ERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN5QFileC2ERK7QStringP7QObject</primary></indexterm>_ZN5QFileC2ERK7QStringP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN5QFileC2Ev</primary></indexterm>_ZN5QFileC2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN5QFileD0Ev</primary></indexterm>_ZN5QFileD0Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN5QFileD1Ev</primary></indexterm>_ZN5QFileD1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN5QFileD2Ev</primary></indexterm>_ZN5QFileD2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN5QRect10moveCenterERK6QPoint</primary></indexterm>_ZN5QRect10moveCenterERK6QPoint <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN5QSize5scaleERKS_N2Qt15AspectRatioModeE</primary></indexterm>_ZN5QSize5scaleERKS_N2Qt15AspectRatioModeE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN5QSize9transposeEv</primary></indexterm>_ZN5QSize9transposeEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN5QTime10fromStringERK7QStringN2Qt10DateFormatE</primary></indexterm>_ZN5QTime10fromStringERK7QStringN2Qt10DateFormatE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN5QTime10fromStringERK7QStringS2_</primary></indexterm>_ZN5QTime10fromStringERK7QStringS2_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN5QTime11currentTimeEv</primary></indexterm>_ZN5QTime11currentTimeEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN5QTime5startEv</primary></indexterm>_ZN5QTime5startEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN5QTime6setHMSEiiii</primary></indexterm>_ZN5QTime6setHMSEiiii <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN5QTime7isValidEiiii</primary></indexterm>_ZN5QTime7isValidEiiii <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN5QTime7restartEv</primary></indexterm>_ZN5QTime7restartEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN5QTimeC1Eiiii</primary></indexterm>_ZN5QTimeC1Eiiii <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN5QTimeC2Eiiii</primary></indexterm>_ZN5QTimeC2Eiiii <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN5QUuid10createUuidEv</primary></indexterm>_ZN5QUuid10createUuidEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN5QUuidC1EPKc</primary></indexterm>_ZN5QUuidC1EPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN5QUuidC1ERK7QString</primary></indexterm>_ZN5QUuidC1ERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN5QUuidC2EPKc</primary></indexterm>_ZN5QUuidC2EPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN5QUuidC2ERK7QString</primary></indexterm>_ZN5QUuidC2ERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN6QEventC1ENS_4TypeE</primary></indexterm>_ZN6QEventC1ENS_4TypeE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN6QEventC2ENS_4TypeE</primary></indexterm>_ZN6QEventC2ENS_4TypeE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN6QEventD0Ev</primary></indexterm>_ZN6QEventD0Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN6QEventD1Ev</primary></indexterm>_ZN6QEventD1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN6QEventD2Ev</primary></indexterm>_ZN6QEventD2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN6QMutex4lockEv</primary></indexterm>_ZN6QMutex4lockEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN6QMutex6unlockEv</primary></indexterm>_ZN6QMutex6unlockEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN6QMutex7tryLockEv</primary></indexterm>_ZN6QMutex7tryLockEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN6QMutexC1ENS_13RecursionModeE</primary></indexterm>_ZN6QMutexC1ENS_13RecursionModeE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN6QMutexC2ENS_13RecursionModeE</primary></indexterm>_ZN6QMutexC2ENS_13RecursionModeE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN6QMutexD1Ev</primary></indexterm>_ZN6QMutexD1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN6QMutexD2Ev</primary></indexterm>_ZN6QMutexD2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN6QSizeF5scaleERKS_N2Qt15AspectRatioModeE</primary></indexterm>_ZN6QSizeF5scaleERKS_N2Qt15AspectRatioModeE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN6QSizeF9transposeEv</primary></indexterm>_ZN6QSizeF9transposeEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN6QTimer10singleShotEiP7QObjectPKc</primary></indexterm>_ZN6QTimer10singleShotEiP7QObjectPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN6QTimer10timerEventEP11QTimerEvent</primary></indexterm>_ZN6QTimer10timerEventEP11QTimerEvent <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN6QTimer11qt_metacallEN11QMetaObject4CallEiPPv</primary></indexterm>_ZN6QTimer11qt_metacallEN11QMetaObject4CallEiPPv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN6QTimer11qt_metacastEPKc</primary></indexterm>_ZN6QTimer11qt_metacastEPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN6QTimer11setIntervalEi</primary></indexterm>_ZN6QTimer11setIntervalEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN6QTimer4stopEv</primary></indexterm>_ZN6QTimer4stopEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN6QTimer5startEi</primary></indexterm>_ZN6QTimer5startEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN6QTimer5startEib</primary></indexterm>_ZN6QTimer5startEib <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN6QTimer5startEv</primary></indexterm>_ZN6QTimer5startEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN6QTimer7timeoutEv</primary></indexterm>_ZN6QTimer7timeoutEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN6QTimerC1EP7QObject</primary></indexterm>_ZN6QTimerC1EP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN6QTimerC1EP7QObjectPKc</primary></indexterm>_ZN6QTimerC1EP7QObjectPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN6QTimerC2EP7QObject</primary></indexterm>_ZN6QTimerC2EP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN6QTimerC2EP7QObjectPKc</primary></indexterm>_ZN6QTimerC2EP7QObjectPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN6QTimerD0Ev</primary></indexterm>_ZN6QTimerD0Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN6QTimerD1Ev</primary></indexterm>_ZN6QTimerD1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN6QTimerD2Ev</primary></indexterm>_ZN6QTimerD2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QBuffer11qt_metacallEN11QMetaObject4CallEiPPv</primary></indexterm>_ZN7QBuffer11qt_metacallEN11QMetaObject4CallEiPPv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QBuffer11qt_metacastEPKc</primary></indexterm>_ZN7QBuffer11qt_metacastEPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QBuffer4openE6QFlagsIN9QIODevice12OpenModeFlagEE</primary></indexterm>_ZN7QBuffer4openE6QFlagsIN9QIODevice12OpenModeFlagEE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QBuffer4seekEx</primary></indexterm>_ZN7QBuffer4seekEx <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QBuffer5closeEv</primary></indexterm>_ZN7QBuffer5closeEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QBuffer6bufferEv</primary></indexterm>_ZN7QBuffer6bufferEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QBuffer7setDataERK10QByteArray</primary></indexterm>_ZN7QBuffer7setDataERK10QByteArray <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QBuffer8readDataEPcx</primary></indexterm>_ZN7QBuffer8readDataEPcx <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QBuffer9setBufferEP10QByteArray</primary></indexterm>_ZN7QBuffer9setBufferEP10QByteArray <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QBuffer9writeDataEPKcx</primary></indexterm>_ZN7QBuffer9writeDataEPKcx <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QBufferC1EP10QByteArrayP7QObject</primary></indexterm>_ZN7QBufferC1EP10QByteArrayP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QBufferC1EP7QObject</primary></indexterm>_ZN7QBufferC1EP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QBufferC2EP10QByteArrayP7QObject</primary></indexterm>_ZN7QBufferC2EP10QByteArrayP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QBufferC2EP7QObject</primary></indexterm>_ZN7QBufferC2EP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QBufferD0Ev</primary></indexterm>_ZN7QBufferD0Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QBufferD1Ev</primary></indexterm>_ZN7QBufferD1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QBufferD2Ev</primary></indexterm>_ZN7QBufferD2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QLocale10setDefaultERKS_</primary></indexterm>_ZN7QLocale10setDefaultERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QLocale15countryToStringENS_7CountryE</primary></indexterm>_ZN7QLocale15countryToStringENS_7CountryE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QLocale16languageToStringENS_8LanguageE</primary></indexterm>_ZN7QLocale16languageToStringENS_8LanguageE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QLocale6systemEv</primary></indexterm>_ZN7QLocale6systemEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QLocaleC1ENS_8LanguageENS_7CountryE</primary></indexterm>_ZN7QLocaleC1ENS_8LanguageENS_7CountryE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QLocaleC1ERK7QString</primary></indexterm>_ZN7QLocaleC1ERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QLocaleC1ERKS_</primary></indexterm>_ZN7QLocaleC1ERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QLocaleC1Ev</primary></indexterm>_ZN7QLocaleC1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QLocaleC2ENS_8LanguageENS_7CountryE</primary></indexterm>_ZN7QLocaleC2ENS_8LanguageENS_7CountryE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QLocaleC2ERK7QString</primary></indexterm>_ZN7QLocaleC2ERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QLocaleC2ERKS_</primary></indexterm>_ZN7QLocaleC2ERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QLocaleC2Ev</primary></indexterm>_ZN7QLocaleC2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QLocaleaSERKS_</primary></indexterm>_ZN7QLocaleaSERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QObject10childEventEP11QChildEvent</primary></indexterm>_ZN7QObject10childEventEP11QChildEvent <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QObject10disconnectEPKS_PKcS1_S3_</primary></indexterm>_ZN7QObject10disconnectEPKS_PKcS1_S3_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QObject10startTimerEi</primary></indexterm>_ZN7QObject10startTimerEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QObject10timerEventEP11QTimerEvent</primary></indexterm>_ZN7QObject10timerEventEP11QTimerEvent <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QObject11customEventEP6QEvent</primary></indexterm>_ZN7QObject11customEventEP6QEvent <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QObject11deleteLaterEv</primary></indexterm>_ZN7QObject11deleteLaterEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QObject11eventFilterEPS_P6QEvent</primary></indexterm>_ZN7QObject11eventFilterEPS_P6QEvent <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QObject11qt_metacallEN11QMetaObject4CallEiPPv</primary></indexterm>_ZN7QObject11qt_metacallEN11QMetaObject4CallEiPPv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QObject11qt_metacastEPKc</primary></indexterm>_ZN7QObject11qt_metacastEPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QObject11setPropertyEPKcRK8QVariant</primary></indexterm>_ZN7QObject11setPropertyEPKcRK8QVariant <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QObject11setUserDataEjP15QObjectUserData</primary></indexterm>_ZN7QObject11setUserDataEjP15QObjectUserData <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QObject12blockSignalsEb</primary></indexterm>_ZN7QObject12blockSignalsEb <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QObject12moveToThreadEP7QThread</primary></indexterm>_ZN7QObject12moveToThreadEP7QThread <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QObject13connectNotifyEPKc</primary></indexterm>_ZN7QObject13connectNotifyEPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QObject13setObjectNameERK7QString</primary></indexterm>_ZN7QObject13setObjectNameERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QObject14dumpObjectInfoEv</primary></indexterm>_ZN7QObject14dumpObjectInfoEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QObject14dumpObjectTreeEv</primary></indexterm>_ZN7QObject14dumpObjectTreeEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QObject16disconnectNotifyEPKc</primary></indexterm>_ZN7QObject16disconnectNotifyEPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QObject16registerUserDataEv</primary></indexterm>_ZN7QObject16registerUserDataEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QObject17removeEventFilterEPS_</primary></indexterm>_ZN7QObject17removeEventFilterEPS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QObject18installEventFilterEPS_</primary></indexterm>_ZN7QObject18installEventFilterEPS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QObject5eventEP6QEvent</primary></indexterm>_ZN7QObject5eventEP6QEvent <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QObject7connectEPKS_PKcS1_S3_N2Qt14ConnectionTypeE</primary></indexterm>_ZN7QObject7connectEPKS_PKcS1_S3_N2Qt14ConnectionTypeE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QObject9destroyedEPS_</primary></indexterm>_ZN7QObject9destroyedEPS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QObject9killTimerEi</primary></indexterm>_ZN7QObject9killTimerEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QObject9setParentEPS_</primary></indexterm>_ZN7QObject9setParentEPS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QObjectC1EPS_</primary></indexterm>_ZN7QObjectC1EPS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QObjectC1EPS_PKc</primary></indexterm>_ZN7QObjectC1EPS_PKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QObjectC1ER14QObjectPrivatePS_</primary></indexterm>_ZN7QObjectC1ER14QObjectPrivatePS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QObjectC2EPS_</primary></indexterm>_ZN7QObjectC2EPS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QObjectC2EPS_PKc</primary></indexterm>_ZN7QObjectC2EPS_PKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QObjectC2ER14QObjectPrivatePS_</primary></indexterm>_ZN7QObjectC2ER14QObjectPrivatePS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QObjectD0Ev</primary></indexterm>_ZN7QObjectD0Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QObjectD1Ev</primary></indexterm>_ZN7QObjectD1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QObjectD2Ev</primary></indexterm>_ZN7QObjectD2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QRegExp10setMinimalEb</primary></indexterm>_ZN7QRegExp10setMinimalEb <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QRegExp10setPatternERK7QString</primary></indexterm>_ZN7QRegExp10setPatternERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QRegExp11errorStringEv</primary></indexterm>_ZN7QRegExp11errorStringEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QRegExp13capturedTextsEv</primary></indexterm>_ZN7QRegExp13capturedTextsEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QRegExp16setPatternSyntaxENS_13PatternSyntaxE</primary></indexterm>_ZN7QRegExp16setPatternSyntaxENS_13PatternSyntaxE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QRegExp18setCaseSensitivityEN2Qt15CaseSensitivityE</primary></indexterm>_ZN7QRegExp18setCaseSensitivityEN2Qt15CaseSensitivityE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QRegExp3capEi</primary></indexterm>_ZN7QRegExp3capEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QRegExp3posEi</primary></indexterm>_ZN7QRegExp3posEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QRegExp6escapeERK7QString</primary></indexterm>_ZN7QRegExp6escapeERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QRegExpC1ERK7QStringN2Qt15CaseSensitivityENS_13PatternSyntaxE</primary></indexterm>_ZN7QRegExpC1ERK7QStringN2Qt15CaseSensitivityENS_13PatternSyntaxE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QRegExpC1ERKS_</primary></indexterm>_ZN7QRegExpC1ERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QRegExpC1Ev</primary></indexterm>_ZN7QRegExpC1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QRegExpC2ERK7QStringN2Qt15CaseSensitivityENS_13PatternSyntaxE</primary></indexterm>_ZN7QRegExpC2ERK7QStringN2Qt15CaseSensitivityENS_13PatternSyntaxE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QRegExpC2ERKS_</primary></indexterm>_ZN7QRegExpC2ERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QRegExpC2Ev</primary></indexterm>_ZN7QRegExpC2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QRegExpD1Ev</primary></indexterm>_ZN7QRegExpD1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QRegExpD2Ev</primary></indexterm>_ZN7QRegExpD2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QRegExpaSERKS_</primary></indexterm>_ZN7QRegExpaSERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QString10fromLatin1EPKci</primary></indexterm>_ZN7QString10fromLatin1EPKci <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QString10setUnicodeEPK5QChari</primary></indexterm>_ZN7QString10setUnicodeEPK5QChari <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QString11fromRawDataEPK5QChari</primary></indexterm>_ZN7QString11fromRawDataEPK5QChari <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QString13fromLocal8BitEPKci</primary></indexterm>_ZN7QString13fromLocal8BitEPKci <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QString17fromLatin1_helperEPKci</primary></indexterm>_ZN7QString17fromLatin1_helperEPKci <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QString4chopEi</primary></indexterm>_ZN7QString4chopEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QString4fillE5QChari</primary></indexterm>_ZN7QString4fillE5QChari <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QString4freeEPNS_4DataE</primary></indexterm>_ZN7QString4freeEPNS_4DataE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QString6appendE5QChar</primary></indexterm>_ZN7QString6appendE5QChar <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QString6appendERK13QLatin1String</primary></indexterm>_ZN7QString6appendERK13QLatin1String <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QString6appendERKS_</primary></indexterm>_ZN7QString6appendERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QString6expandEi</primary></indexterm>_ZN7QString6expandEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QString6insertEi5QChar</primary></indexterm>_ZN7QString6insertEi5QChar <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QString6insertEiPK5QChari</primary></indexterm>_ZN7QString6insertEiPK5QChari <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QString6insertEiRK13QLatin1String</primary></indexterm>_ZN7QString6insertEiRK13QLatin1String <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QString6numberEdci</primary></indexterm>_ZN7QString6numberEdci <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QString6numberEii</primary></indexterm>_ZN7QString6numberEii <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QString6numberEji</primary></indexterm>_ZN7QString6numberEji <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QString6numberEli</primary></indexterm>_ZN7QString6numberEli <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QString6numberEmi</primary></indexterm>_ZN7QString6numberEmi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QString6numberExi</primary></indexterm>_ZN7QString6numberExi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QString6numberEyi</primary></indexterm>_ZN7QString6numberEyi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QString6removeE5QCharN2Qt15CaseSensitivityE</primary></indexterm>_ZN7QString6removeE5QCharN2Qt15CaseSensitivityE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QString6removeERKS_N2Qt15CaseSensitivityE</primary></indexterm>_ZN7QString6removeERKS_N2Qt15CaseSensitivityE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QString6removeEii</primary></indexterm>_ZN7QString6removeEii <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QString6resizeEi</primary></indexterm>_ZN7QString6resizeEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QString6setNumEdci</primary></indexterm>_ZN7QString6setNumEdci <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QString6setNumExi</primary></indexterm>_ZN7QString6setNumExi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QString6setNumEyi</primary></indexterm>_ZN7QString6setNumEyi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QString7reallocEi</primary></indexterm>_ZN7QString7reallocEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QString7replaceE5QCharRKS_N2Qt15CaseSensitivityE</primary></indexterm>_ZN7QString7replaceE5QCharRKS_N2Qt15CaseSensitivityE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QString7replaceE5QCharS0_N2Qt15CaseSensitivityE</primary></indexterm>_ZN7QString7replaceE5QCharS0_N2Qt15CaseSensitivityE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QString7replaceERK7QRegExpRKS_</primary></indexterm>_ZN7QString7replaceERK7QRegExpRKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QString7replaceERKS_S1_N2Qt15CaseSensitivityE</primary></indexterm>_ZN7QString7replaceERKS_S1_N2Qt15CaseSensitivityE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QString7replaceEii5QChar</primary></indexterm>_ZN7QString7replaceEii5QChar <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QString7replaceEiiPK5QChari</primary></indexterm>_ZN7QString7replaceEiiPK5QChari <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QString7replaceEiiRKS_</primary></indexterm>_ZN7QString7replaceEiiRKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QString7sprintfEPKcz</primary></indexterm>_ZN7QString7sprintfEPKcz <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QString8fromUtf8EPKci</primary></indexterm>_ZN7QString8fromUtf8EPKci <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QString8truncateEi</primary></indexterm>_ZN7QString8truncateEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QString8vsprintfEPKcPc</primary></indexterm>_ZN7QString8vsprintfEPKcPc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QString9fromAsciiEPKci</primary></indexterm>_ZN7QString9fromAsciiEPKci <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QString9fromUtf16EPKti</primary></indexterm>_ZN7QString9fromUtf16EPKti <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QStringC1E5QChar</primary></indexterm>_ZN7QStringC1E5QChar <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QStringC1EPK5QChari</primary></indexterm>_ZN7QStringC1EPK5QChari <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QStringC1Ei5QChar</primary></indexterm>_ZN7QStringC1Ei5QChar <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QStringC2E5QChar</primary></indexterm>_ZN7QStringC2E5QChar <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QStringC2EPK5QChari</primary></indexterm>_ZN7QStringC2EPK5QChari <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QStringC2Ei5QChar</primary></indexterm>_ZN7QStringC2Ei5QChar <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QStringaSE5QChar</primary></indexterm>_ZN7QStringaSE5QChar <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QStringaSERKS_</primary></indexterm>_ZN7QStringaSERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QThread10terminatedEv</primary></indexterm>_ZN7QThread10terminatedEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QThread11qt_metacallEN11QMetaObject4CallEiPPv</primary></indexterm>_ZN7QThread11qt_metacallEN11QMetaObject4CallEiPPv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QThread11qt_metacastEPKc</primary></indexterm>_ZN7QThread11qt_metacastEPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QThread11setPriorityENS_8PriorityE</primary></indexterm>_ZN7QThread11setPriorityENS_8PriorityE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QThread12setStackSizeEj</primary></indexterm>_ZN7QThread12setStackSizeEj <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QThread13currentThreadEv</primary></indexterm>_ZN7QThread13currentThreadEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QThread15currentThreadIdEv</primary></indexterm>_ZN7QThread15currentThreadIdEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QThread21setTerminationEnabledEb</primary></indexterm>_ZN7QThread21setTerminationEnabledEb <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QThread4execEv</primary></indexterm>_ZN7QThread4execEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QThread4exitEi</primary></indexterm>_ZN7QThread4exitEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QThread4quitEv</primary></indexterm>_ZN7QThread4quitEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QThread4waitEm</primary></indexterm>_ZN7QThread4waitEm <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QThread5sleepEm</primary></indexterm>_ZN7QThread5sleepEm <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QThread5startENS_8PriorityE</primary></indexterm>_ZN7QThread5startENS_8PriorityE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QThread6msleepEm</primary></indexterm>_ZN7QThread6msleepEm <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QThread6usleepEm</primary></indexterm>_ZN7QThread6usleepEm <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QThread7startedEv</primary></indexterm>_ZN7QThread7startedEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QThread8finishedEv</primary></indexterm>_ZN7QThread8finishedEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QThread9terminateEv</primary></indexterm>_ZN7QThread9terminateEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QThreadC1EP7QObject</primary></indexterm>_ZN7QThreadC1EP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QThreadC2EP7QObject</primary></indexterm>_ZN7QThreadC2EP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QThreadD0Ev</primary></indexterm>_ZN7QThreadD0Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QThreadD1Ev</primary></indexterm>_ZN7QThreadD1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QThreadD2Ev</primary></indexterm>_ZN7QThreadD2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QLibrary11qt_metacallEN11QMetaObject4CallEiPPv</primary></indexterm>_ZN8QLibrary11qt_metacallEN11QMetaObject4CallEiPPv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QLibrary11qt_metacastEPKc</primary></indexterm>_ZN8QLibrary11qt_metacastEPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QLibrary11setFileNameERK7QString</primary></indexterm>_ZN8QLibrary11setFileNameERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QLibrary21setFileNameAndVersionERK7QStringi</primary></indexterm>_ZN8QLibrary21setFileNameAndVersionERK7QStringi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QLibrary4loadEv</primary></indexterm>_ZN8QLibrary4loadEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QLibrary6unloadEv</primary></indexterm>_ZN8QLibrary6unloadEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QLibrary7resolveEPKc</primary></indexterm>_ZN8QLibrary7resolveEPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QLibrary7resolveERK7QStringPKc</primary></indexterm>_ZN8QLibrary7resolveERK7QStringPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QLibrary7resolveERK7QStringiPKc</primary></indexterm>_ZN8QLibrary7resolveERK7QStringiPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QLibrary9isLibraryERK7QString</primary></indexterm>_ZN8QLibrary9isLibraryERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QLibraryC1EP7QObject</primary></indexterm>_ZN8QLibraryC1EP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QLibraryC1ERK7QStringP7QObject</primary></indexterm>_ZN8QLibraryC1ERK7QStringP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QLibraryC1ERK7QStringiP7QObject</primary></indexterm>_ZN8QLibraryC1ERK7QStringiP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QLibraryC2EP7QObject</primary></indexterm>_ZN8QLibraryC2EP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QLibraryC2ERK7QStringP7QObject</primary></indexterm>_ZN8QLibraryC2ERK7QStringP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QLibraryC2ERK7QStringiP7QObject</primary></indexterm>_ZN8QLibraryC2ERK7QStringiP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QLibraryD0Ev</primary></indexterm>_ZN8QLibraryD0Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QLibraryD1Ev</primary></indexterm>_ZN8QLibraryD1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QLibraryD2Ev</primary></indexterm>_ZN8QLibraryD2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QMapData10createDataEv</primary></indexterm>_ZN8QMapData10createDataEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QMapData11node_createEPPNS_4NodeEi</primary></indexterm>_ZN8QMapData11node_createEPPNS_4NodeEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QMapData11node_deleteEPPNS_4NodeEiS1_</primary></indexterm>_ZN8QMapData11node_deleteEPPNS_4NodeEiS1_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QMapData16continueFreeDataEi</primary></indexterm>_ZN8QMapData16continueFreeDataEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QProcess11qt_metacallEN11QMetaObject4CallEiPPv</primary></indexterm>_ZN8QProcess11qt_metacallEN11QMetaObject4CallEiPPv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QProcess11qt_metacastEPKc</primary></indexterm>_ZN8QProcess11qt_metacastEPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QProcess12stateChangedENS_12ProcessStateE</primary></indexterm>_ZN8QProcess12stateChangedENS_12ProcessStateE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QProcess13startDetachedERK7QString</primary></indexterm>_ZN8QProcess13startDetachedERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QProcess13startDetachedERK7QStringRK11QStringList</primary></indexterm>_ZN8QProcess13startDetachedERK7QStringRK11QStringList <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QProcess14setEnvironmentERK11QStringList</primary></indexterm>_ZN8QProcess14setEnvironmentERK11QStringList <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QProcess14setReadChannelENS_14ProcessChannelE</primary></indexterm>_ZN8QProcess14setReadChannelENS_14ProcessChannelE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QProcess14waitForStartedEi</primary></indexterm>_ZN8QProcess14waitForStartedEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QProcess15setProcessStateENS_12ProcessStateE</primary></indexterm>_ZN8QProcess15setProcessStateENS_12ProcessStateE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QProcess15waitForFinishedEi</primary></indexterm>_ZN8QProcess15waitForFinishedEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QProcess16closeReadChannelENS_14ProcessChannelE</primary></indexterm>_ZN8QProcess16closeReadChannelENS_14ProcessChannelE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QProcess16waitForReadyReadEi</primary></indexterm>_ZN8QProcess16waitForReadyReadEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QProcess17closeWriteChannelEv</primary></indexterm>_ZN8QProcess17closeWriteChannelEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QProcess17setupChildProcessEv</primary></indexterm>_ZN8QProcess17setupChildProcessEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QProcess17systemEnvironmentEv</primary></indexterm>_ZN8QProcess17systemEnvironmentEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QProcess18setReadChannelModeENS_18ProcessChannelModeE</primary></indexterm>_ZN8QProcess18setReadChannelModeENS_18ProcessChannelModeE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QProcess19setWorkingDirectoryERK7QString</primary></indexterm>_ZN8QProcess19setWorkingDirectoryERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QProcess19waitForBytesWrittenEi</primary></indexterm>_ZN8QProcess19waitForBytesWrittenEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QProcess20readAllStandardErrorEv</primary></indexterm>_ZN8QProcess20readAllStandardErrorEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QProcess21readAllStandardOutputEv</primary></indexterm>_ZN8QProcess21readAllStandardOutputEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QProcess22readyReadStandardErrorEv</primary></indexterm>_ZN8QProcess22readyReadStandardErrorEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QProcess23readyReadStandardOutputEv</primary></indexterm>_ZN8QProcess23readyReadStandardOutputEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QProcess4killEv</primary></indexterm>_ZN8QProcess4killEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QProcess5closeEv</primary></indexterm>_ZN8QProcess5closeEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QProcess5errorENS_12ProcessErrorE</primary></indexterm>_ZN8QProcess5errorENS_12ProcessErrorE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QProcess5startERK7QString6QFlagsIN9QIODevice12OpenModeFlagEE</primary></indexterm>_ZN8QProcess5startERK7QString6QFlagsIN9QIODevice12OpenModeFlagEE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QProcess5startERK7QStringRK11QStringList6QFlagsIN9QIODevice12OpenModeFlagEE</primary></indexterm>_ZN8QProcess5startERK7QStringRK11QStringList6QFlagsIN9QIODevice12OpenModeFlagEE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QProcess7executeERK7QString</primary></indexterm>_ZN8QProcess7executeERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QProcess7executeERK7QStringRK11QStringList</primary></indexterm>_ZN8QProcess7executeERK7QStringRK11QStringList <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QProcess7startedEv</primary></indexterm>_ZN8QProcess7startedEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QProcess8finishedEi</primary></indexterm>_ZN8QProcess8finishedEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QProcess8finishedEiNS_10ExitStatusE</primary></indexterm>_ZN8QProcess8finishedEiNS_10ExitStatusE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QProcess8readDataEPcx</primary></indexterm>_ZN8QProcess8readDataEPcx <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QProcess9terminateEv</primary></indexterm>_ZN8QProcess9terminateEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QProcess9writeDataEPKcx</primary></indexterm>_ZN8QProcess9writeDataEPKcx <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QProcessC1EP7QObject</primary></indexterm>_ZN8QProcessC1EP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QProcessC2EP7QObject</primary></indexterm>_ZN8QProcessC2EP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QProcessD0Ev</primary></indexterm>_ZN8QProcessD0Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QProcessD1Ev</primary></indexterm>_ZN8QProcessD1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QProcessD2Ev</primary></indexterm>_ZN8QProcessD2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QVariant10nameToTypeEPKc</primary></indexterm>_ZN8QVariant10nameToTypeEPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QVariant10typeToNameENS_4TypeE</primary></indexterm>_ZN8QVariant10typeToNameENS_4TypeE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QVariant12castOrDetachENS_4TypeE</primary></indexterm>_ZN8QVariant12castOrDetachENS_4TypeE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QVariant4dataEv</primary></indexterm>_ZN8QVariant4dataEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QVariant4loadER11QDataStream</primary></indexterm>_ZN8QVariant4loadER11QDataStream <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QVariant5clearEv</primary></indexterm>_ZN8QVariant5clearEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QVariant6createEiPKv</primary></indexterm>_ZN8QVariant6createEiPKv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QVariant6detachEv</primary></indexterm>_ZN8QVariant6detachEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QVariant7convertENS_4TypeE</primary></indexterm>_ZN8QVariant7convertENS_4TypeE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QVariantC1ENS_4TypeE</primary></indexterm>_ZN8QVariantC1ENS_4TypeE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QVariantC1EPKc</primary></indexterm>_ZN8QVariantC1EPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QVariantC1ER11QDataStream</primary></indexterm>_ZN8QVariantC1ER11QDataStream <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QVariantC1ERK10QByteArray</primary></indexterm>_ZN8QVariantC1ERK10QByteArray <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QVariantC1ERK11QStringList</primary></indexterm>_ZN8QVariantC1ERK11QStringList <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QVariantC1ERK13QLatin1String</primary></indexterm>_ZN8QVariantC1ERK13QLatin1String <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QVariantC1ERK4QMapI7QStringS_E</primary></indexterm>_ZN8QVariantC1ERK4QMapI7QStringS_E <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QVariantC1ERK4QUrl</primary></indexterm>_ZN8QVariantC1ERK4QUrl <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QVariantC1ERK5QChar</primary></indexterm>_ZN8QVariantC1ERK5QChar <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QVariantC1ERK5QDate</primary></indexterm>_ZN8QVariantC1ERK5QDate <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QVariantC1ERK5QLine</primary></indexterm>_ZN8QVariantC1ERK5QLine <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QVariantC1ERK5QListIS_E</primary></indexterm>_ZN8QVariantC1ERK5QListIS_E <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QVariantC1ERK5QRect</primary></indexterm>_ZN8QVariantC1ERK5QRect <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QVariantC1ERK5QSize</primary></indexterm>_ZN8QVariantC1ERK5QSize <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QVariantC1ERK5QTime</primary></indexterm>_ZN8QVariantC1ERK5QTime <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QVariantC1ERK6QLineF</primary></indexterm>_ZN8QVariantC1ERK6QLineF <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QVariantC1ERK6QPoint</primary></indexterm>_ZN8QVariantC1ERK6QPoint <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QVariantC1ERK6QRectF</primary></indexterm>_ZN8QVariantC1ERK6QRectF <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QVariantC1ERK6QSizeF</primary></indexterm>_ZN8QVariantC1ERK6QSizeF <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QVariantC1ERK7QLocale</primary></indexterm>_ZN8QVariantC1ERK7QLocale <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QVariantC1ERK7QPointF</primary></indexterm>_ZN8QVariantC1ERK7QPointF <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QVariantC1ERK7QRegExp</primary></indexterm>_ZN8QVariantC1ERK7QRegExp <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QVariantC1ERK7QString</primary></indexterm>_ZN8QVariantC1ERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QVariantC1ERK9QBitArray</primary></indexterm>_ZN8QVariantC1ERK9QBitArray <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QVariantC1ERK9QDateTime</primary></indexterm>_ZN8QVariantC1ERK9QDateTime <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QVariantC1ERKS_</primary></indexterm>_ZN8QVariantC1ERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QVariantC1Eb</primary></indexterm>_ZN8QVariantC1Eb <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QVariantC1Ed</primary></indexterm>_ZN8QVariantC1Ed <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QVariantC1Ei</primary></indexterm>_ZN8QVariantC1Ei <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QVariantC1EiPKv</primary></indexterm>_ZN8QVariantC1EiPKv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QVariantC1Ej</primary></indexterm>_ZN8QVariantC1Ej <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QVariantC1Ex</primary></indexterm>_ZN8QVariantC1Ex <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QVariantC1Ey</primary></indexterm>_ZN8QVariantC1Ey <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QVariantC2ENS_4TypeE</primary></indexterm>_ZN8QVariantC2ENS_4TypeE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QVariantC2EPKc</primary></indexterm>_ZN8QVariantC2EPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QVariantC2ER11QDataStream</primary></indexterm>_ZN8QVariantC2ER11QDataStream <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QVariantC2ERK10QByteArray</primary></indexterm>_ZN8QVariantC2ERK10QByteArray <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QVariantC2ERK11QStringList</primary></indexterm>_ZN8QVariantC2ERK11QStringList <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QVariantC2ERK13QLatin1String</primary></indexterm>_ZN8QVariantC2ERK13QLatin1String <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QVariantC2ERK4QMapI7QStringS_E</primary></indexterm>_ZN8QVariantC2ERK4QMapI7QStringS_E <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QVariantC2ERK4QUrl</primary></indexterm>_ZN8QVariantC2ERK4QUrl <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QVariantC2ERK5QChar</primary></indexterm>_ZN8QVariantC2ERK5QChar <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QVariantC2ERK5QDate</primary></indexterm>_ZN8QVariantC2ERK5QDate <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QVariantC2ERK5QLine</primary></indexterm>_ZN8QVariantC2ERK5QLine <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QVariantC2ERK5QListIS_E</primary></indexterm>_ZN8QVariantC2ERK5QListIS_E <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QVariantC2ERK5QRect</primary></indexterm>_ZN8QVariantC2ERK5QRect <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QVariantC2ERK5QSize</primary></indexterm>_ZN8QVariantC2ERK5QSize <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QVariantC2ERK5QTime</primary></indexterm>_ZN8QVariantC2ERK5QTime <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QVariantC2ERK6QLineF</primary></indexterm>_ZN8QVariantC2ERK6QLineF <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QVariantC2ERK6QPoint</primary></indexterm>_ZN8QVariantC2ERK6QPoint <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QVariantC2ERK6QRectF</primary></indexterm>_ZN8QVariantC2ERK6QRectF <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QVariantC2ERK6QSizeF</primary></indexterm>_ZN8QVariantC2ERK6QSizeF <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QVariantC2ERK7QLocale</primary></indexterm>_ZN8QVariantC2ERK7QLocale <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QVariantC2ERK7QPointF</primary></indexterm>_ZN8QVariantC2ERK7QPointF <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QVariantC2ERK7QRegExp</primary></indexterm>_ZN8QVariantC2ERK7QRegExp <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QVariantC2ERK7QString</primary></indexterm>_ZN8QVariantC2ERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QVariantC2ERK9QBitArray</primary></indexterm>_ZN8QVariantC2ERK9QBitArray <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QVariantC2ERK9QDateTime</primary></indexterm>_ZN8QVariantC2ERK9QDateTime <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QVariantC2ERKS_</primary></indexterm>_ZN8QVariantC2ERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QVariantC2Eb</primary></indexterm>_ZN8QVariantC2Eb <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QVariantC2Ed</primary></indexterm>_ZN8QVariantC2Ed <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QVariantC2Ei</primary></indexterm>_ZN8QVariantC2Ei <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QVariantC2EiPKv</primary></indexterm>_ZN8QVariantC2EiPKv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QVariantC2Ej</primary></indexterm>_ZN8QVariantC2Ej <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QVariantC2Ex</primary></indexterm>_ZN8QVariantC2Ex <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QVariantC2Ey</primary></indexterm>_ZN8QVariantC2Ey <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QVariantD1Ev</primary></indexterm>_ZN8QVariantD1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QVariantD2Ev</primary></indexterm>_ZN8QVariantD2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QVariantaSERKS_</primary></indexterm>_ZN8QVariantaSERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QBitArray4fillEbii</primary></indexterm>_ZN9QBitArray4fillEbii <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QBitArray6resizeEi</primary></indexterm>_ZN9QBitArray6resizeEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QBitArrayC1Eib</primary></indexterm>_ZN9QBitArrayC1Eib <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QBitArrayC2Eib</primary></indexterm>_ZN9QBitArrayC2Eib <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QBitArrayaNERKS_</primary></indexterm>_ZN9QBitArrayaNERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QBitArrayeOERKS_</primary></indexterm>_ZN9QBitArrayeOERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QBitArrayoRERKS_</primary></indexterm>_ZN9QBitArrayoRERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QDateTime10fromStringERK7QStringN2Qt10DateFormatE</primary></indexterm>_ZN9QDateTime10fromStringERK7QStringN2Qt10DateFormatE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QDateTime10fromStringERK7QStringS2_</primary></indexterm>_ZN9QDateTime10fromStringERK7QStringS2_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QDateTime11setTimeSpecEN2Qt8TimeSpecE</primary></indexterm>_ZN9QDateTime11setTimeSpecEN2Qt8TimeSpecE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QDateTime15currentDateTimeEv</primary></indexterm>_ZN9QDateTime15currentDateTimeEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QDateTime7setDateERK5QDate</primary></indexterm>_ZN9QDateTime7setDateERK5QDate <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QDateTime7setTimeERK5QTime</primary></indexterm>_ZN9QDateTime7setTimeERK5QTime <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QDateTime9setTime_tEj</primary></indexterm>_ZN9QDateTime9setTime_tEj <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QDateTimeC1ERK5QDate</primary></indexterm>_ZN9QDateTimeC1ERK5QDate <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QDateTimeC1ERK5QDateRK5QTimeN2Qt8TimeSpecE</primary></indexterm>_ZN9QDateTimeC1ERK5QDateRK5QTimeN2Qt8TimeSpecE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QDateTimeC1ERKS_</primary></indexterm>_ZN9QDateTimeC1ERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QDateTimeC1Ev</primary></indexterm>_ZN9QDateTimeC1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QDateTimeC2ERK5QDate</primary></indexterm>_ZN9QDateTimeC2ERK5QDate <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QDateTimeC2ERK5QDateRK5QTimeN2Qt8TimeSpecE</primary></indexterm>_ZN9QDateTimeC2ERK5QDateRK5QTimeN2Qt8TimeSpecE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QDateTimeC2ERKS_</primary></indexterm>_ZN9QDateTimeC2ERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QDateTimeC2Ev</primary></indexterm>_ZN9QDateTimeC2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QDateTimeD1Ev</primary></indexterm>_ZN9QDateTimeD1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QDateTimeD2Ev</primary></indexterm>_ZN9QDateTimeD2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QDateTimeaSERKS_</primary></indexterm>_ZN9QDateTimeaSERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QFileInfo10setCachingEb</primary></indexterm>_ZN9QFileInfo10setCachingEb <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QFileInfo12makeAbsoluteEv</primary></indexterm>_ZN9QFileInfo12makeAbsoluteEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QFileInfo6detachEv</primary></indexterm>_ZN9QFileInfo6detachEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QFileInfo7refreshEv</primary></indexterm>_ZN9QFileInfo7refreshEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QFileInfo7setFileERK4QDirRK7QString</primary></indexterm>_ZN9QFileInfo7setFileERK4QDirRK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QFileInfo7setFileERK5QFile</primary></indexterm>_ZN9QFileInfo7setFileERK5QFile <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QFileInfo7setFileERK7QString</primary></indexterm>_ZN9QFileInfo7setFileERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QFileInfoC1ERK4QDirRK7QString</primary></indexterm>_ZN9QFileInfoC1ERK4QDirRK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QFileInfoC1ERK5QFile</primary></indexterm>_ZN9QFileInfoC1ERK5QFile <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QFileInfoC1ERK7QString</primary></indexterm>_ZN9QFileInfoC1ERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QFileInfoC1ERKS_</primary></indexterm>_ZN9QFileInfoC1ERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QFileInfoC1Ev</primary></indexterm>_ZN9QFileInfoC1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QFileInfoC2ERK4QDirRK7QString</primary></indexterm>_ZN9QFileInfoC2ERK4QDirRK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QFileInfoC2ERK5QFile</primary></indexterm>_ZN9QFileInfoC2ERK5QFile <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QFileInfoC2ERK7QString</primary></indexterm>_ZN9QFileInfoC2ERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QFileInfoC2ERKS_</primary></indexterm>_ZN9QFileInfoC2ERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QFileInfoC2Ev</primary></indexterm>_ZN9QFileInfoC2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QFileInfoD1Ev</primary></indexterm>_ZN9QFileInfoD1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QFileInfoD2Ev</primary></indexterm>_ZN9QFileInfoD2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QFileInfoaSERKS_</primary></indexterm>_ZN9QFileInfoaSERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QFileInfoeqERKS_</primary></indexterm>_ZN9QFileInfoeqERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QHashData12allocateNodeEv</primary></indexterm>_ZN9QHashData12allocateNodeEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QHashData12previousNodeEPNS_4NodeE</primary></indexterm>_ZN9QHashData12previousNodeEPNS_4NodeE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QHashData13detach_helperEPFvPNS_4NodeEPvEi</primary></indexterm>_ZN9QHashData13detach_helperEPFvPNS_4NodeEPvEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QHashData14destroyAndFreeEv</primary></indexterm>_ZN9QHashData14destroyAndFreeEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QHashData6rehashEi</primary></indexterm>_ZN9QHashData6rehashEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QHashData8freeNodeEPv</primary></indexterm>_ZN9QHashData8freeNodeEPv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QHashData8nextNodeEPNS_4NodeE</primary></indexterm>_ZN9QHashData8nextNodeEPNS_4NodeE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QIODevice11qt_metacallEN11QMetaObject4CallEiPPv</primary></indexterm>_ZN9QIODevice11qt_metacallEN11QMetaObject4CallEiPPv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QIODevice11qt_metacastEPKc</primary></indexterm>_ZN9QIODevice11qt_metacastEPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QIODevice11resetStatusEv</primary></indexterm>_ZN9QIODevice11resetStatusEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QIODevice11setOpenModeE6QFlagsINS_12OpenModeFlagEE</primary></indexterm>_ZN9QIODevice11setOpenModeE6QFlagsINS_12OpenModeFlagEE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QIODevice12aboutToCloseEv</primary></indexterm>_ZN9QIODevice12aboutToCloseEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QIODevice12bytesWrittenEx</primary></indexterm>_ZN9QIODevice12bytesWrittenEx <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QIODevice12readLineDataEPcx</primary></indexterm>_ZN9QIODevice12readLineDataEPcx <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QIODevice14setErrorStringERK7QString</primary></indexterm>_ZN9QIODevice14setErrorStringERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QIODevice16waitForReadyReadEi</primary></indexterm>_ZN9QIODevice16waitForReadyReadEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QIODevice18setTextModeEnabledEb</primary></indexterm>_ZN9QIODevice18setTextModeEnabledEb <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QIODevice19waitForBytesWrittenEi</primary></indexterm>_ZN9QIODevice19waitForBytesWrittenEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QIODevice4openE6QFlagsINS_12OpenModeFlagEE</primary></indexterm>_ZN9QIODevice4openE6QFlagsINS_12OpenModeFlagEE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QIODevice4peekEPcx</primary></indexterm>_ZN9QIODevice4peekEPcx <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QIODevice4peekEx</primary></indexterm>_ZN9QIODevice4peekEx <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QIODevice4readEPcx</primary></indexterm>_ZN9QIODevice4readEPcx <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QIODevice4readEx</primary></indexterm>_ZN9QIODevice4readEx <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QIODevice4seekEx</primary></indexterm>_ZN9QIODevice4seekEx <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QIODevice5closeEv</primary></indexterm>_ZN9QIODevice5closeEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QIODevice5resetEv</primary></indexterm>_ZN9QIODevice5resetEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QIODevice5writeEPKcx</primary></indexterm>_ZN9QIODevice5writeEPKcx <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QIODevice7readAllEv</primary></indexterm>_ZN9QIODevice7readAllEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QIODevice8readLineEPcx</primary></indexterm>_ZN9QIODevice8readLineEPcx <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QIODevice8readLineEx</primary></indexterm>_ZN9QIODevice8readLineEx <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QIODevice9readyReadEv</primary></indexterm>_ZN9QIODevice9readyReadEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QIODevice9ungetCharEc</primary></indexterm>_ZN9QIODevice9ungetCharEc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QIODeviceC1EP7QObject</primary></indexterm>_ZN9QIODeviceC1EP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QIODeviceC1ER16QIODevicePrivateP7QObject</primary></indexterm>_ZN9QIODeviceC1ER16QIODevicePrivateP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QIODeviceC1Ev</primary></indexterm>_ZN9QIODeviceC1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QIODeviceC2EP7QObject</primary></indexterm>_ZN9QIODeviceC2EP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QIODeviceC2ER16QIODevicePrivateP7QObject</primary></indexterm>_ZN9QIODeviceC2ER16QIODevicePrivateP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QIODeviceC2Ev</primary></indexterm>_ZN9QIODeviceC2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QIODeviceD0Ev</primary></indexterm>_ZN9QIODeviceD0Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QIODeviceD1Ev</primary></indexterm>_ZN9QIODeviceD1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QIODeviceD2Ev</primary></indexterm>_ZN9QIODeviceD2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QListData4moveEii</primary></indexterm>_ZN9QListData4moveEii <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QListData5eraseEPPv</primary></indexterm>_ZN9QListData5eraseEPPv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QListData6appendERKS_</primary></indexterm>_ZN9QListData6appendERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QListData6appendEv</primary></indexterm>_ZN9QListData6appendEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QListData6detachEv</primary></indexterm>_ZN9QListData6detachEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QListData6insertEi</primary></indexterm>_ZN9QListData6insertEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QListData6removeEi</primary></indexterm>_ZN9QListData6removeEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QListData6removeEii</primary></indexterm>_ZN9QListData6removeEii <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QListData7prependEv</primary></indexterm>_ZN9QListData7prependEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QListData7reallocEi</primary></indexterm>_ZN9QListData7reallocEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QMetaType12isRegisteredEi</primary></indexterm>_ZN9QMetaType12isRegisteredEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QMetaType12registerTypeEPKcPFvPvEPFS2_PKvE</primary></indexterm>_ZN9QMetaType12registerTypeEPKcPFvPvEPFS2_PKvE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QMetaType23registerStreamOperatorsEPKcPFvR11QDataStreamPKvEPFvS3_PvE</primary></indexterm>_ZN9QMetaType23registerStreamOperatorsEPKcPFvR11QDataStreamPKvEPFvS3_PvE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QMetaType4loadER11QDataStreamiPv</primary></indexterm>_ZN9QMetaType4loadER11QDataStreamiPv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QMetaType4saveER11QDataStreamiPKv</primary></indexterm>_ZN9QMetaType4saveER11QDataStreamiPKv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QMetaType4typeEPKc</primary></indexterm>_ZN9QMetaType4typeEPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QMetaType7destroyEiPv</primary></indexterm>_ZN9QMetaType7destroyEiPv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QMetaType8typeNameEi</primary></indexterm>_ZN9QMetaType8typeNameEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QMetaType9constructEiPKv</primary></indexterm>_ZN9QMetaType9constructEiPKv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QMimeData11qt_metacallEN11QMetaObject4CallEiPPv</primary></indexterm>_ZN9QMimeData11qt_metacallEN11QMetaObject4CallEiPPv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QMimeData11qt_metacastEPKc</primary></indexterm>_ZN9QMimeData11qt_metacastEPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QMimeData12setColorDataERK8QVariant</primary></indexterm>_ZN9QMimeData12setColorDataERK8QVariant <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QMimeData12setImageDataERK8QVariant</primary></indexterm>_ZN9QMimeData12setImageDataERK8QVariant <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QMimeData5clearEv</primary></indexterm>_ZN9QMimeData5clearEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QMimeData7setDataERK7QStringRK10QByteArray</primary></indexterm>_ZN9QMimeData7setDataERK7QStringRK10QByteArray <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QMimeData7setHtmlERK7QString</primary></indexterm>_ZN9QMimeData7setHtmlERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QMimeData7setTextERK7QString</primary></indexterm>_ZN9QMimeData7setTextERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QMimeData7setUrlsERK5QListI4QUrlE</primary></indexterm>_ZN9QMimeData7setUrlsERK5QListI4QUrlE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QMimeDataC1Ev</primary></indexterm>_ZN9QMimeDataC1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QMimeDataC2Ev</primary></indexterm>_ZN9QMimeDataC2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QMimeDataD0Ev</primary></indexterm>_ZN9QMimeDataD0Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QMimeDataD1Ev</primary></indexterm>_ZN9QMimeDataD1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QMimeDataD2Ev</primary></indexterm>_ZN9QMimeDataD2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QSettings10beginGroupERK7QString</primary></indexterm>_ZN9QSettings10beginGroupERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QSettings11qt_metacallEN11QMetaObject4CallEiPPv</primary></indexterm>_ZN9QSettings11qt_metacallEN11QMetaObject4CallEiPPv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QSettings11qt_metacastEPKc</primary></indexterm>_ZN9QSettings11qt_metacastEPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QSettings13setArrayIndexEi</primary></indexterm>_ZN9QSettings13setArrayIndexEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QSettings14beginReadArrayERK7QString</primary></indexterm>_ZN9QSettings14beginReadArrayERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QSettings14registerFormatERK7QStringPFbR9QIODeviceR4QMapIS0_8QVariantEEPFbS4_RKS7_EN2Qt15CaseSensitivityE</primary></indexterm>_ZN9QSettings14registerFormatERK7QStringPFbR9QIODeviceR4QMapIS0_8QVariantEEPFbS4_RKS7_EN2Qt15CaseSensitivityE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QSettings14setUserIniPathERK7QString</primary></indexterm>_ZN9QSettings14setUserIniPathERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QSettings15beginWriteArrayERK7QStringi</primary></indexterm>_ZN9QSettings15beginWriteArrayERK7QStringi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QSettings16setSystemIniPathERK7QString</primary></indexterm>_ZN9QSettings16setSystemIniPathERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QSettings19setFallbacksEnabledEb</primary></indexterm>_ZN9QSettings19setFallbacksEnabledEb <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QSettings4syncEv</primary></indexterm>_ZN9QSettings4syncEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QSettings5clearEv</primary></indexterm>_ZN9QSettings5clearEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QSettings5eventEP6QEvent</primary></indexterm>_ZN9QSettings5eventEP6QEvent <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QSettings6removeERK7QString</primary></indexterm>_ZN9QSettings6removeERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QSettings7setPathENS_6FormatENS_5ScopeERK7QString</primary></indexterm>_ZN9QSettings7setPathENS_6FormatENS_5ScopeERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QSettings8endArrayEv</primary></indexterm>_ZN9QSettings8endArrayEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QSettings8endGroupEv</primary></indexterm>_ZN9QSettings8endGroupEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QSettings8setValueERK7QStringRK8QVariant</primary></indexterm>_ZN9QSettings8setValueERK7QStringRK8QVariant <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QSettingsC1ENS_5ScopeERK7QStringS3_P7QObject</primary></indexterm>_ZN9QSettingsC1ENS_5ScopeERK7QStringS3_P7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QSettingsC1ENS_6FormatENS_5ScopeERK7QStringS4_P7QObject</primary></indexterm>_ZN9QSettingsC1ENS_6FormatENS_5ScopeERK7QStringS4_P7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QSettingsC1EP7QObject</primary></indexterm>_ZN9QSettingsC1EP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QSettingsC1ERK7QStringNS_6FormatEP7QObject</primary></indexterm>_ZN9QSettingsC1ERK7QStringNS_6FormatEP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QSettingsC1ERK7QStringS2_P7QObject</primary></indexterm>_ZN9QSettingsC1ERK7QStringS2_P7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QSettingsC2ENS_5ScopeERK7QStringS3_P7QObject</primary></indexterm>_ZN9QSettingsC2ENS_5ScopeERK7QStringS3_P7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QSettingsC2ENS_6FormatENS_5ScopeERK7QStringS4_P7QObject</primary></indexterm>_ZN9QSettingsC2ENS_6FormatENS_5ScopeERK7QStringS4_P7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QSettingsC2EP7QObject</primary></indexterm>_ZN9QSettingsC2EP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QSettingsC2ERK7QStringNS_6FormatEP7QObject</primary></indexterm>_ZN9QSettingsC2ERK7QStringNS_6FormatEP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QSettingsC2ERK7QStringS2_P7QObject</primary></indexterm>_ZN9QSettingsC2ERK7QStringS2_P7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QSettingsD0Ev</primary></indexterm>_ZN9QSettingsD0Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QSettingsD1Ev</primary></indexterm>_ZN9QSettingsD1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QSettingsD2Ev</primary></indexterm>_ZN9QSettingsD2Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QtPrivate16QStringList_joinEPK11QStringListRK7QString</primary></indexterm>_ZN9QtPrivate16QStringList_joinEPK11QStringListRK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QtPrivate16QStringList_sortEP11QStringList</primary></indexterm>_ZN9QtPrivate16QStringList_sortEP11QStringList <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QtPrivate18QStringList_filterEPK11QStringListRK7QRegExp</primary></indexterm>_ZN9QtPrivate18QStringList_filterEPK11QStringListRK7QRegExp <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QtPrivate18QStringList_filterEPK11QStringListRK7QStringN2Qt15CaseSensitivityE</primary></indexterm>_ZN9QtPrivate18QStringList_filterEPK11QStringListRK7QStringN2Qt15CaseSensitivityE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QtPrivate19QStringList_indexOfEPK11QStringListRK7QRegExpi</primary></indexterm>_ZN9QtPrivate19QStringList_indexOfEPK11QStringListRK7QRegExpi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QtPrivate20QStringList_containsEPK11QStringListRK7QStringN2Qt15CaseSensitivityE</primary></indexterm>_ZN9QtPrivate20QStringList_containsEPK11QStringListRK7QStringN2Qt15CaseSensitivityE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QtPrivate23QStringList_lastIndexOfEPK11QStringListRK7QRegExpi</primary></indexterm>_ZN9QtPrivate23QStringList_lastIndexOfEPK11QStringListRK7QRegExpi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QtPrivate28QStringList_replaceInStringsEP11QStringListRK7QRegExpRK7QString</primary></indexterm>_ZN9QtPrivate28QStringList_replaceInStringsEP11QStringListRK7QRegExpRK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QtPrivate28QStringList_replaceInStringsEP11QStringListRK7QStringS4_N2Qt15CaseSensitivityE</primary></indexterm>_ZN9QtPrivate28QStringList_replaceInStringsEP11QStringListRK7QStringS4_N2Qt15CaseSensitivityE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK10QByteArray10simplifiedEv</primary></indexterm>_ZNK10QByteArray10simplifiedEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK10QByteArray10startsWithEPKc</primary></indexterm>_ZNK10QByteArray10startsWithEPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK10QByteArray10startsWithERKS_</primary></indexterm>_ZNK10QByteArray10startsWithERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK10QByteArray10startsWithEc</primary></indexterm>_ZNK10QByteArray10startsWithEc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK10QByteArray10toLongLongEPbi</primary></indexterm>_ZNK10QByteArray10toLongLongEPbi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK10QByteArray11lastIndexOfERKS_i</primary></indexterm>_ZNK10QByteArray11lastIndexOfERKS_i <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK10QByteArray11lastIndexOfEci</primary></indexterm>_ZNK10QByteArray11lastIndexOfEci <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK10QByteArray11toULongLongEPbi</primary></indexterm>_ZNK10QByteArray11toULongLongEPbi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK10QByteArray13leftJustifiedEicb</primary></indexterm>_ZNK10QByteArray13leftJustifiedEicb <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK10QByteArray14rightJustifiedEicb</primary></indexterm>_ZNK10QByteArray14rightJustifiedEicb <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK10QByteArray3midEii</primary></indexterm>_ZNK10QByteArray3midEii <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK10QByteArray4leftEi</primary></indexterm>_ZNK10QByteArray4leftEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK10QByteArray5countEPKc</primary></indexterm>_ZNK10QByteArray5countEPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK10QByteArray5countERKS_</primary></indexterm>_ZNK10QByteArray5countERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK10QByteArray5countEc</primary></indexterm>_ZNK10QByteArray5countEc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK10QByteArray5rightEi</primary></indexterm>_ZNK10QByteArray5rightEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK10QByteArray5splitEc</primary></indexterm>_ZNK10QByteArray5splitEc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK10QByteArray5toIntEPbi</primary></indexterm>_ZNK10QByteArray5toIntEPbi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK10QByteArray6isNullEv</primary></indexterm>_ZNK10QByteArray6isNullEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK10QByteArray6toLongEPbi</primary></indexterm>_ZNK10QByteArray6toLongEPbi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK10QByteArray6toUIntEPbi</primary></indexterm>_ZNK10QByteArray6toUIntEPbi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK10QByteArray7indexOfERKS_i</primary></indexterm>_ZNK10QByteArray7indexOfERKS_i <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK10QByteArray7indexOfEci</primary></indexterm>_ZNK10QByteArray7indexOfEci <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK10QByteArray7toFloatEPb</primary></indexterm>_ZNK10QByteArray7toFloatEPb <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK10QByteArray7toLowerEv</primary></indexterm>_ZNK10QByteArray7toLowerEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK10QByteArray7toShortEPbi</primary></indexterm>_ZNK10QByteArray7toShortEPbi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK10QByteArray7toULongEPbi</primary></indexterm>_ZNK10QByteArray7toULongEPbi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK10QByteArray7toUpperEv</primary></indexterm>_ZNK10QByteArray7toUpperEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK10QByteArray7trimmedEv</primary></indexterm>_ZNK10QByteArray7trimmedEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK10QByteArray8endsWithEPKc</primary></indexterm>_ZNK10QByteArray8endsWithEPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK10QByteArray8endsWithERKS_</primary></indexterm>_ZNK10QByteArray8endsWithERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK10QByteArray8endsWithEc</primary></indexterm>_ZNK10QByteArray8endsWithEc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK10QByteArray8toBase64Ev</primary></indexterm>_ZNK10QByteArray8toBase64Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK10QByteArray8toDoubleEPb</primary></indexterm>_ZNK10QByteArray8toDoubleEPb <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK10QByteArray8toUShortEPbi</primary></indexterm>_ZNK10QByteArray8toUShortEPbi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK10QEventLoop10metaObjectEv</primary></indexterm>_ZNK10QEventLoop10metaObjectEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK10QEventLoop9isRunningEv</primary></indexterm>_ZNK10QEventLoop9isRunningEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK10QSemaphore9availableEv</primary></indexterm>_ZNK10QSemaphore9availableEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK10QTextCodec11fromUnicodeERK7QString</primary></indexterm>_ZNK10QTextCodec11fromUnicodeERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK10QTextCodec11fromUnicodeERK7QStringRi</primary></indexterm>_ZNK10QTextCodec11fromUnicodeERK7QStringRi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK10QTextCodec11makeDecoderEv</primary></indexterm>_ZNK10QTextCodec11makeDecoderEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK10QTextCodec11makeEncoderEv</primary></indexterm>_ZNK10QTextCodec11makeEncoderEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK10QTextCodec7aliasesEv</primary></indexterm>_ZNK10QTextCodec7aliasesEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK10QTextCodec9canEncodeE5QChar</primary></indexterm>_ZNK10QTextCodec9canEncodeE5QChar <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK10QTextCodec9canEncodeERK7QString</primary></indexterm>_ZNK10QTextCodec9canEncodeERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK10QTextCodec9toUnicodeEPKc</primary></indexterm>_ZNK10QTextCodec9toUnicodeEPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK10QTextCodec9toUnicodeERK10QByteArray</primary></indexterm>_ZNK10QTextCodec9toUnicodeERK10QByteArray <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK10QTextCodec9toUnicodeERK10QByteArrayi</primary></indexterm>_ZNK10QTextCodec9toUnicodeERK10QByteArrayi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK11QDataStream5atEndEv</primary></indexterm>_ZNK11QDataStream5atEndEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK11QDataStream6statusEv</primary></indexterm>_ZNK11QDataStream6statusEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK11QMetaMethod10attributesEv</primary></indexterm>_ZNK11QMetaMethod10attributesEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK11QMetaMethod10methodTypeEv</primary></indexterm>_ZNK11QMetaMethod10methodTypeEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK11QMetaMethod14parameterNamesEv</primary></indexterm>_ZNK11QMetaMethod14parameterNamesEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK11QMetaMethod14parameterTypesEv</primary></indexterm>_ZNK11QMetaMethod14parameterTypesEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK11QMetaMethod3tagEv</primary></indexterm>_ZNK11QMetaMethod3tagEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK11QMetaMethod6accessEv</primary></indexterm>_ZNK11QMetaMethod6accessEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK11QMetaMethod8typeNameEv</primary></indexterm>_ZNK11QMetaMethod8typeNameEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK11QMetaMethod9signatureEv</primary></indexterm>_ZNK11QMetaMethod9signatureEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK11QMetaObject10enumeratorEi</primary></indexterm>_ZNK11QMetaObject10enumeratorEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK11QMetaObject11indexOfSlotEPKc</primary></indexterm>_ZNK11QMetaObject11indexOfSlotEPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK11QMetaObject11methodCountEv</primary></indexterm>_ZNK11QMetaObject11methodCountEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK11QMetaObject12methodOffsetEv</primary></indexterm>_ZNK11QMetaObject12methodOffsetEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK11QMetaObject13indexOfMethodEPKc</primary></indexterm>_ZNK11QMetaObject13indexOfMethodEPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK11QMetaObject13indexOfSignalEPKc</primary></indexterm>_ZNK11QMetaObject13indexOfSignalEPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK11QMetaObject13propertyCountEv</primary></indexterm>_ZNK11QMetaObject13propertyCountEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK11QMetaObject14classInfoCountEv</primary></indexterm>_ZNK11QMetaObject14classInfoCountEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK11QMetaObject14propertyOffsetEv</primary></indexterm>_ZNK11QMetaObject14propertyOffsetEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK11QMetaObject15classInfoOffsetEv</primary></indexterm>_ZNK11QMetaObject15classInfoOffsetEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK11QMetaObject15enumeratorCountEv</primary></indexterm>_ZNK11QMetaObject15enumeratorCountEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK11QMetaObject15indexOfPropertyEPKc</primary></indexterm>_ZNK11QMetaObject15indexOfPropertyEPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK11QMetaObject16enumeratorOffsetEv</primary></indexterm>_ZNK11QMetaObject16enumeratorOffsetEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK11QMetaObject16indexOfClassInfoEPKc</primary></indexterm>_ZNK11QMetaObject16indexOfClassInfoEPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK11QMetaObject17indexOfEnumeratorEPKc</primary></indexterm>_ZNK11QMetaObject17indexOfEnumeratorEPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK11QMetaObject2trEPKcS1_</primary></indexterm>_ZNK11QMetaObject2trEPKcS1_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK11QMetaObject4castEP7QObject</primary></indexterm>_ZNK11QMetaObject4castEP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK11QMetaObject6methodEi</primary></indexterm>_ZNK11QMetaObject6methodEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK11QMetaObject6trUtf8EPKcS1_</primary></indexterm>_ZNK11QMetaObject6trUtf8EPKcS1_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK11QMetaObject8propertyEi</primary></indexterm>_ZNK11QMetaObject8propertyEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK11QMetaObject9classInfoEi</primary></indexterm>_ZNK11QMetaObject9classInfoEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK11QTextStream10fieldWidthEv</primary></indexterm>_ZNK11QTextStream10fieldWidthEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK11QTextStream11integerBaseEv</primary></indexterm>_ZNK11QTextStream11integerBaseEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK11QTextStream11numberFlagsEv</primary></indexterm>_ZNK11QTextStream11numberFlagsEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK11QTextStream14fieldAlignmentEv</primary></indexterm>_ZNK11QTextStream14fieldAlignmentEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK11QTextStream17autoDetectUnicodeEv</primary></indexterm>_ZNK11QTextStream17autoDetectUnicodeEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK11QTextStream18realNumberNotationEv</primary></indexterm>_ZNK11QTextStream18realNumberNotationEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK11QTextStream19realNumberPrecisionEv</primary></indexterm>_ZNK11QTextStream19realNumberPrecisionEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK11QTextStream21generateByteOrderMarkEv</primary></indexterm>_ZNK11QTextStream21generateByteOrderMarkEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK11QTextStream5atEndEv</primary></indexterm>_ZNK11QTextStream5atEndEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK11QTextStream5codecEv</primary></indexterm>_ZNK11QTextStream5codecEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK11QTextStream6deviceEv</primary></indexterm>_ZNK11QTextStream6deviceEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK11QTextStream6statusEv</primary></indexterm>_ZNK11QTextStream6statusEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK11QTextStream6stringEv</primary></indexterm>_ZNK11QTextStream6stringEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK11QTextStream7padCharEv</primary></indexterm>_ZNK11QTextStream7padCharEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK11QTranslator10metaObjectEv</primary></indexterm>_ZNK11QTranslator10metaObjectEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK11QTranslator7isEmptyEv</primary></indexterm>_ZNK11QTranslator7isEmptyEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK11QTranslator9translateEPKcS1_S1_</primary></indexterm>_ZNK11QTranslator9translateEPKcS1_S1_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK13QFSFileEngine12isSequentialEv</primary></indexterm>_ZNK13QFSFileEngine12isSequentialEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK13QFSFileEngine13caseSensitiveEv</primary></indexterm>_ZNK13QFSFileEngine13caseSensitiveEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK13QFSFileEngine14isRelativePathEv</primary></indexterm>_ZNK13QFSFileEngine14isRelativePathEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK13QFSFileEngine17supportsExtensionEN19QAbstractFileEngine9ExtensionE</primary></indexterm>_ZNK13QFSFileEngine17supportsExtensionEN19QAbstractFileEngine9ExtensionE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK13QFSFileEngine3posEv</primary></indexterm>_ZNK13QFSFileEngine3posEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK13QFSFileEngine4sizeEv</primary></indexterm>_ZNK13QFSFileEngine4sizeEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK13QFSFileEngine5mkdirERK7QStringb</primary></indexterm>_ZNK13QFSFileEngine5mkdirERK7QStringb <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK13QFSFileEngine5ownerEN19QAbstractFileEngine9FileOwnerE</primary></indexterm>_ZNK13QFSFileEngine5ownerEN19QAbstractFileEngine9FileOwnerE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK13QFSFileEngine5rmdirERK7QStringb</primary></indexterm>_ZNK13QFSFileEngine5rmdirERK7QStringb <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK13QFSFileEngine6handleEv</primary></indexterm>_ZNK13QFSFileEngine6handleEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK13QFSFileEngine7ownerIdEN19QAbstractFileEngine9FileOwnerE</primary></indexterm>_ZNK13QFSFileEngine7ownerIdEN19QAbstractFileEngine9FileOwnerE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK13QFSFileEngine8fileNameEN19QAbstractFileEngine8FileNameE</primary></indexterm>_ZNK13QFSFileEngine8fileNameEN19QAbstractFileEngine8FileNameE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK13QFSFileEngine8fileTimeEN19QAbstractFileEngine8FileTimeE</primary></indexterm>_ZNK13QFSFileEngine8fileTimeEN19QAbstractFileEngine8FileTimeE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK13QFSFileEngine9entryListE6QFlagsIN4QDir6FilterEERK11QStringList</primary></indexterm>_ZNK13QFSFileEngine9entryListE6QFlagsIN4QDir6FilterEERK11QStringList <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK13QFSFileEngine9fileFlagsE6QFlagsIN19QAbstractFileEngine8FileFlagEE</primary></indexterm>_ZNK13QFSFileEngine9fileFlagsE6QFlagsIN19QAbstractFileEngine8FileFlagEE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK13QMetaProperty10enumeratorEv</primary></indexterm>_ZNK13QMetaProperty10enumeratorEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK13QMetaProperty10isEditableEPK7QObject</primary></indexterm>_ZNK13QMetaProperty10isEditableEPK7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK13QMetaProperty10isEnumTypeEv</primary></indexterm>_ZNK13QMetaProperty10isEnumTypeEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK13QMetaProperty10isFlagTypeEv</primary></indexterm>_ZNK13QMetaProperty10isFlagTypeEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK13QMetaProperty10isReadableEv</primary></indexterm>_ZNK13QMetaProperty10isReadableEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK13QMetaProperty10isWritableEv</primary></indexterm>_ZNK13QMetaProperty10isWritableEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK13QMetaProperty12hasStdCppSetEv</primary></indexterm>_ZNK13QMetaProperty12hasStdCppSetEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK13QMetaProperty12isDesignableEPK7QObject</primary></indexterm>_ZNK13QMetaProperty12isDesignableEPK7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK13QMetaProperty12isResettableEv</primary></indexterm>_ZNK13QMetaProperty12isResettableEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK13QMetaProperty12isScriptableEPK7QObject</primary></indexterm>_ZNK13QMetaProperty12isScriptableEPK7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK13QMetaProperty4nameEv</primary></indexterm>_ZNK13QMetaProperty4nameEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK13QMetaProperty4readEPK7QObject</primary></indexterm>_ZNK13QMetaProperty4readEPK7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK13QMetaProperty4typeEv</primary></indexterm>_ZNK13QMetaProperty4typeEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK13QMetaProperty5resetEP7QObject</primary></indexterm>_ZNK13QMetaProperty5resetEP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK13QMetaProperty5writeEP7QObjectRK8QVariant</primary></indexterm>_ZNK13QMetaProperty5writeEP7QObjectRK8QVariant <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK13QMetaProperty6isUserEPK7QObject</primary></indexterm>_ZNK13QMetaProperty6isUserEPK7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK13QMetaProperty8isStoredEPK7QObject</primary></indexterm>_ZNK13QMetaProperty8isStoredEPK7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK13QMetaProperty8typeNameEv</primary></indexterm>_ZNK13QMetaProperty8typeNameEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK13QPluginLoader10metaObjectEv</primary></indexterm>_ZNK13QPluginLoader10metaObjectEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK13QPluginLoader8fileNameEv</primary></indexterm>_ZNK13QPluginLoader8fileNameEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK13QPluginLoader8isLoadedEv</primary></indexterm>_ZNK13QPluginLoader8isLoadedEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK13QSignalMapper10metaObjectEv</primary></indexterm>_ZNK13QSignalMapper10metaObjectEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK13QSignalMapper7mappingEP7QObject</primary></indexterm>_ZNK13QSignalMapper7mappingEP7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK13QSignalMapper7mappingEP7QWidget</primary></indexterm>_ZNK13QSignalMapper7mappingEP7QWidget <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK13QSignalMapper7mappingERK7QString</primary></indexterm>_ZNK13QSignalMapper7mappingERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK13QSignalMapper7mappingEi</primary></indexterm>_ZNK13QSignalMapper7mappingEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK14QMetaClassInfo4nameEv</primary></indexterm>_ZNK14QMetaClassInfo4nameEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK14QMetaClassInfo5valueEv</primary></indexterm>_ZNK14QMetaClassInfo5valueEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK14QStringMatcher7indexInERK7QStringi</primary></indexterm>_ZNK14QStringMatcher7indexInERK7QStringi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK14QTemporaryFile10autoRemoveEv</primary></indexterm>_ZNK14QTemporaryFile10autoRemoveEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK14QTemporaryFile10fileEngineEv</primary></indexterm>_ZNK14QTemporaryFile10fileEngineEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK14QTemporaryFile10metaObjectEv</primary></indexterm>_ZNK14QTemporaryFile10metaObjectEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK14QTemporaryFile12fileTemplateEv</primary></indexterm>_ZNK14QTemporaryFile12fileTemplateEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK14QTemporaryFile8fileNameEv</primary></indexterm>_ZNK14QTemporaryFile8fileNameEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK15QSocketNotifier10metaObjectEv</primary></indexterm>_ZNK15QSocketNotifier10metaObjectEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK16QCoreApplication10metaObjectEv</primary></indexterm>_ZNK16QCoreApplication10metaObjectEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK16QTextCodecPlugin10metaObjectEv</primary></indexterm>_ZNK16QTextCodecPlugin10metaObjectEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK16QTextCodecPlugin4keysEv</primary></indexterm>_ZNK16QTextCodecPlugin4keysEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK17QByteArrayMatcher7indexInERK10QByteArrayi</primary></indexterm>_ZNK17QByteArrayMatcher7indexInERK10QByteArrayi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK18QAbstractItemModel10encodeDataERK5QListI11QModelIndexER11QDataStream</primary></indexterm>_ZNK18QAbstractItemModel10encodeDataERK5QListI11QModelIndexER11QDataStream <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK18QAbstractItemModel10headerDataEiN2Qt11OrientationEi</primary></indexterm>_ZNK18QAbstractItemModel10headerDataEiN2Qt11OrientationEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK18QAbstractItemModel10metaObjectEv</primary></indexterm>_ZNK18QAbstractItemModel10metaObjectEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK18QAbstractItemModel11hasChildrenERK11QModelIndex</primary></indexterm>_ZNK18QAbstractItemModel11hasChildrenERK11QModelIndex <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK18QAbstractItemModel12canFetchMoreERK11QModelIndex</primary></indexterm>_ZNK18QAbstractItemModel12canFetchMoreERK11QModelIndex <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK18QAbstractItemModel20supportedDropActionsEv</primary></indexterm>_ZNK18QAbstractItemModel20supportedDropActionsEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK18QAbstractItemModel4spanERK11QModelIndex</primary></indexterm>_ZNK18QAbstractItemModel4spanERK11QModelIndex <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK18QAbstractItemModel5buddyERK11QModelIndex</primary></indexterm>_ZNK18QAbstractItemModel5buddyERK11QModelIndex <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK18QAbstractItemModel5flagsERK11QModelIndex</primary></indexterm>_ZNK18QAbstractItemModel5flagsERK11QModelIndex <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK18QAbstractItemModel5matchERK11QModelIndexiRK8QVarianti6QFlagsIN2Qt9MatchFlagEE</primary></indexterm>_ZNK18QAbstractItemModel5matchERK11QModelIndexiRK8QVarianti6QFlagsIN2Qt9MatchFlagEE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK18QAbstractItemModel8hasIndexEiiRK11QModelIndex</primary></indexterm>_ZNK18QAbstractItemModel8hasIndexEiiRK11QModelIndex <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK18QAbstractItemModel8itemDataERK11QModelIndex</primary></indexterm>_ZNK18QAbstractItemModel8itemDataERK11QModelIndex <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK18QAbstractItemModel8mimeDataERK5QListI11QModelIndexE</primary></indexterm>_ZNK18QAbstractItemModel8mimeDataERK5QListI11QModelIndexE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK18QAbstractItemModel9mimeTypesEv</primary></indexterm>_ZNK18QAbstractItemModel9mimeTypesEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK18QAbstractListModel10metaObjectEv</primary></indexterm>_ZNK18QAbstractListModel10metaObjectEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK18QAbstractListModel11columnCountERK11QModelIndex</primary></indexterm>_ZNK18QAbstractListModel11columnCountERK11QModelIndex <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK18QAbstractListModel11hasChildrenERK11QModelIndex</primary></indexterm>_ZNK18QAbstractListModel11hasChildrenERK11QModelIndex <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK18QAbstractListModel5indexEiiRK11QModelIndex</primary></indexterm>_ZNK18QAbstractListModel5indexEiiRK11QModelIndex <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK18QAbstractListModel6parentERK11QModelIndex</primary></indexterm>_ZNK18QAbstractListModel6parentERK11QModelIndex <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK18QThreadStorageData3getEv</primary></indexterm>_ZNK18QThreadStorageData3getEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK19QAbstractFileEngine11errorStringEv</primary></indexterm>_ZNK19QAbstractFileEngine11errorStringEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK19QAbstractFileEngine12isSequentialEv</primary></indexterm>_ZNK19QAbstractFileEngine12isSequentialEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK19QAbstractFileEngine13caseSensitiveEv</primary></indexterm>_ZNK19QAbstractFileEngine13caseSensitiveEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK19QAbstractFileEngine14isRelativePathEv</primary></indexterm>_ZNK19QAbstractFileEngine14isRelativePathEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK19QAbstractFileEngine17supportsExtensionENS_9ExtensionE</primary></indexterm>_ZNK19QAbstractFileEngine17supportsExtensionENS_9ExtensionE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK19QAbstractFileEngine3posEv</primary></indexterm>_ZNK19QAbstractFileEngine3posEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK19QAbstractFileEngine4sizeEv</primary></indexterm>_ZNK19QAbstractFileEngine4sizeEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK19QAbstractFileEngine5errorEv</primary></indexterm>_ZNK19QAbstractFileEngine5errorEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK19QAbstractFileEngine5mkdirERK7QStringb</primary></indexterm>_ZNK19QAbstractFileEngine5mkdirERK7QStringb <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK19QAbstractFileEngine5ownerENS_9FileOwnerE</primary></indexterm>_ZNK19QAbstractFileEngine5ownerENS_9FileOwnerE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK19QAbstractFileEngine5rmdirERK7QStringb</primary></indexterm>_ZNK19QAbstractFileEngine5rmdirERK7QStringb <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK19QAbstractFileEngine6handleEv</primary></indexterm>_ZNK19QAbstractFileEngine6handleEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK19QAbstractFileEngine7ownerIdENS_9FileOwnerE</primary></indexterm>_ZNK19QAbstractFileEngine7ownerIdENS_9FileOwnerE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK19QAbstractFileEngine8fileNameENS_8FileNameE</primary></indexterm>_ZNK19QAbstractFileEngine8fileNameENS_8FileNameE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK19QAbstractFileEngine8fileTimeENS_8FileTimeE</primary></indexterm>_ZNK19QAbstractFileEngine8fileTimeENS_8FileTimeE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK19QAbstractFileEngine9entryListE6QFlagsIN4QDir6FilterEERK11QStringList</primary></indexterm>_ZNK19QAbstractFileEngine9entryListE6QFlagsIN4QDir6FilterEERK11QStringList <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK19QAbstractFileEngine9fileFlagsE6QFlagsINS_8FileFlagEE</primary></indexterm>_ZNK19QAbstractFileEngine9fileFlagsE6QFlagsINS_8FileFlagEE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK19QAbstractTableModel10metaObjectEv</primary></indexterm>_ZNK19QAbstractTableModel10metaObjectEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK19QAbstractTableModel11hasChildrenERK11QModelIndex</primary></indexterm>_ZNK19QAbstractTableModel11hasChildrenERK11QModelIndex <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK19QAbstractTableModel5indexEiiRK11QModelIndex</primary></indexterm>_ZNK19QAbstractTableModel5indexEiiRK11QModelIndex <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK19QAbstractTableModel6parentERK11QModelIndex</primary></indexterm>_ZNK19QAbstractTableModel6parentERK11QModelIndex <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK21QObjectCleanupHandler10metaObjectEv</primary></indexterm>_ZNK21QObjectCleanupHandler10metaObjectEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK21QObjectCleanupHandler7isEmptyEv</primary></indexterm>_ZNK21QObjectCleanupHandler7isEmptyEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK21QPersistentModelIndex10internalIdEv</primary></indexterm>_ZNK21QPersistentModelIndex10internalIdEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK21QPersistentModelIndex15internalPointerEv</primary></indexterm>_ZNK21QPersistentModelIndex15internalPointerEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK21QPersistentModelIndex3rowEv</primary></indexterm>_ZNK21QPersistentModelIndex3rowEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK21QPersistentModelIndex4dataEi</primary></indexterm>_ZNK21QPersistentModelIndex4dataEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK21QPersistentModelIndex5childEii</primary></indexterm>_ZNK21QPersistentModelIndex5childEii <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK21QPersistentModelIndex5modelEv</primary></indexterm>_ZNK21QPersistentModelIndex5modelEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK21QPersistentModelIndex6columnEv</primary></indexterm>_ZNK21QPersistentModelIndex6columnEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK21QPersistentModelIndex6parentEv</primary></indexterm>_ZNK21QPersistentModelIndex6parentEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK21QPersistentModelIndex7isValidEv</primary></indexterm>_ZNK21QPersistentModelIndex7isValidEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK21QPersistentModelIndex7siblingEii</primary></indexterm>_ZNK21QPersistentModelIndex7siblingEii <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK21QPersistentModelIndexcvRK11QModelIndexEv</primary></indexterm>_ZNK21QPersistentModelIndexcvRK11QModelIndexEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK21QPersistentModelIndexeqERK11QModelIndex</primary></indexterm>_ZNK21QPersistentModelIndexeqERK11QModelIndex <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK21QPersistentModelIndexeqERKS_</primary></indexterm>_ZNK21QPersistentModelIndexeqERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK21QPersistentModelIndexltERKS_</primary></indexterm>_ZNK21QPersistentModelIndexltERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK21QPersistentModelIndexneERK11QModelIndex</primary></indexterm>_ZNK21QPersistentModelIndexneERK11QModelIndex <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK24QAbstractEventDispatcher10metaObjectEv</primary></indexterm>_ZNK24QAbstractEventDispatcher10metaObjectEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK4QDir10isReadableEv</primary></indexterm>_ZNK4QDir10isReadableEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK4QDir10isRelativeEv</primary></indexterm>_ZNK4QDir10isRelativeEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK4QDir10nameFilterEv</primary></indexterm>_ZNK4QDir10nameFilterEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK4QDir11nameFiltersEv</primary></indexterm>_ZNK4QDir11nameFiltersEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK4QDir12absolutePathEv</primary></indexterm>_ZNK4QDir12absolutePathEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK4QDir12matchAllDirsEv</primary></indexterm>_ZNK4QDir12matchAllDirsEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK4QDir13canonicalPathEv</primary></indexterm>_ZNK4QDir13canonicalPathEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK4QDir13entryInfoListE6QFlagsINS_6FilterEES0_INS_8SortFlagEE</primary></indexterm>_ZNK4QDir13entryInfoListE6QFlagsINS_6FilterEES0_INS_8SortFlagEE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK4QDir13entryInfoListERK11QStringList6QFlagsINS_6FilterEES3_INS_8SortFlagEE</primary></indexterm>_ZNK4QDir13entryInfoListERK11QStringList6QFlagsINS_6FilterEES3_INS_8SortFlagEE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK4QDir16absoluteFilePathERK7QString</primary></indexterm>_ZNK4QDir16absoluteFilePathERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK4QDir16relativeFilePathERK7QString</primary></indexterm>_ZNK4QDir16relativeFilePathERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK4QDir4pathEv</primary></indexterm>_ZNK4QDir4pathEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK4QDir5countEv</primary></indexterm>_ZNK4QDir5countEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK4QDir5mkdirERK7QString</primary></indexterm>_ZNK4QDir5mkdirERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK4QDir5rmdirERK7QString</primary></indexterm>_ZNK4QDir5rmdirERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK4QDir6existsERK7QString</primary></indexterm>_ZNK4QDir6existsERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK4QDir6existsEv</primary></indexterm>_ZNK4QDir6existsEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK4QDir6filterEv</primary></indexterm>_ZNK4QDir6filterEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK4QDir6isRootEv</primary></indexterm>_ZNK4QDir6isRootEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK4QDir6mkpathERK7QString</primary></indexterm>_ZNK4QDir6mkpathERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK4QDir6rmpathERK7QString</primary></indexterm>_ZNK4QDir6rmpathERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK4QDir7dirNameEv</primary></indexterm>_ZNK4QDir7dirNameEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK4QDir7refreshEv</primary></indexterm>_ZNK4QDir7refreshEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK4QDir7sortingEv</primary></indexterm>_ZNK4QDir7sortingEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK4QDir8filePathERK7QString</primary></indexterm>_ZNK4QDir8filePathERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK4QDir9entryListE6QFlagsINS_6FilterEES0_INS_8SortFlagEE</primary></indexterm>_ZNK4QDir9entryListE6QFlagsINS_6FilterEES0_INS_8SortFlagEE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK4QDir9entryListERK11QStringList6QFlagsINS_6FilterEES3_INS_8SortFlagEE</primary></indexterm>_ZNK4QDir9entryListERK11QStringList6QFlagsINS_6FilterEES3_INS_8SortFlagEE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK4QDireqERKS_</primary></indexterm>_ZNK4QDireqERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK4QDirixEi</primary></indexterm>_ZNK4QDirixEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK4QUrl10isDetachedEv</primary></indexterm>_ZNK4QUrl10isDetachedEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK4QUrl10isParentOfERKS_</primary></indexterm>_ZNK4QUrl10isParentOfERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK4QUrl10isRelativeEv</primary></indexterm>_ZNK4QUrl10isRelativeEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK4QUrl10queryItemsEv</primary></indexterm>_ZNK4QUrl10queryItemsEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK4QUrl11toLocalFileEv</primary></indexterm>_ZNK4QUrl11toLocalFileEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK4QUrl12encodedQueryEv</primary></indexterm>_ZNK4QUrl12encodedQueryEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK4QUrl12hasQueryItemERK7QString</primary></indexterm>_ZNK4QUrl12hasQueryItemERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK4QUrl14queryItemValueERK7QString</primary></indexterm>_ZNK4QUrl14queryItemValueERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK4QUrl18allQueryItemValuesERK7QString</primary></indexterm>_ZNK4QUrl18allQueryItemValuesERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK4QUrl18queryPairDelimiterEv</primary></indexterm>_ZNK4QUrl18queryPairDelimiterEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK4QUrl19queryValueDelimiterEv</primary></indexterm>_ZNK4QUrl19queryValueDelimiterEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK4QUrl4hostEv</primary></indexterm>_ZNK4QUrl4hostEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK4QUrl4pathEv</primary></indexterm>_ZNK4QUrl4pathEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK4QUrl4portEi</primary></indexterm>_ZNK4QUrl4portEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK4QUrl4portEv</primary></indexterm>_ZNK4QUrl4portEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK4QUrl6schemeEv</primary></indexterm>_ZNK4QUrl6schemeEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK4QUrl7dirPathEv</primary></indexterm>_ZNK4QUrl7dirPathEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK4QUrl7isEmptyEv</primary></indexterm>_ZNK4QUrl7isEmptyEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK4QUrl7isValidEv</primary></indexterm>_ZNK4QUrl7isValidEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK4QUrl8fileNameEv</primary></indexterm>_ZNK4QUrl8fileNameEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK4QUrl8fragmentEv</primary></indexterm>_ZNK4QUrl8fragmentEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK4QUrl8passwordEv</primary></indexterm>_ZNK4QUrl8passwordEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK4QUrl8resolvedERKS_</primary></indexterm>_ZNK4QUrl8resolvedERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK4QUrl8toStringE6QFlagsINS_16FormattingOptionEE</primary></indexterm>_ZNK4QUrl8toStringE6QFlagsINS_16FormattingOptionEE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK4QUrl8userInfoEv</primary></indexterm>_ZNK4QUrl8userInfoEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK4QUrl8userNameEv</primary></indexterm>_ZNK4QUrl8userNameEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK4QUrl9authorityEv</primary></indexterm>_ZNK4QUrl9authorityEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK4QUrl9toEncodedE6QFlagsINS_16FormattingOptionEE</primary></indexterm>_ZNK4QUrl9toEncodedE6QFlagsINS_16FormattingOptionEE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK4QUrleqERKS_</primary></indexterm>_ZNK4QUrleqERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK4QUrlltERKS_</primary></indexterm>_ZNK4QUrlltERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK4QUrlneERKS_</primary></indexterm>_ZNK4QUrlneERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK5QChar10digitValueEv</primary></indexterm>_ZNK5QChar10digitValueEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK5QChar11hasMirroredEv</primary></indexterm>_ZNK5QChar11hasMirroredEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK5QChar12mirroredCharEv</primary></indexterm>_ZNK5QChar12mirroredCharEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK5QChar13decompositionEv</primary></indexterm>_ZNK5QChar13decompositionEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK5QChar14combiningClassEv</primary></indexterm>_ZNK5QChar14combiningClassEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK5QChar14unicodeVersionEv</primary></indexterm>_ZNK5QChar14unicodeVersionEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK5QChar16decompositionTagEv</primary></indexterm>_ZNK5QChar16decompositionTagEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK5QChar16isLetterOrNumberEv</primary></indexterm>_ZNK5QChar16isLetterOrNumberEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK5QChar6isMarkEv</primary></indexterm>_ZNK5QChar6isMarkEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK5QChar7isDigitEv</primary></indexterm>_ZNK5QChar7isDigitEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK5QChar7isPrintEv</primary></indexterm>_ZNK5QChar7isPrintEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK5QChar7isPunctEv</primary></indexterm>_ZNK5QChar7isPunctEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK5QChar7isSpaceEv</primary></indexterm>_ZNK5QChar7isSpaceEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK5QChar7joiningEv</primary></indexterm>_ZNK5QChar7joiningEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK5QChar7toAsciiEv</primary></indexterm>_ZNK5QChar7toAsciiEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK5QChar7toLowerEv</primary></indexterm>_ZNK5QChar7toLowerEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK5QChar7toUpperEv</primary></indexterm>_ZNK5QChar7toUpperEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK5QChar8categoryEv</primary></indexterm>_ZNK5QChar8categoryEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK5QChar8isLetterEv</primary></indexterm>_ZNK5QChar8isLetterEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK5QChar8isNumberEv</primary></indexterm>_ZNK5QChar8isNumberEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK5QChar8isSymbolEv</primary></indexterm>_ZNK5QChar8isSymbolEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK5QChar9directionEv</primary></indexterm>_ZNK5QChar9directionEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK5QDate10daysInYearEv</primary></indexterm>_ZNK5QDate10daysInYearEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK5QDate10weekNumberEPi</primary></indexterm>_ZNK5QDate10weekNumberEPi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK5QDate11daysInMonthEv</primary></indexterm>_ZNK5QDate11daysInMonthEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK5QDate3dayEv</primary></indexterm>_ZNK5QDate3dayEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK5QDate4yearEv</primary></indexterm>_ZNK5QDate4yearEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK5QDate5monthEv</primary></indexterm>_ZNK5QDate5monthEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK5QDate6daysToERKS_</primary></indexterm>_ZNK5QDate6daysToERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK5QDate7addDaysEi</primary></indexterm>_ZNK5QDate7addDaysEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK5QDate7isValidEv</primary></indexterm>_ZNK5QDate7isValidEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK5QDate8addYearsEi</primary></indexterm>_ZNK5QDate8addYearsEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK5QDate8toStringEN2Qt10DateFormatE</primary></indexterm>_ZNK5QDate8toStringEN2Qt10DateFormatE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK5QDate8toStringERK7QString</primary></indexterm>_ZNK5QDate8toStringERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK5QDate9addMonthsEi</primary></indexterm>_ZNK5QDate9addMonthsEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK5QDate9dayOfWeekEv</primary></indexterm>_ZNK5QDate9dayOfWeekEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK5QDate9dayOfYearEv</primary></indexterm>_ZNK5QDate9dayOfYearEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK5QFile10fileEngineEv</primary></indexterm>_ZNK5QFile10fileEngineEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK5QFile10metaObjectEv</primary></indexterm>_ZNK5QFile10metaObjectEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK5QFile11permissionsEv</primary></indexterm>_ZNK5QFile11permissionsEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK5QFile12isSequentialEv</primary></indexterm>_ZNK5QFile12isSequentialEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK5QFile3posEv</primary></indexterm>_ZNK5QFile3posEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK5QFile4sizeEv</primary></indexterm>_ZNK5QFile4sizeEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK5QFile5atEndEv</primary></indexterm>_ZNK5QFile5atEndEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK5QFile5errorEv</primary></indexterm>_ZNK5QFile5errorEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK5QFile6existsEv</primary></indexterm>_ZNK5QFile6existsEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK5QFile6handleEv</primary></indexterm>_ZNK5QFile6handleEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK5QFile8fileNameEv</primary></indexterm>_ZNK5QFile8fileNameEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK5QFile8readLinkEv</primary></indexterm>_ZNK5QFile8readLinkEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK5QRect10intersectsERKS_</primary></indexterm>_ZNK5QRect10intersectsERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK5QRect10normalizedEv</primary></indexterm>_ZNK5QRect10normalizedEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK5QRect8containsERK6QPointb</primary></indexterm>_ZNK5QRect8containsERK6QPointb <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK5QRect8containsERKS_b</primary></indexterm>_ZNK5QRect8containsERKS_b <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK5QRectanERKS_</primary></indexterm>_ZNK5QRectanERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK5QRectorERKS_</primary></indexterm>_ZNK5QRectorERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK5QTime4hourEv</primary></indexterm>_ZNK5QTime4hourEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK5QTime4msecEv</primary></indexterm>_ZNK5QTime4msecEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK5QTime6minuteEv</primary></indexterm>_ZNK5QTime6minuteEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK5QTime6secondEv</primary></indexterm>_ZNK5QTime6secondEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK5QTime6secsToERKS_</primary></indexterm>_ZNK5QTime6secsToERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK5QTime7addSecsEi</primary></indexterm>_ZNK5QTime7addSecsEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK5QTime7elapsedEv</primary></indexterm>_ZNK5QTime7elapsedEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK5QTime7isValidEv</primary></indexterm>_ZNK5QTime7isValidEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK5QTime7msecsToERKS_</primary></indexterm>_ZNK5QTime7msecsToERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK5QTime8addMSecsEi</primary></indexterm>_ZNK5QTime8addMSecsEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK5QTime8toStringEN2Qt10DateFormatE</primary></indexterm>_ZNK5QTime8toStringEN2Qt10DateFormatE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK5QTime8toStringERK7QString</primary></indexterm>_ZNK5QTime8toStringERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK5QUuid6isNullEv</primary></indexterm>_ZNK5QUuid6isNullEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK5QUuid7variantEv</primary></indexterm>_ZNK5QUuid7variantEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK5QUuid7versionEv</primary></indexterm>_ZNK5QUuid7versionEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK5QUuid8toStringEv</primary></indexterm>_ZNK5QUuid8toStringEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK5QUuidgtERKS_</primary></indexterm>_ZNK5QUuidgtERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK5QUuidltERKS_</primary></indexterm>_ZNK5QUuidltERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK6QLineF10unitVectorEv</primary></indexterm>_ZNK6QLineF10unitVectorEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK6QLineF5angleERKS_</primary></indexterm>_ZNK6QLineF5angleERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK6QLineF6isNullEv</primary></indexterm>_ZNK6QLineF6isNullEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK6QLineF6lengthEv</primary></indexterm>_ZNK6QLineF6lengthEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK6QLineF9intersectERKS_P7QPointF</primary></indexterm>_ZNK6QLineF9intersectERKS_P7QPointF <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK6QPoint15manhattanLengthEv</primary></indexterm>_ZNK6QPoint15manhattanLengthEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK6QRectF10intersectsERKS_</primary></indexterm>_ZNK6QRectF10intersectsERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK6QRectF10normalizedEv</primary></indexterm>_ZNK6QRectF10normalizedEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK6QRectF8containsERK7QPointF</primary></indexterm>_ZNK6QRectF8containsERK7QPointF <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK6QRectF8containsERKS_</primary></indexterm>_ZNK6QRectF8containsERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK6QRectFanERKS_</primary></indexterm>_ZNK6QRectFanERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK6QRectForERKS_</primary></indexterm>_ZNK6QRectForERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK6QTimer10metaObjectEv</primary></indexterm>_ZNK6QTimer10metaObjectEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK7QBuffer10metaObjectEv</primary></indexterm>_ZNK7QBuffer10metaObjectEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK7QBuffer11canReadLineEv</primary></indexterm>_ZNK7QBuffer11canReadLineEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK7QBuffer3posEv</primary></indexterm>_ZNK7QBuffer3posEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK7QBuffer4dataEv</primary></indexterm>_ZNK7QBuffer4dataEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK7QBuffer4sizeEv</primary></indexterm>_ZNK7QBuffer4sizeEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK7QBuffer5atEndEv</primary></indexterm>_ZNK7QBuffer5atEndEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK7QBuffer6bufferEv</primary></indexterm>_ZNK7QBuffer6bufferEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK7QLocale10dateFormatENS_10FormatTypeE</primary></indexterm>_ZNK7QLocale10dateFormatENS_10FormatTypeE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK7QLocale10timeFormatENS_10FormatTypeE</primary></indexterm>_ZNK7QLocale10timeFormatENS_10FormatTypeE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK7QLocale10toLongLongERK7QStringPbi</primary></indexterm>_ZNK7QLocale10toLongLongERK7QStringPbi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK7QLocale11exponentialEv</primary></indexterm>_ZNK7QLocale11exponentialEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK7QLocale11toULongLongERK7QStringPbi</primary></indexterm>_ZNK7QLocale11toULongLongERK7QStringPbi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK7QLocale12decimalPointEv</primary></indexterm>_ZNK7QLocale12decimalPointEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK7QLocale12negativeSignEv</primary></indexterm>_ZNK7QLocale12negativeSignEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK7QLocale14groupSeparatorEv</primary></indexterm>_ZNK7QLocale14groupSeparatorEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK7QLocale4nameEv</primary></indexterm>_ZNK7QLocale4nameEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK7QLocale5toIntERK7QStringPbi</primary></indexterm>_ZNK7QLocale5toIntERK7QStringPbi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK7QLocale6toUIntERK7QStringPbi</primary></indexterm>_ZNK7QLocale6toUIntERK7QStringPbi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK7QLocale7countryEv</primary></indexterm>_ZNK7QLocale7countryEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK7QLocale7percentEv</primary></indexterm>_ZNK7QLocale7percentEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK7QLocale7toFloatERK7QStringPb</primary></indexterm>_ZNK7QLocale7toFloatERK7QStringPb <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK7QLocale7toShortERK7QStringPbi</primary></indexterm>_ZNK7QLocale7toShortERK7QStringPbi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK7QLocale8languageEv</primary></indexterm>_ZNK7QLocale8languageEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK7QLocale8toDoubleERK7QStringPb</primary></indexterm>_ZNK7QLocale8toDoubleERK7QStringPb <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK7QLocale8toStringERK5QDateNS_10FormatTypeE</primary></indexterm>_ZNK7QLocale8toStringERK5QDateNS_10FormatTypeE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK7QLocale8toStringERK5QDateRK7QString</primary></indexterm>_ZNK7QLocale8toStringERK5QDateRK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK7QLocale8toStringERK5QTimeNS_10FormatTypeE</primary></indexterm>_ZNK7QLocale8toStringERK5QTimeNS_10FormatTypeE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK7QLocale8toStringERK5QTimeRK7QString</primary></indexterm>_ZNK7QLocale8toStringERK5QTimeRK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK7QLocale8toStringEdci</primary></indexterm>_ZNK7QLocale8toStringEdci <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK7QLocale8toStringEx</primary></indexterm>_ZNK7QLocale8toStringEx <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK7QLocale8toStringEy</primary></indexterm>_ZNK7QLocale8toStringEy <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK7QLocale8toUShortERK7QStringPbi</primary></indexterm>_ZNK7QLocale8toUShortERK7QStringPbi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK7QLocale9zeroDigitEv</primary></indexterm>_ZNK7QLocale9zeroDigitEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK7QObject10metaObjectEv</primary></indexterm>_ZNK7QObject10metaObjectEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK7QObject10objectNameEv</primary></indexterm>_ZNK7QObject10objectNameEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK7QObject5childEPKcS1_b</primary></indexterm>_ZNK7QObject5childEPKcS1_b <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK7QObject6senderEv</primary></indexterm>_ZNK7QObject6senderEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK7QObject6threadEv</primary></indexterm>_ZNK7QObject6threadEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK7QObject8propertyEPKc</primary></indexterm>_ZNK7QObject8propertyEPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK7QObject8userDataEj</primary></indexterm>_ZNK7QObject8userDataEj <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK7QObject9queryListEPKcS1_bb</primary></indexterm>_ZNK7QObject9queryListEPKcS1_bb <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK7QObject9receiversEPKc</primary></indexterm>_ZNK7QObject9receiversEPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK7QRegExp10exactMatchERK7QString</primary></indexterm>_ZNK7QRegExp10exactMatchERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK7QRegExp11lastIndexInERK7QStringiNS_9CaretModeE</primary></indexterm>_ZNK7QRegExp11lastIndexInERK7QStringiNS_9CaretModeE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK7QRegExp11numCapturesEv</primary></indexterm>_ZNK7QRegExp11numCapturesEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK7QRegExp13matchedLengthEv</primary></indexterm>_ZNK7QRegExp13matchedLengthEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK7QRegExp13patternSyntaxEv</primary></indexterm>_ZNK7QRegExp13patternSyntaxEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK7QRegExp15caseSensitivityEv</primary></indexterm>_ZNK7QRegExp15caseSensitivityEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK7QRegExp7indexInERK7QStringiNS_9CaretModeE</primary></indexterm>_ZNK7QRegExp7indexInERK7QStringiNS_9CaretModeE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK7QRegExp7isEmptyEv</primary></indexterm>_ZNK7QRegExp7isEmptyEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK7QRegExp7isValidEv</primary></indexterm>_ZNK7QRegExp7isValidEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK7QRegExp7patternEv</primary></indexterm>_ZNK7QRegExp7patternEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK7QRegExp9isMinimalEv</primary></indexterm>_ZNK7QRegExp9isMinimalEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK7QRegExpeqERKS_</primary></indexterm>_ZNK7QRegExpeqERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK7QString10normalizedENS_17NormalizationFormE</primary></indexterm>_ZNK7QString10normalizedENS_17NormalizationFormE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK7QString10normalizedENS_17NormalizationFormEN5QChar14UnicodeVersionE</primary></indexterm>_ZNK7QString10normalizedENS_17NormalizationFormEN5QChar14UnicodeVersionE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK7QString10simplifiedEv</primary></indexterm>_ZNK7QString10simplifiedEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK7QString10startsWithERK13QLatin1StringN2Qt15CaseSensitivityE</primary></indexterm>_ZNK7QString10startsWithERK13QLatin1StringN2Qt15CaseSensitivityE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK7QString10startsWithERK5QCharN2Qt15CaseSensitivityE</primary></indexterm>_ZNK7QString10startsWithERK5QCharN2Qt15CaseSensitivityE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK7QString10startsWithERKS_N2Qt15CaseSensitivityE</primary></indexterm>_ZNK7QString10startsWithERKS_N2Qt15CaseSensitivityE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK7QString10toLongLongEPbi</primary></indexterm>_ZNK7QString10toLongLongEPbi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK7QString11lastIndexOfE5QChariN2Qt15CaseSensitivityE</primary></indexterm>_ZNK7QString11lastIndexOfE5QChariN2Qt15CaseSensitivityE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK7QString11lastIndexOfERK7QRegExpi</primary></indexterm>_ZNK7QString11lastIndexOfERK7QRegExpi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK7QString11lastIndexOfERKS_iN2Qt15CaseSensitivityE</primary></indexterm>_ZNK7QString11lastIndexOfERKS_iN2Qt15CaseSensitivityE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK7QString11toLocal8BitEv</primary></indexterm>_ZNK7QString11toLocal8BitEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK7QString11toULongLongEPbi</primary></indexterm>_ZNK7QString11toULongLongEPbi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK7QString12ascii_helperEv</primary></indexterm>_ZNK7QString12ascii_helperEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK7QString13latin1_helperEv</primary></indexterm>_ZNK7QString13latin1_helperEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK7QString13leftJustifiedEi5QCharb</primary></indexterm>_ZNK7QString13leftJustifiedEi5QCharb <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK7QString14rightJustifiedEi5QCharb</primary></indexterm>_ZNK7QString14rightJustifiedEi5QCharb <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK7QString18localeAwareCompareERKS_</primary></indexterm>_ZNK7QString18localeAwareCompareERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK7QString3argE5QChariRKS0_</primary></indexterm>_ZNK7QString3argE5QChariRKS0_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK7QString3argERKS_iRK5QChar</primary></indexterm>_ZNK7QString3argERKS_iRK5QChar <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK7QString3argEciRK5QChar</primary></indexterm>_ZNK7QString3argEciRK5QChar <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK7QString3argEdiciRK5QChar</primary></indexterm>_ZNK7QString3argEdiciRK5QChar <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK7QString3argExiiRK5QChar</primary></indexterm>_ZNK7QString3argExiiRK5QChar <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK7QString3argEyiiRK5QChar</primary></indexterm>_ZNK7QString3argEyiiRK5QChar <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK7QString3midEii</primary></indexterm>_ZNK7QString3midEii <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK7QString4leftEi</primary></indexterm>_ZNK7QString4leftEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK7QString5countE5QCharN2Qt15CaseSensitivityE</primary></indexterm>_ZNK7QString5countE5QCharN2Qt15CaseSensitivityE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK7QString5countERK7QRegExp</primary></indexterm>_ZNK7QString5countERK7QRegExp <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK7QString5countERKS_N2Qt15CaseSensitivityE</primary></indexterm>_ZNK7QString5countERKS_N2Qt15CaseSensitivityE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK7QString5rightEi</primary></indexterm>_ZNK7QString5rightEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK7QString5splitERK5QCharNS_13SplitBehaviorEN2Qt15CaseSensitivityE</primary></indexterm>_ZNK7QString5splitERK5QCharNS_13SplitBehaviorEN2Qt15CaseSensitivityE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK7QString5splitERK7QRegExpNS_13SplitBehaviorE</primary></indexterm>_ZNK7QString5splitERK7QRegExpNS_13SplitBehaviorE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK7QString5splitERKS_NS_13SplitBehaviorEN2Qt15CaseSensitivityE</primary></indexterm>_ZNK7QString5splitERKS_NS_13SplitBehaviorEN2Qt15CaseSensitivityE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK7QString5toIntEPbi</primary></indexterm>_ZNK7QString5toIntEPbi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK7QString5utf16Ev</primary></indexterm>_ZNK7QString5utf16Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK7QString6toLongEPbi</primary></indexterm>_ZNK7QString6toLongEPbi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK7QString6toUIntEPbi</primary></indexterm>_ZNK7QString6toUIntEPbi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK7QString6toUtf8Ev</primary></indexterm>_ZNK7QString6toUtf8Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK7QString7compareERKS_</primary></indexterm>_ZNK7QString7compareERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK7QString7indexOfE5QChariN2Qt15CaseSensitivityE</primary></indexterm>_ZNK7QString7indexOfE5QChariN2Qt15CaseSensitivityE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK7QString7indexOfERK7QRegExpi</primary></indexterm>_ZNK7QString7indexOfERK7QRegExpi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK7QString7indexOfERKS_iN2Qt15CaseSensitivityE</primary></indexterm>_ZNK7QString7indexOfERKS_iN2Qt15CaseSensitivityE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK7QString7sectionERK7QRegExpii6QFlagsINS_11SectionFlagEE</primary></indexterm>_ZNK7QString7sectionERK7QRegExpii6QFlagsINS_11SectionFlagEE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK7QString7sectionERKS_ii6QFlagsINS_11SectionFlagEE</primary></indexterm>_ZNK7QString7sectionERKS_ii6QFlagsINS_11SectionFlagEE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK7QString7toAsciiEv</primary></indexterm>_ZNK7QString7toAsciiEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK7QString7toFloatEPb</primary></indexterm>_ZNK7QString7toFloatEPb <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK7QString7toLowerEv</primary></indexterm>_ZNK7QString7toLowerEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK7QString7toShortEPbi</primary></indexterm>_ZNK7QString7toShortEPbi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK7QString7toULongEPbi</primary></indexterm>_ZNK7QString7toULongEPbi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK7QString7toUpperEv</primary></indexterm>_ZNK7QString7toUpperEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK7QString7trimmedEv</primary></indexterm>_ZNK7QString7trimmedEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK7QString8endsWithERK13QLatin1StringN2Qt15CaseSensitivityE</primary></indexterm>_ZNK7QString8endsWithERK13QLatin1StringN2Qt15CaseSensitivityE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK7QString8endsWithERK5QCharN2Qt15CaseSensitivityE</primary></indexterm>_ZNK7QString8endsWithERK5QCharN2Qt15CaseSensitivityE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK7QString8endsWithERKS_N2Qt15CaseSensitivityE</primary></indexterm>_ZNK7QString8endsWithERKS_N2Qt15CaseSensitivityE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK7QString8toDoubleEPb</primary></indexterm>_ZNK7QString8toDoubleEPb <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK7QString8toLatin1Ev</primary></indexterm>_ZNK7QString8toLatin1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK7QString8toUShortEPbi</primary></indexterm>_ZNK7QString8toUShortEPbi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK7QStringeqERK13QLatin1String</primary></indexterm>_ZNK7QStringeqERK13QLatin1String <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK7QStringeqERKS_</primary></indexterm>_ZNK7QStringeqERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK7QStringgtERK13QLatin1String</primary></indexterm>_ZNK7QStringgtERK13QLatin1String <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK7QStringltERK13QLatin1String</primary></indexterm>_ZNK7QStringltERK13QLatin1String <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK7QStringltERKS_</primary></indexterm>_ZNK7QStringltERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK7QThread10isFinishedEv</primary></indexterm>_ZNK7QThread10isFinishedEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK7QThread10metaObjectEv</primary></indexterm>_ZNK7QThread10metaObjectEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK7QThread8priorityEv</primary></indexterm>_ZNK7QThread8priorityEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK7QThread9isRunningEv</primary></indexterm>_ZNK7QThread9isRunningEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK7QThread9stackSizeEv</primary></indexterm>_ZNK7QThread9stackSizeEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK8QLibrary10metaObjectEv</primary></indexterm>_ZNK8QLibrary10metaObjectEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK8QLibrary8fileNameEv</primary></indexterm>_ZNK8QLibrary8fileNameEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK8QLibrary8isLoadedEv</primary></indexterm>_ZNK8QLibrary8isLoadedEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK8QProcess10exitStatusEv</primary></indexterm>_ZNK8QProcess10exitStatusEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK8QProcess10metaObjectEv</primary></indexterm>_ZNK8QProcess10metaObjectEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK8QProcess11canReadLineEv</primary></indexterm>_ZNK8QProcess11canReadLineEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK8QProcess11environmentEv</primary></indexterm>_ZNK8QProcess11environmentEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK8QProcess11readChannelEv</primary></indexterm>_ZNK8QProcess11readChannelEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK8QProcess12bytesToWriteEv</primary></indexterm>_ZNK8QProcess12bytesToWriteEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK8QProcess12isSequentialEv</primary></indexterm>_ZNK8QProcess12isSequentialEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK8QProcess14bytesAvailableEv</primary></indexterm>_ZNK8QProcess14bytesAvailableEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK8QProcess15readChannelModeEv</primary></indexterm>_ZNK8QProcess15readChannelModeEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK8QProcess16workingDirectoryEv</primary></indexterm>_ZNK8QProcess16workingDirectoryEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK8QProcess3pidEv</primary></indexterm>_ZNK8QProcess3pidEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK8QProcess5atEndEv</primary></indexterm>_ZNK8QProcess5atEndEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK8QProcess5errorEv</primary></indexterm>_ZNK8QProcess5errorEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK8QProcess5stateEv</primary></indexterm>_ZNK8QProcess5stateEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK8QProcess8exitCodeEv</primary></indexterm>_ZNK8QProcess8exitCodeEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK8QVariant10canConvertENS_4TypeE</primary></indexterm>_ZNK8QVariant10canConvertENS_4TypeE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK8QVariant10toBitArrayEv</primary></indexterm>_ZNK8QVariant10toBitArrayEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK8QVariant10toDateTimeEv</primary></indexterm>_ZNK8QVariant10toDateTimeEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK8QVariant10toLongLongEPb</primary></indexterm>_ZNK8QVariant10toLongLongEPb <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK8QVariant11toByteArrayEv</primary></indexterm>_ZNK8QVariant11toByteArrayEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK8QVariant11toULongLongEPb</primary></indexterm>_ZNK8QVariant11toULongLongEPb <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK8QVariant12toStringListEv</primary></indexterm>_ZNK8QVariant12toStringListEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK8QVariant3cmpERKS_</primary></indexterm>_ZNK8QVariant3cmpERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK8QVariant4saveER11QDataStream</primary></indexterm>_ZNK8QVariant4saveER11QDataStream <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK8QVariant4typeEv</primary></indexterm>_ZNK8QVariant4typeEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK8QVariant5toIntEPb</primary></indexterm>_ZNK8QVariant5toIntEPb <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK8QVariant5toMapEv</primary></indexterm>_ZNK8QVariant5toMapEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK8QVariant5toUrlEv</primary></indexterm>_ZNK8QVariant5toUrlEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK8QVariant6isNullEv</primary></indexterm>_ZNK8QVariant6isNullEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK8QVariant6toBoolEv</primary></indexterm>_ZNK8QVariant6toBoolEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK8QVariant6toCharEv</primary></indexterm>_ZNK8QVariant6toCharEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK8QVariant6toDateEv</primary></indexterm>_ZNK8QVariant6toDateEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK8QVariant6toLineEv</primary></indexterm>_ZNK8QVariant6toLineEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK8QVariant6toListEv</primary></indexterm>_ZNK8QVariant6toListEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK8QVariant6toRectEv</primary></indexterm>_ZNK8QVariant6toRectEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK8QVariant6toSizeEv</primary></indexterm>_ZNK8QVariant6toSizeEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK8QVariant6toTimeEv</primary></indexterm>_ZNK8QVariant6toTimeEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK8QVariant6toUIntEPb</primary></indexterm>_ZNK8QVariant6toUIntEPb <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK8QVariant7toLineFEv</primary></indexterm>_ZNK8QVariant7toLineFEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK8QVariant7toPointEv</primary></indexterm>_ZNK8QVariant7toPointEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK8QVariant7toRectFEv</primary></indexterm>_ZNK8QVariant7toRectFEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK8QVariant7toSizeFEv</primary></indexterm>_ZNK8QVariant7toSizeFEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK8QVariant8toDoubleEPb</primary></indexterm>_ZNK8QVariant8toDoubleEPb <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK8QVariant8toLocaleEv</primary></indexterm>_ZNK8QVariant8toLocaleEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK8QVariant8toPointFEv</primary></indexterm>_ZNK8QVariant8toPointFEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK8QVariant8toRegExpEv</primary></indexterm>_ZNK8QVariant8toRegExpEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK8QVariant8toStringEv</primary></indexterm>_ZNK8QVariant8toStringEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK8QVariant8typeNameEv</primary></indexterm>_ZNK8QVariant8typeNameEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK8QVariant8userTypeEv</primary></indexterm>_ZNK8QVariant8userTypeEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK8QVariant9constDataEv</primary></indexterm>_ZNK8QVariant9constDataEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK9QBitArray5countEb</primary></indexterm>_ZNK9QBitArray5countEb <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK9QBitArraycoEv</primary></indexterm>_ZNK9QBitArraycoEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK9QDateTime10toTimeSpecEN2Qt8TimeSpecE</primary></indexterm>_ZNK9QDateTime10toTimeSpecEN2Qt8TimeSpecE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK9QDateTime4dateEv</primary></indexterm>_ZNK9QDateTime4dateEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK9QDateTime4timeEv</primary></indexterm>_ZNK9QDateTime4timeEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK9QDateTime6daysToERKS_</primary></indexterm>_ZNK9QDateTime6daysToERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK9QDateTime6isNullEv</primary></indexterm>_ZNK9QDateTime6isNullEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK9QDateTime6secsToERKS_</primary></indexterm>_ZNK9QDateTime6secsToERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK9QDateTime7addDaysEi</primary></indexterm>_ZNK9QDateTime7addDaysEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK9QDateTime7addSecsEi</primary></indexterm>_ZNK9QDateTime7addSecsEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK9QDateTime7isValidEv</primary></indexterm>_ZNK9QDateTime7isValidEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK9QDateTime8addMSecsEx</primary></indexterm>_ZNK9QDateTime8addMSecsEx <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK9QDateTime8addYearsEi</primary></indexterm>_ZNK9QDateTime8addYearsEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK9QDateTime8timeSpecEv</primary></indexterm>_ZNK9QDateTime8timeSpecEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK9QDateTime8toStringEN2Qt10DateFormatE</primary></indexterm>_ZNK9QDateTime8toStringEN2Qt10DateFormatE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK9QDateTime8toStringERK7QString</primary></indexterm>_ZNK9QDateTime8toStringERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK9QDateTime8toTime_tEv</primary></indexterm>_ZNK9QDateTime8toTime_tEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK9QDateTime9addMonthsEi</primary></indexterm>_ZNK9QDateTime9addMonthsEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK9QDateTimeeqERKS_</primary></indexterm>_ZNK9QDateTimeeqERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK9QDateTimeltERKS_</primary></indexterm>_ZNK9QDateTimeltERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK9QFileInfo10isReadableEv</primary></indexterm>_ZNK9QFileInfo10isReadableEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK9QFileInfo10isRelativeEv</primary></indexterm>_ZNK9QFileInfo10isRelativeEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK9QFileInfo10isWritableEv</primary></indexterm>_ZNK9QFileInfo10isWritableEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK9QFileInfo10permissionE6QFlagsIN5QFile10PermissionEE</primary></indexterm>_ZNK9QFileInfo10permissionE6QFlagsIN5QFile10PermissionEE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK9QFileInfo11absoluteDirEv</primary></indexterm>_ZNK9QFileInfo11absoluteDirEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK9QFileInfo11permissionsEv</primary></indexterm>_ZNK9QFileInfo11permissionsEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK9QFileInfo12absolutePathEv</primary></indexterm>_ZNK9QFileInfo12absolutePathEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK9QFileInfo12isExecutableEv</primary></indexterm>_ZNK9QFileInfo12isExecutableEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK9QFileInfo12lastModifiedEv</primary></indexterm>_ZNK9QFileInfo12lastModifiedEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK9QFileInfo13canonicalPathEv</primary></indexterm>_ZNK9QFileInfo13canonicalPathEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK9QFileInfo14completeSuffixEv</primary></indexterm>_ZNK9QFileInfo14completeSuffixEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK9QFileInfo16absoluteFilePathEv</primary></indexterm>_ZNK9QFileInfo16absoluteFilePathEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK9QFileInfo16completeBaseNameEv</primary></indexterm>_ZNK9QFileInfo16completeBaseNameEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK9QFileInfo17canonicalFilePathEv</primary></indexterm>_ZNK9QFileInfo17canonicalFilePathEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK9QFileInfo3dirEb</primary></indexterm>_ZNK9QFileInfo3dirEb <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK9QFileInfo3dirEv</primary></indexterm>_ZNK9QFileInfo3dirEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK9QFileInfo4pathEv</primary></indexterm>_ZNK9QFileInfo4pathEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK9QFileInfo4sizeEv</primary></indexterm>_ZNK9QFileInfo4sizeEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK9QFileInfo5groupEv</primary></indexterm>_ZNK9QFileInfo5groupEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK9QFileInfo5isDirEv</primary></indexterm>_ZNK9QFileInfo5isDirEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK9QFileInfo5ownerEv</primary></indexterm>_ZNK9QFileInfo5ownerEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK9QFileInfo6existsEv</primary></indexterm>_ZNK9QFileInfo6existsEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK9QFileInfo6isFileEv</primary></indexterm>_ZNK9QFileInfo6isFileEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK9QFileInfo6isRootEv</primary></indexterm>_ZNK9QFileInfo6isRootEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK9QFileInfo6suffixEv</primary></indexterm>_ZNK9QFileInfo6suffixEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK9QFileInfo7cachingEv</primary></indexterm>_ZNK9QFileInfo7cachingEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK9QFileInfo7createdEv</primary></indexterm>_ZNK9QFileInfo7createdEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK9QFileInfo7groupIdEv</primary></indexterm>_ZNK9QFileInfo7groupIdEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK9QFileInfo7ownerIdEv</primary></indexterm>_ZNK9QFileInfo7ownerIdEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK9QFileInfo8baseNameEv</primary></indexterm>_ZNK9QFileInfo8baseNameEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK9QFileInfo8fileNameEv</primary></indexterm>_ZNK9QFileInfo8fileNameEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK9QFileInfo8filePathEv</primary></indexterm>_ZNK9QFileInfo8filePathEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK9QFileInfo8isHiddenEv</primary></indexterm>_ZNK9QFileInfo8isHiddenEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK9QFileInfo8lastReadEv</primary></indexterm>_ZNK9QFileInfo8lastReadEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK9QFileInfo8readLinkEv</primary></indexterm>_ZNK9QFileInfo8readLinkEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK9QFileInfo9isSymLinkEv</primary></indexterm>_ZNK9QFileInfo9isSymLinkEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK9QFileInfoeqERKS_</primary></indexterm>_ZNK9QFileInfoeqERKS_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK9QIODevice10isReadableEv</primary></indexterm>_ZNK9QIODevice10isReadableEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK9QIODevice10isWritableEv</primary></indexterm>_ZNK9QIODevice10isWritableEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK9QIODevice10metaObjectEv</primary></indexterm>_ZNK9QIODevice10metaObjectEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK9QIODevice11canReadLineEv</primary></indexterm>_ZNK9QIODevice11canReadLineEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK9QIODevice11errorStringEv</primary></indexterm>_ZNK9QIODevice11errorStringEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK9QIODevice12bytesToWriteEv</primary></indexterm>_ZNK9QIODevice12bytesToWriteEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK9QIODevice12isSequentialEv</primary></indexterm>_ZNK9QIODevice12isSequentialEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK9QIODevice14bytesAvailableEv</primary></indexterm>_ZNK9QIODevice14bytesAvailableEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK9QIODevice17isTextModeEnabledEv</primary></indexterm>_ZNK9QIODevice17isTextModeEnabledEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK9QIODevice3posEv</primary></indexterm>_ZNK9QIODevice3posEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK9QIODevice4sizeEv</primary></indexterm>_ZNK9QIODevice4sizeEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK9QIODevice5atEndEv</primary></indexterm>_ZNK9QIODevice5atEndEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK9QIODevice6isOpenEv</primary></indexterm>_ZNK9QIODevice6isOpenEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK9QIODevice6statusEv</primary></indexterm>_ZNK9QIODevice6statusEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK9QIODevice8openModeEv</primary></indexterm>_ZNK9QIODevice8openModeEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK9QMetaEnum10keyToValueEPKc</primary></indexterm>_ZNK9QMetaEnum10keyToValueEPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK9QMetaEnum10valueToKeyEi</primary></indexterm>_ZNK9QMetaEnum10valueToKeyEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK9QMetaEnum11keysToValueEPKc</primary></indexterm>_ZNK9QMetaEnum11keysToValueEPKc <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK9QMetaEnum11valueToKeysEi</primary></indexterm>_ZNK9QMetaEnum11valueToKeysEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK9QMetaEnum3keyEi</primary></indexterm>_ZNK9QMetaEnum3keyEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK9QMetaEnum4nameEv</primary></indexterm>_ZNK9QMetaEnum4nameEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK9QMetaEnum5scopeEv</primary></indexterm>_ZNK9QMetaEnum5scopeEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK9QMetaEnum5valueEi</primary></indexterm>_ZNK9QMetaEnum5valueEi <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK9QMetaEnum6isFlagEv</primary></indexterm>_ZNK9QMetaEnum6isFlagEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK9QMetaEnum8keyCountEv</primary></indexterm>_ZNK9QMetaEnum8keyCountEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK9QMimeData10metaObjectEv</primary></indexterm>_ZNK9QMimeData10metaObjectEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK9QMimeData12retrieveDataERK7QStringN8QVariant4TypeE</primary></indexterm>_ZNK9QMimeData12retrieveDataERK7QStringN8QVariant4TypeE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK9QMimeData4dataERK7QString</primary></indexterm>_ZNK9QMimeData4dataERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK9QMimeData4htmlEv</primary></indexterm>_ZNK9QMimeData4htmlEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK9QMimeData4textEv</primary></indexterm>_ZNK9QMimeData4textEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK9QMimeData4urlsEv</primary></indexterm>_ZNK9QMimeData4urlsEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK9QMimeData7formatsEv</primary></indexterm>_ZNK9QMimeData7formatsEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK9QMimeData7hasHtmlEv</primary></indexterm>_ZNK9QMimeData7hasHtmlEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK9QMimeData7hasTextEv</primary></indexterm>_ZNK9QMimeData7hasTextEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK9QMimeData7hasUrlsEv</primary></indexterm>_ZNK9QMimeData7hasUrlsEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK9QMimeData8hasColorEv</primary></indexterm>_ZNK9QMimeData8hasColorEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK9QMimeData8hasImageEv</primary></indexterm>_ZNK9QMimeData8hasImageEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK9QMimeData9colorDataEv</primary></indexterm>_ZNK9QMimeData9colorDataEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK9QMimeData9hasFormatERK7QString</primary></indexterm>_ZNK9QMimeData9hasFormatERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK9QMimeData9imageDataEv</primary></indexterm>_ZNK9QMimeData9imageDataEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK9QSettings10isWritableEv</primary></indexterm>_ZNK9QSettings10isWritableEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK9QSettings10metaObjectEv</primary></indexterm>_ZNK9QSettings10metaObjectEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK9QSettings11childGroupsEv</primary></indexterm>_ZNK9QSettings11childGroupsEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK9QSettings16fallbacksEnabledEv</primary></indexterm>_ZNK9QSettings16fallbacksEnabledEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK9QSettings5groupEv</primary></indexterm>_ZNK9QSettings5groupEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK9QSettings5valueERK7QStringRK8QVariant</primary></indexterm>_ZNK9QSettings5valueERK7QStringRK8QVariant <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK9QSettings6statusEv</primary></indexterm>_ZNK9QSettings6statusEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK9QSettings7allKeysEv</primary></indexterm>_ZNK9QSettings7allKeysEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK9QSettings8containsERK7QString</primary></indexterm>_ZNK9QSettings8containsERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK9QSettings8fileNameEv</primary></indexterm>_ZNK9QSettings8fileNameEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK9QSettings9childKeysEv</primary></indexterm>_ZNK9QSettings9childKeysEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZanRK9QBitArrayS1_</primary></indexterm>_ZanRK9QBitArrayS1_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZeoRK9QBitArrayS1_</primary></indexterm>_ZeoRK9QBitArrayS1_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_Zls6QDebug6QFlagsIN9QIODevice12OpenModeFlagEE</primary></indexterm>_Zls6QDebug6QFlagsIN9QIODevice12OpenModeFlagEE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_Zls6QDebugN8QVariant4TypeE</primary></indexterm>_Zls6QDebugN8QVariant4TypeE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_Zls6QDebugPK7QObject</primary></indexterm>_Zls6QDebugPK7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_Zls6QDebugRK11QModelIndex</primary></indexterm>_Zls6QDebugRK11QModelIndex <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_Zls6QDebugRK21QPersistentModelIndex</primary></indexterm>_Zls6QDebugRK21QPersistentModelIndex <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_Zls6QDebugRK4QUrl</primary></indexterm>_Zls6QDebugRK4QUrl <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_Zls6QDebugRK5QDate</primary></indexterm>_Zls6QDebugRK5QDate <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_Zls6QDebugRK5QLine</primary></indexterm>_Zls6QDebugRK5QLine <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_Zls6QDebugRK5QRect</primary></indexterm>_Zls6QDebugRK5QRect <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_Zls6QDebugRK5QSize</primary></indexterm>_Zls6QDebugRK5QSize <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_Zls6QDebugRK5QTime</primary></indexterm>_Zls6QDebugRK5QTime <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_Zls6QDebugRK6QLineF</primary></indexterm>_Zls6QDebugRK6QLineF <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_Zls6QDebugRK6QPoint</primary></indexterm>_Zls6QDebugRK6QPoint <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_Zls6QDebugRK6QRectF</primary></indexterm>_Zls6QDebugRK6QRectF <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_Zls6QDebugRK6QSizeF</primary></indexterm>_Zls6QDebugRK6QSizeF <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_Zls6QDebugRK7QPointF</primary></indexterm>_Zls6QDebugRK7QPointF <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_Zls6QDebugRK8QVariant</primary></indexterm>_Zls6QDebugRK8QVariant <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_Zls6QDebugRK9QDateTime</primary></indexterm>_Zls6QDebugRK9QDateTime <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZlsR11QDataStreamN8QVariant4TypeE</primary></indexterm>_ZlsR11QDataStreamN8QVariant4TypeE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZlsR11QDataStreamRK10QByteArray</primary></indexterm>_ZlsR11QDataStreamRK10QByteArray <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZlsR11QDataStreamRK4QUrl</primary></indexterm>_ZlsR11QDataStreamRK4QUrl <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZlsR11QDataStreamRK5QChar</primary></indexterm>_ZlsR11QDataStreamRK5QChar <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZlsR11QDataStreamRK5QDate</primary></indexterm>_ZlsR11QDataStreamRK5QDate <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZlsR11QDataStreamRK5QLine</primary></indexterm>_ZlsR11QDataStreamRK5QLine <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZlsR11QDataStreamRK5QRect</primary></indexterm>_ZlsR11QDataStreamRK5QRect <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZlsR11QDataStreamRK5QSize</primary></indexterm>_ZlsR11QDataStreamRK5QSize <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZlsR11QDataStreamRK5QTime</primary></indexterm>_ZlsR11QDataStreamRK5QTime <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZlsR11QDataStreamRK5QUuid</primary></indexterm>_ZlsR11QDataStreamRK5QUuid <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZlsR11QDataStreamRK6QLineF</primary></indexterm>_ZlsR11QDataStreamRK6QLineF <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZlsR11QDataStreamRK6QPoint</primary></indexterm>_ZlsR11QDataStreamRK6QPoint <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZlsR11QDataStreamRK6QRectF</primary></indexterm>_ZlsR11QDataStreamRK6QRectF <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZlsR11QDataStreamRK6QSizeF</primary></indexterm>_ZlsR11QDataStreamRK6QSizeF <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZlsR11QDataStreamRK7QLocale</primary></indexterm>_ZlsR11QDataStreamRK7QLocale <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZlsR11QDataStreamRK7QPointF</primary></indexterm>_ZlsR11QDataStreamRK7QPointF <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZlsR11QDataStreamRK7QRegExp</primary></indexterm>_ZlsR11QDataStreamRK7QRegExp <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZlsR11QDataStreamRK7QString</primary></indexterm>_ZlsR11QDataStreamRK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZlsR11QDataStreamRK8QVariant</primary></indexterm>_ZlsR11QDataStreamRK8QVariant <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZlsR11QDataStreamRK9QBitArray</primary></indexterm>_ZlsR11QDataStreamRK9QBitArray <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZlsR11QDataStreamRK9QDateTime</primary></indexterm>_ZlsR11QDataStreamRK9QDateTime <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZorRK9QBitArrayS1_</primary></indexterm>_ZorRK9QBitArrayS1_ <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZrsR11QDataStreamR10QByteArray</primary></indexterm>_ZrsR11QDataStreamR10QByteArray <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZrsR11QDataStreamR4QUrl</primary></indexterm>_ZrsR11QDataStreamR4QUrl <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZrsR11QDataStreamR5QChar</primary></indexterm>_ZrsR11QDataStreamR5QChar <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZrsR11QDataStreamR5QDate</primary></indexterm>_ZrsR11QDataStreamR5QDate <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZrsR11QDataStreamR5QLine</primary></indexterm>_ZrsR11QDataStreamR5QLine <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZrsR11QDataStreamR5QRect</primary></indexterm>_ZrsR11QDataStreamR5QRect <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZrsR11QDataStreamR5QSize</primary></indexterm>_ZrsR11QDataStreamR5QSize <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZrsR11QDataStreamR5QTime</primary></indexterm>_ZrsR11QDataStreamR5QTime <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZrsR11QDataStreamR5QUuid</primary></indexterm>_ZrsR11QDataStreamR5QUuid <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZrsR11QDataStreamR6QLineF</primary></indexterm>_ZrsR11QDataStreamR6QLineF <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZrsR11QDataStreamR6QPoint</primary></indexterm>_ZrsR11QDataStreamR6QPoint <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZrsR11QDataStreamR6QRectF</primary></indexterm>_ZrsR11QDataStreamR6QRectF <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZrsR11QDataStreamR6QSizeF</primary></indexterm>_ZrsR11QDataStreamR6QSizeF <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZrsR11QDataStreamR7QLocale</primary></indexterm>_ZrsR11QDataStreamR7QLocale <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZrsR11QDataStreamR7QPointF</primary></indexterm>_ZrsR11QDataStreamR7QPointF <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZrsR11QDataStreamR7QRegExp</primary></indexterm>_ZrsR11QDataStreamR7QRegExp <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZrsR11QDataStreamR7QString</primary></indexterm>_ZrsR11QDataStreamR7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZrsR11QDataStreamR8QVariant</primary></indexterm>_ZrsR11QDataStreamR8QVariant <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZrsR11QDataStreamR9QBitArray</primary></indexterm>_ZrsR11QDataStreamR9QBitArray <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZrsR11QDataStreamR9QDateTime</primary></indexterm>_ZrsR11QDataStreamR9QDateTime <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZrsR11QDataStreamRN8QVariant4TypeE</primary></indexterm>_ZrsR11QDataStreamRN8QVariant4TypeE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for QtCore specified in <XREF linkend="tbl-libQtCore-qtc-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<TABLE id="tbl-libQtCore-qtc-data">
<TITLE>libQtCore - QtCore Data Interfaces</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY><indexterm><primary>_ZN10QByteArray11shared_nullE</primary></indexterm>_ZN10QByteArray11shared_nullE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN10QEventLoop16staticMetaObjectE</primary></indexterm>_ZN10QEventLoop16staticMetaObjectE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QTranslator16staticMetaObjectE</primary></indexterm>_ZN11QTranslator16staticMetaObjectE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QVectorData11shared_nullE</primary></indexterm>_ZN11QVectorData11shared_nullE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN13QPluginLoader16staticMetaObjectE</primary></indexterm>_ZN13QPluginLoader16staticMetaObjectE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN13QSignalMapper16staticMetaObjectE</primary></indexterm>_ZN13QSignalMapper16staticMetaObjectE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN14QTemporaryFile16staticMetaObjectE</primary></indexterm>_ZN14QTemporaryFile16staticMetaObjectE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN15QLinkedListData11shared_nullE</primary></indexterm>_ZN15QLinkedListData11shared_nullE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN15QSocketNotifier16staticMetaObjectE</primary></indexterm>_ZN15QSocketNotifier16staticMetaObjectE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN16QCoreApplication16staticMetaObjectE</primary></indexterm>_ZN16QCoreApplication16staticMetaObjectE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN16QCoreApplication4selfE</primary></indexterm>_ZN16QCoreApplication4selfE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN16QTextCodecPlugin16staticMetaObjectE</primary></indexterm>_ZN16QTextCodecPlugin16staticMetaObjectE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN18QAbstractItemModel16staticMetaObjectE</primary></indexterm>_ZN18QAbstractItemModel16staticMetaObjectE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN18QAbstractListModel16staticMetaObjectE</primary></indexterm>_ZN18QAbstractListModel16staticMetaObjectE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN19QAbstractTableModel16staticMetaObjectE</primary></indexterm>_ZN19QAbstractTableModel16staticMetaObjectE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN21QObjectCleanupHandler16staticMetaObjectE</primary></indexterm>_ZN21QObjectCleanupHandler16staticMetaObjectE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN24QAbstractEventDispatcher16staticMetaObjectE</primary></indexterm>_ZN24QAbstractEventDispatcher16staticMetaObjectE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN5QFile16staticMetaObjectE</primary></indexterm>_ZN5QFile16staticMetaObjectE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN6QTimer16staticMetaObjectE</primary></indexterm>_ZN6QTimer16staticMetaObjectE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QBuffer16staticMetaObjectE</primary></indexterm>_ZN7QBuffer16staticMetaObjectE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QObject16staticMetaObjectE</primary></indexterm>_ZN7QObject16staticMetaObjectE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QObject18staticQtMetaObjectE</primary></indexterm>_ZN7QObject18staticQtMetaObjectE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QString11shared_nullE</primary></indexterm>_ZN7QString11shared_nullE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QString16codecForCStringsE</primary></indexterm>_ZN7QString16codecForCStringsE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN7QString4nullE</primary></indexterm>_ZN7QString4nullE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN7QThread16staticMetaObjectE</primary></indexterm>_ZN7QThread16staticMetaObjectE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QLibrary16staticMetaObjectE</primary></indexterm>_ZN8QLibrary16staticMetaObjectE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QMapData11shared_nullE</primary></indexterm>_ZN8QMapData11shared_nullE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QProcess16staticMetaObjectE</primary></indexterm>_ZN8QProcess16staticMetaObjectE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QVariant7handlerE</primary></indexterm>_ZN8QVariant7handlerE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QHashData11shared_nullE</primary></indexterm>_ZN9QHashData11shared_nullE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QIODevice16staticMetaObjectE</primary></indexterm>_ZN9QIODevice16staticMetaObjectE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QListData11shared_nullE</primary></indexterm>_ZN9QListData11shared_nullE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QMimeData16staticMetaObjectE</primary></indexterm>_ZN9QMimeData16staticMetaObjectE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QSettings16staticMetaObjectE</primary></indexterm>_ZN9QSettings16staticMetaObjectE <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZTI10QEventLoop</primary></indexterm>_ZTI10QEventLoop <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZTI10QTextCodec</primary></indexterm>_ZTI10QTextCodec <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZTI11QChildEvent</primary></indexterm>_ZTI11QChildEvent <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZTI11QDataStream</primary></indexterm>_ZTI11QDataStream <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZTI11QTextStream</primary></indexterm>_ZTI11QTextStream <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZTI11QTimerEvent</primary></indexterm>_ZTI11QTimerEvent <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZTI11QTranslator</primary></indexterm>_ZTI11QTranslator <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZTI11QTsciiCodec</primary></indexterm>_ZTI11QTsciiCodec <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZTI12QCustomEvent</primary></indexterm>_ZTI12QCustomEvent <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZTI13QFSFileEngine</primary></indexterm>_ZTI13QFSFileEngine <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZTI13QFontLaoCodec</primary></indexterm>_ZTI13QFontLaoCodec <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZTI13QPluginLoader</primary></indexterm>_ZTI13QPluginLoader <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZTI13QSignalMapper</primary></indexterm>_ZTI13QSignalMapper <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZTI14QFactoryLoader</primary></indexterm>_ZTI14QFactoryLoader <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZTI14QMetaCallEvent</primary></indexterm>_ZTI14QMetaCallEvent <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZTI14QObjectPrivate</primary></indexterm>_ZTI14QObjectPrivate <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZTI14QTemporaryFile</primary></indexterm>_ZTI14QTemporaryFile <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZTI15QDateTimeParser</primary></indexterm>_ZTI15QDateTimeParser <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZTI15QObjectUserData</primary></indexterm>_ZTI15QObjectUserData <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZTI15QSocketNotifier</primary></indexterm>_ZTI15QSocketNotifier <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZTI16QCoreApplication</primary></indexterm>_ZTI16QCoreApplication <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZTI16QIODevicePrivate</primary></indexterm>_ZTI16QIODevicePrivate <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZTI16QSettingsPrivate</primary></indexterm>_ZTI16QSettingsPrivate <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZTI16QTextCodecPlugin</primary></indexterm>_ZTI16QTextCodecPlugin <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZTI18QAbstractItemModel</primary></indexterm>_ZTI18QAbstractItemModel <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZTI18QAbstractListModel</primary></indexterm>_ZTI18QAbstractListModel <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZTI19QAbstractFileEngine</primary></indexterm>_ZTI19QAbstractFileEngine <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZTI19QAbstractTableModel</primary></indexterm>_ZTI19QAbstractTableModel <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZTI20QEventDispatcherUNIX</primary></indexterm>_ZTI20QEventDispatcherUNIX <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZTI21QObjectCleanupHandler</primary></indexterm>_ZTI21QObjectCleanupHandler <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZTI23QCoreApplicationPrivate</primary></indexterm>_ZTI23QCoreApplicationPrivate <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZTI24QAbstractEventDispatcher</primary></indexterm>_ZTI24QAbstractEventDispatcher <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZTI25QAbstractItemModelPrivate</primary></indexterm>_ZTI25QAbstractItemModelPrivate <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZTI26QAbstractFileEngineHandler</primary></indexterm>_ZTI26QAbstractFileEngineHandler <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZTI26QTextCodecFactoryInterface</primary></indexterm>_ZTI26QTextCodecFactoryInterface <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZTI27QEventDispatcherUNIXPrivate</primary></indexterm>_ZTI27QEventDispatcherUNIXPrivate <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZTI5QFile</primary></indexterm>_ZTI5QFile <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZTI6QEvent</primary></indexterm>_ZTI6QEvent <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZTI6QTimer</primary></indexterm>_ZTI6QTimer <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZTI7QBuffer</primary></indexterm>_ZTI7QBuffer <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZTI7QObject</primary></indexterm>_ZTI7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZTI7QThread</primary></indexterm>_ZTI7QThread <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZTI8QLibrary</primary></indexterm>_ZTI8QLibrary <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZTI8QProcess</primary></indexterm>_ZTI8QProcess <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZTI9QIODevice</primary></indexterm>_ZTI9QIODevice <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZTI9QMimeData</primary></indexterm>_ZTI9QMimeData <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZTI9QSettings</primary></indexterm>_ZTI9QSettings <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZTV10QEventLoop</primary></indexterm>_ZTV10QEventLoop <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZTV10QTextCodec</primary></indexterm>_ZTV10QTextCodec <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZTV11QChildEvent</primary></indexterm>_ZTV11QChildEvent <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZTV11QDataStream</primary></indexterm>_ZTV11QDataStream <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZTV11QTextStream</primary></indexterm>_ZTV11QTextStream <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZTV11QTimerEvent</primary></indexterm>_ZTV11QTimerEvent <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZTV11QTranslator</primary></indexterm>_ZTV11QTranslator <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZTV11QTsciiCodec</primary></indexterm>_ZTV11QTsciiCodec <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZTV12QCustomEvent</primary></indexterm>_ZTV12QCustomEvent <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZTV13QFSFileEngine</primary></indexterm>_ZTV13QFSFileEngine <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZTV13QFontLaoCodec</primary></indexterm>_ZTV13QFontLaoCodec <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZTV13QPluginLoader</primary></indexterm>_ZTV13QPluginLoader <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZTV13QSignalMapper</primary></indexterm>_ZTV13QSignalMapper <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZTV14QFactoryLoader</primary></indexterm>_ZTV14QFactoryLoader <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZTV14QMetaCallEvent</primary></indexterm>_ZTV14QMetaCallEvent <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZTV14QObjectPrivate</primary></indexterm>_ZTV14QObjectPrivate <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZTV14QTemporaryFile</primary></indexterm>_ZTV14QTemporaryFile <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZTV15QDateTimeParser</primary></indexterm>_ZTV15QDateTimeParser <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZTV15QObjectUserData</primary></indexterm>_ZTV15QObjectUserData <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZTV15QSocketNotifier</primary></indexterm>_ZTV15QSocketNotifier <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZTV16QCoreApplication</primary></indexterm>_ZTV16QCoreApplication <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZTV16QIODevicePrivate</primary></indexterm>_ZTV16QIODevicePrivate <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZTV16QSettingsPrivate</primary></indexterm>_ZTV16QSettingsPrivate <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZTV16QTextCodecPlugin</primary></indexterm>_ZTV16QTextCodecPlugin <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZTV18QAbstractItemModel</primary></indexterm>_ZTV18QAbstractItemModel <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZTV18QAbstractListModel</primary></indexterm>_ZTV18QAbstractListModel <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZTV19QAbstractFileEngine</primary></indexterm>_ZTV19QAbstractFileEngine <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZTV19QAbstractTableModel</primary></indexterm>_ZTV19QAbstractTableModel <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZTV20QEventDispatcherUNIX</primary></indexterm>_ZTV20QEventDispatcherUNIX <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZTV21QObjectCleanupHandler</primary></indexterm>_ZTV21QObjectCleanupHandler <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZTV23QCoreApplicationPrivate</primary></indexterm>_ZTV23QCoreApplicationPrivate <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZTV24QAbstractEventDispatcher</primary></indexterm>_ZTV24QAbstractEventDispatcher <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZTV25QAbstractItemModelPrivate</primary></indexterm>_ZTV25QAbstractItemModelPrivate <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZTV26QAbstractFileEngineHandler</primary></indexterm>_ZTV26QAbstractFileEngineHandler <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZTV26QTextCodecFactoryInterface</primary></indexterm>_ZTV26QTextCodecFactoryInterface <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZTV27QEventDispatcherUNIXPrivate</primary></indexterm>_ZTV27QEventDispatcherUNIXPrivate <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZTV5QFile</primary></indexterm>_ZTV5QFile <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZTV6QEvent</primary></indexterm>_ZTV6QEvent <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZTV6QTimer</primary></indexterm>_ZTV6QTimer <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZTV7QBuffer</primary></indexterm>_ZTV7QBuffer <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZTV7QObject</primary></indexterm>_ZTV7QObject <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZTV7QThread</primary></indexterm>_ZTV7QThread <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZTV8QLibrary</primary></indexterm>_ZTV8QLibrary <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZTV8QProcess</primary></indexterm>_ZTV8QProcess <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZTV9QIODevice</primary></indexterm>_ZTV9QIODevice <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZTV9QMimeData</primary></indexterm>_ZTV9QMimeData <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZTV9QSettings</primary></indexterm>_ZTV9QSettings <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZThn8_N16QTextCodecPlugin6createERK7QString</primary></indexterm>_ZThn8_N16QTextCodecPlugin6createERK7QString <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZThn8_N16QTextCodecPluginD0Ev</primary></indexterm>_ZThn8_N16QTextCodecPluginD0Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZThn8_N16QTextCodecPluginD1Ev</primary></indexterm>_ZThn8_N16QTextCodecPluginD1Ev <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZThn8_NK16QTextCodecPlugin4keysEv</primary></indexterm>_ZThn8_NK16QTextCodecPlugin4keysEv <LINK LINKEND="REFSTD.libQtCore.1">[QtCore]</LINK></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>
</SECT2>
</SECT1>
<SECT1 ID=libQtCore-ddefs>
<TITLE>Data Definitions for libQtCore</TITLE>
<PARA>
This section defines global identifiers and their values that are associated
with interfaces contained in libQtCore.
These definitions are organized into groups that
correspond to system headers. This convention is used as a
convenience for the reader, and does not imply the existence
of these headers, or their content.
Where an interface is defined as requiring a particular system header file
all of the data definitions for that system header file presented here shall be in effect.
</PARA>
<PARA>
This section gives data definitions to promote binary application
portability, not to repeat source interface definitions available
elsewhere. System providers and application developers should use this ABI
to supplement - not to replace - source interface definition specifications.
</PARA>
<PARA>
This specification uses the <XREF LINKEND='std.ISOC99'> C Language as the reference programming language, and data definitions are specified in ISO C format. The C language is used here as a convenient notation. Using a C language description of these data objects does not preclude their use by other programming languages.</PARA>
<SECT2>
<TITLE>QtCore/qabstracteventdispatcher.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QABSTRACTEVENTDISPATCHER_H
#define QABSTRACTEVENTDISPATCHER_H

#include &lt;QtCore/qobject.h>
#include &lt;QtCore/qeventloop.h>

QT_MODULE(Core)

class QAbstractEventDispatcherPrivate;
class QSocketNotifier;
template &lt;typename T1, typename T2> struct QPair;

class Q_CORE_EXPORT QAbstractEventDispatcher : public QObject
{
    Q_OBJECT
    Q_DECLARE_PRIVATE(QAbstractEventDispatcher)

public:
    typedef QPair&lt;int, int> TimerInfo;

    explicit QAbstractEventDispatcher(QObject *parent = 0);
    ~QAbstractEventDispatcher();

    static QAbstractEventDispatcher *instance(QThread *thread = 0);

    virtual bool processEvents(QEventLoop::ProcessEventsFlags flags) = 0;
    virtual bool hasPendingEvents() = 0;

    virtual void registerSocketNotifier(QSocketNotifier *notifier) = 0;
    virtual void unregisterSocketNotifier(QSocketNotifier *notifier) = 0;

    int registerTimer(int interval, QObject *object);
    virtual void registerTimer(int timerId, int interval, QObject *object) = 0;
    virtual bool unregisterTimer(int timerId) = 0;
    virtual bool unregisterTimers(QObject *object) = 0;
    virtual QList&lt;TimerInfo> registeredTimers(QObject *object) const = 0;

    virtual void wakeUp() = 0;
    virtual void interrupt() = 0;
    virtual void flush() = 0;

    virtual void startingUp();
    virtual void closingDown();

    typedef bool(*EventFilter)(void *message);
    EventFilter setEventFilter(EventFilter filter);
    bool filterEvent(void *message);

Q_SIGNALS:
    void aboutToBlock();
    void awake();

protected:
    QAbstractEventDispatcher(QAbstractEventDispatcherPrivate &amp;,
                             QObject *parent);
};

#endif // QABSTRACTEVENTDISPATCHER_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtCore/qabstractfileengine.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QABSTRACTFILEENGINE_H
#define QABSTRACTFILEENGINE_H

#include &lt;QtCore/qdir.h>

#ifdef open
#error qabstractfileengine.h must be included before any header file that defines open
#endif

QT_MODULE(Core)

class QFileExtension;
class QFileExtensionResult;
class QVariant;
class QAbstractFileEngineIterator;
class QAbstractFileEnginePrivate;

class Q_CORE_EXPORT QAbstractFileEngine
{
public:
    enum FileFlag {
        //perms (overlaps the QFile::Permission)
        ReadOwnerPerm = 0x4000, WriteOwnerPerm = 0x2000, ExeOwnerPerm = 0x1000,
        ReadUserPerm  = 0x0400, WriteUserPerm  = 0x0200, ExeUserPerm  = 0x0100,
        ReadGroupPerm = 0x0040, WriteGroupPerm = 0x0020, ExeGroupPerm = 0x0010,
        ReadOtherPerm = 0x0004, WriteOtherPerm = 0x0002, ExeOtherPerm = 0x0001,

        //types
        LinkType      = 0x10000,
        FileType      = 0x20000,
        DirectoryType = 0x40000,

        //flags
        HiddenFlag     = 0x0100000,
        LocalDiskFlag  = 0x0200000,
        ExistsFlag     = 0x0400000,
        RootFlag       = 0x0800000,

        //masks
        PermsMask  = 0x0000FFFF,
        TypesMask  = 0x000F0000,
        FlagsMask  = 0x0FF00000,
        FileInfoAll = FlagsMask | PermsMask | TypesMask
    };
    Q_DECLARE_FLAGS(FileFlags, FileFlag)

    enum FileName {
        DefaultName,
        BaseName,
        PathName,
        AbsoluteName,
        AbsolutePathName,
        LinkName,
        CanonicalName,
        CanonicalPathName
    };
    enum FileOwner {
        OwnerUser,
        OwnerGroup
    };
    enum FileTime {
        CreationTime,
        ModificationTime,
        AccessTime
    };

    virtual ~QAbstractFileEngine();

    virtual bool open(QIODevice::OpenMode openMode);
    virtual bool close();
    virtual bool flush();
    virtual qint64 size() const;
    virtual qint64 pos() const;
    virtual bool seek(qint64 pos);
    virtual bool isSequential() const;
    virtual bool remove();
    virtual bool copy(const QString &amp;newName);
    virtual bool rename(const QString &amp;newName);
    virtual bool link(const QString &amp;newName);
    virtual bool mkdir(const QString &amp;dirName, bool createParentDirectories) const;
    virtual bool rmdir(const QString &amp;dirName, bool recurseParentDirectories) const;
    virtual bool setSize(qint64 size);
    virtual bool caseSensitive() const;
    virtual bool isRelativePath() const;
    virtual QStringList entryList(QDir::Filters filters, const QStringList &amp;filterNames) const;
    virtual FileFlags fileFlags(FileFlags type=FileInfoAll) const;
    virtual bool setPermissions(uint perms);
    virtual QString fileName(FileName file=DefaultName) const;
    virtual uint ownerId(FileOwner) const;
    virtual QString owner(FileOwner) const;
    virtual QDateTime fileTime(FileTime time) const;
    virtual void setFileName(const QString &amp;file);
    virtual int handle() const;

    typedef QAbstractFileEngineIterator Iterator;
    virtual Iterator *beginEntryList(QDir::Filters filters, const QStringList &amp;filterNames);
    virtual Iterator *endEntryList();

    virtual qint64 read(char *data, qint64 maxlen);
    virtual qint64 readLine(char *data, qint64 maxlen);
    virtual qint64 write(const char *data, qint64 len);

    QFile::FileError error() const;
    QString errorString() const;

    enum Extension {
    };
    class ExtensionOption
    {};
    class ExtensionReturn
    {};
    virtual bool extension(Extension extension, const ExtensionOption *option = 0, ExtensionReturn *output = 0);
    virtual bool supportsExtension(Extension extension) const;

    // Factory
    static QAbstractFileEngine *create(const QString &amp;fileName);

protected:
    void setError(QFile::FileError error, const QString &amp;str);

    QAbstractFileEngine();
    QAbstractFileEngine(QAbstractFileEnginePrivate &amp;);

    QAbstractFileEnginePrivate *d_ptr;
private:
    Q_DECLARE_PRIVATE(QAbstractFileEngine)
};

Q_DECLARE_OPERATORS_FOR_FLAGS(QAbstractFileEngine::FileFlags)

class Q_CORE_EXPORT QAbstractFileEngineHandler
{
public:
    QAbstractFileEngineHandler();
    virtual ~QAbstractFileEngineHandler();
    virtual QAbstractFileEngine *create(const QString &amp;fileName) const = 0;
};

#endif // QABSTRACTFILEENGINE_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtCore/qabstractitemmodel.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QABSTRACTITEMMODEL_H
#define QABSTRACTITEMMODEL_H

#include &lt;QtCore/qvariant.h>
#include &lt;QtCore/qobject.h>

QT_MODULE(Core)

class QAbstractItemModel;
class QPersistentModelIndex;

class Q_CORE_EXPORT QModelIndex
{
    friend class QAbstractItemModel;
public:
    inline QModelIndex() : r(-1), c(-1), p(0), m(0) {}
    inline QModelIndex(const QModelIndex &amp;other)
        : r(other.r), c(other.c), p(other.p), m(other.m) {}
    inline ~QModelIndex() { p = 0; m = 0; }
    inline int row() const { return r; }
    inline int column() const { return c; }
    inline void *internalPointer() const { return p; }
    inline qint64 internalId() const { return reinterpret_cast&lt;qint64>(p); }
    inline QModelIndex parent() const;
    inline QModelIndex sibling(int row, int column) const;
    inline QModelIndex child(int row, int column) const;
    inline QVariant data(int role = Qt::DisplayRole) const;
    inline const QAbstractItemModel *model() const { return m; }
    inline bool isValid() const { return (r >= 0) &amp;&amp; (c >= 0) &amp;&amp; (m != 0); }
    inline bool operator==(const QModelIndex &amp;other) const
        { return (other.r == r &amp;&amp; other.c == c &amp;&amp; other.p == p &amp;&amp; other.m == m); }
    inline bool operator!=(const QModelIndex &amp;other) const
        { return !(*this == other); }
    inline bool operator&lt;(const QModelIndex &amp;other) const
        { if (r &lt; other.r) return true;
          if (r == other.r &amp;&amp; c &lt; other.c) return true;
          if (r == other.r &amp;&amp; c == other.c) return p &lt; other.p;
          return false; }
private:
    inline QModelIndex(int row, int column, void *ptr, const QAbstractItemModel *model);
    int r, c;
    void *p;
    const QAbstractItemModel *m;
};
Q_DECLARE_TYPEINFO(QModelIndex, Q_MOVABLE_TYPE);

#ifndef QT_NO_DEBUG_STREAM
Q_CORE_EXPORT QDebug operator&lt;&lt;(QDebug, const QModelIndex &amp;);
#endif

class QPersistentModelIndexData;

class Q_CORE_EXPORT QPersistentModelIndex
{
public:
    QPersistentModelIndex();
    QPersistentModelIndex(const QModelIndex &amp;index);
    QPersistentModelIndex(const QPersistentModelIndex &amp;other);
    ~QPersistentModelIndex();
    bool operator&lt;(const QPersistentModelIndex &amp;other) const;
    bool operator==(const QPersistentModelIndex &amp;other) const;
    QPersistentModelIndex &amp;operator=(const QPersistentModelIndex &amp;other);
    bool operator==(const QModelIndex &amp;other) const;
    bool operator!=(const QModelIndex &amp;other) const;
    QPersistentModelIndex &amp;operator=(const QModelIndex &amp;other);
    operator const QModelIndex&amp;() const;
    int row() const;
    int column() const;
    void *internalPointer() const;
    qint64 internalId() const;
    QModelIndex parent() const;
    QModelIndex sibling(int row, int column) const;
    QModelIndex child(int row, int column) const;
    QVariant data(int role = Qt::DisplayRole) const;
    const QAbstractItemModel *model() const;
    bool isValid() const;
private:
    QPersistentModelIndexData *d;
#ifndef QT_NO_DEBUG_STREAM
    friend Q_CORE_EXPORT QDebug operator&lt;&lt;(QDebug, const QPersistentModelIndex &amp;);
#endif
};
Q_DECLARE_TYPEINFO(QPersistentModelIndex, Q_MOVABLE_TYPE);

#ifndef QT_NO_DEBUG_STREAM
Q_CORE_EXPORT QDebug operator&lt;&lt;(QDebug, const QPersistentModelIndex &amp;);
#endif

template&lt;typename T> class QList;
typedef QList&lt;QModelIndex> QModelIndexList;

class QMimeData;
class QAbstractItemModelPrivate;
template &lt;class Key, class T> class QMap;


class Q_CORE_EXPORT QAbstractItemModel : public QObject
{
    Q_OBJECT

    friend class QPersistentModelIndexData;
public:

    explicit QAbstractItemModel(QObject *parent = 0);
    virtual ~QAbstractItemModel();

    bool hasIndex(int row, int column, const QModelIndex &amp;parent = QModelIndex()) const;
    virtual QModelIndex index(int row, int column,
                              const QModelIndex &amp;parent = QModelIndex()) const = 0;
    virtual QModelIndex parent(const QModelIndex &amp;child) const = 0;

    inline QModelIndex sibling(int row, int column, const QModelIndex &amp;idx) const
        { return index(row, column, parent(idx)); }

    virtual int rowCount(const QModelIndex &amp;parent = QModelIndex()) const = 0;
    virtual int columnCount(const QModelIndex &amp;parent = QModelIndex()) const = 0;
    virtual bool hasChildren(const QModelIndex &amp;parent = QModelIndex()) const;

    virtual QVariant data(const QModelIndex &amp;index, int role = Qt::DisplayRole) const = 0;
    virtual bool setData(const QModelIndex &amp;index, const QVariant &amp;value, int role = Qt::EditRole);

    virtual QVariant headerData(int section, Qt::Orientation orientation,
                                int role = Qt::DisplayRole) const;
    virtual bool setHeaderData(int section, Qt::Orientation orientation, const QVariant &amp;value,
                               int role = Qt::EditRole);

    virtual QMap&lt;int, QVariant> itemData(const QModelIndex &amp;index) const;
    virtual bool setItemData(const QModelIndex &amp;index, const QMap&lt;int, QVariant> &amp;roles);

    virtual QStringList mimeTypes() const;
    virtual QMimeData *mimeData(const QModelIndexList &amp;indexes) const;
    virtual bool dropMimeData(const QMimeData *data, Qt::DropAction action,
                              int row, int column, const QModelIndex &amp;parent);
    virtual Qt::DropActions supportedDropActions() const;

    virtual bool insertRows(int row, int count, const QModelIndex &amp;parent = QModelIndex());
    virtual bool insertColumns(int column, int count, const QModelIndex &amp;parent = QModelIndex());
    virtual bool removeRows(int row, int count, const QModelIndex &amp;parent = QModelIndex());
    virtual bool removeColumns(int column, int count, const QModelIndex &amp;parent = QModelIndex());

    inline bool insertRow(int row, const QModelIndex &amp;parent = QModelIndex());
    inline bool insertColumn(int column, const QModelIndex &amp;parent = QModelIndex());
    inline bool removeRow(int row, const QModelIndex &amp;parent = QModelIndex());
    inline bool removeColumn(int column, const QModelIndex &amp;parent = QModelIndex());

    virtual void fetchMore(const QModelIndex &amp;parent);
    virtual bool canFetchMore(const QModelIndex &amp;parent) const;
    virtual Qt::ItemFlags flags(const QModelIndex &amp;index) const;
    virtual void sort(int column, Qt::SortOrder order = Qt::AscendingOrder);
    virtual QModelIndex buddy(const QModelIndex &amp;index) const;
    virtual QModelIndexList match(const QModelIndex &amp;start, int role,
                                  const QVariant &amp;value, int hits = 1,
                                  Qt::MatchFlags flags =
                                  Qt::MatchFlags(Qt::MatchStartsWith|Qt::MatchWrap)) const;
    virtual QSize span(const QModelIndex &amp;index) const;

#ifdef Q_NO_USING_KEYWORD
    inline QObject *parent() const { return QObject::parent(); }
#else
    using QObject::parent;
#endif

Q_SIGNALS:
    void dataChanged(const QModelIndex &amp;topLeft, const QModelIndex &amp;bottomRight);
    void headerDataChanged(Qt::Orientation orientation, int first, int last);
    void layoutChanged();

#if !defined(Q_MOC_RUN) &amp;&amp; !defined(qdoc)
private: // can only be emitted by QAbstractItemModel
#endif
    void rowsAboutToBeInserted(const QModelIndex &amp;parent, int first, int last);
    void rowsInserted(const QModelIndex &amp;parent, int first, int last);

    void rowsAboutToBeRemoved(const QModelIndex &amp;parent, int first, int last);
    void rowsRemoved(const QModelIndex &amp;parent, int first, int last);

    void columnsAboutToBeInserted(const QModelIndex &amp;parent, int first, int last);
    void columnsInserted(const QModelIndex &amp;parent, int first, int last);

    void columnsAboutToBeRemoved(const QModelIndex &amp;parent, int first, int last);
    void columnsRemoved(const QModelIndex &amp;parent, int first, int last);

    void modelReset();

public Q_SLOTS:
    virtual bool submit();
    virtual void revert();

protected:
    QAbstractItemModel(QAbstractItemModelPrivate &amp;dd, QObject *parent = 0);

    inline QModelIndex createIndex(int row, int column, void *data = 0) const;
    inline QModelIndex createIndex(int row, int column, int id) const;

    void encodeData(const QModelIndexList &amp;indexes, QDataStream &amp;stream) const;
    bool decodeData(int row, int column, const QModelIndex &amp;parent, QDataStream &amp;stream);

    void beginInsertRows(const QModelIndex &amp;parent, int first, int last);
    void endInsertRows();

    void beginRemoveRows(const QModelIndex &amp;parent, int first, int last);
    void endRemoveRows();

    void beginInsertColumns(const QModelIndex &amp;parent, int first, int last);
    void endInsertColumns();

    void beginRemoveColumns(const QModelIndex &amp;parent, int first, int last);
    void endRemoveColumns();

    void reset();

    void changePersistentIndex(const QModelIndex &amp;from, const QModelIndex &amp;to);
    void changePersistentIndexList(const QModelIndexList &amp;from, const QModelIndexList &amp;to);

private:
    Q_DECLARE_PRIVATE(QAbstractItemModel)
    Q_DISABLE_COPY(QAbstractItemModel)
};

inline bool QAbstractItemModel::insertRow(int arow, const QModelIndex &amp;aparent)
{ return insertRows(arow, 1, aparent); }
inline bool QAbstractItemModel::insertColumn(int acolumn, const QModelIndex &amp;aparent)
{ return insertColumns(acolumn, 1, aparent); }
inline bool QAbstractItemModel::removeRow(int arow, const QModelIndex &amp;aparent)
{ return removeRows(arow, 1, aparent); }
inline bool QAbstractItemModel::removeColumn(int acolumn, const QModelIndex &amp;aparent)
{ return removeColumns(acolumn, 1, aparent); }

inline QModelIndex QAbstractItemModel::createIndex(int arow, int acolumn, void *adata) const
{ return QModelIndex(arow, acolumn, adata, this); }
inline QModelIndex QAbstractItemModel::createIndex(int arow, int acolumn, int aid) const
{ return QModelIndex(arow, acolumn, reinterpret_cast&lt;void*>(aid), this); }

class Q_CORE_EXPORT QAbstractTableModel : public QAbstractItemModel
{
    Q_OBJECT

public:
    explicit QAbstractTableModel(QObject *parent = 0);
    ~QAbstractTableModel();

    QModelIndex index(int row, int column, const QModelIndex &amp;parent = QModelIndex()) const;
    bool dropMimeData(const QMimeData *data, Qt::DropAction action,
                      int row, int column, const QModelIndex &amp;parent);
protected:
    QAbstractTableModel(QAbstractItemModelPrivate &amp;dd, QObject *parent);

private:
    Q_DISABLE_COPY(QAbstractTableModel)
    QModelIndex parent(const QModelIndex &amp;child) const;
    bool hasChildren(const QModelIndex &amp;parent) const;
};

class Q_CORE_EXPORT QAbstractListModel : public QAbstractItemModel
{
    Q_OBJECT

public:
    explicit QAbstractListModel(QObject *parent = 0);
    ~QAbstractListModel();

    QModelIndex index(int row, int column = 0, const QModelIndex &amp;parent = QModelIndex()) const;
    bool dropMimeData(const QMimeData *data, Qt::DropAction action,
                      int row, int column, const QModelIndex &amp;parent);
protected:
    QAbstractListModel(QAbstractItemModelPrivate &amp;dd, QObject *parent);

private:
    Q_DISABLE_COPY(QAbstractListModel)
    QModelIndex parent(const QModelIndex &amp;child) const;
    int columnCount(const QModelIndex &amp;parent) const;
    bool hasChildren(const QModelIndex &amp;parent) const;
};

// inline implementations

inline QModelIndex::QModelIndex(int arow, int acolumn, void *adata,
                                const QAbstractItemModel *amodel)
    : r(arow), c(acolumn), p(adata), m(amodel) {}

inline QModelIndex QModelIndex::parent() const
{ return m ? m->parent(*this) : QModelIndex(); }

inline QModelIndex QModelIndex::sibling(int arow, int acolumn) const
{ return m ? m->index(arow, acolumn, m->parent(*this)) : QModelIndex(); }

inline QModelIndex QModelIndex::child(int arow, int acolumn) const
{ return m ? m->index(arow, acolumn, *this) : QModelIndex(); }

inline QVariant QModelIndex::data(int arole) const
{ return m ? m->data(*this, arole) : QVariant(); }

inline uint qHash(const QModelIndex &amp;index)
{ return uint((index.row() &lt;&lt; 4) + index.column() + index.internalId()); }

#endif // QABSTRACTITEMMODEL_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtCore/qatomic.h</TITLE>
<PARA>
</PARA>
<SCREEN>
 /****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QATOMIC_H
#define QATOMIC_H

#if defined(QT_MOC) || defined(QT_BUILD_QMAKE) || defined(QT_RCC) || defined(QT_UIC)
// this allows us to use -I... magic to select a specific arch (e.g. generic)
#  include &lt;arch/qatomic.h>
#else
#  include &lt;QtCore/arch/qatomic.h>
#endif
#include &lt;QtCore/qglobal.h>

QT_MODULE(Core)

#ifndef Q_SPECIALIZED_QATOMIC

/*
    We assume that the following 8 functions have been declared by the
    platform specific qatomic.h:

    int q_atomic_test_and_set_int(volatile int *ptr, int expected, int newval);
    int q_atomic_test_and_set_acquire_int(volatile int *ptr, int expected, int newval);
    int q_atomic_test_and_set_release_int(volatile int *ptr, int expected, int newval);

    int q_atomic_test_and_set_ptr(volatile void *ptr, void *expected, void *newval);
    int q_atomic_increment(volatile int *ptr);
    int q_atomic_decrement(volatile int *ptr);
    int q_atomic_set_int(volatile int *ptr, int newval);
    void *q_atomic_set_ptr(volatile void *ptr, void *newval);

    If you cannot implement these functions efficiently on your
    platform without great difficulty, consider defining
    Q_SPECIALIZED_QATOMIC.  By doing this, you need to implement:

    struct QBasicAtomic;
    template &lt;typename T> struct QBasicAtomicPointer&lt;T>;
    int q_atomic_test_and_set_ptr(volatile void *ptr, void *expected, void *newval);
    void *q_atomic_set_ptr(volatile void *ptr, void *newval);
*/

struct QBasicAtomic {
    volatile int atomic;

    void init(int x = 0)
    { atomic = x; }

    inline bool ref()
    { return q_atomic_increment(&amp;atomic) != 0; }

    inline bool deref()
    { return q_atomic_decrement(&amp;atomic) != 0; }

    inline bool operator==(int x) const
    { return atomic == x; }

    inline bool operator!=(int x) const
    { return atomic != x; }

    inline bool operator!() const
    { return atomic == 0; }

    inline operator int() const
    { return atomic; }

    inline QBasicAtomic &amp;operator=(int x)
    {
        (void) q_atomic_set_int(&amp;atomic, x);
        return *this;
    }

    inline bool testAndSet(int expected, int newval)
    { return q_atomic_test_and_set_int(&amp;atomic, expected, newval) != 0; }

    inline bool testAndSetAcquire(int expected, int newval)
    { return q_atomic_test_and_set_acquire_int(&amp;atomic, expected, newval) != 0; }

    inline bool testAndSetRelease(int expected, int newval)
    { return q_atomic_test_and_set_release_int(&amp;atomic, expected, newval) != 0; }

    inline int exchange(int newval)
    { return q_atomic_set_int(&amp;atomic, newval); }
};

template &lt;typename T>
struct QBasicAtomicPointer
{
    volatile T *pointer;

    void init(T *t = 0)
    { pointer = t; }

    inline bool operator==(T *t) const
    { return pointer == t; }

    inline bool operator!=(T *t) const
    { return !operator==(t); }

    inline bool operator!() const
    { return operator==(0); }

    inline operator T *() const
    { return const_cast&lt;T *>(pointer); }

    inline T *operator->() const
    { return const_cast&lt;T *>(pointer); }

    inline QBasicAtomicPointer&lt;T> &amp;operator=(T *t)
    {
        (void) q_atomic_set_ptr(&amp;pointer, t);
        return *this;
    }

    inline bool testAndSet(T *expected, T *newval)
    { return q_atomic_test_and_set_ptr(&amp;pointer, expected, newval); }

    inline T *exchange(T * newval)
    { return static_cast&lt;T *>(q_atomic_set_ptr(&amp;pointer, newval)); }
};

#define Q_ATOMIC_INIT(a) { (a) }

#endif // Q_SPECIALIZED_QATOMIC

template &lt;typename T>
inline T qAtomicSetPtr(volatile T *ptr, T newval)
{ return static_cast&lt;T>(q_atomic_set_ptr(ptr, newval)); }

// High-level atomic integer operations
class QAtomic : public QBasicAtomic
{
public:
    inline QAtomic(int x = 0)
    { init(x); }
    inline QAtomic(const QAtomic &amp;copy)
    { init(copy); }

    inline QAtomic &amp;operator=(int x)
    {
        (void) QBasicAtomic::operator=(x);
        return *this;
    }

    inline QAtomic &amp;operator=(const QAtomic &amp;copy)
    {
        (void) QBasicAtomic::operator=(copy);
        return *this;
    }
};

// High-level atomic pointer operations
template &lt;typename T>
class QAtomicPointer : public QBasicAtomicPointer&lt;T>
{
public:
    inline QAtomicPointer(T *t = 0)
    { init(t); }
    inline QAtomicPointer(const QAtomicPointer&lt;T> &amp;copy)
    { init(copy); }

    inline QAtomicPointer&lt;T> &amp;operator=(T *t)
    {
        (void) QBasicAtomicPointer&lt;T>::operator=(t);
        return *this;
    }

    inline QAtomicPointer&lt;T> &amp;operator=(const QAtomicPointer&lt;T> &amp;copy)
    {
        (void) QBasicAtomicPointer&lt;T>::operator=(copy);
        return *this;
    }
};

/*!
    This is a helper for the assignment operators of implicitly
    shared classes. Your assignment operator should look like this:

    \code
        MyClass &amp;MyClass:operator=(const MyClass &amp;other)
        { qAtomicAssign(d, other.d); return *this; }
    \endcode
*/
template &lt;typename T>
inline void qAtomicAssign(T *&amp;d, T *x)
{
    x->ref.ref();
    x = qAtomicSetPtr(&amp;d, x);
    if (!x->ref.deref())
        delete x;
}

/*! \internal
    \overload
*/
template &lt;typename T>
inline void qAtomicAssign(QBasicAtomicPointer&lt;T> &amp;d, T *x)
{
    x->ref.ref();
    x = d.exchange(x);
    if (!x->ref.deref())
        delete x;
}

/*! \internal
    \overload
*/
template &lt;typename T>
inline void qAtomicAssign(QBasicAtomicPointer&lt;T> &amp;d, const QBasicAtomicPointer&lt;T> &amp;x)
{ qAtomicAssign&lt;T>(d, x); }

/*! \internal
    This is a helper for the detach function. Your private class needs
    a copy constructor which copies the members and sets the refcount
    to 1. After that, your detach function should look like this:

    \code
        void MyClass::detach()
        { qAtomicDetach(d); }
    \endcode
*/
template &lt;typename T>
inline void qAtomicDetach(T *&amp;d)
{
    if (d->ref == 1)
        return;
    T *x = new T(*d);
    x = qAtomicSetPtr(&amp;d, x);
    if (!x->ref.deref())
        delete x;
}

/*! \internal
    \overload
*/
template &lt;typename T>
inline void qAtomicDetach(QBasicAtomicPointer&lt;T> &amp;d)
{
    if (d->ref == 1)
        return;
    T *x = new T(*d);
    x = d.exchange(x);
    if (!x->ref.deref())
        delete x;
}

#endif // QATOMIC_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtCore/qbasictimer.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QBASICTIMER_H
#define QBASICTIMER_H

#include &lt;QtCore/qglobal.h>

QT_MODULE(Core)

class QObject;

class Q_CORE_EXPORT QBasicTimer
{
    int id;
public:
    inline QBasicTimer() : id(0) {}
    inline ~QBasicTimer() { if (id) stop(); }

    inline bool isActive() const { return id != 0; }
    inline int timerId() const { return id; }

    void start(int msec, QObject *obj);
    void stop();
};
Q_DECLARE_TYPEINFO(QBasicTimer, Q_MOVABLE_TYPE);

#endif // QBASICTIMER_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtCore/qbitarray.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QBITARRAY_H
#define QBITARRAY_H

#include &lt;QtCore/qbytearray.h>

QT_MODULE(Core)

class QBitRef;
class Q_CORE_EXPORT QBitArray
{
    friend Q_CORE_EXPORT QDataStream &amp;operator&lt;&lt;(QDataStream &amp;, const QBitArray &amp;);
    friend Q_CORE_EXPORT QDataStream &amp;operator>>(QDataStream &amp;, QBitArray &amp;);
    QByteArray d;

public:
    inline QBitArray() {}
    explicit QBitArray(int size, bool val = false);
    QBitArray(const QBitArray &amp;other) : d(other.d) {}
    inline QBitArray &amp;operator=(const QBitArray &amp;other) { d = other.d; return *this; }

    inline int size() const { return (d.size() &lt;&lt; 3) - *d.constData(); }
    inline int count() const { return (d.size() &lt;&lt; 3) - *d.constData(); }
    int count(bool on) const;
    // ### Qt 5: Store the number of set bits separately

    inline bool isEmpty() const { return d.isEmpty(); }
    inline bool isNull() const { return d.isNull(); }

    void resize(int size);

    inline void detach() { d.detach(); }
    inline bool isDetached() const { return d.isDetached(); }
    inline void clear() { d.clear(); }

    bool testBit(int i) const;
    void setBit(int i);
    void setBit(int i, bool val);
    void clearBit(int i);
    bool toggleBit(int i);

    bool at(int i) const;
    QBitRef operator[](int i);
    bool operator[](int i) const;
    QBitRef operator[](uint i);
    bool operator[](uint i) const;

    QBitArray&amp; operator&amp;=(const QBitArray &amp;);
    QBitArray&amp; operator|=(const QBitArray &amp;);
    QBitArray&amp; operator^=(const QBitArray &amp;);
    QBitArray  operator~() const;

    inline bool operator==(const QBitArray&amp; a) const { return d == a.d; }
    inline bool operator!=(const QBitArray&amp; a) const { return d != a.d; }

    inline bool fill(bool val, int size = -1);
    void fill(bool val, int first, int last);

    inline void truncate(int pos) { if (pos &lt; size()) resize(pos); }
};

inline bool QBitArray::fill(bool aval, int asize)
{ *this = QBitArray((asize &lt; 0 ? this->size() : asize), aval); return true; }

Q_CORE_EXPORT QBitArray operator&amp;(const QBitArray &amp;, const QBitArray &amp;);
Q_CORE_EXPORT QBitArray operator|(const QBitArray &amp;, const QBitArray &amp;);
Q_CORE_EXPORT QBitArray operator^(const QBitArray &amp;, const QBitArray &amp;);

inline bool QBitArray::testBit(int i) const
{ Q_ASSERT(i >= 0 &amp;&amp; i &lt; size());
 return (*(reinterpret_cast&lt;const uchar*>(d.constData())+1+(i>>3)) &amp; (1 &lt;&lt; (i &amp; 7))) != 0; }

inline void QBitArray::setBit(int i)
{ Q_ASSERT(i >= 0 &amp;&amp; i &lt; size());
 *(reinterpret_cast&lt;uchar*>(d.data())+1+(i>>3)) |= (1 &lt;&lt; (i &amp; 7)); }

inline void QBitArray::clearBit(int i)
{ Q_ASSERT(i >= 0 &amp;&amp; i &lt; size());
 *(reinterpret_cast&lt;uchar*>(d.data())+1+(i>>3)) &amp;= ~(1 &lt;&lt; (i &amp; 7)); }

inline void QBitArray::setBit(int i, bool val)
{ if (val) setBit(i); else clearBit(i); }

inline bool QBitArray::toggleBit(int i)
{ Q_ASSERT(i >= 0 &amp;&amp;  i &lt; size());
 uchar b = 1&lt;&lt; (i&amp;7); uchar* p = reinterpret_cast&lt;uchar*>(d.data())+1+(i>>3);
 uchar c = *p&amp;b; *p^=b; return c!=0; }

inline bool QBitArray::operator[](int i) const { return testBit(i); }
inline bool QBitArray::operator[](uint i) const { return testBit(i); }
inline bool QBitArray::at(int i) const { return testBit(i); }

class Q_CORE_EXPORT QBitRef
{
private:
    QBitArray&amp; a;
    int i;
    inline QBitRef(QBitArray&amp; array, int idx) : a(array), i(idx) {}
    friend class QBitArray;
public:
    inline operator bool() const { return a.testBit(i); }
    inline bool operator!() const { return !a.testBit(i); }
    QBitRef&amp; operator=(const QBitRef&amp; val) { a.setBit(i, val); return *this; }
    QBitRef&amp; operator=(bool val) { a.setBit(i, val); return *this; }
};

inline QBitRef QBitArray::operator[](int i)
{ Q_ASSERT(i >= 0); return QBitRef(*this, i); }
inline QBitRef QBitArray::operator[](uint i)
{ return QBitRef(*this, i); }


#ifndef QT_NO_DATASTREAM
Q_CORE_EXPORT QDataStream &amp;operator&lt;&lt;(QDataStream &amp;, const QBitArray &amp;);
Q_CORE_EXPORT QDataStream &amp;operator>>(QDataStream &amp;, QBitArray &amp;);
#endif

Q_DECLARE_TYPEINFO(QBitArray, Q_MOVABLE_TYPE);
Q_DECLARE_SHARED(QBitArray)

#endif // QBITARRAY_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtCore/qbuffer.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QBUFFER_H
#define QBUFFER_H

#include &lt;QtCore/qiodevice.h>
#include &lt;QtCore/qbytearray.h>

QT_MODULE(Core)

class QObject;
class QBufferPrivate;

class Q_CORE_EXPORT QBuffer : public QIODevice
{
#ifndef QT_NO_QOBJECT
    Q_OBJECT
#endif

public:
#ifndef QT_NO_QOBJECT
     explicit QBuffer(QObject *parent = 0);
     QBuffer(QByteArray *buf, QObject *parent = 0);
#else
     QBuffer();
     explicit QBuffer(QByteArray *buf);
#endif
    ~QBuffer();

    QByteArray &amp;buffer();
    const QByteArray &amp;buffer() const;
    void setBuffer(QByteArray *a);

    void setData(const QByteArray &amp;data);
    inline void setData(const char *data, int len);
    const QByteArray &amp;data() const;

    bool open(OpenMode openMode);

    void close();
    qint64 size() const;
    qint64 pos() const;
    bool seek(qint64 off);
    bool atEnd() const;
    bool canReadLine() const;

protected:
    qint64 readData(char *data, qint64 maxlen);
    qint64 writeData(const char *data, qint64 len);

private:
    Q_DECLARE_PRIVATE(QBuffer)
    Q_DISABLE_COPY(QBuffer)

    Q_PRIVATE_SLOT(d_func(), void emitSignals())
};

inline void QBuffer::setData(const char *adata, int alen)
{ setData(QByteArray(adata, alen)); }

#endif // QBUFFER_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtCore/qbytearray.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QBYTEARRAY_H
#define QBYTEARRAY_H

#include &lt;QtCore/qglobal.h>
#include &lt;QtCore/qatomic.h>

#include &lt;string.h>
#include &lt;stdarg.h>

#ifdef truncate
#error qbytearray.h must be included before any header file that defines truncate
#endif

QT_MODULE(Core)

/*****************************************************************************
  Safe and portable C string functions; extensions to standard string.h
 *****************************************************************************/

Q_CORE_EXPORT char *qstrdup(const char *);

inline uint qstrlen(const char *str)
{ return str ? uint(strlen(str)) : 0; }

Q_CORE_EXPORT char *qstrcpy(char *dst, const char *src);
Q_CORE_EXPORT char *qstrncpy(char *dst, const char *src, uint len);

Q_CORE_EXPORT int qstrcmp(const char *str1, const char *str2);

inline int qstrncmp(const char *str1, const char *str2, uint len)
{
    return (str1 &amp;&amp; str2) ? strncmp(str1, str2, len)
        : (str1 ? 1 : (str2 ? -1 : 0));
}
Q_CORE_EXPORT int qstricmp(const char *, const char *);
Q_CORE_EXPORT int qstrnicmp(const char *, const char *, uint len);

// implemented in qvsnprintf.cpp
Q_CORE_EXPORT int qvsnprintf(char *str, size_t n, const char *fmt, va_list ap);
Q_CORE_EXPORT int qsnprintf(char *str, size_t n, const char *fmt, ...);

#ifdef QT3_SUPPORT
inline QT3_SUPPORT void *qmemmove(void *dst, const void *src, uint len)
{ return memmove(dst, src, len); }
inline QT3_SUPPORT uint cstrlen(const char *str)
{ return uint(strlen(str)); }
inline QT3_SUPPORT char *cstrcpy(char *dst, const char *src)
{ return qstrcpy(dst,src); }
inline QT3_SUPPORT int cstrcmp(const char *str1, const char *str2)
{ return strcmp(str1,str2); }
inline QT3_SUPPORT int cstrncmp(const char *str1, const char *str2, uint len)
{ return strncmp(str1,str2,len); }
#endif

// qChecksum: Internet checksum

Q_CORE_EXPORT quint16 qChecksum(const char *s, uint len);

class QByteRef;
class QString;
class QDataStream;
template &lt;typename T> class QList;

class Q_CORE_EXPORT QByteArray
{
public:
    inline QByteArray();
    QByteArray(const char *);
    QByteArray(const char *, int size);
    QByteArray(int size, char c);
    inline QByteArray(const QByteArray &amp;);
    inline ~QByteArray();

    QByteArray &amp;operator=(const QByteArray &amp;);
    QByteArray &amp;operator=(const char *str);

    inline int size() const;
    bool isEmpty() const;
    void resize(int size);

    QByteArray &amp;fill(char c, int size = -1);

    int capacity() const;
    void reserve(int size);
    void squeeze();

    operator const char *() const;
    operator const void *() const;
    char *data();
    const char *data() const;
    inline const char *constData() const;
    inline void detach();
    bool isDetached() const;
    void clear();

    const char at(int i) const;
    const char operator[](int i) const;
    QByteRef operator[](int i);
    const char operator[](uint i) const;
    QByteRef operator[](uint i);

    int indexOf(char c, int from = 0) const;
    inline int indexOf(const char *c, int from = 0) const;
    int indexOf(const QByteArray &amp;a, int from = 0) const;
    int lastIndexOf(char c, int from = -1) const;
    inline int lastIndexOf(const char *c, int from = -1) const;
    int lastIndexOf(const QByteArray &amp;a, int from = -1) const;

    QBool contains(char c) const;
    QBool contains(const char *a) const;
    QBool contains(const QByteArray &amp;a) const;
    int count(char c) const;
    int count(const char *a) const;
    int count(const QByteArray &amp;a) const;

    QByteArray left(int len) const;
    QByteArray right(int len) const;
    QByteArray mid(int index, int len = -1) const;

    bool startsWith(const QByteArray &amp;a) const;
    bool startsWith(char c) const;
    bool startsWith(const char *c) const;

    bool endsWith(const QByteArray &amp;a) const;
    bool endsWith(char c) const;
    bool endsWith(const char *c) const;

    void truncate(int pos);
    void chop(int n);

    QByteArray toLower() const;
    QByteArray toUpper() const;

    QByteArray trimmed() const;
    QByteArray simplified() const;
    QByteArray leftJustified(int width, char fill = ' ', bool truncate = false) const;
    QByteArray rightJustified(int width, char fill = ' ', bool truncate = false) const;

#ifdef QT3_SUPPORT
    inline QT3_SUPPORT QByteArray leftJustify(uint width, char fill = ' ', bool truncate = false) const
    { return leftJustified(int(width), fill, truncate); }
    inline QT3_SUPPORT QByteArray rightJustify(uint width, char fill = ' ', bool truncate = false) const
    { return rightJustified(int(width), fill, truncate); }
#endif

    QByteArray &amp;prepend(char c);
    QByteArray &amp;prepend(const char *s);
    QByteArray &amp;prepend(const QByteArray &amp;a);
    QByteArray &amp;append(char c);
    QByteArray &amp;append(const char *s);
    QByteArray &amp;append(const QByteArray &amp;a);
    QByteArray &amp;insert(int i, char c);
    QByteArray &amp;insert(int i, const char *s);
    QByteArray &amp;insert(int i, const QByteArray &amp;a);
    QByteArray &amp;remove(int index, int len);
    QByteArray &amp;replace(int index, int len, const char *s);
    QByteArray &amp;replace(int index, int len, const QByteArray &amp;s);
    QByteArray &amp;replace(char before, const char *after);
    QByteArray &amp;replace(char before, const QByteArray &amp;after);
    QByteArray &amp;replace(const char *before, const char *after);
    QByteArray &amp;replace(const QByteArray &amp;before, const QByteArray &amp;after);
    QByteArray &amp;replace(const QByteArray &amp;before, const char *after);
    QByteArray &amp;replace(const char *before, const QByteArray &amp;after);
    QByteArray &amp;replace(char before, char after);
    QByteArray &amp;operator+=(char c);
    QByteArray &amp;operator+=(const char *s);
    QByteArray &amp;operator+=(const QByteArray &amp;a);

    QList&lt;QByteArray> split(char sep) const;

#ifndef QT_NO_CAST_TO_ASCII
    QByteArray &amp;append(const QString &amp;s);
    QByteArray &amp;insert(int i, const QString &amp;s);
    QByteArray &amp;replace(const QString &amp;before, const char *after);
    QByteArray &amp;replace(char c, const QString &amp;after);
    QByteArray &amp;replace(const QString &amp;before, const QByteArray &amp;after);

    QByteArray &amp;operator+=(const QString &amp;s);
    int indexOf(const QString &amp;s, int from = 0) const;
    int lastIndexOf(const QString &amp;s, int from = -1) const;
#endif
#ifndef QT_NO_CAST_FROM_ASCII
    inline bool operator==(const QString &amp;s2) const;
    inline bool operator!=(const QString &amp;s2) const;
    inline bool operator&lt;(const QString &amp;s2) const;
    inline bool operator>(const QString &amp;s2) const;
    inline bool operator&lt;=(const QString &amp;s2) const;
    inline bool operator>=(const QString &amp;s2) const;
#endif

    short toShort(bool *ok = 0, int base = 10) const;
    ushort toUShort(bool *ok = 0, int base = 10) const;
    int toInt(bool *ok = 0, int base = 10) const;
    uint toUInt(bool *ok = 0, int base = 10) const;
    long toLong(bool *ok = 0, int base = 10) const;
    ulong toULong(bool *ok = 0, int base = 10) const;
    qlonglong toLongLong(bool *ok = 0, int base = 10) const;
    qulonglong toULongLong(bool *ok = 0, int base = 10) const;
    float toFloat(bool *ok = 0) const;
    double toDouble(bool *ok = 0) const;
    QByteArray toBase64() const;

    QByteArray &amp;setNum(short, int base = 10);
    QByteArray &amp;setNum(ushort, int base = 10);
    QByteArray &amp;setNum(int, int base = 10);
    QByteArray &amp;setNum(uint, int base = 10);
    QByteArray &amp;setNum(qlonglong, int base = 10);
    QByteArray &amp;setNum(qulonglong, int base = 10);
    QByteArray &amp;setNum(float, char f = 'g', int prec = 6);
    QByteArray &amp;setNum(double, char f = 'g', int prec = 6);

    static QByteArray number(int, int base = 10);
    static QByteArray number(uint, int base = 10);
    static QByteArray number(qlonglong, int base = 10);
    static QByteArray number(qulonglong, int base = 10);
    static QByteArray number(double, char f = 'g', int prec = 6);
    static QByteArray fromRawData(const char *, int size);
    static QByteArray fromBase64(const QByteArray &amp;base64);

    typedef char *iterator;
    typedef const char *const_iterator;
    typedef iterator Iterator;
    typedef const_iterator ConstIterator;
    iterator begin();
    const_iterator begin() const;
    const_iterator constBegin() const;
    iterator end();
    const_iterator end() const;
    const_iterator constEnd() const;

    // stl compatibility
    typedef const char &amp; const_reference;
    typedef char &amp; reference;
    void push_back(char c);
    void push_back(const char *c);
    void push_back(const QByteArray &amp;a);
    void push_front(char c);
    void push_front(const char *c);
    void push_front(const QByteArray &amp;a);

    inline int count() const { return d->size; }
    int length() const { return d->size; }
    bool isNull() const;

    // compatibility
#ifdef QT3_SUPPORT
    QT3_SUPPORT_CONSTRUCTOR QByteArray(int size);
    inline QT3_SUPPORT QByteArray&amp; duplicate(const QByteArray&amp; a) { *this = a; return *this; }
    inline QT3_SUPPORT QByteArray&amp; duplicate(const char *a, uint n)
    { *this = QByteArray(a, n); return *this; }
    inline QT3_SUPPORT QByteArray&amp; setRawData(const char *a, uint n)
    { *this = fromRawData(a, n); return *this; }
    inline QT3_SUPPORT void resetRawData(const char *, uint) { clear(); }
    inline QT3_SUPPORT QByteArray lower() const { return toLower(); }
    inline QT3_SUPPORT QByteArray upper() const { return toUpper(); }
    inline QT3_SUPPORT QByteArray stripWhiteSpace() const { return trimmed(); }
    inline QT3_SUPPORT QByteArray simplifyWhiteSpace() const { return simplified(); }
    inline QT3_SUPPORT int find(char c, int from = 0) const { return indexOf(c, from); }
    inline QT3_SUPPORT int find(const char *c, int from = 0) const { return indexOf(c, from); }
    inline QT3_SUPPORT int find(const QByteArray &amp;ba, int from = 0) const { return indexOf(ba, from); }
    inline QT3_SUPPORT int findRev(char c, int from = -1) const { return lastIndexOf(c, from); }
    inline QT3_SUPPORT int findRev(const char *c, int from = -1) const { return lastIndexOf(c, from); }
    inline QT3_SUPPORT int findRev(const QByteArray &amp;ba, int from = -1) const { return lastIndexOf(ba, from); }
#ifndef QT_NO_CAST_TO_ASCII
    QT3_SUPPORT int find(const QString &amp;s, int from = 0) const;
    QT3_SUPPORT int findRev(const QString &amp;s, int from = -1) const;
#endif
#endif

private:
    operator QNoImplicitBoolCast() const;
    struct Data {
        QBasicAtomic ref;
        int alloc, size;
        char *data;
        char array[1];
    };
    static Data shared_null;
    static Data shared_empty;
    Data *d;
    QByteArray(Data *dd, int /*dummy*/, int /*dummy*/) : d(dd) {}
    void realloc(int alloc);
    void expand(int i);

    friend class QByteRef;
    friend class QString;
};

inline QByteArray::QByteArray(): d(&amp;shared_null) { d->ref.ref(); }
inline QByteArray::~QByteArray() { if (!d->ref.deref()) qFree(d); }
inline int QByteArray::size() const
{ return d->size; }
inline const char QByteArray::at(int i) const
{ Q_ASSERT(i >= 0 &amp;&amp; i &lt; size()); return d->data[i]; }
inline const char QByteArray::operator[](int i) const
{ Q_ASSERT(i >= 0 &amp;&amp; i &lt; size()); return d->data[i]; }
inline const char QByteArray::operator[](uint i) const
{ Q_ASSERT(i &lt; uint(size())); return d->data[i]; }
inline bool QByteArray::isEmpty() const
{ return d->size == 0; }
inline QByteArray::operator const char *() const
{ return d->data; }
inline QByteArray::operator const void *() const
{ return d->data; }
inline char *QByteArray::data()
{ detach(); return d->data; }
inline const char *QByteArray::data() const
{ return d->data; }
inline const char *QByteArray::constData() const
{ return d->data; }
inline void QByteArray::detach()
{ if (d->ref != 1 || d->data != d->array) realloc(d->size); }
inline bool QByteArray::isDetached() const
{ return d->ref == 1; }
inline QByteArray::QByteArray(const QByteArray &amp;a) : d(a.d)
{ d->ref.ref(); }
#ifdef QT3_SUPPORT
inline QByteArray::QByteArray(int size) : d(&amp;shared_null)
{ d->ref.ref(); if (size > 0) fill('\0', size); }
#endif

inline int QByteArray::capacity() const
{ return d->alloc; }

inline void QByteArray::reserve(int asize)
{ if (d->ref != 1 || asize > d->alloc) realloc(asize); }

inline void QByteArray::squeeze()
{ if (d->size &lt; d->alloc) realloc(d->size); }

class Q_CORE_EXPORT QByteRef {
    QByteArray &amp;a;
    int i;
    inline QByteRef(QByteArray &amp;array, int idx)
        : a(array),i(idx) {}
    friend class QByteArray;
public:
    inline operator const char() const
        { return i &lt; a.d->size ? a.d->data[i] : 0; }
    inline QByteRef &amp;operator=(char c)
        { if (a.d->ref != 1 || i >= a.d->size) a.expand(i);
          a.d->data[i] = c;  return *this; }
    inline QByteRef &amp;operator=(const QByteRef &amp;c)
        { if (a.d->ref != 1 || i >= a.d->size) a.expand(i);
          a.d->data[i] = c.a.d->data[c.i];  return *this; }
    inline bool operator==(char c) const
    { return a.d->data[i] == c; }
    inline bool operator!=(char c) const
    { return a.d->data[i] != c; }
    inline bool operator>(char c) const
    { return a.d->data[i] > c; }
    inline bool operator>=(char c) const
    { return a.d->data[i] >= c; }
    inline bool operator&lt;(char c) const
    { return a.d->data[i] &lt; c; }
    inline bool operator&lt;=(char c) const
    { return a.d->data[i] &lt;= c; }
};

inline QByteRef QByteArray::operator[](int i)
{ Q_ASSERT(i >= 0); return QByteRef(*this, i); }
inline QByteRef QByteArray::operator[](uint i)
{ return QByteRef(*this, i); }
inline QByteArray::iterator QByteArray::begin()
{ detach(); return d->data; }
inline QByteArray::const_iterator QByteArray::begin() const
{ return d->data; }
inline QByteArray::const_iterator QByteArray::constBegin() const
{ return d->data; }
inline QByteArray::iterator QByteArray::end()
{ detach(); return d->data + d->size; }
inline QByteArray::const_iterator QByteArray::end() const
{ return d->data + d->size; }
inline QByteArray::const_iterator QByteArray::constEnd() const
{ return d->data + d->size; }
inline QByteArray &amp;QByteArray::operator+=(char c)
{ return append(c); }
inline QByteArray &amp;QByteArray::operator+=(const char *s)
{ return append(s); }
inline QByteArray &amp;QByteArray::operator+=(const QByteArray &amp;a)
{ return append(a); }
inline void QByteArray::push_back(char c)
{ append(c); }
inline void QByteArray::push_back(const char *c)
{ append(c); }
inline void QByteArray::push_back(const QByteArray &amp;a)
{ append(a); }
inline void QByteArray::push_front(char c)
{ prepend(c); }
inline void QByteArray::push_front(const char *c)
{ prepend(c); }
inline void QByteArray::push_front(const QByteArray &amp;a)
{ prepend(a); }
inline QBool QByteArray::contains(const QByteArray &amp;a) const
{ return QBool(indexOf(a) != -1); }
inline QBool QByteArray::contains(char c) const
{ return QBool(indexOf(c) != -1); }
inline bool operator==(const QByteArray &amp;a1, const QByteArray &amp;a2)
{ return (a1.size() == a2.size()) &amp;&amp; (memcmp(a1, a2, a1.size())==0); }
inline bool operator==(const QByteArray &amp;a1, const char *a2)
{ return a2 ? strcmp(a1,a2) == 0 : a1.isEmpty(); }
inline bool operator==(const char *a1, const QByteArray &amp;a2)
{ return a1 ? strcmp(a1,a2) == 0 : a2.isEmpty(); }
inline bool operator!=(const QByteArray &amp;a1, const QByteArray &amp;a2)
{ return !(a1==a2); }
inline bool operator!=(const QByteArray &amp;a1, const char *a2)
{ return a2 ? strcmp(a1,a2) != 0 : !a1.isEmpty(); }
inline bool operator!=(const char *a1, const QByteArray &amp;a2)
{ return a1 ? strcmp(a1,a2) != 0 : !a2.isEmpty(); }
inline bool operator&lt;(const QByteArray &amp;a1, const QByteArray &amp;a2)
{ return strcmp(a1, a2) &lt; 0; }
 inline bool operator&lt;(const QByteArray &amp;a1, const char *a2)
{ return qstrcmp(a1, a2) &lt; 0; }
inline bool operator&lt;(const char *a1, const QByteArray &amp;a2)
{ return qstrcmp(a1, a2) &lt; 0; }
inline bool operator&lt;=(const QByteArray &amp;a1, const QByteArray &amp;a2)
{ return strcmp(a1, a2) &lt;= 0; }
inline bool operator&lt;=(const QByteArray &amp;a1, const char *a2)
{ return qstrcmp(a1, a2) &lt;= 0; }
inline bool operator&lt;=(const char *a1, const QByteArray &amp;a2)
{ return qstrcmp(a1, a2) &lt;= 0; }
inline bool operator>(const QByteArray &amp;a1, const QByteArray &amp;a2)
{ return strcmp(a1, a2) > 0; }
inline bool operator>(const QByteArray &amp;a1, const char *a2)
{ return qstrcmp(a1, a2) > 0; }
inline bool operator>(const char *a1, const QByteArray &amp;a2)
{ return qstrcmp(a1, a2) > 0; }
inline bool operator>=(const QByteArray &amp;a1, const QByteArray &amp;a2)
{ return strcmp(a1, a2) >= 0; }
inline bool operator>=(const QByteArray &amp;a1, const char *a2)
{ return qstrcmp(a1, a2) >= 0; }
inline bool operator>=(const char *a1, const QByteArray &amp;a2)
{ return qstrcmp(a1, a2) >= 0; }
inline const QByteArray operator+(const QByteArray &amp;a1, const QByteArray &amp;a2)
{ return QByteArray(a1) += a2; }
inline const QByteArray operator+(const QByteArray &amp;a1, const char *a2)
{ return QByteArray(a1) += a2; }
inline const QByteArray operator+(const QByteArray &amp;a1, char a2)
{ return QByteArray(a1) += a2; }
inline const QByteArray operator+(const char *a1, const QByteArray &amp;a2)
{ return QByteArray(a1) += a2; }
inline const QByteArray operator+(char a1, const QByteArray &amp;a2)
{ return QByteArray(&amp;a1, 1) += a2; }
inline int QByteArray::indexOf(const char *c, int i) const
{ return indexOf(fromRawData(c, qstrlen(c)), i); }
inline int QByteArray::lastIndexOf(const char *c, int i) const
{ return lastIndexOf(fromRawData(c, qstrlen(c)), i); }
inline QBool QByteArray::contains(const char *c) const
{ return contains(fromRawData(c, qstrlen(c))); }
inline QByteArray &amp;QByteArray::replace(int index, int len, const char *c)
{ return replace(index, len, fromRawData(c, qstrlen(c))); }
inline QByteArray &amp;QByteArray::replace(char before, const char *c)
{ return replace(before, fromRawData(c, qstrlen(c))); }
inline QByteArray &amp;QByteArray::replace(const QByteArray &amp;before, const char *c)
{ return replace(before, fromRawData(c, qstrlen(c))); }
inline QByteArray &amp;QByteArray::replace(const char *c, const QByteArray &amp;after)
{ return replace(fromRawData(c, qstrlen(c)), after); }
inline QByteArray &amp;QByteArray::replace(const char *before, const char *after)
{ return replace(fromRawData(before, qstrlen(before)), fromRawData(after, qstrlen(after))); }

inline QByteArray &amp;QByteArray::setNum(short n, int base)
{ return setNum(qlonglong(n), base); }
inline QByteArray &amp;QByteArray::setNum(ushort n, int base)
{ return setNum(qulonglong(n), base); }
inline QByteArray &amp;QByteArray::setNum(int n, int base)
{ return setNum(qlonglong(n), base); }
inline QByteArray &amp;QByteArray::setNum(uint n, int base)
{ return setNum(qulonglong(n), base); }
inline QByteArray &amp;QByteArray::setNum(float n, char f, int prec)
{ return setNum(double(n),f,prec); }


#ifndef QT_NO_DATASTREAM
Q_CORE_EXPORT QDataStream &amp;operator&lt;&lt;(QDataStream &amp;, const QByteArray &amp;);
Q_CORE_EXPORT QDataStream &amp;operator>>(QDataStream &amp;, QByteArray &amp;);
#endif

#ifndef QT_NO_COMPRESS
Q_CORE_EXPORT QByteArray qCompress(const uchar* data, int nbytes, int compressionLevel = -1);
Q_CORE_EXPORT QByteArray qUncompress(const uchar* data, int nbytes);
inline QByteArray qCompress(const QByteArray&amp; data, int compressionLevel = -1)
{ return qCompress(reinterpret_cast&lt;const uchar *>(data.constData()), data.size(), compressionLevel); }
inline QByteArray qUncompress(const QByteArray&amp; data)
{ return qUncompress(reinterpret_cast&lt;const uchar*>(data.constData()), data.size()); }
#endif

Q_DECLARE_TYPEINFO(QByteArray, Q_MOVABLE_TYPE);
Q_DECLARE_SHARED(QByteArray)

#endif // QBYTEARRAY_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtCore/qbytearraymatcher.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QBYTEARRAYMATCHER_H
#define QBYTEARRAYMATCHER_H

#include &lt;QtCore/qbytearray.h>

QT_MODULE(Core)

class QByteArrayMatcherPrivate;

class Q_CORE_EXPORT QByteArrayMatcher
{
public:
    QByteArrayMatcher();
    explicit QByteArrayMatcher(const QByteArray &amp;pattern);
    QByteArrayMatcher(const QByteArrayMatcher &amp;other);
    ~QByteArrayMatcher();

    QByteArrayMatcher &amp;operator=(const QByteArrayMatcher &amp;other);

    void setPattern(const QByteArray &amp;pattern);

    int indexIn(const QByteArray &amp;ba, int from = 0) const;
    inline QByteArray pattern() const { return q_pattern; }

private:
    QByteArrayMatcherPrivate *d;
    QByteArray q_pattern;
    uint q_skiptable[256];
};

#endif // QBYTEARRAYMATCHER_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtCore/qchar.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QCHAR_H
#define QCHAR_H

#include &lt;QtCore/qglobal.h>

QT_MODULE(Core)

class QString;

struct QLatin1Char
{
public:
    inline explicit QLatin1Char(char c) : ch(c) {}
    inline const char toLatin1() const { return ch; }
    inline const ushort unicode() const { return ushort(uchar(ch)); }

private:
    char ch;
};


class Q_CORE_EXPORT QChar {
public:
    QChar();
#ifndef QT_NO_CAST_FROM_ASCII
    QChar(char c);
    QChar(uchar c);
#endif
    QChar(QLatin1Char ch);
    QChar(uchar c, uchar r);
    inline QChar(ushort rc) : ucs(rc){}
    QChar(short rc);
    QChar(uint rc);
    QChar(int rc);
    enum SpecialCharacter {
        Null = 0x0000,
        Nbsp = 0x00a0,
        ReplacementCharacter = 0xfffd,
        ObjectReplacementCharacter = 0xfffc,
        ByteOrderMark = 0xfeff,
        ByteOrderSwapped = 0xfffe,
#ifdef QT3_SUPPORT
        null = Null,
        replacement = ReplacementCharacter,
        byteOrderMark = ByteOrderMark,
        byteOrderSwapped = ByteOrderSwapped,
        nbsp = Nbsp,
#endif
        ParagraphSeparator = 0x2029,
        LineSeparator = 0x2028
    };
    QChar(SpecialCharacter sc);

    // Unicode information

    enum Category
    {
        NoCategory,

        Mark_NonSpacing,          //   Mn
        Mark_SpacingCombining,    //   Mc
        Mark_Enclosing,           //   Me

        Number_DecimalDigit,      //   Nd
        Number_Letter,            //   Nl
        Number_Other,             //   No

        Separator_Space,          //   Zs
        Separator_Line,           //   Zl
        Separator_Paragraph,      //   Zp

        Other_Control,            //   Cc
        Other_Format,             //   Cf
        Other_Surrogate,          //   Cs
        Other_PrivateUse,         //   Co
        Other_NotAssigned,        //   Cn

        Letter_Uppercase,         //   Lu
        Letter_Lowercase,         //   Ll
        Letter_Titlecase,         //   Lt
        Letter_Modifier,          //   Lm
        Letter_Other,             //   Lo

        Punctuation_Connector,    //   Pc
        Punctuation_Dash,         //   Pd
        Punctuation_Open,         //   Ps
        Punctuation_Close,        //   Pe
        Punctuation_InitialQuote, //   Pi
        Punctuation_FinalQuote,   //   Pf
        Punctuation_Other,        //   Po

        Symbol_Math,              //   Sm
        Symbol_Currency,          //   Sc
        Symbol_Modifier,          //   Sk
        Symbol_Other,             //   So

        Punctuation_Dask = Punctuation_Dash // oops
    };

    enum Direction
    {
        DirL, DirR, DirEN, DirES, DirET, DirAN, DirCS, DirB, DirS, DirWS, DirON,
        DirLRE, DirLRO, DirAL, DirRLE, DirRLO, DirPDF, DirNSM, DirBN
    };

    enum Decomposition
    {
        NoDecomposition,
        Canonical,
        Font,
        NoBreak,
        Initial,
        Medial,
        Final,
        Isolated,
        Circle,
        Super,
        Sub,
        Vertical,
        Wide,
        Narrow,
        Small,
        Square,
        Compat,
        Fraction

#ifdef QT3_SUPPORT
        , Single = NoDecomposition
#endif
    };

    enum Joining
    {
        OtherJoining, Dual, Right, Center
    };

    enum CombiningClass
    {
        Combining_BelowLeftAttached       = 200,
        Combining_BelowAttached           = 202,
        Combining_BelowRightAttached      = 204,
        Combining_LeftAttached            = 208,
        Combining_RightAttached           = 210,
        Combining_AboveLeftAttached       = 212,
        Combining_AboveAttached           = 214,
        Combining_AboveRightAttached      = 216,

        Combining_BelowLeft               = 218,
        Combining_Below                   = 220,
        Combining_BelowRight              = 222,
        Combining_Left                    = 224,
        Combining_Right                   = 226,
        Combining_AboveLeft               = 228,
        Combining_Above                   = 230,
        Combining_AboveRight              = 232,

        Combining_DoubleBelow             = 233,
        Combining_DoubleAbove             = 234,
        Combining_IotaSubscript           = 240
    };

    enum UnicodeVersion {
        Unicode_Unassigned,
        Unicode_1_1,
        Unicode_2_0,
        Unicode_2_1_2,
        Unicode_3_0,
        Unicode_3_1,
        Unicode_3_2,
        Unicode_4_0
    };
    // ****** WHEN ADDING FUNCTIONS, CONSIDER ADDING TO QCharRef TOO

    int digitValue() const;
    QChar toLower() const;
    QChar toUpper() const;

    Category category() const;
    Direction direction() const;
    Joining joining() const;
    bool hasMirrored() const;
    inline bool isLower() const { return category() == Letter_Lowercase; }
    inline bool isUpper() const { return category() == Letter_Uppercase; }

#ifdef QT3_SUPPORT
    inline QT3_SUPPORT bool mirrored() const { return hasMirrored(); }
#endif
    QChar mirroredChar() const;
    QString decomposition() const;
    Decomposition decompositionTag() const;
    unsigned char combiningClass() const;

    UnicodeVersion unicodeVersion() const;

    const char toAscii() const;
    inline const char toLatin1() const;
    inline const ushort unicode() const { return ucs; }
#ifdef Q_NO_PACKED_REFERENCE
    inline ushort &amp;unicode() { return *(&amp;ucs); }
#else
    inline ushort &amp;unicode() { return ucs; }
#endif

    static QChar fromAscii(char c);
    static QChar fromLatin1(char c);

    inline bool isNull() const { return ucs == 0; }
    bool isPrint() const;
    bool isPunct() const;
    bool isSpace() const;
    bool isMark() const;
    bool isLetter() const;
    bool isNumber() const;
    bool isLetterOrNumber() const;
    bool isDigit() const;
    bool isSymbol() const;

    inline uchar cell() const { return uchar(ucs &amp; 0xff); }
    inline uchar row() const { return uchar((ucs>>8)&amp;0xff); }
    inline void setCell(uchar cell);
    inline void setRow(uchar row);

#ifdef QT3_SUPPORT
    inline QT3_SUPPORT QChar lower() const { return toLower(); }
    inline QT3_SUPPORT QChar upper() const { return toUpper(); }
    static inline QT3_SUPPORT bool networkOrdered() {
        return QSysInfo::ByteOrder == QSysInfo::BigEndian;
    }
    inline QT3_SUPPORT const char latin1() const { return toLatin1(); }
    inline QT3_SUPPORT const char ascii() const { return toAscii(); }
#endif

private:
#ifdef QT_NO_CAST_FROM_ASCII
    QChar(char c);
    QChar(uchar c);
#endif
    ushort ucs;
} Q_PACKED;

Q_DECLARE_TYPEINFO(QChar, Q_MOVABLE_TYPE);

inline QChar::QChar() : ucs(0) {}

inline const char QChar::toLatin1() const { return ucs > 0xff ? '\0' : char(ucs); }
inline QChar QChar::fromLatin1(char c) { return QChar(ushort(uchar(c))); }

inline QChar::QChar(uchar c, uchar r) : ucs((r &lt;&lt; 8) | c){}
inline QChar::QChar(short rc) : ucs(ushort(rc)){}
inline QChar::QChar(uint rc) : ucs(ushort(rc &amp; 0xffff)){}
inline QChar::QChar(int rc) : ucs(ushort(rc &amp; 0xffff)){}
inline QChar::QChar(SpecialCharacter s) : ucs(ushort(s)) {}
inline QChar::QChar(QLatin1Char ch) : ucs(ch.unicode()) {}

inline void QChar::setCell(uchar acell)
{ ucs = (ucs &amp; 0xff00) + acell; }
inline void QChar::setRow(uchar arow)
{ ucs = (ushort(arow)&lt;&lt;8) + (ucs&amp;0xff); }

inline bool operator==(QChar c1, QChar c2) { return c1.unicode() == c2.unicode(); }
inline bool operator!=(QChar c1, QChar c2) { return c1.unicode() != c2.unicode(); }
inline bool operator&lt;=(QChar c1, QChar c2) { return c1.unicode() &lt;= c2.unicode(); }
inline bool operator>=(QChar c1, QChar c2) { return c1.unicode() >= c2.unicode(); }
inline bool operator&lt;(QChar c1, QChar c2) { return c1.unicode() &lt; c2.unicode(); }
inline bool operator>(QChar c1, QChar c2) { return c1.unicode() > c2.unicode(); }

#ifndef QT_NO_DATASTREAM
Q_CORE_EXPORT QDataStream &amp;operator&lt;&lt;(QDataStream &amp;, const QChar &amp;);
Q_CORE_EXPORT QDataStream &amp;operator>>(QDataStream &amp;, QChar &amp;);
#endif

#endif // QCHAR_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtCore/qcoreapplication.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QCOREAPPLICATION_H
#define QCOREAPPLICATION_H

#include &lt;QtCore/qobject.h>
#include &lt;QtCore/qcoreevent.h>
#include &lt;QtCore/qeventloop.h>

#ifdef QT_INCLUDE_COMPAT
#include &lt;QtCore/qstringlist.h>
#endif

QT_MODULE(Core)

#if defined(Q_WS_WIN) &amp;&amp; !defined(tagMSG)
typedef struct tagMSG MSG;
#endif

class QCoreApplicationPrivate;
class QTextCodec;
class QTranslator;
class QPostEventList;
class QStringList;

class Q_CORE_EXPORT QCoreApplication : public QObject
{
    Q_OBJECT
    Q_PROPERTY(QString applicationName READ applicationName WRITE setApplicationName)
    Q_PROPERTY(QString organizationName READ organizationName WRITE setOrganizationName)
    Q_PROPERTY(QString organizationDomain READ organizationDomain WRITE setOrganizationDomain)

    Q_DECLARE_PRIVATE(QCoreApplication)
public:
    QCoreApplication(int &amp;argc, char **argv);
    ~QCoreApplication();

    static int argc();
    static char **argv();
    static QStringList arguments();

    static void setOrganizationDomain(const QString &amp;orgDomain);
    static QString organizationDomain();
    static void setOrganizationName(const QString &amp;orgName);
    static QString organizationName();
    static void setApplicationName(const QString &amp;application);
    static QString applicationName();

    static QCoreApplication *instance() { return self; }

    static int exec();
    static void processEvents(QEventLoop::ProcessEventsFlags flags = QEventLoop::AllEvents);
    static void processEvents(QEventLoop::ProcessEventsFlags flags, int maxtime);
    static void exit(int retcode=0);

    static bool sendEvent(QObject *receiver, QEvent *event);
    static void postEvent(QObject *receiver, QEvent *event);
    static void sendPostedEvents(QObject *receiver, int event_type);
    static void sendPostedEvents();
    static void removePostedEvents(QObject *receiver);
    static bool hasPendingEvents();

    virtual bool notify(QObject *, QEvent *);

    static bool startingUp();
    static bool closingDown();

    static QString applicationDirPath();
    static QString applicationFilePath();

#ifndef QT_NO_LIBRARY
    static void setLibraryPaths(const QStringList &amp;);
    static QStringList libraryPaths();
    static void addLibraryPath(const QString &amp;);
    static void removeLibraryPath(const QString &amp;);
#endif // QT_NO_LIBRARY

#ifndef QT_NO_TRANSLATION
    static void installTranslator(QTranslator * messageFile);
    static void removeTranslator(QTranslator * messageFile);
#endif
    enum Encoding { DefaultCodec, UnicodeUTF8 };
    static QString translate(const char * context,
                             const char * key,
                             const char * comment = 0,
                             Encoding encoding = DefaultCodec);

    static void flush();

#if defined(QT3_SUPPORT)
    inline QT3_SUPPORT void lock() {}
    inline QT3_SUPPORT void unlock(bool = true) {}
    inline QT3_SUPPORT bool locked() { return false; }
    inline QT3_SUPPORT bool tryLock() { return false; }

    static inline QT3_SUPPORT void processOneEvent()
    { processEvents(QEventLoop::WaitForMoreEvents); }
    static QT3_SUPPORT int enter_loop();
    static QT3_SUPPORT void exit_loop();
    static QT3_SUPPORT int loopLevel();
#endif

#if defined(Q_WS_WIN)
    virtual bool winEventFilter(MSG *message, long *result);
#endif

#ifdef Q_OS_UNIX
    static void watchUnixSignal(int signal, bool watch);
#endif

    typedef bool (*EventFilter)(void *message, long *result);
    EventFilter setEventFilter(EventFilter filter);
    bool filterEvent(void *message, long *result);

public Q_SLOTS:
    static void quit();

Q_SIGNALS:
    void aboutToQuit();
    void unixSignal(int);

protected:
    bool event(QEvent *);

    virtual bool compressEvent(QEvent *, QObject *receiver, QPostEventList *);

protected:
    QCoreApplication(QCoreApplicationPrivate &amp;p);

private:
    static bool sendSpontaneousEvent(QObject *receiver, QEvent *event);

    void init();

    static QCoreApplication *self;

    friend class QEventDispatcherUNIXPrivate;
    friend class QApplication;
    friend class QApplicationPrivate;
    friend class QETWidget;
    friend class Q3AccelManager;
    friend class QShortcutMap;
    friend class QWidget;
    friend class QWidgetPrivate;
    friend bool qt_sendSpontaneousEvent(QObject*, QEvent*);
    friend Q_CORE_EXPORT QString qAppName();
};

inline bool QCoreApplication::sendEvent(QObject *receiver, QEvent *event)
{  if (event) event->spont = false; return self ? self->notify(receiver, event) : false; }

inline bool QCoreApplication::sendSpontaneousEvent(QObject *receiver, QEvent *event)
{ if (event) event->spont = true; return self ? self->notify(receiver, event) : false; }

inline void QCoreApplication::sendPostedEvents() { sendPostedEvents(0, 0); }

#ifdef QT_NO_TRANSLATION
// Simple versions
inline QString QCoreApplication::translate(const char *, const char *sourceText,
                                           const char *, Encoding encoding)
{
#ifndef QT_NO_TEXTCODEC
    if (encoding == UnicodeUTF8)
        return QString::fromUtf8(sourceText);
#else
    Q_UNUSED(encoding)
#endif
    return QString::fromLatin1(sourceText);
}
#endif

#define Q_DECLARE_TR_FUNCTIONS(context) \
public: \
    static inline QString tr(const char *sourceText, const char *comment = 0) \
        { return QCoreApplication::translate(#context, sourceText, comment); } \
    static inline QString trUtf8(const char *sourceText, const char *comment = 0) \
        { return QCoreApplication::translate(#context, sourceText, comment, \
                                             QCoreApplication::UnicodeUTF8); } \
private:

typedef void (*QtCleanUpFunction)();

Q_CORE_EXPORT void qAddPostRoutine(QtCleanUpFunction);
Q_CORE_EXPORT void qRemovePostRoutine(QtCleanUpFunction);
Q_CORE_EXPORT QString qAppName();                // get application name

#if defined(Q_WS_WIN) &amp;&amp; !defined(QT_NO_DEBUG_STREAM)
Q_CORE_EXPORT QString decodeMSG(const MSG &amp;);
Q_CORE_EXPORT QDebug operator&lt;&lt;(QDebug, const MSG &amp;);
#endif

#endif // QCOREAPPLICATION_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtCore/qcoreevent.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QCOREEVENT_H
#define QCOREEVENT_H

#include &lt;QtCore/qnamespace.h>

QT_MODULE(Core)

class QEventPrivate;
class Q_CORE_EXPORT QEvent           // event base class
{
    QDOC_PROPERTY(bool accepted READ isAccepted WRITE setAccepted)
public:
    enum Type {
        /*
          If you get a strange compiler error on the line with None,
          it's probably because you're also including X11 headers,
          which #define the symbol None. Put the X11 includes after
          the Qt includes to solve this problem.
        */
        None = 0,                               // invalid event
        Timer = 1,                              // timer event
        MouseButtonPress = 2,                   // mouse button pressed
        MouseButtonRelease = 3,                 // mouse button released
        MouseButtonDblClick = 4,                // mouse button double click
        MouseMove = 5,                          // mouse move
        KeyPress = 6,                           // key pressed
        KeyRelease = 7,                         // key released
        FocusIn = 8,                            // keyboard focus received
        FocusOut = 9,                           // keyboard focus lost
        Enter = 10,                             // mouse enters widget
        Leave = 11,                             // mouse leaves widget
        Paint = 12,                             // paint widget
        Move = 13,                              // move widget
        Resize = 14,                            // resize widget
        Create = 15,                            // after widget creation
        Destroy = 16,                           // during widget destruction
        Show = 17,                              // widget is shown
        Hide = 18,                              // widget is hidden
        Close = 19,                             // request to close widget
        Quit = 20,                              // request to quit application
        ParentChange = 21,                      // widget has been reparented
        ParentAboutToChange = 131,              // sent just before the parent change is done
#ifdef QT3_SUPPORT
        Reparent = ParentChange,
#endif
        ThreadChange = 22,                      // object has changed threads
        WindowActivate = 24,                    // window was activated
        WindowDeactivate = 25,                  // window was deactivated
        ShowToParent = 26,                      // widget is shown to parent
        HideToParent = 27,                      // widget is hidden to parent
        Wheel = 31,                             // wheel event
        WindowTitleChange = 33,                 // window title changed
        WindowIconChange = 34,                  // icon changed
        ApplicationWindowIconChange = 35,       // application icon changed
        ApplicationFontChange = 36,             // application font changed
        ApplicationLayoutDirectionChange = 37,  // application layout direction changed
        ApplicationPaletteChange = 38,          // application palette changed
        PaletteChange = 39,                     // widget palette changed
        Clipboard = 40,                         // internal clipboard event
        Speech = 42,                            // reserved for speech input
        MetaCall =  43,                         // meta call event
        SockAct = 50,                           // socket activation
        WinEventAct = 132,                      // win event activation
        DeferredDelete = 52,                    // deferred delete event
        DragEnter = 60,                         // drag moves into widget
        DragMove = 61,                          // drag moves in widget
        DragLeave = 62,                         // drag leaves or is cancelled
        Drop = 63,                              // actual drop
        DragResponse = 64,                      // drag accepted/rejected
        ChildAdded = 68,                        // new child widget
        ChildPolished = 69,                     // polished child widget
#ifdef QT3_SUPPORT
        ChildInserted = 70,                     // compatibility posted insert
        LayoutHint = 72,                        // compatibility relayout request
#endif
        ChildRemoved = 71,                      // deleted child widget
        ShowWindowRequest = 73,                 // widget's window should be mapped
        PolishRequest = 74,                     // widget should be polished
        Polish = 75,                            // widget is polished
        LayoutRequest = 76,                     // widget should be relayouted
        UpdateRequest = 77,                     // widget should be repainted
        UpdateLater = 78,                       // request update() later

        EmbeddingControl = 79,                  // ActiveX embedding
        ActivateControl = 80,                   // ActiveX activation
        DeactivateControl = 81,                 // ActiveX deactivation
        ContextMenu = 82,                       // context popup menu
        InputMethod = 83,                       // input method
        AccessibilityPrepare = 86,              // accessibility information is requested
        TabletMove = 87,                        // Wacom tablet event
        LocaleChange = 88,                      // the system locale changed
        LanguageChange = 89,                    // the application language changed
        LayoutDirectionChange = 90,             // the layout direction changed
        Style = 91,                             // internal style event
        TabletPress = 92,                       // tablet press
        TabletRelease = 93,                     // tablet release
        OkRequest = 94,                         // CE (Ok) button pressed
        HelpRequest = 95,                       // CE (?)  button pressed

        IconDrag = 96,                          // proxy icon dragged

        FontChange = 97,                        // font has changed
        EnabledChange = 98,                     // enabled state has changed
        ActivationChange = 99,                  // window activation has changed
        StyleChange = 100,                      // style has changed
        IconTextChange = 101,                   // icon text has changed
        ModifiedChange = 102,                   // modified state has changed
        MouseTrackingChange = 109,              // mouse tracking state has changed

        WindowBlocked = 103,                    // window is about to be blocked modally
        WindowUnblocked = 104,                  // windows modal blocking has ended
        WindowStateChange = 105,

        ToolTip = 110,
        WhatsThis = 111,
        StatusTip = 112,

        ActionChanged = 113,
        ActionAdded = 114,
        ActionRemoved = 115,

        FileOpen = 116,                         // file open request

        Shortcut = 117,                         // shortcut triggered
        ShortcutOverride = 51,                  // shortcut override request

#ifdef QT3_SUPPORT
        Accel = 30,                             // accelerator event
        AccelAvailable = 32,                    // accelerator available event
        AccelOverride = ShortcutOverride,       // accelerator override event
#endif

        WhatsThisClicked = 118,

#ifdef QT3_SUPPORT
        CaptionChange = WindowTitleChange,
        IconChange = WindowIconChange,
#endif
        ToolBarChange = 120,                    // toolbar visibility toggled

        ApplicationActivated = 121,             // application has been changed to active
        ApplicationDeactivated = 122,           // application has been changed to inactive

        QueryWhatsThis = 123,                   // query what's this widget help
        EnterWhatsThisMode = 124,
        LeaveWhatsThisMode = 125,

        ZOrderChange = 126,                     // child widget has had its z-order changed

        HoverEnter = 127,                       // mouse cursor enters a hover widget
        HoverLeave = 128,                       // mouse cursor leaves a hover widget
        HoverMove = 129,                        // mouse cursor move inside a hover widget

        AccessibilityHelp = 119,                // accessibility help text request
        AccessibilityDescription = 130,         // accessibility description text request

        // last event id used = 132

#ifdef QT_KEYPAD_NAVIGATION
        EnterEditFocus = 150,                   // enter edit mode in keypad navigation
        LeaveEditFocus = 151,                   // enter edit mode in keypad navigation
#endif
        AcceptDropsChange = 152,

        MenubarUpdated = 153,                    // Support event for Q3MainWindow, which needs to 
                                                 // knwow when QMenubar is updated.

        ZeroTimerEvent = 154,                   // Used for Windows Zero timer events

        User = 1000,                            // first user event id
        MaxUser = 65535                         // last user event id
    };

    QEvent(Type type);
    virtual ~QEvent();
    inline Type type() const { return static_cast&lt;Type>(t); }
    inline bool spontaneous() const { return spont; }

    inline void setAccepted(bool accepted) { m_accept = accepted; }
    inline bool isAccepted() const { return m_accept; }

    inline void accept() { m_accept = true; }
    inline void ignore() { m_accept = false; }

protected:
    QEventPrivate *d;
    ushort t;

private:
    ushort posted : 1;
    ushort spont : 1;
    ushort m_accept : 1;
    ushort reserved : 13;

    friend class QCoreApplication;
    friend class QCoreApplicationPrivate;
    friend class QThreadData;
    friend class QApplication;
    friend class QApplicationPrivate;
    friend class Q3AccelManager;
    friend class QShortcutMap;
    friend class QETWidget;
};

class Q_CORE_EXPORT QTimerEvent : public QEvent
{
public:
    QTimerEvent( int timerId );
    ~QTimerEvent();
    int timerId() const { return id; }
protected:
    int id;
};

class QObject;

class Q_CORE_EXPORT QChildEvent : public QEvent
{
public:
    QChildEvent( Type type, QObject *child );
    ~QChildEvent();
    QObject *child() const { return c; }
    bool added() const { return type() == ChildAdded; }
#ifdef QT3_SUPPORT
    QT3_SUPPORT bool inserted() const { return type() == ChildInserted; }
#endif
    bool polished() const { return type() == ChildPolished; }
    bool removed() const { return type() == ChildRemoved; }
protected:
    QObject *c;
};

#ifdef QT3_SUPPORT
class Q_CORE_EXPORT QCustomEvent : public QEvent
{
public:
    QT3_SUPPORT_CONSTRUCTOR QCustomEvent(int type, void *data = 0);
    ~QCustomEvent();
    QT3_SUPPORT void *data()  const { return d; }
    QT3_SUPPORT void setData(void* data) { d = reinterpret_cast&lt;QEventPrivate *>(data); }
};
#endif

#endif // QCOREEVENT_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtCore/qdatastream.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QDATASTREAM_H
#define QDATASTREAM_H

#include &lt;QtCore/qiodevice.h>
#include &lt;QtCore/qglobal.h>

#ifdef Status
#error qdatastream.h must be included before any header file that defines Status
#endif

QT_MODULE(Core)

class QByteArray;
class QIODevice;

template &lt;typename T> class QList;
template &lt;typename T> class QLinkedList;
template &lt;typename T> class QVector;
template &lt;typename T> class QSet;
template &lt;class Key, class T> class QHash;
template &lt;class Key, class T> class QMap;

class QDataStreamPrivate;

#ifndef QT_NO_DATASTREAM
class Q_CORE_EXPORT QDataStream
{
public:
    enum Version {
        Qt_1_0 = 1,
        Qt_2_0 = 2,
        Qt_2_1 = 3,
        Qt_3_0 = 4,
        Qt_3_1 = 5,
        Qt_3_3 = 6,
        Qt_4_0 = 7,
        Qt_4_1 = Qt_4_0
#if QT_VERSION >= 0x040200
#error Add Qt_4_2 = Qt_4_1
#endif
    };

    enum ByteOrder {
        BigEndian = QSysInfo::BigEndian,
        LittleEndian = QSysInfo::LittleEndian
    };

    enum Status {
        Ok,
        ReadPastEnd,
	ReadCorruptData
    };

    QDataStream();
    explicit QDataStream(QIODevice *);
#ifdef QT3_SUPPORT
    QDataStream(QByteArray *, int mode);
#endif
    QDataStream(QByteArray *, QIODevice::OpenMode flags);
    QDataStream(const QByteArray &amp;);
    virtual ~QDataStream();

    QIODevice *device() const;
    void setDevice(QIODevice *);
    void unsetDevice();

    bool atEnd() const;
#ifdef QT3_SUPPORT
    inline QT3_SUPPORT bool eof() const { return atEnd(); }
#endif

    Status status() const;
    void setStatus(Status status);
    void resetStatus();

    ByteOrder byteOrder() const;
    void setByteOrder(ByteOrder);

    int version() const;
    void setVersion(int);

    QDataStream &amp;operator>>(qint8 &amp;i);
    QDataStream &amp;operator>>(quint8 &amp;i);
    QDataStream &amp;operator>>(qint16 &amp;i);
    QDataStream &amp;operator>>(quint16 &amp;i);
    QDataStream &amp;operator>>(qint32 &amp;i);
    QDataStream &amp;operator>>(quint32 &amp;i);
    QDataStream &amp;operator>>(qint64 &amp;i);
    QDataStream &amp;operator>>(quint64 &amp;i);

    QDataStream &amp;operator>>(bool &amp;i);
    QDataStream &amp;operator>>(float &amp;f);
    QDataStream &amp;operator>>(double &amp;f);
    QDataStream &amp;operator>>(char *&amp;str);

    QDataStream &amp;operator&lt;&lt;(qint8 i);
    QDataStream &amp;operator&lt;&lt;(quint8 i);
    QDataStream &amp;operator&lt;&lt;(qint16 i);
    QDataStream &amp;operator&lt;&lt;(quint16 i);
    QDataStream &amp;operator&lt;&lt;(qint32 i);
    QDataStream &amp;operator&lt;&lt;(quint32 i);
    QDataStream &amp;operator&lt;&lt;(qint64 i);
    QDataStream &amp;operator&lt;&lt;(quint64 i);
    QDataStream &amp;operator&lt;&lt;(bool i);
    QDataStream &amp;operator&lt;&lt;(float f);
    QDataStream &amp;operator&lt;&lt;(double f);
    QDataStream &amp;operator&lt;&lt;(const char *str);

    QDataStream &amp;readBytes(char *&amp;, uint &amp;len);
    int readRawData(char *, int len);

    QDataStream &amp;writeBytes(const char *, uint len);
    int writeRawData(const char *, int len);

    int skipRawData(int len);

#ifdef QT3_SUPPORT
    inline QT3_SUPPORT QDataStream &amp;readRawBytes(char *str, uint len)
        { readRawData(str, (int)len); return *this; }
    inline QT3_SUPPORT QDataStream &amp;writeRawBytes(const char *str, uint len)
        { writeRawData(str, (int)len); return *this; }
    inline QT3_SUPPORT bool isPrintableData() const { return false; }
    inline QT3_SUPPORT void setPrintableData(bool) {}
#endif

private:
    Q_DISABLE_COPY(QDataStream)

    QDataStreamPrivate *d;

    QIODevice *dev;
    bool owndev;
    bool noswap;
    ByteOrder byteorder;
    int ver;
    Status q_status;
};


/*****************************************************************************
  QDataStream inline functions
 *****************************************************************************/

inline QIODevice *QDataStream::device() const
{ return dev; }

inline QDataStream::ByteOrder QDataStream::byteOrder() const
{ return byteorder; }

inline int QDataStream::version() const
{ return ver; }

inline void QDataStream::setVersion(int v)
{ ver = v; }

inline QDataStream &amp;QDataStream::operator>>(quint8 &amp;i)
{ return *this >> reinterpret_cast&lt;qint8&amp;>(i); }

inline QDataStream &amp;QDataStream::operator>>(quint16 &amp;i)
{ return *this >> reinterpret_cast&lt;qint16&amp;>(i); }

inline QDataStream &amp;QDataStream::operator>>(quint32 &amp;i)
{ return *this >> reinterpret_cast&lt;qint32&amp;>(i); }

inline QDataStream &amp;QDataStream::operator>>(quint64 &amp;i)
{ return *this >> reinterpret_cast&lt;qint64&amp;>(i); }

inline QDataStream &amp;QDataStream::operator&lt;&lt;(quint8 i)
{ return *this &lt;&lt; qint8(i); }

inline QDataStream &amp;QDataStream::operator&lt;&lt;(quint16 i)
{ return *this &lt;&lt; qint16(i); }

inline QDataStream &amp;QDataStream::operator&lt;&lt;(quint32 i)
{ return *this &lt;&lt; qint32(i); }

inline QDataStream &amp;QDataStream::operator&lt;&lt;(quint64 i)
{ return *this &lt;&lt; qint64(i); }

template &lt;typename T>
QDataStream&amp; operator>>(QDataStream&amp; s, QList&lt;T>&amp; l)
{
    l.clear();
    quint32 c;
    s >> c;
    for(quint32 i = 0; i &lt; c; ++i)
    {
        T t;
        s >> t;
        l.append(t);
        if (s.atEnd())
            break;
    }
    return s;
}

template &lt;typename T>
QDataStream&amp; operator&lt;&lt;(QDataStream&amp; s, const QList&lt;T>&amp; l)
{
    s &lt;&lt; quint32(l.size());
    for (int i = 0; i &lt; l.size(); ++i)
        s &lt;&lt; l.at(i);
    return s;
}

template &lt;typename T>
QDataStream&amp; operator>>(QDataStream&amp; s, QLinkedList&lt;T>&amp; l)
{
    l.clear();
    quint32 c;
    s >> c;
    for(quint32 i = 0; i &lt; c; ++i)
    {
        T t;
        s >> t;
        l.append(t);
        if (s.atEnd())
            break;
    }
    return s;
}

template &lt;typename T>
QDataStream&amp; operator&lt;&lt;(QDataStream&amp; s, const QLinkedList&lt;T>&amp; l)
{
    s &lt;&lt; quint32(l.size());
    typename QLinkedList&lt;T>::ConstIterator it = l.constBegin();
    for(; it != l.constEnd(); ++it)
        s &lt;&lt; *it;
    return s;
}

template&lt;typename T>
QDataStream&amp; operator>>(QDataStream&amp; s, QVector&lt;T>&amp; v)
{
    v.clear();
    quint32 c;
    s >> c;
    v.resize(c);
    for(quint32 i = 0; i &lt; c; ++i) {
        T t;
        s >> t;
        v[i] = t;
    }
    return s;
}

template&lt;typename T>
QDataStream&amp; operator&lt;&lt;(QDataStream&amp; s, const QVector&lt;T>&amp; v)
{
    s &lt;&lt; quint32(v.size());
    const T* it = v.begin();
    for(; it != v.end(); ++it)
        s &lt;&lt; *it;
    return s;
}

template &lt;typename T>
QDataStream &amp;operator>>(QDataStream &amp;in, QSet&lt;T> &amp;set)
{
    set.clear();
    quint32 c;
    in >> c;
    for (quint32 i = 0; i &lt; c; ++i) {
        T t;
        in >> t;
        set &lt;&lt; t;
        if (in.atEnd())
            break;
    }
    return in;
}

template &lt;typename T>
QDataStream&amp; operator&lt;&lt;(QDataStream &amp;out, const QSet&lt;T> &amp;set)
{
    out &lt;&lt; quint32(set.size());
    typename QSet&lt;T>::const_iterator i = set.constBegin();
    while (i != set.constEnd()) {
        out &lt;&lt; *i;
        ++i;
    }
    return out;
}

template &lt;class Key, class T>
Q_OUTOFLINE_TEMPLATE QDataStream &amp;operator>>(QDataStream &amp;in, QHash&lt;Key, T> &amp;hash)
{
    QDataStream::Status oldStatus = in.status();
    in.resetStatus();
    hash.clear();

    quint32 n;
    in >> n;

    for (quint32 i = 0; i &lt; n; ++i) {
        if (in.status() != QDataStream::Ok)
            break;

        Key k;
        T t;
        in >> k >> t;
        hash.insertMulti(k, t);
    }

    if (in.status() != QDataStream::Ok)
        hash.clear();
    if (oldStatus != QDataStream::Ok)
        in.setStatus(oldStatus);
    return in;
}

template &lt;class Key, class T>
Q_OUTOFLINE_TEMPLATE QDataStream &amp;operator&lt;&lt;(QDataStream &amp;out, const QHash&lt;Key, T>&amp; hash)
{
    out &lt;&lt; quint32(hash.size());
    typename QHash&lt;Key, T>::ConstIterator it = hash.end();
    typename QHash&lt;Key, T>::ConstIterator begin = hash.begin();
    while (it != begin) {
        --it;
        out &lt;&lt; it.key() &lt;&lt; it.value();
    }
    return out;
}
#ifdef qdoc
template &lt;class Key, class T>
Q_OUTOFLINE_TEMPLATE QDataStream &amp;operator>>(QDataStream &amp;in, QMap&lt;Key, T> &amp;map)
#else
template &lt;class aKey, class aT>
Q_OUTOFLINE_TEMPLATE QDataStream &amp;operator>>(QDataStream &amp;in, QMap&lt;aKey, aT> &amp;map)
#endif
{
    QDataStream::Status oldStatus = in.status();
    in.resetStatus();
    map.clear();

    quint32 n;
    in >> n;

    map.detach();
#if !defined(Q_CC_BOR)
    map.d->insertInOrder = true;
#endif
    for (quint32 i = 0; i &lt; n; ++i) {
        if (in.status() != QDataStream::Ok)
            break;

        aKey key;
        aT value;
        in >> key >> value;
        map.insertMulti(key, value);
    }
#if !defined(Q_CC_BOR)
    map.d->insertInOrder = false;
#endif
    if (in.status() != QDataStream::Ok)
        map.clear();
    if (oldStatus != QDataStream::Ok)
        in.setStatus(oldStatus);
    return in;
}

template &lt;class Key, class T>
Q_OUTOFLINE_TEMPLATE QDataStream &amp;operator&lt;&lt;(QDataStream &amp;out, const QMap&lt;Key, T> &amp;map)
{
    out &lt;&lt; quint32(map.size());
    typename QMap&lt;Key, T>::ConstIterator it = map.end();
    typename QMap&lt;Key, T>::ConstIterator begin = map.begin();
    while (it != begin) {
        --it;
        out &lt;&lt; it.key() &lt;&lt; it.value();
    }
    return out;
}

#endif // QT_NO_DATASTREAM

#endif // QDATASTREAM_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtCore/qdatetime.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QDATETIME_H
#define QDATETIME_H

#include &lt;QtCore/qstring.h>
#include &lt;QtCore/qnamespace.h>

QT_MODULE(Core)

class Q_CORE_EXPORT QDate
{
public:
    QDate() { jd = 0; }
    QDate(int y, int m, int d);

    bool isNull() const { return jd == 0; }
    bool isValid() const;

    int year() const;
    int month() const;
    int day() const;
    int dayOfWeek() const;
    int dayOfYear() const;
    int daysInMonth() const;
    int daysInYear() const;
    int weekNumber(int *yearNum = 0) const;

#ifndef QT_NO_TEXTDATE
#ifdef QT3_SUPPORT
    static QT3_SUPPORT QString monthName(int month) { return shortMonthName(month); }
    static QT3_SUPPORT QString dayName(int weekday) { return shortDayName(weekday); }
#endif
    static QString shortMonthName(int month);
    static QString shortDayName(int weekday);
    static QString longMonthName(int month);
    static QString longDayName(int weekday);
#endif // QT_NO_TEXTDATE
#ifndef QT_NO_DATESTRING
    QString toString(Qt::DateFormat f = Qt::TextDate) const;
    QString toString(const QString &amp;format) const;
#endif
    bool setYMD(int y, int m, int d);

    QDate addDays(int days) const;
    QDate addMonths(int months) const;
    QDate addYears(int years) const;
    int daysTo(const QDate &amp;) const;

    bool operator==(const QDate &amp;other) const { return jd == other.jd; }
    bool operator!=(const QDate &amp;other) const { return jd != other.jd; }
    bool operator&lt;(const QDate &amp;other) const { return jd &lt; other.jd; }
    bool operator&lt;=(const QDate &amp;other) const { return jd &lt;= other.jd; }
    bool operator>(const QDate &amp;other) const { return jd > other.jd; }
    bool operator>=(const QDate &amp;other) const { return jd >= other.jd; }

    static QDate currentDate();
#ifndef QT_NO_DATESTRING
    static QDate fromString(const QString &amp;s, Qt::DateFormat f = Qt::TextDate);
    static QDate fromString(const QString &amp;s, const QString &amp;format);
#endif
    static bool isValid(int y, int m, int d);
    static bool isLeapYear(int year);
#ifdef QT3_SUPPORT
    inline static QT3_SUPPORT bool leapYear(int year) { return isLeapYear(year); }
#endif

    static uint gregorianToJulian(int y, int m, int d);
    static void julianToGregorian(uint jd, int &amp;y, int &amp;m, int &amp;d);

#ifdef QT3_SUPPORT
    static QT3_SUPPORT QDate currentDate(Qt::TimeSpec spec);
#endif

    static inline QDate fromJulianDay(int jd) { QDate d; d.jd = jd; return d; }
    inline int toJulianDay() const { return jd; }

private:
    uint jd;

    friend class QDateTime;
    friend class QDateTimePrivate;
#ifndef QT_NO_DATASTREAM
    friend Q_CORE_EXPORT QDataStream &amp;operator&lt;&lt;(QDataStream &amp;, const QDate &amp;);
    friend Q_CORE_EXPORT QDataStream &amp;operator>>(QDataStream &amp;, QDate &amp;);
#endif
};
Q_DECLARE_TYPEINFO(QDate, Q_MOVABLE_TYPE);

class Q_CORE_EXPORT QTime
{
public:
    QTime(): mds(NullTime) {}
    QTime(int h, int m, int s = 0, int ms = 0);

    bool isNull() const { return mds == NullTime; }
    bool isValid() const;

    int hour() const;
    int minute() const;
    int second() const;
    int msec() const;
#ifndef QT_NO_DATESTRING
    QString toString(Qt::DateFormat f = Qt::TextDate) const;
    QString toString(const QString &amp;format) const;
#endif
    bool setHMS(int h, int m, int s, int ms = 0);

    QTime addSecs(int secs) const;
    int secsTo(const QTime &amp;) const;
    QTime addMSecs(int ms) const;
    int msecsTo(const QTime &amp;) const;

    bool operator==(const QTime &amp;other) const { return mds == other.mds; }
    bool operator!=(const QTime &amp;other) const { return mds != other.mds; }
    bool operator&lt;(const QTime &amp;other) const { return mds &lt; other.mds; }
    bool operator&lt;=(const QTime &amp;other) const { return mds &lt;= other.mds; }
    bool operator>(const QTime &amp;other) const { return mds > other.mds; }
    bool operator>=(const QTime &amp;other) const { return mds >= other.mds; }

    static QTime currentTime();
#ifndef QT_NO_DATESTRING
    static QTime fromString(const QString &amp;s, Qt::DateFormat f = Qt::TextDate);
#endif
    static QTime fromString(const QString &amp;s, const QString &amp;format);
    static bool isValid(int h, int m, int s, int ms = 0);

#ifdef QT3_SUPPORT
    static QT3_SUPPORT QTime currentTime(Qt::TimeSpec spec);
    static QT3_SUPPORT QDate currentDate(Qt::TimeSpec spec);
#endif

    void start();
    int restart();
    int elapsed() const;

private:
    enum { NullTime = -1 };
    inline int ds() const { return mds == -1 ? 0 : mds; }
    int mds;

    friend class QDateTime;
    friend class QDateTimePrivate;
#ifndef QT_NO_DATASTREAM
    friend Q_CORE_EXPORT QDataStream &amp;operator&lt;&lt;(QDataStream &amp;, const QTime &amp;);
    friend Q_CORE_EXPORT QDataStream &amp;operator>>(QDataStream &amp;, QTime &amp;);
#endif
};
Q_DECLARE_TYPEINFO(QTime, Q_MOVABLE_TYPE);

class QDateTimePrivate;

class Q_CORE_EXPORT QDateTime
{
public:
    QDateTime();
    explicit QDateTime(const QDate &amp;);
    QDateTime(const QDate &amp;, const QTime &amp;, Qt::TimeSpec spec = Qt::LocalTime);
    QDateTime(const QDateTime &amp;other);
    ~QDateTime();

    QDateTime &amp;operator=(const QDateTime &amp;other);

    bool isNull() const;
    bool isValid() const;

    QDate date() const;
    QTime time() const;
    Qt::TimeSpec timeSpec() const;
    uint toTime_t() const;
    void setDate(const QDate &amp;date);
    void setTime(const QTime &amp;time);
    void setTimeSpec(Qt::TimeSpec spec);
    void setTime_t(uint secsSince1Jan1970UTC);
#ifndef QT_NO_DATESTRING
    QString toString(Qt::DateFormat f = Qt::TextDate) const;
    QString toString(const QString &amp;format) const;
#endif
    QDateTime addDays(int days) const;
    QDateTime addMonths(int months) const;
    QDateTime addYears(int years) const;
    QDateTime addSecs(int secs) const;
    QDateTime addMSecs(qint64 msecs) const;
    QDateTime toTimeSpec(Qt::TimeSpec spec) const;
    inline QDateTime toLocalTime() const { return toTimeSpec(Qt::LocalTime); }
    inline QDateTime toUTC() const { return toTimeSpec(Qt::UTC); }
    int daysTo(const QDateTime &amp;) const;
    int secsTo(const QDateTime &amp;) const;

    bool operator==(const QDateTime &amp;other) const;
    inline bool operator!=(const QDateTime &amp;other) const { return !(*this == other); }
    bool operator&lt;(const QDateTime &amp;other) const;
    inline bool operator&lt;=(const QDateTime &amp;other) const { return !(other &lt; *this); }
    inline bool operator>(const QDateTime &amp;other) const { return other &lt; *this; }
    inline bool operator>=(const QDateTime &amp;other) const { return !(*this &lt; other); }

    static QDateTime currentDateTime();
#ifndef QT_NO_DATESTRING
    static QDateTime fromString(const QString &amp;s, Qt::DateFormat f = Qt::TextDate);
#endif
    static QDateTime fromString(const QString &amp;s, const QString &amp;format);

#ifdef QT3_SUPPORT
    inline QT3_SUPPORT void setTime_t(uint secsSince1Jan1970UTC, Qt::TimeSpec spec) {
        setTime_t(secsSince1Jan1970UTC);
        if (spec == Qt::UTC)
            *this = toUTC();
    }
    static inline QT3_SUPPORT QDateTime currentDateTime(Qt::TimeSpec spec) {
        if (spec == Qt::LocalTime)
            return currentDateTime();
        else
            return currentDateTime().toUTC();
    }
#endif

private:
    friend class QDateTimePrivate;
    void detach();
    QDateTimePrivate *d;

#ifndef QT_NO_DATASTREAM
    friend Q_CORE_EXPORT QDataStream &amp;operator&lt;&lt;(QDataStream &amp;, const QDateTime &amp;);
    friend Q_CORE_EXPORT QDataStream &amp;operator>>(QDataStream &amp;, QDateTime &amp;);
#endif
};
Q_DECLARE_TYPEINFO(QDateTime, Q_MOVABLE_TYPE);

#ifdef QT3_SUPPORT
inline QDate QDate::currentDate(Qt::TimeSpec spec)
{
    if (spec == Qt::LocalTime)
        return currentDate();
    else
        return QDateTime::currentDateTime().toUTC().date();
}

inline QTime QTime::currentTime(Qt::TimeSpec spec)
{
    if (spec == Qt::LocalTime)
        return currentTime();
    else
        return QDateTime::currentDateTime().toUTC().time();
}
#endif

#ifndef QT_NO_DATASTREAM
Q_CORE_EXPORT QDataStream &amp;operator&lt;&lt;(QDataStream &amp;, const QDate &amp;);
Q_CORE_EXPORT QDataStream &amp;operator>>(QDataStream &amp;, QDate &amp;);
Q_CORE_EXPORT QDataStream &amp;operator&lt;&lt;(QDataStream &amp;, const QTime &amp;);
Q_CORE_EXPORT QDataStream &amp;operator>>(QDataStream &amp;, QTime &amp;);
Q_CORE_EXPORT QDataStream &amp;operator&lt;&lt;(QDataStream &amp;, const QDateTime &amp;);
Q_CORE_EXPORT QDataStream &amp;operator>>(QDataStream &amp;, QDateTime &amp;);
#endif // QT_NO_DATASTREAM

#if !defined(QT_NO_DEBUG_STREAM) &amp;&amp; !defined(QT_NO_DATESTRING)
Q_CORE_EXPORT QDebug operator&lt;&lt;(QDebug, const QDate &amp;);
Q_CORE_EXPORT QDebug operator&lt;&lt;(QDebug, const QTime &amp;);
Q_CORE_EXPORT QDebug operator&lt;&lt;(QDebug, const QDateTime &amp;);
#endif

#endif // QDATETIME_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtCore/qdebug.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QDEBUG_H
#define QDEBUG_H

#include &lt;QtCore/qalgorithms.h>
#include &lt;QtCore/qhash.h>
#include &lt;QtCore/qlist.h>
#include &lt;QtCore/qmap.h>
#include &lt;QtCore/qpair.h>
#include &lt;QtCore/qtextstream.h>
#include &lt;QtCore/qstring.h>
#include &lt;QtCore/qvector.h>

QT_MODULE(Core)

#if !defined(QT_NO_DEBUG_STREAM)
class Q_CORE_EXPORT QDebug
{
    struct Stream {
        Stream(QtMsgType t) : ts(&amp;buffer, QIODevice::WriteOnly), ref(1), type(t), space(true){}
        QTextStream ts;
        QString buffer;
        int ref;
        QtMsgType type;
        bool space;
    } *stream;
public:
    inline QDebug(QtMsgType t) : stream(new Stream(t)) {}
    inline QDebug(const QDebug &amp;o):stream(o.stream) { ++stream->ref; }
    inline QDebug &amp;operator=(const QDebug &amp;other);
    inline ~QDebug()
        { if (!--stream->ref) { qt_message_output(stream->type, stream->buffer.toLocal8Bit().data()); delete stream; } }
    inline QDebug &amp;space() { stream->space = true; stream->ts &lt;&lt; " "; return *this; }
    inline QDebug &amp;nospace() { stream->space = false; return *this; }
    inline QDebug &amp;maybeSpace() { if (stream->space) stream->ts &lt;&lt; " "; return *this; }

    inline QDebug &amp;operator&lt;&lt;(QChar t) { stream->ts &lt;&lt; "\'" &lt;&lt; t &lt;&lt; "\'"; return maybeSpace(); }
    inline QDebug &amp;operator&lt;&lt;(bool t) { stream->ts &lt;&lt; (t ? "true" : "false"); return maybeSpace(); }
    inline QDebug &amp;operator&lt;&lt;(char t) { stream->ts &lt;&lt; t; return maybeSpace(); }
    inline QDebug &amp;operator&lt;&lt;(signed short t) { stream->ts &lt;&lt; t; return maybeSpace(); }
    inline QDebug &amp;operator&lt;&lt;(unsigned short t) { stream->ts &lt;&lt; t; return maybeSpace(); }
    inline QDebug &amp;operator&lt;&lt;(signed int t) { stream->ts &lt;&lt; t; return maybeSpace(); }
    inline QDebug &amp;operator&lt;&lt;(unsigned int t) { stream->ts &lt;&lt; t; return maybeSpace(); }
    inline QDebug &amp;operator&lt;&lt;(signed long t) { stream->ts &lt;&lt; t; return maybeSpace(); }
    inline QDebug &amp;operator&lt;&lt;(unsigned long t) { stream->ts &lt;&lt; t; return maybeSpace(); }
    inline QDebug &amp;operator&lt;&lt;(qint64 t)
        { stream->ts &lt;&lt; QString::number(t); return maybeSpace(); }
    inline QDebug &amp;operator&lt;&lt;(quint64 t)
        { stream->ts &lt;&lt; QString::number(t); return maybeSpace(); }
    inline QDebug &amp;operator&lt;&lt;(float t) { stream->ts &lt;&lt; t; return maybeSpace(); }
    inline QDebug &amp;operator&lt;&lt;(double t) { stream->ts &lt;&lt; t; return maybeSpace(); }
    inline QDebug &amp;operator&lt;&lt;(const char* t) { stream->ts  &lt;&lt; t; return maybeSpace(); }
    inline QDebug &amp;operator&lt;&lt;(const QString &amp; t) { stream->ts &lt;&lt; "\"" &lt;&lt; t  &lt;&lt; "\""; return maybeSpace(); }
    inline QDebug &amp;operator&lt;&lt;(const QLatin1String &amp;t) { stream->ts &lt;&lt; "\""  &lt;&lt; t.latin1() &lt;&lt; "\""; return maybeSpace(); }
    inline QDebug &amp;operator&lt;&lt;(const QByteArray &amp; t) { stream->ts  &lt;&lt; "\"" &lt;&lt; t &lt;&lt; "\""; return maybeSpace(); }
    inline QDebug &amp;operator&lt;&lt;(const void * t) { stream->ts &lt;&lt; t; return maybeSpace(); }
    inline QDebug &amp;operator&lt;&lt;(QTextStreamFunction f) {
        stream->ts &lt;&lt; f;
        return *this;
    }

    inline QDebug &amp;operator&lt;&lt;(QTextStreamManipulator m)
    { stream->ts &lt;&lt; m; return *this; }
};

inline QDebug &amp;QDebug::operator=(const QDebug &amp;other)
{
    if (this != &amp;other) {
        QDebug copy(other);
        qSwap(stream, copy.stream);
    }
    return *this;
}

template &lt;class T>
inline QDebug operator&lt;&lt;(QDebug debug, const QList&lt;T> &amp;list)
{
    debug.nospace() &lt;&lt; "(";
    for (Q_TYPENAME QList&lt;T>::size_type i = 0; i &lt; list.count(); ++i) {
        if (i)
            debug &lt;&lt; ", ";
        debug &lt;&lt; list.at(i);
    }
    debug &lt;&lt; ")";
    return debug.space();
}

template &lt;typename T>
inline QDebug operator&lt;&lt;(QDebug debug, const QVector&lt;T> &amp;vec)
{
    return operator&lt;&lt;(debug, vec.toList());
}

template &lt;class aKey, class aT>
inline QDebug operator&lt;&lt;(QDebug debug, const QMap&lt;aKey, aT> &amp;map)
{
    debug.nospace() &lt;&lt; "QMap(";
    for (typename QMap&lt;aKey, aT>::const_iterator it = map.constBegin();
         it != map.constEnd(); ++it) {
        debug &lt;&lt; "(" &lt;&lt; it.key() &lt;&lt; ", " &lt;&lt; it.value() &lt;&lt; ")";
    }
    debug &lt;&lt; ")";
    return debug.space();
}

template &lt;class aKey, class aT>
inline QDebug operator&lt;&lt;(QDebug debug, const QHash&lt;aKey, aT> &amp;hash)
{
    debug.nospace() &lt;&lt; "QHash(";
    for (typename QHash&lt;aKey, aT>::const_iterator it = hash.constBegin();
            it != hash.constEnd(); ++it)
        debug &lt;&lt; "(" &lt;&lt; it.key() &lt;&lt; ", " &lt;&lt; it.value() &lt;&lt; ")";
    debug &lt;&lt; ")";
    return debug.space();
}

template &lt;class T1, class T2>
inline QDebug operator&lt;&lt;(QDebug debug, const QPair&lt;T1, T2> &amp;pair)
{
    debug.nospace() &lt;&lt; "QPair(" &lt;&lt; pair.first &lt;&lt; "," &lt;&lt; pair.second &lt;&lt; ")";
    return debug.space();
}

inline Q_CORE_EXPORT QDebug qDebug() { return QDebug(QtDebugMsg); }
inline Q_CORE_EXPORT QDebug qWarning() { return QDebug(QtWarningMsg); }
inline Q_CORE_EXPORT QDebug qCritical() { return QDebug(QtCriticalMsg); }

#else // QT_NO_DEBUG_STREAM

class QNoDebug
{
public:
    inline QNoDebug(){}
    inline QNoDebug(const QDebug &amp;){}
    inline ~QNoDebug(){}
#if !defined( QT_NO_TEXTSTREAM )
    inline QNoDebug &amp;operator&lt;&lt;(QTextStreamFunction) { return *this; }
    inline QNoDebug &amp;operator&lt;&lt;(QTextStreamManipulator) { return *this; }
#endif
    inline QNoDebug &amp;space() { return *this; }
    inline QNoDebug &amp;nospace() { return *this; }
    inline QNoDebug &amp;maybeSpace() { return *this; }

#ifndef QT_NO_MEMBER_TEMPLATES
    template&lt;typename T>
    inline QNoDebug &amp;operator&lt;&lt;(const T &amp;) { return *this; }
#endif
};
#undef qDebug
inline QNoDebug qDebug() { return QNoDebug(); }
#define qDebug if(1) ; else qDebug

#ifdef QT_NO_MEMBER_TEMPLATES
template&lt;typename T>
inline QNoDebug operator&lt;&lt;(QNoDebug debug, const T &amp;) { return debug; }
#endif

#endif

#endif // QDEBUG_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtCore/qdir.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QDIR_H
#define QDIR_H

#include &lt;QtCore/qstring.h>
#include &lt;QtCore/qfileinfo.h>
#include &lt;QtCore/qstringlist.h>

QT_MODULE(Core)

class QDirPrivate;

class Q_CORE_EXPORT QDir
{
protected:
    QDirPrivate *d_ptr;
private:
    Q_DECLARE_PRIVATE(QDir)
public:
    enum Filter { Dirs        = 0x001,
                  Files       = 0x002,
                  Drives      = 0x004,
                  NoSymLinks  = 0x008,
                  AllEntries  = Dirs | Files | Drives,
                  TypeMask    = 0x00f,
#ifdef QT3_SUPPORT
                  All         = AllEntries,
#endif

                  Readable    = 0x010,
                  Writable    = 0x020,
                  Executable  = 0x040,
                  PermissionMask    = 0x070,
#ifdef QT3_SUPPORT
                  RWEMask     = 0x070,
#endif

                  Modified    = 0x080,
                  Hidden      = 0x100,
                  System      = 0x200,
                 
                  AccessMask  = 0x3F0,

                  AllDirs       = 0x400,
                  CaseSensitive = 0x800,
                  NoDotAndDotDot = 0x1000,

                  NoFilter = -1
#ifdef QT3_SUPPORT
                  ,DefaultFilter = NoFilter
#endif
    };
    Q_DECLARE_FLAGS(Filters, Filter)
#ifdef QT3_SUPPORT
    typedef Filters FilterSpec;
#endif

    enum SortFlag { Name        = 0x00,
                    Time        = 0x01,
                    Size        = 0x02,
                    Unsorted    = 0x03,
                    SortByMask  = 0x03,

                    DirsFirst   = 0x04,
                    Reversed    = 0x08,
                    IgnoreCase  = 0x10,
                    DirsLast    = 0x20,
                    LocaleAware = 0x40, 
                    Type        = 0x80,
                    NoSort = -1
#ifdef QT3_SUPPORT
                  ,DefaultSort = NoSort
#endif
    };
    Q_DECLARE_FLAGS(SortFlags, SortFlag)

    QDir(const QDir &amp;);
    QDir(const QString &amp;path = QString());
    QDir(const QString &amp;path, const QString &amp;nameFilter,
         SortFlags sort = SortFlags(Name | IgnoreCase), Filters filter = AllEntries);
    ~QDir();

    QDir &amp;operator=(const QDir &amp;);
    QDir &amp;operator=(const QString &amp;path);

    void setPath(const QString &amp;path);
    QString path() const;
    QString absolutePath() const;
    QString canonicalPath() const;

    static void addResourceSearchPath(const QString &amp;path);

    QString dirName() const;
    QString filePath(const QString &amp;fileName) const;
    QString absoluteFilePath(const QString &amp;fileName) const;
    QString relativeFilePath(const QString &amp;fileName) const;

    static QString convertSeparators(const QString &amp;pathName);

    bool cd(const QString &amp;dirName);
    bool cdUp();

    QStringList nameFilters() const;
    void setNameFilters(const QStringList &amp;nameFilters);

    Filters filter() const;
    void setFilter(Filters filter);
    SortFlags sorting() const;
    void setSorting(SortFlags sort);

    uint count() const;
    QString operator[](int) const;

    static QStringList nameFiltersFromString(const QString &amp;nameFilter);

    QStringList entryList(Filters filters = NoFilter, SortFlags sort = NoSort) const;
    QStringList entryList(const QStringList &amp;nameFilters, Filters filters = NoFilter,
                          SortFlags sort = NoSort) const;

    QFileInfoList entryInfoList(Filters filters = NoFilter, SortFlags sort = NoSort) const;
    QFileInfoList entryInfoList(const QStringList &amp;nameFilters, Filters filters = NoFilter,
                                SortFlags sort = NoSort) const;

    bool mkdir(const QString &amp;dirName) const;
    bool rmdir(const QString &amp;dirName) const;
    bool mkpath(const QString &amp;dirPath) const;
    bool rmpath(const QString &amp;dirPath) const;

    bool isReadable() const;
    bool exists() const;
    bool isRoot() const;

    static bool isRelativePath(const QString &amp;path);
    inline static bool isAbsolutePath(const QString &amp;path) { return !isRelativePath(path); }
    bool isRelative() const;
    inline bool isAbsolute() const { return !isRelative(); }
    bool makeAbsolute();

    bool operator==(const QDir &amp;dir) const;
    inline bool operator!=(const QDir &amp;dir) const {  return !operator==(dir); }

    bool remove(const QString &amp;fileName);
    bool rename(const QString &amp;oldName, const QString &amp;newName);
    bool exists(const QString &amp;name) const;

    static QFileInfoList drives();

    static QChar separator();

    static bool setCurrent(const QString &amp;path);
    static inline QDir current() { return QDir(currentPath()); }
    static QString currentPath();

    static inline QDir home() { return QDir(homePath()); }
    static QString homePath();
    static inline QDir root() { return QDir(rootPath()); }
    static QString rootPath();
    static inline QDir temp() { return QDir(tempPath()); }
    static QString tempPath();

#ifndef QT_NO_REGEXP
    static bool match(const QStringList &amp;filters, const QString &amp;fileName);
    static bool match(const QString &amp;filter, const QString &amp;fileName);
#endif
    static QString cleanPath(const QString &amp;path);
    void refresh() const;

#ifdef QT3_SUPPORT
    typedef SortFlags SortSpec;
    inline QT3_SUPPORT QString absPath() const { return absolutePath(); }
    inline QT3_SUPPORT QString absFilePath(const QString &amp;fileName, bool acceptAbsPath = true) const
       { Q_UNUSED(acceptAbsPath); return absoluteFilePath(fileName); }
    QT3_SUPPORT bool matchAllDirs() const;
    QT3_SUPPORT void setMatchAllDirs(bool on);
    inline QT3_SUPPORT QStringList entryList(const QString &amp;nameFilter, Filters filters = NoFilter,
                                           SortFlags sort = NoSort) const
    { return entryList(nameFiltersFromString(nameFilter), filters, sort); }
    inline QT3_SUPPORT QFileInfoList entryInfoList(const QString &amp;nameFilter,
                                                 Filters filters = NoFilter,
                                                 SortFlags sort = NoSort) const
    { return entryInfoList(nameFiltersFromString(nameFilter), filters, sort); }

    QT3_SUPPORT QString nameFilter() const;
    QT3_SUPPORT void setNameFilter(const QString &amp;nameFilter);

    inline QT3_SUPPORT bool mkdir(const QString &amp;dirName, bool acceptAbsPath) const
        { Q_UNUSED(acceptAbsPath); return mkdir(dirName); }
    inline QT3_SUPPORT bool rmdir(const QString &amp;dirName, bool acceptAbsPath) const
        { Q_UNUSED(acceptAbsPath); return rmdir(dirName); }

    inline QT3_SUPPORT void convertToAbs() { makeAbsolute(); }
    inline QT3_SUPPORT static QString currentDirPath() { return currentPath(); }
    inline QT3_SUPPORT static QString homeDirPath() { return homePath(); }
    inline QT3_SUPPORT static QString rootDirPath() { return rootPath(); }
    inline QT3_SUPPORT static QString cleanDirPath(const QString &amp;name) { return cleanPath(name); }
#endif
};

Q_DECLARE_OPERATORS_FOR_FLAGS(QDir::Filters)
Q_DECLARE_OPERATORS_FOR_FLAGS(QDir::SortFlags)

#endif // QDIR_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtCore/qeventloop.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QEVENTLOOP_H
#define QEVENTLOOP_H

#include &lt;QtCore/qobject.h>

QT_MODULE(Core)

class QEventLoopPrivate;

class Q_CORE_EXPORT QEventLoop : public QObject
{
    Q_OBJECT
    Q_DECLARE_PRIVATE(QEventLoop)

public:
    explicit QEventLoop(QObject *parent = 0);
    ~QEventLoop();

    enum ProcessEventsFlag {
        AllEvents = 0x00,
        ExcludeUserInputEvents = 0x01,
        ExcludeSocketNotifiers = 0x02,
        WaitForMoreEvents = 0x04,
#ifdef QT3_SUPPORT
        ExcludeUserInput = ExcludeUserInputEvents,
        WaitForMore = WaitForMoreEvents,
#endif
	X11ExcludeTimers = 0x08,
	DeferredDeletion = 0x10
    };
    Q_DECLARE_FLAGS(ProcessEventsFlags, ProcessEventsFlag)

    bool processEvents(ProcessEventsFlags flags = AllEvents);
    void processEvents(ProcessEventsFlags flags, int maximumTime);

    int exec(ProcessEventsFlags flags = AllEvents);
    void exit(int returnCode = 0);
    bool isRunning() const;

    void wakeUp();

public Q_SLOTS:
    void quit();
};

Q_DECLARE_OPERATORS_FOR_FLAGS(QEventLoop::ProcessEventsFlags)

#endif // QEVENTLOOP_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtCore/qfactoryinterface.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QFACTORYINTERFACE_H
#define QFACTORYINTERFACE_H

#include &lt;QtCore/qobject.h>
#include &lt;QtCore/qstringlist.h>

QT_MODULE(Core)

struct QFactoryInterface
{
    virtual ~QFactoryInterface() {}
    virtual QStringList keys() const = 0;
};

Q_DECLARE_INTERFACE(QFactoryInterface, "com.trolltech.Qt.QFactoryInterface")

#endif // QFACTORYINTERFACE_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtCore/qfile.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QFILE_H
#define QFILE_H

#include &lt;QtCore/qiodevice.h>
#include &lt;QtCore/qstring.h>
#include &lt;stdio.h>

#ifdef open
#error qfile.h must be included before any header file that defines open
#endif

QT_MODULE(Core)

class QAbstractFileEngine;
class QFilePrivate;

class Q_CORE_EXPORT QFile : public QIODevice
{
#ifndef QT_NO_QOBJECT
    Q_OBJECT
#endif
    Q_DECLARE_PRIVATE(QFile)

public:

    enum FileError {
        NoError = 0,
        ReadError = 1,
        WriteError = 2,
        FatalError = 3,
        ResourceError = 4,
        OpenError = 5,
        AbortError = 6,
        TimeOutError = 7,
        UnspecifiedError = 8,
        RemoveError = 9,
        RenameError = 10,
        PositionError = 11,
        ResizeError = 12,
        PermissionsError = 13,
        CopyError = 14
#ifdef QT3_SUPPORT
        , ConnectError = 30
#endif
    };

    enum Permission {
        ReadOwner = 0x4000, WriteOwner = 0x2000, ExeOwner = 0x1000,
        ReadUser  = 0x0400, WriteUser  = 0x0200, ExeUser  = 0x0100,
        ReadGroup = 0x0040, WriteGroup = 0x0020, ExeGroup = 0x0010,
        ReadOther = 0x0004, WriteOther = 0x0002, ExeOther = 0x0001
    };
    Q_DECLARE_FLAGS(Permissions, Permission)

    QFile();
    QFile(const QString &amp;name);
#ifndef QT_NO_QOBJECT
    explicit QFile(QObject *parent);
    QFile(const QString &amp;name, QObject *parent);
#endif
    ~QFile();

    FileError error() const;
    void unsetError();

    QString fileName() const;
    void setFileName(const QString &amp;name);

    typedef QByteArray (*EncoderFn)(const QString &amp;fileName);
    typedef QString (*DecoderFn)(const QByteArray &amp;localfileName);
    static QByteArray encodeName(const QString &amp;fileName);
    static QString decodeName(const QByteArray &amp;localFileName);
    inline static QString decodeName(const char *localFileName)
        { return decodeName(QByteArray(localFileName)); };
    static void setEncodingFunction(EncoderFn);
    static void setDecodingFunction(DecoderFn);

    bool exists() const;
    static bool exists(const QString &amp;fileName);

    QString readLink() const;
    static QString readLink(const QString &amp;fileName);

    bool remove();
    static bool remove(const QString &amp;fileName);

    bool rename(const QString &amp;newName);
    static bool rename(const QString &amp;oldName, const QString &amp;newName);

    bool link(const QString &amp;newName);
    static bool link(const QString &amp;oldname, const QString &amp;newName);

    bool copy(const QString &amp;newName);
    static bool copy(const QString &amp;fileName, const QString &amp;newName);

    bool isSequential() const;

    bool open(OpenMode flags);
    bool open(FILE *f, OpenMode flags);
    bool open(int fd, OpenMode flags);
    virtual void close();

    qint64 size() const;
    qint64 pos() const;
    bool seek(qint64 offset);
    bool atEnd() const;
    bool flush();

    bool resize(qint64 sz);
    static bool resize(const QString &amp;filename, qint64 sz);

    Permissions permissions() const;
    static Permissions permissions(const QString &amp;filename);
    bool setPermissions(Permissions permissionSpec);
    static bool setPermissions(const QString &amp;filename, Permissions permissionSpec);

    int handle() const;

    virtual QAbstractFileEngine *fileEngine() const;

#ifdef QT3_SUPPORT
    typedef Permission PermissionSpec;
    inline QT3_SUPPORT QString name() const { return fileName(); }
    inline QT3_SUPPORT void setName(const QString &amp;name) { setFileName(name); }
    inline QT3_SUPPORT bool open(OpenMode flags, FILE *f) { return open(f, flags); }
    inline QT3_SUPPORT bool open(OpenMode flags, int fd) { return open(fd, flags); }
#endif

protected:
#ifdef QT_NO_QOBJECT
    QFile(QFilePrivate &amp;dd);
#else
    QFile(QFilePrivate &amp;dd, QObject *parent = 0);
#endif

    qint64 readData(char *data, qint64 maxlen);
    qint64 writeData(const char *data, qint64 len);
    qint64 readLineData(char *data, qint64 maxlen);

private:
    Q_DISABLE_COPY(QFile)
};

Q_DECLARE_OPERATORS_FOR_FLAGS(QFile::Permissions)

#endif // QFILE_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtCore/qfileinfo.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QFILEINFO_H
#define QFILEINFO_H

#include &lt;QtCore/qfile.h>
#include &lt;QtCore/qlist.h>

QT_MODULE(Core)

class QDir;
class QDateTime;
class QFileInfoPrivate;

class Q_CORE_EXPORT QFileInfo
{
public:
    QFileInfo();
    QFileInfo(const QString &amp;file);
    QFileInfo(const QFile &amp;file);
    QFileInfo(const QDir &amp;dir, const QString &amp;file);
    QFileInfo(const QFileInfo &amp;fileinfo);
    ~QFileInfo();

    QFileInfo &amp;operator=(const QFileInfo &amp;fileinfo);
    bool operator==(const QFileInfo &amp;fileinfo); // 5.0 - remove me
    bool operator==(const QFileInfo &amp;fileinfo) const;
    inline bool operator!=(const QFileInfo &amp;fileinfo) { return !(operator==(fileinfo)); } // 5.0 - remove me
    inline bool operator!=(const QFileInfo &amp;fileinfo) const { return !(operator==(fileinfo)); }

    void setFile(const QString &amp;file);
    void setFile(const QFile &amp;file);
    void setFile(const QDir &amp;dir, const QString &amp;file);
    bool exists() const;
    void refresh();

    QString filePath() const;
    QString absoluteFilePath() const;
    QString canonicalFilePath() const;
    QString fileName() const;
    QString baseName() const;
    QString completeBaseName() const;
    QString suffix() const;
    QString completeSuffix() const;

    QString path() const;
    QString absolutePath() const;
    QString canonicalPath() const;
    QDir dir() const;
    QDir absoluteDir() const;

    bool isReadable() const;
    bool isWritable() const;
    bool isExecutable() const;
    bool isHidden() const;

    bool isRelative() const;
    inline bool isAbsolute() const { return !isRelative(); }
    bool makeAbsolute();

    bool isFile() const;
    bool isDir() const;
    bool isSymLink() const;
    bool isRoot() const;

    QString readLink() const;

    QString owner() const;
    uint ownerId() const;
    QString group() const;
    uint groupId() const;

    bool permission(QFile::Permissions permissions) const;
    QFile::Permissions permissions() const;

    qint64 size() const;

    QDateTime created() const;
    QDateTime lastModified() const;
    QDateTime lastRead() const;

    void detach();

    bool caching() const;
    void setCaching(bool on);

#ifdef QT3_SUPPORT
    enum Permission {
        ReadOwner = QFile::ReadOwner, WriteOwner = QFile::WriteOwner, ExeOwner = QFile::ExeOwner,
        ReadUser  = QFile::ReadUser,  WriteUser  = QFile::WriteUser,  ExeUser  = QFile::ExeUser,
        ReadGroup = QFile::ReadGroup, WriteGroup = QFile::WriteGroup, ExeGroup = QFile::ExeGroup,
        ReadOther = QFile::ReadOther, WriteOther = QFile::WriteOther, ExeOther = QFile::ExeOther
    };
    Q_DECLARE_FLAGS(PermissionSpec, Permission)

    inline QT3_SUPPORT QString baseName(bool complete) {
        if(complete)
            return completeBaseName();
        return baseName();
    }
    inline QT3_SUPPORT QString extension(bool complete = true) const {
        if(complete)
            return completeSuffix();
        return suffix();
    }
    inline QT3_SUPPORT QString absFilePath() const { return absoluteFilePath(); }

    inline QT3_SUPPORT QString dirPath(bool absPath = false) const {
        if(absPath)
            return absolutePath();
        return path();
    }
    QT3_SUPPORT QDir dir(bool absPath) const;
    inline QT3_SUPPORT bool convertToAbs() { return makeAbsolute(); }
#if !defined(Q_NO_TYPESAFE_FLAGS)
    inline QT3_SUPPORT bool permission(PermissionSpec permissions) const
    { return permission(QFile::Permissions((int)permissions)); }
#endif
#endif

protected:
    QFileInfoPrivate *d_ptr;
private:
    Q_DECLARE_PRIVATE(QFileInfo)
};
Q_DECLARE_TYPEINFO(QFileInfo, Q_MOVABLE_TYPE);

#ifdef QT3_SUPPORT
Q_DECLARE_OPERATORS_FOR_FLAGS(QFileInfo::PermissionSpec)
#endif

typedef QList&lt;QFileInfo> QFileInfoList;
#ifdef QT3_SUPPORT
typedef QList&lt;QFileInfo>::Iterator QFileInfoListIterator;
#endif

#endif // QFILEINFO_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtCore/qfsfileengine.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QFSFILEENGINE_H
#define QFSFILEENGINE_H

#include &lt;QtCore/qabstractfileengine.h>

QT_MODULE(Core)

class QFSFileEnginePrivate;

class Q_CORE_EXPORT QFSFileEngine : public QAbstractFileEngine
{
    Q_DECLARE_PRIVATE(QFSFileEngine)
public:
    QFSFileEngine();
    explicit QFSFileEngine(const QString &amp;file);
    ~QFSFileEngine();

    bool open(QIODevice::OpenMode openMode);
    bool open(QIODevice::OpenMode flags, FILE *fh);
    bool close();
    bool flush();
    qint64 size() const;
    qint64 pos() const;
    bool seek(qint64);
    bool isSequential() const;
    bool remove();
    bool copy(const QString &amp;newName);
    bool rename(const QString &amp;newName);
    bool link(const QString &amp;newName);
    bool mkdir(const QString &amp;dirName, bool createParentDirectories) const;
    bool rmdir(const QString &amp;dirName, bool recurseParentDirectories) const;
    bool setSize(qint64 size);
    bool caseSensitive() const;
    bool isRelativePath() const;
    QStringList entryList(QDir::Filters filters, const QStringList &amp;filterNames) const;
    FileFlags fileFlags(FileFlags type) const;
    bool setPermissions(uint perms);
    QString fileName(QAbstractFileEngine::FileName file) const;
    uint ownerId(QAbstractFileEngine::FileOwner) const;
    QString owner(FileOwner) const;
    QDateTime fileTime(FileTime time) const;
    void setFileName(const QString &amp;file);
    int handle() const;

    Iterator *beginEntryList(QDir::Filters filters, const QStringList &amp;filterNames);
    Iterator *endEntryList();
    
    qint64 read(char *data, qint64 maxlen);
    qint64 readLine(char *data, qint64 maxlen);
    qint64 write(const char *data, qint64 len);

    bool extension(Extension extension, const ExtensionOption *option = 0, ExtensionReturn *output = 0);
    bool supportsExtension(Extension extension) const;

    //FS only!!
    bool open(QIODevice::OpenMode flags, int fd);
    static bool setCurrentPath(const QString &amp;path);
    static QString currentPath(const QString &amp;path = QString());
    static QString homePath();
    static QString rootPath();
    static QString tempPath();
    static QFileInfoList drives();

protected:
    QFSFileEngine(QFSFileEnginePrivate &amp;dd);
};

#endif // QFSFILEENGINE_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtCore/qglobal.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QGLOBAL_H
#define QGLOBAL_H

#include &lt;stddef.h>

#define QT_VERSION_STR   "4.1.1"
/*
   QT_VERSION is (major &lt;&lt; 16) + (minor &lt;&lt; 8) + patch.
*/
#define QT_VERSION 0x040101

#define QT_PACKAGEDATE_STR "YYYY-MM-DD"

#if !defined(QT_BUILD_MOC)
#include &lt;QtCore/qconfig.h>
#endif

/*
   The operating system, must be one of: (Q_OS_x)

     DARWIN   - Darwin OS (synonym for Q_OS_MAC)
     MSDOS    - MS-DOS and Windows
     OS2      - OS/2
     OS2EMX   - XFree86 on OS/2 (not PM)
     WIN32    - Win32 (Windows 95/98/ME and Windows NT/2000/XP)
     CYGWIN   - Cygwin
     SOLARIS  - Sun Solaris
     HPUX     - HP-UX
     ULTRIX   - DEC Ultrix
     LINUX    - Linux
     FREEBSD  - FreeBSD
     NETBSD   - NetBSD
     OPENBSD  - OpenBSD
     BSDI     - BSD/OS
     IRIX     - SGI Irix
     OSF      - HP Tru64 UNIX
     SCO      - SCO OpenServer 5
     UNIXWARE - UnixWare 7, Open UNIX 8
     AIX      - AIX
     HURD     - GNU Hurd
     DGUX     - DG/UX
     RELIANT  - Reliant UNIX
     DYNIX    - DYNIX/ptx
     QNX      - QNX
     QNX6     - QNX RTP 6.1
     LYNX     - LynxOS
     BSD4     - Any BSD 4.4 system
     UNIX     - Any UNIX BSD/SYSV system
*/

#if defined(__APPLE__) &amp;&amp; (defined(__GNUC__) || defined(__xlC__) || defined(__xlc__))
#  define Q_OS_DARWIN
#elif defined(__CYGWIN__)
#  define Q_OS_CYGWIN
#elif defined(MSDOS) || defined(_MSDOS)
#  define Q_OS_MSDOS
#elif defined(__OS2__)
#  if defined(__EMX__)
#    define Q_OS_OS2EMX
#  else
#    define Q_OS_OS2
#  endif
#elif !defined(SAG_COM) &amp;&amp; (defined(WIN64) || defined(_WIN64) || defined(__WIN64__))
#  define Q_OS_WIN32
#  define Q_OS_WIN64
#elif !defined(SAG_COM) &amp;&amp; (defined(WIN32) || defined(_WIN32) || defined(__WIN32__) || defined(__NT__))
#  define Q_OS_WIN32
#elif defined(__MWERKS__) &amp;&amp; defined(__INTEL__)
#  define Q_OS_WIN32
#elif defined(__sun) || defined(sun)
#  define Q_OS_SOLARIS
#elif defined(hpux) || defined(__hpux)
#  define Q_OS_HPUX
#elif defined(__ultrix) || defined(ultrix)
#  define Q_OS_ULTRIX
#elif defined(sinix)
#  define Q_OS_RELIANT
#elif defined(__linux__) || defined(__linux)
#  define Q_OS_LINUX
#elif defined(__FreeBSD__) || defined(__DragonFly__)
#  define Q_OS_FREEBSD
#  define Q_OS_BSD4
#elif defined(__NetBSD__)
#  define Q_OS_NETBSD
#  define Q_OS_BSD4
#elif defined(__OpenBSD__)
#  define Q_OS_OPENBSD
#  define Q_OS_BSD4
#elif defined(__bsdi__)
#  define Q_OS_BSDI
#  define Q_OS_BSD4
#elif defined(__sgi)
#  define Q_OS_IRIX
#elif defined(__osf__)
#  define Q_OS_OSF
#elif defined(_AIX)
#  define Q_OS_AIX
#elif defined(__Lynx__)
#  define Q_OS_LYNX
#elif defined(__GNU_HURD__)
#  define Q_OS_HURD
#elif defined(__DGUX__)
#  define Q_OS_DGUX
#elif defined(__QNXNTO__)
#  define Q_OS_QNX6
#elif defined(__QNX__)
#  define Q_OS_QNX
#elif defined(_SEQUENT_)
#  define Q_OS_DYNIX
#elif defined(_SCO_DS) /* SCO OpenServer 5 + GCC */
#  define Q_OS_SCO
#elif defined(__USLC__) /* all SCO platforms + UDK or OUDK */
#  define Q_OS_UNIXWARE
#elif defined(__svr4__) &amp;&amp; defined(i386) /* Open UNIX 8 + GCC */
#  define Q_OS_UNIXWARE
#elif defined(__MAKEDEPEND__)
#else
#  error "Qt has not been ported to this OS - talk to qt-bugs@trolltech.com"
#endif

#if defined(Q_OS_WIN32) || defined(Q_OS_WIN64)
#  define Q_OS_WIN
#endif

#if defined(Q_OS_DARWIN)
#  define Q_OS_MAC /* Q_OS_MAC is mostly for compatiblity, but also more clear */
#  define Q_OS_MACX /* Q_OS_MACX is only for compatiblity.*/
#endif

#if defined(Q_OS_MSDOS) || defined(Q_OS_OS2) || defined(Q_OS_WIN)
#  undef Q_OS_UNIX
#elif !defined(Q_OS_UNIX)
#  define Q_OS_UNIX
#endif

#if defined(Q_OS_DARWIN) &amp;&amp; !defined(QT_LARGEFILE_SUPPORT)
#  define QT_LARGEFILE_SUPPORT 64
#endif


/*
   The compiler, must be one of: (Q_CC_x)

     SYM      - Digital Mars C/C++ (used to be Symantec C++)
     MWERKS   - Metrowerks CodeWarrior
     MSVC     - Microsoft Visual C/C++, Intel C++ for Windows
     BOR      - Borland/Turbo C++
     WAT      - Watcom C++
     GNU      - GNU C++
     COMEAU   - Comeau C++
     EDG      - Edison Design Group C++
     OC       - CenterLine C++
     SUN      - Forte Developer, or Sun Studio C++
     MIPS     - MIPSpro C++
     DEC      - DEC C++
     HPACC    - HP aC++
     USLC     - SCO OUDK and UDK
     CDS      - Reliant C++
     KAI      - KAI C++
     INTEL    - Intel C++ for Linux, Intel C++ for Windows
     HIGHC    - MetaWare High C/C++
     PGI      - Portland Group C++
     GHS      - Green Hills Optimizing C++ Compilers

   Should be sorted most to least authoritative.
*/

/* Symantec C++ is now Digital Mars */
#if defined(__DMC__) || defined(__SC__)
#  define Q_CC_SYM
/* "explicit" semantics implemented in 8.1e but keyword recognized since 7.5 */
#  if defined(__SC__) &amp;&amp; __SC__ &lt; 0x750
#    define Q_NO_EXPLICIT_KEYWORD
#  endif
#  define Q_NO_USING_KEYWORD

#elif defined(__MWERKS__)
#  define Q_CC_MWERKS
/* "explicit" recognized since 4.0d1 */

#elif defined(_MSC_VER)
#  define Q_CC_MSVC
/* proper support of bool for _MSC_VER >= 1100 */
#  define Q_CANNOT_DELETE_CONSTANT
#  define Q_OUTOFLINE_TEMPLATE inline
#  define QT_NO_PARTIAL_TEMPLATE_SPECIALIZATION
/* Visual C++.Net issues for _MSC_VER >= 1300 */
#  if _MSC_VER >= 1300
#    define Q_CC_MSVC_NET
#    if _MSC_VER &lt; 1310 || (defined(Q_OS_WIN64) &amp;&amp; defined(_M_IA64))
#      define Q_TYPENAME
#    else
#      undef QT_NO_PARTIAL_TEMPLATE_SPECIALIZATION
#    endif
#  else
#    define Q_NO_USING_KEYWORD
#    define QT_NO_MEMBER_TEMPLATES
#  endif
/* Intel C++ disguising as Visual C++: the `using' keyword avoids warnings */
#  if defined(__INTEL_COMPILER)
#    define Q_CC_INTEL
#  endif
/* x64 does not support mmx intrinsics on windows */
#  if (defined(Q_OS_WIN64) &amp;&amp; defined(_M_X64))
#    undef QT_HAVE_SSE
#  endif


#elif defined(__BORLANDC__) || defined(__TURBOC__)
#  define Q_CC_BOR
#  define Q_INLINE_TEMPLATE
#  if __BORLANDC__ &lt; 0x502
#    define Q_NO_BOOL_TYPE
#    define Q_NO_EXPLICIT_KEYWORD
#  endif
#  define Q_NO_USING_KEYWORD

#elif defined(__WATCOMC__)
#  define Q_CC_WAT
#  if defined(Q_OS_QNX4)
/* compiler flags */
#    define Q_TYPENAME
#    define Q_NO_BOOL_TYPE
#    define Q_CANNOT_DELETE_CONSTANT
#    define mutable
/* ??? */
#    define Q_BROKEN_TEMPLATE_SPECIALIZATION
/* no template classes in QVariant */
#    define QT_NO_TEMPLATE_VARIANT
/* Wcc does not fill in functions needed by valuelists, maps, and
   valuestacks implicitly */
#    define Q_FULL_TEMPLATE_INSTANTIATION
/* can we just compare the structures? */
#    define Q_FULL_TEMPLATE_INSTANTIATION_MEMCMP
/* these are not useful to our customers */
#    define QT_QWS_NO_SHM
#    define QT_NO_QWS_MULTIPROCESS
#    define QT_NO_QWS_CURSOR
#  endif

#elif defined(__GNUC__)
#  define Q_CC_GNU
#  define Q_C_CALLBACKS
#  if defined(__INTEL_COMPILER)
/* Intel C++ also masquerades as GCC 3.2.0 */
#    define Q_CC_INTEL
#  else
#    ifdef __APPLE__
#      define Q_NO_DEPRECATED_CONSTRUCTORS
#    endif
#    if __GNUC__ == 2 &amp;&amp; __GNUC_MINOR__ &lt;= 7
#      define Q_FULL_TEMPLATE_INSTANTIATION
#    endif
/* GCC 2.95 knows "using" but does not support it correctly */
#    if __GNUC__ == 2 &amp;&amp; __GNUC_MINOR__ &lt;= 95
#      define Q_NO_USING_KEYWORD
#      define QT_NO_STL_WCHAR
#    endif
/* GCC 3.1 and GCC 3.2 wrongly define _SB_CTYPE_MACROS on HP-UX */
#    if defined(Q_OS_HPUX) &amp;&amp; __GNUC__ == 3 &amp;&amp; __GNUC_MINOR__ >= 1
#      define Q_WRONG_SB_CTYPE_MACROS
#    endif
/* Apple's GCC 3.1 chokes on our streaming qDebug() */
#    if defined(Q_OS_DARWIN) &amp;&amp; __GNUC__ == 3 &amp;&amp; (__GNUC_MINOR__ >= 1 &amp;&amp; __GNUC_MINOR__ &lt; 3)
#      define Q_BROKEN_DEBUG_STREAM
#    endif
#    if (defined(__arm__) || defined(__ARMEL__)) &amp;&amp; !defined(QT_MOC_CPP)
#      define Q_PACKED __attribute__ ((__packed__))
#      define Q_NO_PACKED_REFERENCE
#    endif
#  endif /* __INTEL_COMPILER */

/* IBM compiler versions are a bit messy. There are actually two products:
   the C product, and the C++ product. The C++ compiler is always packaged
   with the latest version of the C compiler. Version numbers do not always
   match. This little table (I'm not sure it's accurate) should be helpful:

   C++ product                C product

   C Set 3.1                  C Compiler 3.0
   ...                        ...
   C++ Compiler 3.6.6         C Compiler 4.3
   ...                        ...
   Visual Age C++ 4.0         ...
   ...                        ...
   Visual Age C++ 5.0         C Compiler 5.0
   ...                        ...
   Visual Age C++ 6.0         C Compiler 6.0

   Now:
   __xlC__    is the version of the C compiler in hexadecimal notation
              is only an approximation of the C++ compiler version
   __IBMCPP__ is the version of the C++ compiler in decimal notation
              but it is not defined on older compilers like C Set 3.1 */
#elif defined(__xlC__)
#  define Q_CC_XLC
#  define Q_FULL_TEMPLATE_INSTANTIATION
#  if __xlC__ &lt; 0x400
#    define Q_NO_BOOL_TYPE
#    define Q_NO_EXPLICIT_KEYWORD
#    define Q_NO_USING_KEYWORD
#    define Q_TYPENAME
#    define Q_OUTOFLINE_TEMPLATE inline
#    define Q_BROKEN_TEMPLATE_SPECIALIZATION
#    define Q_CANNOT_DELETE_CONSTANT
#  endif

/* Older versions of DEC C++ do not define __EDG__ or __EDG - observed
   on DEC C++ V5.5-004. New versions do define  __EDG__ - observed on
   Compaq C++ V6.3-002.
   This compiler is different enough from other EDG compilers to handle
   it separately anyway. */
#elif defined(__DECCXX) || defined(__DECC)
#  define Q_CC_DEC
/* Compaq C++ V6 compilers are EDG-based but I'm not sure about older
   DEC C++ V5 compilers. */
#  if defined(__EDG__)
#    define Q_CC_EDG
#  endif
/* Compaq have disabled EDG's _BOOL macro and use _BOOL_EXISTS instead
   - observed on Compaq C++ V6.3-002.
   In any case versions prior to Compaq C++ V6.0-005 do not have bool. */
#  if !defined(_BOOL_EXISTS)
#    define Q_NO_BOOL_TYPE
#  endif
/* Spurious (?) error messages observed on Compaq C++ V6.5-014. */
#  define Q_NO_USING_KEYWORD
/* Apply to all versions prior to Compaq C++ V6.0-000 - observed on
   DEC C++ V5.5-004. */
#  if __DECCXX_VER &lt; 60060000
#    define Q_TYPENAME
#    define Q_BROKEN_TEMPLATE_SPECIALIZATION
#    define Q_CANNOT_DELETE_CONSTANT
#  endif
/* avoid undefined symbol problems with out-of-line template members */
#  define Q_OUTOFLINE_TEMPLATE inline

/* The Portland Group C++ compiler is based on EDG and does define __EDG__
   but the C compiler does not */
#elif defined(__PGI)
#  define Q_CC_PGI
#  if defined(__EDG__)
#    define Q_CC_EDG
#  endif

/* Compilers with EDG front end are similar. To detect them we test:
   __EDG documented by SGI, observed on MIPSpro 7.3.1.1 and KAI C++ 4.0b
   __EDG__ documented in EDG online docs, observed on Compaq C++ V6.3-002
   and PGI C++ 5.2-4 */
#elif defined(__EDG) || defined(__EDG__)
#  define Q_CC_EDG
/* From the EDG documentation (does not seem to apply to Compaq C++):
   _BOOL
        Defined in C++ mode when bool is a keyword. The name of this
        predefined macro is specified by a configuration flag. _BOOL
        is the default.
   __BOOL_DEFINED
        Defined in Microsoft C++ mode when bool is a keyword. */
#  if !defined(_BOOL) &amp;&amp; !defined(__BOOL_DEFINED)
#    define Q_NO_BOOL_TYPE
#  endif

/* The Comeau compiler is based on EDG and does define __EDG__ */
#  if defined(__COMO__)
#    define Q_CC_COMEAU
#    define Q_C_CALLBACKS

/* The `using' keyword was introduced to avoid KAI C++ warnings
   but it's now causing KAI C++ errors instead. The standard is
   unclear about the use of this keyword, and in practice every
   compiler is using its own set of rules. Forget it. */
#  elif defined(__KCC)
#    define Q_CC_KAI
#    define Q_NO_USING_KEYWORD

/* Using the `using' keyword avoids Intel C++ for Linux warnings */
#  elif defined(__INTEL_COMPILER)
#    define Q_CC_INTEL

/* Never tested! */
#  elif defined(__ghs)
#    define Q_CC_GHS

/* The UnixWare 7 UDK compiler is based on EDG and does define __EDG__ */
#  elif defined(__USLC__) &amp;&amp; defined(__SCO_VERSION__)
#    define Q_CC_USLC
/* The latest UDK 7.1.1b does not need this, but previous versions do */
#    if !defined(__SCO_VERSION__) || (__SCO_VERSION__ &lt; 302200010)
#      define Q_OUTOFLINE_TEMPLATE inline
#    endif
#    define Q_NO_USING_KEYWORD /* ### check "using" status */

/* Never tested! */
#  elif defined(CENTERLINE_CLPP) || defined(OBJECTCENTER)
#    define Q_CC_OC
#    define Q_NO_USING_KEYWORD

/* CDS++ defines __EDG__ although this is not documented in the Reliant
   documentation. It also follows conventions like _BOOL and this documented */
#  elif defined(sinix)
#    define Q_CC_CDS
#    define Q_NO_USING_KEYWORD

/* The MIPSpro compiler defines __EDG */
#  elif defined(__sgi)
#    define Q_CC_MIPS
#    define Q_NO_USING_KEYWORD /* ### check "using" status */
#    if defined(_COMPILER_VERSION) &amp;&amp; (_COMPILER_VERSION >= 740)
#      define Q_OUTOFLINE_TEMPLATE inline
#      pragma set woff 3624,3625,3649 /* turn off some harmless warnings */
#    endif
#  endif

/* Never tested! */
#elif defined(__HIGHC__)
#  define Q_CC_HIGHC

#elif defined(__SUNPRO_CC) || defined(__SUNPRO_C)
#  define Q_CC_SUN
/* 5.0 compiler or better
    'bool' is enabled by default but can be disabled using -features=nobool
    in which case _BOOL is not defined
        this is the default in 4.2 compatibility mode triggered by -compat=4 */
#  if __SUNPRO_CC >= 0x500
#    if !defined(_BOOL)
#      define Q_NO_BOOL_TYPE
#    endif
#    if defined(__SUNPRO_CC_COMPAT) &amp;&amp; (__SUNPRO_CC_COMPAT &lt;= 4)
#      define Q_NO_USING_KEYWORD
#    endif
#    define Q_C_CALLBACKS
/* 4.2 compiler or older */
#  else
#    define Q_NO_BOOL_TYPE
#    define Q_NO_EXPLICIT_KEYWORD
#    define Q_NO_USING_KEYWORD
#  endif

/* CDS++ does not seem to define __EDG__ or __EDG according to Reliant
   documentation but nevertheless uses EDG conventions like _BOOL */
#elif defined(sinix)
#  define Q_CC_EDG
#  define Q_CC_CDS
#  if !defined(_BOOL)
#    define Q_NO_BOOL_TYPE
#  endif
#  define Q_BROKEN_TEMPLATE_SPECIALIZATION

#elif defined(Q_OS_HPUX)
/* __HP_aCC was not defined in first aCC releases */
#  if defined(__HP_aCC) || __cplusplus >= 199707L
#    define Q_CC_HPACC
#  else
#    define Q_CC_HP
#    define Q_NO_BOOL_TYPE
#    define Q_FULL_TEMPLATE_INSTANTIATION
#    define Q_BROKEN_TEMPLATE_SPECIALIZATION
#    define Q_NO_EXPLICIT_KEYWORD
#  endif
#  define Q_NO_USING_KEYWORD /* ### check "using" status */

#else
#  error "Qt has not been tested with this compiler - talk to qt-bugs@trolltech.com"
#endif

#ifndef Q_PACKED
#  define Q_PACKED
#  undef Q_NO_PACKED_REFERENCE
#endif

#ifndef Q_CONSTRUCTOR_FUNCTION
# define Q_CONSTRUCTOR_FUNCTION(AFUNC) \
   static const int AFUNC ## __init_variable__ = AFUNC();
#endif

#ifndef Q_DESTRUCTOR_FUNCTION
# define Q_DESTRUCTOR_FUNCTION(AFUNC) \
    class AFUNC ## __dest_class__ { \
    public: \
       inline AFUNC ## __dest_class__() { } \
       inline ~ AFUNC ## __dest_class__() { AFUNC(); } \
    } AFUNC ## __dest_instance__;
#endif


/*
   The window system, must be one of: (Q_WS_x)

     MACX     - Mac OS X
     MAC9     - Mac OS 9
     QWS      - Qt/Embedded
     WIN32    - Windows
     X11      - X Window System
     PM       - unsupported
     WIN16    - unsupported
*/

#if defined(Q_OS_MSDOS)
#  define Q_WS_WIN16
#  error "Qt requires Win32 and does not work with Windows 3.x"
#elif defined(_WIN32_X11_)
#  define Q_WS_X11
#elif defined(Q_OS_WIN32)
#  define Q_WS_WIN32
#  if defined(Q_OS_WIN64)
#    define Q_WS_WIN64
#  endif
#elif defined(Q_OS_OS2)
#  define Q_WS_PM
#  error "Qt does not work with OS/2 Presentation Manager or Workplace Shell"
#elif defined(Q_OS_UNIX)
#  if defined(Q_OS_DARWIN) &amp;&amp; !defined(__USE_WS_X11__)
#    define Q_WS_MAC
#    define Q_WS_MACX
#  elif !defined(Q_WS_QWS)
#    define Q_WS_X11
#  endif
#endif

#if defined(Q_WS_WIN16) || defined(Q_WS_WIN32)
#  define Q_WS_WIN
#endif


/*
   Size-dependent types (architechture-dependent byte order)
*/

typedef signed char qint8;         /* 8 bit signed */
typedef unsigned char quint8;      /* 8 bit unsigned */
typedef short qint16;              /* 16 bit signed */
typedef unsigned short quint16;    /* 16 bit unsigned */
typedef int qint32;                /* 32 bit signed */
typedef unsigned int quint32;      /* 32 bit unsigned */
#if defined(Q_OS_WIN) &amp;&amp; !defined(Q_CC_GNU)
#  define Q_INT64_C(c) c ## i64    /* signed 64 bit constant */
#  define Q_UINT64_C(c) c ## ui64   /* unsigned 64 bit constant */
typedef __int64 qint64;            /* 64 bit signed */
typedef unsigned __int64 quint64;  /* 64 bit unsigned */
#else
#  define Q_INT64_C(c) static_cast&lt;long long>(c ## LL)     /* signed 64 bit constant */
#  define Q_UINT64_C(c) static_cast&lt;unsigned long long>(c ## ULL) /* unsigned 64 bit constant */
typedef long long qint64;           /* 64 bit signed */
typedef unsigned long long quint64; /* 64 bit unsigned */
#endif

typedef qint64 qlonglong;
typedef quint64 qulonglong;

#if defined(Q_OS_WIN64)
# define QT_POINTER_SIZE 8
#elif defined(Q_OS_WIN32)
# define QT_POINTER_SIZE 4
#endif

#define Q_INIT_RESOURCE(name) \
    do { extern int qInitResources_ ## name (); \
    qInitResources_ ## name (); } while (0)
#define Q_CLEANUP_RESOURCE(name) \
    do { extern int qCleanupResources_ ## name (); \
        qCleanupResources_ ## name (); } while (0)

#if defined(__cplusplus)

/*
   Useful type definitions for Qt
*/

typedef unsigned char uchar;
typedef unsigned short ushort;
typedef unsigned int uint;
typedef unsigned long ulong;

#if defined(Q_NO_BOOL_TYPE)
#error "Compiler doesn't support the bool type"
#endif

/*
   Constant bool values
*/

#ifndef TRUE
#define TRUE true
#define FALSE false
#endif

/*
   Proper for-scoping in VC++6 and MIPSpro CC
*/

#if (defined(Q_CC_MSVC) &amp;&amp; !defined(Q_CC_MSVC_NET) &amp;&amp; !defined(Q_CC_INTEL)) || defined(Q_CC_MIPS)
#  define for if(0){}else for
#endif


/*
   Workaround for static const members on MSVC++.
*/

#if defined(Q_CC_MSVC)
#  define QT_STATIC_CONST static
#  define QT_STATIC_CONST_IMPL
#else
#  define QT_STATIC_CONST static const
#  define QT_STATIC_CONST_IMPL const
#endif

/*
   Warnings and errors when using deprecated methods
*/
#if defined(Q_MOC_RUN)
#  define Q_DECL_DEPRECATED Q_DECL_DEPRECATED
#elif defined(Q_CC_GNU) &amp;&amp; !defined(Q_CC_INTEL) &amp;&amp; (__GNUC__ - 0 > 3 || (__GNUC__ - 0 == 3 &amp;&amp; __GNUC_MINOR__ - 0 >= 2))
#  define Q_DECL_DEPRECATED __attribute__ ((__deprecated__))
#elif defined(Q_CC_MSVC) &amp;&amp; (_MSC_VER >= 1300)
#  define Q_DECL_DEPRECATED __declspec(deprecated)
#  if defined (Q_CC_INTEL)
#    define Q_DECL_VARIABLE_DEPRECATED
#  else
#  endif
#else
#  define Q_DECL_DEPRECATED
#endif
#ifndef Q_DECL_VARIABLE_DEPRECATED
#  define Q_DECL_VARIABLE_DEPRECATED Q_DECL_DEPRECATED
#endif
#ifndef QT3_SUPPORT_CONSTRUCTOR
#  if defined(Q_MOC_RUN)
#    define Q_DECL_CONSTRUCTOR_DEPRECATED Q_DECL_CONSTRUCTOR_DEPRECATED
#  elif defined(Q_NO_DEPRECATED_CONSTRUCTORS)
#    define Q_DECL_CONSTRUCTOR_DEPRECATED
#  else
#    define Q_DECL_CONSTRUCTOR_DEPRECATED Q_DECL_DEPRECATED
#  endif
#endif
#if defined(QT3_SUPPORT_WARNINGS)
#  if !defined(QT_COMPAT_WARNINGS) /* also enable compat */
#    define QT_COMPAT_WARNINGS
#  endif
#  undef QT3_SUPPORT
#  define QT3_SUPPORT Q_DECL_DEPRECATED
#  undef QT3_SUPPORT_VARIABLE
#  define QT3_SUPPORT_VARIABLE Q_DECL_VARIABLE_DEPRECATED
#  undef QT3_SUPPORT_CONSTRUCTOR
#  define QT3_SUPPORT_CONSTRUCTOR explicit Q_DECL_CONSTRUCTOR_DEPRECATED
#elif defined(QT3_SUPPORT) /* define back to nothing */
#  if !defined(QT_COMPAT) /* also enable qt3 support */
#    define QT_COMPAT
#  endif
#  undef QT3_SUPPORT
#  define QT3_SUPPORT
#  undef QT3_SUPPORT_VARIABLE
#  define QT3_SUPPORT_VARIABLE
#  undef QT3_SUPPORT_CONSTRUCTOR
#  define QT3_SUPPORT_CONSTRUCTOR explicit
#endif
#if defined(QT_COMPAT_WARNINGS)
#  undef QT_COMPAT
#  define QT_COMPAT Q_DECL_DEPRECATED
#  undef QT_COMPAT_VARIABLE
#  define QT_COMPAT_VARIABLE Q_DECL_VARIABLE_DEPRECATED
#  undef QT_COMPAT_CONSTRUCTOR
#  define QT_COMPAT_CONSTRUCTOR explicit Q_DECL_CONSTRUCTOR_DEPRECATED
#elif defined(QT_COMPAT) /* define back to nothing */
#  undef QT_COMPAT
#  define QT_COMPAT
#  undef QT_COMPAT_VARIABLE
#  define QT_COMPAT_VARIABLE
#  undef QT_COMPAT_CONSTRUCTOR
#  define QT_COMPAT_CONSTRUCTOR
#endif
/* moc compats (signals/slots) */
#ifndef QT_MOC_COMPAT
#  if defined(QT3_SUPPORT)
#    define QT_MOC_COMPAT QT3_SUPPORT
#  else
#    define QT_MOC_COMPAT
#  endif
#else
#  undef QT_MOC_COMPAT
#  define QT_MOC_COMPAT
#endif

#ifdef __i386__
#  if defined(Q_CC_GNU)
#    define QT_FASTCALL __attribute__((regparm(3)))
#  elif defined(Q_CC_MSVC)
#    define QT_FASTCALL __fastcall
#  else
#     define QT_FASTCALL
#  endif
#else
#  define QT_FASTCALL
#endif

typedef int QNoImplicitBoolCast;

#if defined(QT_COORD_TYPE)
typedef QT_COORD_TYPE qreal;
#elif defined(__arm__)
typedef float qreal;
#else
typedef double qreal;
#endif

/*
   Utility macros and inline functions
*/

template &lt;typename T>
inline T qAbs(const T &amp;t) { return t >= 0 ? t : -t; }

inline int qRound(qreal d)
{ return d >= 0.0 ? int(d + 0.5) : int(d - int(d-1) + 0.5) + int(d-1); }

inline qint64 qRound64(qreal d)
{ return d >= 0.0 ? qint64(d + 0.5) : qint64(d - qint64(d-1) + 0.5) + qint64(d-1); }

template &lt;typename T>
inline const T &amp;qMin(const T &amp;a, const T &amp;b) { if (a &lt; b) return a; return b; }
template &lt;typename T>
inline const T &amp;qMax(const T &amp;a, const T &amp;b) { if (a &lt; b) return b; return a; }
template &lt;typename T>
inline const T &amp;qBound(const T &amp;min, const T &amp;val, const T &amp;max)
{ return qMax(min, qMin(max, val)); }

#ifdef QT3_SUPPORT
typedef qint8 Q_INT8;
typedef quint8 Q_UINT8;
typedef qint16 Q_INT16;
typedef quint16 Q_UINT16;
typedef qint32 Q_INT32;
typedef quint32 Q_UINT32;
typedef qint64 Q_INT64;
typedef quint64 Q_UINT64;

typedef qint64 Q_LLONG;
typedef quint64 Q_ULLONG;
#if defined(Q_OS_WIN64)
typedef __int64 Q_LONG;             /* word up to 64 bit signed */
typedef unsigned __int64 Q_ULONG;   /* word up to 64 bit unsigned */
#else
typedef long Q_LONG;                /* word up to 64 bit signed */
typedef unsigned long Q_ULONG;      /* word up to 64 bit unsigned */
#endif

#  define QABS(a) qAbs(a)
#  define QMAX(a, b) qMax((a), (b))
#  define QMIN(a, b) qMin((a), (b))
#endif

/*
   Data stream functions are provided by many classes (defined in qdatastream.h)
*/

class QDataStream;

#ifdef Q_OS_DARWIN
#  ifdef MAC_OS_X_VERSION_MIN_REQUIRED
#    undef MAC_OS_X_VERSION_MIN_REQUIRED
#  endif
#  define MAC_OS_X_VERSION_MIN_REQUIRED MAC_OS_X_VERSION_10_2
#  include &lt;AvailabilityMacros.h>
#  if !defined(MAC_OS_X_VERSION_10_3)
#     define MAC_OS_X_VERSION_10_3 MAC_OS_X_VERSION_10_2 + 1
#  endif
#  if !defined(MAC_OS_X_VERSION_10_4)
#       define MAC_OS_X_VERSION_10_4 MAC_OS_X_VERSION_10_3 + 1
#  endif
#  if (MAC_OS_X_VERSION_MAX_ALLOWED > MAC_OS_X_VERSION_10_4)
#    error "This version of Mac OS X is unsupported"
#  endif
#endif

#ifndef QT_BUILD_KEY
#define QT_BUILD_KEY "unspecified"
#endif

#if defined(Q_WS_MAC)
#  ifndef QMAC_QMENUBAR_NO_EVENT
#    define QMAC_QMENUBAR_NO_EVENT
#  endif
#endif

#if !defined(Q_WS_QWS) &amp;&amp; !defined(QT_NO_COP)
#  define QT_NO_COP
#endif

# include &lt;QtCore/qfeatures.h>

#ifndef Q_DECL_EXPORT
#  ifdef Q_OS_WIN
#    define Q_DECL_EXPORT __declspec(dllexport)
#  elif defined(QT_VISIBILITY_AVAILABLE)
#    define Q_DECL_EXPORT __attribute__((visibility("default")))
#  endif
#  ifndef Q_DECL_EXPORT
#    define Q_DECL_EXPORT
#  endif
#endif
#ifndef Q_DECL_IMPORT
#  ifdef Q_OS_WIN
#    define Q_DECL_IMPORT __declspec(dllimport)
#  else
#    define Q_DECL_IMPORT
#  endif
#endif

/*
   Create Qt DLL if QT_DLL is defined (Windows only)
   or QT_SHARED is defined (Kylix only)
*/

#if defined(Q_OS_WIN)
#  if defined(QT_NODLL)
#    undef QT_MAKEDLL
#    undef QT_DLL
#  elif defined(QT_MAKEDLL)        /* create a Qt DLL library */
#    if defined(QT_DLL)
#      undef QT_DLL
#    endif
#    if defined(QT_BUILD_CORE_LIB)
#      define Q_CORE_EXPORT Q_DECL_EXPORT
#    else
#      define Q_CORE_EXPORT Q_DECL_IMPORT
#    endif
#    if defined(QT_BUILD_GUI_LIB)
#      define Q_GUI_EXPORT Q_DECL_EXPORT
#    else
#      define Q_GUI_EXPORT Q_DECL_IMPORT
#    endif
#    if defined(QT_BUILD_SQL_LIB)
#      define Q_SQL_EXPORT Q_DECL_EXPORT
#    else
#      define Q_SQL_EXPORT Q_DECL_IMPORT
#    endif
#    if defined(QT_BUILD_NETWORK_LIB)
#      define Q_NETWORK_EXPORT Q_DECL_EXPORT
#    else
#      define Q_NETWORK_EXPORT Q_DECL_IMPORT
#    endif
#    if defined(QT_BUILD_SVG_LIB)
#      define Q_SVG_EXPORT Q_DECL_EXPORT
#    else
#      define Q_SVG_EXPORT Q_DECL_IMPORT
#    endif
#    if defined(QT_BUILD_OPENGL_LIB)
#      define Q_OPENGL_EXPORT Q_DECL_EXPORT
#    else
#      define Q_OPENGL_EXPORT Q_DECL_IMPORT
#    endif
#    if defined(QT_BUILD_XML_LIB)
#      define Q_XML_EXPORT Q_DECL_EXPORT
#    else
#      define Q_XML_EXPORT Q_DECL_IMPORT
#    endif
#    if defined(QT_BUILD_CANVAS_LIB)
#      define Q_CANVAS_EXPORT Q_DECL_EXPORT
#    else
#      define Q_CANVAS_EXPORT Q_DECL_IMPORT
#    endif
#    if defined(QT_BUILD_COMPAT_LIB)
#      define Q_COMPAT_EXPORT Q_DECL_EXPORT
#    else
#      define Q_COMPAT_EXPORT Q_DECL_IMPORT
#    endif
#    define Q_TEMPLATEDLL
#  elif defined(QT_DLL) /* use a Qt DLL library */
#    define Q_CORE_EXPORT Q_DECL_IMPORT
#    define Q_GUI_EXPORT Q_DECL_IMPORT
#    define Q_SQL_EXPORT Q_DECL_IMPORT
#    define Q_NETWORK_EXPORT Q_DECL_IMPORT
#    define Q_SVG_EXPORT Q_DECL_IMPORT
#    define Q_CANVAS_EXPORT Q_DECL_IMPORT
#    define Q_OPENGL_EXPORT Q_DECL_IMPORT
#    define Q_XML_EXPORT Q_DECL_IMPORT
#    define Q_COMPAT_EXPORT Q_DECL_IMPORT
#    define Q_TEMPLATEDLL
#  endif
#  define Q_NO_DECLARED_NOT_DEFINED
#else
#  if defined(Q_OS_LINUX) &amp;&amp; defined(Q_CC_BOR)
#    define Q_TEMPLATEDLL
#    define Q_NO_DECLARED_NOT_DEFINED
#  endif
#  undef QT_MAKEDLL /* ignore these for other platforms */
#  undef QT_DLL
#endif

#if !defined(Q_CORE_EXPORT)
#  if defined(QT_SHARED)
#    define Q_CORE_EXPORT Q_DECL_EXPORT
#    define Q_GUI_EXPORT Q_DECL_EXPORT
#    define Q_SQL_EXPORT Q_DECL_EXPORT
#    define Q_NETWORK_EXPORT Q_DECL_EXPORT
#    define Q_SVG_EXPORT Q_DECL_EXPORT
#    define Q_OPENGL_EXPORT Q_DECL_EXPORT
#    define Q_XML_EXPORT Q_DECL_EXPORT
#    define Q_COMPAT_EXPORT Q_DECL_EXPORT
#  else
#    define Q_CORE_EXPORT
#    define Q_GUI_EXPORT
#    define Q_SQL_EXPORT
#    define Q_NETWORK_EXPORT
#    define Q_SVG_EXPORT
#    define Q_OPENGL_EXPORT
#    define Q_XML_EXPORT
#    define Q_COMPAT_EXPORT
#  endif
#endif

/*
   No, this is not an evil backdoor. QT_BUILD_INTERNAL just exports more symbols
   for Trolltech's internal unit tests. If you want slower loading times and more
   symbols that can vanish from version to version, feel free to define QT_BUILD_INTERNAL.
*/
#if defined(QT_BUILD_INTERNAL) &amp;&amp; defined(Q_OS_WIN) &amp;&amp; defined(QT_MAKEDLL)
#    define Q_INTERNAL_EXPORT Q_DECL_EXPORT
#elif defined(QT_BUILD_INTERNAL) &amp;&amp; !defined(Q_OS_WIN) &amp;&amp; defined(QT_SHARED)
#    define Q_INTERNAL_EXPORT Q_DECL_EXPORT
#else
#    define Q_INTERNAL_EXPORT
#endif

/*
   System information
*/

class QString;
class Q_CORE_EXPORT QSysInfo {
public:
    enum {
        WordSize = (sizeof(void *)&lt;&lt;3)
    };

    enum Endian {
        BigEndian,
        LittleEndian

#ifdef Q_BYTE_ORDER
#  ifdef qdoc
        , ByteOrder = &lt;platform-dependent>
#  elif Q_BYTE_ORDER == Q_BIG_ENDIAN
        , ByteOrder = BigEndian
#  elif Q_BYTE_ORDER == Q_LITTLE_ENDIAN
        , ByteOrder = LittleEndian
#  else
#    error "Undefined byte order"
#  endif
#endif
    };
#if !defined(Q_BYTE_ORDER)
#  if defined(QT_BUILD_QMAKE)
    /* needed to bootstrap qmake */
    static const int ByteOrder;
#  else
#    error "Qt not configured correctly, please run configure"
#  endif
#endif
#ifdef Q_WS_WIN
    enum WinVersion {
        WV_32s      = 0x0001,
        WV_95       = 0x0002,
        WV_98       = 0x0003,
        WV_Me       = 0x0004,
        WV_DOS_based= 0x000f,

        WV_NT       = 0x0010,
        WV_2000     = 0x0020,
        WV_XP       = 0x0030,
        WV_2003     = 0x0040,
        WV_VISTA    = 0x0080,
        WV_NT_based = 0x00f0,

        WV_CE       = 0x0100,
        WV_CENET    = 0x0200,
        WV_CE_based = 0x0f00
    };
    static const WinVersion WindowsVersion;
#endif
#ifdef Q_WS_MAC
    enum MacVersion {
        MV_Unknown = 0x0000,

        /* version */
        MV_9 = 0x0001,
        MV_10_0 = 0x0002,
        MV_10_1 = 0x0003,
        MV_10_2 = 0x0004,
        MV_10_3 = 0x0005,
        MV_10_4 = 0x0006,

        /* codenames */
        MV_CHEETAH = MV_10_0,
        MV_PUMA = MV_10_1,
        MV_JAGUAR = MV_10_2,
        MV_PANTHER = MV_10_3,
        MV_TIGER = MV_10_4
    };
    static const MacVersion MacintoshVersion;
#endif
};

Q_CORE_EXPORT const char *qVersion();
Q_CORE_EXPORT bool qSharedBuild();

#if defined(Q_OS_MAC)
inline int qMacVersion() { return QSysInfo::MacintoshVersion; }
#endif

#ifdef QT3_SUPPORT
inline QT3_SUPPORT bool qSysInfo(int *wordSize, bool *bigEndian)
{
    *wordSize = QSysInfo::WordSize;
    *bigEndian = (QSysInfo::ByteOrder == QSysInfo::BigEndian);
    return true;
}
#endif

#if defined(Q_WS_WIN)
#if defined(QT3_SUPPORT)
inline QT3_SUPPORT bool qt_winUnicode() { return !(QSysInfo::WindowsVersion &amp; QSysInfo::WV_DOS_based); }
inline QT3_SUPPORT int qWinVersion() { return QSysInfo::WindowsVersion; }
#endif

#ifdef Q_OS_TEMP
#define QT_WA(uni, ansi) uni
#define QT_WA_INLINE(uni, ansi) (uni)
#elif defined(UNICODE)
#define QT_WA(uni, ansi) if (!(QSysInfo::WindowsVersion&amp; QSysInfo::WV_DOS_based)) { uni } else { ansi }
#define QT_WA_INLINE(uni, ansi) (!(QSysInfo::WindowsVersion&amp; QSysInfo::WV_DOS_based) ? uni : ansi)
#else
#define QT_WA(uni, ansi) ansi
#define QT_WA_INLINE(uni, ansi) ansi
#endif
#endif /* Q_WS_WIN */

#ifndef Q_OUTOFLINE_TEMPLATE
#  define Q_OUTOFLINE_TEMPLATE
#endif
#ifndef Q_INLINE_TEMPLATE
#  define Q_INLINE_TEMPLATE inline
#endif

#ifndef Q_TYPENAME
#  define Q_TYPENAME typename
#endif

/*
   Avoid "unused parameter" warnings
*/

#if defined(Q_CC_INTEL)
template &lt;typename T>
inline void qUnused(T &amp;x) { (void)x; }
#  define Q_UNUSED(x) qUnused(x);
#else
#  define Q_UNUSED(x) (void)x;
#endif

/*
   Debugging and error handling
*/

#if !defined(QT_NO_DEBUG) &amp;&amp; !defined(QT_DEBUG)
#  define QT_DEBUG
#endif

#ifndef qPrintable
#  define qPrintable(string) (string).toLocal8Bit().constData()
#endif

Q_CORE_EXPORT void qDebug(const char *, ...) /* print debug message */
#if defined(Q_CC_GNU) &amp;&amp; !defined(__INSURE__)
    __attribute__ ((format (printf, 1, 2)))
#endif
;

Q_CORE_EXPORT void qWarning(const char *, ...) /* print warning message */
#if defined(Q_CC_GNU) &amp;&amp; !defined(__INSURE__)
    __attribute__ ((format (printf, 1, 2)))
#endif
;

class QString;
Q_CORE_EXPORT QString qt_error_string(int errorCode = -1);
Q_CORE_EXPORT void qCritical(const char *, ...) /* print critical message */
#if defined(Q_CC_GNU) &amp;&amp; !defined(__INSURE__)
    __attribute__ ((format (printf, 1, 2)))
#endif
;
Q_CORE_EXPORT void qFatal(const char *, ...) /* print fatal message and exit */
#if defined(Q_CC_GNU) &amp;&amp; !defined(__INSURE__)
    __attribute__ ((format (printf, 1, 2)))
#endif
;

#ifdef QT3_SUPPORT
Q_CORE_EXPORT QT3_SUPPORT void qSystemWarning(const char *msg, int code = -1);
#endif /* QT3_SUPPORT */
Q_CORE_EXPORT void qErrnoWarning(int code, const char *msg, ...);
Q_CORE_EXPORT void qErrnoWarning(const char *msg, ...);

class QDebug;
class QNoDebug;

#ifdef QT_NO_DEBUG_OUTPUT
#  define qDebug if(1); else qDebug
#endif
#ifdef QT_NO_WARNING_OUTPUT
#  define qWarning if(1); else qWarning
#endif
#if (defined(QT_NO_DEBUG_OUTPUT) || defined(QT_NO_TEXTSTREAM)) &amp;&amp; !defined(QT_NO_DEBUG_STREAM)
#define QT_NO_DEBUG_STREAM
#endif

inline void qt_noop() {}

Q_CORE_EXPORT void qt_assert(const char *assertion, const char *file, int line);

#if !defined(Q_ASSERT)
#  ifndef QT_NO_DEBUG
#    define Q_ASSERT(cond) do {if(!(cond))qt_assert(#cond,__FILE__,__LINE__);} while (0)
#  else
#    define Q_ASSERT(cond) do{}while(0)
#  endif
#endif

Q_CORE_EXPORT void qt_assert_x(const char *where, const char *what, const char *file, int line);

#if !defined(Q_ASSERT_X)
#  ifndef QT_NO_DEBUG
#    define Q_ASSERT_X(cond, where, what) do {if(!(cond))qt_assert_x(where, what,__FILE__,__LINE__);} while (0)
#  else
#    define Q_ASSERT_X(cond, where, what) do{}while(0)
#  endif
#endif

Q_CORE_EXPORT void qt_check_pointer(const char *, int);

#ifndef QT_NO_DEBUG
#  define Q_CHECK_PTR(p) do {if(!(p))qt_check_pointer(__FILE__,__LINE__);} while (0)
#else
#  define Q_CHECK_PTR(p)
#endif

enum QtMsgType { QtDebugMsg, QtWarningMsg, QtCriticalMsg, QtFatalMsg, QtSystemMsg = QtCriticalMsg };

Q_CORE_EXPORT void qt_message_output(QtMsgType, const char *buf);

typedef void (*QtMsgHandler)(QtMsgType, const char *);
Q_CORE_EXPORT QtMsgHandler qInstallMsgHandler(QtMsgHandler);

#ifdef QT3_SUPPORT
inline QT3_SUPPORT void qSuppressObsoleteWarnings(bool = true) {}
inline QT3_SUPPORT void qObsolete(const char *, const char * = 0, const char * = 0) {}
#endif

#if defined(QT_NO_THREAD)

template &lt;typename T>
class QGlobalStatic
{
public:
    T *pointer;
    inline QGlobalStatic(T *p) : pointer(p) { }
    inline ~QGlobalStatic() { pointer = 0; }
};

#define Q_GLOBAL_STATIC(TYPE, NAME)                              \
    static TYPE *NAME()                                          \
    {                                                            \
        static TYPE this_##NAME;                                 \
        static QGlobalStatic&lt;TYPE > global_##NAME(&amp;this_##NAME); \
        return global_##NAME.pointer;                            \
    }

#define Q_GLOBAL_STATIC_WITH_ARGS(TYPE, NAME, ARGS)              \
    static TYPE *NAME()                                          \
    {                                                            \
        static TYPE this_##NAME ARGS;                            \
        static QGlobalStatic&lt;TYPE > global_##NAME(&amp;this_##NAME); \
        return global_##NAME.pointer;                            \
    }

#else

template &lt;typename T>
class QGlobalStatic
{
public:
    T *pointer;
    bool destroyed;

    inline QGlobalStatic()
        : pointer(0), destroyed(false)
    { }

    inline ~QGlobalStatic()
    {
        delete pointer;
        pointer = 0;
        destroyed = true;
    }
};

#define Q_GLOBAL_STATIC(TYPE, NAME)                                     \
    static TYPE *NAME()                                                 \
    {                                                                   \
        static QGlobalStatic&lt;TYPE > this_##NAME;                        \
        if (!this_##NAME.pointer &amp;&amp; !this_##NAME.destroyed) {           \
            TYPE *x = new TYPE;                                         \
            if (!q_atomic_test_and_set_ptr(&amp;this_##NAME.pointer, 0, x)) \
                delete x;                                               \
        }                                                               \
        return this_##NAME.pointer;                                   \
    }

#define Q_GLOBAL_STATIC_WITH_ARGS(TYPE, NAME, ARGS)                     \
    static TYPE *NAME()                                                 \
    {                                                                   \
        static QGlobalStatic&lt;TYPE > this_##NAME;                        \
        if (!this_##NAME.pointer &amp;&amp; !this_##NAME.destroyed) {           \
            TYPE *x = new TYPE ARGS;                                    \
            if (!q_atomic_test_and_set_ptr(&amp;this_##NAME.pointer, 0, x)) \
                delete x;                                               \
        }                                                               \
        return this_##NAME.pointer;                                     \
    }

#endif

class QBool
{
    bool b;

public:
    inline explicit QBool(bool B) : b(B) {}
    inline operator const void *() const
    { return b ? static_cast&lt;const void *>(this) : static_cast&lt;const void *>(0); }
};

inline bool operator==(QBool b1, bool b2) { return !b1 == !b2; }
inline bool operator==(bool b1, QBool b2) { return !b1 == !b2; }
inline bool operator==(QBool b1, QBool b2) { return !b1 == !b2; }
inline bool operator!=(QBool b1, bool b2) { return !b1 != !b2; }
inline bool operator!=(bool b1, QBool b2) { return !b1 != !b2; }
inline bool operator!=(QBool b1, QBool b2) { return !b1 != !b2; }

static inline bool qFuzzyCompare(double p1, double p2)
{
    return qAbs(p1 - p2) &lt; 0.00000000001;
}

static inline bool qFuzzyCompare(float p1, float p2)
{
    return qAbs(p1 - p2) &lt; 0.000001;
}

/*
   This function tests a double for a null value. It doesn't
   check whether the actual value is 0 or close to 0, but whether
   it is binary 0.
*/
static inline bool qIsNull(double d)
{
    union U {
        double d;
        quint64 u;
    };
    U val;
    val.d = d;
    return val.u == quint64(0);
}

/*
   This function tests a float for a null value. It doesn't
   check whether the actual value is 0 or close to 0, but whether
   it is binary 0.
*/
static inline bool qIsNull(float f)
{
    union U {
        float f;
        quint32 u;
    };
    U val;
    val.f = f;
    return val.u == 0u;
}

/*
   Compilers which follow outdated template instantiation rules
   require a class to have a comparison operator to exist when
   a QList of this type is instantiated. It's not actually
   used in the list, though. Hence the dummy implementation.
   Just in case other code relies on it we better trigger a warning
   mandating a real implementation.
*/

#ifdef Q_FULL_TEMPLATE_INSTANTIATION
#  define Q_DUMMY_COMPARISON_OPERATOR(C) \
    bool operator==(const C&amp;) const { \
        qWarning(#C"::operator==(const "#C"&amp;) was called"); \
        return false; \
    }
#else
#  define Q_DUMMY_COMPARISON_OPERATOR(C)
#endif


/*
   QTypeInfo     - type trait functionality
   qIsDetached   - data sharing functionality
*/

#ifndef QT_NO_PARTIAL_TEMPLATE_SPECIALIZATION

/*
  The catch-all template.
*/

template &lt;typename T> inline bool qIsDetached(T &amp;) { return true; }

template &lt;typename T>
class QTypeInfo
{
public:
    enum {
        isPointer = false,
        isComplex = true,
        isStatic = true,
        isLarge = (sizeof(T)>sizeof(void*)),
        isDummy = false
    };
};

template &lt;typename T>
class QTypeInfo&lt;T*>
{
public:
    enum {
        isPointer = true,
        isComplex = false,
        isStatic = false,
        isLarge = false,
        isDummy = false
    };
};

#else

template &lt;typename T> char QTypeInfoHelper(T*(*)());
void* QTypeInfoHelper(...);

template &lt;typename T> inline bool qIsDetached(T &amp;) { return true; }

template &lt;typename T>
class QTypeInfo
{
public:
    enum {
        isPointer = (1 == sizeof(QTypeInfoHelper((T(*)())0))),
        isComplex = !isPointer,
        isStatic = !isPointer,
        isLarge = (sizeof(T)>sizeof(void*)),
        isDummy = false
    };
};

#endif /* QT_NO_PARTIAL_TEMPLATE_SPECIALIZATION */

/*
   Specialize a specific type with:

     Q_DECLARE_TYPEINFO(type, flags);

   where 'type' is the name of the type to specialize and 'flags' is
   logically-OR'ed combination of the flags below.
*/
enum { /* TYPEINFO flags */
    Q_COMPLEX_TYPE = 0,
    Q_PRIMITIVE_TYPE = 0x1,
    Q_STATIC_TYPE = 0,
    Q_MOVABLE_TYPE = 0x2,
    Q_DUMMY_TYPE = 0x4
};

#define Q_DECLARE_TYPEINFO(TYPE, FLAGS) \
template &lt;> \
class QTypeInfo&lt;TYPE> \
{ \
public: \
    enum { \
        isComplex = (((FLAGS) &amp; Q_PRIMITIVE_TYPE) == 0), \
        isStatic = (((FLAGS) &amp; (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), \
        isLarge = (sizeof(TYPE)>sizeof(void*)), \
        isPointer = false, \
        isDummy = (((FLAGS) &amp; Q_DUMMY_TYPE) != 0) \
    }; \
    static inline const char *name() { return #TYPE; } \
}

/*
   Specialize a shared type with:

     Q_DECLARE_SHARED(type);

   where 'type' is the name of the type to specialize.  NOTE: shared
   types must declare a 'bool isDetached(void) const;' member for this
   to work.
*/
#define Q_DECLARE_SHARED(TYPE) \
template &lt;> inline bool qIsDetached&lt;TYPE>(TYPE &amp;t) { return t.isDetached(); }

/*
   QTypeInfo primitive specializations
*/
Q_DECLARE_TYPEINFO(bool, Q_PRIMITIVE_TYPE);
Q_DECLARE_TYPEINFO(char, Q_PRIMITIVE_TYPE);
Q_DECLARE_TYPEINFO(signed char, Q_PRIMITIVE_TYPE);
Q_DECLARE_TYPEINFO(uchar, Q_PRIMITIVE_TYPE);
Q_DECLARE_TYPEINFO(short, Q_PRIMITIVE_TYPE);
Q_DECLARE_TYPEINFO(ushort, Q_PRIMITIVE_TYPE);
Q_DECLARE_TYPEINFO(int, Q_PRIMITIVE_TYPE);
Q_DECLARE_TYPEINFO(uint, Q_PRIMITIVE_TYPE);
Q_DECLARE_TYPEINFO(long, Q_PRIMITIVE_TYPE);
Q_DECLARE_TYPEINFO(ulong, Q_PRIMITIVE_TYPE);
Q_DECLARE_TYPEINFO(qint64, Q_PRIMITIVE_TYPE);
Q_DECLARE_TYPEINFO(quint64, Q_PRIMITIVE_TYPE);
Q_DECLARE_TYPEINFO(float, Q_PRIMITIVE_TYPE);
Q_DECLARE_TYPEINFO(double, Q_PRIMITIVE_TYPE);
#ifndef Q_OS_DARWIN
Q_DECLARE_TYPEINFO(long double, Q_PRIMITIVE_TYPE);
#endif

/*
   These functions make it possible to use standard C++ functions with
   a similar name from Qt header files (especially template classes).
*/
Q_CORE_EXPORT void *qMalloc(size_t size);
Q_CORE_EXPORT void qFree(void *ptr);
Q_CORE_EXPORT void *qRealloc(void *ptr, size_t size);
Q_CORE_EXPORT void *qMemCopy(void *dest, const void *src, size_t n);
Q_CORE_EXPORT void *qMemSet(void *dest, int c, size_t n);


/*
   Avoid some particularly useless warnings from some stupid compilers.
   To get ALL C++ compiler warnings, define QT_CC_WARNINGS or comment out
   the line "#define QT_NO_WARNINGS".
*/
#if !defined(QT_CC_WARNINGS)
#  define QT_NO_WARNINGS
#endif
#if defined(QT_NO_WARNINGS)
#  if defined(Q_CC_MSVC)
#    pragma warning(disable: 4251) /* class 'A' needs to have dll interface for to be used by clients of class 'B'. */
#    pragma warning(disable: 4244) /* 'conversion' conversion from 'type1' to 'type2', possible loss of data */
#    pragma warning(disable: 4275) /* non - DLL-interface classkey 'identifier' used as base for DLL-interface classkey 'identifier' */
#    pragma warning(disable: 4514) /* unreferenced inline/local function has been removed */
#    pragma warning(disable: 4800) /* 'type' : forcing value to bool 'true' or 'false' (performance warning) */
#    pragma warning(disable: 4097) /* typedef-name 'identifier1' used as synonym for class-name 'identifier2' */
#    pragma warning(disable: 4706) /* assignment within conditional expression */
#    pragma warning(disable: 4786) /* truncating debug info after 255 characters */
#    pragma warning(disable: 4660) /* template-class specialization 'identifier' is already instantiated */
#    pragma warning(disable: 4355) /* 'this' : used in base member initializer list */
#    pragma warning(disable: 4231) /* nonstandard extension used : 'extern' before template explicit instantiation */
#    pragma warning(disable: 4710) /* function not inlined */
#    pragma warning(disable: 4530) /* C++ exception handler used, but unwind semantics are not enabled. Specify -GX */
#  elif defined(Q_CC_BOR)
#    pragma option -w-inl
#    pragma option -w-aus
#    pragma warn -inl
#    pragma warn -pia
#    pragma warn -ccc
#    pragma warn -rch
#    pragma warn -sig
#  endif
#endif

class Q_CORE_EXPORT QFlag
{
    int i;
public:
    inline QFlag(int i);
    inline operator int() const { return i; }
};

inline QFlag::QFlag(int ai) : i(ai) {}


#ifndef Q_NO_TYPESAFE_FLAGS

template&lt;typename Enum>
class QFlags
{
    typedef void **Zero;
    int i;
public:
    typedef Enum enum_type;
    inline QFlags(const QFlags &amp;f) : i(f.i) {}
    inline QFlags(Enum f) : i(f) {}
    inline QFlags(Zero = 0) : i(0) {}
    inline QFlags(QFlag f) : i(f) {}

    inline QFlags &amp;operator=(const QFlags &amp;f) { i = f.i; return *this; }
    inline QFlags &amp;operator&amp;=(int mask) {  i &amp;= mask; return *this; }
    inline QFlags &amp;operator&amp;=(uint mask) {  i &amp;= mask; return *this; }
    inline QFlags &amp;operator|=(QFlags f) {  i |= f.i; return *this; }
    inline QFlags &amp;operator|=(Enum f) {  i |= f; return *this; }
    inline QFlags &amp;operator^=(QFlags f) {  i ^= f.i; return *this; }
    inline QFlags &amp;operator^=(Enum f) {  i ^= f; return *this; }


    inline operator int() const { return i;}

    inline QFlags operator|(QFlags f) const { QFlags g; g.i = i | f.i; return g; }
    inline QFlags operator|(Enum f) const { QFlags g; g.i = i | f; return g; }
    inline QFlags operator^(QFlags f) const { QFlags g; g.i = i ^ f.i; return g; }
    inline QFlags operator^(Enum f) const { QFlags g; g.i = i ^ f; return g; }
    inline QFlags operator&amp;(int mask) const { QFlags g; g.i = i &amp; mask; return g; }
    inline QFlags operator&amp;(uint mask) const { QFlags g; g.i = i &amp; mask; return g; }
    inline QFlags operator&amp;(Enum f) const { QFlags g; g.i = i &amp; f; return g; }
    inline QFlags operator~() const { QFlags g; g.i = ~i; return g; }

    inline bool operator!() const { return !i; }
};

#define Q_DECLARE_FLAGS(Flags, Enum)\
typedef QFlags&lt;Enum> Flags;
#define Q_DECLARE_OPERATORS_FOR_FLAGS(Flags) \
inline QFlags&lt;Flags::enum_type> operator|(Flags::enum_type f1, Flags::enum_type f2) \
{ return QFlags&lt;Flags::enum_type>(f1) | f2; } \
inline QFlags&lt;Flags::enum_type> operator|(Flags::enum_type f1, QFlags&lt;Flags::enum_type> f2) \
{ return f2 | f1; }

#else /* Q_NO_TYPESAFE_FLAGS */

#define Q_DECLARE_FLAGS(Flags, Enum)\
typedef uint Flags;
#define Q_DECLARE_OPERATORS_FOR_FLAGS(Flags)

#endif /* Q_NO_TYPESAFE_FLAGS */

#if defined(Q_CC_GNU) &amp;&amp; !defined(Q_CC_INTEL)
/* make use of typeof-extension */
template &lt;typename T>
class QForeachContainer {
public:
    inline QForeachContainer(const T&amp; t) : c(t), brk(0), i(c.begin()), e(c.end()) { }
    const T c;
    int brk;
    typename T::const_iterator i, e;
};

#define Q_FOREACH(variable, container)                                \
for (QForeachContainer&lt;__typeof__(container)> _container_(container); \
     !_container_.brk &amp;&amp; _container_.i != _container_.e;              \
     __extension__  ({ ++_container_.brk; ++_container_.i; }))                       \
    for (variable = *_container_.i;; __extension__ ({--_container_.brk; break;}))

#else

struct QForeachContainerBase {};

template &lt;typename T>
class QForeachContainer : public QForeachContainerBase {
public:
    inline QForeachContainer(const T&amp; t): c(t), brk(0), i(c.begin()), e(c.end()){};
    const T c;
    mutable int brk;
    mutable typename T::const_iterator i, e;
    inline bool condition() const { return (!brk++ &amp;&amp; i != e); }
};

template &lt;typename T> inline T *qForeachPointer(const T &amp;) { return 0; }

template &lt;typename T> inline QForeachContainer&lt;T> qForeachContainerNew(const T&amp; t)
{ return QForeachContainer&lt;T>(t); }

template &lt;typename T>
inline const QForeachContainer&lt;T> *qForeachContainer(const QForeachContainerBase *base, const T *)
{ return static_cast&lt;const QForeachContainer&lt;T> *>(base); }

#define Q_FOREACH(variable, container) \
    for (const QForeachContainerBase &amp;_container_ = qForeachContainerNew(container); \
         qForeachContainer(&amp;_container_, true ? 0 : qForeachPointer(container))->condition();       \
         ++qForeachContainer(&amp;_container_, true ? 0 : qForeachPointer(container))->i)               \
        for (variable = *qForeachContainer(&amp;_container_, true ? 0 : qForeachPointer(container))->i; \
             qForeachContainer(&amp;_container_, true ? 0 : qForeachPointer(container))->brk;           \
             --qForeachContainer(&amp;_container_, true ? 0 : qForeachPointer(container))->brk)

#endif

#define Q_FOREVER for(;;)
#ifndef QT_NO_KEYWORDS
#  ifndef foreach
#    define foreach Q_FOREACH
#  endif
#  ifndef forever
#    define forever Q_FOREVER
#  endif
#endif

#if 0
/* tell gcc to use its built-in methods for some common functions */
#if defined(QT_NO_DEBUG) &amp;&amp; defined(Q_CC_GNU)
#  define qMemCopy __builtin_memcpy
#  define qMemSet __builtin_memset
#endif
#endif

#define Q_DECLARE_PRIVATE(Class) \
    inline Class##Private* d_func() { return reinterpret_cast&lt;Class##Private *>(d_ptr); } \
    inline const Class##Private* d_func() const { return reinterpret_cast&lt;const Class##Private *>(d_ptr); } \
    friend class Class##Private;

#define Q_DECLARE_PUBLIC(Class) \
    inline Class* q_func() { return static_cast&lt;Class *>(q_ptr); } \
    inline const Class* q_func() const { return static_cast&lt;const Class *>(q_ptr); } \
    friend class Class;

#define Q_D(Class) Class##Private * const d = d_func()
#define Q_Q(Class) Class * const q = q_func()

#define QT_TR_NOOP(x) (x)
#define QT_TRANSLATE_NOOP(scope, x) (x)
#define QDOC_PROPERTY(text)

/*
   Some classes do not permit copies to be made of an object. These
   classes contains a private copy constructor and assignment
   operator to disable copying (the compiler gives an error message).
*/

#if !defined(Q_NO_DECLARED_NOT_DEFINED) || !defined(QT_MAKEDLL)
 #define Q_DISABLE_COPY(Class) \
     Class(const Class &amp;); \
     Class &amp;operator=(const Class &amp;);
#else
 #define Q_DISABLE_COPY(Class)
#endif

class QByteArray;
Q_CORE_EXPORT QByteArray qgetenv(const char *varName);

inline int qIntCast(double f) { return int(f); }
inline int qIntCast(float f) { return int(f); }


/*
   Compat functions that were generated by configure
*/
#ifdef QT3_SUPPORT
#ifndef QT_PRODUCT_LICENSEE
#  define QT_PRODUCT_LICENSEE QLibraryInfo::licensee()
#endif
#ifndef QT_PRODUCT_LICENSE
#  define QT_PRODUCT_LICENSE QLibraryInfo::licensedProducts()
#endif
QT3_SUPPORT Q_CORE_EXPORT const char *qInstallPath();
QT3_SUPPORT Q_CORE_EXPORT const char *qInstallPathDocs();
QT3_SUPPORT Q_CORE_EXPORT const char *qInstallPathHeaders();
QT3_SUPPORT Q_CORE_EXPORT const char *qInstallPathLibs();
QT3_SUPPORT Q_CORE_EXPORT const char *qInstallPathBins();
QT3_SUPPORT Q_CORE_EXPORT const char *qInstallPathPlugins();
QT3_SUPPORT Q_CORE_EXPORT const char *qInstallPathData();
QT3_SUPPORT Q_CORE_EXPORT const char *qInstallPathTranslations();
QT3_SUPPORT Q_CORE_EXPORT const char *qInstallPathSysconf();
#endif

/*
   This gives us the possibility to check which modules the user can
   use. These are purely compile time checks and will generate no code.
*/

/* Qt modules */
#define QT_MODULE_CORE                  0x001
#define QT_MODULE_GUI                   0x002
#define QT_MODULE_NETWORK               0x004
#define QT_MODULE_OPENGL                0x008
#define QT_MODULE_SQL                   0x010
#define QT_MODULE_XML                   0x020
#define QT_MODULE_QT3SUPPORTLIGHT       0x040
#define QT_MODULE_QT3SUPPORT            0x080
#define QT_MODULE_SVG                   0x100
#define QT_MODULE_ACTIVEQT              0x200

/* Qt editions */
#define QT_EDITION_CONSOLE      (QT_MODULE_CORE \
                                 | QT_MODULE_NETWORK \
                                 | QT_MODULE_SQL \
                                 | QT_MODULE_XML)
#define QT_EDITION_DESKTOPLIGHT (QT_MODULE_CORE \
                                 | QT_MODULE_GUI \
                                 | QT_MODULE_QT3SUPPORTLIGHT)
#define QT_EDITION_OPENSOURCE   (QT_MODULE_CORE \
                                 | QT_MODULE_GUI \
                                 | QT_MODULE_NETWORK \
                                 | QT_MODULE_OPENGL \
                                 | QT_MODULE_SQL \
                                 | QT_MODULE_XML \
                                 | QT_MODULE_QT3SUPPORTLIGHT \
                                 | QT_MODULE_QT3SUPPORT \
                                 | QT_MODULE_SVG)
#define QT_EDITION_DESKTOP      (QT_EDITION_OPENSOURCE \
                                 | QT_MODULE_ACTIVEQT)
#define QT_EDITION_UNIVERSAL    QT_EDITION_DESKTOP
#define QT_EDITION_ACADEMIC     QT_EDITION_DESKTOP
#define QT_EDITION_EDUCATIONAL  QT_EDITION_DESKTOP
#define QT_EDITION_EVALUATION   QT_EDITION_DESKTOP

/* Determine which modules can be used */
#ifndef QT_EDITION
#  ifdef QT_BUILD_QMAKE
#    define QT_EDITION QT_EDITION_DESKTOP
#  else
#    error "Qt not configured correctly, please run configure"
#  endif
#endif

#define QT_LICENSED_MODULE(x) \
    enum QtValidLicenseFor##x##Module { Licensed##x = true };

#if (QT_EDITION &amp; QT_MODULE_CORE)
QT_LICENSED_MODULE(Core)
#endif
#if (QT_EDITION &amp; QT_MODULE_GUI)
QT_LICENSED_MODULE(Gui)
#endif
#if (QT_EDITION &amp; QT_MODULE_NETWORK)
QT_LICENSED_MODULE(Network)
#endif
#if (QT_EDITION &amp; QT_MODULE_OPENGL)
QT_LICENSED_MODULE(OpenGL)
#endif
#if (QT_EDITION &amp; QT_MODULE_SQL)
QT_LICENSED_MODULE(Sql)
#endif
#if (QT_EDITION &amp; QT_MODULE_XML)
QT_LICENSED_MODULE(Xml)
#endif
#if (QT_EDITION &amp; QT_MODULE_QT3SUPPORTLIGHT)
QT_LICENSED_MODULE(Qt3SupportLight)
#endif
#if (QT_EDITION &amp; QT_MODULE_QT3SUPPORT)
QT_LICENSED_MODULE(Qt3Support)
#endif
#if (QT_EDITION &amp; QT_MODULE_SVG)
QT_LICENSED_MODULE(Svg)
#endif
#if (QT_EDITION &amp; QT_MODULE_ACTIVEQT)
QT_LICENSED_MODULE(ActiveQt)
#endif

#define QT_MODULE(x) \
    typedef QtValidLicenseFor##x##Module Qt##x##Module;

#endif /* __cplusplus */

#endif /* QGLOBAL_H */
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtCore/qhash.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QHASH_H
#define QHASH_H

#include &lt;QtCore/qatomic.h>
#include &lt;QtCore/qchar.h>
#include &lt;QtCore/qiterator.h>
#include &lt;QtCore/qlist.h>

QT_MODULE(Core)

class QByteArray;
class QString;

inline uint qHash(char key) { return uint(key); }
inline uint qHash(uchar key) { return uint(key); }
inline uint qHash(signed char key) { return uint(key); }
inline uint qHash(ushort key) { return uint(key); }
inline uint qHash(short key) { return uint(key); }
inline uint qHash(uint key) { return key; }
inline uint qHash(int key) { return uint(key); }
inline uint qHash(ulong key)
{
    if (sizeof(ulong) > sizeof(uint)) {
        return uint((key >> (8 * sizeof(uint) - 1)) ^ key);
    } else {
        return uint(key);
    }
}
inline uint qHash(long key) { return qHash(ulong(key)); }
inline uint qHash(quint64 key)
{
    if (sizeof(quint64) > sizeof(uint)) {
        return uint((key >> (8 * sizeof(uint) - 1)) ^ key);
    } else {
        return uint(key);
    }
}
inline uint qHash(qint64 key) { return qHash(quint64(key)); }
inline uint qHash(QChar key) { return qHash(key.unicode()); }
Q_CORE_EXPORT uint qHash(const QByteArray &amp;key);
Q_CORE_EXPORT uint qHash(const QString &amp;key);

template &lt;class T> inline uint qHash(const T *key)
{
    if (sizeof(const T *) > sizeof(uint))
        return qHash(reinterpret_cast&lt;quint64>(key));
    else
        return uint(reinterpret_cast&lt;ulong>(key));
}

struct Q_CORE_EXPORT QHashData
{
    struct Node {
        Node *next;
        uint h;
    };

    Node *fakeNext;
    Node **buckets;
    QBasicAtomic ref;
    int size;
    int nodeSize;
    short userNumBits;
    short numBits;
    int numBuckets;
    uint sharable : 1;

    void *allocateNode();
    void freeNode(void *node);
    QHashData *detach_helper(void (*node_duplicate)(Node *, void *), int nodeSize);
    void mightGrow();
    void hasShrunk();
    void rehash(int hint);
    void destroyAndFree();
    Node *firstNode();
    static Node *nextNode(Node *node);
    static Node *previousNode(Node *node);

    static QHashData shared_null;
};

inline void QHashData::mightGrow()
{
    if (size >= numBuckets)
        rehash(numBits + 1);
}

inline void QHashData::hasShrunk()
{
    if (size &lt;= (numBuckets >> 3) &amp;&amp; numBits > userNumBits)
        rehash(qMax(int(numBits) - 2, int(userNumBits)));
}

inline QHashData::Node *QHashData::firstNode()
{
    Node *e = reinterpret_cast&lt;Node *>(this);
    Node **bucket = buckets;
    int n = numBuckets;
    while (n--) {
        if (*bucket != e)
            return *bucket;
        ++bucket;
    }
    return e;
}

struct QHashDummyValue
{
};

inline bool operator==(const QHashDummyValue &amp; /* v1 */, const QHashDummyValue &amp; /* v2 */)
{
    return true;
}

Q_DECLARE_TYPEINFO(QHashDummyValue, Q_MOVABLE_TYPE | Q_DUMMY_TYPE);

template &lt;class Key, class T>
struct QHashDummyNode
{
    QHashDummyNode *next;
    uint h;
    Key key;

    inline QHashDummyNode(const Key &amp;key0) : key(key0) {}
};

template &lt;class Key, class T>
struct QHashNode
{
    QHashNode *next;
    uint h;
    Key key;
    T value;

    inline QHashNode(const Key &amp;key0) : key(key0) {} // ### remove in 5.0
    inline QHashNode(const Key &amp;key0, const T &amp;value0) : key(key0), value(value0) {}
    inline bool same_key(uint h0, const Key &amp;key0) { return h0 == h &amp;&amp; key0 == key; }
};

#ifndef QT_NO_PARTIAL_TEMPLATE_SPECIALIZATION
#define Q_HASH_DECLARE_INT_NODES(key_type) \
    template &lt;class T> \
    struct QHashDummyNode&lt;key_type, T> { \
        QHashDummyNode *next; \
        union { uint h; key_type key; }; \
\
        inline QHashDummyNode(key_type /* key0 */) {} \
    }; \
\
    template &lt;class T> \
    struct QHashNode&lt;key_type, T> { \
        QHashNode *next; \
        union { uint h; key_type key; }; \
        T value; \
\
        inline QHashNode(key_type /* key0 */) {} \
        inline QHashNode(key_type /* key0 */, const T &amp;value0) : value(value0) {} \
        inline bool same_key(uint h0, key_type) { return h0 == h; } \
    }

#if defined(Q_BYTE_ORDER) &amp;&amp; Q_BYTE_ORDER == Q_LITTLE_ENDIAN
Q_HASH_DECLARE_INT_NODES(short);
Q_HASH_DECLARE_INT_NODES(ushort);
#endif
Q_HASH_DECLARE_INT_NODES(int);
Q_HASH_DECLARE_INT_NODES(uint);
#undef Q_HASH_DECLARE_INT_NODES
#endif // QT_NO_PARTIAL_TEMPLATE_SPECIALIZATION

template &lt;class Key, class T>
class QHash
{
    typedef QHashDummyNode&lt;Key, T> DummyNode;
    typedef QHashNode&lt;Key, T> Node;

    union {
        QHashData *d;
        QHashNode&lt;Key, T> *e;
    };

    static inline Node *concrete(QHashData::Node *node) {
        return reinterpret_cast&lt;Node *>(node);
    }

public:
    inline QHash() : d(&amp;QHashData::shared_null) { d->ref.ref(); }
    inline QHash(const QHash&lt;Key, T> &amp;other) : d(other.d) { d->ref.ref(); if (!d->sharable) detach(); }
    inline ~QHash() { if (!d->ref.deref()) freeData(d); }

    QHash&lt;Key, T> &amp;operator=(const QHash&lt;Key, T> &amp;other);

    bool operator==(const QHash&lt;Key, T> &amp;other) const;
    inline bool operator!=(const QHash&lt;Key, T> &amp;other) const { return !(*this == other); }

    inline int size() const { return d->size; }

    inline bool isEmpty() const { return d->size == 0; }

    inline int capacity() const { return d->numBuckets; }
    void reserve(int size);
    inline void squeeze() { reserve(1); }

    inline void detach() { if (d->ref != 1) detach_helper(); }
    inline bool isDetached() const { return d->ref == 1; }
    inline void setSharable(bool sharable) { if (!sharable) detach(); d->sharable = sharable; }

    void clear();

    int remove(const Key &amp;key);
    T take(const Key &amp;key);

    bool contains(const Key &amp;key) const;
    const Key key(const T &amp;value) const;
    const T value(const Key &amp;key) const;
    const T value(const Key &amp;key, const T &amp;defaultValue) const;
    T &amp;operator[](const Key &amp;key);
    const T operator[](const Key &amp;key) const;

    QList&lt;Key> keys() const;
    QList&lt;Key> keys(const T &amp;value) const;
    QList&lt;T> values() const;
    QList&lt;T> values(const Key &amp;key) const;
    int count(const Key &amp;key) const;

    class const_iterator;

    class iterator
    {
        QHashData::Node *i;
    public:
        typedef std::bidirectional_iterator_tag iterator_category;
        typedef ptrdiff_t difference_type;
        typedef T value_type;
        typedef T *pointer;
        typedef T &amp;reference;

        inline operator Node *() const { return concrete(i); }
        inline iterator() : i(0) { }
        explicit inline iterator(void *node) : i(reinterpret_cast&lt;QHashData::Node *>(node)) { }

        inline const Key &amp;key() const { return concrete(i)->key; }
        inline T &amp;value() const { return concrete(i)->value; }
        inline T &amp;operator*() const { return concrete(i)->value; }
        inline T *operator->() const { return &amp;concrete(i)->value; }
        inline bool operator==(const iterator &amp;o) const { return i == o.i; }
        inline bool operator!=(const iterator &amp;o) const { return i != o.i; }
        inline bool operator==(const const_iterator &amp;o) const
            { return i == reinterpret_cast&lt;const iterator &amp;>(o).i; }
        inline bool operator!=(const const_iterator &amp;o) const
            { return i != reinterpret_cast&lt;const iterator &amp;>(o).i; }

        inline iterator &amp;operator++() {
            i = QHashData::nextNode(i);
            return *this;
        }
        inline iterator operator++(int) {
            iterator r = *this;
            i = QHashData::nextNode(i);
            return r;
        }
        inline iterator &amp;operator--() {
            i = QHashData::previousNode(i);
            return *this;
        }
        inline iterator operator--(int) {
            iterator r = *this;
            i = QHashData::previousNode(i);
            return r;
        }
        inline iterator operator+(int j) const
        { iterator r = *this; if (j > 0) while (j--) ++r; else while (j++) --r; return r; }
        inline iterator operator-(int j) const { return operator+(-j); }
        inline iterator &amp;operator+=(int j) { return *this = *this + j; }
        inline iterator &amp;operator-=(int j) { return *this = *this - j; }
    };
    friend class iterator;

    class const_iterator
    {
        QHashData::Node *i;
    public:
        typedef std::bidirectional_iterator_tag iterator_category;
        typedef ptrdiff_t difference_type;
        typedef T value_type;
        typedef const T *pointer;
        typedef const T &amp;reference;

        inline operator Node *() const { return concrete(i); }
        inline const_iterator() : i(0) { }
        explicit inline const_iterator(void *node)
            : i(reinterpret_cast&lt;QHashData::Node *>(node)) { }
        inline const_iterator(const iterator &amp;o)
        { i = reinterpret_cast&lt;const const_iterator &amp;>(o).i; }

        inline const Key &amp;key() const { return concrete(i)->key; }
        inline const T &amp;value() const { return concrete(i)->value; }
        inline const T &amp;operator*() const { return concrete(i)->value; }
        inline const T *operator->() const { return &amp;concrete(i)->value; }
        inline bool operator==(const const_iterator &amp;o) const { return i == o.i; }
        inline bool operator!=(const const_iterator &amp;o) const { return i != o.i; }

        inline const_iterator &amp;operator++() {
            i = QHashData::nextNode(i);
            return *this;
        }
        inline const_iterator operator++(int) {
            const_iterator r = *this;
            i = QHashData::nextNode(i);
            return r;
        }
        inline const_iterator &amp;operator--() {
            i = QHashData::previousNode(i);
            return *this;
        }
        inline const_iterator operator--(int) {
            const_iterator r = *this;
            i = QHashData::previousNode(i);
            return r;
        }
        inline const_iterator operator+(int j) const
        { const_iterator r = *this; if (j > 0) while (j--) ++r; else while (j++) --r; return r; }
        inline const_iterator operator-(int j) const { return operator+(-j); }
        inline const_iterator &amp;operator+=(int j) { return *this = *this + j; }
        inline const_iterator &amp;operator-=(int j) { return *this = *this - j; }
    };
    friend class const_iterator;

    // STL style
    inline iterator begin() { detach(); return iterator(d->firstNode()); }
    inline const_iterator begin() const { return const_iterator(d->firstNode()); }
    inline const_iterator constBegin() const { return const_iterator(d->firstNode()); }
    inline iterator end() { detach(); return iterator(e); }
    inline const_iterator end() const { return const_iterator(e); }
    inline const_iterator constEnd() const { return const_iterator(e); }
    iterator erase(iterator it);

    // more Qt
    typedef iterator Iterator;
    typedef const_iterator ConstIterator;
    inline int count() const { return d->size; }
    iterator find(const Key &amp;key);
    const_iterator find(const Key &amp;key) const;
    const_iterator constFind(const Key &amp;key) const;
    iterator insert(const Key &amp;key, const T &amp;value);
    iterator insertMulti(const Key &amp;key, const T &amp;value);
    QHash&lt;Key, T> &amp;unite(const QHash&lt;Key, T> &amp;other);

    // STL compatibility
    inline bool empty() const { return isEmpty(); }

private:
    void detach_helper();
    void freeData(QHashData *d);
    Node **findNode(const Key &amp;key, uint *hp = 0) const;
    Node *createNode(uint h, const Key &amp;key, const T &amp;value, Node **nextNode);
    void deleteNode(Node *node);

    static void duplicateNode(QHashData::Node *originalNode, void *newNode);
};

template &lt;class Key, class T>
Q_INLINE_TEMPLATE void QHash&lt;Key, T>::deleteNode(Node *node)
{
#ifdef Q_CC_BOR
    node->~QHashNode&lt;Key, T>();
#elif defined(QT_NO_PARTIAL_TEMPLATE_SPECIALIZATION)
    node->~QHashNode();
#else
    node->~Node();
#endif
    d->freeNode(node);
}

template &lt;class Key, class T>
Q_INLINE_TEMPLATE void QHash&lt;Key, T>::duplicateNode(QHashData::Node *node, void *newNode)
{
    Node *concreteNode = concrete(node);
    if (QTypeInfo&lt;T>::isDummy) {
        (void) new (newNode) DummyNode(concreteNode->key);
    } else {
        (void) new (newNode) Node(concreteNode->key, concreteNode->value);
    }
}

template &lt;class Key, class T>
Q_INLINE_TEMPLATE typename QHash&lt;Key, T>::Node *
QHash&lt;Key, T>::createNode(uint ah, const Key &amp;akey, const T &amp;avalue, Node **anextNode)
{
    Node *node;

    if (QTypeInfo&lt;T>::isDummy) {
        node = reinterpret_cast&lt;Node *>(new (d->allocateNode()) DummyNode(akey));
    } else {
        node = new (d->allocateNode()) Node(akey, avalue);
    }

    node->h = ah;
    node->next = *anextNode;
    *anextNode = node;
    ++d->size;
    return node;
}

template &lt;class Key, class T>
Q_INLINE_TEMPLATE QHash&lt;Key, T> &amp;QHash&lt;Key, T>::unite(const QHash&lt;Key, T> &amp;other)
{
    QHash&lt;Key, T> copy(other);
    const_iterator it = copy.constEnd();
    while (it != copy.constBegin()) {
        --it;
        insertMulti(it.key(), it.value());
    }
    return *this;
}

template &lt;class Key, class T>
Q_OUTOFLINE_TEMPLATE void QHash&lt;Key, T>::freeData(QHashData *x)
{
    Node *e_for_x = reinterpret_cast&lt;Node *>(x);
    Node **bucket = reinterpret_cast&lt;Node **>(x->buckets);
    int n = x->numBuckets;
    while (n--) {
        Node *cur = *bucket++;
        while (cur != e_for_x) {
            Node *next = cur->next;
            deleteNode(cur);
            cur = next;
        }
    }
    x->destroyAndFree();
}

template &lt;class Key, class T>
Q_INLINE_TEMPLATE void QHash&lt;Key, T>::clear()
{
    *this = QHash&lt;Key,T>();
}

template &lt;class Key, class T>
Q_OUTOFLINE_TEMPLATE void QHash&lt;Key, T>::detach_helper()
{
    size_t asize;
    if (QTypeInfo&lt;T>::isDummy) {
        asize = reinterpret_cast&lt;char *>(&amp;reinterpret_cast&lt;Node *>(&amp;QHashData::shared_null)->value)
               - reinterpret_cast&lt;char *>(&amp;QHashData::shared_null);
    } else {
        asize = sizeof(Node);
    }

    QHashData *x = d->detach_helper(duplicateNode, int(asize));
    x = qAtomicSetPtr(&amp;d, x);
    if (!x->ref.deref())
        freeData(x);
}

template &lt;class Key, class T>
Q_INLINE_TEMPLATE QHash&lt;Key, T> &amp;QHash&lt;Key, T>::operator=(const QHash&lt;Key, T> &amp;other)
{
    if (d != other.d) {
        QHashData *x = other.d;
        x->ref.ref();
        x = qAtomicSetPtr(&amp;d, x);
        if (!x->ref.deref())
            freeData(x);
        if (!d->sharable)
            detach_helper();
    }
    return *this;
}

template &lt;class Key, class T>
Q_INLINE_TEMPLATE const T QHash&lt;Key, T>::value(const Key &amp;akey) const
{
    Node *node = *findNode(akey);
    if (node == e) {
        return T();
    } else {
        return node->value;
    }
}

template &lt;class Key, class T>
Q_INLINE_TEMPLATE const T QHash&lt;Key, T>::value(const Key &amp;akey, const T &amp;adefaultValue) const
{
    Node *node = *findNode(akey);
    if (node == e) {
        return adefaultValue;
    } else {
        return node->value;
    }
}

template &lt;class Key, class T>
Q_OUTOFLINE_TEMPLATE QList&lt;Key> QHash&lt;Key, T>::keys() const
{
    QList&lt;Key> res;
    const_iterator i = begin();
    while (i != end()) {
        res.append(i.key());
        ++i;
    }
    return res;
}

template &lt;class Key, class T>
Q_OUTOFLINE_TEMPLATE QList&lt;Key> QHash&lt;Key, T>::keys(const T &amp;avalue) const
{
    QList&lt;Key> res;
    const_iterator i = begin();
    while (i != end()) {
        if (i.value() == avalue)
            res.append(i.key());
        ++i;
    }
    return res;
}

template &lt;class Key, class T>
Q_OUTOFLINE_TEMPLATE const Key QHash&lt;Key, T>::key(const T &amp;avalue) const
{
    const_iterator i = begin();
    while (i != end()) {
        if (i.value() == avalue)
            return i.key();
        ++i;
    }

    return Key();
}

template &lt;class Key, class T>
Q_OUTOFLINE_TEMPLATE QList&lt;T> QHash&lt;Key, T>::values() const
{
    QList&lt;T> res;
    const_iterator i = begin();
    while (i != end()) {
        res.append(i.value());
        ++i;
    }
    return res;
}

template &lt;class Key, class T>
Q_OUTOFLINE_TEMPLATE QList&lt;T> QHash&lt;Key, T>::values(const Key &amp;akey) const
{
    QList&lt;T> res;
    Node *node = *findNode(akey);
    if (node != e) {
        do {
            res.append(node->value);
        } while ((node = node->next) != e &amp;&amp; node->key == akey);
    }
    return res;
}

template &lt;class Key, class T>
Q_OUTOFLINE_TEMPLATE int QHash&lt;Key, T>::count(const Key &amp;akey) const
{
    int cnt = 0;
    Node *node = *findNode(akey);
    if (node != e) {
        do {
            ++cnt;
        } while ((node = node->next) != e &amp;&amp; node->key == akey);
    }
    return cnt;
}

template &lt;class Key, class T>
Q_INLINE_TEMPLATE const T QHash&lt;Key, T>::operator[](const Key &amp;akey) const
{
    return value(akey);
}

template &lt;class Key, class T>
Q_INLINE_TEMPLATE T &amp;QHash&lt;Key, T>::operator[](const Key &amp;akey)
{
    detach();
    d->mightGrow();

    uint h;
    Node **node = findNode(akey, &amp;h);
    if (*node == e)
        return createNode(h, akey, T(), node)->value;
    return (*node)->value;
}

template &lt;class Key, class T>
Q_INLINE_TEMPLATE typename QHash&lt;Key, T>::iterator QHash&lt;Key, T>::insert(const Key &amp;akey,
                                                                         const T &amp;avalue)
{
    detach();
    d->mightGrow();

    uint h;
    Node **node = findNode(akey, &amp;h);
    if (*node == e)
        return iterator(createNode(h, akey, avalue, node));

    if (!QTypeInfo&lt;T>::isDummy)
        (*node)->value = avalue;
    return iterator(*node);
}

template &lt;class Key, class T>
Q_INLINE_TEMPLATE typename QHash&lt;Key, T>::iterator QHash&lt;Key, T>::insertMulti(const Key &amp;akey,
                                                                              const T &amp;avalue)
{
    detach();
    d->mightGrow();

    uint h;
    Node **nextNode = findNode(akey, &amp;h);
    return iterator(createNode(h, akey, avalue, nextNode));
}

template &lt;class Key, class T>
Q_OUTOFLINE_TEMPLATE int QHash&lt;Key, T>::remove(const Key &amp;akey)
{
    detach();

    int oldSize = d->size;
    Node **node = findNode(akey);
    if (*node != e) {
        bool deleteNext = true;
        do {
            Node *next = (*node)->next;
            deleteNext = (next != e &amp;&amp; next->key == (*node)->key);
            deleteNode(*node);
            *node = next;
            --d->size;
        } while (deleteNext);
        d->hasShrunk();
    }
    return oldSize - d->size;
}

template &lt;class Key, class T>
Q_OUTOFLINE_TEMPLATE T QHash&lt;Key, T>::take(const Key &amp;akey)
{
    detach();

    Node **node = findNode(akey);
    if (*node != e) {
        T t = (*node)->value;
        Node *next = (*node)->next;
        deleteNode(*node);
        *node = next;
        --d->size;
        d->hasShrunk();
        return t;
    }
    return T();
}

template &lt;class Key, class T>
Q_OUTOFLINE_TEMPLATE typename QHash&lt;Key, T>::iterator QHash&lt;Key, T>::erase(iterator it)
{
    if (it == iterator(e))
        return it;

    iterator ret = it;
    ++ret;

    Node *node = it;
    Node **node_ptr = reinterpret_cast&lt;Node **>(&amp;d->buckets[node->h % d->numBuckets]);
    while (*node_ptr != node)
        node_ptr = &amp;(*node_ptr)->next;
    *node_ptr = node->next;
    deleteNode(node);
    --d->size;
    return ret;
}

template &lt;class Key, class T>
Q_INLINE_TEMPLATE void QHash&lt;Key, T>::reserve(int asize)
{
    detach();
    d->rehash(-qMax(asize, 1));
}

template &lt;class Key, class T>
Q_INLINE_TEMPLATE typename QHash&lt;Key, T>::const_iterator QHash&lt;Key, T>::find(const Key &amp;akey) const
{
    return const_iterator(*findNode(akey));
}

template &lt;class Key, class T>
Q_INLINE_TEMPLATE typename QHash&lt;Key, T>::const_iterator QHash&lt;Key, T>::constFind(const Key &amp;akey) const
{
    return const_iterator(*findNode(akey));
}

template &lt;class Key, class T>
Q_INLINE_TEMPLATE typename QHash&lt;Key, T>::iterator QHash&lt;Key, T>::find(const Key &amp;akey)
{
    detach();
    return iterator(*findNode(akey));
}

template &lt;class Key, class T>
Q_INLINE_TEMPLATE bool QHash&lt;Key, T>::contains(const Key &amp;akey) const
{
    return *findNode(akey) != e;
}

template &lt;class Key, class T>
Q_OUTOFLINE_TEMPLATE typename QHash&lt;Key, T>::Node **QHash&lt;Key, T>::findNode(const Key &amp;akey,
                                                                            uint *ahp) const
{
    Node **node;
    uint h = qHash(akey);

    if (d->numBuckets) {
        node = reinterpret_cast&lt;Node **>(&amp;d->buckets[h % d->numBuckets]);
        while (*node != e &amp;&amp; !(*node)->same_key(h, akey))
            node = &amp;(*node)->next;
    } else {
        node = const_cast&lt;Node **>(reinterpret_cast&lt;const Node * const *>(&amp;e));
    }
    if (ahp)
        *ahp = h;
    return node;
}

template &lt;class Key, class T>
Q_OUTOFLINE_TEMPLATE bool QHash&lt;Key, T>::operator==(const QHash&lt;Key, T> &amp;other) const
{
    if (size() != other.size())
        return false;
    if (d == other.d)
        return true;

    const_iterator it = begin();

    while (it != end()) {
        const Key &amp;akey = it.key();

        const_iterator it2 = other.find(akey);
        do {
            if (it2 == end() || !(it2.key() == akey))
                return false;
            if (!QTypeInfo&lt;T>::isDummy &amp;&amp; !(it.value() == it2.value()))
                return false;
            ++it;
            ++it2;
        } while (it != end() &amp;&amp; it.key() == akey);
    }
    return true;
}

template &lt;class Key, class T>
class QMultiHash : public QHash&lt;Key, T>
{
public:
    QMultiHash() {}
    QMultiHash(const QHash&lt;Key, T> &amp;other) : QHash&lt;Key, T>(other) {}

    inline typename QHash&lt;Key, T>::iterator replace(const Key &amp;key, const T &amp;value);
    inline typename QHash&lt;Key, T>::iterator insert(const Key &amp;key, const T &amp;value);

    inline QMultiHash &amp;operator+=(const QMultiHash &amp;other)
    { unite(other); return *this; }
    inline QMultiHash operator+(const QMultiHash &amp;other) const
    { QMultiHash result = *this; result += other; return result; }

private:
    T &amp;operator[](const Key &amp;key);
    const T operator[](const Key &amp;key) const;
};

template &lt;class Key, class T>
Q_INLINE_TEMPLATE Q_TYPENAME QHash&lt;Key, T>::iterator QMultiHash&lt;Key, T>::replace(const Key &amp;akey, const T &amp;avalue)
{ return QHash&lt;Key, T>::insert(akey, avalue); }

template &lt;class Key, class T>
Q_INLINE_TEMPLATE Q_TYPENAME QHash&lt;Key, T>::iterator QMultiHash&lt;Key, T>::insert(const Key &amp;akey, const T &amp;avalue)
{ return QHash&lt;Key, T>::insertMulti(akey, avalue); }


Q_DECLARE_ASSOCIATIVE_ITERATOR(Hash)
Q_DECLARE_MUTABLE_ASSOCIATIVE_ITERATOR(Hash)

#endif // QHASH_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtCore/qiodevice.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QIODEVICE_H
#define QIODEVICE_H

#ifndef QT_NO_QOBJECT
#include &lt;QtCore/qobject.h>
#else
#include &lt;QtCore/qobjectdefs.h>
#endif
#include &lt;QtCore/qstring.h>

#ifdef open
#error qiodevice.h must be included before any header file that defines open
#endif

QT_MODULE(Core)

class QByteArray;
class QIODevicePrivate;

class Q_CORE_EXPORT QIODevice
#ifndef QT_NO_QOBJECT
    : public QObject
#endif
{
#ifndef QT_NO_QOBJECT
    Q_OBJECT
#endif
public:
    enum OpenModeFlag {
        NotOpen = 0x0000,
        ReadOnly = 0x0001,
        WriteOnly = 0x0002,
        ReadWrite = ReadOnly | WriteOnly,
        Append = 0x0004,
        Truncate = 0x0008,
        Text = 0x0010,
        Unbuffered = 0x0020
    };
    Q_DECLARE_FLAGS(OpenMode, OpenModeFlag)

    QIODevice();
#ifndef QT_NO_QOBJECT
    explicit QIODevice(QObject *parent);
#endif
    virtual ~QIODevice();

    OpenMode openMode() const;

    void setTextModeEnabled(bool enabled);
    bool isTextModeEnabled() const;

    bool isOpen() const;
    bool isReadable() const;
    bool isWritable() const;
    virtual bool isSequential() const;

    virtual bool open(OpenMode mode);
    virtual void close();

    virtual qint64 pos() const;
    virtual qint64 size() const;
    virtual bool seek(qint64 pos);
    virtual bool atEnd() const;
    virtual bool reset();

    virtual qint64 bytesAvailable() const;
    virtual qint64 bytesToWrite() const;

    qint64 read(char *data, qint64 maxlen);
    QByteArray read(qint64 maxlen);
    QByteArray readAll();
    qint64 readLine(char *data, qint64 maxlen);
    QByteArray readLine(qint64 maxlen = 0);
    virtual bool canReadLine() const;

    qint64 write(const char *data, qint64 len);
    inline qint64 write(const QByteArray &amp;data)
    { return write(data.constData(), data.size()); }

    qint64 peek(char *data, qint64 maxlen);
    QByteArray peek(qint64 maxlen);

    virtual bool waitForReadyRead(int msecs);
    virtual bool waitForBytesWritten(int msecs);

    void ungetChar(char c);
    inline bool putChar(char c) { return write(&amp;c, 1) == 1; }
    inline bool getChar(char *c)
    { char ch; bool result = read(&amp;ch, 1) == 1; if (c) *c = ch; return result; }

    QString errorString() const;

#ifndef QT_NO_QOBJECT
Q_SIGNALS:
    void readyRead();
    void bytesWritten(qint64 bytes);
    void aboutToClose();
#endif

protected:
#ifdef QT_NO_QOBJECT
    QIODevice(QIODevicePrivate &amp;dd);
#else
    QIODevice(QIODevicePrivate &amp;dd, QObject *parent = 0);
#endif
    virtual qint64 readData(char *data, qint64 maxlen) = 0;
    virtual qint64 readLineData(char *data, qint64 maxlen);
    virtual qint64 writeData(const char *data, qint64 len) = 0;

    void setOpenMode(OpenMode openMode);

    void setErrorString(const QString &amp;errorString);

#ifdef QT_NO_QOBJECT
    QIODevicePrivate *d_ptr;
#endif

private:
    Q_DECLARE_PRIVATE(QIODevice)
    Q_DISABLE_COPY(QIODevice)

#ifdef QT3_SUPPORT
public:
    typedef qint64 Offset;

    inline QT3_SUPPORT int flags() const { return (int) openMode(); }
    inline QT3_SUPPORT int mode() const { return (int) openMode(); }
    inline QT3_SUPPORT int state() const;

    inline QT3_SUPPORT bool isDirectAccess() const { return !isSequential(); }
    inline QT3_SUPPORT bool isSequentialAccess() const { return isSequential(); }
    inline QT3_SUPPORT bool isCombinedAccess() const { return false; }
    inline QT3_SUPPORT bool isBuffered() const { return true; }
    inline QT3_SUPPORT bool isRaw() const { return false; }
    inline QT3_SUPPORT bool isSynchronous() const { return true; }
    inline QT3_SUPPORT bool isAsynchronous() const { return false; }
    inline QT3_SUPPORT bool isTranslated() const { return (openMode() &amp; Text) != 0; }
    inline QT3_SUPPORT bool isInactive() const { return !isOpen(); }

    typedef int Status;
    QT3_SUPPORT Status status() const;
    QT3_SUPPORT void resetStatus();

    inline QT3_SUPPORT Offset at() const { return pos(); }
    inline QT3_SUPPORT bool at(Offset offset) { return seek(offset); }

    inline QT3_SUPPORT qint64 readBlock(char *data, quint64 maxlen) { return read(data, maxlen); }
    inline QT3_SUPPORT qint64 writeBlock(const char *data, quint64 len) { return write(data, len); }
    inline QT3_SUPPORT qint64 writeBlock(const QByteArray &amp;data) { return write(data); }

    inline QT3_SUPPORT int getch() { char c; return getChar(&amp;c) ? int(c) : -1; }
    inline QT3_SUPPORT int putch(int c) { return putChar(c) ? int(c) : -1; }
    inline QT3_SUPPORT int ungetch(int c) { ungetChar(c); return c; }
#endif
};

Q_DECLARE_OPERATORS_FOR_FLAGS(QIODevice::OpenMode)

#ifdef QT3_SUPPORT
static QT3_SUPPORT_VARIABLE const uint IO_Direct = 0x0100;
static QT3_SUPPORT_VARIABLE const uint IO_Sequential = 0x0200;
static QT3_SUPPORT_VARIABLE const uint IO_Combined = 0x0300;
static QT3_SUPPORT_VARIABLE const uint IO_TypeMask = 0x0300;

static QT3_SUPPORT_VARIABLE const uint IO_Raw = 0x0000;
static QT3_SUPPORT_VARIABLE const uint IO_Async = 0x0000;

#define IO_ReadOnly QIODevice::ReadOnly
#define IO_WriteOnly QIODevice::WriteOnly
#define IO_ReadWrite QIODevice::ReadWrite
#define IO_Append QIODevice::Append
#define IO_Truncate QIODevice::Truncate
#define IO_Translate QIODevice::Text
#define IO_ModeMask 0x00ff

static QT3_SUPPORT_VARIABLE const uint IO_Open = 0x1000;
static QT3_SUPPORT_VARIABLE const uint IO_StateMask = 0xf000;

static QT3_SUPPORT_VARIABLE const uint IO_Ok = 0;
static QT3_SUPPORT_VARIABLE const uint IO_ReadError = 1;
static QT3_SUPPORT_VARIABLE const uint IO_WriteError = 2;
static QT3_SUPPORT_VARIABLE const uint IO_FatalError = 3;
static QT3_SUPPORT_VARIABLE const uint IO_ResourceError = 4;
static QT3_SUPPORT_VARIABLE const uint IO_OpenError = 5;
static QT3_SUPPORT_VARIABLE const uint IO_ConnectError = 5;
static QT3_SUPPORT_VARIABLE const uint IO_AbortError = 6;
static QT3_SUPPORT_VARIABLE const uint IO_TimeOutError = 7;
static QT3_SUPPORT_VARIABLE const uint IO_UnspecifiedError	= 8;

inline QT3_SUPPORT int QIODevice::state() const
{
    return isOpen() ? 0x1000 : 0;
}
#endif

#if !defined(QT_NO_DEBUG_STREAM)
class QDebug;
Q_CORE_EXPORT QDebug operator&lt;&lt;(QDebug debug, QIODevice::OpenMode modes);
#endif

#endif // QIODEVICE_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtCore/qlibrary.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QLIBRARY_H
#define QLIBRARY_H

#include &lt;QtCore/qobject.h>

QT_MODULE(Core)

#ifndef QT_NO_LIBRARY

class QLibraryPrivate;

class Q_CORE_EXPORT QLibrary : public QObject
{
    Q_OBJECT
    Q_PROPERTY(QString fileName READ fileName WRITE setFileName)
public:
    explicit QLibrary(QObject *parent = 0);
    explicit QLibrary(const QString&amp; fileName, QObject *parent = 0);
    explicit QLibrary(const QString&amp; fileName, int verNum, QObject *parent = 0);
    ~QLibrary();

    void *resolve(const char *symbol);
    static void *resolve(const QString &amp;fileName, const char *symbol);
    static void *resolve(const QString &amp;fileName, int verNum, const char *symbol);

    bool load();
    bool unload();
    bool isLoaded() const;

    static bool isLibrary(const QString &amp;fileName);

    void setFileName(const QString &amp;fileName);
    QString fileName() const;   
       
    void setFileNameAndVersion(const QString &amp;fileName, int verNum);           

#ifdef QT3_SUPPORT
    inline QT3_SUPPORT QString library() const { return fileName(); }
    inline QT3_SUPPORT void setAutoUnload( bool ) {}
#endif
private:
    QLibraryPrivate *d;
    bool did_load;
};

#endif //QT_NO_LIBRARY

#endif //QLIBRARY_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtCore/qlibraryinfo.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QLIBRARYINFO_H
#define QLIBRARYINFO_H

#include &lt;QtCore/qstring.h>

QT_MODULE(Core)

#ifndef QT_NO_SETTINGS

class Q_CORE_EXPORT QLibraryInfo
{
public:
    static QString licensee();
    static QString licensedProducts();

    static QString buildKey();

    enum LibraryLocation
    {
        PrefixPath,
        DocumentationPath,
        HeadersPath,
        LibrariesPath,
        BinariesPath,
        PluginsPath,
        DataPath,
        TranslationsPath,
        SettingsPath,
        DemosPath,
        ExamplesPath
    };
    static QString location(LibraryLocation);

private:
    QLibraryInfo();
};

#endif /* QT_NO_SETTINGS */
#endif // QLIBRARYINFO_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtCore/qline.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QLINE_H
#define QLINE_H

#include &lt;QtCore/qpoint.h>

QT_MODULE(Core)

/*******************************************************************************
 * class QLine
 *******************************************************************************/

class Q_CORE_EXPORT QLine
{
public:
    inline QLine();
    inline QLine(const QPoint &amp;pt1, const QPoint &amp;pt2);
    inline QLine(int x1, int y1, int x2, int y2);

    inline bool isNull() const;

    inline QPoint p1() const;
    inline QPoint p2() const;

    inline int x1() const;
    inline int y1() const;

    inline int x2() const;
    inline int y2() const;

    inline int dx() const;
    inline int dy() const;

    inline void translate(const QPoint &amp;p);
    inline void translate(int dx, int dy);

    inline bool operator==(const QLine &amp;d) const;
    inline bool operator!=(const QLine &amp;d) const { return !(*this == d); }

private:
    QPoint pt1, pt2;
};
Q_DECLARE_TYPEINFO(QLine, Q_MOVABLE_TYPE);

/*******************************************************************************
 * class QLine inline members
 *******************************************************************************/

inline QLine::QLine() { }

inline QLine::QLine(const QPoint &amp;pt1_, const QPoint &amp;pt2_) : pt1(pt1_), pt2(pt2_) { }

inline QLine::QLine(int x1pos, int y1pos, int x2pos, int y2pos) : pt1(QPoint(x1pos, y1pos)), pt2(QPoint(x2pos, y2pos)) { }

inline bool QLine::isNull() const
{
    return pt1 == pt2;
}

inline int QLine::x1() const
{
    return pt1.x();
}

inline int QLine::y1() const
{
    return pt1.y();
}

inline int QLine::x2() const
{
    return pt2.x();
}

inline int QLine::y2() const
{
    return pt2.y();
}

inline QPoint QLine::p1() const
{
    return pt1;
}

inline QPoint QLine::p2() const
{
    return pt2;
}

inline int QLine::dx() const
{
    return pt2.x() - pt1.x();
}

inline int QLine::dy() const
{
    return pt2.y() - pt1.y();
}

inline void QLine::translate(const QPoint &amp;point)
{
    pt1 += point;
    pt2 += point;
}

inline void QLine::translate(int adx, int ady)
{
    this->translate(QPoint(adx, ady));
}

inline bool QLine::operator==(const QLine &amp;d) const
{
    return pt1 == d.pt1 &amp;&amp; pt2 == d.pt2;
}

#ifndef QT_NO_DEBUG_STREAM
Q_CORE_EXPORT QDebug operator&lt;&lt;(QDebug d, const QLine &amp;p);
#endif

#ifndef QT_NO_DATASTREAM
Q_CORE_EXPORT QDataStream &amp;operator&lt;&lt;(QDataStream &amp;, const QLine &amp;);
Q_CORE_EXPORT QDataStream &amp;operator>>(QDataStream &amp;, QLine &amp;);
#endif

/*******************************************************************************
 * class QLineF
 *******************************************************************************/
class Q_CORE_EXPORT QLineF {
public:

    enum IntersectType { NoIntersection, BoundedIntersection, UnboundedIntersection };

    inline QLineF();
    inline QLineF(const QPointF &amp;pt1, const QPointF &amp;pt2);
    inline QLineF(qreal x1, qreal y1, qreal x2, qreal y2);
    inline QLineF(const QLine &amp;line) : pt1(line.p1()), pt2(line.p2()) { }

    bool isNull() const;

    inline QPointF p1() const;
    inline QPointF p2() const;

    inline qreal x1() const;
    inline qreal y1() const;

    inline qreal x2() const;
    inline qreal y2() const;

    inline qreal dx() const;
    inline qreal dy() const;

    qreal length() const;
    void setLength(qreal len);

    QLineF unitVector() const;
    QLineF normalVector() const;

    IntersectType intersect(const QLineF &amp;l, QPointF *intersectionPoint) const;

    qreal angle(const QLineF &amp;l) const;

    QPointF pointAt(qreal t) const;
    inline void translate(const QPointF &amp;p);
    inline void translate(qreal dx, qreal dy);

    inline bool operator==(const QLineF &amp;d) const;
    inline bool operator!=(const QLineF &amp;d) const { return !(*this == d); }

    QLine toLine() const;

private:
    QPointF pt1, pt2;
};
Q_DECLARE_TYPEINFO(QLineF, Q_MOVABLE_TYPE);

/*******************************************************************************
 * class QLineF inline members
 *******************************************************************************/

inline QLineF::QLineF()
{
}

inline QLineF::QLineF(const QPointF &amp;apt1, const QPointF &amp;apt2)
    : pt1(apt1), pt2(apt2)
{
}

inline QLineF::QLineF(qreal x1pos, qreal y1pos, qreal x2pos, qreal y2pos)
    : pt1(x1pos, y1pos), pt2(x2pos, y2pos)
{
}

inline qreal QLineF::x1() const
{
    return pt1.x();
}

inline qreal QLineF::y1() const
{
    return pt1.y();
}

inline qreal QLineF::x2() const
{
    return pt2.x();
}

inline qreal QLineF::y2() const
{
    return pt2.y();
}

inline QPointF QLineF::p1() const
{
    return pt1;
}

inline QPointF QLineF::p2() const
{
    return pt2;
}

inline qreal QLineF::dx() const
{
    return pt2.x() - pt1.x();
}

inline qreal QLineF::dy() const
{
    return pt2.y() - pt1.y();
}

inline QLineF QLineF::normalVector() const
{
    return QLineF(p1(), p1() + QPointF(dy(), -dx()));
}

inline void QLineF::translate(const QPointF &amp;point)
{
    pt1 += point;
    pt2 += point;
}

inline void QLineF::translate(qreal adx, qreal ady)
{
    this->translate(QPointF(adx, ady));
}

inline void QLineF::setLength(qreal len)
{
    if (isNull())
        return;
    QLineF v = unitVector();
    pt2 = QPointF(pt1.x() + v.dx() * len, pt1.y() + v.dy() * len);
}

inline QPointF QLineF::pointAt(qreal t) const
{
    qreal vx = pt2.x() - pt1.x();
    qreal vy = pt2.y() - pt1.y();
    return QPointF(pt1.x() + vx * t, pt1.y() + vy * t);
}

inline QLine QLineF::toLine() const
{
    return QLine(pt1.toPoint(), pt2.toPoint());
}

inline bool QLineF::operator==(const QLineF &amp;d) const
{
    return pt1 == d.pt1 &amp;&amp; pt2 == d.pt2;
}

#ifndef QT_NO_DEBUG_STREAM
Q_CORE_EXPORT QDebug operator&lt;&lt;(QDebug d, const QLineF &amp;p);
#endif

#ifndef QT_NO_DATASTREAM
Q_CORE_EXPORT QDataStream &amp;operator&lt;&lt;(QDataStream &amp;, const QLineF &amp;);
Q_CORE_EXPORT QDataStream &amp;operator>>(QDataStream &amp;, QLineF &amp;);
#endif

#endif // QLINE_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtCore/qlinkedlist.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QLINKEDLIST_H
#define QLINKEDLIST_H

#include &lt;QtCore/qiterator.h>
#include &lt;QtCore/qatomic.h>

#ifndef QT_NO_STL
#include &lt;iterator>
#include &lt;list>
#endif

QT_MODULE(Core)

struct Q_CORE_EXPORT QLinkedListData
{
    QLinkedListData *n, *p;
    QBasicAtomic ref;
    int size;
    uint sharable : 1;

    static QLinkedListData shared_null;
};

template &lt;typename T>
struct QLinkedListNode
{
    inline QLinkedListNode(const T &amp;arg): t(arg) { }
    QLinkedListNode *n, *p;
    T t;
};

template &lt;class T>
class QLinkedList
{
    typedef QLinkedListNode&lt;T> Node;
    union { QLinkedListData *d; QLinkedListNode&lt;T> *e; };

public:
    inline QLinkedList() : d(&amp;QLinkedListData::shared_null) { d->ref.ref(); }
    inline QLinkedList(const QLinkedList &amp;l) : d(l.d) { d->ref.ref(); if (!d->sharable) detach(); }
    ~QLinkedList();
    QLinkedList&lt;T> &amp;operator=(const QLinkedList &amp;);
    bool operator==(const QLinkedList &amp;l) const;
    inline bool operator!=(const QLinkedList &amp;l) const { return !(*this == l); }

    inline int size() const { return d->size; }
    inline void detach()
    { if (d->ref != 1) detach_helper(); }
    inline bool isDetached() const { return d->ref == 1; }
    inline void setSharable(bool sharable) { if (!sharable) detach(); d->sharable = sharable; }

    inline bool isEmpty() const { return d->size == 0; }

    void clear();

    void append(const T &amp;);
    void prepend(const T &amp;);
    T takeFirst();
    T takeLast();
    int removeAll(const T &amp;t);
    bool contains(const T &amp;t) const;
    int count(const T &amp;t) const;

    class const_iterator;

    class iterator
    {
    public:
        typedef std::bidirectional_iterator_tag  iterator_category;
        typedef ptrdiff_t  difference_type;
        typedef T value_type;
        typedef T *pointer;
        typedef T &amp;reference;
        Node *i;
        inline iterator() : i(0) {}
        inline iterator(Node *n) : i(n) {}
        inline iterator(const iterator &amp;o) : i(o.i) {}
        inline iterator &amp;operator=(const iterator &amp;o) { i = o.i; return *this; }
        inline T &amp;operator*() const { return i->t; }
        inline T *operator->() const { return &amp;i->t; }
        inline bool operator==(const iterator &amp;o) const { return i == o.i; }
        inline bool operator!=(const iterator &amp;o) const { return i != o.i; }
        inline bool operator==(const const_iterator &amp;o) const
            { return i == reinterpret_cast&lt;const iterator &amp;>(o).i; }
        inline bool operator!=(const const_iterator &amp;o) const
            { return i != reinterpret_cast&lt;const iterator &amp;>(o).i; }
        inline iterator &amp;operator++() { i = i->n; return *this; }
        inline iterator operator++(int) { Node *n = i; i = i->n; return n; }
        inline iterator &amp;operator--() { i = i->p; return *this; }
        inline iterator operator--(int) { Node *n = i; i = i->p; return n; }
        inline iterator operator+(int j) const
        { Node *n = i; if (j > 0) while (j--) n = n->n; else while (j++) n = n->p; return n; }
        inline iterator operator-(int j) const { return operator+(-j); }
        inline iterator &amp;operator+=(int j) { return *this = *this + j; }
        inline iterator &amp;operator-=(int j) { return *this = *this - j; }
    };
    friend class iterator;

    class const_iterator
    {
    public:
        typedef std::bidirectional_iterator_tag  iterator_category;
        typedef ptrdiff_t  difference_type;
        typedef T value_type;
        typedef const T *pointer;
        typedef const T &amp;reference;
        Node *i;
        inline const_iterator() : i(0) {}
        inline const_iterator(Node *n) : i(n) {}
        inline const_iterator(const const_iterator &amp;o) : i(o.i){}
        inline const_iterator(iterator ci) : i(ci.i){}
	inline const_iterator &amp;operator=(const const_iterator &amp;o) { i = o.i; return *this; }
        inline const T &amp;operator*() const { return i->t; }
        inline const T *operator->() const { return &amp;i->t; }
        inline bool operator==(const const_iterator &amp;o) const { return i == o.i; }
        inline bool operator!=(const const_iterator &amp;o) const { return i != o.i; }
        inline const_iterator &amp;operator++() { i = i->n; return *this; }
        inline const_iterator operator++(int) { Node *n = i; i = i->n; return n; }
        inline const_iterator &amp;operator--() { i = i->p; return *this; }
        inline const_iterator operator--(int) { Node *n = i; i = i->p; return n; }
        inline const_iterator operator+(int j) const
        { Node *n = i; if (j > 0) while (j--) n = n->n; else while (j++) n = n->p; return n; }
        inline const_iterator operator-(int j) const { return operator+(-j); }
        inline const_iterator &amp;operator+=(int j) { return *this = *this + j; }
        inline const_iterator &amp;operator-=(int j) { return *this = *this - j; }
    };
    friend class const_iterator;

    // stl style
    inline iterator begin() { detach(); return e->n; }
    inline const_iterator begin() const { return e->n; }
    inline const_iterator constBegin() const { return e->n; }
    inline iterator end() { detach(); return e; }
    inline const_iterator end() const { return e; }
    inline const_iterator constEnd() const { return e; }
    iterator insert(iterator before, const T &amp;t);
    iterator erase(iterator pos);
    iterator erase(iterator first, iterator last);

    // more Qt
    typedef iterator Iterator;
    typedef const_iterator ConstIterator;
    inline int count() const { return d->size; }
    inline T&amp; first() { Q_ASSERT(!isEmpty()); return *begin(); }
    inline const T&amp; first() const { Q_ASSERT(!isEmpty()); return *begin(); }
    T&amp; last() { Q_ASSERT(!isEmpty()); return *(--end()); }
    const T&amp; last() const { Q_ASSERT(!isEmpty()); return *(--end()); }
    inline void removeFirst() { Q_ASSERT(!isEmpty()); erase(begin()); }
    inline void removeLast() { Q_ASSERT(!isEmpty()); erase(--end()); }

    // stl compatibility
    inline void push_back(const T &amp;t) { append(t); }
    inline void push_front(const T &amp;t) { prepend(t); }
    inline T&amp; front() { return first(); }
    inline const T&amp; front() const { return first(); }
    inline T&amp; back() { return last(); }
    inline const T&amp; back() const { return last(); }
    inline void pop_front() { removeFirst(); }
    inline void pop_back() { removeLast(); }
    inline bool empty() const { return isEmpty(); }
    typedef int size_type;
    typedef T value_type;
    typedef value_type *pointer;
    typedef const value_type *const_pointer;
    typedef value_type &amp;reference;
    typedef const value_type &amp;const_reference;

#ifndef QT_NO_STL
    static inline QLinkedList&lt;T> fromStdList(const std::list&lt;T> &amp;list)
    { QLinkedList&lt;T> tmp; qCopy(list.begin(), list.end(), std::back_inserter(tmp)); return tmp; }
    inline std::list&lt;T> toStdList() const
    { std::list&lt;T> tmp; qCopy(constBegin(), constEnd(), std::back_inserter(tmp)); return tmp; }
#endif

#ifdef QT3_SUPPORT
    // compatibility
    inline QT3_SUPPORT iterator remove(iterator pos) { return erase(pos); }
    inline QT3_SUPPORT int findIndex(const T&amp; t) const
    { int i=0; for (const_iterator it = begin(); it != end(); ++it, ++i) if(*it == t) return i; return -1;}
    inline QT3_SUPPORT iterator find(iterator from, const T&amp; t)
    { while (from != end() &amp;&amp; !(*from == t)) ++from; return from; }
    inline QT3_SUPPORT iterator find(const T&amp; t)
    { return find(begin(), t); }
    inline QT3_SUPPORT const_iterator find(const_iterator from, const T&amp; t) const
    { while (from != end() &amp;&amp; !(*from == t)) ++from; return from; }
    inline QT3_SUPPORT const_iterator find(const T&amp; t) const
    { return find(begin(), t); }
#endif

    // comfort
    QLinkedList &amp;operator+=(const QLinkedList &amp;l);
    QLinkedList operator+(const QLinkedList &amp;l) const;
    inline QLinkedList &amp;operator+=(const T &amp;t) { append(t); return *this; }
    inline QLinkedList &amp;operator&lt;&lt; (const T &amp;t) { append(t); return *this; }
    inline QLinkedList &amp;operator&lt;&lt;(const QLinkedList &amp;l) { *this += l; return *this; }

private:
    void detach_helper();
    void free(QLinkedListData*);
};

template &lt;typename T>
inline QLinkedList&lt;T>::~QLinkedList()
{
    if (!d)
        return;
    if (!d->ref.deref())
        free(d);
}

template &lt;typename T>
void QLinkedList&lt;T>::detach_helper()
{
    union { QLinkedListData *d; Node *e; } x;
    x.d = new QLinkedListData;
    x.d->ref.init(1);
    x.d->size = d->size;
    x.d->sharable = true;
    Node *i = e->n, *j = x.e;
    while (i != e) {
        j->n = new Node(i->t);
        j->n->p = j;
        i = i->n;
        j = j->n;
    }
    j->n = x.e;
    x.e->p = j;
    x.d = qAtomicSetPtr(&amp;d, x.d);
    if (!x.d->ref.deref())
        free(x.d);
}

template &lt;typename T>
void QLinkedList&lt;T>::free(QLinkedListData *x)
{
    Node *y = reinterpret_cast&lt;Node*>(x);
    Node *i = y->n;
    if (x->ref == 0) {
        while(i != y) {
            Node *n = i;
            i = i->n;
            delete n;
        }
        delete x;
    }
}

template &lt;typename T>
void QLinkedList&lt;T>::clear()
{
    *this = QLinkedList&lt;T>();
}

template &lt;typename T>
QLinkedList&lt;T> &amp;QLinkedList&lt;T>::operator=(const QLinkedList&lt;T> &amp;l)
{
    if (d != l.d) {
        QLinkedListData *x = l.d;
        x->ref.ref();
        x = qAtomicSetPtr(&amp;d, x);
        if (!x->ref.deref())
            free(x);
        if (!d->sharable)
            detach_helper();
    }
    return *this;
}

template &lt;typename T>
bool QLinkedList&lt;T>::operator== (const QLinkedList&lt;T> &amp;l) const
{
    if (d->size != l.d->size)
        return false;
    if (e == l.e)
        return true;
    Node *i = e->n;
    Node *il = l.e->n;
    while (i != e) {
        if (! (i->t == il->t))
            return false;
        i = i->n;
        il = il->n;
    }
    return true;
}

template &lt;typename T>
void QLinkedList&lt;T>::append(const T &amp;t)
{
    detach();
    Node *i = new Node(t);
    i->n = e;
    i->p = e->p;
    i->p->n = i;
    e->p = i;
    d->size++;
}

template &lt;typename T>
void QLinkedList&lt;T>::prepend(const T &amp;t)
{
    detach();
    Node *i = new Node(t);
    i->n = e->n;
    i->p = e;
    i->n->p = i;
    e->n = i;
    d->size++;
}

template &lt;typename T>
int QLinkedList&lt;T>::removeAll(const T &amp;_t)
{
    detach();
    const T t = _t;
    Node *i = e->n;
    int c = 0;
    while (i != e) {
        if (i->t == t) {
            Node *n = i;
            i->n->p = i->p;
            i->p->n = i->n;
            i = i->n;
            delete n;
            c++;
        } else {
            i = i->n;
        }
    }
    d->size-=c;
    return c;
}

template &lt;typename T>
inline T QLinkedList&lt;T>::takeFirst()
{
    T t = first();
    removeFirst();
    return t;
}

template &lt;typename T>
inline T QLinkedList&lt;T>::takeLast()
{
    T t = last();
    removeLast();
    return t;
}

template &lt;typename T>
bool QLinkedList&lt;T>::contains(const T &amp;t) const
{
    Node *i = e;
    while ((i = i->n) != e)
        if (i->t == t)
            return true;
    return false;
}

template &lt;typename T>
int QLinkedList&lt;T>::count(const T &amp;t) const
{
    Node *i = e;
    int c = 0;
    while ((i = i->n) != e)
        if (i->t == t)
            c++;
    return c;
}


template &lt;typename T>
typename QLinkedList&lt;T>::iterator QLinkedList&lt;T>::insert(iterator before, const T &amp;t)
{
    Node *i = before.i;
    Node *m = new Node(t);
    m->n = i;
    m->p = i->p;
    m->p->n = m;
    i->p = m;
    d->size++;
    return m;
}

template &lt;typename T>
typename QLinkedList&lt;T>::iterator QLinkedList&lt;T>::erase(typename QLinkedList&lt;T>::iterator afirst,
                                                         typename QLinkedList&lt;T>::iterator alast)
{
    while (afirst != alast)
        erase(afirst++);
    return alast;
}


template &lt;typename T>
typename QLinkedList&lt;T>::iterator QLinkedList&lt;T>::erase(iterator pos)
{
    detach();
    Node *i = pos.i;
    if (i != e) {
        Node *n = i;
        i->n->p = i->p;
        i->p->n = i->n;
        i = i->n;
        delete n;
        d->size--;
    }
    return i;
}

template &lt;typename T>
QLinkedList&lt;T> &amp;QLinkedList&lt;T>::operator+=(const QLinkedList&lt;T> &amp;l)
{
    detach();
    int n = l.d->size;
    d->size += n;
    Node *o = l.e->n;
    while (n--) {
        Node *i = new Node(o->t);
        o = o->n;
        i->n = e;
        i->p = e->p;
        i->p->n = i;
        e->p = i;
    }
    return *this;
}

template &lt;typename T>
QLinkedList&lt;T> QLinkedList&lt;T>::operator+(const QLinkedList&lt;T> &amp;l) const
{
    QLinkedList&lt;T> n = *this;
    n += l;
    return n;
}

Q_DECLARE_SEQUENTIAL_ITERATOR(LinkedList)
Q_DECLARE_MUTABLE_SEQUENTIAL_ITERATOR(LinkedList)

#endif // QLINKEDLIST_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtCore/qlist.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QLIST_H
#define QLIST_H

#include &lt;QtCore/qiterator.h>
#include &lt;QtCore/qatomic.h>
#include &lt;QtCore/qalgorithms.h>

#ifndef QT_NO_STL
#include &lt;iterator>
#include &lt;list>
#endif

#include &lt;new>

QT_MODULE(Core)

template &lt;typename T> class QVector;
template &lt;typename T> class QSet;

struct Q_CORE_EXPORT QListData {
    struct Data {
        QBasicAtomic ref;
        int alloc, begin, end;
        uint sharable : 1;
        void *array[1];
    };
    enum { DataHeaderSize = sizeof(Data) - sizeof(void *) };

    Data *detach();
    void realloc(int alloc);
    static Data shared_null;
    Data *d;
    void **erase(void **xi);
    void **append();
    void **append(const QListData &amp;l);
    void **prepend();
    void **insert(int i);
    void remove(int i);
    void remove(int i, int n);
    void move(int from, int to);
    inline int size() const { return d->end - d->begin; }
    inline bool isEmpty() const { return d->end  == d->begin; }
    inline void **at(int i) const { return d->array + d->begin + i; }
    inline void **begin() const { return d->array + d->begin; }
    inline void **end() const { return d->array + d->end; }
};

template &lt;typename T>
class QList
{
    struct Node { void *v;
#if defined(Q_CC_BOR)
        Q_INLINE_TEMPLATE T &amp;t();
#else
        Q_INLINE_TEMPLATE T &amp;t()
        { return *reinterpret_cast&lt;T*>(QTypeInfo&lt;T>::isLarge || QTypeInfo&lt;T>::isStatic
                                       ? v : this); }
#endif
    };

    union { QListData p; QListData::Data *d; };

public:
    inline QList() : d(&amp;QListData::shared_null) { d->ref.ref(); }
    inline QList(const QList &amp;l) : d(l.d) { d->ref.ref(); if (!d->sharable) detach_helper(); }
    ~QList();
    QList &amp;operator=(const QList &amp;l);
    bool operator==(const QList &amp;l) const;
    inline bool operator!=(const QList &amp;l) const { return !(*this == l); }

    inline int size() const { return p.size(); }

    inline void detach() { if (d->ref != 1) detach_helper(); }
    inline bool isDetached() const { return d->ref == 1; }
    inline void setSharable(bool sharable) { if (!sharable) detach(); d->sharable = sharable; }

    inline bool isEmpty() const { return p.isEmpty(); }

    void clear();

    const T &amp;at(int i) const;
    const T &amp;operator[](int i) const;
    T &amp;operator[](int i);

    void append(const T &amp;t);
    void prepend(const T &amp;t);
    void insert(int i, const T &amp;t);
    void replace(int i, const T &amp;t);
    void removeAt(int i);
    int removeAll(const T &amp;t);
    T takeAt(int i);
    T takeFirst();
    T takeLast();
    void move(int from, int to);
    void swap(int i, int j);
    int indexOf(const T &amp;t, int from = 0) const;
    int lastIndexOf(const T &amp;t, int from = -1) const;
    QBool contains(const T &amp;t) const;
    int count(const T &amp;t) const;

    class const_iterator;

    class iterator {
    public:
        Node *i;
        typedef std::random_access_iterator_tag  iterator_category;
        typedef ptrdiff_t  difference_type;
        typedef T value_type;
        typedef T *pointer;
        typedef T &amp;reference;

        inline iterator() : i(0) {}
        inline iterator(Node *n) : i(n) {}
        inline iterator(const iterator &amp;o): i(o.i){}
        inline T &amp;operator*() const { return i->t(); }
        inline T *operator->() const { return &amp;i->t(); }
        inline T &amp;operator[](int j) const { return i[j].t(); }
        inline bool operator==(const iterator &amp;o) const { return i == o.i; }
        inline bool operator!=(const iterator &amp;o) const { return i != o.i; }
        inline bool operator&lt;(const iterator&amp; other) const { return i &lt; other.i; }
        inline bool operator&lt;=(const iterator&amp; other) const { return i &lt;= other.i; }
        inline bool operator>(const iterator&amp; other) const { return i > other.i; }
        inline bool operator>=(const iterator&amp; other) const { return i >= other.i; }
        inline bool operator==(const const_iterator &amp;o) const
            { return i == reinterpret_cast&lt;const iterator &amp;>(o).i; }
        inline bool operator!=(const const_iterator &amp;o) const
            { return i != reinterpret_cast&lt;const iterator &amp;>(o).i; }
        inline bool operator&lt;(const const_iterator&amp; other) const
            { return i &lt; reinterpret_cast&lt;const iterator &amp;>(other).i; }
        inline bool operator&lt;=(const const_iterator&amp; other) const
            { return i &lt;= reinterpret_cast&lt;const iterator &amp;>(other).i; }
        inline bool operator>(const const_iterator&amp; other) const
            { return i > reinterpret_cast&lt;const iterator &amp;>(other).i; }
        inline bool operator>=(const const_iterator&amp; other) const
            { return i >= reinterpret_cast&lt;const iterator &amp;>(other).i; }
        inline iterator &amp;operator++() { ++i; return *this; }
        inline iterator operator++(int) { Node *n = i; ++i; return n; }
        inline iterator &amp;operator--() { i--; return *this; }
        inline iterator operator--(int) { Node *n = i; i--; return n; }
        inline iterator &amp;operator+=(int j) { i+=j; return *this; }
        inline iterator &amp;operator-=(int j) { i-=j; return *this; }
        inline iterator operator+(int j) const { return iterator(i+j); }
        inline iterator operator-(int j) const { return iterator(i-j); }
        inline int operator-(iterator j) const { return i - j.i; }
    };
    friend class iterator;

    class const_iterator {
    public:
        Node *i;
        typedef std::random_access_iterator_tag  iterator_category;
        typedef ptrdiff_t difference_type;
        typedef T value_type;
        typedef const T *pointer;
        typedef const T &amp;reference;

        inline const_iterator() : i(0) {}
        inline const_iterator(Node *n) : i(n) {}
        inline const_iterator(const const_iterator &amp;o): i(o.i) {}
        inline const_iterator(const iterator &amp;o): i(o.i) {}
        inline const T &amp;operator*() const { return i->t(); }
        inline const T *operator->() const { return &amp;i->t(); }
        inline const T &amp;operator[](int j) const { return i[j].t(); }
        inline bool operator==(const const_iterator &amp;o) const { return i == o.i; }
        inline bool operator!=(const const_iterator &amp;o) const { return i != o.i; }
        inline bool operator&lt;(const const_iterator&amp; other) const { return i &lt; other.i; }
        inline bool operator&lt;=(const const_iterator&amp; other) const { return i &lt;= other.i; }
        inline bool operator>(const const_iterator&amp; other) const { return i > other.i; }
        inline bool operator>=(const const_iterator&amp; other) const { return i >= other.i; }
        inline const_iterator &amp;operator++() { ++i; return *this; }
        inline const_iterator operator++(int) { Node *n = i; ++i; return n; }
        inline const_iterator &amp;operator--() { i--; return *this; }
        inline const_iterator operator--(int) { Node *n = i; i--; return n; }
        inline const_iterator &amp;operator+=(int j) { i+=j; return *this; }
        inline const_iterator &amp;operator-=(int j) { i+=j; return *this; }
        inline const_iterator operator+(int j) const { return const_iterator(i+j); }
        inline const_iterator operator-(int j) const { return const_iterator(i-j); }
        inline int operator-(const_iterator j) const { return i - j.i; }
    };
    friend class const_iterator;

    // stl style
    inline iterator begin() { detach(); return reinterpret_cast&lt;Node *>(p.begin()); }
    inline const_iterator begin() const { return reinterpret_cast&lt;Node *>(p.begin()); }
    inline const_iterator constBegin() const { return reinterpret_cast&lt;Node *>(p.begin()); }
    inline iterator end() { detach(); return reinterpret_cast&lt;Node *>(p.end()); }
    inline const_iterator end() const { return reinterpret_cast&lt;Node *>(p.end()); }
    inline const_iterator constEnd() const { return reinterpret_cast&lt;Node *>(p.end()); }
    iterator insert(iterator before, const T &amp;t);
    iterator erase(iterator pos);
    iterator erase(iterator first, iterator last);

    // more Qt
    typedef iterator Iterator;
    typedef const_iterator ConstIterator;
    inline int count() const { return p.size(); }
    inline T&amp; first() { Q_ASSERT(!isEmpty()); return *begin(); }
    inline const T&amp; first() const { Q_ASSERT(!isEmpty()); return *begin(); }
    T&amp; last() { Q_ASSERT(!isEmpty()); return *(--end()); }
    const T&amp; last() const { Q_ASSERT(!isEmpty()); return *(--end()); }
    inline void removeFirst() { Q_ASSERT(!isEmpty()); erase(begin()); }
    inline void removeLast() { Q_ASSERT(!isEmpty()); erase(--end()); }
    QList&lt;T> mid(int pos, int length = -1) const;

    T value(int i) const;
    T value(int i, const T &amp;defaultValue) const;

    // stl compatibility
    inline void push_back(const T &amp;t) { append(t); }
    inline void push_front(const T &amp;t) { prepend(t); }
    inline T&amp; front() { return first(); }
    inline const T&amp; front() const { return first(); }
    inline T&amp; back() { return last(); }
    inline const T&amp; back() const { return last(); }
    inline void pop_front() { removeFirst(); }
    inline void pop_back() { removeLast(); }
    inline bool empty() const { return isEmpty(); }
    typedef int size_type;
    typedef T value_type;
    typedef value_type *pointer;
    typedef const value_type *const_pointer;
    typedef value_type &amp;reference;
    typedef const value_type &amp;const_reference;

#ifdef QT3_SUPPORT
    inline QT3_SUPPORT iterator remove(iterator pos) { return erase(pos); }
    inline QT3_SUPPORT int remove(const T &amp;t) { return removeAll(t); }
    inline QT3_SUPPORT int findIndex(const T&amp; t) const { return indexOf(t); }
    inline QT3_SUPPORT iterator find(const T&amp; t)
    { int i = indexOf(t); return (i == -1 ? end() : (begin()+i)); }
    inline QT3_SUPPORT const_iterator find (const T&amp; t) const
    { int i = indexOf(t); return (i == -1 ? end() : (begin()+i)); }
    inline QT3_SUPPORT iterator find(iterator from, const T&amp; t)
    { int i = indexOf(t, from - begin()); return i == -1 ? end() : begin()+i; }
    inline QT3_SUPPORT const_iterator find(const_iterator from, const T&amp; t) const
    { int i = indexOf(t, from - begin()); return i == -1 ? end() : begin()+i; }
#endif

    // comfort
    QList &amp;operator+=(const QList &amp;l);
    inline QList operator+(const QList &amp;l) const
    { QList n = *this; n += l; return n; }
    inline QList &amp;operator+=(const T &amp;t)
    { append(t); return *this; }
    inline QList &amp;operator&lt;&lt; (const T &amp;t)
    { append(t); return *this; }
    inline QList &amp;operator&lt;&lt;(const QList &amp;l)
    { *this += l; return *this; }

    QVector&lt;T> toVector() const;
    QSet&lt;T> toSet() const;

    static QList&lt;T> fromVector(const QVector&lt;T> &amp;vector);
    static QList&lt;T> fromSet(const QSet&lt;T> &amp;set);

#ifndef QT_NO_STL
    static inline QList&lt;T> fromStdList(const std::list&lt;T> &amp;list)
    { QList&lt;T> tmp; qCopy(list.begin(), list.end(), std::back_inserter(tmp)); return tmp; }
    inline std::list&lt;T> toStdList() const
    { std::list&lt;T> tmp; qCopy(constBegin(), constEnd(), std::back_inserter(tmp)); return tmp; }
#endif

private:
    void detach_helper();
    void free(QListData::Data *d);

    void node_construct(Node *n, const T &amp;t);
    void node_destruct(Node *n);
    void node_copy(Node *from, Node *to, Node *src);
    void node_destruct(Node *from, Node *to);
};

#if defined(Q_CC_BOR)
template &lt;typename T>
Q_INLINE_TEMPLATE T &amp;QList&lt;T>::Node::t()
{ return QTypeInfo&lt;T>::isLarge || QTypeInfo&lt;T>::isStatic ? *(T*)v:*(T*)this; }
#endif

template &lt;typename T>
Q_INLINE_TEMPLATE void QList&lt;T>::node_construct(Node *n, const T &amp;t)
{
    if (QTypeInfo&lt;T>::isLarge || QTypeInfo&lt;T>::isStatic) n->v = new T(t);
    else if (QTypeInfo&lt;T>::isComplex) new (n) T(t);
    else *reinterpret_cast&lt;T*>(n) = t;
}

template &lt;typename T>
Q_INLINE_TEMPLATE void QList&lt;T>::node_destruct(Node *n)
{
    if (QTypeInfo&lt;T>::isLarge || QTypeInfo&lt;T>::isStatic) delete reinterpret_cast&lt;T*>(n->v);
    else if (QTypeInfo&lt;T>::isComplex) reinterpret_cast&lt;T*>(n)->~T();
}

template &lt;typename T>
Q_INLINE_TEMPLATE void QList&lt;T>::node_copy(Node *from, Node *to, Node *src)
{
    if (QTypeInfo&lt;T>::isLarge || QTypeInfo&lt;T>::isStatic)
        while(from != to)
            (from++)->v = new T(*reinterpret_cast&lt;T*>((src++)->v));
    else if (QTypeInfo&lt;T>::isComplex)
        while(from != to)
            new (from++) T(*reinterpret_cast&lt;T*>(src++));
}

template &lt;typename T>
Q_INLINE_TEMPLATE void QList&lt;T>::node_destruct(Node *from, Node *to)
{
    if (QTypeInfo&lt;T>::isLarge || QTypeInfo&lt;T>::isStatic)
        while(from != to) --to, delete reinterpret_cast&lt;T*>(to->v);
    else if (QTypeInfo&lt;T>::isComplex)
        while (from != to) --to, reinterpret_cast&lt;T*>(to)->~T();
}

template &lt;typename T>
Q_INLINE_TEMPLATE QList&lt;T> &amp;QList&lt;T>::operator=(const QList&lt;T> &amp;l)
{
    if (d != l.d) {
        QListData::Data *x = l.d;
        x->ref.ref();
        x = qAtomicSetPtr(&amp;d, x);
        if (!x->ref.deref())
            free(x);
        if (!d->sharable)
            detach_helper();
    }
    return *this;
}
template &lt;typename T>
inline typename QList&lt;T>::iterator QList&lt;T>::insert(iterator before, const T &amp;t)
{ Node *n = reinterpret_cast&lt;Node *>(p.insert(before.i-reinterpret_cast&lt;Node *>(p.begin())));
 node_construct(n,t); return n; }
template &lt;typename T>
inline typename QList&lt;T>::iterator QList&lt;T>::erase(iterator it)
{ node_destruct(it.i);
 return reinterpret_cast&lt;Node *>(p.erase(reinterpret_cast&lt;void**>(it.i))); }
template &lt;typename T>
inline const T &amp;QList&lt;T>::at(int i) const
{ Q_ASSERT_X(i >= 0 &amp;&amp; i &lt; p.size(), "QList&lt;T>::at", "index out of range");
 return reinterpret_cast&lt;Node *>(p.at(i))->t(); }
template &lt;typename T>
inline const T &amp;QList&lt;T>::operator[](int i) const
{ Q_ASSERT_X(i >= 0 &amp;&amp; i &lt; p.size(), "QList&lt;T>::operator[]", "index out of range");
 return reinterpret_cast&lt;Node *>(p.at(i))->t(); }
template &lt;typename T>
inline T &amp;QList&lt;T>::operator[](int i)
{ Q_ASSERT_X(i >= 0 &amp;&amp; i &lt; p.size(), "QList&lt;T>::operator[]", "index out of range");
  detach(); return reinterpret_cast&lt;Node *>(p.at(i))->t(); }
template &lt;typename T>
inline void QList&lt;T>::removeAt(int i)
{ if(i >= 0 &amp;&amp; i &lt; p.size()) { detach();
 node_destruct(reinterpret_cast&lt;Node *>(p.at(i))); p.remove(i); } }
template &lt;typename T>
inline T QList&lt;T>::takeAt(int i)
{ Q_ASSERT_X(i >= 0 &amp;&amp; i &lt; p.size(), "QList&lt;T>::take", "index out of range");
 detach(); Node *n = reinterpret_cast&lt;Node *>(p.at(i)); T t = n->t(); node_destruct(n);
 p.remove(i); return t; }
template &lt;typename T>
inline T QList&lt;T>::takeFirst()
{ T t = first(); removeFirst(); return t; }
template &lt;typename T>
inline T QList&lt;T>::takeLast()
{ T t = last(); removeLast(); return t; }

template &lt;typename T>
Q_OUTOFLINE_TEMPLATE void QList&lt;T>::append(const T &amp;t)
{
    detach();
    if (QTypeInfo&lt;T>::isLarge || QTypeInfo&lt;T>::isStatic) {
        node_construct(reinterpret_cast&lt;Node *>(p.append()), t);
    } else {
        const T cpy(t);
        node_construct(reinterpret_cast&lt;Node *>(p.append()), cpy);
    }
}

template &lt;typename T>
inline void QList&lt;T>::prepend(const T &amp;t)
{
    detach();
    if (QTypeInfo&lt;T>::isLarge || QTypeInfo&lt;T>::isStatic) {
        node_construct(reinterpret_cast&lt;Node *>(p.prepend()), t);
    } else {
        const T cpy(t);
        node_construct(reinterpret_cast&lt;Node *>(p.prepend()), cpy);
    }
}

template &lt;typename T>
inline void QList&lt;T>::insert(int i, const T &amp;t)
{
    detach();
    if (QTypeInfo&lt;T>::isLarge || QTypeInfo&lt;T>::isStatic) {
        node_construct(reinterpret_cast&lt;Node *>(p.insert(i)), t);
    } else {
        const T cpy(t);
        node_construct(reinterpret_cast&lt;Node *>(p.insert(i)), cpy);
    }
}

template &lt;typename T>
inline void QList&lt;T>::replace(int i, const T &amp;t)
{
    Q_ASSERT_X(i >= 0 &amp;&amp; i &lt; p.size(), "QList&lt;T>::replace", "index out of range");
    detach();
    if (QTypeInfo&lt;T>::isLarge || QTypeInfo&lt;T>::isStatic) {
        reinterpret_cast&lt;Node *>(p.at(i))->t() = t;
    } else {
        const T cpy(t);
        reinterpret_cast&lt;Node *>(p.at(i))->t() = cpy;
    }
}

template &lt;typename T>
inline void QList&lt;T>::swap(int i, int j)
{
    Q_ASSERT_X(i >= 0 &amp;&amp; i &lt; p.size() &amp;&amp; j >= 0 &amp;&amp; j &lt; p.size(),
                "QList&lt;T>::swap", "index out of range");
    detach();
    void *t = d->array[d->begin + i];
    d->array[d->begin + i] = d->array[d->begin + j];
    d->array[d->begin + j] = t;
}

template &lt;typename T>
inline void QList&lt;T>::move(int from, int to)
{
    Q_ASSERT_X(from >= 0 &amp;&amp; from &lt; p.size() &amp;&amp; to >= 0 &amp;&amp; to &lt; p.size(),
               "QList&lt;T>::move", "index out of range");
    detach();
    p.move(from, to);
}

template&lt;typename T>
Q_OUTOFLINE_TEMPLATE QList&lt;T> QList&lt;T>::mid(int pos, int length) const
{
    if (length &lt; 0)
        length = size() - pos;
    if (pos == 0 &amp;&amp; length == size())
        return *this;
    QList&lt;T> cpy;
    if (pos + length > size())
        length = size() - pos;
    for (int i = pos; i &lt; pos + length; ++i)
        cpy += at(i);
    return cpy;
}

template&lt;typename T>
Q_OUTOFLINE_TEMPLATE T QList&lt;T>::value(int i) const
{
    if (i &lt; 0 || i >= p.size()) {
        return T();
    }
    return reinterpret_cast&lt;Node *>(p.at(i))->t();
}
template&lt;typename T>
Q_OUTOFLINE_TEMPLATE T QList&lt;T>::value(int i, const T&amp; defaultValue) const
{
    return ((i &lt; 0 || i >= p.size()) ? defaultValue : reinterpret_cast&lt;Node *>(p.at(i))->t());
}

template &lt;typename T>
Q_OUTOFLINE_TEMPLATE void QList&lt;T>::detach_helper()
{
    Node *n = reinterpret_cast&lt;Node *>(p.begin());
    QListData::Data *x = p.detach();
    if (x)
        free(x);
    node_copy(reinterpret_cast&lt;Node *>(p.begin()), reinterpret_cast&lt;Node *>(p.end()), n);
}

template &lt;typename T>
Q_OUTOFLINE_TEMPLATE QList&lt;T>::~QList()
{
    if (!d)
        return;
    QListData::Data *x = &amp;QListData::shared_null;
    x = qAtomicSetPtr(&amp;d, x);
    if (!x->ref.deref())
        free(x);
}

template &lt;typename T>
Q_OUTOFLINE_TEMPLATE bool QList&lt;T>::operator==(const QList&lt;T> &amp;l) const
{
    if (p.size() != l.p.size())
        return false;
    if (d == l.d)
        return true;
    Node *i = reinterpret_cast&lt;Node *>(p.end());
    Node *b = reinterpret_cast&lt;Node *>(p.begin());
    Node *li = reinterpret_cast&lt;Node *>(l.p.end());
    while (i != b) {
        --i; --li;
        if (!(i->t() == li->t()))
            return false;
    }
    return true;
}


template &lt;typename T>
Q_OUTOFLINE_TEMPLATE void QList&lt;T>::free(QListData::Data *data)
{
    node_destruct(reinterpret_cast&lt;Node *>(data->array + data->begin),
                  reinterpret_cast&lt;Node *>(data->array + data->end));
    if (data->ref == 0)
        qFree(data);
}


template &lt;typename T>
Q_OUTOFLINE_TEMPLATE void QList&lt;T>::clear()
{
    *this = QList&lt;T>();
}

template &lt;typename T>
Q_OUTOFLINE_TEMPLATE int QList&lt;T>::removeAll(const T &amp;_t)
{
    detach();
    const T t = _t;
    int removedCount=0, i=0;
    Node *n;
    while (i &lt; p.size())
        if ((n = reinterpret_cast&lt;Node *>(p.at(i)))->t() == t) {
            node_destruct(n);
            p.remove(i);
            ++removedCount;
        } else {
            ++i;
        }
    return removedCount;
}

template &lt;typename T>
Q_OUTOFLINE_TEMPLATE typename QList&lt;T>::iterator QList&lt;T>::erase(typename QList&lt;T>::iterator afirst,
                                                                 typename QList&lt;T>::iterator alast)
{
    for (Node *n = afirst.i; n &lt; alast.i; ++n)
        node_destruct(n);
    int idx = afirst - begin();
    p.remove(idx, alast - afirst);
    return begin() + idx;
}

template &lt;typename T>
Q_OUTOFLINE_TEMPLATE QList&lt;T> &amp;QList&lt;T>::operator+=(const QList&lt;T> &amp;l)
{
    detach();
    Node *n = reinterpret_cast&lt;Node *>(p.append(l.p));
    node_copy(n, reinterpret_cast&lt;Node *>(p.end()), reinterpret_cast&lt;Node *>(l.p.begin()));
    return *this;
}

template &lt;typename T>
Q_OUTOFLINE_TEMPLATE int QList&lt;T>::indexOf(const T &amp;t, int from) const
{
    if (from &lt; 0)
        from = qMax(from + p.size(), 0);
    if (from &lt; p.size()) {
        Node *n = reinterpret_cast&lt;Node *>(p.at(from -1));
        Node *e = reinterpret_cast&lt;Node *>(p.end());
        while (++n != e)
            if (n->t() == t)
                return n - reinterpret_cast&lt;Node *>(p.begin());
    }
    return -1;
}

template &lt;typename T>
Q_OUTOFLINE_TEMPLATE int QList&lt;T>::lastIndexOf(const T &amp;t, int from) const
{
    if (from &lt; 0)
        from += p.size();
    else if (from >= p.size())
        from = p.size()-1;
    if (from >= 0) {
        Node *b = reinterpret_cast&lt;Node *>(p.begin());
        Node *n = reinterpret_cast&lt;Node *>(p.at(from + 1));
        while (n-- != b) {
            if (n->t() == t)
                return n - b;
        }
    }
    return -1;
}

template &lt;typename T>
Q_OUTOFLINE_TEMPLATE QBool QList&lt;T>::contains(const T &amp;t) const
{
    Node *b = reinterpret_cast&lt;Node *>(p.begin());
    Node *i = reinterpret_cast&lt;Node *>(p.end());
    while (i-- != b)
        if (i->t() == t)
            return QBool(true);
    return QBool(false);
}

template &lt;typename T>
Q_OUTOFLINE_TEMPLATE int QList&lt;T>::count(const T &amp;t) const
{
    int c = 0;
    Node *b = reinterpret_cast&lt;Node *>(p.begin());
    Node *i = reinterpret_cast&lt;Node *>(p.end());
    while (i-- != b)
        if (i->t() == t)
            ++c;
    return c;
}

Q_DECLARE_SEQUENTIAL_ITERATOR(List)
Q_DECLARE_MUTABLE_SEQUENTIAL_ITERATOR(List)

#endif // QLIST_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtCore/qlocale.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QLOCALE_H
#define QLOCALE_H

#include &lt;QtCore/qstring.h>

QT_MODULE(Core)

class QDataStream;
class QDate;
class QTime;
struct QLocalePrivate;

class Q_CORE_EXPORT QLocale
{
    friend class QString;
    friend class QByteArray;

public:
    enum Language {
        C = 1,
        Abkhazian = 2,
        Afan = 3,
        Afar = 4,
        Afrikaans = 5,
        Albanian = 6,
        Amharic = 7,
        Arabic = 8,
        Armenian = 9,
        Assamese = 10,
        Aymara = 11,
        Azerbaijani = 12,
        Bashkir = 13,
        Basque = 14,
        Bengali = 15,
        Bhutani = 16,
        Bihari = 17,
        Bislama = 18,
        Breton = 19,
        Bulgarian = 20,
        Burmese = 21,
        Byelorussian = 22,
        Cambodian = 23,
        Catalan = 24,
        Chinese = 25,
        Corsican = 26,
        Croatian = 27,
        Czech = 28,
        Danish = 29,
        Dutch = 30,
        English = 31,
        Esperanto = 32,
        Estonian = 33,
        Faroese = 34,
        FijiLanguage = 35,
        Finnish = 36,
        French = 37,
        Frisian = 38,
        Gaelic = 39,
        Galician = 40,
        Georgian = 41,
        German = 42,
        Greek = 43,
        Greenlandic = 44,
        Guarani = 45,
        Gujarati = 46,
        Hausa = 47,
        Hebrew = 48,
        Hindi = 49,
        Hungarian = 50,
        Icelandic = 51,
        Indonesian = 52,
        Interlingua = 53,
        Interlingue = 54,
        Inuktitut = 55,
        Inupiak = 56,
        Irish = 57,
        Italian = 58,
        Japanese = 59,
        Javanese = 60,
        Kannada = 61,
        Kashmiri = 62,
        Kazakh = 63,
        Kinyarwanda = 64,
        Kirghiz = 65,
        Korean = 66,
        Kurdish = 67,
        Kurundi = 68,
        Laothian = 69,
        Latin = 70,
        Latvian = 71,
        Lingala = 72,
        Lithuanian = 73,
        Macedonian = 74,
        Malagasy = 75,
        Malay = 76,
        Malayalam = 77,
        Maltese = 78,
        Maori = 79,
        Marathi = 80,
        Moldavian = 81,
        Mongolian = 82,
        NauruLanguage = 83,
        Nepali = 84,
        Norwegian = 85,
        Occitan = 86,
        Oriya = 87,
        Pashto = 88,
        Persian = 89,
        Polish = 90,
        Portuguese = 91,
        Punjabi = 92,
        Quechua = 93,
        RhaetoRomance = 94,
        Romanian = 95,
        Russian = 96,
        Samoan = 97,
        Sangho = 98,
        Sanskrit = 99,
        Serbian = 100,
        SerboCroatian = 101,
        Sesotho = 102,
        Setswana = 103,
        Shona = 104,
        Sindhi = 105,
        Singhalese = 106,
        Siswati = 107,
        Slovak = 108,
        Slovenian = 109,
        Somali = 110,
        Spanish = 111,
        Sundanese = 112,
        Swahili = 113,
        Swedish = 114,
        Tagalog = 115,
        Tajik = 116,
        Tamil = 117,
        Tatar = 118,
        Telugu = 119,
        Thai = 120,
        Tibetan = 121,
        Tigrinya = 122,
        TongaLanguage = 123,
        Tsonga = 124,
        Turkish = 125,
        Turkmen = 126,
        Twi = 127,
        Uigur = 128,
        Ukrainian = 129,
        Urdu = 130,
        Uzbek = 131,
        Vietnamese = 132,
        Volapuk = 133,
        Welsh = 134,
        Wolof = 135,
        Xhosa = 136,
        Yiddish = 137,
        Yoruba = 138,
        Zhuang = 139,
        Zulu = 140,
        Nynorsk = 141,
        Bosnian = 142,
        Divehi = 143,
        Manx = 144,
        Cornish = 145,
        LastLanguage = Cornish
    };

    enum Country {
        AnyCountry = 0,
        Afghanistan = 1,
        Albania = 2,
        Algeria = 3,
        AmericanSamoa = 4,
        Andorra = 5,
        Angola = 6,
        Anguilla = 7,
        Antarctica = 8,
        AntiguaAndBarbuda = 9,
        Argentina = 10,
        Armenia = 11,
        Aruba = 12,
        Australia = 13,
        Austria = 14,
        Azerbaijan = 15,
        Bahamas = 16,
        Bahrain = 17,
        Bangladesh = 18,
        Barbados = 19,
        Belarus = 20,
        Belgium = 21,
        Belize = 22,
        Benin = 23,
        Bermuda = 24,
        Bhutan = 25,
        Bolivia = 26,
        BosniaAndHerzegowina = 27,
        Botswana = 28,
        BouvetIsland = 29,
        Brazil = 30,
        BritishIndianOceanTerritory = 31,
        BruneiDarussalam = 32,
        Bulgaria = 33,
        BurkinaFaso = 34,
        Burundi = 35,
        Cambodia = 36,
        Cameroon = 37,
        Canada = 38,
        CapeVerde = 39,
        CaymanIslands = 40,
        CentralAfricanRepublic = 41,
        Chad = 42,
        Chile = 43,
        China = 44,
        ChristmasIsland = 45,
        CocosIslands = 46,
        Colombia = 47,
        Comoros = 48,
        DemocraticRepublicOfCongo = 49,
        PeoplesRepublicOfCongo = 50,
        CookIslands = 51,
        CostaRica = 52,
        IvoryCoast = 53,
        Croatia = 54,
        Cuba = 55,
        Cyprus = 56,
        CzechRepublic = 57,
        Denmark = 58,
        Djibouti = 59,
        Dominica = 60,
        DominicanRepublic = 61,
        EastTimor = 62,
        Ecuador = 63,
        Egypt = 64,
        ElSalvador = 65,
        EquatorialGuinea = 66,
        Eritrea = 67,
        Estonia = 68,
        Ethiopia = 69,
        FalklandIslands = 70,
        FaroeIslands = 71,
        FijiCountry = 72,
        Finland = 73,
        France = 74,
        MetropolitanFrance = 75,
        FrenchGuiana = 76,
        FrenchPolynesia = 77,
        FrenchSouthernTerritories = 78,
        Gabon = 79,
        Gambia = 80,
        Georgia = 81,
        Germany = 82,
        Ghana = 83,
        Gibraltar = 84,
        Greece = 85,
        Greenland = 86,
        Grenada = 87,
        Guadeloupe = 88,
        Guam = 89,
        Guatemala = 90,
        Guinea = 91,
        GuineaBissau = 92,
        Guyana = 93,
        Haiti = 94,
        HeardAndMcDonaldIslands = 95,
        Honduras = 96,
        HongKong = 97,
        Hungary = 98,
        Iceland = 99,
        India = 100,
        Indonesia = 101,
        Iran = 102,
        Iraq = 103,
        Ireland = 104,
        Israel = 105,
        Italy = 106,
        Jamaica = 107,
        Japan = 108,
        Jordan = 109,
        Kazakhstan = 110,
        Kenya = 111,
        Kiribati = 112,
        DemocraticRepublicOfKorea = 113,
        RepublicOfKorea = 114,
        Kuwait = 115,
        Kyrgyzstan = 116,
        Lao = 117,
        Latvia = 118,
        Lebanon = 119,
        Lesotho = 120,
        Liberia = 121,
        LibyanArabJamahiriya = 122,
        Liechtenstein = 123,
        Lithuania = 124,
        Luxembourg = 125,
        Macau = 126,
        Macedonia = 127,
        Madagascar = 128,
        Malawi = 129,
        Malaysia = 130,
        Maldives = 131,
        Mali = 132,
        Malta = 133,
        MarshallIslands = 134,
        Martinique = 135,
        Mauritania = 136,
        Mauritius = 137,
        Mayotte = 138,
        Mexico = 139,
        Micronesia = 140,
        Moldova = 141,
        Monaco = 142,
        Mongolia = 143,
        Montserrat = 144,
        Morocco = 145,
        Mozambique = 146,
        Myanmar = 147,
        Namibia = 148,
        NauruCountry = 149,
        Nepal = 150,
        Netherlands = 151,
        NetherlandsAntilles = 152,
        NewCaledonia = 153,
        NewZealand = 154,
        Nicaragua = 155,
        Niger = 156,
        Nigeria = 157,
        Niue = 158,
        NorfolkIsland = 159,
        NorthernMarianaIslands = 160,
        Norway = 161,
        Oman = 162,
        Pakistan = 163,
        Palau = 164,
        PalestinianTerritory = 165,
        Panama = 166,
        PapuaNewGuinea = 167,
        Paraguay = 168,
        Peru = 169,
        Philippines = 170,
        Pitcairn = 171,
        Poland = 172,
        Portugal = 173,
        PuertoRico = 174,
        Qatar = 175,
        Reunion = 176,
        Romania = 177,
        RussianFederation = 178,
        Rwanda = 179,
        SaintKittsAndNevis = 180,
        StLucia = 181,
        StVincentAndTheGrenadines = 182,
        Samoa = 183,
        SanMarino = 184,
        SaoTomeAndPrincipe = 185,
        SaudiArabia = 186,
        Senegal = 187,
        Seychelles = 188,
        SierraLeone = 189,
        Singapore = 190,
        Slovakia = 191,
        Slovenia = 192,
        SolomonIslands = 193,
        Somalia = 194,
        SouthAfrica = 195,
        SouthGeorgiaAndTheSouthSandwichIslands = 196,
        Spain = 197,
        SriLanka = 198,
        StHelena = 199,
        StPierreAndMiquelon = 200,
        Sudan = 201,
        Suriname = 202,
        SvalbardAndJanMayenIslands = 203,
        Swaziland = 204,
        Sweden = 205,
        Switzerland = 206,
        SyrianArabRepublic = 207,
        Taiwan = 208,
        Tajikistan = 209,
        Tanzania = 210,
        Thailand = 211,
        Togo = 212,
        Tokelau = 213,
        TongaCountry = 214,
        TrinidadAndTobago = 215,
        Tunisia = 216,
        Turkey = 217,
        Turkmenistan = 218,
        TurksAndCaicosIslands = 219,
        Tuvalu = 220,
        Uganda = 221,
        Ukraine = 222,
        UnitedArabEmirates = 223,
        UnitedKingdom = 224,
        UnitedStates = 225,
        UnitedStatesMinorOutlyingIslands = 226,
        Uruguay = 227,
        Uzbekistan = 228,
        Vanuatu = 229,
        VaticanCityState = 230,
        Venezuela = 231,
        VietNam = 232,
        BritishVirginIslands = 233,
        USVirginIslands = 234,
        WallisAndFutunaIslands = 235,
        WesternSahara = 236,
        Yemen = 237,
        Yugoslavia = 238,
        Zambia = 239,
        Zimbabwe = 240,
        SerbiaAndMontenegro = 241,
        LastCountry = SerbiaAndMontenegro
    };

    enum FormatType { LongFormat, ShortFormat };

    QLocale();
    QLocale(const QString &amp;name);
    QLocale(Language language, Country country = AnyCountry);
    QLocale(const QLocale &amp;other);

    QLocale &amp;operator=(const QLocale &amp;other);

    Language language() const;
    Country country() const;
    QString name() const;

    short toShort(const QString &amp;s, bool *ok = 0, int base = 0) const;
    ushort toUShort(const QString &amp;s, bool *ok = 0, int base = 0) const;
    int toInt(const QString &amp;s, bool *ok = 0, int base = 0) const;
    uint toUInt(const QString &amp;s, bool *ok = 0, int base = 0) const;
    qlonglong toLongLong(const QString &amp;s, bool *ok = 0, int base = 0) const;
    qlonglong toULongLong(const QString &amp;s, bool *ok = 0, int base = 0) const;
    float toFloat(const QString &amp;s, bool *ok = 0) const;
    double toDouble(const QString &amp;s, bool *ok = 0) const;

    QString toString(qlonglong i) const;
    QString toString(qulonglong i) const;
    inline QString toString(short i) const;
    inline QString toString(ushort i) const;
    inline QString toString(int i) const;
    inline QString toString(uint i) const;
    QString toString(double i, char f = 'g', int prec = 6) const;
    inline QString toString(float i, char f = 'g', int prec = 6) const;
    QString toString(const QDate &amp;date, const QString &amp;formatStr) const;
    QString toString(const QDate &amp;date, FormatType format = LongFormat) const;
    QString toString(const QTime &amp;time, const QString &amp;formatStr) const;
    QString toString(const QTime &amp;time, FormatType format = LongFormat) const;

    QString dateFormat(FormatType format = LongFormat) const;
    QString timeFormat(FormatType format = LongFormat) const;

    QChar decimalPoint() const;
    QChar groupSeparator() const;
    QChar percent() const;
    QChar zeroDigit() const;
    QChar negativeSign() const;
    QChar exponential() const;

    inline bool operator==(const QLocale &amp;other) const;
    inline bool operator!=(const QLocale &amp;other) const;

    static QString languageToString(Language language);
    static QString countryToString(Country country);
    static void setDefault(const QLocale &amp;locale);

    static QLocale c() { return QLocale(C); }
    static QLocale system();

private:
    const QLocalePrivate *d;
    static const QLocalePrivate *default_d;
};
Q_DECLARE_TYPEINFO(QLocale, Q_MOVABLE_TYPE);

inline QString QLocale::toString(short i) const
    { return toString(qlonglong(i)); }
inline QString QLocale::toString(ushort i) const
    { return toString(qulonglong(i)); }
inline QString QLocale::toString(int i) const
    { return toString(qlonglong(i)); }
inline QString QLocale::toString(uint i) const
    { return toString(qulonglong(i)); }
inline QString QLocale::toString(float i, char f, int prec) const
    { return toString(double(i), f, prec); }
inline bool QLocale::operator==(const QLocale &amp;other) const
    { return d == other.d; }
inline bool QLocale::operator!=(const QLocale &amp;other) const
    { return d != other.d; }

#ifndef QT_NO_DATASTREAM
Q_CORE_EXPORT QDataStream &amp;operator&lt;&lt;(QDataStream &amp;, const QLocale &amp;);
Q_CORE_EXPORT QDataStream &amp;operator>>(QDataStream &amp;, QLocale &amp;);
#endif

#endif // QLOCALE_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtCore/qmap.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QMAP_H
#define QMAP_H

#include &lt;QtCore/qatomic.h>
#include &lt;QtCore/qiterator.h>
#include &lt;QtCore/qlist.h>

#ifndef QT_NO_STL
#include &lt;map>
#endif

#include &lt;new>

QT_MODULE(Core)

struct Q_CORE_EXPORT QMapData
{
    struct Node {
        Node *backward;
        Node *forward[1];
    };
    enum { LastLevel = 11, Sparseness = 3 };

    Node *backward;
    Node *forward[QMapData::LastLevel + 1];
    QBasicAtomic ref;
    int topLevel;
    int size;
    uint randomBits;
    uint insertInOrder : 1;
    uint sharable : 1;

    static QMapData *createData();
    void continueFreeData(int offset);
    Node *node_create(Node *update[], int offset);
    void node_delete(Node *update[], int offset, Node *node);
#ifdef QT_QMAP_DEBUG
    uint adjust_ptr(Node *node);
    void dump();
#endif

    static QMapData shared_null;
};


/*
    QMap uses qMapLessThanKey() to compare keys. The default
    implementation uses operator&lt;(). For pointer types,
    qMapLessThanKey() casts the pointers to integers before it
    compares them, because operator&lt;() is undefined on pointers
    that come from different memory blocks. (In practice, this
    is only a problem when running a program such as
    BoundsChecker.)
*/

template &lt;class Key> inline bool qMapLessThanKey(const Key &amp;key1, const Key &amp;key2)
{
    return key1 &lt; key2;
}

#ifndef QT_NO_PARTIAL_TEMPLATE_SPECIALIZATION
template &lt;class Ptr> inline bool qMapLessThanKey(Ptr *key1, Ptr *key2)
{
    Q_ASSERT(sizeof(ulong) == sizeof(Ptr *));
    return reinterpret_cast&lt;ulong>(key1) &lt; reinterpret_cast&lt;ulong>(key2);
}

template &lt;class Ptr> inline bool qMapLessThanKey(const Ptr *key1, const Ptr *key2)
{
    Q_ASSERT(sizeof(ulong) == sizeof(const Ptr *));
    return reinterpret_cast&lt;ulong>(key1) &lt; reinterpret_cast&lt;ulong>(key2);
}
#endif // QT_NO_PARTIAL_TEMPLATE_SPECIALIZATION

#if !defined(QT_NO_DATASTREAM)
class QDataStream;
template &lt;class Key, class T> class QMap;
template &lt;class aKey, class aT>
QDataStream &amp;operator>>(QDataStream &amp;in, QMap&lt;aKey, aT> &amp;map);
#endif

template &lt;class Key, class T>
class QMap
{
    struct Node {
        Key key;
        T value;
        QMapData::Node *backward;
        QMapData::Node *forward[1];
    };
    union {
        QMapData *d;
        QMapData::Node *e;
    };

    struct PayloadNode
    {
        Key key;
        T value;
        QMapData::Node *backward;
    };
    enum { Payload = sizeof(PayloadNode) - sizeof(QMapData::Node *) };

    static inline Node *concrete(QMapData::Node *node) {
        return reinterpret_cast&lt;Node *>(reinterpret_cast&lt;char *>(node) - Payload);
    }
public:
    inline QMap() : d(&amp;QMapData::shared_null) { d->ref.ref(); }
    inline QMap(const QMap&lt;Key, T> &amp;other) : d(other.d)
    { d->ref.ref(); if (!d->sharable) detach(); }
    inline ~QMap() { if (!d) return; if (!d->ref.deref()) freeData(d); }

    QMap&lt;Key, T> &amp;operator=(const QMap&lt;Key, T> &amp;other);
#ifndef QT_NO_STL
    explicit QMap(const typename std::map&lt;Key, T> &amp;other);
    std::map&lt;Key, T> toStdMap() const;
#endif

    bool operator==(const QMap&lt;Key, T> &amp;other) const;
    inline bool operator!=(const QMap&lt;Key, T> &amp;other) const { return !(*this == other); }

    inline int size() const { return d->size; }

    inline bool isEmpty() const { return d->size == 0; }

    inline void detach() { if (d->ref != 1) detach_helper(); }
    inline bool isDetached() const { return d->ref == 1; }
    inline void setSharable(bool sharable) { if (!sharable) detach(); d->sharable = sharable; }

    void clear();

    int remove(const Key &amp;key);
    T take(const Key &amp;key);

    bool contains(const Key &amp;key) const;
    const Key key(const T &amp;value) const;
    const T value(const Key &amp;key) const;
    const T value(const Key &amp;key, const T &amp;defaultValue) const;
    T &amp;operator[](const Key &amp;key);
    const T operator[](const Key &amp;key) const;

    QList&lt;Key> keys() const;
    QList&lt;Key> keys(const T &amp;value) const;
    QList&lt;T> values() const;
    QList&lt;T> values(const Key &amp;key) const;
    int count(const Key &amp;key) const;

    class const_iterator;

    class iterator
    {
        QMapData::Node *i;
    public:
        typedef std::bidirectional_iterator_tag iterator_category;
        typedef ptrdiff_t difference_type;
        typedef T value_type;
        typedef T *pointer;
        typedef T &amp;reference;

        inline operator QMapData::Node *() const { return i; }
        inline iterator() : i(0) { }
        inline iterator(QMapData::Node *node) : i(node) { }

        inline const Key &amp;key() const { return concrete(i)->key; }
        inline T &amp;value() const { return concrete(i)->value; }
#ifdef QT3_SUPPORT
        inline QT3_SUPPORT T &amp;data() const { return concrete(i)->value; }
#endif
        inline T &amp;operator*() const { return concrete(i)->value; }
        inline T *operator->() const { return &amp;concrete(i)->value; }
        inline bool operator==(const iterator &amp;o) const { return i == o.i; }
        inline bool operator!=(const iterator &amp;o) const { return i != o.i; }
        inline bool operator==(const const_iterator &amp;o) const
            { return i == reinterpret_cast&lt;const iterator &amp;>(o).i; }
        inline bool operator!=(const const_iterator &amp;o) const
            { return i != reinterpret_cast&lt;const iterator &amp;>(o).i; }

        inline iterator &amp;operator++() {
            i = i->forward[0];
            return *this;
        }
        inline iterator operator++(int) {
            iterator r = *this;
            i = i->forward[0];
            return r;
        }
        inline iterator &amp;operator--() {
            i = i->backward;
            return *this;
        }
        inline iterator operator--(int) {
            iterator r = *this;
            i = i->backward;
            return r;
        }
        inline iterator operator+(int j) const
        { iterator r = *this; if (j > 0) while (j--) ++r; else while (j++) --r; return r; }
        inline iterator operator-(int j) const { return operator+(-j); }
        inline iterator &amp;operator+=(int j) { return *this = *this + j; }
        inline iterator &amp;operator-=(int j) { return *this = *this - j; }
    };
    friend class iterator;

    class const_iterator
    {
        QMapData::Node *i;
    public:
        typedef std::bidirectional_iterator_tag iterator_category;
        typedef ptrdiff_t difference_type;
        typedef T value_type;
        typedef const T *pointer;
        typedef const T &amp;reference;

        inline operator QMapData::Node *() const { return i; }
        inline const_iterator() : i(0) { }
        inline const_iterator(QMapData::Node *node) : i(node) { }
        inline const_iterator(const iterator &amp;o)
        { i = reinterpret_cast&lt;const const_iterator &amp;>(o).i; }

        inline const Key &amp;key() const { return concrete(i)->key; }
        inline const T &amp;value() const { return concrete(i)->value; }
#ifdef QT3_SUPPORT
        inline QT3_SUPPORT const T &amp;data() const { return concrete(i)->value; }
#endif
        inline const T &amp;operator*() const { return concrete(i)->value; }
        inline const T *operator->() const { return &amp;concrete(i)->value; }
        inline bool operator==(const const_iterator &amp;o) const { return i == o.i; }
        inline bool operator!=(const const_iterator &amp;o) const { return i != o.i; }

        inline const_iterator &amp;operator++() {
            i = i->forward[0];
            return *this;
        }
        inline const_iterator operator++(int) {
            const_iterator r = *this;
            i = i->forward[0];
            return r;
        }
        inline const_iterator &amp;operator--() {
            i = i->backward;
            return *this;
        }
        inline const_iterator operator--(int) {
            const_iterator r = *this;
            i = i->backward;
            return r;
        }
        inline const_iterator operator+(int j) const
        { const_iterator r = *this; if (j > 0) while (j--) ++r; else while (j++) --r; return r; }
        inline const_iterator operator-(int j) const { return operator+(-j); }
        inline const_iterator &amp;operator+=(int j) { return *this = *this + j; }
        inline const_iterator &amp;operator-=(int j) { return *this = *this - j; }
    };
    friend class const_iterator;

    // STL style
    inline iterator begin() { detach(); return iterator(e->forward[0]); }
    inline const_iterator begin() const { return const_iterator(e->forward[0]); }
    inline const_iterator constBegin() const { return const_iterator(e->forward[0]); }
    inline iterator end() {
        detach();
        return iterator(e);
    }
    inline const_iterator end() const { return const_iterator(e); }
    inline const_iterator constEnd() const { return const_iterator(e); }
    iterator erase(iterator it);
#ifdef QT3_SUPPORT
    inline QT3_SUPPORT iterator remove(iterator it) { return erase(it); }
    inline QT3_SUPPORT void erase(const Key &amp;key) { remove(key); }
#endif

    // more Qt
    typedef iterator Iterator;
    typedef const_iterator ConstIterator;
    inline int count() const { return d->size; }
    iterator find(const Key &amp;key);
    const_iterator find(const Key &amp;key) const;
    const_iterator constFind(const Key &amp;key) const;
    iterator lowerBound(const Key &amp;key);
    const_iterator lowerBound(const Key &amp;key) const;
    iterator upperBound(const Key &amp;key);
    const_iterator upperBound(const Key &amp;key) const;
    iterator insert(const Key &amp;key, const T &amp;value);
#ifdef QT3_SUPPORT
    QT3_SUPPORT iterator insert(const Key &amp;key, const T &amp;value, bool overwrite);
#endif
    iterator insertMulti(const Key &amp;key, const T &amp;value);
#ifdef QT3_SUPPORT
    inline QT3_SUPPORT iterator replace(const Key &amp;key, const T &amp;value) { return insert(key, value); }
#endif
    QMap&lt;Key, T> &amp;unite(const QMap&lt;Key, T> &amp;other);

    // STL compatibility
    inline bool empty() const { return isEmpty(); }

private:
    void detach_helper();
    void freeData(QMapData *d);
    QMapData::Node *findNode(const Key &amp;key) const;
    QMapData::Node *mutableFindNode(QMapData::Node *update[], const Key &amp;key) const;
    QMapData::Node *node_create(QMapData *d, QMapData::Node *update[], const Key &amp;key,
                                const T &amp;value);

#if !defined(QT_NO_DATASTREAM)
#if !defined(Q_CC_BOR)
#if defined Q_CC_MSVC &amp;&amp; _MSC_VER &lt; 1300
    friend QDataStream &amp;operator>> (QDataStream &amp;in, QMap &amp;map);
#else
    template &lt;class aKey, class aT>
    friend QDataStream &amp;operator>> (QDataStream &amp;in, QMap&lt;aKey, aT> &amp;map);
#endif
#endif
#endif
};

template &lt;class Key, class T>
Q_INLINE_TEMPLATE QMap&lt;Key, T> &amp;QMap&lt;Key, T>::operator=(const QMap&lt;Key, T> &amp;other)
{
    if (d != other.d) {
        QMapData *x = other.d;
        x->ref.ref();
        x = qAtomicSetPtr(&amp;d, x);
        if (!x->ref.deref())
            freeData(x);
        if (!d->sharable)
            detach_helper();
    }
    return *this;
}

template &lt;class Key, class T>
Q_INLINE_TEMPLATE void QMap&lt;Key, T>::clear()
{
    *this = QMap&lt;Key, T>();
}

template &lt;class Key, class T>
Q_INLINE_TEMPLATE typename QMapData::Node *
QMap&lt;Key, T>::node_create(QMapData *adt, QMapData::Node *aupdate[], const Key &amp;akey, const T &amp;avalue)
{
    QMapData::Node *abstractNode = adt->node_create(aupdate, Payload);
    Node *concreteNode = concrete(abstractNode);
    new (&amp;concreteNode->key) Key(akey);
    new (&amp;concreteNode->value) T(avalue);
    return abstractNode;
}

template &lt;class Key, class T>
Q_INLINE_TEMPLATE QMapData::Node *QMap&lt;Key, T>::findNode(const Key &amp;akey) const
{
    QMapData::Node *cur = e;
    QMapData::Node *next = e;

    for (int i = d->topLevel; i >= 0; i--) {
        while ((next = cur->forward[i]) != e &amp;&amp; qMapLessThanKey&lt;Key>(concrete(next)->key, akey))
            cur = next;
    }

    if (next != e &amp;&amp; !qMapLessThanKey&lt;Key>(akey, concrete(next)->key)) {
        return next;
    } else {
        return e;
    }
}

template &lt;class Key, class T>
Q_INLINE_TEMPLATE const T QMap&lt;Key, T>::value(const Key &amp;akey) const
{
    QMapData::Node *node = findNode(akey);
    if (node == e) {
        return T();
    } else {
        return concrete(node)->value;
    }
}

template &lt;class Key, class T>
Q_INLINE_TEMPLATE const T QMap&lt;Key, T>::value(const Key &amp;akey, const T &amp;adefaultValue) const
{
    QMapData::Node *node = findNode(akey);
    if (node == e) {
        return adefaultValue;
    } else {
        return concrete(node)->value;
    }
}

template &lt;class Key, class T>
Q_INLINE_TEMPLATE const T QMap&lt;Key, T>::operator[](const Key &amp;akey) const
{
    return value(akey);
}

template &lt;class Key, class T>
Q_INLINE_TEMPLATE T &amp;QMap&lt;Key, T>::operator[](const Key &amp;akey)
{
    detach();

    QMapData::Node *update[QMapData::LastLevel + 1];
    QMapData::Node *node = mutableFindNode(update, akey);
    if (node == e)
        node = node_create(d, update, akey, T());
    return concrete(node)->value;
}

template &lt;class Key, class T>
Q_INLINE_TEMPLATE int QMap&lt;Key, T>::count(const Key &amp;akey) const
{
    int cnt = 0;
    QMapData::Node *node = findNode(akey);
    if (node != e) {
        do {
            ++cnt;
            node = node->forward[0];
        } while (node != e &amp;&amp; !qMapLessThanKey&lt;Key>(akey, concrete(node)->key));
    }
    return cnt;
}

template &lt;class Key, class T>
Q_INLINE_TEMPLATE bool QMap&lt;Key, T>::contains(const Key &amp;akey) const
{
    return findNode(akey) != e;
}

template &lt;class Key, class T>
Q_INLINE_TEMPLATE typename QMap&lt;Key, T>::iterator QMap&lt;Key, T>::insert(const Key &amp;akey,
                                                                       const T &amp;avalue)
{
    detach();

    QMapData::Node *update[QMapData::LastLevel + 1];
    QMapData::Node *node = mutableFindNode(update, akey);
    if (node == e) {
        node = node_create(d, update, akey, avalue);
    } else {
        concrete(node)->value = avalue;
    }
    return iterator(node);
}

#ifdef QT3_SUPPORT
template &lt;class Key, class T>
Q_INLINE_TEMPLATE typename QMap&lt;Key, T>::iterator QMap&lt;Key, T>::insert(const Key &amp;akey,
                                                                       const T &amp;avalue,
                                                                       bool aoverwrite)
{
    detach();

    QMapData::Node *update[QMapData::LastLevel + 1];
    QMapData::Node *node = mutableFindNode(update, akey);
    if (node == e) {
        node = node_create(d, update, akey, avalue);
    } else {
        if (aoverwrite)
            concrete(node)->value = avalue;
    }
    return iterator(node);
}
#endif

template &lt;class Key, class T>
Q_INLINE_TEMPLATE typename QMap&lt;Key, T>::iterator QMap&lt;Key, T>::insertMulti(const Key &amp;akey,
                                                                            const T &amp;avalue)
{
    detach();

    QMapData::Node *update[QMapData::LastLevel + 1];
    mutableFindNode(update, akey);
    return iterator(node_create(d, update, akey, avalue));
}

template &lt;class Key, class T>
Q_INLINE_TEMPLATE typename QMap&lt;Key, T>::const_iterator QMap&lt;Key, T>::find(const Key &amp;akey) const
{
    return const_iterator(findNode(akey));
}

template &lt;class Key, class T>
Q_INLINE_TEMPLATE typename QMap&lt;Key, T>::const_iterator QMap&lt;Key, T>::constFind(const Key &amp;akey) const
{
    return const_iterator(findNode(akey));
}

template &lt;class Key, class T>
Q_INLINE_TEMPLATE typename QMap&lt;Key, T>::iterator QMap&lt;Key, T>::find(const Key &amp;akey)
{
    detach();
    return iterator(findNode(akey));
}

template &lt;class Key, class T>
Q_INLINE_TEMPLATE QMap&lt;Key, T> &amp;QMap&lt;Key, T>::unite(const QMap&lt;Key, T> &amp;other)
{
    QMap&lt;Key, T> copy(other);
    const_iterator it = copy.constEnd();
    while (it != copy.constBegin()) {
        --it;
        insertMulti(it.key(), it.value());
    }
    return *this;
}

template &lt;class Key, class T>
Q_OUTOFLINE_TEMPLATE void QMap&lt;Key, T>::freeData(QMapData *x)
{
    if (QTypeInfo&lt;Key>::isComplex || QTypeInfo&lt;T>::isComplex) {
        QMapData::Node *y = reinterpret_cast&lt;QMapData::Node *>(x);
        QMapData::Node *cur = y;
        QMapData::Node *next = cur->forward[0];
        while (next != y) {
            cur = next;
            next = cur->forward[0];
            Node *concreteNode = concrete(cur);
            concreteNode->key.~Key();
            concreteNode->value.~T();
        }
    }
    x->continueFreeData(Payload);
}

template &lt;class Key, class T>
Q_OUTOFLINE_TEMPLATE int QMap&lt;Key, T>::remove(const Key &amp;akey)
{
    detach();

    QMapData::Node *update[QMapData::LastLevel + 1];
    QMapData::Node *cur = e;
    QMapData::Node *next = e;
    int oldSize = d->size;

    for (int i = d->topLevel; i >= 0; i--) {
        while ((next = cur->forward[i]) != e &amp;&amp; qMapLessThanKey&lt;Key>(concrete(next)->key, akey))
            cur = next;
        update[i] = cur;
    }

    if (next != e &amp;&amp; !qMapLessThanKey&lt;Key>(akey, concrete(next)->key)) {
        bool deleteNext = true;
        do {
            cur = next;
            next = cur->forward[0];
            deleteNext = (next != e &amp;&amp; !qMapLessThanKey&lt;Key>(concrete(cur)->key, concrete(next)->key));
            concrete(cur)->key.~Key();
            concrete(cur)->value.~T();
            d->node_delete(update, Payload, cur);
        } while (deleteNext);
    }
    return oldSize - d->size;
}

template &lt;class Key, class T>
Q_OUTOFLINE_TEMPLATE T QMap&lt;Key, T>::take(const Key &amp;akey)
{
    detach();

    QMapData::Node *update[QMapData::LastLevel + 1];
    QMapData::Node *cur = e;
    QMapData::Node *next = e;

    for (int i = d->topLevel; i >= 0; i--) {
        while ((next = cur->forward[i]) != e &amp;&amp; qMapLessThanKey&lt;Key>(concrete(next)->key, akey))
            cur = next;
        update[i] = cur;
    }

    if (next != e &amp;&amp; !qMapLessThanKey&lt;Key>(akey, concrete(next)->key)) {
        T t = concrete(next)->value;
        concrete(next)->key.~Key();
        concrete(next)->value.~T();
        d->node_delete(update, Payload, next);
        return t;
    }
    return T();
}

template &lt;class Key, class T>
Q_OUTOFLINE_TEMPLATE typename QMap&lt;Key, T>::iterator QMap&lt;Key, T>::erase(iterator it)
{
    QMapData::Node *update[QMapData::LastLevel + 1];
    QMapData::Node *cur = e;
    QMapData::Node *next = e;

    if (it == iterator(e))
        return it;

    for (int i = d->topLevel; i >= 0; i--) {
        while ((next = cur->forward[i]) != e &amp;&amp; qMapLessThanKey&lt;Key>(concrete(next)->key, it.key()))
            cur = next;
        update[i] = cur;
    }

    while (next != e) {
        cur = next;
        next = cur->forward[0];
        if (cur == it) {
            concrete(cur)->key.~Key();
            concrete(cur)->value.~T();
            d->node_delete(update, Payload, cur);
            return iterator(next);
        }

        for (int i = 0; i &lt;= d->topLevel; ++i) {
            if (update[i]->forward[i] != cur)
                break;
            update[i] = cur;
        }
    }
    return end();
}

template &lt;class Key, class T>
Q_OUTOFLINE_TEMPLATE void QMap&lt;Key, T>::detach_helper()
{
    union { QMapData *d; QMapData::Node *e; } x;
    x.d = QMapData::createData();
    if (d->size) {
        x.d->insertInOrder = true;
        QMapData::Node *update[QMapData::LastLevel + 1];
        QMapData::Node *cur = e->forward[0];
        update[0] = x.e;
        while (cur != e) {
            Node *concreteNode = concrete(cur);
            node_create(x.d, update, concreteNode->key, concreteNode->value);
            cur = cur->forward[0];
        }
        x.d->insertInOrder = false;
    }
    x.d = qAtomicSetPtr(&amp;d, x.d);
    if (!x.d->ref.deref())
        freeData(x.d);
}

template &lt;class Key, class T>
Q_OUTOFLINE_TEMPLATE QMapData::Node *QMap&lt;Key, T>::mutableFindNode(QMapData::Node *aupdate[],
                                                                   const Key &amp;akey) const
{
    QMapData::Node *cur = e;
    QMapData::Node *next = e;

    for (int i = d->topLevel; i >= 0; i--) {
        while ((next = cur->forward[i]) != e &amp;&amp; qMapLessThanKey&lt;Key>(concrete(next)->key, akey))
            cur = next;
        aupdate[i] = cur;
    }
    if (next != e &amp;&amp; !qMapLessThanKey&lt;Key>(akey, concrete(next)->key)) {
        return next;
    } else {
        return e;
    }
}

template &lt;class Key, class T>
Q_OUTOFLINE_TEMPLATE QList&lt;Key> QMap&lt;Key, T>::keys() const
{
    QList&lt;Key> res;
    const_iterator i = begin();
    while (i != end()) {
        res.append(i.key());
        ++i;
    }
    return res;
}

template &lt;class Key, class T>
Q_OUTOFLINE_TEMPLATE QList&lt;Key> QMap&lt;Key, T>::keys(const T &amp;avalue) const
{
    QList&lt;Key> res;
    const_iterator i = begin();
    while (i != end()) {
        if (i.value() == avalue)
            res.append(i.key());
        ++i;
    }
    return res;
}

template &lt;class Key, class T>
Q_OUTOFLINE_TEMPLATE const Key QMap&lt;Key, T>::key(const T &amp;avalue) const
{
    const_iterator i = begin();
    while (i != end()) {
        if (i.value() == avalue)
            return i.key();
        ++i;
    }

    return Key();
}

template &lt;class Key, class T>
Q_OUTOFLINE_TEMPLATE QList&lt;T> QMap&lt;Key, T>::values() const
{
    QList&lt;T> res;
    const_iterator i = begin();
    while (i != end()) {
        res.append(i.value());
        ++i;
    }
    return res;
}

template &lt;class Key, class T>
Q_OUTOFLINE_TEMPLATE QList&lt;T> QMap&lt;Key, T>::values(const Key &amp;akey) const
{
    QList&lt;T> res;
    QMapData::Node *node = findNode(akey);
    if (node != e) {
        do {
            res.append(concrete(node)->value);
            node = node->forward[0];
        } while (node != e &amp;&amp; !qMapLessThanKey&lt;Key>(akey, concrete(node)->key));
    }
    return res;
}

template &lt;class Key, class T>
Q_INLINE_TEMPLATE typename QMap&lt;Key, T>::const_iterator
QMap&lt;Key, T>::lowerBound(const Key &amp;akey) const
{
    QMapData::Node *update[QMapData::LastLevel + 1];
    mutableFindNode(update, akey);
    return const_iterator(update[0]->forward[0]);
}

template &lt;class Key, class T>
Q_INLINE_TEMPLATE typename QMap&lt;Key, T>::iterator QMap&lt;Key, T>::lowerBound(const Key &amp;akey)
{
    detach();
    return static_cast&lt;QMapData::Node *>(const_cast&lt;const QMap *>(this)->lowerBound(akey));
}

template &lt;class Key, class T>
Q_INLINE_TEMPLATE typename QMap&lt;Key, T>::const_iterator
QMap&lt;Key, T>::upperBound(const Key &amp;akey) const
{
    QMapData::Node *update[QMapData::LastLevel + 1];
    mutableFindNode(update, akey);
    QMapData::Node *node = update[0]->forward[0];
    while (node != e &amp;&amp; !qMapLessThanKey&lt;Key>(akey, concrete(node)->key))
        node = node->forward[0];
    return const_iterator(node);
}

template &lt;class Key, class T>
Q_INLINE_TEMPLATE typename QMap&lt;Key, T>::iterator QMap&lt;Key, T>::upperBound(const Key &amp;akey)
{
    detach();
    return static_cast&lt;QMapData::Node *>(const_cast&lt;const QMap *>(this)->upperBound(akey));
}

template &lt;class Key, class T>
Q_OUTOFLINE_TEMPLATE bool QMap&lt;Key, T>::operator==(const QMap&lt;Key, T> &amp;other) const
{
    if (size() != other.size())
        return false;
    if (d == other.d)
        return true;

    const_iterator it1 = begin();
    const_iterator it2 = other.begin();

    while (it1 != end()) {
        if (!(it1.value() == it2.value()) || qMapLessThanKey(it1.key(), it2.key()) || qMapLessThanKey(it2.key(), it1.key()))
            return false;
        ++it2;
        ++it1;
    }
    return true;
}

#ifndef QT_NO_STL
template &lt;class Key, class T>
Q_OUTOFLINE_TEMPLATE QMap&lt;Key, T>::QMap(const std::map&lt;Key, T> &amp;other)
{
    d = QMapData::createData();
    d->insertInOrder = true;
    typename std::map&lt;Key,T>::const_iterator it = other.end();
    while (it != other.begin()) {
        --it;
        insert((*it).first, (*it).second);
    }
    d->insertInOrder = false;
}

template &lt;class Key, class T>
Q_OUTOFLINE_TEMPLATE  std::map&lt;Key, T> QMap&lt;Key, T>::toStdMap() const
{
    std::map&lt;Key, T> map;
    const_iterator it = end();
    while (it != begin()) {
        --it;
        map.insert(std::pair&lt;Key, T>(it.key(), it.value()));
    }
    return map;
}

#endif // QT_NO_STL

template &lt;class Key, class T>
class QMultiMap : public QMap&lt;Key, T>
{
public:
    QMultiMap() {}
    QMultiMap(const QMap&lt;Key, T> &amp;other) : QMap&lt;Key, T>(other) {}

    inline typename QMap&lt;Key, T>::iterator replace(const Key &amp;key, const T &amp;value);
    inline typename QMap&lt;Key, T>::iterator insert(const Key &amp;key, const T &amp;value);

    inline QMultiMap &amp;operator+=(const QMultiMap &amp;other)
    { unite(other); return *this; }
    inline QMultiMap operator+(const QMultiMap &amp;other) const
    { QMultiMap result = *this; result += other; return result; }

private:
    T &amp;operator[](const Key &amp;key);
    const T operator[](const Key &amp;key) const;
};

template &lt;class Key, class T>
Q_INLINE_TEMPLATE Q_TYPENAME QMap&lt;Key, T>::iterator QMultiMap&lt;Key, T>::replace(const Key &amp;akey, const T &amp;avalue)
{ return QMap&lt;Key, T>::insert(akey, avalue); }

template &lt;class Key, class T>
Q_INLINE_TEMPLATE Q_TYPENAME QMap&lt;Key, T>::iterator QMultiMap&lt;Key, T>::insert(const Key &amp;akey, const T &amp;avalue)
{ return QMap&lt;Key, T>::insertMulti(akey, avalue); }


Q_DECLARE_ASSOCIATIVE_ITERATOR(Map)
Q_DECLARE_MUTABLE_ASSOCIATIVE_ITERATOR(Map)

#endif // QMAP_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtCore/qmetaobject.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QMETAOBJECT_H
#define QMETAOBJECT_H

#include &lt;QtCore/qobjectdefs.h>
#include &lt;QtCore/qvariant.h>

QT_MODULE(Core)

template &lt;typename T> class QList;

class Q_CORE_EXPORT QMetaMethod
{
public:
    inline QMetaMethod() : mobj(0),handle(0) {}

    const char *signature() const;
    const char *typeName() const;
    QList&lt;QByteArray> parameterTypes() const;
    QList&lt;QByteArray> parameterNames() const;
    const char *tag() const;
    enum Access { Private, Protected, Public };
    Access access() const;
    enum MethodType { Method, Signal, Slot };
    MethodType methodType() const;
    enum Attributes { Compatibility = 0x1, Cloned = 0x2, Scriptable = 0x4 };
    int attributes() const;

private:
    const QMetaObject *mobj;
    uint handle;
    friend struct QMetaObject;
};
Q_DECLARE_TYPEINFO(QMetaMethod, Q_MOVABLE_TYPE);

class Q_CORE_EXPORT QMetaEnum
{
public:
    inline QMetaEnum() : mobj(0),handle(0) {}

    const char *name() const;
    bool isFlag() const;

    int keyCount() const;
    const char *key(int index) const;
    int value(int index) const;

    const char *scope() const;

    int keyToValue(const char *key) const;
    const char* valueToKey(int value) const;
    int keysToValue(const char * keys) const;
    QByteArray valueToKeys(int value) const;


    inline bool isValid() const { return name() != 0; }
private:
    const QMetaObject *mobj;
    uint handle;
    friend struct QMetaObject;
};
Q_DECLARE_TYPEINFO(QMetaEnum, Q_MOVABLE_TYPE);

class Q_CORE_EXPORT QMetaProperty
{
public:
    QMetaProperty();

    const char *name() const;
    const char *typeName() const;
    QVariant::Type type() const;

    bool isReadable() const;
    bool isWritable() const;
    bool isResettable() const;
    bool isDesignable(const QObject *obj = 0) const;
    bool isScriptable(const QObject *obj = 0) const;
    bool isStored(const QObject *obj = 0) const;
    bool isEditable(const QObject *obj = 0) const;
    bool isUser(const QObject *obj = 0) const;

    bool isFlagType() const;
    bool isEnumType() const;
    QMetaEnum enumerator() const;

    QVariant read(const QObject *obj) const;
    bool write(QObject *obj, const QVariant &amp;value) const;
    bool reset(QObject *obj) const;

    bool hasStdCppSet() const;
    inline bool isValid() const { return isReadable(); }

private:
    const QMetaObject *mobj;
    uint handle;
    int idx;
    QMetaEnum menum;
    friend struct QMetaObject;
};

class Q_CORE_EXPORT QMetaClassInfo
{
public:
    inline QMetaClassInfo() : mobj(0),handle(0) {}
    const char *name() const;
    const char *value() const;
private:
    const QMetaObject *mobj;
    uint handle;
    friend struct QMetaObject;
};
Q_DECLARE_TYPEINFO(QMetaClassInfo, Q_MOVABLE_TYPE);

#endif // QMETAOBJECT_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtCore/qmetatype.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QMETATYPE_H
#define QMETATYPE_H

#include &lt;QtCore/qglobal.h>
#include &lt;QtCore/qatomic.h>

#ifndef QT_NO_DATASTREAM
#include &lt;QtCore/qdatastream.h>
#endif

#ifdef Bool
#error qmetatype.h must be included before any header file that defines Bool
#endif

QT_MODULE(Core)

class Q_CORE_EXPORT QMetaType {
public:
    enum Type {
        // these are merged with QVariant
        Void = 0, Bool = 1, Int = 2, UInt = 3, Double = 6, QChar = 7,
        QString = 10, QByteArray = 12,

        VoidStar = 128, Long, Short, Char, ULong,
        UShort, UChar, Float, QObjectStar, QWidgetStar,
        User = 256
    };

    typedef void (*Destructor)(void *);
    typedef void *(*Constructor)(const void *);

#ifndef QT_NO_DATASTREAM
    typedef void (*SaveOperator)(QDataStream &amp;, const void *);
    typedef void (*LoadOperator)(QDataStream &amp;, void *);
    static void registerStreamOperators(const char *typeName, SaveOperator saveOp,
                                        LoadOperator loadOp);
#endif
    static int registerType(const char *typeName, Destructor destructor,
                            Constructor constructor);
    static int type(const char *typeName);
    static const char *typeName(int type);
    static bool isRegistered(int type);
    static void *construct(int type, const void *copy);
    static void destroy(int type, void *data);

#ifndef QT_NO_DATASTREAM
    static bool save(QDataStream &amp;stream, int type, const void *data);
    static bool load(QDataStream &amp;stream, int type, void *data);
#endif
};

template &lt;typename T>
void qMetaTypeDeleteHelper(T *t)
{
    delete t;
}

template &lt;typename T>
void *qMetaTypeConstructHelper(const T *t)
{
    if (!t)
        return new T;
    return new T(*static_cast&lt;const T*>(t));
}

template &lt;typename T>
int qRegisterMetaType(const char *typeName
#ifndef qdoc
    , T * /* dummy */ = 0
#endif
)
{
    typedef void*(*ConstructPtr)(const T*);
    ConstructPtr cptr = qMetaTypeConstructHelper&lt;T>;
    typedef void(*DeletePtr)(T*);
    DeletePtr dptr = qMetaTypeDeleteHelper&lt;T>;

    return QMetaType::registerType(typeName, reinterpret_cast&lt;QMetaType::Destructor>(dptr),
                                   reinterpret_cast&lt;QMetaType::Constructor>(cptr));
}

#ifndef QT_NO_DATASTREAM
template &lt;typename T>
void qMetaTypeSaveHelper(QDataStream &amp;stream, const T *t)
{
    stream &lt;&lt; *t;
}

template &lt;typename T>
void qMetaTypeLoadHelper(QDataStream &amp;stream, T *t)
{
    stream >> *t;
}

template &lt;typename T>
void qRegisterMetaTypeStreamOperators(const char *typeName
#ifndef qdoc
    , T * /* dummy */ = 0
#endif
)
{
    typedef void(*SavePtr)(QDataStream &amp;, const T *);
    typedef void(*LoadPtr)(QDataStream &amp;, T *);
    SavePtr sptr = qMetaTypeSaveHelper&lt;T>;
    LoadPtr lptr = qMetaTypeLoadHelper&lt;T>;

    qRegisterMetaType&lt;T>(typeName);
    QMetaType::registerStreamOperators(typeName, reinterpret_cast&lt;QMetaType::SaveOperator>(sptr),
                                       reinterpret_cast&lt;QMetaType::LoadOperator>(lptr));
}
#endif

template &lt;typename T>
struct QMetaTypeId
{
    enum { Defined = 0 };
};

template &lt;typename T>
inline int qMetaTypeId(
#ifndef qdoc
    T * /* dummy */ = 0
#endif
)
{
    return QMetaTypeId&lt;T>::qt_metatype_id();
}

#define Q_DECLARE_METATYPE(TYPE) \
template &lt;> \
struct QMetaTypeId&lt; TYPE > \
{ \
    enum { Defined = 1 }; \
    static int qt_metatype_id() \
    { \
        static QBasicAtomic id = Q_ATOMIC_INIT(0); \
        if (!id) \
           id = qRegisterMetaType&lt; TYPE >(#TYPE); \
       return id; \
    } \
};

class QString;
template&lt;> struct QMetaTypeId&lt;QString>
{ enum { Defined = 1 };
  static inline int qt_metatype_id() { return QMetaType::QString; } };
template&lt;> struct QMetaTypeId&lt;int>
{ enum { Defined = 1 };
  static inline int qt_metatype_id() { return QMetaType::Int; } };
template&lt;> struct QMetaTypeId&lt;uint>
{ enum { Defined = 1 };
  static inline int qt_metatype_id() { return QMetaType::UInt; } };
template&lt;> struct QMetaTypeId&lt;bool>
{ enum { Defined = 1 };
  static inline int qt_metatype_id() { return QMetaType::Bool; } };
template&lt;> struct QMetaTypeId&lt;double>
{ enum { Defined = 1 };
  static inline int qt_metatype_id() { return QMetaType::Double; } };
class QByteArray;
template&lt;> struct QMetaTypeId&lt;QByteArray>
{ enum { Defined = 1 };
  static inline int qt_metatype_id() { return QMetaType::QByteArray; } };
class QChar;
template&lt;> struct QMetaTypeId&lt;QChar>
{ enum { Defined = 1 };
  static inline int qt_metatype_id() { return QMetaType::QChar; } };
template&lt;> struct QMetaTypeId&lt;void>
{ enum { Defined = 1 };
  static inline int qt_metatype_id() { return QMetaType::Void; } };
template&lt;> struct QMetaTypeId&lt;long>
{ enum { Defined = 1 };
  static inline int qt_metatype_id() { return QMetaType::Long; } };
template&lt;> struct QMetaTypeId&lt;short>
{ enum { Defined = 1 };
  static inline int qt_metatype_id() { return QMetaType::Short; } };
template&lt;> struct QMetaTypeId&lt;char>
{ enum { Defined = 1 };
  static inline int qt_metatype_id() { return QMetaType::Char; } };
template&lt;> struct QMetaTypeId&lt;ulong>
{ enum { Defined = 1 };
  static inline int qt_metatype_id() { return QMetaType::ULong; } };
template&lt;> struct QMetaTypeId&lt;ushort>
{ enum { Defined = 1 };
  static inline int qt_metatype_id() { return QMetaType::UShort; } };
template&lt;> struct QMetaTypeId&lt;uchar>
{ enum { Defined = 1 };
  static inline int qt_metatype_id() { return QMetaType::UChar; } };
template&lt;> struct QMetaTypeId&lt;float>
{ enum { Defined = 1 };
  static inline int qt_metatype_id() { return QMetaType::Float; } };
class QObject;
template&lt;> struct QMetaTypeId&lt;QObject *>
{ enum { Defined = 1 };
  static inline int qt_metatype_id() { return QMetaType::QObjectStar; } };
class QWidget;
template&lt;> struct QMetaTypeId&lt;QWidget *>
{ enum { Defined = 1 };
  static inline int qt_metatype_id() { return QMetaType::QWidgetStar; } };
template&lt;> struct QMetaTypeId&lt;void *>
{ enum { Defined = 1 };
  static inline int qt_metatype_id() { return QMetaType::VoidStar; } };

#endif // QMETATYPE_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtCore/qmimedata.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
 **
 ** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
 **
 ** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
 **
 ** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
 **
 ** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 ** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 **
 ****************************************************************************/

#ifndef QMIMEDATA_H
#define QMIMEDATA_H

#include &lt;QtCore/qvariant.h>
#include &lt;QtCore/qobject.h>

QT_MODULE(Core)

class QUrl;
class QMimeDataPrivate;

class Q_CORE_EXPORT QMimeData : public QObject
{
    Q_OBJECT
public:
    QMimeData();
    ~QMimeData();

    QList&lt;QUrl> urls() const;
    void setUrls(const QList&lt;QUrl> &amp;urls);
    bool hasUrls() const;

    QString text() const;
    void setText(const QString &amp;text);
    bool hasText() const;

    QString html() const;
    void setHtml(const QString &amp;html);
    bool hasHtml() const;

    QVariant imageData() const;
    void setImageData(const QVariant &amp;image);
    bool hasImage() const;

    QVariant colorData() const;
    void setColorData(const QVariant &amp;color);
    bool hasColor() const;

    QByteArray data(const QString &amp;mimetype) const;
    void setData(const QString &amp;mimetype, const QByteArray &amp;data);

    virtual bool hasFormat(const QString &amp;mimetype) const;
    virtual QStringList formats() const;

    void clear();
protected:
    virtual QVariant retrieveData(const QString &amp;mimetype,
                                      QVariant::Type preferredType) const;
private:
    Q_DISABLE_COPY(QMimeData)
    Q_DECLARE_PRIVATE(QMimeData)
};

#endif // QMIMEDATA_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtCore/qmutex.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QMUTEX_H
#define QMUTEX_H

#include &lt;QtCore/qglobal.h>
#include &lt;new>

QT_MODULE(Core)

#ifndef QT_NO_THREAD

class QMutexPrivate;

class Q_CORE_EXPORT QMutex
{
    friend class QWaitCondition;
    friend class QWaitConditionPrivate;

public:
    enum RecursionMode { NonRecursive, Recursive };

    explicit QMutex(RecursionMode mode = NonRecursive);
    ~QMutex();

    void lock();
    bool tryLock();
    void unlock();

#if defined(QT3_SUPPORT)
    inline QT3_SUPPORT bool locked()
    {
        if (!tryLock())
            return true;
        unlock();
        return false;
    }
    inline QT3_SUPPORT_CONSTRUCTOR QMutex(bool recursive)
    {
        new (this) QMutex(recursive ? Recursive : NonRecursive);
    }
#endif

private:
    Q_DISABLE_COPY(QMutex)

    QMutexPrivate *d;
};

class Q_CORE_EXPORT QMutexLocker
{
public:
    inline explicit QMutexLocker(QMutex *m) : mtx(m) { relock(); }
    inline ~QMutexLocker() { unlock(); }

    inline void unlock() { if (mtx) mtx->unlock(); }

    inline void relock() { if (mtx) mtx->lock(); }

    inline QMutex *mutex() const { return mtx; }

private:
    Q_DISABLE_COPY(QMutexLocker)

    QMutex *mtx;
};

#else // QT_NO_THREAD


class Q_CORE_EXPORT QMutex
{
public:
    enum RecursionMode { NonRecursive, Recursive };

    inline explicit QMutex(RecursionMode mode = NonRecursive) { Q_UNUSED(mode); }
    inline ~QMutex() {}

    static inline void lock() {}
    static inline bool tryLock() { return true; }
    static void unlock() {}

#if defined(QT3_SUPPORT)
    static inline QT3_SUPPORT bool locked() { return false; }
#endif

private:
    Q_DISABLE_COPY(QMutex)
};

class Q_CORE_EXPORT QMutexLocker
{
public:
    inline explicit QMutexLocker(QMutex *) {}
    inline ~QMutexLocker() {}

    static inline void unlock() {}
    static void relock() {}
    static inline QMutex *mutex() { return 0; }

private:
    Q_DISABLE_COPY(QMutexLocker)
};

#endif // QT_NO_THREAD

#endif // QMUTEX_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtCore/qnamespace.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QNAMESPACE_H
#define QNAMESPACE_H

#include &lt;QtCore/qglobal.h>

QT_MODULE(Core)

#ifndef Q_MOC_RUN
namespace
#else
class Q_CORE_EXPORT
#endif
Qt {
#ifdef Q_MOC_RUN
    Q_OBJECT
    Q_ENUMS(Orientation TextFormat BackgroundMode DateFormat ScrollBarPolicy FocusPolicy ContextMenuPolicy CaseSensitivity LayoutDirection ArrowType)
    Q_ENUMS(ToolButtonStyle)
    Q_ENUMS(PenStyle PenCapStyle PenJoinStyle BrushStyle FillRule BGMode ClipOperation GlobalColor)
    Q_FLAGS(Alignment)
    Q_FLAGS(Orientations)
    Q_FLAGS(DockWidgetAreas)
    Q_ENUMS(DockWidgetArea)
public:
#endif
    enum GlobalColor {
        color0,
        color1,
        black,
        white,
        darkGray,
        gray,
        lightGray,
        red,
        green,
        blue,
        cyan,
        magenta,
        yellow,
        darkRed,
        darkGreen,
        darkBlue,
        darkCyan,
        darkMagenta,
        darkYellow,
        transparent
    };

    enum KeyboardModifier {
        NoModifier           = 0x00000000,
        ShiftModifier        = 0x02000000,
        ControlModifier      = 0x04000000,
        AltModifier          = 0x08000000,
        MetaModifier         = 0x10000000,
        KeypadModifier       = 0x20000000,
        // Do not extend the mask to include 0x01000000
        KeyboardModifierMask = 0xfe000000
    };
    Q_DECLARE_FLAGS(KeyboardModifiers, KeyboardModifier)

    //shorter names for shortcuts
    enum Modifier {
        META          = Qt::MetaModifier,
        SHIFT         = Qt::ShiftModifier,
        CTRL          = Qt::ControlModifier,
        ALT           = Qt::AltModifier,
        MODIFIER_MASK = KeyboardModifierMask,
        UNICODE_ACCEL = 0x00000000
    };

    enum MouseButton {
        NoButton         = 0x00000000,
        LeftButton       = 0x00000001,
        RightButton      = 0x00000002,
        MidButton        = 0x00000004,
        XButton1         = 0x00000008,
        XButton2         = 0x00000010,
        MouseButtonMask  = 0x000000ff
    };
    Q_DECLARE_FLAGS(MouseButtons, MouseButton)

#ifdef QT3_SUPPORT
    enum ButtonState_enum {
        ShiftButton     = Qt::ShiftModifier,
        ControlButton   = Qt::ControlModifier,
        AltButton       = Qt::AltModifier,
        MetaButton      = Qt::MetaModifier,
        Keypad          = Qt::KeypadModifier,
        KeyButtonMask   = Qt::KeyboardModifierMask
    };
    typedef int ButtonState;
#endif

    enum Orientation {
        Horizontal = 0x1,
        Vertical = 0x2
    };

    Q_DECLARE_FLAGS(Orientations, Orientation)

    enum FocusPolicy {
        NoFocus = 0,
        TabFocus = 0x1,
        ClickFocus = 0x2,
        StrongFocus = TabFocus | ClickFocus | 0x8,
        WheelFocus = StrongFocus | 0x4
    };

    enum SortOrder {
        AscendingOrder,
        DescendingOrder
#if defined(QT3_SUPPORT) &amp;&amp; !defined(Q_MOC_RUN)
        ,Ascending = AscendingOrder,
        Descending = DescendingOrder
#endif
    };

    // Text formatting flags for QPainter::drawText and QLabel
    // the following four enums can be combined to one integer which
    // is passed as textflag to drawText and qt_format_text.

    enum AlignmentFlag {
        AlignLeft = 0x0001,
        AlignLeading = AlignLeft,
        AlignRight = 0x0002,
        AlignTrailing = AlignRight,
        AlignHCenter = 0x0004,
        AlignJustify = 0x0008,
        AlignAbsolute = 0x0010,
        AlignHorizontal_Mask = AlignLeft | AlignRight | AlignHCenter | AlignJustify | AlignAbsolute,

        AlignTop = 0x0020,
        AlignBottom = 0x0040,
        AlignVCenter = 0x0080,
        AlignVertical_Mask = AlignTop | AlignBottom | AlignVCenter,

        AlignCenter = AlignVCenter | AlignHCenter
#if defined(QT3_SUPPORT) &amp;&amp; !defined(Q_MOC_RUN)
        , AlignAuto = AlignLeft
#endif
    };

    Q_DECLARE_FLAGS(Alignment, AlignmentFlag)

    enum TextFlag {
        TextSingleLine = 0x0100,
        TextDontClip = 0x0200,
        TextExpandTabs = 0x0400,
        TextShowMnemonic = 0x0800,
        TextWordWrap = 0x1000,
        TextWrapAnywhere = 0x2000,
        TextDontPrint = 0x4000,
        TextIncludeTrailingSpaces = 0x08000000,
        TextHideMnemonic = 0x8000

#if defined(QT3_SUPPORT) &amp;&amp; !defined(Q_MOC_RUN)
        ,SingleLine = TextSingleLine,
        DontClip = TextDontClip,
        ExpandTabs = TextExpandTabs,
        ShowPrefix = TextShowMnemonic,
        WordBreak = TextWordWrap,
        BreakAnywhere = TextWrapAnywhere,
        DontPrint = TextDontPrint,
        IncludeTrailingSpaces = TextIncludeTrailingSpaces,
        NoAccel = TextHideMnemonic
#endif
    };
#ifdef QT3_SUPPORT
    typedef TextFlag TextFlags;
#endif

    enum TextElideMode {
        ElideLeft,
        ElideRight,
        ElideMiddle
    };

    enum WindowType {
        Widget = 0x00000000,
        Window = 0x00000001,
        Dialog = 0x00000002 | Window,
        Sheet = 0x00000004 | Window,
        Drawer = 0x00000006 | Window,
        Popup = 0x00000008 | Window,
        Tool = 0x0000000a | Window,
        ToolTip = 0x0000000c | Window,
        SplashScreen = 0x0000000e | Window,
        Desktop = 0x00000010 | Window,
        SubWindow =  0x00000012,

        WindowType_Mask = 0x000000ff,
        MSWindowsFixedSizeDialogHint = 0x00000100,
	MSWindowsOwnDC = 0x00000200,
        X11BypassWindowManagerHint = 0x00000400,
        FramelessWindowHint = 0x00000800,
        WindowTitleHint = 0x00001000,
        WindowSystemMenuHint = 0x00002000,
        WindowMinimizeButtonHint = 0x00004000,
        WindowMaximizeButtonHint = 0x00008000,
        WindowMinMaxButtonsHint = WindowMinimizeButtonHint | WindowMaximizeButtonHint,
        WindowContextHelpButtonHint = 0x00010000,
        WindowShadeButtonHint = 0x00020000,
        WindowStaysOnTopHint = 0x00040000

#ifdef QT3_SUPPORT
        ,
        WMouseNoMask = 0x00080000,
        WDestructiveClose = 0x00100000,
        WStaticContents = 0x00200000,
        WGroupLeader = 0x00400000,
        WShowModal = 0x00800000,
        WNoMousePropagation = 0x01000000,

        WType_TopLevel = Window,
        WType_Dialog = Dialog,
        WType_Popup = Popup,
        WType_Desktop = Desktop,
        WType_Mask = WindowType_Mask,

        WStyle_Customize = 0,
        WStyle_NormalBorder = 0,
        WStyle_DialogBorder = MSWindowsFixedSizeDialogHint,
        WStyle_NoBorder = FramelessWindowHint,
        WStyle_Title = WindowTitleHint,
        WStyle_SysMenu = WindowSystemMenuHint,
        WStyle_Minimize = WindowMinimizeButtonHint,
        WStyle_Maximize = WindowMaximizeButtonHint,
        WStyle_MinMax = WStyle_Minimize | WStyle_Maximize,
        WStyle_Tool = Tool,
        WStyle_StaysOnTop = WindowStaysOnTopHint,
        WStyle_ContextHelp = WindowContextHelpButtonHint,

        // misc flags
        WPaintDesktop = 0,
        WPaintClever = 0,

        WX11BypassWM            = X11BypassWindowManagerHint,
        WWinOwnDC               = MSWindowsOwnDC,
        WMacSheet               = Sheet,
        WMacDrawer              = Drawer,

        WStyle_Splash           = SplashScreen,

        WNoAutoErase           = 0,
        WRepaintNoErase        = 0,
        WNorthWestGravity      = WStaticContents,
        WType_Modal            = Dialog | WShowModal,
        WStyle_Dialog          = Dialog,
        WStyle_NoBorderEx      = FramelessWindowHint,
        WResizeNoErase = 0,
        WMacNoSheet = 0
#endif

    };

    Q_DECLARE_FLAGS(WindowFlags, WindowType)

    enum WindowState {
        WindowNoState    = 0x00000000,
        WindowMinimized  = 0x00000001,
        WindowMaximized  = 0x00000002,
        WindowFullScreen = 0x00000004,
        WindowActive     = 0x00000008
    };

    Q_DECLARE_FLAGS(WindowStates, WindowState)

    enum WidgetAttribute {
        WA_Disabled = 0,
        WA_UnderMouse = 1,
        WA_MouseTracking = 2,
        WA_ContentsPropagated = 3, // ## deprecated
        WA_OpaquePaintEvent = 4,
        WA_NoBackground = WA_OpaquePaintEvent, // ## deprecated
        WA_StaticContents = 5,
        WA_LaidOut = 7,
        WA_PaintOnScreen = 8,
        WA_NoSystemBackground = 9,
        WA_UpdatesDisabled = 10,
        WA_Mapped = 11,
        WA_MacNoClickThrough = 12, // Mac only
        WA_PaintOutsidePaintEvent = 13,
        WA_InputMethodEnabled = 14,
        WA_WState_Visible = 15,
        WA_WState_Hidden = 16,

        WA_ForceDisabled = 32,
        WA_KeyCompression = 33,
        WA_PendingMoveEvent = 34,
        WA_PendingResizeEvent = 35,
        WA_SetPalette = 36,
        WA_SetFont = 37,
        WA_SetCursor = 38,
        WA_NoChildEventsFromChildren = 39,
        WA_WindowModified = 41,
        WA_Resized = 42,
        WA_Moved = 43,
        WA_PendingUpdate = 44,
        WA_InvalidSize = 45,
        WA_MacMetalStyle = 46, // Mac only
        WA_CustomWhatsThis = 47,
        WA_LayoutOnEntireRect = 48,
        WA_OutsideWSRange = 49,
        WA_GrabbedShortcut = 50,
        WA_TransparentForMouseEvents = 51,
        WA_PaintUnclipped = 52,
        WA_SetWindowIcon = 53,
        WA_NoMouseReplay = 54,
        WA_DeleteOnClose = 55,
        WA_RightToLeft = 56,
        WA_SetLayoutDirection = 57,
        WA_NoChildEventsForParent = 58,
        WA_ForceUpdatesDisabled = 59,

        WA_WState_Created = 60,
        WA_WState_CompressKeys = 61,
        WA_WState_InPaintEvent = 62,
        WA_WState_Reparented = 63,
        WA_WState_ConfigPending = 64,
        WA_WState_Polished = 66,
        WA_WState_DND = 67, // ## deprecated
        WA_WState_OwnSizePolicy = 68,
        WA_WState_ExplicitShowHide = 69,

        WA_ShowModal = 70, // ## deprecated
        WA_MouseNoMask = 71,
        WA_GroupLeader = 72, // ## deprecated
        WA_NoMousePropagation = 73, // ## for now, might go away.
        WA_Hover = 74,
        WA_InputMethodTransparent = 75, // Don't reset IM when user clicks on this (for virtual keyboards on embedded)
        WA_QuitOnClose = 76,

        WA_KeyboardFocusChange = 77,

        WA_AcceptDrops = 78,
        WA_DropSiteRegistered = 79, // internal
        WA_ForceAcceptDrops = WA_DropSiteRegistered, // ## deprecated

        WA_WindowPropagation = 80,

        WA_NoX11EventCompression = 81,
        WA_TintedBackground = 82,

        // Add new attributes above this
        WA_AttributeCount
    };

    // Image conversion flags.  The unusual ordering is caused by
    // compatibility and default requirements.

    enum ImageConversionFlag {
        ColorMode_Mask          = 0x00000003,
        AutoColor               = 0x00000000,
        ColorOnly               = 0x00000003,
        MonoOnly                = 0x00000002,
        // Reserved             = 0x00000001,

        AlphaDither_Mask        = 0x0000000c,
        ThresholdAlphaDither    = 0x00000000,
        OrderedAlphaDither      = 0x00000004,
        DiffuseAlphaDither      = 0x00000008,
        NoAlpha                 = 0x0000000c, // Not supported

        Dither_Mask             = 0x00000030,
        DiffuseDither           = 0x00000000,
        OrderedDither           = 0x00000010,
        ThresholdDither         = 0x00000020,
        // ReservedDither       = 0x00000030,

        DitherMode_Mask         = 0x000000c0,
        AutoDither              = 0x00000000,
        PreferDither            = 0x00000040,
        AvoidDither             = 0x00000080
    };
    Q_DECLARE_FLAGS(ImageConversionFlags, ImageConversionFlag)

    enum BGMode {
        TransparentMode,
        OpaqueMode
    };

#ifdef QT3_SUPPORT
    enum PaintUnit {                                // paint unit
        PixelUnit,
        LoMetricUnit, // obsolete
        HiMetricUnit, // obsolete
        LoEnglishUnit, // obsolete
        HiEnglishUnit, // obsolete
        TwipsUnit // obsolete
    };

    enum GUIStyle {
        MacStyle,
        WindowsStyle,
        Win3Style,
        PMStyle,
        MotifStyle
    };
#endif

    enum Key {
        Key_Escape = 0x01000000,                // misc keys
        Key_Tab = 0x01000001,
        Key_Backtab = 0x01000002,
#if defined(QT3_SUPPORT) &amp;&amp; !defined(Q_MOC_RUN)
        Key_BackTab = Key_Backtab,
#endif
        Key_Backspace = 0x01000003,
#if defined(QT3_SUPPORT) &amp;&amp; !defined(Q_MOC_RUN)
        Key_BackSpace = Key_Backspace,
#endif
        Key_Return = 0x01000004,
        Key_Enter = 0x01000005,
        Key_Insert = 0x01000006,
        Key_Delete = 0x01000007,
        Key_Pause = 0x01000008,
        Key_Print = 0x01000009,
        Key_SysReq = 0x0100000a,
        Key_Clear = 0x0100000b,
        Key_Home = 0x01000010,                // cursor movement
        Key_End = 0x01000011,
        Key_Left = 0x01000012,
        Key_Up = 0x01000013,
        Key_Right = 0x01000014,
        Key_Down = 0x01000015,
        Key_PageUp = 0x01000016,
#if defined(QT3_SUPPORT) &amp;&amp; !defined(Q_MOC_RUN)
        Key_Prior = Key_PageUp,
#endif
        Key_PageDown = 0x01000017,
#if defined(QT3_SUPPORT) &amp;&amp; !defined(Q_MOC_RUN)
        Key_Next = Key_PageDown,
#endif
        Key_Shift = 0x01000020,                // modifiers
        Key_Control = 0x01000021,
        Key_Meta = 0x01000022,
        Key_Alt = 0x01000023,
        Key_CapsLock = 0x01000024,
        Key_NumLock = 0x01000025,
        Key_ScrollLock = 0x01000026,
        Key_F1 = 0x01000030,                // function keys
        Key_F2 = 0x01000031,
        Key_F3 = 0x01000032,
        Key_F4 = 0x01000033,
        Key_F5 = 0x01000034,
        Key_F6 = 0x01000035,
        Key_F7 = 0x01000036,
        Key_F8 = 0x01000037,
        Key_F9 = 0x01000038,
        Key_F10 = 0x01000039,
        Key_F11 = 0x0100003a,
        Key_F12 = 0x0100003b,
        Key_F13 = 0x0100003c,
        Key_F14 = 0x0100003d,
        Key_F15 = 0x0100003e,
        Key_F16 = 0x0100003f,
        Key_F17 = 0x01000040,
        Key_F18 = 0x01000041,
        Key_F19 = 0x01000042,
        Key_F20 = 0x01000043,
        Key_F21 = 0x01000044,
        Key_F22 = 0x01000045,
        Key_F23 = 0x01000046,
        Key_F24 = 0x01000047,
        Key_F25 = 0x01000048,                // F25 .. F35 only on X11
        Key_F26 = 0x01000049,
        Key_F27 = 0x0100004a,
        Key_F28 = 0x0100004b,
        Key_F29 = 0x0100004c,
        Key_F30 = 0x0100004d,
        Key_F31 = 0x0100004e,
        Key_F32 = 0x0100004f,
        Key_F33 = 0x01000050,
        Key_F34 = 0x01000051,
        Key_F35 = 0x01000052,
        Key_Super_L = 0x01000053,                 // extra keys
        Key_Super_R = 0x01000054,
        Key_Menu = 0x01000055,
        Key_Hyper_L = 0x01000056,
        Key_Hyper_R = 0x01000057,
        Key_Help = 0x01000058,
        Key_Direction_L = 0x01000059,
        Key_Direction_R = 0x01000060,
        Key_Space = 0x20,                // 7 bit printable ASCII
        Key_Any = Key_Space,
        Key_Exclam = 0x21,
        Key_QuoteDbl = 0x22,
        Key_NumberSign = 0x23,
        Key_Dollar = 0x24,
        Key_Percent = 0x25,
        Key_Ampersand = 0x26,
        Key_Apostrophe = 0x27,
        Key_ParenLeft = 0x28,
        Key_ParenRight = 0x29,
        Key_Asterisk = 0x2a,
        Key_Plus = 0x2b,
        Key_Comma = 0x2c,
        Key_Minus = 0x2d,
        Key_Period = 0x2e,
        Key_Slash = 0x2f,
        Key_0 = 0x30,
        Key_1 = 0x31,
        Key_2 = 0x32,
        Key_3 = 0x33,
        Key_4 = 0x34,
        Key_5 = 0x35,
        Key_6 = 0x36,
        Key_7 = 0x37,
        Key_8 = 0x38,
        Key_9 = 0x39,
        Key_Colon = 0x3a,
        Key_Semicolon = 0x3b,
        Key_Less = 0x3c,
        Key_Equal = 0x3d,
        Key_Greater = 0x3e,
        Key_Question = 0x3f,
        Key_At = 0x40,
        Key_A = 0x41,
        Key_B = 0x42,
        Key_C = 0x43,
        Key_D = 0x44,
        Key_E = 0x45,
        Key_F = 0x46,
        Key_G = 0x47,
        Key_H = 0x48,
        Key_I = 0x49,
        Key_J = 0x4a,
        Key_K = 0x4b,
        Key_L = 0x4c,
        Key_M = 0x4d,
        Key_N = 0x4e,
        Key_O = 0x4f,
        Key_P = 0x50,
        Key_Q = 0x51,
        Key_R = 0x52,
        Key_S = 0x53,
        Key_T = 0x54,
        Key_U = 0x55,
        Key_V = 0x56,
        Key_W = 0x57,
        Key_X = 0x58,
        Key_Y = 0x59,
        Key_Z = 0x5a,
        Key_BracketLeft = 0x5b,
        Key_Backslash = 0x5c,
        Key_BracketRight = 0x5d,
        Key_AsciiCircum = 0x5e,
        Key_Underscore = 0x5f,
        Key_QuoteLeft = 0x60,
        Key_BraceLeft = 0x7b,
        Key_Bar = 0x7c,
        Key_BraceRight = 0x7d,
        Key_AsciiTilde = 0x7e,

        Key_nobreakspace = 0x0a0,
        Key_exclamdown = 0x0a1,
        Key_cent = 0x0a2,
        Key_sterling = 0x0a3,
        Key_currency = 0x0a4,
        Key_yen = 0x0a5,
        Key_brokenbar = 0x0a6,
        Key_section = 0x0a7,
        Key_diaeresis = 0x0a8,
        Key_copyright = 0x0a9,
        Key_ordfeminine = 0x0aa,
        Key_guillemotleft = 0x0ab,        // left angle quotation mark
        Key_notsign = 0x0ac,
        Key_hyphen = 0x0ad,
        Key_registered = 0x0ae,
        Key_macron = 0x0af,
        Key_degree = 0x0b0,
        Key_plusminus = 0x0b1,
        Key_twosuperior = 0x0b2,
        Key_threesuperior = 0x0b3,
        Key_acute = 0x0b4,
        Key_mu = 0x0b5,
        Key_paragraph = 0x0b6,
        Key_periodcentered = 0x0b7,
        Key_cedilla = 0x0b8,
        Key_onesuperior = 0x0b9,
        Key_masculine = 0x0ba,
        Key_guillemotright = 0x0bb,        // right angle quotation mark
        Key_onequarter = 0x0bc,
        Key_onehalf = 0x0bd,
        Key_threequarters = 0x0be,
        Key_questiondown = 0x0bf,
        Key_Agrave = 0x0c0,
        Key_Aacute = 0x0c1,
        Key_Acircumflex = 0x0c2,
        Key_Atilde = 0x0c3,
        Key_Adiaeresis = 0x0c4,
        Key_Aring = 0x0c5,
        Key_AE = 0x0c6,
        Key_Ccedilla = 0x0c7,
        Key_Egrave = 0x0c8,
        Key_Eacute = 0x0c9,
        Key_Ecircumflex = 0x0ca,
        Key_Ediaeresis = 0x0cb,
        Key_Igrave = 0x0cc,
        Key_Iacute = 0x0cd,
        Key_Icircumflex = 0x0ce,
        Key_Idiaeresis = 0x0cf,
        Key_ETH = 0x0d0,
        Key_Ntilde = 0x0d1,
        Key_Ograve = 0x0d2,
        Key_Oacute = 0x0d3,
        Key_Ocircumflex = 0x0d4,
        Key_Otilde = 0x0d5,
        Key_Odiaeresis = 0x0d6,
        Key_multiply = 0x0d7,
        Key_Ooblique = 0x0d8,
        Key_Ugrave = 0x0d9,
        Key_Uacute = 0x0da,
        Key_Ucircumflex = 0x0db,
        Key_Udiaeresis = 0x0dc,
        Key_Yacute = 0x0dd,
        Key_THORN = 0x0de,
        Key_ssharp = 0x0df,
#if defined(QT3_SUPPORT) &amp;&amp; !defined(Q_MOC_RUN)
        Key_agrave = Key_Agrave,
        Key_aacute = Key_Aacute,
        Key_acircumflex = Key_Acircumflex,
        Key_atilde = Key_Atilde,
        Key_adiaeresis = Key_Adiaeresis,
        Key_aring = Key_Aring,
        Key_ae = Key_AE,
        Key_ccedilla = Key_Ccedilla,
        Key_egrave = Key_Egrave,
        Key_eacute = Key_Eacute,
        Key_ecircumflex = Key_Ecircumflex,
        Key_ediaeresis = Key_Ediaeresis,
        Key_igrave = Key_Igrave,
        Key_iacute = Key_Iacute,
        Key_icircumflex = Key_Icircumflex,
        Key_idiaeresis = Key_Idiaeresis,
        Key_eth = Key_ETH,
        Key_ntilde = Key_Ntilde,
        Key_ograve = Key_Ograve,
        Key_oacute = Key_Oacute,
        Key_ocircumflex = Key_Ocircumflex,
        Key_otilde = Key_Otilde,
        Key_odiaeresis = Key_Odiaeresis,
#endif
        Key_division = 0x0f7,
#if defined(QT3_SUPPORT) &amp;&amp; !defined(Q_MOC_RUN)
        Key_oslash = Key_Ooblique,
        Key_ugrave = Key_Ugrave,
        Key_uacute = Key_Uacute,
        Key_ucircumflex = Key_Ucircumflex,
        Key_udiaeresis = Key_Udiaeresis,
        Key_yacute = Key_Yacute,
        Key_thorn = Key_THORN,
#endif
        Key_ydiaeresis = 0x0ff,

	// International input method support (X keycode - 0xEE00, the
	// definition follows Qt/Embedded 2.3.7) Only interesting if
	// you are writing your own input method

	// International &amp; multi-key character composition
        Key_AltGr               = 0x01001103,
	Key_Multi_key           = 0x01001120,  // Multi-key character compose
	Key_Codeinput           = 0x01001137,
	Key_SingleCandidate     = 0x0100113c,
	Key_MultipleCandidate   = 0x0100113d,
	Key_PreviousCandidate   = 0x0100113e,

	// Misc Functions
	Key_Mode_switch         = 0x0100117e,  // Character set switch
	//Key_script_switch       = 0x0100117e,  // Alias for mode_switch

	// Japanese keyboard support
	Key_Kanji               = 0x01001121,  // Kanji, Kanji convert
	Key_Muhenkan            = 0x01001122,  // Cancel Conversion
	//Key_Henkan_Mode         = 0x01001123,  // Start/Stop Conversion
	Key_Henkan              = 0x01001123,  // Alias for Henkan_Mode
	Key_Romaji              = 0x01001124,  // to Romaji
	Key_Hiragana            = 0x01001125,  // to Hiragana
	Key_Katakana            = 0x01001126,  // to Katakana
	Key_Hiragana_Katakana   = 0x01001127,  // Hiragana/Katakana toggle
	Key_Zenkaku             = 0x01001128,  // to Zenkaku
	Key_Hankaku             = 0x01001129,  // to Hankaku
	Key_Zenkaku_Hankaku     = 0x0100112a,  // Zenkaku/Hankaku toggle
	Key_Touroku             = 0x0100112b,  // Add to Dictionary
	Key_Massyo              = 0x0100112c,  // Delete from Dictionary
	Key_Kana_Lock           = 0x0100112d,  // Kana Lock
	Key_Kana_Shift          = 0x0100112e,  // Kana Shift
	Key_Eisu_Shift          = 0x0100112f,  // Alphanumeric Shift
	Key_Eisu_toggle         = 0x01001130,  // Alphanumeric toggle
	//Key_Kanji_Bangou        = 0x01001137,  // Codeinput
	//Key_Zen_Koho            = 0x0100113d,  // Multiple/All Candidate(s)
	//Key_Mae_Koho            = 0x0100113e,  // Previous Candidate

	// Korean keyboard support
	//
	// In fact, many Korean users need only 2 keys, Key_Hangul and
	// Key_Hangul_Hanja. But rest of the keys are good for future.

	Key_Hangul              = 0x01001131,  // Hangul start/stop(toggle)
	Key_Hangul_Start        = 0x01001132,  // Hangul start
	Key_Hangul_End          = 0x01001133,  // Hangul end, English start
	Key_Hangul_Hanja        = 0x01001134,  // Start Hangul->Hanja Conversion
	Key_Hangul_Jamo         = 0x01001135,  // Hangul Jamo mode
	Key_Hangul_Romaja       = 0x01001136,  // Hangul Romaja mode
	//Key_Hangul_Codeinput    = 0x01001137,  // Hangul code input mode
	Key_Hangul_Jeonja       = 0x01001138,  // Jeonja mode
	Key_Hangul_Banja        = 0x01001139,  // Banja mode
	Key_Hangul_PreHanja     = 0x0100113a,  // Pre Hanja conversion
	Key_Hangul_PostHanja    = 0x0100113b,  // Post Hanja conversion
	//Key_Hangul_SingleCandidate   = 0x0100113c,  // Single candidate
	//Key_Hangul_MultipleCandidate = 0x0100113d,  // Multiple candidate
	//Key_Hangul_PreviousCandidate = 0x0100113e,  // Previous candidate
	Key_Hangul_Special      = 0x0100113f,  // Special symbols
	//Key_Hangul_switch       = 0x0100117e,  // Alias for mode_switch

        // dead keys (X keycode - 0xED00 to avoid the conflict)
        Key_Dead_Grave          = 0x01001250,
        Key_Dead_Acute          = 0x01001251,
        Key_Dead_Circumflex     = 0x01001252,
        Key_Dead_Tilde          = 0x01001253,
        Key_Dead_Macron         = 0x01001254,
        Key_Dead_Breve          = 0x01001255,
        Key_Dead_Abovedot       = 0x01001256,
        Key_Dead_Diaeresis      = 0x01001257,
        Key_Dead_Abovering      = 0x01001258,
        Key_Dead_Doubleacute    = 0x01001259,
        Key_Dead_Caron          = 0x0100125a,
        Key_Dead_Cedilla        = 0x0100125b,
        Key_Dead_Ogonek         = 0x0100125c,
        Key_Dead_Iota           = 0x0100125d,
        Key_Dead_Voiced_Sound   = 0x0100125e,
        Key_Dead_Semivoiced_Sound = 0x0100125f,
        Key_Dead_Belowdot       = 0x01001260,
        Key_Dead_Hook           = 0x01001261,
        Key_Dead_Horn           = 0x01001262,

        // multimedia/internet keys - ignored by default - see QKeyEvent c'tor

        Key_Back  = 0x01000061,
        Key_Forward  = 0x01000062,
        Key_Stop  = 0x01000063,
        Key_Refresh  = 0x01000064,

        Key_VolumeDown = 0x01000070,
        Key_VolumeMute  = 0x01000071,
        Key_VolumeUp = 0x01000072,
        Key_BassBoost = 0x01000073,
        Key_BassUp = 0x01000074,
        Key_BassDown = 0x01000075,
        Key_TrebleUp = 0x01000076,
        Key_TrebleDown = 0x01000077,

        Key_MediaPlay  = 0x01000080,
        Key_MediaStop  = 0x01000081,
        Key_MediaPrevious  = 0x01000082,
#if defined(QT3_SUPPORT) &amp;&amp; !defined(Q_MOC_RUN)
        Key_MediaPrev  = Key_MediaPrevious,
#endif
        Key_MediaNext  = 0x01000083,
        Key_MediaRecord = 0x01000084,

        Key_HomePage  = 0x01000090,
        Key_Favorites  = 0x01000091,
        Key_Search  = 0x01000092,
        Key_Standby = 0x01000093,
        Key_OpenUrl = 0x01000094,

        Key_LaunchMail  = 0x010000a0,
        Key_LaunchMedia = 0x010000a1,
        Key_Launch0  = 0x010000a2,
        Key_Launch1  = 0x010000a3,
        Key_Launch2  = 0x010000a4,
        Key_Launch3  = 0x010000a5,
        Key_Launch4  = 0x010000a6,
        Key_Launch5  = 0x010000a7,
        Key_Launch6  = 0x010000a8,
        Key_Launch7  = 0x010000a9,
        Key_Launch8  = 0x010000aa,
        Key_Launch9  = 0x010000ab,
        Key_LaunchA  = 0x010000ac,
        Key_LaunchB  = 0x010000ad,
        Key_LaunchC  = 0x010000ae,
        Key_LaunchD  = 0x010000af,
        Key_LaunchE  = 0x010000b0,
        Key_LaunchF  = 0x010000b1,

        Key_MediaLast = 0x0100ffff,

        // Keypad navigation keys
        Key_Select = 0x01010000,
        Key_Yes = 0x01010001,
        Key_No = 0x01010002,

        // Device keys
        Key_Context1 = 0x01100000,
        Key_Context2 = 0x01100001,
        Key_Context3 = 0x01100002,
        Key_Context4 = 0x01100003,
        Key_Call = 0x01100004,
        Key_Hangup = 0x01100005,
        Key_Flip = 0x01100006,

        Key_unknown = 0x01ffffff
    };

    enum ArrowType {
        NoArrow,
        UpArrow,
        DownArrow,
        LeftArrow,
        RightArrow
    };

    enum PenStyle { // pen style
        NoPen,
        SolidLine,
        DashLine,
        DotLine,
        DashDotLine,
        DashDotDotLine,
        CustomDashLine,
        MPenStyle = 0x0f
    };

    enum PenCapStyle { // line endcap style
        FlatCap = 0x00,
        SquareCap = 0x10,
        RoundCap = 0x20,
        MPenCapStyle = 0x30
    };

    enum PenJoinStyle { // line join style
        MiterJoin = 0x00,
        BevelJoin = 0x40,
        RoundJoin = 0x80,
        MPenJoinStyle = 0xc0
    };

    enum BrushStyle { // brush style
        NoBrush,
        SolidPattern,
        Dense1Pattern,
        Dense2Pattern,
        Dense3Pattern,
        Dense4Pattern,
        Dense5Pattern,
        Dense6Pattern,
        Dense7Pattern,
        HorPattern,
        VerPattern,
        CrossPattern,
        BDiagPattern,
        FDiagPattern,
        DiagCrossPattern,
        LinearGradientPattern,
        RadialGradientPattern,
        ConicalGradientPattern,
        TexturePattern = 24
#if defined(QT3_SUPPORT) &amp;&amp; !defined(Q_MOC_RUN)
        , CustomPattern = TexturePattern
#endif
    };

#if defined(QT3_SUPPORT)
#if defined(Q_OS_MAC)
#ifndef qdoc
    typedef int MacintoshVersion;

    enum
#else
    enum MacintoshVersion
#endif
    {
        //Unknown
        MV_Unknown  = 0x0000,

        //Version numbers
        MV_9        = QSysInfo::MV_9,
        MV_10_DOT_0 = QSysInfo::MV_10_0,
        MV_10_DOT_1 = QSysInfo::MV_10_1,
        MV_10_DOT_2 = QSysInfo::MV_10_2,
        MV_10_DOT_3 = QSysInfo::MV_10_3,
        MV_10_DOT_4 = QSysInfo::MV_10_4,

        //Code names
        MV_CHEETAH = QSysInfo::MV_CHEETAH,
        MV_PUMA = QSysInfo::MV_PUMA,
        MV_JAGUAR = QSysInfo::MV_JAGUAR,
        MV_PANTHER = QSysInfo::MV_PANTHER,
        MV_TIGER = QSysInfo::MV_TIGER
    };
#endif // Q_OS_MAC

#if defined(Q_OS_WIN)
#ifndef qdoc
    typedef int WindowsVersion;

    enum
#else
    enum WindowsVersion
#endif
    {
        WV_32s = QSysInfo::WV_32s,
        WV_95 = QSysInfo::WV_95,
        WV_98 = QSysInfo::WV_98,
        WV_Me = QSysInfo::WV_Me,
        WV_DOS_based= QSysInfo::WV_DOS_based,

        WV_NT = QSysInfo::WV_NT,
        WV_2000 = QSysInfo::WV_2000,
        WV_XP = QSysInfo::WV_XP,
        WV_2003 = QSysInfo::WV_2003,
        WV_NT_based = QSysInfo::WV_NT_based,

        WV_CE = QSysInfo::WV_CE,
        WV_CENET = QSysInfo::WV_CENET,
        WV_CE_based = QSysInfo::WV_CE_based
    };
#endif // Q_OS_WIN
#endif // QT3_SUPPORT

    enum UIEffect {
        UI_General,
        UI_AnimateMenu,
        UI_FadeMenu,
        UI_AnimateCombo,
        UI_AnimateTooltip,
        UI_FadeTooltip,
        UI_AnimateToolBox
    };

    enum CursorShape {
        ArrowCursor,
        UpArrowCursor,
        CrossCursor,
        WaitCursor,
        IBeamCursor,
        SizeVerCursor,
        SizeHorCursor,
        SizeBDiagCursor,
        SizeFDiagCursor,
        SizeAllCursor,
        BlankCursor,
        SplitVCursor,
        SplitHCursor,
        PointingHandCursor,
        ForbiddenCursor,
        WhatsThisCursor,
        BusyCursor,
        LastCursor = BusyCursor,
        BitmapCursor = 24

#if defined(QT3_SUPPORT) &amp;&amp; !defined(Q_MOC_RUN)
        ,
        arrowCursor = ArrowCursor,
        upArrowCursor = UpArrowCursor,
        crossCursor = CrossCursor,
        waitCursor = WaitCursor,
        ibeamCursor = IBeamCursor,
        sizeVerCursor = SizeVerCursor,
        sizeHorCursor = SizeHorCursor,
        sizeBDiagCursor = SizeBDiagCursor,
        sizeFDiagCursor = SizeFDiagCursor,
        sizeAllCursor = SizeAllCursor,
        blankCursor = BlankCursor,
        splitVCursor = SplitVCursor,
        splitHCursor = SplitHCursor,
        pointingHandCursor = PointingHandCursor,
        forbiddenCursor = ForbiddenCursor,
        whatsThisCursor = WhatsThisCursor
#endif
    };

    enum TextFormat {
        PlainText,
        RichText,
        AutoText,
        LogText
    };

    enum AspectRatioMode {
        IgnoreAspectRatio,
        KeepAspectRatio,
        KeepAspectRatioByExpanding
#if defined(QT3_SUPPORT) &amp;&amp; !defined(Q_MOC_RUN)
        , ScaleFree = IgnoreAspectRatio,
        ScaleMin = KeepAspectRatio,
        ScaleMax = KeepAspectRatioByExpanding
#endif
    };
#ifdef QT3_SUPPORT
    typedef AspectRatioMode ScaleMode;
#endif

    enum AnchorAttribute {
        AnchorName,
        AnchorHref
    };

    enum DockWidgetArea {
        LeftDockWidgetArea = 0x1,
        RightDockWidgetArea = 0x2,
        TopDockWidgetArea = 0x4,
        BottomDockWidgetArea = 0x8,

        DockWidgetArea_Mask = 0xf,
        AllDockWidgetAreas = DockWidgetArea_Mask
    };
    enum {
        NDockWidgetAreas = 4
    };

    Q_DECLARE_FLAGS(DockWidgetAreas, DockWidgetArea)

    enum ToolBarArea {
        LeftToolBarArea = 0x1,
        RightToolBarArea = 0x2,
        TopToolBarArea = 0x4,
        BottomToolBarArea = 0x8,

        ToolBarArea_Mask = 0xf,
        AllToolBarAreas = ToolBarArea_Mask
    };

    enum {
        NToolBarAreas = 4
    };

    Q_DECLARE_FLAGS(ToolBarAreas, ToolBarArea)

#ifdef QT3_SUPPORT
    enum Dock {
        DockUnmanaged,
        DockTornOff,
        DockTop,
        DockBottom,
        DockRight,
        DockLeft,
        DockMinimized
        ,
        Unmanaged = DockUnmanaged,
        TornOff = DockTornOff,
        Top = DockTop,
        Bottom = DockBottom,
        Right = DockRight,
        Left = DockLeft,
        Minimized = DockMinimized
    };
    // compatibility
    typedef Dock ToolBarDock;
#endif

    enum DateFormat {
        TextDate,      // default Qt
        ISODate,       // ISO 8601
        LocalDate      // locale dependent
    };

    enum TimeSpec {
        LocalTime,
        UTC
    };

    enum DayOfWeek {
        Monday = 1,
        Tuesday = 2,
        Wednesday = 3,
        Thursday = 4,
        Friday = 5,
        Saturday = 6,
        Sunday = 7
    };

    enum ScrollBarPolicy {
        ScrollBarAsNeeded,
        ScrollBarAlwaysOff,
        ScrollBarAlwaysOn
    };

#ifdef QT3_SUPPORT
    enum BackgroundMode {
        FixedColor,
        FixedPixmap,
        NoBackground,
        PaletteForeground,
        PaletteButton,
        PaletteLight,
        PaletteMidlight,
        PaletteDark,
        PaletteMid,
        PaletteText,
        PaletteBrightText,
        PaletteBase,
        PaletteBackground,
        PaletteShadow,
        PaletteHighlight,
        PaletteHighlightedText,
        PaletteButtonText,
        PaletteLink,
        PaletteLinkVisited,
        X11ParentRelative
    };
#endif

    enum CaseSensitivity {
        CaseInsensitive,
        CaseSensitive
    };

    enum Corner {
        TopLeftCorner = 0x00000,
        TopRightCorner = 0x00001,
        BottomLeftCorner = 0x00002,
        BottomRightCorner = 0x00003
#if defined(QT3_SUPPORT) &amp;&amp; !defined(Q_MOC_RUN)
        ,TopLeft = TopLeftCorner,
        TopRight = TopRightCorner,
        BottomLeft = BottomLeftCorner,
        BottomRight = BottomRightCorner
#endif
    };

    enum ConnectionType {
        AutoConnection,
        DirectConnection,
        QueuedConnection,
        AutoCompatConnection
    };

    enum ShortcutContext {
        WidgetShortcut,
        WindowShortcut,
        ApplicationShortcut
    };

    enum FillRule {
        OddEvenFill,
        WindingFill
    };

    enum ClipOperation {
        NoClip,
        ReplaceClip,
        IntersectClip,
        UniteClip
    };

    enum TransformationMode {
        FastTransformation,
        SmoothTransformation
    };

    enum FocusReason {
        MouseFocusReason,
        TabFocusReason,
        BacktabFocusReason,
        ActiveWindowFocusReason,
        PopupFocusReason,
        ShortcutFocusReason,
        MenuBarFocusReason,
        OtherFocusReason,
        NoFocusReason
    };

    enum ContextMenuPolicy {
        NoContextMenu,
        DefaultContextMenu,
        ActionsContextMenu,
        CustomContextMenu
    };

    enum InputMethodQuery {
        ImMicroFocus,
        ImFont,
        ImCursorPosition,
        ImSurroundingText,
        ImCurrentSelection
    };

    enum ToolButtonStyle {
        ToolButtonIconOnly,
        ToolButtonTextOnly,
        ToolButtonTextBesideIcon,
        ToolButtonTextUnderIcon
    };

    enum LayoutDirection {
        LeftToRight,
        RightToLeft
    };

    enum DropAction {
        CopyAction = 0x1,
        MoveAction = 0x2,
        LinkAction = 0x4,
        ActionMask = 0xff,
        TargetMoveAction = 0x8002,
        IgnoreAction = 0x0
    };
    Q_DECLARE_FLAGS(DropActions, DropAction)

    enum CheckState {
        Unchecked,
        PartiallyChecked,
        Checked
    };

    enum ItemDataRole {
        DisplayRole = 0,
        DecorationRole = 1,
        EditRole = 2,
        ToolTipRole = 3,
        StatusTipRole = 4,
        WhatsThisRole = 5,
        // Metadata
        FontRole = 6,
        TextAlignmentRole = 7,
        BackgroundColorRole = 8,
        TextColorRole = 9,
        CheckStateRole = 10,
        // Accessibility
        AccessibleTextRole = 11,
        AccessibleDescriptionRole = 12,
        // More Metadata
        SizeHintRole = 13,
        // Reserved
        UserRole = 32
    };

    enum ItemFlag {
        ItemIsSelectable = 1,
        ItemIsEditable = 2,
        ItemIsDragEnabled = 4,
        ItemIsDropEnabled = 8,
        ItemIsUserCheckable = 16,
        ItemIsEnabled = 32,
        ItemIsTristate = 64
    };
    Q_DECLARE_FLAGS(ItemFlags, ItemFlag)

    enum MatchFlag {
        MatchExactly = 0,
        MatchContains = 1,
        MatchStartsWith = 2,
        MatchEndsWith = 3,
        MatchRegExp = 4,
        MatchWildcard = 5,
        MatchCaseSensitive = 16,
        MatchWrap = 32,
        MatchRecursive = 64
    };
    Q_DECLARE_FLAGS(MatchFlags, MatchFlag)

#if defined(Q_WS_MAC)
    typedef void * HANDLE;
#elif defined(Q_WS_WIN)
    typedef void *HANDLE;
#elif defined(Q_WS_X11)
    typedef unsigned long HANDLE;
#elif defined(Q_WS_QWS)
    typedef void * HANDLE;
#endif
    typedef WindowFlags WFlags;

    enum WindowModality {
        NonModal,
        WindowModal,
        ApplicationModal
    };

}
#ifdef Q_MOC_RUN
 ;
#endif


Q_DECLARE_OPERATORS_FOR_FLAGS(Qt::MouseButtons)
Q_DECLARE_OPERATORS_FOR_FLAGS(Qt::Orientations)
Q_DECLARE_OPERATORS_FOR_FLAGS(Qt::KeyboardModifiers)
Q_DECLARE_OPERATORS_FOR_FLAGS(Qt::WindowFlags)
Q_DECLARE_OPERATORS_FOR_FLAGS(Qt::Alignment)
Q_DECLARE_OPERATORS_FOR_FLAGS(Qt::ImageConversionFlags)
Q_DECLARE_OPERATORS_FOR_FLAGS(Qt::DockWidgetAreas)
Q_DECLARE_OPERATORS_FOR_FLAGS(Qt::ToolBarAreas)
Q_DECLARE_OPERATORS_FOR_FLAGS(Qt::WindowStates)
Q_DECLARE_OPERATORS_FOR_FLAGS(Qt::DropActions)
Q_DECLARE_OPERATORS_FOR_FLAGS(Qt::ItemFlags)
Q_DECLARE_OPERATORS_FOR_FLAGS(Qt::MatchFlags)

class Q_CORE_EXPORT QInternal {
public:
    enum PaintDeviceFlags {
        UnknownDevice = 0x00,
        Widget        = 0x01,
        Pixmap        = 0x02,
        Image         = 0x03,
        Printer       = 0x04,
        Picture       = 0x05,
        Pbuffer       = 0x06
    };
    enum RelayoutType {
        RelayoutNormal,
        RelayoutDragging,
        RelayoutDropped
    };
};

#ifdef QT3_SUPPORT
typedef qint32 QCOORD;                                // coordinate type
enum {
    QCOORD_MAX =  2147483647,
    QCOORD_MIN = -QCOORD_MAX - 1
};
#endif
#endif // QNAMESPACE_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtCore/qobject.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QOBJECT_H
#define QOBJECT_H

#ifndef QT_NO_QOBJECT

#include &lt;QtCore/qobjectdefs.h>
#include &lt;QtCore/qstring.h>
#include &lt;QtCore/qbytearray.h>
#include &lt;QtCore/qlist.h>
#ifdef QT_INCLUDE_COMPAT
#include &lt;QtCore/qcoreevent.h>
#endif

QT_MODULE(Core)

class QEvent;
class QTimerEvent;
class QChildEvent;
struct QMetaObject;
class QVariant;
class QObjectPrivate;
class QObject;
class QThread;
class QWidget;
#ifndef QT_NO_REGEXP
class QRegExp;
#endif
#ifndef QT_NO_USERDATA
class QObjectUserData;
#endif

typedef QList&lt;QObject*> QObjectList;

#if defined Q_CC_MSVC &amp;&amp; _MSC_VER &lt; 1300
template&lt;typename T> inline T qFindChild(const QObject *o, const QString &amp;name = QString(), T = 0);
template&lt;typename T> inline QList&lt;T> qFindChildren(const QObject *o, const QString &amp;name = QString(), T = 0);
# ifndef QT_NO_REGEXP
template&lt;typename T> inline QList&lt;T> qFindChildren(const QObject *o, const QRegExp &amp;re, T = 0);
# endif
#else
template&lt;typename T> inline T qFindChild(const QObject *, const QString &amp; = QString());
template&lt;typename T> inline QList&lt;T> qFindChildren(const QObject *, const QString &amp; = QString());
# ifndef QT_NO_REGEXP
template&lt;typename T> inline QList&lt;T> qFindChildren(const QObject *, const QRegExp &amp;);
# endif
#endif

class QObjectData {
public:
    virtual ~QObjectData() = 0;
    QObject *q_ptr;
    QObject *parent;
    QObjectList children;

    uint isWidget : 1;
    uint pendTimer : 1;
    uint blockSig : 1;
    uint wasDeleted : 1;
    uint ownObjectName : 1;
    uint sendChildEvents : 1;
    uint receiveChildEvents : 1;
    uint unused : 25;
    int postedEvents;
#ifdef QT3_SUPPORT
    int postedChildInsertedEvents;
#else
    int reserved;
#endif
};


class Q_CORE_EXPORT QObject
{
    Q_OBJECT
    Q_PROPERTY(QString objectName READ objectName WRITE setObjectName)
    Q_DECLARE_PRIVATE(QObject)

public:
    explicit QObject(QObject *parent=0);
    virtual ~QObject();

    virtual bool event(QEvent *);
    virtual bool eventFilter(QObject *, QEvent *);

#ifdef qdoc
    static QString tr(const char *, const char *);
    static QString trUtf8(const char *, const char *);
    virtual const QMetaObject *metaObject() const;
#endif
#ifdef QT_NO_TRANSLATION
    static QString tr(const char *sourceText, const char * = 0)
        { return QString::fromLatin1(sourceText); }
#ifndef QT_NO_TEXTCODEC
    static QString trUtf8(const char *sourceText, const char * = 0)
        { return QString::fromUtf8(sourceText); }
#endif
#endif //QT_NO_TRANSLATION

    QString objectName() const;
    void setObjectName(const QString &amp;name);

    inline bool isWidgetType() const { return d_ptr->isWidget; }

    inline bool signalsBlocked() const { return d_ptr->blockSig; }
    bool blockSignals(bool b);

    QThread *thread() const;
    void moveToThread(QThread *thread);

    int startTimer(int interval);
    void killTimer(int id);

#ifndef QT_NO_MEMBER_TEMPLATES
    template&lt;typename T>
    inline T findChild(const QString &amp;name = QString()) const
    { return qFindChild&lt;T>(this, name); }

    template&lt;typename T>
    inline QList&lt;T> findChildren(const QString &amp;name = QString()) const
    { return qFindChildren&lt;T>(this, name); }

#ifndef QT_NO_REGEXP
    template&lt;typename T>
    inline QList&lt;T> findChildren(const QRegExp &amp;re) const
    { return qFindChildren&lt;T>(this, re); }
#endif
#endif

#ifdef QT3_SUPPORT
    QT3_SUPPORT QObject *child(const char *objName, const char *inheritsClass = 0,
                   bool recursiveSearch = true) const;
    QT3_SUPPORT QObjectList queryList(const char *inheritsClass = 0,
                          const char *objName = 0,
                          bool regexpMatch = true,
                          bool recursiveSearch = true) const;
#endif
    inline const QObjectList &amp;children() const { return d_ptr->children; }

    void setParent(QObject *);
    void installEventFilter(QObject *);
    void removeEventFilter(QObject *);


    static bool connect(const QObject *sender, const char *signal,
                        const QObject *receiver, const char *member, Qt::ConnectionType =
#ifdef QT3_SUPPORT
                        Qt::AutoCompatConnection
#else
                        Qt::AutoConnection
#endif
        );
    inline bool connect(const QObject *sender, const char *signal,
                        const char *member, Qt::ConnectionType type =
#ifdef QT3_SUPPORT
                        Qt::AutoCompatConnection
#else
                        Qt::AutoConnection
#endif
        ) const;

    static bool disconnect(const QObject *sender, const char *signal,
                           const QObject *receiver, const char *member);
    inline bool disconnect(const char *signal = 0,
                           const QObject *receiver = 0, const char *member = 0)
        { return disconnect(this, signal, receiver, member); }
    inline bool disconnect(const QObject *receiver, const char *member = 0)
        { return disconnect(this, 0, receiver, member); }

    void dumpObjectTree();
    void dumpObjectInfo();

#ifndef QT_NO_PROPERTIES
    bool setProperty(const char *name, const QVariant &amp;value);
    QVariant property(const char *name) const;
#endif // QT_NO_PROPERTIES

#ifndef QT_NO_USERDATA
    static uint registerUserData();
    void setUserData(uint id, QObjectUserData* data);
    QObjectUserData* userData(uint id) const;
#endif // QT_NO_USERDATA

Q_SIGNALS:
    void destroyed(QObject * = 0);

public:
    inline QObject *parent() const { return d_ptr->parent; }

    inline bool inherits(const char *classname) const
        { return const_cast&lt;QObject *>(this)->qt_metacast(classname) != 0; }

public Q_SLOTS:
    void deleteLater();

protected:
    QObject *sender() const;
    int receivers(const char* signal) const;

    virtual void timerEvent(QTimerEvent *);
    virtual void childEvent(QChildEvent *);
    virtual void customEvent(QEvent *);

    virtual void connectNotify(const char *signal);
    virtual void disconnectNotify(const char *signal);

#ifdef QT3_SUPPORT
public:
    QT3_SUPPORT_CONSTRUCTOR QObject(QObject *parent, const char *name);
    inline QT3_SUPPORT void insertChild(QObject *o)
        { if (o) o->setParent(this); }
    inline QT3_SUPPORT void removeChild(QObject *o)
        { if (o) o->setParent(0); }
    inline QT3_SUPPORT bool isA(const char *classname) const
        { return qstrcmp(classname, metaObject()->className()) == 0; }
    inline QT3_SUPPORT const char *className() const { return metaObject()->className(); }
    inline QT3_SUPPORT const char *name() const { return objectName().latin1_helper(); }
    inline QT3_SUPPORT const char *name(const char *defaultName) const
        { QString s = objectName(); return s.isEmpty()?defaultName:s.latin1_helper(); }
    inline QT3_SUPPORT void setName(const char *name) { setObjectName(QLatin1String(name)); }
protected:
    inline QT3_SUPPORT bool checkConnectArgs(const char *signal,
                                  const QObject *,
                                  const char *member)
        { return QMetaObject::checkConnectArgs(signal, member); }
    static inline QT3_SUPPORT QByteArray normalizeSignalSlot(const char *signalSlot)
        { return QMetaObject::normalizedSignature(signalSlot); }
#endif

protected:
    QObject(QObjectPrivate &amp;dd, QObject *parent = 0);

protected:
    QObjectData *d_ptr;

    static const QMetaObject staticQtMetaObject;

    friend struct QMetaObject;
    friend class QApplication;
    friend class QApplicationPrivate;
    friend class QCoreApplication;
    friend class QCoreApplicationPrivate;
    friend class QWidget;
    friend class QThreadData;

private:
    Q_DISABLE_COPY(QObject)
    Q_PRIVATE_SLOT(d_func(), void reregisterTimers(void *))
};

inline bool QObject::connect(const QObject *asender, const char *asignal,
                             const char *amember, Qt::ConnectionType atype) const
{ return connect(asender, asignal, this, amember, atype); }

#ifndef QT_NO_USERDATA
class Q_CORE_EXPORT QObjectUserData {
public:
    virtual ~QObjectUserData();
};
#endif


Q_CORE_EXPORT void qt_qFindChildren_helper(const QObject *parent, const QString &amp;name, const QRegExp *re,
                         const QMetaObject &amp;mo, QList&lt;void*> *list);
Q_CORE_EXPORT QObject *qt_qFindChild_helper(const QObject *parent, const QString &amp;name, const QMetaObject &amp;mo);


#if defined Q_CC_MSVC &amp;&amp; _MSC_VER &lt; 1300

template&lt;typename T>
inline T qFindChild(const QObject *o, const QString &amp;name, T)
{ return static_cast&lt;T>(qt_qFindChild_helper(o, name, ((T)0)->staticMetaObject)); }

template&lt;typename T>
inline QList&lt;T> qFindChildren(const QObject *o, const QString &amp;name, T)
{
    QList&lt;T> list;
    qt_qFindChildren_helper(o, name, 0, ((T)0)->staticMetaObject,
                        reinterpret_cast&lt;QList&lt;void *>*>(&amp;list));
    return list;
}

template&lt;typename T>
inline T qFindChild(const QObject *o, const QString &amp;name)
{ return qFindChild&lt;T>(o, name, T(0)); }

template&lt;typename T>
inline T qFindChild(const QObject *o)
{ return qFindChild&lt;T>(o, QString(), T(0)); }

template&lt;typename T>
inline QList&lt;T> qFindChildren(const QObject *o, const QString &amp;name)
{ return qFindChildren&lt;T>(o, name, T(0)); }

template&lt;typename T>
inline QList&lt;T> qFindChildren(const QObject *o)
{ return qFindChildren&lt;T>(o, QString(), T(0)); }

#ifndef QT_NO_REGEXP
template&lt;typename T>
inline QList&lt;T> qFindChildren(const QObject *o, const QRegExp &amp;re, T)
{
    QList&lt;T> list;
    qt_qFindChildren_helper(o, 0, &amp;re, ((T)0)->staticMetaObject,
                        reinterpret_cast&lt;QList&lt;void*>*>(&amp;list));
    return list;
}

template&lt;typename T>
inline QList&lt;T> qFindChildren(const QObject *o, const QRegExp &amp;re)
{ return qFindChildren&lt;T>(o, re, T(0)); }

#endif

template &lt;class T> inline T qobject_cast_helper(QObject *object, T)
{ return static_cast&lt;T>(((T)0)->staticMetaObject.cast(object)); }

template &lt;class T> inline T qobject_cast_helper(const QObject *object, T)
{ return static_cast&lt;T>(const_cast&lt;const QObject *>(((T)0)->staticMetaObject.cast(const_cast&lt;QObject *>(object)))); }

template &lt;class T>
inline T qobject_cast(QObject *object)
{ return qobject_cast_helper&lt;T>(object, T(0)); }

template &lt;class T>
inline T qobject_cast(const QObject *object)
{ return qobject_cast_helper&lt;T>(object, T(0)); }

#define Q_DECLARE_INTERFACE(IFace, IId) \
template &lt;> inline IFace *qobject_cast_helper&lt;IFace *>(QObject *object, IFace *) \
{ return (IFace *)(object ? object->qt_metacast(IId) : 0); } \
template &lt;> inline IFace *qobject_cast_helper&lt;IFace *>(const QObject *object, IFace *) \
{ return (IFace *)(object ? const_cast&lt;QObject *>(object)->qt_metacast(IId) : 0); }

#else

template&lt;typename T>
inline T qFindChild(const QObject *o, const QString &amp;name)
{ return static_cast&lt;T>(qt_qFindChild_helper(o, name, reinterpret_cast&lt;T>(0)->staticMetaObject)); }

template&lt;typename T>
inline QList&lt;T> qFindChildren(const QObject *o, const QString &amp;name)
{
    QList&lt;T> list;
    qt_qFindChildren_helper(o, name, 0, reinterpret_cast&lt;T>(0)->staticMetaObject,
                         reinterpret_cast&lt;QList&lt;void *>*>(&amp;list));
    return list;
}

#ifndef QT_NO_REGEXP
template&lt;typename T>
inline QList&lt;T> qFindChildren(const QObject *o, const QRegExp &amp;re)
{
    QList&lt;T> list;
    qt_qFindChildren_helper(o, 0, &amp;re, reinterpret_cast&lt;T>(0)->staticMetaObject,
                        reinterpret_cast&lt;QList&lt;void*>*>(&amp;list));
    return list;
}
#endif

template &lt;class T>
inline T qobject_cast(QObject *object)
{ return static_cast&lt;T>(reinterpret_cast&lt;T>(0)->staticMetaObject.cast(object)); }

template &lt;class T>
inline T qobject_cast(const QObject *object)
{ return static_cast&lt;T>(const_cast&lt;const QObject *>(reinterpret_cast&lt;T>(0)->staticMetaObject.cast(const_cast&lt;QObject *>(object)))); }


#define Q_DECLARE_INTERFACE(IFace, IId) \
template &lt;> inline IFace *qobject_cast&lt;IFace *>(QObject *object) \
{ return reinterpret_cast&lt;IFace *>((object ? object->qt_metacast(IId) : 0)); } \
template &lt;> inline IFace *qobject_cast&lt;IFace *>(const QObject *object) \
{ return reinterpret_cast&lt;IFace *>((object ? const_cast&lt;QObject *>(object)->qt_metacast(IId) : 0)); }

#endif

#ifndef QT_NO_DEBUG_STREAM
Q_CORE_EXPORT QDebug operator&lt;&lt;(QDebug, const QObject *);
#endif

#endif

#endif // QOBJECT_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtCore/qobjectcleanuphandler.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QOBJECTCLEANUPHANDLER_H
#define QOBJECTCLEANUPHANDLER_H

#include &lt;QtCore/qobject.h>

QT_MODULE(Core)

class Q_CORE_EXPORT QObjectCleanupHandler : public QObject
{
    Q_OBJECT

public:
    QObjectCleanupHandler();
    ~QObjectCleanupHandler();

    QObject* add(QObject* object);
    void remove(QObject *object);
    bool isEmpty() const;
    void clear();

private:
    // ### move into d pointer
    QObjectList cleanupObjects;

private Q_SLOTS:
    void objectDestroyed(QObject *);
};

#endif // QOBJECTCLEANUPHANDLER_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtCore/qobjectdefs.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QOBJECTDEFS_H
#define QOBJECTDEFS_H

#include &lt;QtCore/qnamespace.h>

QT_MODULE(Core)

class QString;

class QByteArray;

#ifndef Q_MOC_OUTPUT_REVISION
#define Q_MOC_OUTPUT_REVISION 59
#endif

// The following macros are our "extensions" to C++
// They are used, strictly speaking, only by the moc.

#ifndef QT_MOC_CPP
# if defined(QT_NO_KEYWORDS)
#  define QT_NO_EMIT
# else
#   define slots
#   define signals protected
# endif
# define Q_SLOTS
# define Q_SIGNALS protected
# define Q_PRIVATE_SLOT(d, signature)
#ifndef QT_NO_EMIT
# define emit
#endif
#define Q_CLASSINFO(name, value)
#define Q_INTERFACES(x)
#define Q_PROPERTY(text)
#define Q_OVERRIDE(text)
#define Q_ENUMS(x)
#define Q_FLAGS(x)
#ifdef QT3_SUPPORT
# define Q_SETS(x)
#endif
#define Q_SCRIPTABLE
#define Q_INVOKABLE

#ifndef QT_NO_TRANSLATION
# ifndef QT_NO_TEXTCODEC
// full set of tr functions
#  define QT_TR_FUNCTIONS \
    static inline QString tr(const char *s, const char *c = 0) \
        { return staticMetaObject.tr(s, c); } \
    static inline QString trUtf8(const char *s, const char *c = 0) \
        { return staticMetaObject.trUtf8(s, c); }
# else
// no QTextCodec, no utf8
#  define QT_TR_FUNCTIONS \
    static inline QString tr(const char *s, const char *c = 0) \
        { return staticMetaObject.tr(s, c); }
# endif
#else
// inherit the ones from QObject
# define QT_TR_FUNCTIONS
#endif

/* tmake ignore Q_OBJECT */
#define Q_OBJECT \
public: \
    static const QMetaObject staticMetaObject; \
    virtual const QMetaObject *metaObject() const; \
    virtual void *qt_metacast(const char *); \
    QT_TR_FUNCTIONS \
    virtual int qt_metacall(QMetaObject::Call, int, void **); \
private:
/* tmake ignore Q_OBJECT */
#define Q_OBJECT_FAKE Q_OBJECT
/* tmake ignore Q_GADGET */
#define Q_GADGET \
public: \
    static const QMetaObject staticMetaObject; \
private:
#else // QT_MOC_CPP
#define slots slots
#define signals signals
#define Q_SLOTS Q_SLOTS
#define Q_SIGNALS Q_SIGNALS
#define Q_CLASSINFO(name, value) Q_CLASSINFO(name, value)
#define Q_PROPERTY(text) Q_PROPERTY(text)
#define Q_OVERRIDE(text) Q_OVERRIDE(text)
#define Q_ENUMS(x) Q_ENUMS(x)
#define Q_FLAGS(x) Q_FLAGS(x)
#ifdef QT3_SUPPORT
# define Q_SETS(x) Q_SETS(x)
#endif
 /* tmake ignore Q_OBJECT */
#define Q_OBJECT Q_OBJECT
 /* tmake ignore Q_OBJECT */
#define Q_OBJECT_FAKE Q_OBJECT_FAKE
 /* tmake ignore Q_GADGET */
#define Q_GADGET Q_GADGET
#define Q_SCRIPTABLE Q_SCRIPTABLE
#define Q_INVOKABLE Q_INVOKABLE
#endif //QT_MOC_CPP

// macro for onaming members
#ifdef METHOD
#undef METHOD
#endif
#ifdef SLOT
#undef SLOT
#endif
#ifdef SIGNAL
#undef SIGNAL
#endif

#define METHOD(a)        "0"#a
#define SLOT(a)                "1"#a
#define SIGNAL(a)        "2"#a

#ifdef QT3_SUPPORT
#define METHOD_CODE        0                        // member type codes
#define SLOT_CODE        1
#define SIGNAL_CODE        2
#endif

#define QMETHOD_CODE        0                        // member type codes
#define QSLOT_CODE        1
#define QSIGNAL_CODE        2

#define Q_ARG(type, data) QArgument&lt;type>(#type, data)
#define Q_RETURN_ARG(type, data) QReturnArgument&lt;type>(#type, data)

class QObject;
class QMetaMethod;
class QMetaEnum;
class QMetaProperty;
class QMetaClassInfo;


class Q_CORE_EXPORT QGenericArgument
{
public:
    inline QGenericArgument(const char *aName = 0, const void *aData = 0)
        : _data(aData), _name(aName) {}
    inline void *data() const { return const_cast&lt;void *>(_data); }
    inline const char *name() const { return _name; }

private:
    const void *_data;
    const char *_name;
};

class Q_CORE_EXPORT QGenericReturnArgument: public QGenericArgument
{
public:
    inline QGenericReturnArgument(const char *aName = 0, void *aData = 0)
        : QGenericArgument(aName, aData)
        {}
};

template &lt;class T>
class QArgument: public QGenericArgument
{
public:
    inline QArgument(const char *aName, const T &amp;aData)
        : QGenericArgument(aName, static_cast&lt;const void *>(&amp;aData))
        {}
};


template&lt;class T>
class QReturnArgument: public QGenericReturnArgument
{
public:
    inline QReturnArgument(const char *aName, T &amp;aData)
        : QGenericReturnArgument(aName, static_cast&lt;void *>(&amp;aData))
        {}
};

struct Q_CORE_EXPORT QMetaObject
{
    const char *className() const;
    const QMetaObject *superClass() const;

    QObject *cast(QObject *obj) const;

#ifndef QT_NO_TRANSLATION
    QString tr(const char *s, const char *c) const;
    QString trUtf8(const char *s, const char *c) const;
#endif // QT_NO_TRANSLATION

    int methodOffset() const;
    int enumeratorOffset() const;
    int propertyOffset() const;
    int classInfoOffset() const;

    int methodCount() const;
    int enumeratorCount() const;
    int propertyCount() const;
    int classInfoCount() const;

    int indexOfMethod(const char *method) const;
    int indexOfSignal(const char *signal) const;
    int indexOfSlot(const char *slot) const;
    int indexOfEnumerator(const char *name) const;
    int indexOfProperty(const char *name) const;
    int indexOfClassInfo(const char *name) const;

    QMetaMethod method(int index) const;
    QMetaEnum enumerator(int index) const;
    QMetaProperty property(int index) const;
    QMetaClassInfo classInfo(int index) const;

    static bool checkConnectArgs(const char *signal, const char *method);
    static QByteArray normalizedSignature(const char *method);

    // internal index-based connect
    static bool connect(const QObject *sender, int signal_index,
                        const QObject *receiver, int method_index,
                        int type = 0, int *types = 0);
    // internal index-based disconnect
    static bool disconnect(const QObject *sender, int signal_index,
                           const QObject *receiver, int method_index);
    // internal slot-name based connect
    static void connectSlotsByName(QObject *o);

    // internal index-based signal activation
    static void activate(QObject *sender, int signal_index, void **argv);
    static void activate(QObject *sender, int from_signal_index, int to_signal_index, void **argv);
    static void activate(QObject *sender, const QMetaObject *, int local_signal_index, void **argv);
    static void activate(QObject *sender, const QMetaObject *, int from_local_signal_index, int to_local_signal_index, void **argv);
    // internal guarded pointers
    static void addGuard(QObject **ptr);
    static void removeGuard(QObject **ptr);
    static void changeGuard(QObject **ptr, QObject *o);

    static bool invokeMethod(QObject *obj, const char *member,
                             Qt::ConnectionType,
                             QGenericReturnArgument ret,
                             QGenericArgument val0 = QGenericArgument(0),
                             QGenericArgument val1 = QGenericArgument(),
                             QGenericArgument val2 = QGenericArgument(),
                             QGenericArgument val3 = QGenericArgument(),
                             QGenericArgument val4 = QGenericArgument(),
                             QGenericArgument val5 = QGenericArgument(),
                             QGenericArgument val6 = QGenericArgument(),
                             QGenericArgument val7 = QGenericArgument(),
                             QGenericArgument val8 = QGenericArgument(),
                             QGenericArgument val9 = QGenericArgument());

    static inline bool invokeMethod(QObject *obj, const char *member,
                             QGenericReturnArgument ret,
                             QGenericArgument val0 = QGenericArgument(0),
                             QGenericArgument val1 = QGenericArgument(),
                             QGenericArgument val2 = QGenericArgument(),
                             QGenericArgument val3 = QGenericArgument(),
                             QGenericArgument val4 = QGenericArgument(),
                             QGenericArgument val5 = QGenericArgument(),
                             QGenericArgument val6 = QGenericArgument(),
                             QGenericArgument val7 = QGenericArgument(),
                             QGenericArgument val8 = QGenericArgument(),
                             QGenericArgument val9 = QGenericArgument())
    {
        return invokeMethod(obj, member, Qt::AutoConnection, ret, val0, val1, val2, val3,
                val4, val5, val6, val7, val8, val9);
    }

    static inline bool invokeMethod(QObject *obj, const char *member,
                             Qt::ConnectionType type,
                             QGenericArgument val0 = QGenericArgument(0),
                             QGenericArgument val1 = QGenericArgument(),
                             QGenericArgument val2 = QGenericArgument(),
                             QGenericArgument val3 = QGenericArgument(),
                             QGenericArgument val4 = QGenericArgument(),
                             QGenericArgument val5 = QGenericArgument(),
                             QGenericArgument val6 = QGenericArgument(),
                             QGenericArgument val7 = QGenericArgument(),
                             QGenericArgument val8 = QGenericArgument(),
                             QGenericArgument val9 = QGenericArgument())
    {
        return invokeMethod(obj, member, type, QGenericReturnArgument(), val0, val1, val2,
                                 val3, val4, val5, val6, val7, val8, val9);
    }


    static inline bool invokeMethod(QObject *obj, const char *member,
                             QGenericArgument val0 = QGenericArgument(0),
                             QGenericArgument val1 = QGenericArgument(),
                             QGenericArgument val2 = QGenericArgument(),
                             QGenericArgument val3 = QGenericArgument(),
                             QGenericArgument val4 = QGenericArgument(),
                             QGenericArgument val5 = QGenericArgument(),
                             QGenericArgument val6 = QGenericArgument(),
                             QGenericArgument val7 = QGenericArgument(),
                             QGenericArgument val8 = QGenericArgument(),
                             QGenericArgument val9 = QGenericArgument())
    {
        return invokeMethod(obj, member, Qt::AutoConnection, QGenericReturnArgument(), val0,
                val1, val2, val3, val4, val5, val6, val7, val8, val9);
    }

    enum Call {
        InvokeMetaMethod,
        ReadProperty,
        WriteProperty,
        ResetProperty,
        QueryPropertyDesignable,
        QueryPropertyScriptable,
        QueryPropertyStored,
        QueryPropertyEditable,
        QueryPropertyUser
    };

#ifdef QT3_SUPPORT
    QT3_SUPPORT const char *superClassName() const;
#endif

    struct { // private data
        const QMetaObject *superdata;
        const char *stringdata;
        const uint *data;
        const QMetaObject **extradata;
    } d;
};

inline const char *QMetaObject::className() const
{ return d.stringdata; }

inline const QMetaObject *QMetaObject::superClass() const
{ return d.superdata; }

#ifdef QT3_SUPPORT
inline const char *QMetaObject::superClassName() const
{ return d.superdata ? d.superdata->className() : 0; }
#endif

#endif // QOBJECTDEFS_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtCore/qpair.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QPAIR_H
#define QPAIR_H

#include &lt;QtCore/qdatastream.h>

QT_MODULE(Core)

template &lt;class T1, class T2>
struct QPair
{
    typedef T1 first_type;
    typedef T2 second_type;

    QPair() : first(T1()), second(T2()) {}
    QPair(const T1 &amp;t1, const T2 &amp;t2) : first(t1), second(t2) {}

    QPair &amp;operator=(const QPair &amp;other)
    { first = other.first; second = other.second; return *this; }

    T1 first;
    T2 second;
};

template &lt;class T1, class T2>
Q_INLINE_TEMPLATE bool operator==(const QPair&lt;T1, T2> &amp;p1, const QPair&lt;T1, T2> &amp;p2)
{ return p1.first == p2.first &amp;&amp; p1.second == p2.second; }

template &lt;class T1, class T2>
Q_INLINE_TEMPLATE bool operator!=(const QPair&lt;T1, T2> &amp;p1, const QPair&lt;T1, T2> &amp;p2)
{ return !(p1 == p2); }

template &lt;class T1, class T2>
Q_INLINE_TEMPLATE bool operator&lt;(const QPair&lt;T1, T2> &amp;p1, const QPair&lt;T1, T2> &amp;p2)
{
    return p1.first &lt; p2.first || (!(p2.first &lt; p1.first) &amp;&amp; p1.second &lt; p2.second);
}

template &lt;class T1, class T2>
Q_INLINE_TEMPLATE bool operator>(const QPair&lt;T1, T2> &amp;p1, const QPair&lt;T1, T2> &amp;p2)
{
    return p2 &lt; p1;
}

template &lt;class T1, class T2>
Q_INLINE_TEMPLATE bool operator&lt;=(const QPair&lt;T1, T2> &amp;p1, const QPair&lt;T1, T2> &amp;p2)
{
    return !(p2 &lt; p1);
}

template &lt;class T1, class T2>
Q_INLINE_TEMPLATE bool operator>=(const QPair&lt;T1, T2> &amp;p1, const QPair&lt;T1, T2> &amp;p2)
{
    return !(p1 &lt; p2);
}

template &lt;class T1, class T2>
Q_OUTOFLINE_TEMPLATE QPair&lt;T1, T2> qMakePair(const T1 &amp;x, const T2 &amp;y)
{
    return QPair&lt;T1, T2>(x, y);
}

#ifndef QT_NO_DATASTREAM
template &lt;class T1, class T2>
inline QDataStream&amp; operator>>(QDataStream&amp; s, QPair&lt;T1, T2>&amp; p)
{
    s >> p.first >> p.second;
    return s;
}

template &lt;class T1, class T2>
inline QDataStream&amp; operator&lt;&lt;(QDataStream&amp; s, const QPair&lt;T1, T2>&amp; p)
{
    s &lt;&lt; p.first &lt;&lt; p.second;
    return s;
}
#endif

#endif // QPAIR_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtCore/qplugin.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QPLUGIN_H
#define QPLUGIN_H

#include &lt;QtCore/qobject.h>
#include &lt;QtCore/qpointer.h>

QT_MODULE(Core)

#ifndef Q_EXTERN_C
#  ifdef __cplusplus
#    define Q_EXTERN_C extern "C"
#  else
#    define Q_EXTERN_C extern
#  endif
#endif

typedef QObject *(*QtPluginInstanceFunction)();

#define Q_IMPORT_PLUGIN(PLUGIN) \
        class Static##PLUGIN##PluginInstance{ \
        public: \
                Static##PLUGIN##PluginInstance() {                      \
                extern void qRegisterStaticPluginInstanceFunction(QtPluginInstanceFunction); \
                extern QObject *qt_plugin_instance_##PLUGIN(); \
                qRegisterStaticPluginInstanceFunction(qt_plugin_instance_##PLUGIN); \
                } \
        }; \
       static Static##PLUGIN##PluginInstance static##PLUGIN##Instance;

#define Q_PLUGIN_INSTANCE(IMPLEMENTATION) \
        { \
            static QPointer&lt;IMPLEMENTATION> _instance; \
            if (!_instance)      \
                _instance = new IMPLEMENTATION; \
            return _instance; \
        }

#  define Q_EXPORT_PLUGIN(PLUGIN) \
            Q_EXPORT_PLUGIN2(PLUGIN, PLUGIN)

#  define Q_EXPORT_STATIC_PLUGIN(PLUGIN) \
            Q_EXPORT_STATIC_PLUGIN2(PLUGIN, PLUGIN)

#if defined(QT_STATICPLUGIN)

#  define Q_EXPORT_PLUGIN2(PLUGIN, PLUGINCLASS) \
            Q_DECL_EXPORT QObject *qt_plugin_instance_##PLUGIN() \
            Q_PLUGIN_INSTANCE(PLUGINCLASS)

#  define Q_EXPORT_STATIC_PLUGIN2(PLUGIN, PLUGINCLASS) \
            Q_EXPORT_PLUGIN2(PLUGIN, PLUGINCLASS)

#else
// NOTE: if you change pattern, you MUST change the pattern in
// qlibrary.cpp as well.  changing the pattern will break all
// backwards compatibility as well (no old plugins will be loaded).
#  ifdef QPLUGIN_DEBUG_STR
#    undef QPLUGIN_DEBUG_STR
#  endif
#  ifdef QT_NO_DEBUG
#    define QPLUGIN_DEBUG_STR "false"
#  else
#    define QPLUGIN_DEBUG_STR "true"
#  endif
#  define Q_PLUGIN_VERIFICATION_DATA \
    static const char *qt_plugin_verification_data = \
      "pattern=""QT_PLUGIN_VERIFICATION_DATA""\n" \
      "version="QT_VERSION_STR"\n" \
      "debug="QPLUGIN_DEBUG_STR"\n" \
      "buildkey="QT_BUILD_KEY"\0";

#  if defined (Q_OS_WIN32) &amp;&amp; defined(Q_CC_BOR)
#     define Q_STANDARD_CALL __stdcall
#  else
#     define Q_STANDARD_CALL
#  endif

#  define Q_EXPORT_PLUGIN2(PLUGIN, PLUGINCLASS)      \
            Q_PLUGIN_VERIFICATION_DATA \
            Q_EXTERN_C Q_DECL_EXPORT \
            const char * Q_STANDARD_CALL qt_plugin_query_verification_data() \
            { return qt_plugin_verification_data; } \
            Q_EXTERN_C Q_DECL_EXPORT QObject * Q_STANDARD_CALL qt_plugin_instance() \
            Q_PLUGIN_INSTANCE(PLUGINCLASS)

#  define Q_EXPORT_STATIC_PLUGIN2(PLUGIN, PLUGINCLASS)

#endif

#endif // Q_PLUGIN_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtCore/qpluginloader.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QPLUGINLOADER_H
#define QPLUGINLOADER_H

#include &lt;QtCore/qobject.h>

#ifndef QT_NO_LIBRARY

QT_MODULE(Core)

class QLibraryPrivate;

class Q_CORE_EXPORT QPluginLoader : public QObject
{
    Q_OBJECT
    Q_PROPERTY(QString fileName READ fileName WRITE setFileName)
public:
    explicit QPluginLoader(QObject *parent = 0);
    explicit QPluginLoader(const QString &amp;fileName, QObject *parent = 0);
    ~QPluginLoader();

    QObject *instance();

    static QObjectList staticInstances();

    bool load();
    bool unload();
    bool isLoaded() const;

    void setFileName(const QString &amp;fileName);
    QString fileName() const;
private:
    QLibraryPrivate *d;
    bool did_load;
};

#endif // QT_NO_LIBRARY

#endif //QPLUGINLOADER_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtCore/qpoint.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QPOINT_H
#define QPOINT_H

#include &lt;QtCore/qnamespace.h>

QT_MODULE(Core)

class Q_CORE_EXPORT QPoint
{
public:
    QPoint();
    QPoint(int xpos, int ypos);

    bool isNull() const;

    int x() const;
    int y() const;
    void setX(int x);
    void setY(int y);

    int manhattanLength() const;

    int &amp;rx();
    int &amp;ry();

    QPoint &amp;operator+=(const QPoint &amp;p);
    QPoint &amp;operator-=(const QPoint &amp;p);
    QPoint &amp;operator*=(qreal c);
    QPoint &amp;operator/=(qreal c);

    friend inline bool operator==(const QPoint &amp;, const QPoint &amp;);
    friend inline bool operator!=(const QPoint &amp;, const QPoint &amp;);
    friend inline const QPoint operator+(const QPoint &amp;, const QPoint &amp;);
    friend inline const QPoint operator-(const QPoint &amp;, const QPoint &amp;);
    friend inline const QPoint operator*(const QPoint &amp;, qreal);
    friend inline const QPoint operator*(qreal, const QPoint &amp;);
    friend inline const QPoint operator-(const QPoint &amp;);
    friend inline const QPoint operator/(const QPoint &amp;, qreal);

private:

#if defined(Q_OS_MAC)
    int yp;
    int xp;
#else
    int xp;
    int yp;
#endif
};

Q_DECLARE_TYPEINFO(QPoint, Q_MOVABLE_TYPE);

/*****************************************************************************
  QPoint stream functions
 *****************************************************************************/
#ifndef QT_NO_DATASTREAM
Q_CORE_EXPORT QDataStream &amp;operator&lt;&lt;(QDataStream &amp;, const QPoint &amp;);
Q_CORE_EXPORT QDataStream &amp;operator>>(QDataStream &amp;, QPoint &amp;);
#endif

/*****************************************************************************
  QPoint inline functions
 *****************************************************************************/

inline QPoint::QPoint()
{ xp=0; yp=0; }

inline QPoint::QPoint(int xpos, int ypos)
{ xp = xpos; yp = ypos; }

inline bool QPoint::isNull() const
{ return xp == 0 &amp;&amp; yp == 0; }

inline int QPoint::x() const
{ return xp; }

inline int QPoint::y() const
{ return yp; }

inline void QPoint::setX(int xpos)
{ xp = xpos; }

inline void QPoint::setY(int ypos)
{ yp = ypos; }

inline int &amp;QPoint::rx()
{ return xp; }

inline int &amp;QPoint::ry()
{ return yp; }

inline QPoint &amp;QPoint::operator+=(const QPoint &amp;p)
{ xp+=p.xp; yp+=p.yp; return *this; }

inline QPoint &amp;QPoint::operator-=(const QPoint &amp;p)
{ xp-=p.xp; yp-=p.yp; return *this; }

inline QPoint &amp;QPoint::operator*=(qreal c)
{ xp = qRound(xp*c); yp = qRound(yp*c); return *this; }

inline bool operator==(const QPoint &amp;p1, const QPoint &amp;p2)
{ return p1.xp == p2.xp &amp;&amp; p1.yp == p2.yp; }

inline bool operator!=(const QPoint &amp;p1, const QPoint &amp;p2)
{ return p1.xp != p2.xp || p1.yp != p2.yp; }

inline const QPoint operator+(const QPoint &amp;p1, const QPoint &amp;p2)
{ return QPoint(p1.xp+p2.xp, p1.yp+p2.yp); }

inline const QPoint operator-(const QPoint &amp;p1, const QPoint &amp;p2)
{ return QPoint(p1.xp-p2.xp, p1.yp-p2.yp); }

inline const QPoint operator*(const QPoint &amp;p, qreal c)
{ return QPoint(qRound(p.xp*c), qRound(p.yp*c)); }

inline const QPoint operator*(qreal c, const QPoint &amp;p)
{ return QPoint(qRound(p.xp*c), qRound(p.yp*c)); }

inline const QPoint operator-(const QPoint &amp;p)
{ return QPoint(-p.xp, -p.yp); }

inline QPoint &amp;QPoint::operator/=(qreal c)
{
    Q_ASSERT(!qFuzzyCompare(c, 0));
    xp = qRound(xp/c);
    yp = qRound(yp/c);
    return *this;
}

inline const QPoint operator/(const QPoint &amp;p, qreal c)
{
    Q_ASSERT(!qFuzzyCompare(c, 0));
    return QPoint(qRound(p.xp/c), qRound(p.yp/c));
}

#ifndef QT_NO_DEBUG_STREAM
Q_CORE_EXPORT QDebug operator&lt;&lt;(QDebug, const QPoint &amp;);
#endif





class Q_CORE_EXPORT QPointF
{
public:
    QPointF();
    QPointF(const QPoint &amp;p);
    QPointF(qreal xpos, qreal ypos);

    bool isNull() const;

    qreal x() const;
    qreal y() const;
    void setX(qreal x);
    void setY(qreal y);

    qreal &amp;rx();
    qreal &amp;ry();

    QPointF &amp;operator+=(const QPointF &amp;p);
    QPointF &amp;operator-=(const QPointF &amp;p);
    QPointF &amp;operator*=(qreal c);
    QPointF &amp;operator/=(qreal c);

    friend inline bool operator==(const QPointF &amp;, const QPointF &amp;);
    friend inline bool operator!=(const QPointF &amp;, const QPointF &amp;);
    friend inline const QPointF operator+(const QPointF &amp;, const QPointF &amp;);
    friend inline const QPointF operator-(const QPointF &amp;, const QPointF &amp;);
    friend inline const QPointF operator*(qreal, const QPointF &amp;);
    friend inline const QPointF operator*(const QPointF &amp;, qreal);
    friend inline const QPointF operator-(const QPointF &amp;);
    friend inline const QPointF operator/(const QPointF &amp;, qreal);

    QPoint toPoint() const;

private:
    friend class QMatrix;

    qreal xp;
    qreal yp;
};

Q_DECLARE_TYPEINFO(QPointF, Q_MOVABLE_TYPE);

/*****************************************************************************
  QPointF stream functions
 *****************************************************************************/
#ifndef QT_NO_DATASTREAM
Q_CORE_EXPORT QDataStream &amp;operator&lt;&lt;(QDataStream &amp;, const QPointF &amp;);
Q_CORE_EXPORT QDataStream &amp;operator>>(QDataStream &amp;, QPointF &amp;);
#endif

/*****************************************************************************
  QPointF inline functions
 *****************************************************************************/

inline QPointF::QPointF() : xp(0), yp(0) { }

inline QPointF::QPointF(qreal xpos, qreal ypos) : xp(xpos), yp(ypos) { }

inline QPointF::QPointF(const QPoint &amp;p) : xp(p.x()), yp(p.y()) { }

inline bool QPointF::isNull() const
{
    return qIsNull(xp) &amp;&amp; qIsNull(yp);
}

inline qreal QPointF::x() const
{
    return xp;
}

inline qreal QPointF::y() const
{
    return yp;
}

inline void QPointF::setX(qreal xpos)
{
    xp = xpos;
}

inline void QPointF::setY(qreal ypos)
{
    yp = ypos;
}

inline qreal &amp;QPointF::rx()
{
    return xp;
}

inline qreal &amp;QPointF::ry()
{
    return yp;
}

inline QPointF &amp;QPointF::operator+=(const QPointF &amp;p)
{
    xp+=p.xp;
    yp+=p.yp;
    return *this;
}

inline QPointF &amp;QPointF::operator-=(const QPointF &amp;p)
{
    xp-=p.xp; yp-=p.yp; return *this;
}

inline QPointF &amp;QPointF::operator*=(qreal c)
{
    xp*=c; yp*=c; return *this;
}

inline bool operator==(const QPointF &amp;p1, const QPointF &amp;p2)
{
    return qFuzzyCompare(p1.xp, p2.xp) &amp;&amp; qFuzzyCompare(p1.yp, p2.yp);
}

inline bool operator!=(const QPointF &amp;p1, const QPointF &amp;p2)
{
    return !qFuzzyCompare(p1.xp, p2.xp) || !qFuzzyCompare(p1.yp, p2.yp);
}

inline const QPointF operator+(const QPointF &amp;p1, const QPointF &amp;p2)
{
    return QPointF(p1.xp+p2.xp, p1.yp+p2.yp);
}

inline const QPointF operator-(const QPointF &amp;p1, const QPointF &amp;p2)
{
    return QPointF(p1.xp-p2.xp, p1.yp-p2.yp);
}

inline const QPointF operator*(const QPointF &amp;p, qreal c)
{
    return QPointF(p.xp*c, p.yp*c);
}

inline const QPointF operator*(qreal c, const QPointF &amp;p)
{
    return QPointF(p.xp*c, p.yp*c);
}

inline const QPointF operator-(const QPointF &amp;p)
{
    return QPointF(-p.xp, -p.yp);
}

inline QPointF &amp;QPointF::operator/=(qreal c)
{
    Q_ASSERT(!qFuzzyCompare(c, 0));
    xp/=c;
    yp/=c;
    return *this;
}

inline const QPointF operator/(const QPointF &amp;p, qreal c)
{
    Q_ASSERT(!qFuzzyCompare(c, 0));
    return QPointF(p.xp/c, p.yp/c);
}

inline QPoint QPointF::toPoint() const
{
    return QPoint(qRound(xp), qRound(yp));
}

#ifndef QT_NO_DEBUG_STREAM
Q_CORE_EXPORT QDebug operator&lt;&lt;(QDebug d, const QPointF &amp;p);
#endif

#endif // QPOINT_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtCore/qprocess.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QPROCESS_H
#define QPROCESS_H

#include &lt;QtCore/qiodevice.h>
#include &lt;QtCore/qstringlist.h>

#if defined(Q_OS_WIN32)
typedef struct _PROCESS_INFORMATION* Q_PID;
#else
typedef qint64 Q_PID;
#endif

QT_MODULE(Core)

#ifndef QT_NO_PROCESS

class QProcessPrivate;

class Q_CORE_EXPORT QProcess : public QIODevice
{
    Q_OBJECT
public:
    enum ProcessError {
        FailedToStart, //### file not found
        Crashed,
        Timedout,
        ReadError,
        WriteError,
        UnknownError
    };
    enum ProcessState {
        NotRunning,
        Starting,
        Running
    };
    enum ProcessChannel {
        StandardOutput,
        StandardError
    };
    enum ProcessChannelMode {
        SeparateChannels,
        MergedChannels,
        ForwardedChannels
    };
    enum ExitStatus {
        NormalExit,
        CrashExit
    };

    explicit QProcess(QObject *parent = 0);
    virtual ~QProcess();

    void start(const QString &amp;program, const QStringList &amp;arguments, OpenMode mode = ReadWrite);
    void start(const QString &amp;program, OpenMode mode = ReadWrite);

    ProcessChannelMode readChannelMode() const;
    void setReadChannelMode(ProcessChannelMode mode);

    ProcessChannel readChannel() const;
    void setReadChannel(ProcessChannel channel);

    void closeReadChannel(ProcessChannel channel);
    void closeWriteChannel();

    QString workingDirectory() const;
    void setWorkingDirectory(const QString &amp;dir);

    void setEnvironment(const QStringList &amp;environment);
    QStringList environment() const;

    QProcess::ProcessError error() const;
    QProcess::ProcessState state() const;

    Q_PID pid() const;

    bool waitForStarted(int msecs = 30000);
    bool waitForReadyRead(int msecs = 30000);
    bool waitForBytesWritten(int msecs = 30000);
    bool waitForFinished(int msecs = 30000);

    QByteArray readAllStandardOutput();
    QByteArray readAllStandardError();

    int exitCode() const;
    QProcess::ExitStatus exitStatus() const;

    // QIODevice
    qint64 bytesAvailable() const;
    qint64 bytesToWrite() const;
    bool isSequential() const;
    bool canReadLine() const;
    void close();
    bool atEnd() const;

    static int execute(const QString &amp;program, const QStringList &amp;arguments);
    static int execute(const QString &amp;program);

    static bool startDetached(const QString &amp;program, const QStringList &amp;arguments);
    static bool startDetached(const QString &amp;program);

    static QStringList systemEnvironment();

public Q_SLOTS:
    void terminate();
    void kill();

Q_SIGNALS:
    void started();
    void finished(int exitCode);
    void finished(int exitCode, QProcess::ExitStatus exitStatus);
    void error(QProcess::ProcessError error);
    void stateChanged(QProcess::ProcessState state);

    void readyReadStandardOutput();
    void readyReadStandardError();

protected:
    void setProcessState(ProcessState state);

    virtual void setupChildProcess();

    // QIODevice
    qint64 readData(char *data, qint64 maxlen);
    qint64 writeData(const char *data, qint64 len);

private:
    Q_DECLARE_PRIVATE(QProcess)
    Q_DISABLE_COPY(QProcess)

    Q_PRIVATE_SLOT(d_func(), bool canReadStandardOutput())
    Q_PRIVATE_SLOT(d_func(), bool canReadStandardError())
    Q_PRIVATE_SLOT(d_func(), bool canWrite())
    Q_PRIVATE_SLOT(d_func(), bool startupNotification())
    Q_PRIVATE_SLOT(d_func(), bool processDied())
    Q_PRIVATE_SLOT(d_func(), void notified())
    friend class QProcessManager;
};

#endif // QT_NO_PROCESS

#endif // QPROCESS_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtCore/qreadwritelock.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QREADWRITELOCK_H
#define QREADWRITELOCK_H

#include &lt;QtCore/qglobal.h>
#include &lt;limits.h>

QT_MODULE(Core)

#ifndef QT_NO_THREAD

struct QReadWriteLockPrivate;

class Q_CORE_EXPORT QReadWriteLock
{
public:
    QReadWriteLock();
    ~QReadWriteLock();

    void lockForRead();
    bool tryLockForRead();

    void lockForWrite();
    bool tryLockForWrite();

    void unlock();

private:
    Q_DISABLE_COPY(QReadWriteLock)
    QReadWriteLockPrivate *d;
};

class Q_CORE_EXPORT QReadLocker
{
public:
    inline QReadLocker(QReadWriteLock *readWriteLock);

    inline ~QReadLocker()
    { unlock(); }

    inline void unlock()
    { if (q_lock) q_lock->unlock(); }

    inline void relock()
    { if (q_lock) q_lock->lockForRead(); }

    inline QReadWriteLock *readWriteLock() const
    { return q_lock; }

private:
    Q_DISABLE_COPY(QReadLocker)
    QReadWriteLock *q_lock;
};

inline QReadLocker::QReadLocker(QReadWriteLock *areadWriteLock)
    : q_lock(areadWriteLock)
{ relock(); }

class Q_CORE_EXPORT QWriteLocker
{
public:
    inline QWriteLocker(QReadWriteLock *readWriteLock);

    inline ~QWriteLocker()
    { unlock(); }

    inline void unlock()
    { if (q_lock) q_lock->unlock(); }

    inline void relock()
    { if (q_lock) q_lock->lockForWrite(); }

    inline QReadWriteLock *readWriteLock() const
    { return q_lock; }

private:
    Q_DISABLE_COPY(QWriteLocker)
    QReadWriteLock *q_lock;
};

inline QWriteLocker::QWriteLocker(QReadWriteLock *areadWriteLock)
    : q_lock(areadWriteLock)
{ relock(); }

#else // QT_NO_THREAD

class Q_CORE_EXPORT QReadWriteLock
{
public:
    inline explicit QReadWriteLock() { }
    inline ~QReadWriteLock() { }

    static inline void lockForRead() { }
    static inline bool tryLockForRead() { return true; }

    static inline void lockForWrite() { }
    static inline bool tryLockForWrite() { return true; }

    static inline void unlock() { }

private:
    Q_DISABLE_COPY(QReadWriteLock)
};

class Q_CORE_EXPORT QReadLocker
{
public:
    inline QReadLocker(QReadWriteLock *) { }
    inline ~QReadLocker() { }

    static inline void unlock() { }
    static inline void relock() { }
    static inline QReadWriteLock *readWriteLock() { return 0; }

private:
    Q_DISABLE_COPY(QReadLocker)
};

class Q_CORE_EXPORT QWriteLocker
{
public:
    inline explicit QWriteLocker(QReadWriteLock *) { }
    inline ~QWriteLocker() { }

    static inline void unlock() { }
    static inline void relock() { }
    static inline QReadWriteLock *readWriteLock() { return 0; }

private:
    Q_DISABLE_COPY(QWriteLocker)
};

#endif // QT_NO_THREAD

#endif // QREADWRITELOCK_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtCore/qrect.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QRECT_H
#define QRECT_H

#include &lt;QtCore/qsize.h>
#include &lt;QtCore/qpoint.h>

#ifdef topLeft
#error qrect.h must be included before any header file that defines topLeft
#endif

QT_MODULE(Core)

class Q_CORE_EXPORT QRect
{
public:
    QRect() { x1 = y1 = 0; x2 = y2 = -1; }
    QRect(const QPoint &amp;topleft, const QPoint &amp;bottomright);
    QRect(const QPoint &amp;topleft, const QSize &amp;size);
    QRect(int left, int top, int width, int height);

    bool isNull() const;
    bool isEmpty() const;
    bool isValid() const;

    int left() const;
    int top() const;
    int right() const;
    int bottom() const;
    QRect normalized() const;

#ifdef QT3_SUPPORT
    QT3_SUPPORT int &amp;rLeft() { return x1; }
    QT3_SUPPORT int &amp;rTop() { return y1; }
    QT3_SUPPORT int &amp;rRight() { return x2; }
    QT3_SUPPORT int &amp;rBottom() { return y2; }

    QT3_SUPPORT QRect normalize() const { return normalized(); }
#endif

    int x() const;
    int y() const;
    void setLeft(int pos);
    void setTop(int pos);
    void setRight(int pos);
    void setBottom(int pos);
    void setX(int x);
    void setY(int y);

    void setTopLeft(const QPoint &amp;p);
    void setBottomRight(const QPoint &amp;p);
    void setTopRight(const QPoint &amp;p);
    void setBottomLeft(const QPoint &amp;p);

    QPoint topLeft() const;
    QPoint bottomRight() const;
    QPoint topRight() const;
    QPoint bottomLeft() const;
    QPoint center() const;

    void moveLeft(int pos);
    void moveTop(int pos);
    void moveRight(int pos);
    void moveBottom(int pos);
    void moveTopLeft(const QPoint &amp;p);
    void moveBottomRight(const QPoint &amp;p);
    void moveTopRight(const QPoint &amp;p);
    void moveBottomLeft(const QPoint &amp;p);
    void moveCenter(const QPoint &amp;p);

    inline void translate(int dx, int dy);
    inline void translate(const QPoint &amp;p);
    inline QRect translated(int dx, int dy) const;
    inline QRect translated(const QPoint &amp;p) const;

    void moveTo(int x, int t);
    void moveTo(const QPoint &amp;p);

#ifdef QT3_SUPPORT
    QT3_SUPPORT void moveBy(int dx, int dy) { translate(dx, dy); }
    QT3_SUPPORT void moveBy(const QPoint &amp;p) { translate(p); }
#endif

    void setRect(int x, int y, int w, int h);
    inline void getRect(int *x, int *y, int *w, int *h) const;

    void setCoords(int x1, int y1, int x2, int y2);
#ifdef QT3_SUPPORT
    QT3_SUPPORT void addCoords(int x1, int y1, int x2, int y2);
#endif
    inline void getCoords(int *x1, int *y1, int *x2, int *y2) const;

    inline void adjust(int x1, int y1, int x2, int y2);
    inline QRect adjusted(int x1, int y1, int x2, int y2) const;

    QSize size() const;
    int width() const;
    int height() const;
    void setWidth(int w);
    void setHeight(int h);
    void setSize(const QSize &amp;s);

    QRect operator|(const QRect &amp;r) const;
    QRect operator&amp;(const QRect &amp;r) const;
    QRect&amp; operator|=(const QRect &amp;r);
    QRect&amp; operator&amp;=(const QRect &amp;r);

    bool contains(const QPoint &amp;p, bool proper=false) const;
    bool contains(int x, int y) const; // inline methods, _don't_ merge these
    bool contains(int x, int y, bool proper) const;
    bool contains(const QRect &amp;r, bool proper=false) const;
    QRect unite(const QRect &amp;r) const;
    QRect intersect(const QRect &amp;r) const;
    bool intersects(const QRect &amp;r) const;

    friend Q_CORE_EXPORT inline bool operator==(const QRect &amp;, const QRect &amp;);
    friend Q_CORE_EXPORT inline bool operator!=(const QRect &amp;, const QRect &amp;);

#ifdef QT3_SUPPORT
    inline QT3_SUPPORT void rect(int *x, int *y, int *w, int *h) const { getRect(x, y, w, h); }
    inline QT3_SUPPORT void coords(int *ax1, int *ay1, int *ax2, int *ay2) const
    { getCoords(ax1, ay1, ax2, ay2); }
#endif

private:
#if defined(Q_WS_X11) || defined(Q_OS_TEMP)
    friend void qt_setCoords(QRect *r, int xp1, int yp1, int xp2, int yp2);
#endif
#if defined(Q_OS_MAC)
    int y1;
    int x1;
    int y2;
    int x2;
#else
    int x1;
    int y1;
    int x2;
    int y2;
#endif

};
Q_DECLARE_TYPEINFO(QRect, Q_MOVABLE_TYPE);

Q_CORE_EXPORT inline bool operator==(const QRect &amp;, const QRect &amp;);
Q_CORE_EXPORT inline bool operator!=(const QRect &amp;, const QRect &amp;);


/*****************************************************************************
  QRect stream functions
 *****************************************************************************/
#ifndef QT_NO_DATASTREAM
Q_CORE_EXPORT QDataStream &amp;operator&lt;&lt;(QDataStream &amp;, const QRect &amp;);
Q_CORE_EXPORT QDataStream &amp;operator>>(QDataStream &amp;, QRect &amp;);
#endif

/*****************************************************************************
  QRect inline member functions
 *****************************************************************************/

inline QRect::QRect(int aleft, int atop, int awidth, int aheight)
{
    x1 = aleft;
    y1 = atop;
    x2 = (aleft + awidth - 1);
    y2 = (atop + aheight - 1);
}

inline QRect::QRect(const QPoint &amp;atopLeft, const QPoint &amp;abottomRight)
{
    x1 = atopLeft.x();
    y1 = atopLeft.y();
    x2 = abottomRight.x();
    y2 = abottomRight.y();
}

inline QRect::QRect(const QPoint &amp;atopLeft, const QSize &amp;asize)
{
    x1 = atopLeft.x();
    y1 = atopLeft.y();
    x2 = (x1+asize.width() - 1);
    y2 = (y1+asize.height() - 1);
}

inline bool QRect::isNull() const
{ return x2 == x1 - 1 &amp;&amp; y2 == y1 - 1; }

inline bool QRect::isEmpty() const
{ return x1 > x2 || y1 > y2; }

inline bool QRect::isValid() const
{ return x1 &lt;= x2 &amp;&amp; y1 &lt;= y2; }

inline int QRect::left() const
{ return x1; }

inline int QRect::top() const
{ return y1; }

inline int QRect::right() const
{ return x2; }

inline int QRect::bottom() const
{ return y2; }

inline int QRect::x() const
{ return x1; }

inline int QRect::y() const
{ return y1; }

inline void QRect::setLeft(int pos)
{ x1 = pos; }

inline void QRect::setTop(int pos)
{ y1 = pos; }

inline void QRect::setRight(int pos)
{ x2 = pos; }

inline void QRect::setBottom(int pos)
{ y2 = pos; }

inline void QRect::setTopLeft(const QPoint &amp;p)
{ x1 = p.x(); y1 = p.y(); }

inline void QRect::setBottomRight(const QPoint &amp;p)
{ x2 = p.x(); y2 = p.y(); }

inline void QRect::setTopRight(const QPoint &amp;p)
{ x2 = p.x(); y1 = p.y(); }

inline void QRect::setBottomLeft(const QPoint &amp;p)
{ x1 = p.x(); y2 = p.y(); }

inline void QRect::setX(int ax)
{ x1 = ax; }

inline void QRect::setY(int ay)
{ y1 = ay; }

inline QPoint QRect::topLeft() const
{ return QPoint(x1, y1); }

inline QPoint QRect::bottomRight() const
{ return QPoint(x2, y2); }

inline QPoint QRect::topRight() const
{ return QPoint(x2, y1); }

inline QPoint QRect::bottomLeft() const
{ return QPoint(x1, y2); }

inline QPoint QRect::center() const
{ return QPoint((x1+x2)/2, (y1+y2)/2); }

inline int QRect::width() const
{ return  x2 - x1 + 1; }

inline int QRect::height() const
{ return  y2 - y1 + 1; }

inline QSize QRect::size() const
{ return QSize(width(), height()); }

inline void QRect::translate(int dx, int dy)
{
    x1 += dx;
    y1 += dy;
    x2 += dx;
    y2 += dy;
}

inline void QRect::translate(const QPoint &amp;p)
{
    x1 += p.x();
    y1 += p.y();
    x2 += p.x();
    y2 += p.y();
}

inline QRect QRect::translated(int dx, int dy) const
{ return QRect(QPoint(x1 + dx, y1 + dy), QPoint(x2 + dx, y2 + dy)); }

inline QRect QRect::translated(const QPoint &amp;p) const
{ return QRect(QPoint(x1 + p.x(), y1 + p.y()), QPoint(x2 + p.x(), y2 + p.y())); }

inline void QRect::moveTo(int ax, int ay)
{
    x2 += ax - x1;
    y2 += ay - y1;
    x1 = ax;
    y1 = ay;
}

inline void QRect::moveTo(const QPoint &amp;p)
{
    x2 += p.x() - x1;
    y2 += p.y() - y1;
    x1 = p.x();
    y1 = p.y();
}

inline void QRect::moveLeft(int pos)
{ x2 += (pos - x1); x1 = pos; }

inline void QRect::moveTop(int pos)
{ y2 += (pos - y1); y1 = pos; }

inline void QRect::moveRight(int pos)
{
    x1 += (pos - x2);
    x2 = pos;
}

inline void QRect::moveBottom(int pos)
{
    y1 += (pos - y2);
    y2 = pos;
}

inline void QRect::moveTopLeft(const QPoint &amp;p)
{
    moveLeft(p.x());
    moveTop(p.y());
}

inline void QRect::moveBottomRight(const QPoint &amp;p)
{
    moveRight(p.x());
    moveBottom(p.y());
}

inline void QRect::moveTopRight(const QPoint &amp;p)
{
    moveRight(p.x());
    moveTop(p.y());
}

inline void QRect::moveBottomLeft(const QPoint &amp;p)
{
    moveLeft(p.x());
    moveBottom(p.y());
}

inline void QRect::getRect(int *ax, int *ay, int *aw, int *ah) const
{
    *ax = x1;
    *ay = y1;
    *aw = x2 - x1 + 1;
    *ah = y2 - y1 + 1;
}

inline void QRect::setRect(int ax, int ay, int aw, int ah)
{
    x1 = ax;
    y1 = ay;
    x2 = (ax + aw - 1);
    y2 = (ay + ah - 1);
}

inline void QRect::getCoords(int *xp1, int *yp1, int *xp2, int *yp2) const
{
    *xp1 = x1;
    *yp1 = y1;
    *xp2 = x2;
    *yp2 = y2;
}

inline void QRect::setCoords(int xp1, int yp1, int xp2, int yp2)
{
    x1 = xp1;
    y1 = yp1;
    x2 = xp2;
    y2 = yp2;
}

#ifdef QT3_SUPPORT
inline void QRect::addCoords(int dx1, int dy1, int dx2, int dy2)
{
    adjust(dx1, dy1, dx2, dy2);
}
#endif

inline QRect QRect::adjusted(int xp1, int yp1, int xp2, int yp2) const
{ return QRect(QPoint(x1 + xp1, y1 + yp1), QPoint(x2 + xp2, y2 + yp2)); }

inline void QRect::adjust(int dx1, int dy1, int dx2, int dy2)
{
    x1 += dx1;
    y1 += dy1;
    x2 += dx2;
    y2 += dy2;
}

inline void QRect::setWidth(int w)
{ x2 = (x1 + w - 1); }

inline void QRect::setHeight(int h)
{ y2 = (y1 + h - 1); }

inline void QRect::setSize(const QSize &amp;s)
{
    x2 = (s.width()  + x1 - 1);
    y2 = (s.height() + y1 - 1);
}

inline bool QRect::contains(int ax, int ay, bool aproper) const
{
    return contains(QPoint(ax, ay), aproper);
}

inline bool QRect::contains(int ax, int ay) const
{
    return contains(QPoint(ax, ay), false);
}

inline QRect&amp; QRect::operator|=(const QRect &amp;r)
{
    *this = *this | r;
    return *this;
}

inline QRect&amp; QRect::operator&amp;=(const QRect &amp;r)
{
    *this = *this &amp; r;
    return *this;
}

inline QRect QRect::intersect(const QRect &amp;r) const
{
    return *this &amp; r;
}
inline QRect QRect::unite(const QRect &amp;r) const
{
    return *this | r;
}

inline bool operator==(const QRect &amp;r1, const QRect &amp;r2)
{
    return r1.x1==r2.x1 &amp;&amp; r1.x2==r2.x2 &amp;&amp; r1.y1==r2.y1 &amp;&amp; r1.y2==r2.y2;
}

inline bool operator!=(const QRect &amp;r1, const QRect &amp;r2)
{
    return r1.x1!=r2.x1 || r1.x2!=r2.x2 || r1.y1!=r2.y1 || r1.y2!=r2.y2;
}

#ifndef QT_NO_DEBUG_STREAM
Q_CORE_EXPORT QDebug operator&lt;&lt;(QDebug, const QRect &amp;);
#endif


class Q_CORE_EXPORT QRectF
{
public:
    QRectF() { xp = yp = 0.; w = h = 0.; }
    QRectF(const QPointF &amp;topleft, const QSizeF &amp;size);
    QRectF(qreal left, qreal top, qreal width, qreal height);
    QRectF(const QRect &amp;rect);

    bool isNull() const;
    bool isEmpty() const;
    bool isValid() const;
    QRectF normalized() const;

    inline qreal left() const { return xp; }
    inline qreal top() const { return yp; }
    inline qreal right() const { return xp + w; }
    inline qreal bottom() const { return yp + h; }

    inline qreal x() const;
    inline qreal y() const;
    inline void setLeft(qreal pos);
    inline void setTop(qreal pos);
    inline void setRight(qreal pos);
    inline void setBottom(qreal pos);
    inline void setX(qreal pos) { setLeft(pos); }
    inline void setY(qreal pos) { setTop(pos); }

    inline QPointF topLeft() const { return QPointF(xp, yp); }
    inline QPointF bottomRight() const { return QPointF(xp+w, yp+h); }
    inline QPointF topRight() const { return QPointF(xp+w, yp); }
    inline QPointF bottomLeft() const { return QPointF(xp, yp+h); }
    inline QPointF center() const;

    void setTopLeft(const QPointF &amp;p);
    void setBottomRight(const QPointF &amp;p);
    void setTopRight(const QPointF &amp;p);
    void setBottomLeft(const QPointF &amp;p);

    void moveLeft(qreal pos);
    void moveTop(qreal pos);
    void moveRight(qreal pos);
    void moveBottom(qreal pos);
    void moveTopLeft(const QPointF &amp;p);
    void moveBottomRight(const QPointF &amp;p);
    void moveTopRight(const QPointF &amp;p);
    void moveBottomLeft(const QPointF &amp;p);
    void moveCenter(const QPointF &amp;p);

    void translate(qreal dx, qreal dy);
    void translate(const QPointF &amp;p);

    QRectF translated(qreal dx, qreal dy) const;
    QRectF translated(const QPointF &amp;p) const;

    void moveTo(qreal x, qreal t);
    void moveTo(const QPointF &amp;p);

    void setRect(qreal x, qreal y, qreal w, qreal h);
    void getRect(qreal *x, qreal *y, qreal *w, qreal *h) const;

    void setCoords(qreal x1, qreal y1, qreal x2, qreal y2);
    void getCoords(qreal *x1, qreal *y1, qreal *x2, qreal *y2) const;

    inline void adjust(qreal x1, qreal y1, qreal x2, qreal y2);
    inline QRectF adjusted(qreal x1, qreal y1, qreal x2, qreal y2) const;

    QSizeF size() const;
    qreal width() const;
    qreal height() const;
    void setWidth(qreal w);
    void setHeight(qreal h);
    void setSize(const QSizeF &amp;s);

    QRectF operator|(const QRectF &amp;r) const;
    QRectF operator&amp;(const QRectF &amp;r) const;
    QRectF&amp; operator|=(const QRectF &amp;r);
    QRectF&amp; operator&amp;=(const QRectF &amp;r);

    bool contains(const QPointF &amp;p) const;
    bool contains(qreal x, qreal y) const;
    bool contains(const QRectF &amp;r) const;
    QRectF unite(const QRectF &amp;r) const;
    QRectF intersect(const QRectF &amp;r) const;
    bool intersects(const QRectF &amp;r) const;

    friend Q_CORE_EXPORT inline bool operator==(const QRectF &amp;, const QRectF &amp;);
    friend Q_CORE_EXPORT inline bool operator!=(const QRectF &amp;, const QRectF &amp;);

    QRect toRect() const;

private:
    qreal xp;
    qreal yp;
    qreal w;
    qreal h;
};
Q_DECLARE_TYPEINFO(QRectF, Q_MOVABLE_TYPE);

Q_CORE_EXPORT inline bool operator==(const QRectF &amp;, const QRectF &amp;);
Q_CORE_EXPORT inline bool operator!=(const QRectF &amp;, const QRectF &amp;);


/*****************************************************************************
  QRectF stream functions
 *****************************************************************************/
#ifndef QT_NO_DATASTREAM
Q_CORE_EXPORT QDataStream &amp;operator&lt;&lt;(QDataStream &amp;, const QRectF &amp;);
Q_CORE_EXPORT QDataStream &amp;operator>>(QDataStream &amp;, QRectF &amp;);
#endif

/*****************************************************************************
  QRectF inline member functions
 *****************************************************************************/

inline QRectF::QRectF(qreal aleft, qreal atop, qreal awidth, qreal aheight)
    : xp(aleft), yp(atop), w(awidth), h(aheight)
{
}

inline QRectF::QRectF(const QPointF &amp;atopLeft, const QSizeF &amp;asize)
{
    xp = atopLeft.x();
    yp = atopLeft.y();
    w = asize.width();
    h = asize.height();
}

inline QRectF::QRectF(const QRect &amp;r)
    : xp(r.x()), yp(r.y()), w(r.width()), h(r.height())
{
}

inline bool QRectF::isNull() const
{ return qIsNull(w) &amp;&amp; qIsNull(h); }

inline bool QRectF::isEmpty() const
{ return w &lt;= 0. || h &lt;= 0.; }

inline bool QRectF::isValid() const
{ return w > 0. &amp;&amp; h > 0.; }

inline qreal QRectF::x() const
{ return xp; }

inline qreal QRectF::y() const
{ return yp; }

inline void QRectF::setLeft(qreal pos) { qreal diff = pos - xp; xp += diff; w -= diff; }

inline void QRectF::setRight(qreal pos) { w = pos - xp; }

inline void QRectF::setTop(qreal pos) { qreal diff = pos - yp; yp += diff; h -= diff; }

inline void QRectF::setBottom(qreal pos) { h = pos - yp; }

inline void QRectF::setTopLeft(const QPointF &amp;p) { setLeft(p.x()); setTop(p.y()); }

inline void QRectF::setTopRight(const QPointF &amp;p) { setRight(p.x()); setTop(p.y()); }

inline void QRectF::setBottomLeft(const QPointF &amp;p) { setLeft(p.x()); setBottom(p.y()); }

inline void QRectF::setBottomRight(const QPointF &amp;p) { setRight(p.x()); setBottom(p.y()); }

inline QPointF QRectF::center() const
{ return QPointF(xp + w/2, yp + h/2); }

inline void QRectF::moveLeft(qreal pos) { xp = pos; }

inline void QRectF::moveTop(qreal pos) { yp = pos; }

inline void QRectF::moveRight(qreal pos) { xp = pos - w; }

inline void QRectF::moveBottom(qreal pos) { yp = pos - h; }

inline void QRectF::moveTopLeft(const QPointF &amp;p) { moveLeft(p.x()); moveTop(p.y()); }

inline void QRectF::moveTopRight(const QPointF &amp;p) { moveRight(p.x()); moveTop(p.y()); }

inline void QRectF::moveBottomLeft(const QPointF &amp;p) { moveLeft(p.x()); moveBottom(p.y()); }

inline void QRectF::moveBottomRight(const QPointF &amp;p) { moveRight(p.x()); moveBottom(p.y()); }

inline void QRectF::moveCenter(const QPointF &amp;p) { xp = p.x() - w/2; yp = p.y() - h/2; }

inline qreal QRectF::width() const
{ return w; }

inline qreal QRectF::height() const
{ return h; }

inline QSizeF QRectF::size() const
{ return QSizeF(w, h); }

inline void QRectF::translate(qreal dx, qreal dy)
{
    xp += dx;
    yp += dy;
}

inline void QRectF::translate(const QPointF &amp;p)
{
    xp += p.x();
    yp += p.y();
}

inline void QRectF::moveTo(qreal ax, qreal ay)
{
    xp = ax;
    yp = ay;
}

inline void QRectF::moveTo(const QPointF &amp;p)
{
    xp = p.x();
    yp = p.y();
}

inline QRectF QRectF::translated(qreal dx, qreal dy) const
{ return QRectF(xp + dx, yp + dy, w, h); }

inline QRectF QRectF::translated(const QPointF &amp;p) const
{ return QRectF(xp + p.x(), yp + p.y(), w, h); }

inline void QRectF::getRect(qreal *ax, qreal *ay, qreal *aaw, qreal *aah) const
{
    *ax = this->xp;
    *ay = this->yp;
    *aaw = this->w;
    *aah = this->h;
}

inline void QRectF::setRect(qreal ax, qreal ay, qreal aaw, qreal aah)
{
    this->xp = ax;
    this->yp = ay;
    this->w = aaw;
    this->h = aah;
}

inline void QRectF::getCoords(qreal *xp1, qreal *yp1, qreal *xp2, qreal *yp2) const
{
    *xp1 = xp;
    *yp1 = yp;
    *xp2 = xp + w;
    *yp2 = yp + h;
}

inline void QRectF::setCoords(qreal xp1, qreal yp1, qreal xp2, qreal yp2)
{
    xp = xp1;
    yp = yp1;
    w = xp2 - xp1;
    h = yp2 - yp1;
}

inline void QRectF::adjust(qreal xp1, qreal yp1, qreal xp2, qreal yp2)
{ xp += xp1; yp += yp1; w += xp2 - xp1; h += yp2 - yp1; }

inline QRectF QRectF::adjusted(qreal xp1, qreal yp1, qreal xp2, qreal yp2) const
{ return QRectF(xp + xp1, yp + yp1, w + xp2 - xp1, h + yp2 - yp1); }

inline void QRectF::setWidth(qreal aw)
{ this->w = aw; }

inline void QRectF::setHeight(qreal ah)
{ this->h = ah; }

inline void QRectF::setSize(const QSizeF &amp;s)
{
    w = s.width();
    h = s.height();
}

inline bool QRectF::contains(qreal ax, qreal ay) const
{
    return contains(QPointF(ax, ay));
}

inline QRectF&amp; QRectF::operator|=(const QRectF &amp;r)
{
    *this = *this | r;
    return *this;
}

inline QRectF&amp; QRectF::operator&amp;=(const QRectF &amp;r)
{
    *this = *this &amp; r;
    return *this;
}

inline QRectF QRectF::intersect(const QRectF &amp;r) const
{
    return *this &amp; r;
}
inline QRectF QRectF::unite(const QRectF &amp;r) const
{
    return *this | r;
}

inline bool operator==(const QRectF &amp;r1, const QRectF &amp;r2)
{
    return qFuzzyCompare(r1.xp, r2.xp) &amp;&amp; qFuzzyCompare(r1.yp, r2.yp)
           &amp;&amp; qFuzzyCompare(r1.w, r2.w) &amp;&amp; qFuzzyCompare(r1.h, r2.h);
}

inline bool operator!=(const QRectF &amp;r1, const QRectF &amp;r2)
{
    return !qFuzzyCompare(r1.xp, r2.xp) || !qFuzzyCompare(r1.yp, r2.yp)
           || !qFuzzyCompare(r1.w, r2.w) || !qFuzzyCompare(r1.h, r2.h);
}

inline QRect QRectF::toRect() const
{
    return QRect(qRound(xp), qRound(yp), qRound(w), qRound(h));
}

#ifndef QT_NO_DEBUG_STREAM
Q_CORE_EXPORT QDebug operator&lt;&lt;(QDebug, const QRectF &amp;);
#endif

#endif // QRECT_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtCore/qregexp.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QREGEXP_H
#define QREGEXP_H

#ifndef QT_NO_REGEXP

#include &lt;QtCore/qstring.h>
#ifdef QT3_SUPPORT
#include &lt;new>
#endif

QT_MODULE(Core)

struct QRegExpPrivate;
class QStringList;

class Q_CORE_EXPORT QRegExp
{
public:
    enum PatternSyntax { RegExp, Wildcard, FixedString };
    enum CaretMode { CaretAtZero, CaretAtOffset, CaretWontMatch };

    QRegExp();
    explicit QRegExp(const QString &amp;pattern, Qt::CaseSensitivity cs = Qt::CaseSensitive,
		     PatternSyntax syntax = RegExp);
    QRegExp(const QRegExp &amp;rx);
    ~QRegExp();
    QRegExp &amp;operator=(const QRegExp &amp;rx);

    bool operator==(const QRegExp &amp;rx) const;
    inline bool operator!=(const QRegExp &amp;rx) const { return !operator==(rx); }

    bool isEmpty() const;
    bool isValid() const;
    QString pattern() const;
    void setPattern(const QString &amp;pattern);
    Qt::CaseSensitivity caseSensitivity() const;
    void setCaseSensitivity(Qt::CaseSensitivity cs);
#ifdef QT3_SUPPORT
    inline QT3_SUPPORT bool caseSensitive() const { return caseSensitivity() == Qt::CaseSensitive; }
    inline QT3_SUPPORT void setCaseSensitive(bool sensitive)
    { setCaseSensitivity(sensitive ? Qt::CaseSensitive : Qt::CaseInsensitive); }
#endif
#ifndef QT_NO_REGEXP_WILDCARD
    PatternSyntax patternSyntax() const;
    void setPatternSyntax(PatternSyntax syntax);
#ifdef QT3_SUPPORT
    inline QT3_SUPPORT bool wildcard() const { return patternSyntax() == Wildcard; }
    inline QT3_SUPPORT void setWildcard(bool wildcard)
    { setPatternSyntax(wildcard ? Wildcard : RegExp); }
#endif
#endif

    bool isMinimal() const;
    void setMinimal(bool minimal);
#ifdef QT3_SUPPORT
    inline QT3_SUPPORT bool minimal() const { return isMinimal(); }
#endif

    bool exactMatch(const QString &amp;str) const;

    int indexIn(const QString &amp;str, int offset = 0, CaretMode caretMode = CaretAtZero) const;
    int lastIndexIn(const QString &amp;str, int offset = -1, CaretMode caretMode = CaretAtZero) const;
#ifdef QT3_SUPPORT
    inline QT3_SUPPORT int search(const QString &amp;str, int from = 0,
                                CaretMode caretMode = CaretAtZero) const
    { return indexIn(str, from, caretMode); }
    inline QT3_SUPPORT int searchRev(const QString &amp;str, int from = -1,
                                   CaretMode caretMode = CaretAtZero) const
    { return lastIndexIn(str, from, caretMode); }
#endif
    int matchedLength() const;
#ifndef QT_NO_REGEXP_CAPTURE
    int numCaptures() const;
    QStringList capturedTexts();
    QString cap(int nth = 0);
    int pos(int nth = 0);
    QString errorString();
#endif

    static QString escape(const QString &amp;str);

#ifdef QT3_SUPPORT
    inline QT3_SUPPORT_CONSTRUCTOR QRegExp(const QString &amp;pattern, bool cs, bool wildcard = false)
    {
        new (this)
            QRegExp(pattern, cs ? Qt::CaseSensitive : Qt::CaseInsensitive,
                    wildcard ? Wildcard : RegExp);
    }
#endif

private:
    QRegExpPrivate *priv;
};

Q_DECLARE_TYPEINFO(QRegExp, Q_MOVABLE_TYPE);

#ifndef QT_NO_DATASTREAM
Q_CORE_EXPORT QDataStream &amp;operator&lt;&lt;(QDataStream &amp;out, const QRegExp &amp;regExp);
Q_CORE_EXPORT QDataStream &amp;operator>>(QDataStream &amp;in, QRegExp &amp;regExp);
#endif

#endif // QT_NO_REGEXP

#endif // QREGEXP_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtCore/qsemaphore.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QSEMAPHORE_H
#define QSEMAPHORE_H

#include &lt;QtCore/qglobal.h>

QT_MODULE(Core)

#ifndef QT_NO_THREAD

class QSemaphorePrivate;

class Q_CORE_EXPORT QSemaphore
{
public:
    explicit QSemaphore(int n = 0);
    ~QSemaphore();

    void acquire(int n = 1);
    bool tryAcquire(int n = 1);

    void release(int n = 1);

    int available() const;

private:
    Q_DISABLE_COPY(QSemaphore)

    QSemaphorePrivate *d;
};

#endif // QT_NO_THREAD

#endif // QSEMAPHORE_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtCore/qsettings.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QSETTINGS_H
#define QSETTINGS_H

#include &lt;QtCore/qobject.h>
#include &lt;QtCore/qvariant.h>
#include &lt;QtCore/qstring.h>

QT_MODULE(Core)

#ifndef QT_NO_SETTINGS

#ifdef QT3_SUPPORT
#include &lt;QtCore/qstringlist.h>
#endif

#include &lt;ctype.h>

#ifdef Status // ### we seem to pick up a macro Status --> int somewhere
#undef Status
#endif

class QIODevice;
class QSettingsPrivate;

#ifndef QT_NO_QOBJECT
class Q_CORE_EXPORT QSettings : public QObject
#else
class Q_CORE_EXPORT QSettings
#endif
{
#ifndef QT_NO_QOBJECT
    Q_OBJECT
#else
    QSettingsPrivate *d_ptr;
#endif
    Q_DECLARE_PRIVATE(QSettings)

public:
    enum Status {
        NoError = 0,
        AccessError,
        FormatError
    };

    enum Format {
        NativeFormat,
        IniFormat,

        InvalidFormat = 16,
        CustomFormat1,
        CustomFormat2,
        CustomFormat3,
        CustomFormat4,
        CustomFormat5,
        CustomFormat6,
        CustomFormat7,
        CustomFormat8,
        CustomFormat9,
        CustomFormat10,
        CustomFormat11,
        CustomFormat12,
        CustomFormat13,
        CustomFormat14,
        CustomFormat15,
        CustomFormat16
    };

    enum Scope {
        UserScope,
        SystemScope
#ifdef QT3_SUPPORT
        ,
        User = UserScope,
        Global = SystemScope
#endif
    };

#ifndef QT_NO_QOBJECT
    explicit QSettings(const QString &amp;organization,
                       const QString &amp;application = QString(), QObject *parent = 0);
    QSettings(Scope scope, const QString &amp;organization,
              const QString &amp;application = QString(), QObject *parent = 0);
    QSettings(Format format, Scope scope, const QString &amp;organization,
	      const QString &amp;application = QString(), QObject *parent = 0);
    QSettings(const QString &amp;fileName, Format format, QObject *parent = 0);
    explicit QSettings(QObject *parent = 0);
#else
    explicit QSettings(const QString &amp;organization,
                       const QString &amp;application = QString());
    QSettings(Scope scope, const QString &amp;organization,
              const QString &amp;application = QString());
    QSettings(Format format, Scope scope, const QString &amp;organization,
              const QString &amp;application = QString());
    QSettings(const QString &amp;fileName, Format format);
#endif
    ~QSettings();

    void clear();
    void sync();
    Status status() const;

    void beginGroup(const QString &amp;prefix);
    void endGroup();
    QString group() const;

    int beginReadArray(const QString &amp;prefix);
    void beginWriteArray(const QString &amp;prefix, int size = -1);
    void endArray();
    void setArrayIndex(int i);

    QStringList allKeys() const;
    QStringList childKeys() const;
    QStringList childGroups() const;
    bool isWritable() const;

    void setValue(const QString &amp;key, const QVariant &amp;value);
    QVariant value(const QString &amp;key, const QVariant &amp;defaultValue = QVariant()) const;

    void remove(const QString &amp;key);
    bool contains(const QString &amp;key) const;

    void setFallbacksEnabled(bool b);
    bool fallbacksEnabled() const;

    QString fileName() const;

    static void setSystemIniPath(const QString &amp;dir); // ### remove in 5.0 (use setPath() instead)
    static void setUserIniPath(const QString &amp;dir);   // ### remove in 5.0 (use setPath() instead)
    static void setPath(Format format, Scope scope, const QString &amp;path);

    typedef QMap&lt;QString, QVariant> SettingsMap;
    typedef bool (*ReadFunc)(QIODevice &amp;device, SettingsMap &amp;map);
    typedef bool (*WriteFunc)(QIODevice &amp;device, const SettingsMap &amp;map);

    static Format registerFormat(const QString &amp;extension, ReadFunc readFunc, WriteFunc writeFunc,
                                 Qt::CaseSensitivity caseSensitivity = Qt::CaseSensitive);

#ifdef QT3_SUPPORT
    inline QT3_SUPPORT bool writeEntry(const QString &amp;key, bool value)
    { setValue(key, value); return isWritable(); }
    inline QT3_SUPPORT bool writeEntry(const QString &amp;key, double value)
    { setValue(key, value); return isWritable(); }
    inline QT3_SUPPORT bool writeEntry(const QString &amp;key, int value)
    { setValue(key, value); return isWritable(); }
    inline QT3_SUPPORT bool writeEntry(const QString &amp;key, const char *value)
    { setValue(key, value); return isWritable(); }
    inline QT3_SUPPORT bool writeEntry(const QString &amp;key, const QString &amp;value)
    { setValue(key, value); return isWritable(); }
    inline QT3_SUPPORT bool writeEntry(const QString &amp;key, const QStringList &amp;value)
    { setValue(key, value); return isWritable(); }
    inline QT3_SUPPORT bool writeEntry(const QString &amp;key, const QStringList &amp;value, QChar separator)
    { setValue(key, value.join(QString(separator))); return isWritable(); }
    inline QT3_SUPPORT QStringList readListEntry(const QString &amp;key, bool *ok = 0)
    {
        if (ok)
            *ok = contains(key);
        return value(key).toStringList();
    }
    inline QT3_SUPPORT QStringList readListEntry(const QString &amp;key, QChar separator, bool *ok = 0)
    {
        if (ok)
            *ok = contains(key);
        QString str = value(key).toString();
        if (str.isEmpty())
            return QStringList();
        return str.split(separator);
    }
    inline QT3_SUPPORT QString readEntry(const QString &amp;key, const QString &amp;defaultValue = QString(),
                                         bool *ok = 0)
    {
        if (ok)
            *ok = contains(key);
        return value(key, defaultValue).toString();
    }
    inline QT3_SUPPORT int readNumEntry(const QString &amp;key, int defaultValue = 0, bool *ok = 0)
    {
        if (ok)
            *ok = contains(key);
        return value(key, defaultValue).toInt();
    }
    inline QT3_SUPPORT double readDoubleEntry(const QString &amp;key, double defaultValue = 0,
                                              bool *ok = 0)
    {
        if (ok)
            *ok = contains(key);
        return value(key, defaultValue).toDouble();
    }
    inline QT3_SUPPORT bool readBoolEntry(const QString &amp;key, bool defaultValue = false,
                                          bool *ok = 0)
    {
        if (ok)
            *ok = contains(key);
        return value(key, defaultValue).toBool();
    }
    inline QT3_SUPPORT bool removeEntry(const QString &amp;key)
    { remove(key); return true; }

    enum System { Unix, Windows, Mac };
    inline QT3_SUPPORT void insertSearchPath(System, const QString &amp;) {}
    inline QT3_SUPPORT void removeSearchPath(System, const QString &amp;) {}

    inline QT3_SUPPORT void setPath(const QString &amp;organization, const QString &amp;application,
                                    Scope scope = Global)
    {
#ifndef QT_NO_QOBJECT
        QObject *parent = this->parent();
        this->~QSettings();
        new (this) QSettings(scope == Global ? QSettings::SystemScope : QSettings::UserScope,
                             organization, application, parent);
#else
        this->~QSettings();
        new (this) QSettings(scope == Global ? QSettings::SystemScope : QSettings::UserScope,
                             organization, application);
#endif
    }
    inline QT3_SUPPORT void resetGroup()
    {
        while (!group().isEmpty())
            endGroup();
    }
    inline QT3_SUPPORT QStringList entryList(const QString &amp;key) const
    {
        QSettings *that = const_cast&lt;QSettings *>(this);
        QStringList result;

        that->beginGroup(key);
        result = that->childKeys();
        that->endGroup();
        return result;
    }
    inline QT3_SUPPORT QStringList subkeyList(const QString &amp;key) const
    {
        QSettings *that = const_cast&lt;QSettings *>(this);
        QStringList result;

        that->beginGroup(key);
        result = that->childGroups();
        that->endGroup();
        return result;
    }
#endif

protected:
#ifndef QT_NO_QOBJECT
    bool event(QEvent *event);
#endif

private:
    Q_DISABLE_COPY(QSettings)
};

#endif // QT_NO_SETTINGS

#endif // QSETTINGS_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtCore/qshareddata.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QSHAREDDATA_H
#define QSHAREDDATA_H

#include &lt;QtCore/qglobal.h>
#include &lt;QtCore/qatomic.h>

QT_MODULE(Core)

template &lt;class T> class QSharedDataPointer;

class Q_CORE_EXPORT QSharedData
{
public:
    QAtomic ref;

    inline QSharedData() : ref(0) { }
    inline QSharedData(const QSharedData &amp;) : ref(0) { }

private:
    // using the assignment operator would lead to corruption in the ref-counting
    QSharedData &amp;operator=(const QSharedData &amp;);
};

template &lt;class T> class QSharedDataPointer
{
public:
    inline void detach() { if (d &amp;&amp; d->ref != 1) detach_helper(); }
    inline T &amp;operator*() { detach(); return *d; }
    inline const T &amp;operator*() const { return *d; }
    inline T *operator->() { detach(); return d; }
    inline const T *operator->() const { return d; }
    inline operator T *() { detach(); return d; }
    inline operator const T *() const { return d; }
    inline T *data() { detach(); return d; }
    inline const T *data() const { return d; }
    inline const T *constData() const { return d; }

    inline bool operator==(const QSharedDataPointer&lt;T> &amp;other) const { return d == other.d; }
    inline bool operator!=(const QSharedDataPointer&lt;T> &amp;other) const { return d != other.d; }

    inline QSharedDataPointer() { d = 0; }
    inline ~QSharedDataPointer() { if (d &amp;&amp; !d->ref.deref()) delete d; }

    explicit QSharedDataPointer(T *data);
    inline QSharedDataPointer(const QSharedDataPointer &amp;o) : d(o.d) { if (d) d->ref.ref(); }
    inline QSharedDataPointer &amp; operator=(const QSharedDataPointer &amp;o) {
        if (o.d != d) {
            T *x = o.d;
            if (x) x->ref.ref();
            x = qAtomicSetPtr(&amp;d, x);
            if (x &amp;&amp; !x->ref.deref())
                delete x;
        }
        return *this;
    }
    inline QSharedDataPointer &amp;operator=(T *o) {
        if (o != d) {
            T *x = o;
            if (x) x->ref.ref();
            x = qAtomicSetPtr(&amp;d, x);
            if (x &amp;&amp; !x->ref.deref())
                delete x;
        }
        return *this;
    }

    inline bool operator!() const { return !d; }

private:
    void detach_helper();

    T *d;
};

template &lt;class T>
Q_INLINE_TEMPLATE QSharedDataPointer&lt;T>::QSharedDataPointer(T *adata) : d(adata)
{ if (d) d->ref.ref(); }

template &lt;class T>
Q_OUTOFLINE_TEMPLATE void QSharedDataPointer&lt;T>::detach_helper()
{
    T *x = new T(*d);
    x->ref.ref();
    x = qAtomicSetPtr(&amp;d, x);
    if (!x->ref.deref())
        delete x;
}

#endif // QSHAREDDATA_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtCore/qsignalmapper.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QSIGNALMAPPER_H
#define QSIGNALMAPPER_H

#include &lt;QtCore/qobject.h>

QT_MODULE(Core)

#ifndef QT_NO_SIGNALMAPPER
class QSignalMapperPrivate;

class Q_CORE_EXPORT QSignalMapper : public QObject
{
    Q_OBJECT
    Q_DECLARE_PRIVATE(QSignalMapper)
public:
    explicit QSignalMapper(QObject *parent = 0);
    ~QSignalMapper();

    void setMapping(QObject *sender, int id);
    void setMapping(QObject *sender, const QString &amp;text);
    void setMapping(QObject *sender, QWidget *widget);
    void setMapping(QObject *sender, QObject *object);
    void removeMappings(QObject *sender);

    QObject *mapping(int id) const;
    QObject *mapping(const QString &amp;text) const;
    QObject *mapping(QWidget *widget) const;
    QObject *mapping(QObject *object) const;

Q_SIGNALS:
    void mapped(int);
    void mapped(const QString &amp;);
    void mapped(QWidget *);
    void mapped(QObject *);

public Q_SLOTS:
    void map();
    void map(QObject *sender);

private:
    Q_DISABLE_COPY(QSignalMapper)
    Q_PRIVATE_SLOT(d_func(), void senderDestroyed())

#ifdef QT3_SUPPORT
public:
    QT3_SUPPORT_CONSTRUCTOR QSignalMapper(QObject *parent, const char *name);
#endif
};
#endif // QT_NO_SIGNALMAPPER

#endif // QSIGNALMAPPER_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtCore/qsize.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QSIZE_H
#define QSIZE_H

#include &lt;QtCore/qnamespace.h>

QT_MODULE(Core)

class Q_CORE_EXPORT QSize
{
public:
    QSize();
    QSize(int w, int h);

    bool isNull() const;
    bool isEmpty() const;
    bool isValid() const;

    int width() const;
    int height() const;
    void setWidth(int w);
    void setHeight(int h);
    void transpose();

    void scale(int w, int h, Qt::AspectRatioMode mode);
    void scale(const QSize &amp;s, Qt::AspectRatioMode mode);

    QSize expandedTo(const QSize &amp;) const;
    QSize boundedTo(const QSize &amp;) const;

    int &amp;rwidth();
    int &amp;rheight();

    QSize &amp;operator+=(const QSize &amp;);
    QSize &amp;operator-=(const QSize &amp;);
    QSize &amp;operator*=(qreal c);
    QSize &amp;operator/=(qreal c);

    friend inline bool operator==(const QSize &amp;, const QSize &amp;);
    friend inline bool operator!=(const QSize &amp;, const QSize &amp;);
    friend inline const QSize operator+(const QSize &amp;, const QSize &amp;);
    friend inline const QSize operator-(const QSize &amp;, const QSize &amp;);
    friend inline const QSize operator*(const QSize &amp;, qreal);
    friend inline const QSize operator*(qreal, const QSize &amp;);
    friend inline const QSize operator/(const QSize &amp;, qreal);

private:
    int wd;
    int ht;
};
Q_DECLARE_TYPEINFO(QSize, Q_MOVABLE_TYPE);

/*****************************************************************************
  QSize stream functions
 *****************************************************************************/

Q_CORE_EXPORT QDataStream &amp;operator&lt;&lt;(QDataStream &amp;, const QSize &amp;);
Q_CORE_EXPORT QDataStream &amp;operator>>(QDataStream &amp;, QSize &amp;);


/*****************************************************************************
  QSize inline functions
 *****************************************************************************/

inline QSize::QSize()
{ wd = ht = -1; }

inline QSize::QSize(int w, int h)
{ wd = w; ht = h; }

inline bool QSize::isNull() const
{ return wd==0 &amp;&amp; ht==0; }

inline bool QSize::isEmpty() const
{ return wd&lt;1 || ht&lt;1; }

inline bool QSize::isValid() const
{ return wd>=0 &amp;&amp; ht>=0; }

inline int QSize::width() const
{ return wd; }

inline int QSize::height() const
{ return ht; }

inline void QSize::setWidth(int w)
{ wd = w; }

inline void QSize::setHeight(int h)
{ ht = h; }

inline void QSize::scale(int w, int h, Qt::AspectRatioMode mode)
{ scale(QSize(w, h), mode); }

inline int &amp;QSize::rwidth()
{ return wd; }

inline int &amp;QSize::rheight()
{ return ht; }

inline QSize &amp;QSize::operator+=(const QSize &amp;s)
{ wd+=s.wd; ht+=s.ht; return *this; }

inline QSize &amp;QSize::operator-=(const QSize &amp;s)
{ wd-=s.wd; ht-=s.ht; return *this; }

inline QSize &amp;QSize::operator*=(qreal c)
{ wd = qRound(wd*c); ht = qRound(ht*c); return *this; }

inline bool operator==(const QSize &amp;s1, const QSize &amp;s2)
{ return s1.wd == s2.wd &amp;&amp; s1.ht == s2.ht; }

inline bool operator!=(const QSize &amp;s1, const QSize &amp;s2)
{ return s1.wd != s2.wd || s1.ht != s2.ht; }

inline const QSize operator+(const QSize &amp; s1, const QSize &amp; s2)
{ return QSize(s1.wd+s2.wd, s1.ht+s2.ht); }

inline const QSize operator-(const QSize &amp;s1, const QSize &amp;s2)
{ return QSize(s1.wd-s2.wd, s1.ht-s2.ht); }

inline const QSize operator*(const QSize &amp;s, qreal c)
{ return QSize(qRound(s.wd*c), qRound(s.ht*c)); }

inline const QSize operator*(qreal c, const QSize &amp;s)
{ return QSize(qRound(s.wd*c), qRound(s.ht*c)); }

inline QSize &amp;QSize::operator/=(qreal c)
{
    Q_ASSERT(!qFuzzyCompare(c, 0));
    wd = qRound(wd/c); ht = qRound(ht/c);
    return *this;
}

inline const QSize operator/(const QSize &amp;s, qreal c)
{
    Q_ASSERT(!qFuzzyCompare(c, 0));
    return QSize(qRound(s.wd/c), qRound(s.ht/c));
}

inline QSize QSize::expandedTo(const QSize &amp; otherSize) const
{
    return QSize(qMax(wd,otherSize.wd), qMax(ht,otherSize.ht));
}

inline QSize QSize::boundedTo(const QSize &amp; otherSize) const
{
    return QSize(qMin(wd,otherSize.wd), qMin(ht,otherSize.ht));
}

#ifndef QT_NO_DEBUG_STREAM
Q_CORE_EXPORT QDebug operator&lt;&lt;(QDebug, const QSize &amp;);
#endif


class Q_CORE_EXPORT QSizeF
{
public:
    QSizeF();
    QSizeF(const QSize &amp;sz);
    QSizeF(qreal w, qreal h);

    bool isNull() const;
    bool isEmpty() const;
    bool isValid() const;

    qreal width() const;
    qreal height() const;
    void setWidth(qreal w);
    void setHeight(qreal h);
    void transpose();

    void scale(qreal w, qreal h, Qt::AspectRatioMode mode);
    void scale(const QSizeF &amp;s, Qt::AspectRatioMode mode);

    QSizeF expandedTo(const QSizeF &amp;) const;
    QSizeF boundedTo(const QSizeF &amp;) const;

    qreal &amp;rwidth();
    qreal &amp;rheight();

    QSizeF &amp;operator+=(const QSizeF &amp;);
    QSizeF &amp;operator-=(const QSizeF &amp;);
    QSizeF &amp;operator*=(qreal c);
    QSizeF &amp;operator/=(qreal c);

    friend inline bool operator==(const QSizeF &amp;, const QSizeF &amp;);
    friend inline bool operator!=(const QSizeF &amp;, const QSizeF &amp;);
    friend inline const QSizeF operator+(const QSizeF &amp;, const QSizeF &amp;);
    friend inline const QSizeF operator-(const QSizeF &amp;, const QSizeF &amp;);
    friend inline const QSizeF operator*(const QSizeF &amp;, qreal);
    friend inline const QSizeF operator*(qreal, const QSizeF &amp;);
    friend inline const QSizeF operator/(const QSizeF &amp;, qreal);

    inline QSize toSize() const;

private:
    qreal wd;
    qreal ht;
};
Q_DECLARE_TYPEINFO(QSizeF, Q_MOVABLE_TYPE);


/*****************************************************************************
  QSizeF stream functions
 *****************************************************************************/

Q_CORE_EXPORT QDataStream &amp;operator&lt;&lt;(QDataStream &amp;, const QSizeF &amp;);
Q_CORE_EXPORT QDataStream &amp;operator>>(QDataStream &amp;, QSizeF &amp;);


/*****************************************************************************
  QSizeF inline functions
 *****************************************************************************/

inline QSizeF::QSizeF()
{ wd = ht = -1.; }

inline QSizeF::QSizeF(const QSize &amp;sz)
    : wd(sz.width()), ht(sz.height())
{
}

inline QSizeF::QSizeF(qreal w, qreal h)
{ wd = w; ht = h; }

inline bool QSizeF::isNull() const
{ return qIsNull(wd) &amp;&amp; qIsNull(ht); }

inline bool QSizeF::isEmpty() const
{ return wd &lt;= 0. || ht &lt;= 0.; }

inline bool QSizeF::isValid() const
{ return wd >= 0. &amp;&amp; ht >= 0.; }

inline qreal QSizeF::width() const
{ return wd; }

inline qreal QSizeF::height() const
{ return ht; }

inline void QSizeF::setWidth(qreal w)
{ wd = w; }

inline void QSizeF::setHeight(qreal h)
{ ht = h; }

inline void QSizeF::scale(qreal w, qreal h, Qt::AspectRatioMode mode)
{ scale(QSizeF(w, h), mode); }

inline qreal &amp;QSizeF::rwidth()
{ return wd; }

inline qreal &amp;QSizeF::rheight()
{ return ht; }

inline QSizeF &amp;QSizeF::operator+=(const QSizeF &amp;s)
{ wd += s.wd; ht += s.ht; return *this; }

inline QSizeF &amp;QSizeF::operator-=(const QSizeF &amp;s)
{ wd -= s.wd; ht -= s.ht; return *this; }

inline QSizeF &amp;QSizeF::operator*=(qreal c)
{ wd *= c; ht *= c; return *this; }

inline bool operator==(const QSizeF &amp;s1, const QSizeF &amp;s2)
{ return qFuzzyCompare(s1.wd, s2.wd) &amp;&amp; qFuzzyCompare(s1.ht, s2.ht); }

inline bool operator!=(const QSizeF &amp;s1, const QSizeF &amp;s2)
{ return !qFuzzyCompare(s1.wd, s2.wd) || !qFuzzyCompare(s1.ht, s2.ht); }

inline const QSizeF operator+(const QSizeF &amp; s1, const QSizeF &amp; s2)
{ return QSizeF(s1.wd+s2.wd, s1.ht+s2.ht); }

inline const QSizeF operator-(const QSizeF &amp;s1, const QSizeF &amp;s2)
{ return QSizeF(s1.wd-s2.wd, s1.ht-s2.ht); }

inline const QSizeF operator*(const QSizeF &amp;s, qreal c)
{ return QSizeF(s.wd*c, s.ht*c); }

inline const QSizeF operator*(qreal c, const QSizeF &amp;s)
{ return QSizeF(s.wd*c, s.ht*c); }

inline QSizeF &amp;QSizeF::operator/=(qreal c)
{
    Q_ASSERT(!qFuzzyCompare(c, 0));
    wd = wd/c; ht = ht/c;
    return *this;
}

inline const QSizeF operator/(const QSizeF &amp;s, qreal c)
{
    Q_ASSERT(!qFuzzyCompare(c, 0));
    return QSizeF(s.wd/c, s.ht/c);
}

inline QSizeF QSizeF::expandedTo(const QSizeF &amp; otherSize) const
{
    return QSizeF(qMax(wd,otherSize.wd), qMax(ht,otherSize.ht));
}

inline QSizeF QSizeF::boundedTo(const QSizeF &amp; otherSize) const
{
    return QSizeF(qMin(wd,otherSize.wd), qMin(ht,otherSize.ht));
}

inline QSize QSizeF::toSize() const
{
    return QSize(qRound(wd), qRound(ht));
}

#ifndef QT_NO_DEBUG_STREAM
Q_CORE_EXPORT QDebug operator&lt;&lt;(QDebug, const QSizeF &amp;);
#endif

#endif // QSIZE_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtCore/qsocketnotifier.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QSOCKETNOTIFIER_H
#define QSOCKETNOTIFIER_H

#include &lt;QtCore/qobject.h>

QT_MODULE(Core)

class Q_CORE_EXPORT QSocketNotifier : public QObject
{
    Q_OBJECT
public:
    enum Type { Read, Write, Exception };

    QSocketNotifier(int socket, Type, QObject *parent = 0);
#ifdef QT3_SUPPORT
    QT3_SUPPORT_CONSTRUCTOR QSocketNotifier(int socket, Type, QObject *parent, const char *name);
#endif
    ~QSocketNotifier();

    inline int socket() const { return sockfd; }
    inline Type type() const { return sntype; }

    inline bool isEnabled() const { return snenabled; }

public Q_SLOTS:
    void setEnabled(bool);

Q_SIGNALS:
    void activated(int socket);

protected:
    bool event(QEvent *);

private:
    Q_DISABLE_COPY(QSocketNotifier)

    int sockfd;
    Type sntype;
    bool snenabled;
};

#endif // QSOCKETNOTIFIER_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtCore/qstring.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QSTRING_H
#define QSTRING_H

#include &lt;QtCore/qchar.h>
#include &lt;QtCore/qbytearray.h>
#include &lt;QtCore/qatomic.h>
#include &lt;QtCore/qnamespace.h>
#ifdef QT_INCLUDE_COMPAT
#include &lt;Qt3Support/q3cstring.h>
#endif

#ifndef QT_NO_STL
# if defined (Q_CC_MSVC_NET) &amp;&amp; _MSC_VER &lt; 1310 // Avoids nasty warning for xlocale, line 450
#  pragma warning (push)
#  pragma warning (disable : 4189)
#  include &lt;string>
#  pragma warning (pop)
# else
#  include &lt;string>
# endif

#ifndef QT_NO_STL_WCHAR
// workaround for some headers not typedef'ing std::wstring
typedef std::basic_string&lt;wchar_t> QStdWString;
#endif // QT_NO_STL_WCHAR

#endif // QT_NO_STL

#include &lt;stdarg.h>

#ifdef truncate
#error qstring.h must be included before any header file that defines truncate
#endif

QT_MODULE(Core)

class QCharRef;
class QRegExp;
class QStringList;
class QTextCodec;
class QLatin1String;

class Q_CORE_EXPORT QString
{
public:
    inline QString();
    QString(const QChar *unicode, int size);
    QString(QChar c);
    QString(int size, QChar c);
    inline QString(const QLatin1String &amp;latin1);
    inline QString(const QString &amp;);
    inline ~QString();
    QString &amp;operator=(QChar c);
    QString &amp;operator=(const QString &amp;);
    inline QString &amp;operator=(const QLatin1String &amp;);

    inline int size() const { return d->size; }
    inline int count() const { return d->size; }
    inline int length() const;
    inline bool isEmpty() const;
    void resize(int size);

    QString &amp;fill(QChar c, int size = -1);
    void truncate(int pos);
    void chop(int n);

    int capacity() const;
    inline void reserve(int size);
    inline void squeeze() { if (d->size &lt; d->alloc) realloc(); }

    inline const QChar *unicode() const;
    inline QChar *data();
    inline const QChar *data() const;
    inline const QChar *constData() const;

    inline void detach();
    inline bool isDetached() const;
    void clear();

    inline const QChar at(int i) const;
    const QChar operator[](int i) const;
    QCharRef operator[](int i);
    const QChar operator[](uint i) const;
    QCharRef operator[](uint i);

    QString arg(qlonglong a, int fieldwidth=0, int base=10, const QChar &amp;fillChar = QLatin1Char(' ')) const;
    QString arg(qulonglong a, int fieldwidth=0, int base=10, const QChar &amp;fillChar = QLatin1Char(' ')) const;
    QString arg(long a, int fieldwidth=0, int base=10, const QChar &amp;fillChar = QLatin1Char(' ')) const;
    QString arg(ulong a, int fieldwidth=0, int base=10, const QChar &amp;fillChar = QLatin1Char(' ')) const;
    QString arg(int a, int fieldWidth = 0, int base = 10, const QChar &amp;fillChar = QLatin1Char(' ')) const;
    QString arg(uint a, int fieldWidth = 0, int base = 10, const QChar &amp;fillChar = QLatin1Char(' ')) const;
    QString arg(short a, int fieldWidth = 0, int base = 10, const QChar &amp;fillChar = QLatin1Char(' ')) const;
    QString arg(ushort a, int fieldWidth = 0, int base = 10, const QChar &amp;fillChar = QLatin1Char(' ')) const;
    QString arg(double a, int fieldWidth = 0, char fmt = 'g', int prec = -1, const QChar &amp;fillChar = QLatin1Char(' ')) const;
    QString arg(char a, int fieldWidth = 0, const QChar &amp;fillChar = QLatin1Char(' ')) const;
    QString arg(QChar a, int fieldWidth = 0, const QChar &amp;fillChar = QLatin1Char(' ')) const;
    QString arg(const QString &amp;a, int fieldWidth = 0, const QChar &amp;fillChar = QLatin1Char(' ')) const;
    QString arg(const QString &amp;a1, const QString &amp;a2) const;
    QString arg(const QString &amp;a1, const QString &amp;a2, const QString &amp;a3) const;
    QString arg(const QString &amp;a1, const QString &amp;a2, const QString &amp;a3, const QString &amp;a4) const;

    QString    &amp;vsprintf(const char *format, va_list ap);
    QString    &amp;sprintf(const char *format, ...)
#if defined(Q_CC_GNU) &amp;&amp; !defined(__INSURE__)
        __attribute__ ((format (printf, 2, 3)))
#endif
        ;

    int indexOf(QChar c, int from = 0, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
    int indexOf(const QString &amp;s, int from = 0, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
    int lastIndexOf(QChar c, int from = -1, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
    int lastIndexOf(const QString &amp;s, int from = -1, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;

    inline QBool contains(QChar c, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
    inline QBool contains(const QString &amp;s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
    int count(QChar c, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
    int count(const QString &amp;s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;

#ifndef QT_NO_REGEXP
    int indexOf(const QRegExp &amp;, int from = 0) const;
    int lastIndexOf(const QRegExp &amp;, int from = -1) const;
    inline QBool contains(const QRegExp &amp;rx) const { return QBool(indexOf(rx) != -1); }
    int count(const QRegExp &amp;) const;
#endif

    enum SectionFlag {
        SectionDefault             = 0x00,
        SectionSkipEmpty           = 0x01,
        SectionIncludeLeadingSep   = 0x02,
        SectionIncludeTrailingSep  = 0x04,
        SectionCaseInsensitiveSeps = 0x08
    };
    Q_DECLARE_FLAGS(SectionFlags, SectionFlag)

    QString section(QChar sep, int start, int end = -1, SectionFlags flags = SectionDefault) const;
    QString section(const QString &amp;in_sep, int start, int end = -1, SectionFlags flags = SectionDefault) const;
#ifndef QT_NO_REGEXP
    QString section(const QRegExp &amp;reg, int start, int end = -1, SectionFlags flags = SectionDefault) const;
#endif

    QString left(int len) const;
    QString right(int len) const;
    QString mid(int i, int len = -1) const;

    bool startsWith(const QString &amp;s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
    bool startsWith(const QLatin1String &amp;s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
    bool startsWith(const QChar &amp;c, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
    bool endsWith(const QString &amp;s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
    bool endsWith(const QLatin1String &amp;s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
    bool endsWith(const QChar &amp;c, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;

    QString leftJustified(int width, QChar fill = QLatin1Char(' '), bool trunc = false) const;
    QString rightJustified(int width, QChar fill = QLatin1Char(' '), bool trunc = false) const;

    QString toLower() const;
    QString toUpper() const;

    QString trimmed() const;
    QString simplified() const;

    QString &amp;insert(int i, QChar c);
    QString &amp;insert(int i, const QChar *uc, int len);
    inline QString &amp;insert(int i, const QString &amp;s) { return insert(i, s.constData(), s.length()); }
    QString &amp;insert(int i, const QLatin1String &amp;s);
    QString &amp;append(QChar c);
    QString &amp;append(const QString &amp;s);
    QString &amp;append(const QLatin1String &amp;s);
    inline QString &amp;prepend(QChar c) { return insert(0, c); }
    inline QString &amp;prepend(const QString &amp;s) { return insert(0, s); }
    inline QString &amp;prepend(const QLatin1String &amp;s) { return insert(0, s); }
    inline QString &amp;operator+=(QChar c) { return append(c); }
    inline QString &amp;operator+=(QChar::SpecialCharacter c) { return append(QChar(c)); }
    inline QString &amp;operator+=(const QString &amp;s) { return append(s); }
    inline QString &amp;operator+=(const QLatin1String &amp;s) { return append(s); }

    QString &amp;remove(int i, int len);
    QString &amp;remove(QChar c, Qt::CaseSensitivity cs = Qt::CaseSensitive);
    QString &amp;remove(const QString &amp;s, Qt::CaseSensitivity cs = Qt::CaseSensitive);
    QString &amp;replace(int i, int len, QChar after);
    QString &amp;replace(int i, int len, const QChar *s, int slen);
    QString &amp;replace(int i, int len, const QString &amp;after);
    QString &amp;replace(QChar before, QChar after, Qt::CaseSensitivity cs = Qt::CaseSensitive);
    QString &amp;replace(QChar c, const QString &amp;after, Qt::CaseSensitivity cs = Qt::CaseSensitive);
    QString &amp;replace(const QString &amp;before, const QString &amp;after,
                     Qt::CaseSensitivity cs = Qt::CaseSensitive);
#ifndef QT_NO_REGEXP
    QString &amp;replace(const QRegExp &amp;rx, const QString &amp;after);
    inline QString &amp;remove(const QRegExp &amp;rx)
    { return replace(rx, QString()); }
#endif

    enum SplitBehavior { KeepEmptyParts, SkipEmptyParts };

    QStringList split(const QString &amp;sep, SplitBehavior behavior = KeepEmptyParts,
                      Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
    QStringList split(const QChar &amp;sep, SplitBehavior behavior = KeepEmptyParts,
                      Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
#ifndef QT_NO_REGEXP
    QStringList split(const QRegExp &amp;sep, SplitBehavior behavior = KeepEmptyParts) const;
#endif

    enum NormalizationForm {
        NormalizationForm_D,
        NormalizationForm_C,
        NormalizationForm_KD,
        NormalizationForm_KC
    };
    QString normalized(NormalizationForm mode) const;
    QString normalized(NormalizationForm mode, QChar::UnicodeVersion version) const;

    const ushort *utf16() const;

    QByteArray toAscii() const;
    QByteArray toLatin1() const;
    QByteArray toUtf8() const;
    QByteArray toLocal8Bit() const;

    static QString fromAscii(const char *, int size = -1);
    static QString fromLatin1(const char *, int size = -1);
    static QString fromUtf8(const char *, int size = -1);
    static QString fromLocal8Bit(const char *, int size = -1);
    static QString fromUtf16(const ushort *, int size = -1);
    static QString fromRawData(const QChar *, int size);

    QString &amp;setUnicode(const QChar *unicode, int size);
    inline QString &amp;setUtf16(const ushort *utf16, int size);

    int compare(const QString &amp;s) const;
    static inline int compare(const QString &amp;s1, const QString &amp;s2)
    { return s1.compare(s2); }
    int localeAwareCompare(const QString&amp; s) const;
    static int localeAwareCompare(const QString&amp; s1, const QString&amp; s2)
    { return s1.localeAwareCompare(s2); }

    short  toShort(bool *ok=0, int base=10) const;
    ushort toUShort(bool *ok=0, int base=10) const;
    int toInt(bool *ok=0, int base=10) const;
    uint toUInt(bool *ok=0, int base=10) const;
    long toLong(bool *ok=0, int base=10) const;
    ulong toULong(bool *ok=0, int base=10) const;
    qlonglong toLongLong(bool *ok=0, int base=10) const;
    qulonglong toULongLong(bool *ok=0, int base=10) const;
    float toFloat(bool *ok=0) const;
    double toDouble(bool *ok=0) const;

    QString &amp;setNum(short, int base=10);
    QString &amp;setNum(ushort, int base=10);
    QString &amp;setNum(int, int base=10);
    QString &amp;setNum(uint, int base=10);
    QString &amp;setNum(long, int base=10);
    QString &amp;setNum(ulong, int base=10);
    QString &amp;setNum(qlonglong, int base=10);
    QString &amp;setNum(qulonglong, int base=10);
    QString &amp;setNum(float, char f='g', int prec=6);
    QString &amp;setNum(double, char f='g', int prec=6);

    static QString number(int, int base=10);
    static QString number(uint, int base=10);
    static QString number(long, int base=10);
    static QString number(ulong, int base=10);
    static QString number(qlonglong, int base=10);
    static QString number(qulonglong, int base=10);
    static QString number(double, char f='g', int prec=6);

    bool operator==(const QString &amp;s) const;
    bool operator&lt;(const QString &amp;s) const;
    inline bool operator>(const QString &amp;s) const { return s &lt; *this; }
    inline bool operator!=(const QString &amp;s) const { return !operator==(s); }
    inline bool operator&lt;=(const QString &amp;s) const { return !operator>(s); }
    inline bool operator>=(const QString &amp;s) const { return !operator&lt;(s); }

    bool operator==(const QLatin1String &amp;s) const;
    bool operator&lt;(const QLatin1String &amp;s) const;
    bool operator>(const QLatin1String &amp;s) const;
    inline bool operator!=(const QLatin1String &amp;s) const { return !operator==(s); }
    inline bool operator&lt;=(const QLatin1String &amp;s) const { return !operator>(s); }
    inline bool operator>=(const QLatin1String &amp;s) const { return !operator&lt;(s); }

    // ASCII compatibility
#ifndef QT_NO_CAST_FROM_ASCII
    inline QString(const char *ch) : d(&amp;shared_null)
    { d->ref.ref(); *this = fromAscii(ch); }
    inline QString(const QByteArray &amp;a) : d(&amp;shared_null)
    { d->ref.ref(); *this = fromAscii(a); }
    inline QString &amp;operator=(const char *ch)
    { return (*this = fromAscii(ch)); }
    inline QString &amp;operator=(const QByteArray &amp;a)
    { return (*this = fromAscii(a)); }
    inline QString &amp;operator=(char c)
    { return (*this = QChar(c)); }

    // these are needed, so it compiles with STL support enabled
    inline QString &amp;prepend(const char *s)
    { return prepend(QString::fromAscii(s)); }
    inline QString &amp;prepend(const QByteArray &amp;s)
    { return prepend(QString(s)); }
    inline QString &amp;append(const char *s)
    { return append(QString::fromAscii(s)); }
    inline QString &amp;append(const QByteArray &amp;s)
    { return append(QString(s)); }
    inline QString &amp;operator+=(const char *s)
    { return append(QString::fromAscii(s)); }
    inline QString &amp;operator+=(const QByteArray &amp;s)
    { return append(QString(s)); }
    inline QString &amp;operator+=(char c)
    { return append(QChar(c)); }

    inline bool operator==(const char *s) const;
    inline bool operator!=(const char *s) const;
    inline bool operator&lt;(const char *s) const;
    inline bool operator&lt;=(const char *s2) const;
    inline bool operator>(const char *s2) const;
    inline bool operator>=(const char *s2) const;

    inline bool operator==(const QByteArray &amp;s) const { return (*this == s.constData()); }
    inline bool operator!=(const QByteArray &amp;s) const { return !(*this == s.constData()); }
    inline bool operator&lt;(const QByteArray &amp;s) const { return *this &lt; s.constData(); }
    inline bool operator>(const QByteArray &amp;s) const { return *this > s.constData(); }
    inline bool operator&lt;=(const QByteArray &amp;s) const { return *this &lt;= s.constData(); }
    inline bool operator>=(const QByteArray &amp;s) const { return *this >= s.constData(); }
#endif

    typedef QChar *iterator;
    typedef const QChar *const_iterator;
    typedef iterator Iterator;
    typedef const_iterator ConstIterator;
    iterator begin();
    const_iterator begin() const;
    const_iterator constBegin() const;
    iterator end();
    const_iterator end() const;
    const_iterator constEnd() const;

    // STL compatibility
    inline void push_back(QChar c) { append(c); }
    inline void push_back(const QString &amp;s) { append(s); }
    inline void push_front(QChar c) { prepend(c); }
    inline void push_front(const QString &amp;s) { prepend(s); }

#ifndef QT_NO_STL
    static inline QString fromStdString(const std::string &amp;s);
    inline std::string toStdString() const;
# ifdef qdoc
    static inline QString fromStdWString(const std::wstring &amp;s);
    inline std::wstring toStdWString() const;
# else
#  ifndef QT_NO_STL_WCHAR
    static inline QString fromStdWString(const QStdWString &amp;s);
    inline QStdWString toStdWString() const;
#  endif // QT_NO_STL_WCHAR
# endif // qdoc
#endif

    // compatibility
    struct Null { };
    static const Null null;
    inline QString(const Null &amp;): d(&amp;shared_null) { d->ref.ref(); }
    inline QString &amp;operator=(const Null &amp;) { *this = QString(); return *this; }
    inline bool isNull() const { return d == &amp;shared_null; }

#ifdef QT3_SUPPORT
    inline QT3_SUPPORT const char *ascii() const { return ascii_helper(); }
    inline QT3_SUPPORT const char *latin1() const { return latin1_helper(); }
    inline QT3_SUPPORT QByteArray utf8() const { return toUtf8(); }
    inline QT3_SUPPORT QByteArray local8Bit() const{ return toLocal8Bit(); }
    inline QT3_SUPPORT void setLength(int nl) { resize(nl); }
    inline QT3_SUPPORT QString copy() const { return *this; }
    inline QT3_SUPPORT QString &amp;remove(QChar c, bool cs)
    { return remove(c, cs?Qt::CaseSensitive:Qt::CaseInsensitive); }
    inline QT3_SUPPORT QString &amp;remove(const QString  &amp;s, bool cs)
    { return remove(s, cs?Qt::CaseSensitive:Qt::CaseInsensitive); }
    inline QT3_SUPPORT QString &amp;replace(QChar c, const QString  &amp;after, bool cs)
    { return replace(c, after, cs?Qt::CaseSensitive:Qt::CaseInsensitive); }
    inline QT3_SUPPORT QString &amp;replace(const QString &amp;before, const QString &amp;after, bool cs)
    { return replace(before, after, cs?Qt::CaseSensitive:Qt::CaseInsensitive); }
#ifndef QT_NO_CAST_FROM_ASCII
    inline QT3_SUPPORT QString &amp;replace(char c, const QString &amp;after, bool cs)
    { return replace(QChar(c), after, cs?Qt::CaseSensitive:Qt::CaseInsensitive); }
    // strange overload, required to avoid GCC 3.3 error
    inline QT3_SUPPORT QString &amp;replace(char c, const QString &amp;after, Qt::CaseSensitivity cs)
    { return replace(QChar(c), after, cs?Qt::CaseSensitive:Qt::CaseInsensitive); }
#endif
    inline QT3_SUPPORT int find(QChar c, int i = 0, bool cs = true) const
    { return indexOf(c, i, cs?Qt::CaseSensitive:Qt::CaseInsensitive); }
    inline QT3_SUPPORT int find(const QString &amp;s, int i = 0, bool cs = true) const
    { return indexOf(s, i, cs?Qt::CaseSensitive:Qt::CaseInsensitive); }
    inline QT3_SUPPORT int findRev(QChar c, int i = -1, bool cs = true) const
    { return lastIndexOf(c, i, cs?Qt::CaseSensitive:Qt::CaseInsensitive); }
    inline QT3_SUPPORT int findRev(const QString &amp;s, int i = -1, bool cs = true) const
    { return lastIndexOf(s, i, cs?Qt::CaseSensitive:Qt::CaseInsensitive); }
#ifndef QT_NO_REGEXP
    inline QT3_SUPPORT int find(const QRegExp &amp;rx, int i=0) const
    { return indexOf(rx, i); }
    inline QT3_SUPPORT int findRev(const QRegExp &amp;rx, int i=-1) const
    { return lastIndexOf(rx, i); }
#endif
    inline QT3_SUPPORT QBool contains(QChar c, bool cs) const
    { return contains(c, cs?Qt::CaseSensitive:Qt::CaseInsensitive); }
    inline QT3_SUPPORT QBool contains(const QString &amp;s, bool cs) const
    { return contains(s, cs?Qt::CaseSensitive:Qt::CaseInsensitive); }
    inline QT3_SUPPORT bool startsWith(const QString &amp;s, bool cs) const
    { return startsWith(s, cs?Qt::CaseSensitive:Qt::CaseInsensitive); }
    inline QT3_SUPPORT bool endsWith(const QString &amp;s, bool cs) const
    { return endsWith(s, cs?Qt::CaseSensitive:Qt::CaseInsensitive); }
    inline QT3_SUPPORT QChar constref(uint i) const
    { return at(i); }
    QT3_SUPPORT QChar &amp;ref(uint i);
    inline QT3_SUPPORT QString leftJustify(int width, QChar fill = QLatin1Char(' '), bool trunc=false) const
    { return leftJustified(width, fill, trunc); }
    inline QT3_SUPPORT QString rightJustify(int width, QChar fill = QLatin1Char(' '), bool trunc=false) const
    { return rightJustified(width, fill, trunc); }
    inline QT3_SUPPORT QString lower() const { return toLower(); }
    inline QT3_SUPPORT QString upper() const { return toUpper(); }
    inline QT3_SUPPORT QString stripWhiteSpace() const { return trimmed(); }
    inline QT3_SUPPORT QString simplifyWhiteSpace() const { return simplified(); }
    inline QT3_SUPPORT QString &amp;setUnicodeCodes(const ushort *unicode_as_ushorts, int size)
    { return setUtf16(unicode_as_ushorts, size); }
    inline QT3_SUPPORT const ushort *ucs2() const { return utf16(); }
    inline static QT3_SUPPORT QString fromUcs2(const ushort *unicode, int size = -1)
    { return fromUtf16(unicode, size); }
    inline QT3_SUPPORT QString &amp;setAscii(const char *str, int len = -1)
    { *this = fromAscii(str, len); return *this; }
    inline QT3_SUPPORT QString &amp;setLatin1(const char *str, int len = -1)
    { *this = fromLatin1(str, len); return *this; }
protected:
    friend class QObject;
    const char *ascii_helper() const;
    const char *latin1_helper() const;
public:
#ifndef QT_NO_CAST_TO_ASCII
    inline QT3_SUPPORT operator const char *() const { return ascii_helper(); }
private:
    QT3_SUPPORT operator QNoImplicitBoolCast() const;
public:
#endif
#endif

    bool isSimpleText() const { if (!d->clean) updateProperties(); return d->simpletext; }
    bool isRightToLeft() const { if (!d->clean) updateProperties(); return d->righttoleft; }

private:
#if defined(QT_NO_CAST_FROM_ASCII) &amp;&amp; !defined(Q_NO_DECLARED_NOT_DEFINED)
    QString &amp;operator+=(const char *s);
    QString &amp;operator+=(const QByteArray &amp;s);
    QString(const char *ch);
    QString(const QByteArray &amp;a);
    QString &amp;operator=(const char  *ch);
    QString &amp;operator=(const QByteArray &amp;a);
#endif

    struct Data {
        QBasicAtomic ref;
        int alloc, size;
        ushort *data;
        ushort clean : 1;
        ushort simpletext : 1;
        ushort righttoleft : 1;
        ushort asciiCache : 1;
        ushort reserved : 12;
        ushort array[1];
    };
    static Data shared_null;
    static Data shared_empty;
    Data *d;
    QString(Data *dd, int /*dummy*/) : d(dd) {}
#ifndef QT_NO_TEXTCODEC
    static QTextCodec *codecForCStrings;
#endif
    static int grow(int);
    static void free(Data *);
    void realloc();
    void realloc(int alloc);
    void expand(int i);
    void updateProperties() const;
    QString multiArg(int numArgs, const QString **args) const;
#ifndef QT_NO_STL
    int toWCharArray(wchar_t *array) const;
    static QString fromWCharArray(const wchar_t *, int);
#endif
    static Data *fromLatin1_helper(const char *str, int size = -1);
    friend class QCharRef;
    friend class QTextCodec;
};


class Q_CORE_EXPORT QLatin1String
{
public:
    inline explicit QLatin1String(const char *s) : chars(s) {}
    inline QLatin1String &amp;operator=(const QLatin1String &amp;other)
    { chars = other.chars; return *this; }

    inline const char *latin1() const { return chars; }

    inline bool operator==(const QString &amp;s) const
    { return s == *this; }
    inline bool operator!=(const QString &amp;s) const
    { return s != *this; }
    inline bool operator>(const QString &amp;s) const
    { return s &lt; *this; }
    inline bool operator&lt;(const QString &amp;s) const
    { return s > *this; }
    inline bool operator>=(const QString &amp;s) const
    { return s &lt;= *this; }
    inline bool operator&lt;=(const QString &amp;s) const
    { return s >= *this; }

private:
    const char *chars;
};


inline QString::QString(const QLatin1String &amp;latin1) : d(fromLatin1_helper(latin1.latin1()))
{ }
inline int QString::length() const
{ return d->size; }
inline const QChar QString::at(int i) const
{ Q_ASSERT(i >= 0 &amp;&amp; i &lt; size()); return d->data[i]; }
inline const QChar QString::operator[](int i) const
{ Q_ASSERT(i >= 0 &amp;&amp; i &lt; size()); return d->data[i]; }
inline const QChar QString::operator[](uint i) const
{ Q_ASSERT(i &lt; uint(size())); return d->data[i]; }
inline bool QString::isEmpty() const
{ return d->size == 0; }
inline const QChar *QString::unicode() const
{ return reinterpret_cast&lt;const QChar*>(d->data); }
inline const QChar *QString::data() const
{ return reinterpret_cast&lt;const QChar*>(d->data); }
inline QChar *QString::data()
{ detach(); return reinterpret_cast&lt;QChar*>(d->data); }
inline const QChar *QString::constData() const
{ return reinterpret_cast&lt;const QChar*>(d->data); }
inline void QString::detach()
{ if (d->ref != 1 || d->data != d->array) realloc(); }
inline bool QString::isDetached() const
{ return d->ref == 1; }
inline QString &amp;QString::operator=(const QLatin1String &amp;s)
{
    *this = fromLatin1(s.latin1());
    return *this;
}
inline void QString::clear()
{ if (!isNull()) *this = QString(); }
inline QString::QString(const QString &amp;s) : d(s.d)
{ Q_ASSERT(&amp;s != this); d->ref.ref(); }
inline int QString::capacity() const
{ return d->alloc; }
inline QString &amp;QString::setNum(short n, int base)
{ return setNum(qlonglong(n), base); }
inline QString &amp;QString::setNum(ushort n, int base)
{ return setNum(qulonglong(n), base); }
inline QString &amp;QString::setNum(int n, int base)
{ return setNum(qlonglong(n), base); }
inline QString &amp;QString::setNum(uint n, int base)
{ return setNum(qulonglong(n), base); }
inline QString &amp;QString::setNum(long n, int base)
{ return setNum(qlonglong(n), base); }
inline QString &amp;QString::setNum(ulong n, int base)
{ return setNum(qulonglong(n), base); }
inline QString &amp;QString::setNum(float n, char f, int prec)
{ return setNum(double(n),f,prec); }
inline QString QString::arg(int a, int fieldWidth, int base, const QChar &amp;fillChar) const
{ return arg(qlonglong(a), fieldWidth, base, fillChar); }
inline QString QString::arg(uint a, int fieldWidth, int base, const QChar &amp;fillChar) const
{ return arg(qulonglong(a), fieldWidth, base, fillChar); }
inline QString QString::arg(long a, int fieldWidth, int base, const QChar &amp;fillChar) const
{ return arg(qlonglong(a), fieldWidth, base, fillChar); }
inline QString QString::arg(ulong a, int fieldWidth, int base, const QChar &amp;fillChar) const
{ return arg(qulonglong(a), fieldWidth, base, fillChar); }
inline QString QString::arg(short a, int fieldWidth, int base, const QChar &amp;fillChar) const
{ return arg(qlonglong(a), fieldWidth, base, fillChar); }
inline QString QString::arg(ushort a, int fieldWidth, int base, const QChar &amp;fillChar) const
{ return arg(qulonglong(a), fieldWidth, base, fillChar); }
inline QString QString::arg(const QString &amp;a1, const QString &amp;a2) const
{ const QString *args[2] = { &amp;a1, &amp;a2 }; return multiArg(2, args); }
inline QString QString::arg(const QString &amp;a1, const QString &amp;a2, const QString &amp;a3) const
{ const QString *args[3] = { &amp;a1, &amp;a2, &amp;a3 }; return multiArg(3, args); }
inline QString QString::arg(const QString &amp;a1, const QString &amp;a2, const QString &amp;a3, const QString &amp;a4) const
{ const QString *args[4] = { &amp;a1, &amp;a2, &amp;a3, &amp;a4 }; return multiArg(4, args); }
inline QString QString::section(QChar asep, int astart, int aend, SectionFlags aflags) const
{ return section(QString(asep), astart, aend, aflags); }


class Q_CORE_EXPORT QCharRef {
    QString &amp;s;
    int i;
    inline QCharRef(QString &amp;str, int idx)
        : s(str),i(idx) {}
    friend class QString;
public:

    // most QChar operations repeated here

    // all this is not documented: We just say "like QChar" and let it be.
    inline operator QChar() const
        { return i &lt; s.d->size ? s.d->data[i] : 0; }
    inline QCharRef &amp;operator=(const QChar &amp;c)
        { if (s.d->ref != 1 || i >= s.d->size) s.expand(i);
          s.d->data[i] = c.unicode();  return *this; }

    // An operator= for each QChar cast constructors
#ifndef QT_NO_CAST_FROM_ASCII
    inline QCharRef &amp;operator=(char c) { return operator=(QChar(c)); }
    inline QCharRef &amp;operator=(uchar c) { return operator=(QChar(c)); }
#endif
    inline QCharRef &amp;operator=(const QCharRef &amp;c) { return operator=(QChar(c)); }
    inline QCharRef &amp;operator=(ushort rc) { return operator=(QChar(rc)); }
    inline QCharRef &amp;operator=(short rc) { return operator=(QChar(rc)); }
    inline QCharRef &amp;operator=(uint rc) { return operator=(QChar(rc)); }
    inline QCharRef &amp;operator=(int rc) { return operator=(QChar(rc)); }

    // each function...
    inline bool isNull() const { return QChar(*this).isNull(); }
    inline bool isPrint() const { return QChar(*this).isPrint(); }
    inline bool isPunct() const { return QChar(*this).isPunct(); }
    inline bool isSpace() const { return QChar(*this).isSpace(); }
    inline bool isMark() const { return QChar(*this).isMark(); }
    inline bool isLetter() const { return QChar(*this).isLetter(); }
    inline bool isNumber() const { return QChar(*this).isNumber(); }
    inline bool isLetterOrNumber() { return QChar(*this).isLetterOrNumber(); }
    inline bool isDigit() const { return QChar(*this).isDigit(); }

    inline int digitValue() const { return QChar(*this).digitValue(); }
    QChar toLower() const { return QChar(*this).toLower(); }
    QChar toUpper() const { return QChar(*this).toUpper(); }
#ifdef QT3_SUPPORT
    inline QT3_SUPPORT QChar lower() const { return QChar(*this).toLower(); }
    inline QT3_SUPPORT QChar upper() const { return QChar(*this).toUpper(); }
#endif

    QChar::Category category() const { return QChar(*this).category(); }
    QChar::Direction direction() const { return QChar(*this).direction(); }
    QChar::Joining joining() const { return QChar(*this).joining(); }
    bool hasMirrored() const { return QChar(*this).hasMirrored(); }
#ifdef QT3_SUPPORT
    inline bool QT3_SUPPORT mirrored() const { return hasMirrored(); }
#endif
    QChar mirroredChar() const { return QChar(*this).mirroredChar(); }
    QString decomposition() const { return QChar(*this).decomposition(); }
    QChar::Decomposition decompositionTag() const { return QChar(*this).decompositionTag(); }
    uchar combiningClass() const { return QChar(*this).combiningClass(); }

    QChar::UnicodeVersion unicodeVersion() const { return QChar(*this).unicodeVersion(); }

    inline uchar cell() const { return QChar(*this).cell(); }
    inline uchar row() const { return QChar(*this).row(); }
    inline void setCell(uchar cell);
    inline void setRow(uchar row);

    const char toAscii() const { return QChar(*this).toAscii(); }
    const char toLatin1() const { return QChar(*this).toLatin1(); }
#ifdef QT3_SUPPORT
    const char latin1() const { return QChar(*this).toLatin1(); }
    const char ascii() const { return QChar(*this).toAscii(); }
#endif
    const ushort unicode() const { return QChar(*this).unicode(); }
};

inline void QCharRef::setRow(uchar arow) { QChar(*this).setRow(arow); }
inline void QCharRef::setCell(uchar acell) { QChar(*this).setCell(acell); }


inline QString::QString() : d(&amp;shared_null) { d->ref.ref(); }
inline QString::~QString() { if (!d->ref.deref()) free(d); }
inline void QString::reserve(int asize) { if (d->ref != 1 || asize > d->alloc) realloc(asize); }
inline QString &amp;QString::setUtf16(const ushort *autf16, int asize)
{ return setUnicode(reinterpret_cast&lt;const QChar *>(autf16), asize); }
inline QCharRef QString::operator[](int i)
{ Q_ASSERT(i >= 0); return QCharRef(*this, i); }
inline QCharRef QString::operator[](uint i)
{ return QCharRef(*this, i); }
inline QString::iterator QString::begin()
{ detach(); return reinterpret_cast&lt;QChar*>(d->data); }
inline QString::const_iterator QString::begin() const
{ return reinterpret_cast&lt;const QChar*>(d->data); }
inline QString::const_iterator QString::constBegin() const
{ return reinterpret_cast&lt;const QChar*>(d->data); }
inline QString::iterator QString::end()
{ detach(); return reinterpret_cast&lt;QChar*>(d->data + d->size); }
inline QString::const_iterator QString::end() const
{ return reinterpret_cast&lt;const QChar*>(d->data + d->size); }
inline QString::const_iterator QString::constEnd() const
{ return reinterpret_cast&lt;const QChar*>(d->data + d->size); }
inline QBool QString::contains(const QString &amp;s, Qt::CaseSensitivity cs) const
{ return QBool(indexOf(s, 0, cs) != -1); }
inline QBool QString::contains(QChar c, Qt::CaseSensitivity cs) const
{ return QBool(indexOf(c, 0, cs) != -1); }


inline bool operator==(QString::Null, QString::Null) { return true; }
inline bool operator==(QString::Null, const QString &amp;s) { return s.isNull(); }
inline bool operator==(const QString &amp;s, QString::Null) { return s.isNull(); }
inline bool operator!=(QString::Null, QString::Null) { return false; }
inline bool operator!=(QString::Null, const QString &amp;s) { return !s.isNull(); }
inline bool operator!=(const QString &amp;s, QString::Null) { return !s.isNull(); }

#ifndef QT_NO_CAST_FROM_ASCII
inline bool QString::operator==(const char *s) const {
#  ifndef QT_NO_TEXTCODEC
    if (codecForCStrings) return (*this == QString::fromAscii(s));
#  endif
    return (*this == QLatin1String(s));
}
inline bool QString::operator!=(const char *s) const{ return !(*this == s); }
inline bool QString::operator&lt;(const char *s) const { return *this &lt; QString::fromAscii(s); }
inline bool QString::operator>(const char *s) const { return *this > QString::fromAscii(s); }
inline bool QString::operator&lt;=(const char *s) const { return *this &lt;= QString::fromAscii(s); }
inline bool QString::operator>=(const char *s) const { return *this >= QString::fromAscii(s); }

inline bool operator==(const char *s1, const QString &amp;s2) { return (s2 == s1); }
inline bool operator!=(const char *s1, const QString &amp;s2) { return !(s2 == s1); }
inline bool operator&lt;(const char *s1, const QString &amp;s2) { return (QString::fromAscii(s1) &lt; s2); }
inline bool operator>(const char *s1, const QString &amp;s2) { return (QString::fromAscii(s1) > s2); }
inline bool operator&lt;=(const char *s1, const QString &amp;s2) { return (QString::fromAscii(s1) &lt;= s2); }
inline bool operator>=(const char *s1, const QString &amp;s2) { return (QString::fromAscii(s1) >= s2); }

inline bool QByteArray::operator==(const QString &amp;s) const { return constData() == s; }
inline bool QByteArray::operator!=(const QString &amp;s) const { return !(constData() == s); }
inline bool QByteArray::operator&lt;(const QString &amp;s) const { return constData() &lt; s; }
inline bool QByteArray::operator>(const QString &amp;s) const { return constData() > s; }
inline bool QByteArray::operator&lt;=(const QString &amp;s) const { return constData() &lt;= s; }
inline bool QByteArray::operator>=(const QString &amp;s) const { return constData() >= s; }
#endif   // QT_NO_CAST_FROM_ASCII

#ifndef QT_NO_CAST_TO_ASCII
inline QByteArray &amp;QByteArray::append(const QString &amp;s)
{ return append(s.toAscii()); }
inline QByteArray &amp;QByteArray::insert(int i, const QString &amp;s)
{ return insert(i, s.toAscii()); }
inline QByteArray &amp;QByteArray::replace(char c, const QString &amp;after)
{ return replace(c, after.toAscii()); }
inline QByteArray &amp;QByteArray::replace(const QString &amp;before, const char *after)
{ return replace(before.toAscii(), after); }
inline QByteArray &amp;QByteArray::replace(const QString &amp;before, const QByteArray &amp;after)
{ return replace(before, after.constData()); }
inline QByteArray &amp;QByteArray::operator+=(const QString &amp;s)
{ return operator+=(s.toAscii()); }
inline int QByteArray::indexOf(const QString &amp;s, int from) const
{ return indexOf(s.toAscii(), from); }
inline int QByteArray::lastIndexOf(const QString &amp;s, int from) const
{ return lastIndexOf(s.toAscii(), from); }
#ifdef QT3_SUPPORT
inline int QByteArray::find(const QString &amp;s, int from) const
{ return indexOf(s, from); }
inline int QByteArray::findRev(const QString &amp;s, int from) const
{ return lastIndexOf(s, from); }
#endif // QT3_SUPPORT
#endif // QT_NO_CAST_TO_ASCII

inline const QString operator+(const QString &amp;s1, const QString &amp;s2)
{ QString t(s1); t += s2; return t; }
inline const QString operator+(const QString &amp;s1, QChar s2)
{ QString t(s1); t += s2; return t; }
inline const QString operator+(QChar s1, const QString &amp;s2)
{ QString t(s1); t += s2; return t; }
#ifndef QT_NO_CAST_FROM_ASCII
inline const QString operator+(const QString &amp;s1, const char *s2)
{ QString t(s1); t += QString::fromAscii(s2); return t; }
inline const QString operator+(const char *s1, const QString &amp;s2)
{ QString t(s1); t += s2; return t; }
inline const QString operator+(char c, const QString &amp;s)
{ QString t = s; t.prepend(QChar(c)); return t; }
inline const QString operator+(const QString &amp;s, char c)
{ QString t(s); t += c; return t; }
inline const QString operator+(const QByteArray &amp;ba, const QString &amp;s)
{ QString t(ba); t += s; return t; }
inline const QString operator+(const QString &amp;s, const QByteArray &amp;ba)
{ QString t(s); t += ba; return t; }
#endif

#ifndef QT_NO_STL
inline std::string QString::toStdString() const
{ const QByteArray asc = toAscii(); return std::string(asc.constData(), asc.length()); }

inline QString QString::fromStdString(const std::string &amp;s)
{ return fromAscii(s.data(), int(s.size())); }

# ifndef QT_NO_STL_WCHAR
inline QStdWString QString::toStdWString() const
{
    QStdWString str;
    str.resize(length());
    str.resize(toWCharArray(&amp;(*str.begin())));
    return str;
}
inline QString QString::fromStdWString(const QStdWString &amp;s)
{ return fromWCharArray(s.data(), int(s.size())); }
# endif
#endif

#ifdef QT3_SUPPORT
inline QChar &amp;QString::ref(uint i)
{
    if (int(i) > d->size || d->ref != 1)
        resize(qMax(int(i), d->size));
    return reinterpret_cast&lt;QChar&amp;>(d->data[i]);
}
#endif

#ifndef QT_NO_DATASTREAM
Q_CORE_EXPORT QDataStream &amp;operator&lt;&lt;(QDataStream &amp;, const QString &amp;);
Q_CORE_EXPORT QDataStream &amp;operator>>(QDataStream &amp;, QString &amp;);
#endif

#ifdef QT3_SUPPORT
class QConstString : public QString
{
public:
    inline QT3_SUPPORT_CONSTRUCTOR QConstString(const QChar *unicode, int size)
        :QString(unicode, size){} // cannot use fromRawData() due to changed semantics
    inline QT3_SUPPORT const QString &amp;string() const { return *this; }
};
#endif

Q_DECLARE_TYPEINFO(QString, Q_MOVABLE_TYPE);
Q_DECLARE_SHARED(QString)
Q_DECLARE_OPERATORS_FOR_FLAGS(QString::SectionFlags)

#if defined(Q_OS_WIN32)
extern Q_CORE_EXPORT QByteArray qt_winQString2MB(const QString&amp; s, int len=-1);
extern Q_CORE_EXPORT QByteArray qt_winQString2MB(const QChar *ch, int len);
extern Q_CORE_EXPORT QString qt_winMB2QString(const char* mb, int len=-1);
#endif

#endif // QSTRING_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtCore/qstringlist.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QSTRINGLIST_H
#define QSTRINGLIST_H

#include &lt;QtCore/qalgorithms.h>
#include &lt;QtCore/qdatastream.h>
#include &lt;QtCore/qlist.h>
#include &lt;QtCore/qregexp.h>
#include &lt;QtCore/qstring.h>
#include &lt;QtCore/qstringmatcher.h>
#ifdef QT_INCLUDE_COMPAT
#include &lt;Qt3Support/q3valuelist.h>
#endif

QT_MODULE(Core)

class QRegExp;

typedef QListIterator&lt;QString> QStringListIterator;
typedef QMutableListIterator&lt;QString> QMutableStringListIterator;

class QStringList : public QList&lt;QString>
{
public:
    inline QStringList() { }
    inline explicit QStringList(const QString &amp;i) { append(i); }
    inline QStringList(const QStringList &amp;l) : QList&lt;QString>(l) { }
    inline QStringList(const QList&lt;QString> &amp;l) : QList&lt;QString>(l) { }

    inline void sort();

    inline QString join(const QString &amp;sep) const;

    inline QStringList filter(const QString &amp;str, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
    inline QBool contains(const QString &amp;str, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;

    inline QStringList &amp;replaceInStrings(const QString &amp;before, const QString &amp;after, Qt::CaseSensitivity cs = Qt::CaseSensitive);

    inline QStringList operator+(const QStringList &amp;other) const
    { QStringList n = *this; n += other; return n; }
    inline QStringList &amp;operator&lt;&lt;(const QString &amp;str)
    { append(str); return *this; }
    inline QStringList &amp;operator&lt;&lt;(const QStringList &amp;l)
    { *this += l; return *this; }

#ifndef QT_NO_REGEXP
    inline QStringList filter(const QRegExp &amp;rx) const;
    inline QStringList &amp;replaceInStrings(const QRegExp &amp;rx, const QString &amp;after);
    inline int indexOf(const QRegExp &amp;rx, int from = 0) const;
    inline int lastIndexOf(const QRegExp &amp;rx, int from = -1) const;
#endif
#if !defined(Q_NO_USING_KEYWORD)
    using QList&lt;QString>::indexOf;
    using QList&lt;QString>::lastIndexOf;
#else
    inline int indexOf(const QString &amp;str, int from = 0) const
    { return QList&lt;QString>::indexOf(str, from); }
    inline int lastIndexOf(const QString &amp;str, int from = -1) const
    { return QList&lt;QString>::lastIndexOf(str, from); }
#endif
#ifdef QT3_SUPPORT
    static inline QT3_SUPPORT QStringList split(const QString &amp;sep, const QString &amp;str, bool allowEmptyEntries = false);
    static inline QT3_SUPPORT QStringList split(const QChar &amp;sep, const QString &amp;str, bool allowEmptyEntries = false);
    inline QT3_SUPPORT QStringList grep(const QString &amp;str, bool cs = true) const
        { return filter(str, cs ? Qt::CaseSensitive : Qt::CaseInsensitive); }

#ifndef QT_NO_REGEXP
    static inline QT3_SUPPORT QStringList split(const QRegExp &amp;sep, const QString &amp;str, bool allowEmptyEntries = false);
    inline QT3_SUPPORT QStringList grep(const QRegExp &amp;rx) const { return filter(rx); }
    inline QT3_SUPPORT QStringList &amp;gres(const QRegExp &amp;rx, const QString &amp;after)
        { return replaceInStrings(rx, after); }
#endif
    inline QT3_SUPPORT QStringList &amp;gres(const QString &amp;before, const QString &amp;after, bool cs = true)
        { return replaceInStrings(before, after, cs ? Qt::CaseSensitive : Qt::CaseInsensitive); }

    inline Iterator QT3_SUPPORT fromLast() { return (isEmpty() ? end() : --end()); }
    inline ConstIterator QT3_SUPPORT fromLast() const { return (isEmpty() ? end() : --end()); }
#endif
};

namespace QtPrivate {
    void Q_CORE_EXPORT QStringList_sort(QStringList *that);
    QString Q_CORE_EXPORT QStringList_join(const QStringList *that, const QString &amp;sep);
    QStringList Q_CORE_EXPORT QStringList_filter(const QStringList *that, const QString &amp;str,
                                               Qt::CaseSensitivity cs);

    QBool Q_CORE_EXPORT QStringList_contains(const QStringList *that, const QString &amp;str, Qt::CaseSensitivity cs);
    void Q_CORE_EXPORT QStringList_replaceInStrings(QStringList *that, const QString &amp;before, const QString &amp;after,
                                      Qt::CaseSensitivity cs);

#ifndef QT_NO_REGEXP
    void Q_CORE_EXPORT QStringList_replaceInStrings(QStringList *that, const QRegExp &amp;rx, const QString &amp;after);
    QStringList Q_CORE_EXPORT QStringList_filter(const QStringList *that, const QRegExp &amp;re);
    int Q_CORE_EXPORT QStringList_indexOf(const QStringList *that, const QRegExp &amp;rx, int from);
    int Q_CORE_EXPORT QStringList_lastIndexOf(const QStringList *that, const QRegExp &amp;rx, int from);
#endif
}

inline void QStringList::sort()
{
    QtPrivate::QStringList_sort(this);
}

inline QString QStringList::join(const QString &amp;sep) const
{
    return QtPrivate::QStringList_join(this, sep);
}

inline QStringList QStringList::filter(const QString &amp;str, Qt::CaseSensitivity cs) const
{
    return QtPrivate::QStringList_filter(this, str, cs);
}

inline QBool QStringList::contains(const QString &amp;str, Qt::CaseSensitivity cs) const
{
    return QtPrivate::QStringList_contains(this, str, cs);
}

inline QStringList &amp;QStringList::replaceInStrings(const QString &amp;before, const QString &amp;after, Qt::CaseSensitivity cs)
{
    QtPrivate::QStringList_replaceInStrings(this, before, after, cs);
    return *this;
}

#ifndef QT_NO_REGEXP
inline QStringList &amp;QStringList::replaceInStrings(const QRegExp &amp;rx, const QString &amp;after)
{
    QtPrivate::QStringList_replaceInStrings(this, rx, after);
    return *this;
}

inline QStringList QStringList::filter(const QRegExp &amp;rx) const
{
    return QtPrivate::QStringList_filter(this, rx);
}

inline int QStringList::indexOf(const QRegExp &amp;rx, int from) const
{
    return QtPrivate::QStringList_indexOf(this, rx, from);
}

inline int QStringList::lastIndexOf(const QRegExp &amp;rx, int from) const
{
    return QtPrivate::QStringList_lastIndexOf(this, rx, from);
}
#endif


#ifdef QT3_SUPPORT
inline QStringList QStringList::split(const QChar &amp;sep, const QString &amp;str, bool allowEmptyEntries)
{
    if (str.isEmpty())
        return QStringList();
    return str.split(sep, allowEmptyEntries ? QString::KeepEmptyParts
                                            : QString::SkipEmptyParts);
}

inline QStringList QStringList::split(const QString &amp;sep, const QString &amp;str, bool allowEmptyEntries)
{
    if (str.isEmpty())
        return QStringList();
    return str.split(sep, allowEmptyEntries ? QString::KeepEmptyParts
                                            : QString::SkipEmptyParts);
}

#ifndef QT_NO_REGEXP
inline QStringList QStringList::split(const QRegExp &amp;sep, const QString &amp;str, bool allowEmptyEntries)
{
    if (str.isEmpty())
        return QStringList();
    return str.split(sep, allowEmptyEntries ? QString::KeepEmptyParts
                                            : QString::SkipEmptyParts);
}
#endif // QT_NO_REGEXP

#endif // QT3_SUPPORT


#ifndef QT_NO_DATASTREAM
inline QDataStream &amp;operator>>(QDataStream &amp;in, QStringList &amp;list)
{
    return operator>>(in, static_cast&lt;QList&lt;QString> &amp;>(list));
}
inline QDataStream &amp;operator&lt;&lt;(QDataStream &amp;out, const QStringList &amp;list)
{
    return operator&lt;&lt;(out, static_cast&lt;const QList&lt;QString> &amp;>(list));
}
#endif // QT_NO_DATASTREAM

#endif // QSTRINGLIST_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtCore/qstringmatcher.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QSTRINGMATCHER_H
#define QSTRINGMATCHER_H

#include &lt;QtCore/qstring.h>

QT_MODULE(Core)

class QStringMatcherPrivate;

class Q_CORE_EXPORT QStringMatcher
{
public:
    QStringMatcher();
    QStringMatcher(const QString &amp;pattern,
                   Qt::CaseSensitivity cs = Qt::CaseSensitive);
    QStringMatcher(const QStringMatcher &amp;other);
    ~QStringMatcher();

    QStringMatcher &amp;operator=(const QStringMatcher &amp;other);

    void setPattern(const QString &amp;pattern);
    void setCaseSensitivity(Qt::CaseSensitivity cs);

    int indexIn(const QString &amp;str, int from = 0) const;
    inline QString pattern() const { return q_pattern; }
    inline Qt::CaseSensitivity caseSensitivity() const { return q_cs; }

private:
    QStringMatcherPrivate *d_ptr;
    QString q_pattern;
    Qt::CaseSensitivity q_cs;
    uint q_skiptable[256];
};

#endif // QSTRINGMATCHER_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtCore/qtemporaryfile.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QTEMPORARYFILE_H
#define QTEMPORARYFILE_H

#include &lt;QtCore/qiodevice.h>
#include &lt;QtCore/qfile.h>

#ifdef open
#error qtemporaryfile.h must be included before any header file that defines open
#endif

QT_MODULE(Core)

class QTemporaryFilePrivate;

class Q_CORE_EXPORT QTemporaryFile : public QFile
{
#ifndef QT_NO_QOBJECT
    Q_OBJECT
#endif
    Q_DECLARE_PRIVATE(QTemporaryFile)

public:
    QTemporaryFile();
    explicit QTemporaryFile(const QString &amp;templateName);
#ifndef QT_NO_QOBJECT
    explicit QTemporaryFile(QObject *parent);
    QTemporaryFile(const QString &amp;templateName, QObject *parent);
#endif
    ~QTemporaryFile();

    bool autoRemove() const;
    void setAutoRemove(bool b);

    // ### Hides open(flags)
    bool open() { return open(QIODevice::ReadWrite); }

    QString fileName() const;
    QString fileTemplate() const;
    void setFileTemplate(const QString &amp;name);

    inline static QTemporaryFile *createLocalFile(const QString &amp;fileName)
        { QFile file(fileName); return createLocalFile(file); }
    static QTemporaryFile *createLocalFile(QFile &amp;file);

    virtual QAbstractFileEngine *fileEngine() const;

protected:
    bool open(OpenMode flags);

private:
    Q_DISABLE_COPY(QTemporaryFile)
};

#endif // QTEMPORARYFILE_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtCore/qtextcodec.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QTEXTCODEC_H
#define QTEXTCODEC_H

#include &lt;QtCore/qstring.h>
#include &lt;QtCore/qlist.h>

QT_MODULE(Core)

#ifndef QT_NO_TEXTCODEC

class QTextCodec;
class QIODevice;

class QTextDecoder;
class QTextEncoder;

class Q_CORE_EXPORT QTextCodec
{
    Q_DISABLE_COPY(QTextCodec)
public:
    static QTextCodec* codecForName(const QByteArray &amp;name);
    static QTextCodec* codecForName(const char *name) { return codecForName(QByteArray(name)); }
    static QTextCodec* codecForMib(int mib);

    static QList&lt;QByteArray> availableCodecs();
    static QList&lt;int> availableMibs();

    static QTextCodec* codecForLocale();
    static void setCodecForLocale(QTextCodec *c);

    static QTextCodec* codecForTr();
    static void setCodecForTr(QTextCodec *c);

    static QTextCodec* codecForCStrings();
    static void setCodecForCStrings(QTextCodec *c);

    static QTextCodec *codecForHtml(const QByteArray &amp;ba);

    QTextDecoder* makeDecoder() const;
    QTextEncoder* makeEncoder() const;

    bool canEncode(QChar) const;
    bool canEncode(const QString&amp;) const;

    QString toUnicode(const QByteArray&amp;) const;
    QString toUnicode(const char* chars) const;
    QByteArray fromUnicode(const QString&amp; uc) const;
    enum ConversionFlag {
        DefaultConversion,
        ConvertInvalidToNull = 0x80000000,
        IgnoreHeader = 0x1
    };
    Q_DECLARE_FLAGS(ConversionFlags, ConversionFlag)

    struct ConverterState {
        ConverterState(ConversionFlags f = DefaultConversion)
            : flags(f), remainingChars(0), invalidChars(0), d(0) { state_data[0] = state_data[1] = state_data[2] = 0; }
        ~ConverterState() { if (d) qFree(d); }
        ConversionFlags flags;
        int remainingChars;
        int invalidChars;
        uint state_data[3];
        void *d;
    private:
        Q_DISABLE_COPY(ConverterState)
    };

    QString toUnicode(const char *in, int length, ConverterState *state = 0) const
        { return convertToUnicode(in, length, state); }
    QByteArray fromUnicode(const QChar *in, int length, ConverterState *state = 0) const
        { return convertFromUnicode(in, length, state); }

    virtual QByteArray name() const = 0;
    virtual QList&lt;QByteArray> aliases() const;
    virtual int mibEnum() const = 0;

protected:
    virtual QString convertToUnicode(const char *in, int length, ConverterState *state) const = 0;
    virtual QByteArray convertFromUnicode(const QChar *in, int length, ConverterState *state) const = 0;

    QTextCodec();
    virtual ~QTextCodec();

public:
#ifdef QT3_SUPPORT
    static QT3_SUPPORT QTextCodec* codecForContent(const char*, int) { return 0; }
    static QT3_SUPPORT const char* locale();
    static QT3_SUPPORT QTextCodec* codecForName(const char* hint, int) { return codecForName(QByteArray(hint)); }
    QT3_SUPPORT QByteArray fromUnicode(const QString&amp; uc, int&amp; lenInOut) const;
    QT3_SUPPORT QString toUnicode(const QByteArray&amp;, int len) const;
    QT3_SUPPORT QByteArray mimeName() const { return name(); }
    static QT3_SUPPORT QTextCodec *codecForIndex(int i) { return codecForName(availableCodecs().at(i)); }
#endif

private:
    friend class QTextCodecCleanup;
    static QTextCodec *cftr;
};
Q_DECLARE_OPERATORS_FOR_FLAGS(QTextCodec::ConversionFlags)

inline QTextCodec* QTextCodec::codecForTr() { return cftr; }
inline void QTextCodec::setCodecForTr(QTextCodec *c) { cftr = c; }
inline QTextCodec* QTextCodec::codecForCStrings() { return QString::codecForCStrings; }
inline void QTextCodec::setCodecForCStrings(QTextCodec *c) { QString::codecForCStrings = c; }

class Q_CORE_EXPORT QTextEncoder {
    Q_DISABLE_COPY(QTextEncoder)
public:
    explicit QTextEncoder(const QTextCodec *codec) : c(codec), state() {}
    ~QTextEncoder();
    QByteArray fromUnicode(const QString&amp; str);
    QByteArray fromUnicode(const QChar *uc, int len);
#ifdef QT3_SUPPORT
    QByteArray fromUnicode(const QString&amp; uc, int&amp; lenInOut);
#endif
private:
    const QTextCodec *c;
    QTextCodec::ConverterState state;
};

class Q_CORE_EXPORT QTextDecoder {
    Q_DISABLE_COPY(QTextDecoder)
public:
    explicit QTextDecoder(const QTextCodec *codec) : c(codec), state() {}
    ~QTextDecoder();
    QString toUnicode(const char* chars, int len);
    QString toUnicode(const QByteArray &amp;ba);
private:
    const QTextCodec *c;
    QTextCodec::ConverterState state;
};

#endif // QT_NO_TEXTCODEC

#endif // QTEXTCODEC_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtCore/qtextcodecplugin.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QTEXTCODECPLUGIN_H
#define QTEXTCODECPLUGIN_H

#include &lt;QtCore/qplugin.h>
#include &lt;QtCore/qfactoryinterface.h>
#include &lt;QtCore/qlist.h>
#include &lt;QtCore/qbytearray.h>

QT_MODULE(Core)

#ifndef QT_NO_TEXTCODECPLUGIN

class QTextCodec;

struct Q_CORE_EXPORT QTextCodecFactoryInterface : public QFactoryInterface
{
    virtual QTextCodec *create(const QString &amp;key) = 0;
};

#define QTextCodecFactoryInterface_iid "com.trolltech.Qt.QTextCodecFactoryInterface"

Q_DECLARE_INTERFACE(QTextCodecFactoryInterface, QTextCodecFactoryInterface_iid)

class Q_CORE_EXPORT QTextCodecPlugin : public QObject, public QTextCodecFactoryInterface
{
    Q_OBJECT
    Q_INTERFACES(QTextCodecFactoryInterface:QFactoryInterface)
public:
    explicit QTextCodecPlugin(QObject *parent = 0);
    ~QTextCodecPlugin();

    virtual QList&lt;QByteArray> names() const = 0;
    virtual QList&lt;QByteArray> aliases() const = 0;
    virtual QTextCodec *createForName(const QByteArray &amp;name) = 0;

    virtual QList&lt;int> mibEnums() const = 0;
    virtual QTextCodec *createForMib(int mib) = 0;

private:
    QStringList keys() const;
    QTextCodec *create(const QString &amp;name);
};

#endif // QT_NO_TEXTCODECPLUGIN

#endif // QTEXTCODECPLUGIN_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtCore/qtextstream.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QTEXTSTREAM_H
#define QTEXTSTREAM_H

#include &lt;QtCore/qiodevice.h>
#include &lt;QtCore/qstring.h>
#include &lt;QtCore/qchar.h>

#ifndef QT_NO_TEXTCODEC
#  ifdef QT3_SUPPORT
#    include &lt;QtCore/qtextcodec.h>
#  endif
#endif

#include &lt;stdio.h>

#ifdef Status
#error qtextstream.h must be included before any header file that defines Status
#endif

QT_MODULE(Core)

class QTextCodec;
class QTextDecoder;

class QTextStreamPrivate;
class Q_CORE_EXPORT QTextStream                                // text stream class
{
    Q_DECLARE_PRIVATE(QTextStream)

public:
    enum RealNumberNotation {
        SmartNotation,
        FixedNotation,
        ScientificNotation
    };
    enum FieldAlignment {
        AlignLeft,
        AlignRight,
        AlignCenter,
        AlignAccountingStyle
    };
    enum Status {
        Ok,
        ReadPastEnd,
        ReadCorruptData
    };
    enum NumberFlag {
        ShowBase = 0x1,
        ForcePoint = 0x2,
        ForceSign = 0x4,
        UppercaseBase = 0x8,
        UppercaseDigits = 0x10
    };
    Q_DECLARE_FLAGS(NumberFlags, NumberFlag)

    QTextStream();
    explicit QTextStream(QIODevice *device);
    explicit QTextStream(FILE *fileHandle, QIODevice::OpenMode openMode = QIODevice::ReadWrite);
    explicit QTextStream(QString *string, QIODevice::OpenMode openMode = QIODevice::ReadWrite);
    explicit QTextStream(QByteArray *array, QIODevice::OpenMode openMode = QIODevice::ReadWrite);
    explicit QTextStream(const QByteArray &amp;array, QIODevice::OpenMode openMode = QIODevice::ReadOnly);
    virtual ~QTextStream();

#ifndef QT_NO_TEXTCODEC
    void setCodec(QTextCodec *codec);
    void setCodec(const char *codecName);
    QTextCodec *codec() const;
    void setAutoDetectUnicode(bool enabled);
    bool autoDetectUnicode() const;
    void setGenerateByteOrderMark(bool generate);
    bool generateByteOrderMark() const;
#endif

    void setDevice(QIODevice *device);
    QIODevice *device() const;

    void setString(QString *string, QIODevice::OpenMode openMode = QIODevice::ReadWrite);
    QString *string() const;

    Status status() const;
    void setStatus(Status status);
    void resetStatus();

    bool atEnd() const;
    void reset();
    void flush();
    bool seek(qint64 pos);

    void skipWhiteSpace();

    QString readLine(qint64 maxlen = 0);
    QString readAll();
    QString read(qint64 maxlen);

    void setFieldAlignment(FieldAlignment alignment);
    FieldAlignment fieldAlignment() const;

    void setPadChar(QChar ch);
    QChar padChar() const;

    void setFieldWidth(int width);
    int fieldWidth() const;

    void setNumberFlags(NumberFlags flags);
    NumberFlags numberFlags() const;

    void setIntegerBase(int base);
    int integerBase() const;

    void setRealNumberNotation(RealNumberNotation notation);
    RealNumberNotation realNumberNotation() const;

    void setRealNumberPrecision(int precision);
    int realNumberPrecision() const;

    QTextStream &amp;operator>>(QChar &amp;ch);
    QTextStream &amp;operator>>(char &amp;ch);
    QTextStream &amp;operator>>(signed short &amp;i);
    QTextStream &amp;operator>>(unsigned short &amp;i);
    QTextStream &amp;operator>>(signed int &amp;i);
    QTextStream &amp;operator>>(unsigned int &amp;i);
    QTextStream &amp;operator>>(signed long &amp;i);
    QTextStream &amp;operator>>(unsigned long &amp;i);
    QTextStream &amp;operator>>(qlonglong &amp;i);
    QTextStream &amp;operator>>(qulonglong &amp;i);
    QTextStream &amp;operator>>(float &amp;f);
    QTextStream &amp;operator>>(double &amp;f);
    QTextStream &amp;operator>>(QString &amp;s);
    QTextStream &amp;operator>>(QByteArray &amp;array);
    QTextStream &amp;operator>>(char *c);

    QTextStream &amp;operator&lt;&lt;(QBool b);
    QTextStream &amp;operator&lt;&lt;(QChar ch);
    QTextStream &amp;operator&lt;&lt;(char ch);
    QTextStream &amp;operator&lt;&lt;(signed short i);
    QTextStream &amp;operator&lt;&lt;(unsigned short i);
    QTextStream &amp;operator&lt;&lt;(signed int i);
    QTextStream &amp;operator&lt;&lt;(unsigned int i);
    QTextStream &amp;operator&lt;&lt;(signed long i);
    QTextStream &amp;operator&lt;&lt;(unsigned long i);
    QTextStream &amp;operator&lt;&lt;(qlonglong i);
    QTextStream &amp;operator&lt;&lt;(qulonglong i);
    QTextStream &amp;operator&lt;&lt;(float f);
    QTextStream &amp;operator&lt;&lt;(double f);
    QTextStream &amp;operator&lt;&lt;(const QString &amp;s);
    QTextStream &amp;operator&lt;&lt;(const QByteArray &amp;array);
    QTextStream &amp;operator&lt;&lt;(const char *c);
    QTextStream &amp;operator&lt;&lt;(const void *ptr);

#ifdef QT3_SUPPORT
    // not marked as QT3_SUPPORT to avoid double compiler warnings, as
    // they are used in the QT3_SUPPORT functions below.
    inline QT3_SUPPORT int flags() const { return flagsInternal(); }
    inline QT3_SUPPORT int flags(int f) { return flagsInternal(f); }

    inline QT3_SUPPORT int setf(int bits)
    { int old = flagsInternal(); flagsInternal(flagsInternal() | bits); return old; }
    inline QT3_SUPPORT int setf(int bits, int mask)
    { int old = flagsInternal(); flagsInternal(flagsInternal() | (bits &amp; mask)); return old; }
    inline QT3_SUPPORT int unsetf(int bits)
    { int old = flagsInternal(); flagsInternal(flagsInternal() &amp; ~bits); return old; }

    inline QT3_SUPPORT int width(int w)
    { int old = fieldWidth(); setFieldWidth(w); return old; }
    inline QT3_SUPPORT int fill(int f)
    { QChar ch = padChar(); setPadChar(QChar(f)); return ch.unicode(); }
    inline QT3_SUPPORT int precision(int p)
    { int old = realNumberPrecision(); setRealNumberPrecision(p); return old; }

    enum {
        skipws       = 0x0001,                        // skip whitespace on input
        left         = 0x0002,                        // left-adjust output
        right        = 0x0004,                        // right-adjust output
        internal     = 0x0008,                        // pad after sign
        bin          = 0x0010,                        // binary format integer
        oct          = 0x0020,                        // octal format integer
        dec          = 0x0040,                        // decimal format integer
        hex          = 0x0080,                        // hex format integer
        showbase     = 0x0100,                        // show base indicator
        showpoint    = 0x0200,                        // force decimal point (float)
        uppercase    = 0x0400,                        // upper-case hex output
        showpos      = 0x0800,                        // add '+' to positive integers
        scientific   = 0x1000,                        // scientific float output
        fixed        = 0x2000                         // fixed float output
    };
    enum {
        basefield = bin | oct | dec | hex,
        adjustfield = left | right | internal,
        floatfield = scientific | fixed
    };

#ifndef QT_NO_TEXTCODEC
    enum Encoding { Locale, Latin1, Unicode, UnicodeNetworkOrder,
                    UnicodeReverse, RawUnicode, UnicodeUTF8 };
    QT3_SUPPORT void setEncoding(Encoding encoding);
#endif
    inline QT3_SUPPORT QString read() { return readAll(); }
    inline QT3_SUPPORT void unsetDevice() { setDevice(0); }
#endif

private:
#ifdef QT3_SUPPORT
    int flagsInternal() const;
    int flagsInternal(int flags);
#endif

    Q_DISABLE_COPY(QTextStream)

    QTextStreamPrivate *d_ptr;
};

Q_DECLARE_OPERATORS_FOR_FLAGS(QTextStream::NumberFlags)

/*****************************************************************************
  QTextStream manipulators
 *****************************************************************************/

typedef QTextStream &amp; (*QTextStreamFunction)(QTextStream &amp;);// manipulator function
typedef void (QTextStream::*QTSMFI)(int); // manipulator w/int argument
typedef void (QTextStream::*QTSMFC)(QChar); // manipulator w/QChar argument

class Q_CORE_EXPORT QTextStreamManipulator
{
public:
    QTextStreamManipulator(QTSMFI m, int a) { mf = m; mc = 0; arg = a; }
    QTextStreamManipulator(QTSMFC m, QChar c) { mf = 0; mc = m; ch = c; }
    void exec(QTextStream &amp;s) { if (mf) { (s.*mf)(arg); } else { (s.*mc)(ch); } }

private:
    QTSMFI mf;                                        // QTextStream member function
    QTSMFC mc;                                        // QTextStream member function
    int arg;                                          // member function argument
    QChar ch;
};

inline QTextStream &amp;operator>>(QTextStream &amp;s, QTextStreamFunction f)
{ return (*f)(s); }

inline QTextStream &amp;operator&lt;&lt;(QTextStream &amp;s, QTextStreamFunction f)
{ return (*f)(s); }

inline QTextStream &amp;operator&lt;&lt;(QTextStream &amp;s, QTextStreamManipulator m)
{ m.exec(s); return s; }

Q_CORE_EXPORT QTextStream &amp;bin(QTextStream &amp;s);
Q_CORE_EXPORT QTextStream &amp;oct(QTextStream &amp;s);
Q_CORE_EXPORT QTextStream &amp;dec(QTextStream &amp;s);
Q_CORE_EXPORT QTextStream &amp;hex(QTextStream &amp;s);

Q_CORE_EXPORT QTextStream &amp;showbase(QTextStream &amp;s);
Q_CORE_EXPORT QTextStream &amp;forcesign(QTextStream &amp;s);
Q_CORE_EXPORT QTextStream &amp;forcepoint(QTextStream &amp;s);
Q_CORE_EXPORT QTextStream &amp;noshowbase(QTextStream &amp;s);
Q_CORE_EXPORT QTextStream &amp;noforcesign(QTextStream &amp;s);
Q_CORE_EXPORT QTextStream &amp;noforcepoint(QTextStream &amp;s);

Q_CORE_EXPORT QTextStream &amp;uppercasebase(QTextStream &amp;s);
Q_CORE_EXPORT QTextStream &amp;uppercasedigits(QTextStream &amp;s);
Q_CORE_EXPORT QTextStream &amp;lowercasebase(QTextStream &amp;s);
Q_CORE_EXPORT QTextStream &amp;lowercasedigits(QTextStream &amp;s);

Q_CORE_EXPORT QTextStream &amp;fixed(QTextStream &amp;s);
Q_CORE_EXPORT QTextStream &amp;scientific(QTextStream &amp;s);

Q_CORE_EXPORT QTextStream &amp;left(QTextStream &amp;s);
Q_CORE_EXPORT QTextStream &amp;right(QTextStream &amp;s);
Q_CORE_EXPORT QTextStream &amp;center(QTextStream &amp;s);

Q_CORE_EXPORT QTextStream &amp;endl(QTextStream &amp;s);
Q_CORE_EXPORT QTextStream &amp;flush(QTextStream &amp;s);
Q_CORE_EXPORT QTextStream &amp;reset(QTextStream &amp;s);

Q_CORE_EXPORT QTextStream &amp;bom(QTextStream &amp;s);

Q_CORE_EXPORT QTextStream &amp;ws(QTextStream &amp;s);

inline QTextStreamManipulator qSetFieldWidth(int width)
{
    QTSMFI func = &amp;QTextStream::setFieldWidth;
    return QTextStreamManipulator(func,width);
}

inline QTextStreamManipulator qSetPadChar(QChar ch)
{
    QTSMFC func = &amp;QTextStream::setPadChar;
    return QTextStreamManipulator(func, ch);
}

inline QTextStreamManipulator qSetRealNumberPrecision(int precision)
{
    QTSMFI func = &amp;QTextStream::setRealNumberPrecision;
    return QTextStreamManipulator(func, precision);
}

#ifdef QT3_SUPPORT
typedef QTextStream QTS;

class Q_CORE_EXPORT QTextIStream : public QTextStream
{
public:
    inline explicit QTextIStream(const QString *s) : QTextStream(const_cast&lt;QString *>(s), QIODevice::ReadOnly) {}
    inline explicit QTextIStream(QByteArray *a) : QTextStream(a, QIODevice::ReadOnly) {}
    inline QTextIStream(FILE *f) : QTextStream(f, QIODevice::ReadOnly) {}

private:
    Q_DISABLE_COPY(QTextIStream)
};

class Q_CORE_EXPORT QTextOStream : public QTextStream
{
public:
    inline explicit QTextOStream(QString *s) : QTextStream(s, QIODevice::WriteOnly) {}
    inline explicit QTextOStream(QByteArray *a) : QTextStream(a, QIODevice::WriteOnly) {}
    inline QTextOStream(FILE *f) : QTextStream(f, QIODevice::WriteOnly) {}

private:
    Q_DISABLE_COPY(QTextOStream)
};
#endif

#endif // QTEXTSTREAM_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtCore/qthread.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QTHREAD_H
#define QTHREAD_H

#include &lt;QtCore/qobject.h>

#include &lt;limits.h>

QT_MODULE(Core)

class QThreadData;
class QThreadPrivate;

#ifndef QT_NO_THREAD
class Q_CORE_EXPORT QThread : public QObject
{
public:
    static Qt::HANDLE currentThreadId();
    static QThread *currentThread();

    explicit QThread(QObject *parent = 0);
    ~QThread();

    enum Priority {
        IdlePriority,

        LowestPriority,
        LowPriority,
        NormalPriority,
        HighPriority,
        HighestPriority,

        TimeCriticalPriority,

        InheritPriority
    };

    void setPriority(Priority priority);
    Priority priority() const;

    bool isFinished() const;
    bool isRunning() const;

    void setStackSize(uint stackSize);
    uint stackSize() const;

    void exit(int retcode = 0);

public Q_SLOTS:
    void start(QThread::Priority = InheritPriority);
    void terminate();
    void quit();

public:
    // default argument causes thread to block indefinately
    bool wait(unsigned long time = ULONG_MAX);

Q_SIGNALS:
    void started();
    void finished();
    void terminated();

protected:
    virtual void run() = 0;
    int exec();

    static void setTerminationEnabled(bool enabled = true);

    static void sleep(unsigned long);
    static void msleep(unsigned long);
    static void usleep(unsigned long);

#ifdef QT3_SUPPORT
public:
    inline QT3_SUPPORT bool finished() const { return isFinished(); }
    inline QT3_SUPPORT bool running() const { return isRunning(); }
#endif

private:
    Q_OBJECT
    Q_DECLARE_PRIVATE(QThread)

    static void initialize();
    static void cleanup();

    friend class QCoreApplication;
    friend class QThreadData;
};

#else // QT_NO_THREAD

class Q_CORE_EXPORT QThread : public QObject
{
public:
    static Qt::HANDLE currentThreadId() { return Qt::HANDLE(currentThread()); }
    static QThread* currentThread()
    { if (!instance) instance = new QThread(); return instance; }
    
private:
    QThread();
    static QThread *instance;

    friend class QCoreApplication;
    friend class QThreadData;
    Q_DECLARE_PRIVATE(QThread)
};

#endif // QT_NO_THREAD

#endif // QTHREAD_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtCore/qthreadstorage.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QTHREADSTORAGE_H
#define QTHREADSTORAGE_H

#include &lt;QtCore/qglobal.h>

#ifndef QT_NO_THREAD

QT_MODULE(Core)

class Q_CORE_EXPORT QThreadStorageData
{
public:
    explicit QThreadStorageData(void (*func)(void *));
    ~QThreadStorageData();

    void** get() const;
    void** set(void* p);

    static void finish(void**);
    int id;
};

#if !defined(QT_MOC_CPP)
// MOC_SKIP_BEGIN

// pointer specialization
template &lt;typename T>
inline
T *&amp;qThreadStorage_localData(QThreadStorageData &amp;d, T **)
{
    void **v = d.get();
    if (!v) v = d.set(0);
    return *(reinterpret_cast&lt;T**>(v));
}

template &lt;typename T>
inline
T *qThreadStorage_localData_const(const QThreadStorageData &amp;d, T **)
{
    void **v = d.get();
    return v ? *(reinterpret_cast&lt;T**>(v)) : 0;
}

template &lt;typename T>
inline
void qThreadStorage_setLocalData(QThreadStorageData &amp;d, T **t)
{ (void) d.set(*t); }

#ifndef QT_NO_PARTIAL_TEMPLATE_SPECIALIZATION

// value-based specialization
template &lt;typename T>
inline
T &amp;qThreadStorage_localData(QThreadStorageData &amp;d, T *)
{
    void **v = d.get();
    if (!v) v = d.set(new T());
    return *(reinterpret_cast&lt;T*>(*v));
}

template &lt;typename T>
inline
T qThreadStorage_localData_const(const QThreadStorageData &amp;d, T *)
{
    void **v = d.get();
    return v ? *(reinterpret_cast&lt;T*>(*v)) : T();
}

template &lt;typename T>
inline
void qThreadStorage_setLocalData(QThreadStorageData &amp;d, T *t)
{ (void) d.set(new T(*t)); }

#endif // QT_NO_PARTIAL_TEMPLATE_SPECIALIZATION

// MOC_SKIP_END
#endif

template &lt;class T>
class QThreadStorage
{
private:
    QThreadStorageData d;

    Q_DISABLE_COPY(QThreadStorage)

    static inline void deleteData(void *x)
    { delete reinterpret_cast&lt;T&amp;>(x); }

public:
    inline QThreadStorage() : d(deleteData) { }
    inline ~QThreadStorage() { }

    inline bool hasLocalData() const
    { return d.get() != 0; }

    inline T&amp; localData()
    { return qThreadStorage_localData(d, reinterpret_cast&lt;T*>(0)); }
    inline T localData() const
    { return qThreadStorage_localData_const(d, reinterpret_cast&lt;T*>(0)); }

    inline void setLocalData(T t)
    { qThreadStorage_setLocalData(d, &amp;t); }
};

#endif // QT_NO_THREAD

#endif // QTHREADSTORAGE_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtCore/qtimer.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QTIMER_H
#define QTIMER_H

#ifndef QT_NO_QOBJECT

#include &lt;QtCore/qbasictimer.h> // conceptual inheritance
#include &lt;QtCore/qobject.h>

QT_MODULE(Core)

class Q_CORE_EXPORT QTimer : public QObject
{
    Q_OBJECT
    Q_PROPERTY(bool singleShot READ isSingleShot WRITE setSingleShot)
    Q_PROPERTY(int interval READ interval WRITE setInterval)
public:
    explicit QTimer(QObject *parent = 0);
#ifdef QT3_SUPPORT
    QT3_SUPPORT_CONSTRUCTOR QTimer(QObject *parent, const char *name);
#endif
    ~QTimer();

    inline bool isActive() const { return id >= 0; }
    int timerId() const { return id; }

    void setInterval(int msec);
    int interval() const { return inter; }

    inline void setSingleShot(bool singleShot);
    inline bool isSingleShot() const { return single; }

    static void singleShot(int msec, QObject *receiver, const char *member);

public Q_SLOTS:
    void start(int msec);

    void start();
    void stop();

#ifdef QT3_SUPPORT
    inline QT_MOC_COMPAT void changeInterval(int msec) { start(msec); };
    QT_MOC_COMPAT int start(int msec, bool sshot);
#endif

Q_SIGNALS:
    void timeout();

protected:
    void timerEvent(QTimerEvent *);

private:
    Q_DISABLE_COPY(QTimer)

    inline int startTimer(int){ return -1;}
    inline void killTimer(int){}

    int id, inter, del;
    uint single : 1;
    uint nulltimer : 1;
};

inline void QTimer::setSingleShot(bool asingleShot) { single = asingleShot; }

#endif // QT_NO_QOBJECT

#endif // QTIMER_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtCore/qtranslator.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QTRANSLATOR_H
#define QTRANSLATOR_H

#include &lt;QtCore/qobject.h>
#include &lt;QtCore/qbytearray.h>

QT_MODULE(Core)

#ifndef QT_NO_TRANSLATION

class QTranslatorPrivate;

class Q_CORE_EXPORT QTranslator : public QObject
{
    Q_OBJECT
public:
    explicit QTranslator(QObject *parent = 0);
#ifdef QT3_SUPPORT
    QT3_SUPPORT_CONSTRUCTOR QTranslator(QObject * parent, const char * name);
#endif
    ~QTranslator();

    virtual QString translate(const char *context, const char *sourceText, const char *comment = 0) const;
    virtual bool isEmpty() const;

    bool load(const QString &amp; filename,
              const QString &amp; directory = QString(),
              const QString &amp; search_delimiters = QString(),
              const QString &amp; suffix = QString());
    bool load(const uchar *data, int len);

#ifdef QT3_SUPPORT
    QT3_SUPPORT QString find(const char *context, const char *sourceText, const char * comment = 0) const
        { return translate(context, sourceText, comment); }
#endif

private:
    Q_DISABLE_COPY(QTranslator)
    Q_DECLARE_PRIVATE(QTranslator)
};

#endif // QT_NO_TRANSLATION

#endif // QTRANSLATOR_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtCore/qurl.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QURL_H
#define QURL_H

#include &lt;QtCore/qobjectdefs.h>
#include &lt;QtCore/qpair.h>
#include &lt;QtCore/qstring.h>

QT_MODULE(Core)

class QByteArray;
class QUrlPrivate;
class QDataStream;

class Q_CORE_EXPORT QUrl
{
public:
    enum ParsingMode {
        TolerantMode,
        StrictMode
    };

    // encoding / toString values
    enum FormattingOption {
        None = 0x0,
        RemoveScheme = 0x1,
        RemovePassword = 0x2,
        RemoveUserInfo = RemovePassword | 0x4,
        RemovePort = 0x8,
        RemoveAuthority = RemoveUserInfo | RemovePort | 0x10,
        RemovePath = 0x20,
        RemoveQuery = 0x40,
        RemoveFragment = 0x80,

        StripTrailingSlash = 0x10000
    };
    Q_DECLARE_FLAGS(FormattingOptions, FormattingOption)

    QUrl();
    QUrl(const QString &amp;url);
    QUrl(const QString &amp;url, ParsingMode mode);
    // ### Qt 5: merge the two constructors, with mode = TolerantMode
    QUrl(const QUrl &amp;copy);
    QUrl &amp;operator =(const QUrl &amp;copy);
    QUrl &amp;operator =(const QString &amp;url);
    ~QUrl();

    void setUrl(const QString &amp;url);
    void setUrl(const QString &amp;url, ParsingMode mode);
    // ### Qt 5: merge the two setUrl() functions, with mode = TolerantMode
    void setEncodedUrl(const QByteArray &amp;url);
    void setEncodedUrl(const QByteArray &amp;url, ParsingMode mode);
    // ### Qt 5: merge the two setEncodedUrl() functions, with mode = TolerantMode

    bool isValid() const;

    bool isEmpty() const;

    void clear();

    void setScheme(const QString &amp;scheme);
    QString scheme() const;

    void setAuthority(const QString &amp;authority);
    QString authority() const;

    void setUserInfo(const QString &amp;userInfo);
    QString userInfo() const;

    void setUserName(const QString &amp;userName);
    QString userName() const;

    void setPassword(const QString &amp;password);
    QString password() const;

    void setHost(const QString &amp;host);
    QString host() const;

    void setPort(int port);
    int port() const;
    int port(int defaultPort) const;
    // ### Qt 5: merge the two port() functions, with defaultPort = -1

    void setPath(const QString &amp;path);
    QString path() const;

    void setEncodedQuery(const QByteArray &amp;query);
    QByteArray encodedQuery() const;

    void setQueryDelimiters(char valueDelimiter, char pairDelimiter);
    char queryValueDelimiter() const;
    char queryPairDelimiter() const;

    void setQueryItems(const QList&lt;QPair&lt;QString, QString> > &amp;query);
    void addQueryItem(const QString &amp;key, const QString &amp;value);
    QList&lt;QPair&lt;QString, QString> > queryItems() const;
    bool hasQueryItem(const QString &amp;key) const;
    QString queryItemValue(const QString &amp;key) const;
    QStringList allQueryItemValues(const QString &amp;key) const;
    void removeQueryItem(const QString &amp;key);
    void removeAllQueryItems(const QString &amp;key);

    void setFragment(const QString &amp;fragment);
    QString fragment() const;

    QUrl resolved(const QUrl &amp;relative) const;

    bool isRelative() const;
    bool isParentOf(const QUrl &amp;url) const;

    static QUrl fromLocalFile(const QString &amp;localfile);
    QString toLocalFile() const;

    QString toString(FormattingOptions options = None) const;

    QByteArray toEncoded(FormattingOptions options = None) const;
    static QUrl fromEncoded(const QByteArray &amp;url);
    static QUrl fromEncoded(const QByteArray &amp;url, ParsingMode mode);
    // ### Qt 5: merge the two fromEncoded() functions, with mode = TolerantMode

    void detach();
    bool isDetached() const;

    bool operator &lt;(const QUrl &amp;url) const;
    bool operator ==(const QUrl &amp;url) const;
    bool operator !=(const QUrl &amp;url) const;

    static QString fromPercentEncoding(const QByteArray &amp;);
    static QByteArray toPercentEncoding(const QString &amp;,
                                        const QByteArray &amp;exclude = QByteArray(),
                                        const QByteArray &amp;include = QByteArray());
    static QString fromPunycode(const QByteArray &amp;);
    static QByteArray toPunycode(const QString &amp;);

#if defined QT3_SUPPORT
    inline QT3_SUPPORT QString protocol() const { return scheme(); }
    inline QT3_SUPPORT void setProtocol(const QString &amp;s) { setScheme(s); }
    inline QT3_SUPPORT void setUser(const QString &amp;s) { setUserName(s); }
    inline QT3_SUPPORT QString user() const { return userName(); }
    inline QT3_SUPPORT bool hasUser() const { return !userName().isEmpty(); }
    inline QT3_SUPPORT bool hasPassword() const { return !password().isEmpty(); }
    inline QT3_SUPPORT bool hasHost() const { return !host().isEmpty(); }
    inline QT3_SUPPORT bool hasPort() const { return port() != -1; }
    inline QT3_SUPPORT bool hasPath() const { return !path().isEmpty(); }
    inline QT3_SUPPORT void setQuery(const QString &amp;txt)
    {
        setEncodedQuery(txt.toLatin1());
    }
    inline QT3_SUPPORT QString query() const
    {
        return QString::fromLatin1(encodedQuery());
    }
    inline QT3_SUPPORT QString ref() const { return fragment(); }
    inline QT3_SUPPORT void setRef(const QString &amp;txt) { setFragment(txt); }
    inline QT3_SUPPORT bool hasRef() const { return !fragment().isEmpty(); }
    inline QT3_SUPPORT void addPath(const QString &amp;p) { setPath(path() + QLatin1String("/") + p); }
    QT3_SUPPORT void setFileName(const QString &amp;txt);
    QT3_SUPPORT QString fileName() const;
    QT3_SUPPORT QString dirPath() const;
    static inline QT3_SUPPORT void decode(QString &amp;url)
    {
        url = QUrl::fromPercentEncoding(url.toLatin1());
    }
    static inline QT3_SUPPORT void encode(QString &amp;url)
    {
        url = QString::fromLatin1(QUrl::toPercentEncoding(url));
    }
    inline QT3_SUPPORT operator QString() const { return toString(); }
    inline QT3_SUPPORT bool cdUp()
    {
        *this = resolved(QUrl(QLatin1String("..")));
        return true;
    }
    static inline QT3_SUPPORT bool isRelativeUrl(const QString &amp;url)
    {
        return QUrl(url).isRelative();
    }
#endif

protected:
#if defined (QT3_SUPPORT)
    inline QT3_SUPPORT void reset() { clear(); }
#endif

private:
    QUrlPrivate *d;
};

Q_DECLARE_TYPEINFO(QUrl, Q_MOVABLE_TYPE);
Q_DECLARE_SHARED(QUrl)
Q_DECLARE_OPERATORS_FOR_FLAGS(QUrl::FormattingOptions)

#ifndef QT_NO_DATASTREAM
Q_CORE_EXPORT QDataStream &amp;operator&lt;&lt;(QDataStream &amp;, const QUrl &amp;);
Q_CORE_EXPORT QDataStream &amp;operator>>(QDataStream &amp;, QUrl &amp;);
#endif

#ifndef QT_NO_DEBUG_STREAM
Q_CORE_EXPORT QDebug operator&lt;&lt;(QDebug, const QUrl &amp;);
#endif

#endif // QURL_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtCore/quuid.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QUUID_H
#define QUUID_H

#include &lt;QtCore/qstring.h>

QT_MODULE(Core)

#if defined(Q_OS_WIN32)
#ifndef GUID_DEFINED
#define GUID_DEFINED
typedef struct _GUID
{
    ulong   Data1;
    ushort  Data2;
    ushort  Data3;
    uchar   Data4[8];
} GUID, *REFGUID, *LPGUID;
#endif
#endif

struct Q_CORE_EXPORT QUuid
{
    enum Variant {
        VarUnknown        =-1,
        NCS                = 0, // 0 - -
        DCE                = 2, // 1 0 -
        Microsoft        = 6, // 1 1 0
        Reserved        = 7  // 1 1 1
    };

    enum Version {
        VerUnknown        =-1,
        Time                = 1, // 0 0 0 1
        EmbeddedPOSIX        = 2, // 0 0 1 0
        Name                = 3, // 0 0 1 1
        Random                = 4  // 0 1 0 0
    };

    QUuid()
    {
        data1 = 0;
        data2 = 0;
        data3 = 0;
        for(int i = 0; i &lt; 8; i++)
            data4[i] = 0;
    }
    QUuid(uint l, ushort w1, ushort w2, uchar b1, uchar b2, uchar b3, uchar b4, uchar b5, uchar b6, uchar b7, uchar b8)
    {
        data1 = l;
        data2 = w1;
        data3 = w2;
        data4[0] = b1;
        data4[1] = b2;
        data4[2] = b3;
        data4[3] = b4;
        data4[4] = b5;
        data4[5] = b6;
        data4[6] = b7;
        data4[7] = b8;
    }
#ifndef QT_NO_QUUID_STRING
    QUuid(const QString &amp;);
    QUuid(const char *);
    QString toString() const;
    operator QString() const { return toString(); }
#endif
    bool isNull() const;

    bool operator==(const QUuid &amp;orig) const
    {
        uint i;
        if (data1 != orig.data1 || data2 != orig.data2 ||
             data3 != orig.data3)
            return false;

        for(i = 0; i &lt; 8; i++)
            if (data4[i] != orig.data4[i])
                return false;

        return true;
    }

    bool operator!=(const QUuid &amp;orig) const
    {
        return !(*this == orig);
    }

    bool operator&lt;(const QUuid &amp;other) const;
    bool operator>(const QUuid &amp;other) const;

#if defined(Q_OS_WIN32)
    // On Windows we have a type GUID that is used by the platform API, so we
    // provide convenience operators to cast from and to this type.
    QUuid(const GUID &amp;guid)
    {
        data1 = guid.Data1;
        data2 = guid.Data2;
        data3 = guid.Data3;
        for(int i = 0; i &lt; 8; i++)
            data4[i] = guid.Data4[i];
    }

    QUuid &amp;operator=(const GUID &amp;guid)
    {
        *this = QUuid(guid);
        return *this;
    }

    operator GUID() const
    {
        GUID guid = { data1, data2, data3, { data4[0], data4[1], data4[2], data4[3], data4[4], data4[5], data4[6], data4[7] } };
        return guid;
    }

    bool operator==(const GUID &amp;guid) const
    {
        return *this == QUuid(guid);
    }

    bool operator!=(const GUID &amp;guid) const
    {
        return !(*this == guid);
    }
#endif
    static QUuid createUuid();
    QUuid::Variant variant() const;
    QUuid::Version version() const;

    uint    data1;
    ushort  data2;
    ushort  data3;
    uchar   data4[8];
};

#ifndef QT_NO_DATASTREAM
Q_CORE_EXPORT QDataStream &amp;operator&lt;&lt;(QDataStream &amp;, const QUuid &amp;);
Q_CORE_EXPORT QDataStream &amp;operator>>(QDataStream &amp;, QUuid &amp;);
#endif

#endif // QUUID_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtCore/qvariant.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QVARIANT_H
#define QVARIANT_H

#include &lt;QtCore/qatomic.h>
#include &lt;QtCore/qbytearray.h>
#include &lt;QtCore/qlist.h>
#include &lt;QtCore/qmetatype.h>
#include &lt;QtCore/qmap.h>
#include &lt;QtCore/qstring.h>

QT_MODULE(Core)

class QBitArray;
class QDataStream;
class QDate;
class QDateTime;
class QLine;
class QLineF;
class QLocale;
class QStringList;
class QTime;
class QPoint;
class QPointF;
class QSize;
class QSizeF;
class QRect;
class QRectF;
class QRegExp;
class QTextFormat;
class QTextLength;
class QUrl;
class QVariant;
class QVariantComparisonHelper;

#ifndef QT_NO_MEMBER_TEMPLATES
template &lt;typename T>
inline QVariant qVariantFromValue(const T &amp;);

template &lt;typename T>
inline void qVariantSetValue(QVariant &amp;, const T &amp;);

template&lt;typename T>
inline T qVariantValue(const QVariant &amp;);

template&lt;typename T>
inline bool qVariantCanConvert(const QVariant &amp;);
#endif

class Q_CORE_EXPORT QVariant
{
 public:
    enum Type {
        Invalid = 0,

        Bool = 1,
        Int = 2,
        UInt = 3,
        LongLong = 4,
        ULongLong = 5,
        Double = 6,
        Char = 7,
        Map = 8,
        List = 9,
        String = 10,
        StringList = 11,
        ByteArray = 12,
        BitArray = 13,
        Date = 14,
        Time = 15,
        DateTime = 16,
        Url = 17,
        Locale = 18,
        Rect = 19,
        RectF = 20,
        Size = 21,
        SizeF = 22,
        Line = 23,
        LineF = 24,
        Point = 25,
        PointF = 26,
	RegExp = 27,

#ifdef QT3_SUPPORT
        ColorGroup = 63,
#endif
        Font = 64,
        Pixmap = 65,
        Brush = 66,
        Color = 67,
        Palette = 68,
        Icon = 69,
        Image = 70,
        Polygon = 71,
        Region = 72,
        Bitmap = 73,
        Cursor = 74,
        SizePolicy = 75,
        KeySequence = 76,
        Pen = 77,
        TextLength = 78,
        TextFormat = 79,
        UserType = 127,
#ifdef QT3_SUPPORT
        IconSet = Icon,
        CString = ByteArray,
        PointArray = Polygon,
#endif
        LastType = 0xffffffff // need this so that gcc >= 3.4 allocates 32 bits for Type
    };

    inline QVariant();
    ~QVariant();
    QVariant(Type type);
    QVariant(int typeOrUserType, const void *copy);
    QVariant(const QVariant &amp;other);

#ifndef QT_NO_DATASTREAM
    QVariant(QDataStream &amp;s);
#endif

    QVariant(int i);
    QVariant(uint ui);
    QVariant(qlonglong ll);
    QVariant(qulonglong ull);
    QVariant(bool b);
    QVariant(double d);
    QVariant(const char *str);

    QVariant(const QByteArray &amp;bytearray);
    QVariant(const QBitArray &amp;bitarray);
    QVariant(const QString &amp;string);
    QVariant(const QLatin1String &amp;string);
    QVariant(const QStringList &amp;stringlist);
    QVariant(const QChar &amp;qchar);
    QVariant(const QDate &amp;date);
    QVariant(const QTime &amp;time);
    QVariant(const QDateTime &amp;datetime);
    QVariant(const QList&lt;QVariant> &amp;list);
    QVariant(const QMap&lt;QString,QVariant> &amp;map);
#ifndef QT_NO_GEOM_VARIANT
    QVariant(const QSize &amp;size);
    QVariant(const QSizeF &amp;size);
    QVariant(const QPoint &amp;pt);
    QVariant(const QPointF &amp;pt);
    QVariant(const QLine &amp;line);
    QVariant(const QLineF &amp;line);
    QVariant(const QRect &amp;rect);
    QVariant(const QRectF &amp;rect);
#endif
    QVariant(const QUrl &amp;url);
    QVariant(const QLocale &amp;locale);
    QVariant(const QRegExp &amp;regExp);

    QVariant&amp; operator=(const QVariant &amp;other);

    Type type() const;
    int userType() const;
    const char *typeName() const;

    bool canConvert(Type t) const;
    bool convert(Type t);

#ifdef QT3_SUPPORT
    inline QT3_SUPPORT bool canCast(Type t) const
    { return canConvert(t); }
    inline QT3_SUPPORT bool cast(Type t)
    { return convert(t); }
#endif

    inline bool isValid() const;
    bool isNull() const;

    void clear();

    void detach();
    inline bool isDetached() const;

    int toInt(bool *ok = 0) const;
    uint toUInt(bool *ok = 0) const;
    qlonglong toLongLong(bool *ok = 0) const;
    qulonglong toULongLong(bool *ok = 0) const;
    bool toBool() const;
    double toDouble(bool *ok = 0) const;
    QByteArray toByteArray() const;
    QBitArray toBitArray() const;
    QString toString() const;
    QStringList toStringList() const;
    QChar toChar() const;
    QDate toDate() const;
    QTime toTime() const;
    QDateTime toDateTime() const;
    QList&lt;QVariant> toList() const;
    QMap&lt;QString, QVariant> toMap() const;

#ifndef QT_NO_GEOM_VARIANT
    QPoint toPoint() const;
    QPointF toPointF() const;
    QRect toRect() const;
    QSize toSize() const;
    QSizeF toSizeF() const;
    QLine toLine() const;
    QLineF toLineF() const;
    QRectF toRectF() const;
#endif
    QUrl toUrl() const;
    QLocale toLocale() const;
    QRegExp toRegExp() const;

#ifdef QT3_SUPPORT
    inline QT3_SUPPORT int &amp;asInt();
    inline QT3_SUPPORT uint &amp;asUInt();
    inline QT3_SUPPORT qlonglong &amp;asLongLong();
    inline QT3_SUPPORT qulonglong &amp;asULongLong();
    inline QT3_SUPPORT bool &amp;asBool();
    inline QT3_SUPPORT double &amp;asDouble();
    inline QT3_SUPPORT QByteArray &amp;asByteArray();
    inline QT3_SUPPORT QBitArray &amp;asBitArray();
    inline QT3_SUPPORT QString &amp;asString();
    inline QT3_SUPPORT QStringList &amp;asStringList();
    inline QT3_SUPPORT QDate &amp;asDate();
    inline QT3_SUPPORT QTime &amp;asTime();
    inline QT3_SUPPORT QDateTime &amp;asDateTime();
    inline QT3_SUPPORT QList&lt;QVariant> &amp;asList();
    inline QT3_SUPPORT QMap&lt;QString,QVariant> &amp;asMap();
    inline QT3_SUPPORT QPoint &amp;asPoint();
    inline QT3_SUPPORT QRect &amp;asRect();
    inline QT3_SUPPORT QSize &amp;asSize();
#endif //QT3_SUPPORT

#ifndef QT_NO_DATASTREAM
    void load(QDataStream &amp;ds);
    void save(QDataStream &amp;ds) const;
#endif
    static const char *typeToName(Type type);
    static Type nameToType(const char *name);

#ifdef QT3_SUPPORT
    inline QT3_SUPPORT_CONSTRUCTOR QVariant(bool val, int) { create(Bool, &amp;val); }
    inline QT3_SUPPORT const QByteArray toCString() const { return toByteArray(); }
    inline QT3_SUPPORT QByteArray &amp;asCString() { return *reinterpret_cast&lt;QByteArray *>(castOrDetach(ByteArray)); }
#endif

    void *data();
    const void *constData() const;
    inline const void *data() const { return constData(); }

#ifndef QT_NO_MEMBER_TEMPLATES
    template&lt;typename T>
    inline void setValue(const T &amp;value);

    template&lt;typename T>
    inline T value() const
    { return qVariantValue&lt;T>(*this); }

    template&lt;typename T>
    static inline QVariant fromValue(const T &amp;value)
    { return qVariantFromValue(value); }

    template&lt;typename T>
    bool canConvert() const
    { return qVariantCanConvert&lt;T>(*this); }
#endif

 public:
#ifndef qdoc
    struct PrivateShared
    {
        inline PrivateShared() : ref(1) { }
        inline PrivateShared(void *v) : ref(1) { ptr = v; }
        void *ptr;
        QAtomic ref;
    };
    struct Private
    {
        inline Private(): type(Invalid), is_shared(false), is_null(true) { data.ptr = 0; }
        inline Private(const Private &amp;other)
            : data(other.data), type(other.type),
              is_shared(other.is_shared), is_null(other.is_null)
        {}
        union Data
        {
            int i;
            uint u;
            bool b;
            double d;
            qlonglong ll;
            qulonglong ull;
            void *ptr;
            PrivateShared *shared;
        } data;
        uint type : 30;
        uint is_shared : 1;
        uint is_null : 1;
    };
 public:
    typedef void (*f_construct)(Private *, const void *);
    typedef void (*f_clear)(Private *);
    typedef bool (*f_null)(const Private *);
#ifndef QT_NO_DATASTREAM
    typedef void (*f_load)(Private *, QDataStream &amp;);
    typedef void (*f_save)(const Private *, QDataStream &amp;);
#endif
    typedef bool (*f_compare)(const Private *, const Private *);
    typedef bool (*f_convert)(const QVariant::Private *d, Type t, void *, bool *);
    typedef bool (*f_canConvert)(const QVariant::Private *d, Type t);
    typedef void (*f_debugStream)(QDebug, const QVariant &amp;);
    struct Handler {
        f_construct construct;
        f_clear clear;
        f_null isNull;
#ifndef QT_NO_DATASTREAM
        f_load load;
        f_save save;
#endif
        f_compare compare;
        f_convert convert;
        f_canConvert canConvert;
        f_debugStream debugStream;
    };
#endif

    inline bool operator==(const QVariant &amp;v) const
    { return cmp(v); }
    inline bool operator!=(const QVariant &amp;v) const
    { return !cmp(v); }

protected:
    friend inline bool qvariant_cast_helper(const QVariant &amp;, QVariant::Type, void *);
    friend int qRegisterGuiVariant();
    friend inline bool operator==(const QVariant &amp;, const QVariantComparisonHelper &amp;);
#ifndef QT_NO_DEBUG_STREAM
    friend Q_CORE_EXPORT QDebug operator&lt;&lt;(QDebug, const QVariant &amp;);
#endif
    Private d;

#ifndef QT_MOC
    static const Handler *handler;
#endif

    void create(int type, const void *copy);
#ifdef QT3_SUPPORT
    void *castOrDetach(Type t);
#endif
    bool cmp(const QVariant &amp;other) const;

private:
#ifndef QT3_SUPPORT
    // force compile error, prevent QVariant(QVariant::Type, int) to be called
    inline QVariant(bool, int) { Q_ASSERT(false); }
#endif
};

#ifndef QT_MOC
typedef QList&lt;QVariant> QVariantList;
typedef QMap&lt;QString, QVariant> QVariantMap;

inline bool qvariant_cast_helper(const QVariant &amp;v, QVariant::Type tp, void *ptr)
{ return QVariant::handler->convert(&amp;v.d, tp, ptr, 0); }

template &lt;typename T>
inline int qt_variant_metatype_id(T *)
{ return QMetaTypeId&lt;T>::qt_metatype_id(); }

template&lt;>
inline int qt_variant_metatype_id(QVariantMap *) { return QVariant::Map; }
template&lt;>
inline int qt_variant_metatype_id(QVariantList *) { return QVariant::List; }
template&lt;>
inline int qt_variant_metatype_id(QStringList *) { return QVariant::StringList; }
class QFont;
template&lt;>
inline int qt_variant_metatype_id(QFont *) { return QVariant::Font; }
class QPixmap;
template&lt;>
inline int qt_variant_metatype_id(QPixmap *) { return QVariant::Pixmap; }
class QBrush;
template&lt;>
inline int qt_variant_metatype_id(QBrush *) { return QVariant::Brush; }
template&lt;>
inline int qt_variant_metatype_id(QRect *) { return QVariant::Rect; }
template&lt;>
inline int qt_variant_metatype_id(QSize *) { return QVariant::Size; }
template&lt;>
inline int qt_variant_metatype_id(QSizeF *) { return QVariant::SizeF; }
class QColor;
template&lt;>
inline int qt_variant_metatype_id(QColor *) { return QVariant::Color; }
class QPalette;
template&lt;>
inline int qt_variant_metatype_id(QPalette *) { return QVariant::Palette; }
class QIcon;
template&lt;>
inline int qt_variant_metatype_id(QIcon *) { return QVariant::Icon; }
class QPoint;
template&lt;>
inline int qt_variant_metatype_id(QPoint *) { return QVariant::Point; }
class QPointF;
template&lt;>
inline int qt_variant_metatype_id(QPointF *) { return QVariant::PointF; }
class QImage;
template&lt;>
inline int qt_variant_metatype_id(QImage*) { return QVariant::Image; }
class QPolygon;
template&lt;>
inline int qt_variant_metatype_id(QPolygon *) { return QVariant::Polygon; }
class QRegion;
template&lt;>
inline int qt_variant_metatype_id(QRegion *) { return QVariant::Region; }
class QBitmap;
template&lt;>
inline int qt_variant_metatype_id(QBitmap *) { return QVariant::Bitmap; }
class QCursor;
template&lt;>
inline int qt_variant_metatype_id(QCursor *) { return QVariant::Cursor; }
class QSizePolicy;
template&lt;>
inline int qt_variant_metatype_id(QSizePolicy *) { return QVariant::SizePolicy; }
template&lt;>
inline int qt_variant_metatype_id(QDate *) { return QVariant::Date; }
template&lt;>
inline int qt_variant_metatype_id(QTime *) { return QVariant::Time; }
template&lt;>
inline int qt_variant_metatype_id(QDateTime *) { return QVariant::DateTime; }
template&lt;>
inline int qt_variant_metatype_id(QBitArray *) { return QVariant::BitArray; }
class QKeySequence;
template&lt;>
inline int qt_variant_metatype_id(QKeySequence *) { return QVariant::KeySequence; }
class QPen;
template&lt;>
inline int qt_variant_metatype_id(QPen *) { return QVariant::Pen; }
template&lt;>
inline int qt_variant_metatype_id(qlonglong *) { return QVariant::LongLong; }
template&lt;>
inline int qt_variant_metatype_id(qulonglong *) { return QVariant::ULongLong; }
template&lt;>
inline int qt_variant_metatype_id(QUrl *) { return QVariant::Url; }
class QTextLength;
template&lt;>
inline int qt_variant_metatype_id(QTextLength *) { return QVariant::TextLength; }
class QTextFormat;
template&lt;>
inline int qt_variant_metatype_id(QTextFormat *) { return QVariant::TextFormat; }
template&lt;>
inline int qt_variant_metatype_id(QLocale *) { return QVariant::Locale; }
template&lt;>
inline int qt_variant_metatype_id(QRegExp *) { return QVariant::RegExp; }
template&lt;>
inline int qt_variant_metatype_id(QLineF *) { return QVariant::LineF; }
template&lt;>
inline int qt_variant_metatype_id(QLine *) { return QVariant::Line; }
template&lt;>
inline int qt_variant_metatype_id(QRectF *) { return QVariant::RectF; }
#ifdef QT3_SUPPORT
class QColorGroup;
template&lt;>
inline int qt_variant_metatype_id(QColorGroup *) { return QVariant::ColorGroup; }
#endif

template &lt;typename T>
inline QVariant qVariantFromValue(const T &amp;t)
{
    return QVariant(qt_variant_metatype_id&lt;T>(reinterpret_cast&lt;T *>(0)), &amp;t);
}

template &lt;>
inline QVariant qVariantFromValue(const QVariant &amp;t) { return t; }

template &lt;typename T>
inline void qVariantSetValue(QVariant &amp;v, const T &amp;t)
{
    v = QVariant(qt_variant_metatype_id&lt;T>(reinterpret_cast&lt;T *>(0)), &amp;t);
}
#endif

inline QVariant::QVariant() {}
inline bool QVariant::isValid() const { return d.type != Invalid; }

#ifdef QT3_SUPPORT
inline int &amp;QVariant::asInt()
{ return *reinterpret_cast&lt;int *>(castOrDetach(Int)); }
inline uint &amp;QVariant::asUInt()
{ return *reinterpret_cast&lt;uint *>(castOrDetach(UInt)); }
inline qlonglong &amp;QVariant::asLongLong()
{ return *reinterpret_cast&lt;qlonglong *>(castOrDetach(LongLong)); }
inline qulonglong &amp;QVariant::asULongLong()
{ return *reinterpret_cast&lt;qulonglong *>(castOrDetach(ULongLong)); }
inline bool &amp;QVariant::asBool()
{ return *reinterpret_cast&lt;bool *>(castOrDetach(Bool)); }
inline double &amp;QVariant::asDouble()
{ return *reinterpret_cast&lt;double *>(castOrDetach(Double)); }
inline QByteArray&amp; QVariant::asByteArray()
{ return *reinterpret_cast&lt;QByteArray *>(castOrDetach(ByteArray)); }
inline QBitArray&amp; QVariant::asBitArray()
{ return *reinterpret_cast&lt;QBitArray *>(castOrDetach(BitArray)); }
inline QString&amp; QVariant::asString()
{ return *reinterpret_cast&lt;QString *>(castOrDetach(String)); }
inline QStringList&amp; QVariant::asStringList()
{ return *reinterpret_cast&lt;QStringList *>(castOrDetach(StringList)); }
inline QDate&amp; QVariant::asDate()
{ return *reinterpret_cast&lt;QDate *>(castOrDetach(Date)); }
inline QTime&amp; QVariant::asTime()
{ return *reinterpret_cast&lt;QTime *>(castOrDetach(Time)); }
inline QDateTime&amp; QVariant::asDateTime()
{ return *reinterpret_cast&lt;QDateTime *>(castOrDetach(DateTime)); }
inline QList&lt;QVariant>&amp; QVariant::asList()
{ return *reinterpret_cast&lt;QList&lt;QVariant> *>(castOrDetach(List)); }
inline QMap&lt;QString, QVariant>&amp; QVariant::asMap()
{ return *reinterpret_cast&lt;QMap&lt;QString, QVariant> *>(castOrDetach(Map)); }
inline QPoint &amp;QVariant::asPoint()
{ return *reinterpret_cast&lt;QPoint *>(castOrDetach(Point)); }
inline QRect &amp;QVariant::asRect()
{ return *reinterpret_cast&lt;QRect *>(castOrDetach(Rect)); }
inline QSize &amp;QVariant::asSize()
{ return *reinterpret_cast&lt;QSize *>(castOrDetach(Size)); }
#endif //QT3_SUPPORT

#ifndef QT_NO_MEMBER_TEMPLATES
template&lt;typename T>
inline void QVariant::setValue(const T &amp;avalue)
{ qVariantSetValue(*this, avalue); }
#endif

#ifndef QT_NO_DATASTREAM
Q_CORE_EXPORT QDataStream&amp; operator>> (QDataStream&amp; s, QVariant&amp; p);
Q_CORE_EXPORT QDataStream&amp; operator&lt;&lt; (QDataStream&amp; s, const QVariant&amp; p);
Q_CORE_EXPORT QDataStream&amp; operator>> (QDataStream&amp; s, QVariant::Type&amp; p);
Q_CORE_EXPORT QDataStream&amp; operator&lt;&lt; (QDataStream&amp; s, const QVariant::Type p);
#endif

inline bool QVariant::isDetached() const
{ return !d.is_shared || d.data.shared->ref == 1; }


#ifdef qdoc
    inline bool operator==(const QVariant &amp;v1, const QVariant &amp;v2);
    inline bool operator!=(const QVariant &amp;v1, const QVariant &amp;v2);
#else

/* Helper class to add one more level of indirection to prevent
   implicit casts.
*/
class QVariantComparisonHelper
{
public:
    inline QVariantComparisonHelper(const QVariant &amp;var)
        : v(&amp;var) {}
private:
    friend inline bool operator==(const QVariant &amp;, const QVariantComparisonHelper &amp;);
    const QVariant *v;
};

inline bool operator==(const QVariant &amp;v1, const QVariantComparisonHelper &amp;v2)
{
    return v1.cmp(*v2.v);
}

inline bool operator!=(const QVariant &amp;v1, const QVariantComparisonHelper &amp;v2)
{
    return !operator==(v1, v2);
}
#endif

#ifndef QT_MOC
#if !defined qdoc &amp;&amp; defined Q_CC_MSVC &amp;&amp; _MSC_VER &lt; 1300

template&lt;typename T> T qvariant_cast(const QVariant &amp;v, T * = 0)
{
    const int vid = qt_variant_metatype_id&lt;T>(static_cast&lt;T *>(0));
    if (vid == v.userType())
        return *reinterpret_cast&lt;const T *>(v.constData());
    if (vid &lt; int(QVariant::UserType)) {
        T t;
        qvariant_cast_helper(v, QVariant::Type(vid), &amp;t);
        return t;
    }
    return T();
}

template&lt;typename T>
inline T qVariantValue(const QVariant &amp;variant, T *t = 0)
{ return qvariant_cast&lt;T>(variant, t); }

template&lt;typename T>
inline bool qVariantCanConvert(const QVariant &amp;variant, T *t = 0)
{
    return variant.canConvert(static_cast&lt;QVariant::Type>(qt_variant_metatype_id&lt;T>(t)));
}
#else

template&lt;typename T> T qvariant_cast(const QVariant &amp;v)
{
    const int vid = qt_variant_metatype_id&lt;T>(static_cast&lt;T *>(0));
    if (vid == v.userType())
        return *reinterpret_cast&lt;const T *>(v.constData());
    if (vid &lt; int(QVariant::UserType)) {
        T t;
        qvariant_cast_helper(v, QVariant::Type(vid), &amp;t);
        return t;
    }
    return T();
}

template&lt;typename T>
inline T qVariantValue(const QVariant &amp;variant)
{ return qvariant_cast&lt;T>(variant); }

template&lt;typename T>
inline bool qVariantCanConvert(const QVariant &amp;variant)
{
    return variant.canConvert(static_cast&lt;QVariant::Type>(
                qt_variant_metatype_id&lt;T>(static_cast&lt;T *>(0))));
}
#endif
#endif
Q_DECLARE_SHARED(QVariant)
Q_DECLARE_TYPEINFO(QVariant, Q_MOVABLE_TYPE);

#ifndef QT_NO_DEBUG_STREAM
Q_CORE_EXPORT QDebug operator&lt;&lt;(QDebug, const QVariant &amp;);
Q_CORE_EXPORT QDebug operator&lt;&lt;(QDebug, const QVariant::Type);
#endif

#endif // QVARIANT_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtCore/qvector.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QVECTOR_H
#define QVECTOR_H

#include &lt;QtCore/qiterator.h>
#include &lt;QtCore/qatomic.h>
#include &lt;QtCore/qalgorithms.h>
#include &lt;QtCore/qlist.h>

#ifndef QT_NO_STL
#include &lt;iterator>
#include &lt;vector>
#endif
#include &lt;stdlib.h>
#include &lt;string.h>

QT_MODULE(Core)

struct Q_CORE_EXPORT QVectorData
{
    QBasicAtomic ref;
    int alloc;
    int size;
    uint sharable : 1;

    static QVectorData shared_null;
    static QVectorData *malloc(int sizeofTypedData, int size, int sizeofT, QVectorData *init);
    static int grow(int sizeofTypedData, int size, int sizeofT, bool excessive);
};

template &lt;typename T>
struct QVectorTypedData
{
    QBasicAtomic ref;
    int alloc;
    int size;
    uint sharable : 1;
    T array[1];
};

template &lt;typename T>
class QVector
{
    typedef QVectorTypedData&lt;T> Data;
    union { QVectorData *p; QVectorTypedData&lt;T> *d; };

public:
    inline QVector() : p(&amp;QVectorData::shared_null) { d->ref.ref(); }
    explicit QVector(int size);
    QVector(int size, const T &amp;t);
    inline QVector(const QVector &amp;v) : d(v.d) { d->ref.ref(); if (!d->sharable) detach_helper(); }
    inline ~QVector() { if (!d) return; if (!d->ref.deref()) free(d); }
    QVector &amp;operator=(const QVector &amp;v);
    bool operator==(const QVector &amp;v) const;
    inline bool operator!=(const QVector &amp;v) const { return !(*this == v); }

    inline int size() const { return d->size; }

    inline bool isEmpty() const { return d->size == 0; }

    void resize(int size);

    inline int capacity() const { return d->alloc; }
    void reserve(int size);
    inline void squeeze() { realloc(d->size, d->size); }

    inline void detach() { if (d->ref != 1) detach_helper(); }
    inline bool isDetached() const { return d->ref == 1; }
    inline void setSharable(bool sharable) { if (!sharable) detach(); d->sharable = sharable; }

    inline T *data() { detach(); return d->array; }
    inline const T *data() const { return d->array; }
    inline const T *constData() const { return d->array; }
    void clear();

    const T &amp;at(int i) const;
    T &amp;operator[](int i);
    const T &amp;operator[](int i) const;
    void append(const T &amp;t);
    void prepend(const T &amp;t);
    void insert(int i, const T &amp;t);
    void insert(int i, int n, const T &amp;t);
    void replace(int i, const T &amp;t);
    void remove(int i);
    void remove(int i, int n);

    QVector &amp;fill(const T &amp;t, int size = -1);

    int indexOf(const T &amp;t, int from = 0) const;
    int lastIndexOf(const T &amp;t, int from = -1) const;
    bool contains(const T &amp;t) const;
    int count(const T &amp;t) const;

    // STL-style
    typedef T* iterator;
    typedef const T* const_iterator;
    inline iterator begin() { detach(); return d->array; }
    inline const_iterator begin() const { return d->array; }
    inline const_iterator constBegin() const { return d->array; }
    inline iterator end() { detach(); return d->array + d->size; }
    inline const_iterator end() const { return d->array + d->size; }
    inline const_iterator constEnd() const { return d->array + d->size; }
    iterator insert(iterator before, int n, const T &amp;x);
    inline iterator insert(iterator before, const T &amp;x) { return insert(before, 1, x); }
    iterator erase(iterator begin, iterator end);
    inline iterator erase(iterator pos) { return erase(pos, pos+1); }

    // more Qt
    inline int count() const { return d->size; }
    inline T&amp; first() { Q_ASSERT(!isEmpty()); return *begin(); }
    inline const T &amp;first() const { Q_ASSERT(!isEmpty()); return *begin(); }
    inline T&amp; last() { Q_ASSERT(!isEmpty()); return *(end()-1); }
    inline const T &amp;last() const { Q_ASSERT(!isEmpty()); return *(end()-1); }
    QVector&lt;T> mid(int pos, int length = -1) const;

    T value(int i) const;
    T value(int i, const T &amp;defaultValue) const;

    // STL compatibility
    typedef T value_type;
    typedef value_type* pointer;
    typedef const value_type* const_pointer;
    typedef value_type&amp; reference;
    typedef const value_type&amp; const_reference;
#ifndef QT_NO_STL
    typedef ptrdiff_t difference_type;
#else
    typedef int difference_type;
#endif
    typedef iterator Iterator;
    typedef const_iterator ConstIterator;
    typedef int size_type;
    inline void push_back(const T &amp;t) { append(t); }
    inline void push_front(const T &amp;t) { prepend(t); }
    void pop_back() { Q_ASSERT(!isEmpty()); erase(end()-1); }
    void pop_front() { Q_ASSERT(!isEmpty()); erase(begin()); }
    inline bool empty() const
    { return d->size == 0; }
    inline T&amp; front() { return first(); }
    inline const_reference front() const { return first(); }
    inline reference back() { return last(); }
    inline const_reference back() const { return last(); }

    // comfort
    QVector &amp;operator+=(const QVector &amp;l);
    inline QVector operator+(const QVector &amp;l) const
    { QVector n = *this; n += l; return n; }
    inline QVector &amp;operator+=(const T &amp;t)
    { append(t); return *this; }
    inline QVector &amp;operator&lt;&lt; (const T &amp;t)
    { append(t); return *this; }
    inline QVector &amp;operator&lt;&lt;(const QVector &amp;l)
    { *this += l; return *this; }

    QList&lt;T> toList() const;

    static QVector&lt;T> fromList(const QList&lt;T> &amp;list);

#ifndef QT_NO_STL
    static inline QVector&lt;T> fromStdVector(const std::vector&lt;T> &amp;vector)
    { QVector&lt;T> tmp; qCopy(vector.begin(), vector.end(), std::back_inserter(tmp)); return tmp; }
    inline std::vector&lt;T> toStdVector() const
    { std::vector&lt;T> tmp; qCopy(constBegin(), constEnd(), std::back_inserter(tmp)); return tmp; }
#endif

private:
    void detach_helper();
    QVectorData *malloc(int alloc);
    void realloc(int size, int alloc);
    void free(Data *d);
};

template &lt;typename T>
void QVector&lt;T>::detach_helper()
{ realloc(d->size, d->alloc); }
template &lt;typename T>
void QVector&lt;T>::reserve(int asize)
{ if (asize > d->alloc) realloc(d->size, asize); }
template &lt;typename T>
void QVector&lt;T>::resize(int asize)
{ realloc(asize, (asize > d->alloc || (asize &lt; d->size &amp;&amp; asize &lt; (d->alloc >> 1))) ?
          QVectorData::grow(sizeof(Data), asize, sizeof(T), QTypeInfo&lt;T>::isStatic)
          : d->alloc); }
template &lt;typename T>
inline void QVector&lt;T>::clear()
{ *this = QVector&lt;T>(); }
template &lt;typename T>
inline const T &amp;QVector&lt;T>::at(int i) const
{ Q_ASSERT_X(i >= 0 &amp;&amp; i &lt; d->size, "QVector&lt;T>::at", "index out of range");
  return d->array[i]; }
template &lt;typename T>
inline const T &amp;QVector&lt;T>::operator[](int i) const
{ Q_ASSERT_X(i >= 0 &amp;&amp; i &lt; d->size, "QVector&lt;T>::operator[]", "index out of range");
  return d->array[i]; }
template &lt;typename T>
inline T &amp;QVector&lt;T>::operator[](int i)
{ Q_ASSERT_X(i >= 0 &amp;&amp; i &lt; d->size, "QVector&lt;T>::operator[]", "index out of range");
  return data()[i]; }
template &lt;typename T>
inline void QVector&lt;T>::insert(int i, const T &amp;t)
{ Q_ASSERT_X(i >= 0 &amp;&amp; i &lt;= d->size, "QVector&lt;T>::insert", "index out of range");
  insert(begin() + i, 1, t); }
template &lt;typename T>
inline void QVector&lt;T>::insert(int i, int n, const T &amp;t)
{ Q_ASSERT_X(i >= 0 &amp;&amp; i &lt;= d->size, "QVector&lt;T>::insert", "index out of range");
  insert(begin() + i, n, t); }
template &lt;typename T>
inline void QVector&lt;T>::remove(int i, int n)
{ Q_ASSERT_X(i >= 0 &amp;&amp; n >= 0 &amp;&amp; i + n &lt;= d->size, "QVector&lt;T>::remove", "index out of range");
  erase(begin() + i, begin() + i + n); }
template &lt;typename T>
inline void QVector&lt;T>::remove(int i)
{ Q_ASSERT_X(i >= 0 &amp;&amp; i &lt; d->size, "QVector&lt;T>::remove", "index out of range");
  erase(begin() + i, begin() + i + 1); }
template &lt;typename T>
inline void QVector&lt;T>::prepend(const T &amp;t)
{ insert(begin(), 1, t); }

template &lt;typename T>
inline void QVector&lt;T>::replace(int i, const T &amp;t)
{
    Q_ASSERT_X(i >= 0 &amp;&amp; i &lt; d->size, "QVector&lt;T>::replace", "index out of range");
    const T copy(t);
    data()[i] = copy;
}

template &lt;typename T>
QVector&lt;T> &amp;QVector&lt;T>::operator=(const QVector&lt;T> &amp;v)
{
    typename QVector::Data *x = v.d;
    x->ref.ref();
    x = qAtomicSetPtr(&amp;d, x);
    if (!x->ref.deref())
        free(x);
    if (!d->sharable)
        detach_helper();
    return *this;
}

template &lt;typename T>
inline QVectorData *QVector&lt;T>::malloc(int aalloc)
{
    return static_cast&lt;QVectorData *>(qMalloc(sizeof(Data) + (aalloc - 1) * sizeof(T)));
}

template &lt;typename T>
QVector&lt;T>::QVector(int asize)
{
    p = malloc(asize);
    d->ref.init(1);
    d->alloc = d->size = asize;
    d->sharable = true;
    if (QTypeInfo&lt;T>::isComplex) {
        T* b = d->array;
        T* i = d->array + d->size;
        while (i != b)
            new (--i) T;
    } else {
        qMemSet(d->array, 0, asize * sizeof(T));
    }
}

template &lt;typename T>
QVector&lt;T>::QVector(int asize, const T &amp;t)
{
    p = malloc(asize);
    d->ref.init(1);
    d->alloc = d->size = asize;
    d->sharable = true;
    T* i = d->array + d->size;
    while (i != d->array)
        new (--i) T(t);
}

template &lt;typename T>
void QVector&lt;T>::free(Data *x)
{
    if (QTypeInfo&lt;T>::isComplex) {
        T* b = x->array;
        T* i = b + x->size;
        while (i-- != b)
             i->~T();
    }
    qFree(x);
}

template &lt;typename T>
void QVector&lt;T>::realloc(int asize, int aalloc)
{
    T *j, *i, *b;
    union { QVectorData *p; Data *d; } x;
    x.d = d;

    if (QTypeInfo&lt;T>::isComplex &amp;&amp; aalloc == d->alloc &amp;&amp; d->ref == 1) {
        // pure resize
        i = d->array + d->size;
        j = d->array + asize;
        if (i > j) {
            while (i-- != j)
                i->~T();
        } else {
            while (j-- != i)
                new (j) T;
        }
        d->size = asize;
        return;
    }

    if (aalloc != d->alloc || d->ref != 1) {
        // (re)allocate memory
        if (QTypeInfo&lt;T>::isStatic) {
            x.p = malloc(aalloc);
        } else if (d->ref != 1) {
            x.p = QVectorData::malloc(sizeof(Data), aalloc, sizeof(T), p);
        } else {
            if (QTypeInfo&lt;T>::isComplex) {
                // call the destructor on all objects that need to be
                // destroyed when shrinking
                if (asize &lt; d->size) {
                    j = d->array + asize;
                    i = d->array + d->size;
                    while (i-- != j)
                        i->~T();
                    i = d->array + asize;
                }
            }
            x.p = p =
                  static_cast&lt;QVectorData *>(qRealloc(p, sizeof(Data) + (aalloc - 1) * sizeof(T)));
        }
        x.d->ref.init(1);
        x.d->sharable = true;
    }
    if (QTypeInfo&lt;T>::isComplex) {
        if (asize &lt; d->size) {
            j = d->array + asize;
            i = x.d->array + asize;
        } else {
            // construct all new objects when growing
            i = x.d->array + asize;
            j = x.d->array + d->size;
            while (i != j)
                new (--i) T;
            j = d->array + d->size;
        }
        if (i != j) {
            // copy objects from the old array into the new array
            b = x.d->array;
            while (i != b)
                new (--i) T(*--j);
        }
    } else if (asize > d->size) {
        // initialize newly allocated memory to 0
        qMemSet(x.d->array + d->size, 0, (asize - d->size) * sizeof(T));
    }
    x.d->size = asize;
    x.d->alloc = aalloc;
    if (d != x.d) {
        x.d = qAtomicSetPtr(&amp;d, x.d);
        if (!x.d->ref.deref())
            free(x.d);
    }
}

template&lt;typename T>
Q_OUTOFLINE_TEMPLATE T QVector&lt;T>::value(int i) const
{
    if (i &lt; 0 || i >= p->size) {
        return T();
    }
    return d->array[i];
}
template&lt;typename T>
Q_OUTOFLINE_TEMPLATE T QVector&lt;T>::value(int i, const T &amp;defaultValue) const
{
    return ((i &lt; 0 || i >= p->size) ? defaultValue : d->array[i]);
}

template &lt;typename T>
void QVector&lt;T>::append(const T &amp;t)
{
    const T copy(t);
    if (d->ref != 1 || d->size + 1 > d->alloc)
        realloc(d->size, QVectorData::grow(sizeof(Data), d->size + 1, sizeof(T),
                                           QTypeInfo&lt;T>::isStatic));
    if (QTypeInfo&lt;T>::isComplex)
        new (d->array + d->size) T(copy);
    else
        d->array[d->size] = copy;
    ++d->size;
}


template &lt;typename T>
Q_TYPENAME QVector&lt;T>::iterator QVector&lt;T>::insert(iterator before, size_type n, const T &amp;t)
{
    int offset = before - d->array;
    if (n != 0) {
        const T copy(t);
        if (d->ref != 1 || d->size + n > d->alloc)
            realloc(d->size, QVectorData::grow(sizeof(Data), d->size + n, sizeof(T),
                                               QTypeInfo&lt;T>::isStatic));
        if (QTypeInfo&lt;T>::isStatic) {
            T *b = d->array + d->size;
            T *i = d->array + d->size + n;
            while (i != b)
                new (--i) T;
            i = d->array + d->size;
            T *j = i + n;
            b = d->array + offset;
            while (i != b)
                *--j = *--i;
            i = b+n;
            while (i != b)
                *--i = copy;
        } else {
            T *b = d->array + offset;
            T *i = b + n;
            memmove(i, b, (d->size - offset) * sizeof(T));
            while (i != b)
                new (--i) T(copy);
        }
        d->size += n;
    }
    return d->array + offset;
}

template &lt;typename T>
Q_TYPENAME QVector&lt;T>::iterator QVector&lt;T>::erase(iterator abegin, iterator aend)
{
    int f = abegin - d->array;
    int l = aend - d->array;
    int n = l - f;
    detach();
    if (QTypeInfo&lt;T>::isComplex) {
        qCopy(d->array+l, d->array+d->size, d->array+f);
        T *i = d->array+d->size;
        T* b = d->array+d->size-n;
        while (i != b) {
            --i;
            i->~T();
        }
    } else {
        memmove(d->array + f, d->array + l, (d->size-l)*sizeof(T));
    }
    d->size -= n;
    return d->array + f;
}

template &lt;typename T>
bool QVector&lt;T>::operator==(const QVector&lt;T> &amp;v) const
{
    if (d->size != v.d->size)
        return false;
    if (d == v.d)
        return true;
    T* b = d->array;
    T* i = b + d->size;
    T* j = v.d->array + d->size;
    while (i != b)
        if (!(*--i == *--j))
            return false;
    return true;
}

template &lt;typename T>
QVector&lt;T> &amp;QVector&lt;T>::fill(const T &amp;from, int asize)
{
    const T copy(from);
    resize(asize &lt; 0 ? d->size : asize);
    if (d->size) {
        T *i = d->array + d->size;
        T *b = d->array;
        while (i != b)
            *--i = copy;
    }
    return *this;
}

template &lt;typename T>
QVector&lt;T> &amp;QVector&lt;T>::operator+=(const QVector &amp;l)
{
    int newSize = d->size + l.d->size;
    realloc(d->size, newSize);

    T *w = d->array + newSize;
    T *i = l.d->array + l.d->size;
    T *b = l.d->array;
    while (i != b) {
        if (QTypeInfo&lt;T>::isComplex)
            new (--w) T(*--i);
        else
            *--w = *--i;
    }
    d->size = newSize;
    return *this;
}

template &lt;typename T>
int QVector&lt;T>::indexOf(const T &amp;t, int from) const
{
    if (from &lt; 0)
        from = qMax(from + d->size, 0);
    if (from &lt; d->size) {
        T* n = d->array + from - 1;
        T* e = d->array + d->size;
        while (++n != e)
            if (*n == t)
                return n - d->array;
    }
    return -1;
}

template &lt;typename T>
int QVector&lt;T>::lastIndexOf(const T &amp;t, int from) const
{
    if (from &lt; 0)
        from += d->size;
    else if (from >= d->size)
        from = d->size-1;
    if (from >= 0) {
        T* b = d->array;
        T* n = d->array + from + 1;
        while (n != b) {
            if (*--n == t)
                return n - b;
        }
    }
    return -1;
}

template &lt;typename T>
bool QVector&lt;T>::contains(const T &amp;t) const
{
    T* b = d->array;
    T* i = d->array + d->size;
    while (i != b)
        if (*--i == t)
            return true;
    return false;
}

template &lt;typename T>
int QVector&lt;T>::count(const T &amp;t) const
{
    int c = 0;
    T* b = d->array;
    T* i = d->array + d->size;
    while (i != b)
        if (*--i == t)
            ++c;
    return c;
}

template &lt;typename T>
Q_OUTOFLINE_TEMPLATE QVector&lt;T> QVector&lt;T>::mid(int pos, int length) const
{
    if (length &lt; 0)
        length = size() - pos;
    if (pos == 0 &amp;&amp; length == size())
        return *this;
    QVector&lt;T> copy;
    if (pos + length > size())
        length = size() - pos;
    for (int i = pos; i &lt; pos + length; ++i)
        copy += at(i);
    return copy;
}

template &lt;typename T>
Q_OUTOFLINE_TEMPLATE QList&lt;T> QVector&lt;T>::toList() const
{
    QList&lt;T> result;
    for (int i = 0; i &lt; size(); ++i)
        result.append(at(i));
    return result;
}

template &lt;typename T>
Q_OUTOFLINE_TEMPLATE QVector&lt;T> QList&lt;T>::toVector() const
{
    QVector&lt;T> result(size());
    for (int i = 0; i &lt; size(); ++i)
        result[i] = at(i);
    return result;
}

template &lt;typename T>
QVector&lt;T> QVector&lt;T>::fromList(const QList&lt;T> &amp;list)
{
    return list.toVector();
}

template &lt;typename T>
QList&lt;T> QList&lt;T>::fromVector(const QVector&lt;T> &amp;vector)
{
    return vector.toList();
}

Q_DECLARE_SEQUENTIAL_ITERATOR(Vector)
Q_DECLARE_MUTABLE_SEQUENTIAL_ITERATOR(Vector)

#endif // QVECTOR_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtCore/qwaitcondition.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QWAITCONDITION_H
#define QWAITCONDITION_H

#include &lt;QtCore/qglobal.h>

#include &lt;limits.h>

QT_MODULE(Core)

#ifndef QT_NO_THREAD

class QWaitConditionPrivate;
class QMutex;

class Q_CORE_EXPORT QWaitCondition
{
public:
    QWaitCondition();
    ~QWaitCondition();

    bool wait(QMutex *mutex, unsigned long time = ULONG_MAX);

    void wakeOne();
    void wakeAll();

private:
    Q_DISABLE_COPY(QWaitCondition)

    QWaitConditionPrivate * d;
};

#else

class QMutex;
class Q_CORE_EXPORT QWaitCondition
{
public:
    QWaitCondition() {}
    ~QWaitCondition() {}

    bool wait(QMutex *mutex, unsigned long time = ULONG_MAX)
    {
	Q_UNUSED(mutex);
	Q_UNUSED(time);
	return true;
    }

    void wakeOne() {}
    void wakeAll() {}
};

#endif // QT_NO_THREAD

#endif // QWAITCONDITION_H
</SCREEN>
</SECT2>
</SECT1>
<!-- End of text generated from database -->
<!--    by $Header: /cvsroot/lsb/lsbspec/mklibspec,v 1.76 2005/12/02 01:32:08 nick Exp 0 -->
