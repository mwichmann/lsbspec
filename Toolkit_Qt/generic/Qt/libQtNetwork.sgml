<!-- Start of text generated from database -->
<!-- generated from the LSB specification database -->
<!--    by $Header: /cvsroot/lsb/lsbspec/mklibspec,v 1.76 2005/12/02 01:32:08 nick Exp 0 -->
<!--    at Thu Jan 12 15:05:23 2006 -->
<SECT1 ID=libQtNetwork>
<TITLE>Interfaces for libQtNetwork</TITLE>
<PARA>
<XREF LINKEND="lib-libQtNetwork-def"> defines the library name and shared object name
for the libQtNetwork library
</PARA>
<TABLE id="lib-libQtNetwork-def">
<TITLE>libQtNetwork Definition</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Library:</ENTRY>
<ENTRY>libQtNetwork</ENTRY>
</ROW>
<ROW>
<ENTRY>SONAME:</ENTRY>
<ENTRY>libQtNetwork.so.4</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The behavior of the interfaces in this library is specified by the following specifications:<SIMPLELIST COLUMNS=1>
<MEMBER ID='REFSTD.libQtNetwork.1'>
[QtNetwork] <XREF LINKEND="std.QtNetwork">
</MEMBER>
</SIMPLELIST>
</PARA>
<!-- debug: database interface name QtNetwork -->
<SECT2>
<!--libgroup-->
<TITLE>QtNetwork</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for QHttpHeader</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the QHttpHeader class
is described by <XREF LINKEND="cls-391-0">
</PARA>
<!--classdata-->
<TABLE id="cls-391-0">
<TITLE>Primary vtable for QHttpHeader</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>Virtual Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>RTTI</ENTRY>
<ENTRY><indexterm><primary>typeinfo for QHttpHeader</primary></indexterm>typeinfo for QHttpHeader</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QHttpHeader::~QHttpHeader()</primary></indexterm>QHttpHeader::~QHttpHeader()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QHttpHeader::~QHttpHeader()</primary></indexterm>QHttpHeader::~QHttpHeader()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QHttpHeader::toString() const</primary></indexterm>QHttpHeader::toString() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QHttpHeader::parseLine(QString const&, int)</primary></indexterm>QHttpHeader::parseLine(QString const&, int)</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The Run Time Type Information for the QHttpHeader  class
is described by <XREF LINKEND="rtti-392">
</PARA>
<!--classdata-->
<TABLE ID="rtti-392">
<TITLE>typeinfo for QHttpHeader</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Vtable</ENTRY>
<ENTRY><indexterm><primary></primary></indexterm></ENTRY>
</ROW>
<ROW>
<ENTRY>Name</ENTRY>
<ENTRY><indexterm><primary>typeinfo name for QHttpHeader</primary></indexterm>typeinfo name for QHttpHeader</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>


<SECT3>
<TITLE>Class data for QHttpResponseHeader</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the QHttpResponseHeader class
is described by <XREF LINKEND="cls-393-0">
</PARA>
<!--classdata-->
<TABLE id="cls-393-0">
<TITLE>Primary vtable for QHttpResponseHeader</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>Virtual Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>RTTI</ENTRY>
<ENTRY><indexterm><primary>typeinfo for QHttpResponseHeader</primary></indexterm>typeinfo for QHttpResponseHeader</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QHttpResponseHeader::~QHttpResponseHeader()</primary></indexterm>QHttpResponseHeader::~QHttpResponseHeader()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QHttpResponseHeader::~QHttpResponseHeader()</primary></indexterm>QHttpResponseHeader::~QHttpResponseHeader()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QHttpResponseHeader::toString() const</primary></indexterm>QHttpResponseHeader::toString() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QHttpResponseHeader::majorVersion() const</primary></indexterm>QHttpResponseHeader::majorVersion() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QHttpResponseHeader::minorVersion() const</primary></indexterm>QHttpResponseHeader::minorVersion() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QHttpResponseHeader::parseLine(QString const&, int)</primary></indexterm>QHttpResponseHeader::parseLine(QString const&, int)</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The Run Time Type Information for the QHttpResponseHeader  class
is described by <XREF LINKEND="rtti-394">
</PARA>
<!--classdata-->
<TABLE ID="rtti-394">
<TITLE>typeinfo for QHttpResponseHeader</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Vtable</ENTRY>
<ENTRY><indexterm><primary>vtable for QHttpHeader</primary></indexterm>vtable for QHttpHeader</ENTRY>
</ROW>
<ROW>
<ENTRY>Name</ENTRY>
<ENTRY><indexterm><primary>typeinfo name for QHttpResponseHeader</primary></indexterm>typeinfo name for QHttpResponseHeader</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>


<SECT3>
<TITLE>Class data for QHttpRequestHeader</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the QHttpRequestHeader class
is described by <XREF LINKEND="cls-395-0">
</PARA>
<!--classdata-->
<TABLE id="cls-395-0">
<TITLE>Primary vtable for QHttpRequestHeader</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>Virtual Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>RTTI</ENTRY>
<ENTRY><indexterm><primary>typeinfo for QHttpRequestHeader</primary></indexterm>typeinfo for QHttpRequestHeader</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QHttpRequestHeader::~QHttpRequestHeader()</primary></indexterm>QHttpRequestHeader::~QHttpRequestHeader()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QHttpRequestHeader::~QHttpRequestHeader()</primary></indexterm>QHttpRequestHeader::~QHttpRequestHeader()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QHttpRequestHeader::toString() const</primary></indexterm>QHttpRequestHeader::toString() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QHttpRequestHeader::majorVersion() const</primary></indexterm>QHttpRequestHeader::majorVersion() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QHttpRequestHeader::minorVersion() const</primary></indexterm>QHttpRequestHeader::minorVersion() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QHttpRequestHeader::parseLine(QString const&, int)</primary></indexterm>QHttpRequestHeader::parseLine(QString const&, int)</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The Run Time Type Information for the QHttpRequestHeader  class
is described by <XREF LINKEND="rtti-396">
</PARA>
<!--classdata-->
<TABLE ID="rtti-396">
<TITLE>typeinfo for QHttpRequestHeader</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Vtable</ENTRY>
<ENTRY><indexterm><primary>vtable for QHttpHeader</primary></indexterm>vtable for QHttpHeader</ENTRY>
</ROW>
<ROW>
<ENTRY>Name</ENTRY>
<ENTRY><indexterm><primary>typeinfo name for QHttpRequestHeader</primary></indexterm>typeinfo name for QHttpRequestHeader</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>


<SECT3>
<TITLE>Class data for QHttp</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the QHttp class
is described by <XREF LINKEND="cls-397-0">
</PARA>
<!--classdata-->
<TABLE id="cls-397-0">
<TITLE>Primary vtable for QHttp</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>Virtual Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>RTTI</ENTRY>
<ENTRY><indexterm><primary>typeinfo for QHttp</primary></indexterm>typeinfo for QHttp</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QHttp::metaObject() const</primary></indexterm>QHttp::metaObject() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QHttp::qt_metacast(char const*)</primary></indexterm>QHttp::qt_metacast(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QHttp::qt_metacall(QMetaObject::Call, int, void**)</primary></indexterm>QHttp::qt_metacall(QMetaObject::Call, int, void**)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QHttp::~QHttp()</primary></indexterm>QHttp::~QHttp()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QHttp::~QHttp()</primary></indexterm>QHttp::~QHttp()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::event(QEvent*)</primary></indexterm>QObject::event(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::eventFilter(QObject*, QEvent*)</primary></indexterm>QObject::eventFilter(QObject*, QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::timerEvent(QTimerEvent*)</primary></indexterm>QObject::timerEvent(QTimerEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::childEvent(QChildEvent*)</primary></indexterm>QObject::childEvent(QChildEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::customEvent(QEvent*)</primary></indexterm>QObject::customEvent(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::connectNotify(char const*)</primary></indexterm>QObject::connectNotify(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;11&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::disconnectNotify(char const*)</primary></indexterm>QObject::disconnectNotify(char const*)</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The Run Time Type Information for the QHttp  class
is described by <XREF LINKEND="rtti-398">
</PARA>
<!--classdata-->
<TABLE ID="rtti-398">
<TITLE>typeinfo for QHttp</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Vtable</ENTRY>
<ENTRY><indexterm><primary>vtable for QObject</primary></indexterm>vtable for QObject</ENTRY>
</ROW>
<ROW>
<ENTRY>Name</ENTRY>
<ENTRY><indexterm><primary>typeinfo name for QHttp</primary></indexterm>typeinfo name for QHttp</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>


<SECT3>
<TITLE>Class data for QAbstractSocket</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the QAbstractSocket class
is described by <XREF LINKEND="cls-399-0">
</PARA>
<!--classdata-->
<TABLE id="cls-399-0">
<TITLE>Primary vtable for QAbstractSocket</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>Virtual Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>RTTI</ENTRY>
<ENTRY><indexterm><primary>typeinfo for QAbstractSocket</primary></indexterm>typeinfo for QAbstractSocket</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::metaObject() const</primary></indexterm>QAbstractSocket::metaObject() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::qt_metacast(char const*)</primary></indexterm>QAbstractSocket::qt_metacast(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::qt_metacall(QMetaObject::Call, int, void**)</primary></indexterm>QAbstractSocket::qt_metacall(QMetaObject::Call, int, void**)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::~QAbstractSocket()</primary></indexterm>QAbstractSocket::~QAbstractSocket()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::~QAbstractSocket()</primary></indexterm>QAbstractSocket::~QAbstractSocket()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::event(QEvent*)</primary></indexterm>QObject::event(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::eventFilter(QObject*, QEvent*)</primary></indexterm>QObject::eventFilter(QObject*, QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::timerEvent(QTimerEvent*)</primary></indexterm>QObject::timerEvent(QTimerEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::childEvent(QChildEvent*)</primary></indexterm>QObject::childEvent(QChildEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::customEvent(QEvent*)</primary></indexterm>QObject::customEvent(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::connectNotify(char const*)</primary></indexterm>QObject::connectNotify(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;11&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::disconnectNotify(char const*)</primary></indexterm>QObject::disconnectNotify(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;12&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::isSequential() const</primary></indexterm>QAbstractSocket::isSequential() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;13&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::open(QFlags&lt;QIODevice::OpenModeFlag&gt;)</primary></indexterm>QIODevice::open(QFlags&lt;QIODevice::OpenModeFlag&gt;)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;14&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::close()</primary></indexterm>QAbstractSocket::close()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;15&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::pos() const</primary></indexterm>QIODevice::pos() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;16&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::size() const</primary></indexterm>QIODevice::size() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;17&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::seek(long long)</primary></indexterm>QIODevice::seek(long long)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;18&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::atEnd() const</primary></indexterm>QAbstractSocket::atEnd() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;19&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::reset()</primary></indexterm>QIODevice::reset()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;20&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::bytesAvailable() const</primary></indexterm>QAbstractSocket::bytesAvailable() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;21&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::bytesToWrite() const</primary></indexterm>QAbstractSocket::bytesToWrite() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;22&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::canReadLine() const</primary></indexterm>QAbstractSocket::canReadLine() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;23&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::waitForReadyRead(int)</primary></indexterm>QAbstractSocket::waitForReadyRead(int)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;24&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::waitForBytesWritten(int)</primary></indexterm>QAbstractSocket::waitForBytesWritten(int)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;25&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::readData(char*, long long)</primary></indexterm>QAbstractSocket::readData(char*, long long)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;26&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::readLineData(char*, long long)</primary></indexterm>QAbstractSocket::readLineData(char*, long long)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;27&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::writeData(char const*, long long)</primary></indexterm>QAbstractSocket::writeData(char const*, long long)</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The Run Time Type Information for the QAbstractSocket  class
is described by <XREF LINKEND="rtti-400">
</PARA>
<!--classdata-->
<TABLE ID="rtti-400">
<TITLE>typeinfo for QAbstractSocket</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Vtable</ENTRY>
<ENTRY><indexterm><primary>vtable for QIODevice</primary></indexterm>vtable for QIODevice</ENTRY>
</ROW>
<ROW>
<ENTRY>Name</ENTRY>
<ENTRY><indexterm><primary>typeinfo name for QAbstractSocket</primary></indexterm>typeinfo name for QAbstractSocket</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>


<SECT3>
<TITLE>Class data for QUrlInfo</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the QUrlInfo class
is described by <XREF LINKEND="cls-401-0">
</PARA>
<!--classdata-->
<TABLE id="cls-401-0">
<TITLE>Primary vtable for QUrlInfo</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>Virtual Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>RTTI</ENTRY>
<ENTRY><indexterm><primary>typeinfo for QUrlInfo</primary></indexterm>typeinfo for QUrlInfo</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QUrlInfo::~QUrlInfo()</primary></indexterm>QUrlInfo::~QUrlInfo()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QUrlInfo::~QUrlInfo()</primary></indexterm>QUrlInfo::~QUrlInfo()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QUrlInfo::setName(QString const&)</primary></indexterm>QUrlInfo::setName(QString const&)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QUrlInfo::setDir(bool)</primary></indexterm>QUrlInfo::setDir(bool)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QUrlInfo::setFile(bool)</primary></indexterm>QUrlInfo::setFile(bool)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QUrlInfo::setSymLink(bool)</primary></indexterm>QUrlInfo::setSymLink(bool)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QUrlInfo::setOwner(QString const&)</primary></indexterm>QUrlInfo::setOwner(QString const&)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QUrlInfo::setGroup(QString const&)</primary></indexterm>QUrlInfo::setGroup(QString const&)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QUrlInfo::setSize(long long)</primary></indexterm>QUrlInfo::setSize(long long)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QUrlInfo::setWritable(bool)</primary></indexterm>QUrlInfo::setWritable(bool)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QUrlInfo::setReadable(bool)</primary></indexterm>QUrlInfo::setReadable(bool)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;11&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QUrlInfo::setPermissions(int)</primary></indexterm>QUrlInfo::setPermissions(int)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;12&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QUrlInfo::setLastModified(QDateTime const&)</primary></indexterm>QUrlInfo::setLastModified(QDateTime const&)</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The Run Time Type Information for the QUrlInfo  class
is described by <XREF LINKEND="rtti-402">
</PARA>
<!--classdata-->
<TABLE ID="rtti-402">
<TITLE>typeinfo for QUrlInfo</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Vtable</ENTRY>
<ENTRY><indexterm><primary></primary></indexterm></ENTRY>
</ROW>
<ROW>
<ENTRY>Name</ENTRY>
<ENTRY><indexterm><primary>typeinfo name for QUrlInfo</primary></indexterm>typeinfo name for QUrlInfo</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>


<SECT3>
<TITLE>Class data for QFtp</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the QFtp class
is described by <XREF LINKEND="cls-403-0">
</PARA>
<!--classdata-->
<TABLE id="cls-403-0">
<TITLE>Primary vtable for QFtp</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>Virtual Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>RTTI</ENTRY>
<ENTRY><indexterm><primary>typeinfo for QFtp</primary></indexterm>typeinfo for QFtp</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFtp::metaObject() const</primary></indexterm>QFtp::metaObject() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFtp::qt_metacast(char const*)</primary></indexterm>QFtp::qt_metacast(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFtp::qt_metacall(QMetaObject::Call, int, void**)</primary></indexterm>QFtp::qt_metacall(QMetaObject::Call, int, void**)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFtp::~QFtp()</primary></indexterm>QFtp::~QFtp()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QFtp::~QFtp()</primary></indexterm>QFtp::~QFtp()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::event(QEvent*)</primary></indexterm>QObject::event(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::eventFilter(QObject*, QEvent*)</primary></indexterm>QObject::eventFilter(QObject*, QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::timerEvent(QTimerEvent*)</primary></indexterm>QObject::timerEvent(QTimerEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::childEvent(QChildEvent*)</primary></indexterm>QObject::childEvent(QChildEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::customEvent(QEvent*)</primary></indexterm>QObject::customEvent(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::connectNotify(char const*)</primary></indexterm>QObject::connectNotify(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;11&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::disconnectNotify(char const*)</primary></indexterm>QObject::disconnectNotify(char const*)</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The Run Time Type Information for the QFtp  class
is described by <XREF LINKEND="rtti-404">
</PARA>
<!--classdata-->
<TABLE ID="rtti-404">
<TITLE>typeinfo for QFtp</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Vtable</ENTRY>
<ENTRY><indexterm><primary>vtable for QObject</primary></indexterm>vtable for QObject</ENTRY>
</ROW>
<ROW>
<ENTRY>Name</ENTRY>
<ENTRY><indexterm><primary>typeinfo name for QFtp</primary></indexterm>typeinfo name for QFtp</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>


<SECT3>
<TITLE>Class data for QTcpServer</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the QTcpServer class
is described by <XREF LINKEND="cls-405-0">
</PARA>
<!--classdata-->
<TABLE id="cls-405-0">
<TITLE>Primary vtable for QTcpServer</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>Virtual Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>RTTI</ENTRY>
<ENTRY><indexterm><primary>typeinfo for QTcpServer</primary></indexterm>typeinfo for QTcpServer</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QTcpServer::metaObject() const</primary></indexterm>QTcpServer::metaObject() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QTcpServer::qt_metacast(char const*)</primary></indexterm>QTcpServer::qt_metacast(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QTcpServer::qt_metacall(QMetaObject::Call, int, void**)</primary></indexterm>QTcpServer::qt_metacall(QMetaObject::Call, int, void**)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QTcpServer::~QTcpServer()</primary></indexterm>QTcpServer::~QTcpServer()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QTcpServer::~QTcpServer()</primary></indexterm>QTcpServer::~QTcpServer()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::event(QEvent*)</primary></indexterm>QObject::event(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::eventFilter(QObject*, QEvent*)</primary></indexterm>QObject::eventFilter(QObject*, QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::timerEvent(QTimerEvent*)</primary></indexterm>QObject::timerEvent(QTimerEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::childEvent(QChildEvent*)</primary></indexterm>QObject::childEvent(QChildEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::customEvent(QEvent*)</primary></indexterm>QObject::customEvent(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::connectNotify(char const*)</primary></indexterm>QObject::connectNotify(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;11&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::disconnectNotify(char const*)</primary></indexterm>QObject::disconnectNotify(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;12&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QTcpServer::hasPendingConnections() const</primary></indexterm>QTcpServer::hasPendingConnections() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;13&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QTcpServer::nextPendingConnection()</primary></indexterm>QTcpServer::nextPendingConnection()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;14&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QTcpServer::incomingConnection(int)</primary></indexterm>QTcpServer::incomingConnection(int)</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The Run Time Type Information for the QTcpServer  class
is described by <XREF LINKEND="rtti-406">
</PARA>
<!--classdata-->
<TABLE ID="rtti-406">
<TITLE>typeinfo for QTcpServer</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Vtable</ENTRY>
<ENTRY><indexterm><primary>vtable for QObject</primary></indexterm>vtable for QObject</ENTRY>
</ROW>
<ROW>
<ENTRY>Name</ENTRY>
<ENTRY><indexterm><primary>typeinfo name for QTcpServer</primary></indexterm>typeinfo name for QTcpServer</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>


<SECT3>
<TITLE>Class data for QTcpSocket</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the QTcpSocket class
is described by <XREF LINKEND="cls-407-0">
</PARA>
<!--classdata-->
<TABLE id="cls-407-0">
<TITLE>Primary vtable for QTcpSocket</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>Virtual Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>RTTI</ENTRY>
<ENTRY><indexterm><primary>typeinfo for QTcpSocket</primary></indexterm>typeinfo for QTcpSocket</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QTcpSocket::metaObject() const</primary></indexterm>QTcpSocket::metaObject() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QTcpSocket::qt_metacast(char const*)</primary></indexterm>QTcpSocket::qt_metacast(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QTcpSocket::qt_metacall(QMetaObject::Call, int, void**)</primary></indexterm>QTcpSocket::qt_metacall(QMetaObject::Call, int, void**)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QTcpSocket::~QTcpSocket()</primary></indexterm>QTcpSocket::~QTcpSocket()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QTcpSocket::~QTcpSocket()</primary></indexterm>QTcpSocket::~QTcpSocket()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::event(QEvent*)</primary></indexterm>QObject::event(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::eventFilter(QObject*, QEvent*)</primary></indexterm>QObject::eventFilter(QObject*, QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::timerEvent(QTimerEvent*)</primary></indexterm>QObject::timerEvent(QTimerEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::childEvent(QChildEvent*)</primary></indexterm>QObject::childEvent(QChildEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::customEvent(QEvent*)</primary></indexterm>QObject::customEvent(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::connectNotify(char const*)</primary></indexterm>QObject::connectNotify(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;11&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::disconnectNotify(char const*)</primary></indexterm>QObject::disconnectNotify(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;12&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::isSequential() const</primary></indexterm>QAbstractSocket::isSequential() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;13&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::open(QFlags&lt;QIODevice::OpenModeFlag&gt;)</primary></indexterm>QIODevice::open(QFlags&lt;QIODevice::OpenModeFlag&gt;)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;14&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::close()</primary></indexterm>QAbstractSocket::close()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;15&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::pos() const</primary></indexterm>QIODevice::pos() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;16&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::size() const</primary></indexterm>QIODevice::size() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;17&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::seek(long long)</primary></indexterm>QIODevice::seek(long long)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;18&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::atEnd() const</primary></indexterm>QAbstractSocket::atEnd() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;19&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::reset()</primary></indexterm>QIODevice::reset()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;20&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::bytesAvailable() const</primary></indexterm>QAbstractSocket::bytesAvailable() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;21&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::bytesToWrite() const</primary></indexterm>QAbstractSocket::bytesToWrite() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;22&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::canReadLine() const</primary></indexterm>QAbstractSocket::canReadLine() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;23&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::waitForReadyRead(int)</primary></indexterm>QAbstractSocket::waitForReadyRead(int)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;24&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::waitForBytesWritten(int)</primary></indexterm>QAbstractSocket::waitForBytesWritten(int)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;25&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::readData(char*, long long)</primary></indexterm>QAbstractSocket::readData(char*, long long)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;26&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::readLineData(char*, long long)</primary></indexterm>QAbstractSocket::readLineData(char*, long long)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;27&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::writeData(char const*, long long)</primary></indexterm>QAbstractSocket::writeData(char const*, long long)</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The Run Time Type Information for the QTcpSocket  class
is described by <XREF LINKEND="rtti-408">
</PARA>
<!--classdata-->
<TABLE ID="rtti-408">
<TITLE>typeinfo for QTcpSocket</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Vtable</ENTRY>
<ENTRY><indexterm><primary>vtable for QAbstractSocket</primary></indexterm>vtable for QAbstractSocket</ENTRY>
</ROW>
<ROW>
<ENTRY>Name</ENTRY>
<ENTRY><indexterm><primary>typeinfo name for QTcpSocket</primary></indexterm>typeinfo name for QTcpSocket</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>


<SECT3>
<TITLE>Class data for QUdpSocket</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the QUdpSocket class
is described by <XREF LINKEND="cls-409-0">
</PARA>
<!--classdata-->
<TABLE id="cls-409-0">
<TITLE>Primary vtable for QUdpSocket</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>Virtual Base Offset</ENTRY>
<ENTRY>0</ENTRY>
</ROW>
<ROW>
<ENTRY>RTTI</ENTRY>
<ENTRY><indexterm><primary>typeinfo for QUdpSocket</primary></indexterm>typeinfo for QUdpSocket</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QUdpSocket::metaObject() const</primary></indexterm>QUdpSocket::metaObject() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QUdpSocket::qt_metacast(char const*)</primary></indexterm>QUdpSocket::qt_metacast(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QUdpSocket::qt_metacall(QMetaObject::Call, int, void**)</primary></indexterm>QUdpSocket::qt_metacall(QMetaObject::Call, int, void**)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QUdpSocket::~QUdpSocket()</primary></indexterm>QUdpSocket::~QUdpSocket()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QUdpSocket::~QUdpSocket()</primary></indexterm>QUdpSocket::~QUdpSocket()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::event(QEvent*)</primary></indexterm>QObject::event(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::eventFilter(QObject*, QEvent*)</primary></indexterm>QObject::eventFilter(QObject*, QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::timerEvent(QTimerEvent*)</primary></indexterm>QObject::timerEvent(QTimerEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::childEvent(QChildEvent*)</primary></indexterm>QObject::childEvent(QChildEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::customEvent(QEvent*)</primary></indexterm>QObject::customEvent(QEvent*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::connectNotify(char const*)</primary></indexterm>QObject::connectNotify(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;11&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QObject::disconnectNotify(char const*)</primary></indexterm>QObject::disconnectNotify(char const*)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;12&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::isSequential() const</primary></indexterm>QAbstractSocket::isSequential() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;13&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::open(QFlags&lt;QIODevice::OpenModeFlag&gt;)</primary></indexterm>QIODevice::open(QFlags&lt;QIODevice::OpenModeFlag&gt;)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;14&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::close()</primary></indexterm>QAbstractSocket::close()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;15&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::pos() const</primary></indexterm>QIODevice::pos() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;16&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::size() const</primary></indexterm>QIODevice::size() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;17&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::seek(long long)</primary></indexterm>QIODevice::seek(long long)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;18&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::atEnd() const</primary></indexterm>QAbstractSocket::atEnd() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;19&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QIODevice::reset()</primary></indexterm>QIODevice::reset()</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;20&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::bytesAvailable() const</primary></indexterm>QAbstractSocket::bytesAvailable() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;21&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::bytesToWrite() const</primary></indexterm>QAbstractSocket::bytesToWrite() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;22&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::canReadLine() const</primary></indexterm>QAbstractSocket::canReadLine() const</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;23&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::waitForReadyRead(int)</primary></indexterm>QAbstractSocket::waitForReadyRead(int)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;24&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::waitForBytesWritten(int)</primary></indexterm>QAbstractSocket::waitForBytesWritten(int)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;25&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::readData(char*, long long)</primary></indexterm>QAbstractSocket::readData(char*, long long)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;26&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::readLineData(char*, long long)</primary></indexterm>QAbstractSocket::readLineData(char*, long long)</ENTRY>
</ROW>
<ROW>
<ENTRY>vfunc&lsqb;27&rsqb;:</ENTRY>
<ENTRY><indexterm><primary>QAbstractSocket::writeData(char const*, long long)</primary></indexterm>QAbstractSocket::writeData(char const*, long long)</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The Run Time Type Information for the QUdpSocket  class
is described by <XREF LINKEND="rtti-410">
</PARA>
<!--classdata-->
<TABLE ID="rtti-410">
<TITLE>typeinfo for QUdpSocket</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Base Vtable</ENTRY>
<ENTRY><indexterm><primary>vtable for QAbstractSocket</primary></indexterm>vtable for QAbstractSocket</ENTRY>
</ROW>
<ROW>
<ENTRY>Name</ENTRY>
<ENTRY><indexterm><primary>typeinfo name for QUdpSocket</primary></indexterm>typeinfo name for QUdpSocket</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>


<SECT3>
<TITLE>Interfaces for QtNetwork</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic functions
for QtNetwork specified in <XREF linkend="tbl-libQtNetwork-qtn-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<TABLE id="tbl-libQtNetwork-qtn-ints">
<TITLE>libQtNetwork - QtNetwork Function Interfaces</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY><indexterm><primary>_ZN10QTcpServer11qt_metacallEN11QMetaObject4CallEiPPv</primary></indexterm>_ZN10QTcpServer11qt_metacallEN11QMetaObject4CallEiPPv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN10QTcpServer11qt_metacastEPKc</primary></indexterm>_ZN10QTcpServer11qt_metacastEPKc <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN10QTcpServer13newConnectionEv</primary></indexterm>_ZN10QTcpServer13newConnectionEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN10QTcpServer18incomingConnectionEi</primary></indexterm>_ZN10QTcpServer18incomingConnectionEi <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN10QTcpServer19setSocketDescriptorEi</primary></indexterm>_ZN10QTcpServer19setSocketDescriptorEi <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN10QTcpServer20waitForNewConnectionEiPb</primary></indexterm>_ZN10QTcpServer20waitForNewConnectionEiPb <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN10QTcpServer21nextPendingConnectionEv</primary></indexterm>_ZN10QTcpServer21nextPendingConnectionEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN10QTcpServer24setMaxPendingConnectionsEi</primary></indexterm>_ZN10QTcpServer24setMaxPendingConnectionsEi <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN10QTcpServer5closeEv</primary></indexterm>_ZN10QTcpServer5closeEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN10QTcpServer6listenERK12QHostAddresst</primary></indexterm>_ZN10QTcpServer6listenERK12QHostAddresst <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN10QTcpServer8setProxyERK13QNetworkProxy</primary></indexterm>_ZN10QTcpServer8setProxyERK13QNetworkProxy <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN10QTcpServerC1EP7QObject</primary></indexterm>_ZN10QTcpServerC1EP7QObject <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN10QTcpServerC2EP7QObject</primary></indexterm>_ZN10QTcpServerC2EP7QObject <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN10QTcpServerD0Ev</primary></indexterm>_ZN10QTcpServerD0Ev <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN10QTcpServerD1Ev</primary></indexterm>_ZN10QTcpServerD1Ev <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN10QTcpServerD2Ev</primary></indexterm>_ZN10QTcpServerD2Ev <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN10QTcpSocket11qt_metacallEN11QMetaObject4CallEiPPv</primary></indexterm>_ZN10QTcpSocket11qt_metacallEN11QMetaObject4CallEiPPv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN10QTcpSocket11qt_metacastEPKc</primary></indexterm>_ZN10QTcpSocket11qt_metacastEPKc <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN10QTcpSocketC1EP7QObject</primary></indexterm>_ZN10QTcpSocketC1EP7QObject <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN10QTcpSocketC2EP7QObject</primary></indexterm>_ZN10QTcpSocketC2EP7QObject <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN10QTcpSocketD0Ev</primary></indexterm>_ZN10QTcpSocketD0Ev <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN10QTcpSocketD1Ev</primary></indexterm>_ZN10QTcpSocketD1Ev <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN10QTcpSocketD2Ev</primary></indexterm>_ZN10QTcpSocketD2Ev <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN10QUdpSocket11qt_metacallEN11QMetaObject4CallEiPPv</primary></indexterm>_ZN10QUdpSocket11qt_metacallEN11QMetaObject4CallEiPPv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN10QUdpSocket11qt_metacastEPKc</primary></indexterm>_ZN10QUdpSocket11qt_metacastEPKc <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN10QUdpSocket12readDatagramEPcxP12QHostAddressPt</primary></indexterm>_ZN10QUdpSocket12readDatagramEPcxP12QHostAddressPt <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN10QUdpSocket13writeDatagramEPKcxRK12QHostAddresst</primary></indexterm>_ZN10QUdpSocket13writeDatagramEPKcxRK12QHostAddresst <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN10QUdpSocket4bindERK12QHostAddresst</primary></indexterm>_ZN10QUdpSocket4bindERK12QHostAddresst <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN10QUdpSocket4bindERK12QHostAddresst6QFlagsINS_8BindFlagEE</primary></indexterm>_ZN10QUdpSocket4bindERK12QHostAddresst6QFlagsINS_8BindFlagEE <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN10QUdpSocket4bindEt</primary></indexterm>_ZN10QUdpSocket4bindEt <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN10QUdpSocket4bindEt6QFlagsINS_8BindFlagEE</primary></indexterm>_ZN10QUdpSocket4bindEt6QFlagsINS_8BindFlagEE <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN10QUdpSocketC1EP7QObject</primary></indexterm>_ZN10QUdpSocketC1EP7QObject <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN10QUdpSocketC2EP7QObject</primary></indexterm>_ZN10QUdpSocketC2EP7QObject <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN10QUdpSocketD0Ev</primary></indexterm>_ZN10QUdpSocketD0Ev <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN10QUdpSocketD1Ev</primary></indexterm>_ZN10QUdpSocketD1Ev <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN10QUdpSocketD2Ev</primary></indexterm>_ZN10QUdpSocketD2Ev <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QHttpHeader11removeValueERK7QString</primary></indexterm>_ZN11QHttpHeader11removeValueERK7QString <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QHttpHeader14setContentTypeERK7QString</primary></indexterm>_ZN11QHttpHeader14setContentTypeERK7QString <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QHttpHeader15removeAllValuesERK7QString</primary></indexterm>_ZN11QHttpHeader15removeAllValuesERK7QString <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QHttpHeader16setContentLengthEi</primary></indexterm>_ZN11QHttpHeader16setContentLengthEi <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QHttpHeader5parseERK7QString</primary></indexterm>_ZN11QHttpHeader5parseERK7QString <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QHttpHeader8addValueERK7QStringS2_</primary></indexterm>_ZN11QHttpHeader8addValueERK7QStringS2_ <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QHttpHeader8setValidEb</primary></indexterm>_ZN11QHttpHeader8setValidEb <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QHttpHeader8setValueERK7QStringS2_</primary></indexterm>_ZN11QHttpHeader8setValueERK7QStringS2_ <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QHttpHeader9parseLineERK7QStringi</primary></indexterm>_ZN11QHttpHeader9parseLineERK7QStringi <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QHttpHeader9setValuesERK5QListI5QPairI7QStringS2_EE</primary></indexterm>_ZN11QHttpHeader9setValuesERK5QListI5QPairI7QStringS2_EE <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QHttpHeaderC1ER18QHttpHeaderPrivateRK7QString</primary></indexterm>_ZN11QHttpHeaderC1ER18QHttpHeaderPrivateRK7QString <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QHttpHeaderC1ER18QHttpHeaderPrivateRKS_</primary></indexterm>_ZN11QHttpHeaderC1ER18QHttpHeaderPrivateRKS_ <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QHttpHeaderC1ERK7QString</primary></indexterm>_ZN11QHttpHeaderC1ERK7QString <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QHttpHeaderC1ERKS_</primary></indexterm>_ZN11QHttpHeaderC1ERKS_ <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QHttpHeaderC1Ev</primary></indexterm>_ZN11QHttpHeaderC1Ev <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QHttpHeaderC2ER18QHttpHeaderPrivateRK7QString</primary></indexterm>_ZN11QHttpHeaderC2ER18QHttpHeaderPrivateRK7QString <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QHttpHeaderC2ER18QHttpHeaderPrivateRKS_</primary></indexterm>_ZN11QHttpHeaderC2ER18QHttpHeaderPrivateRKS_ <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QHttpHeaderC2ERK7QString</primary></indexterm>_ZN11QHttpHeaderC2ERK7QString <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QHttpHeaderC2ERKS_</primary></indexterm>_ZN11QHttpHeaderC2ERKS_ <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QHttpHeaderC2Ev</primary></indexterm>_ZN11QHttpHeaderC2Ev <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QHttpHeaderD0Ev</primary></indexterm>_ZN11QHttpHeaderD0Ev <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QHttpHeaderD1Ev</primary></indexterm>_ZN11QHttpHeaderD1Ev <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN11QHttpHeaderD2Ev</primary></indexterm>_ZN11QHttpHeaderD2Ev <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN11QHttpHeaderaSERKS_</primary></indexterm>_ZN11QHttpHeaderaSERKS_ <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN12QHostAddress10setAddressEPK8sockaddr</primary></indexterm>_ZN12QHostAddress10setAddressEPK8sockaddr <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN12QHostAddress10setAddressEPh</primary></indexterm>_ZN12QHostAddress10setAddressEPh <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN12QHostAddress10setAddressERK12QIPv6Address</primary></indexterm>_ZN12QHostAddress10setAddressERK12QIPv6Address <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN12QHostAddress10setAddressERK7QString</primary></indexterm>_ZN12QHostAddress10setAddressERK7QString <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN12QHostAddress10setAddressEj</primary></indexterm>_ZN12QHostAddress10setAddressEj <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN12QHostAddress10setScopeIdERK7QString</primary></indexterm>_ZN12QHostAddress10setScopeIdERK7QString <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN12QHostAddress5clearEv</primary></indexterm>_ZN12QHostAddress5clearEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN12QHostAddressC1ENS_14SpecialAddressE</primary></indexterm>_ZN12QHostAddressC1ENS_14SpecialAddressE <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN12QHostAddressC1EPK8sockaddr</primary></indexterm>_ZN12QHostAddressC1EPK8sockaddr <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN12QHostAddressC1EPh</primary></indexterm>_ZN12QHostAddressC1EPh <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN12QHostAddressC1ERK12QIPv6Address</primary></indexterm>_ZN12QHostAddressC1ERK12QIPv6Address <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN12QHostAddressC1ERK7QString</primary></indexterm>_ZN12QHostAddressC1ERK7QString <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN12QHostAddressC1ERKS_</primary></indexterm>_ZN12QHostAddressC1ERKS_ <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN12QHostAddressC1Ej</primary></indexterm>_ZN12QHostAddressC1Ej <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN12QHostAddressC1Ev</primary></indexterm>_ZN12QHostAddressC1Ev <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN12QHostAddressC2ENS_14SpecialAddressE</primary></indexterm>_ZN12QHostAddressC2ENS_14SpecialAddressE <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN12QHostAddressC2EPK8sockaddr</primary></indexterm>_ZN12QHostAddressC2EPK8sockaddr <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN12QHostAddressC2EPh</primary></indexterm>_ZN12QHostAddressC2EPh <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN12QHostAddressC2ERK12QIPv6Address</primary></indexterm>_ZN12QHostAddressC2ERK12QIPv6Address <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN12QHostAddressC2ERK7QString</primary></indexterm>_ZN12QHostAddressC2ERK7QString <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN12QHostAddressC2ERKS_</primary></indexterm>_ZN12QHostAddressC2ERKS_ <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN12QHostAddressC2Ej</primary></indexterm>_ZN12QHostAddressC2Ej <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN12QHostAddressC2Ev</primary></indexterm>_ZN12QHostAddressC2Ev <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN12QHostAddressD1Ev</primary></indexterm>_ZN12QHostAddressD1Ev <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN12QHostAddressD2Ev</primary></indexterm>_ZN12QHostAddressD2Ev <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN12QHostAddressaSERK7QString</primary></indexterm>_ZN12QHostAddressaSERK7QString <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN12QHostAddressaSERKS_</primary></indexterm>_ZN12QHostAddressaSERKS_ <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN13QNetworkProxy11setHostNameERK7QString</primary></indexterm>_ZN13QNetworkProxy11setHostNameERK7QString <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN13QNetworkProxy11setPasswordERK7QString</primary></indexterm>_ZN13QNetworkProxy11setPasswordERK7QString <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN13QNetworkProxy16applicationProxyEv</primary></indexterm>_ZN13QNetworkProxy16applicationProxyEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN13QNetworkProxy19setApplicationProxyERKS_</primary></indexterm>_ZN13QNetworkProxy19setApplicationProxyERKS_ <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN13QNetworkProxy7setPortEt</primary></indexterm>_ZN13QNetworkProxy7setPortEt <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN13QNetworkProxy7setTypeENS_9ProxyTypeE</primary></indexterm>_ZN13QNetworkProxy7setTypeENS_9ProxyTypeE <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN13QNetworkProxy7setUserERK7QString</primary></indexterm>_ZN13QNetworkProxy7setUserERK7QString <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN13QNetworkProxyC1ENS_9ProxyTypeERK7QStringtS3_S3_</primary></indexterm>_ZN13QNetworkProxyC1ENS_9ProxyTypeERK7QStringtS3_S3_ <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN13QNetworkProxyC1ERKS_</primary></indexterm>_ZN13QNetworkProxyC1ERKS_ <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN13QNetworkProxyC1Ev</primary></indexterm>_ZN13QNetworkProxyC1Ev <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN13QNetworkProxyC2ENS_9ProxyTypeERK7QStringtS3_S3_</primary></indexterm>_ZN13QNetworkProxyC2ENS_9ProxyTypeERK7QStringtS3_S3_ <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN13QNetworkProxyC2ERKS_</primary></indexterm>_ZN13QNetworkProxyC2ERKS_ <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN13QNetworkProxyC2Ev</primary></indexterm>_ZN13QNetworkProxyC2Ev <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN13QNetworkProxyD1Ev</primary></indexterm>_ZN13QNetworkProxyD1Ev <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN13QNetworkProxyD2Ev</primary></indexterm>_ZN13QNetworkProxyD2Ev <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN13QNetworkProxyaSERKS_</primary></indexterm>_ZN13QNetworkProxyaSERKS_ <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN15QAbstractSocket11qt_metacallEN11QMetaObject4CallEiPPv</primary></indexterm>_ZN15QAbstractSocket11qt_metacallEN11QMetaObject4CallEiPPv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN15QAbstractSocket11qt_metacastEPKc</primary></indexterm>_ZN15QAbstractSocket11qt_metacastEPKc <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN15QAbstractSocket11setPeerNameERK7QString</primary></indexterm>_ZN15QAbstractSocket11setPeerNameERK7QString <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN15QAbstractSocket11setPeerPortEt</primary></indexterm>_ZN15QAbstractSocket11setPeerPortEt <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN15QAbstractSocket12disconnectedEv</primary></indexterm>_ZN15QAbstractSocket12disconnectedEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN15QAbstractSocket12readLineDataEPcx</primary></indexterm>_ZN15QAbstractSocket12readLineDataEPcx <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN15QAbstractSocket12setLocalPortEt</primary></indexterm>_ZN15QAbstractSocket12setLocalPortEt <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN15QAbstractSocket12stateChangedENS_11SocketStateE</primary></indexterm>_ZN15QAbstractSocket12stateChangedENS_11SocketStateE <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN15QAbstractSocket13connectToHostERK12QHostAddresst6QFlagsIN9QIODevice12OpenModeFlagEE</primary></indexterm>_ZN15QAbstractSocket13connectToHostERK12QHostAddresst6QFlagsIN9QIODevice12OpenModeFlagEE <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN15QAbstractSocket13connectToHostERK7QStringt6QFlagsIN9QIODevice12OpenModeFlagEE</primary></indexterm>_ZN15QAbstractSocket13connectToHostERK7QStringt6QFlagsIN9QIODevice12OpenModeFlagEE <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN15QAbstractSocket14setPeerAddressERK12QHostAddress</primary></indexterm>_ZN15QAbstractSocket14setPeerAddressERK12QHostAddress <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN15QAbstractSocket14setSocketErrorENS_11SocketErrorE</primary></indexterm>_ZN15QAbstractSocket14setSocketErrorENS_11SocketErrorE <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN15QAbstractSocket14setSocketStateENS_11SocketStateE</primary></indexterm>_ZN15QAbstractSocket14setSocketStateENS_11SocketStateE <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN15QAbstractSocket15setLocalAddressERK12QHostAddress</primary></indexterm>_ZN15QAbstractSocket15setLocalAddressERK12QHostAddress <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN15QAbstractSocket16connectionClosedEv</primary></indexterm>_ZN15QAbstractSocket16connectionClosedEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN15QAbstractSocket16waitForConnectedEi</primary></indexterm>_ZN15QAbstractSocket16waitForConnectedEi <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN15QAbstractSocket16waitForReadyReadEi</primary></indexterm>_ZN15QAbstractSocket16waitForReadyReadEi <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN15QAbstractSocket17setReadBufferSizeEx</primary></indexterm>_ZN15QAbstractSocket17setReadBufferSizeEx <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN15QAbstractSocket18disconnectFromHostEv</primary></indexterm>_ZN15QAbstractSocket18disconnectFromHostEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN15QAbstractSocket19setSocketDescriptorEiNS_11SocketStateE6QFlagsIN9QIODevice12OpenModeFlagEE</primary></indexterm>_ZN15QAbstractSocket19setSocketDescriptorEiNS_11SocketStateE6QFlagsIN9QIODevice12OpenModeFlagEE <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN15QAbstractSocket19waitForBytesWrittenEi</primary></indexterm>_ZN15QAbstractSocket19waitForBytesWrittenEi <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN15QAbstractSocket19waitForDisconnectedEi</primary></indexterm>_ZN15QAbstractSocket19waitForDisconnectedEi <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN15QAbstractSocket20delayedCloseFinishedEv</primary></indexterm>_ZN15QAbstractSocket20delayedCloseFinishedEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN15QAbstractSocket27connectToHostImplementationERK7QStringt6QFlagsIN9QIODevice12OpenModeFlagEE</primary></indexterm>_ZN15QAbstractSocket27connectToHostImplementationERK7QStringt6QFlagsIN9QIODevice12OpenModeFlagEE <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN15QAbstractSocket32disconnectFromHostImplementationEv</primary></indexterm>_ZN15QAbstractSocket32disconnectFromHostImplementationEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN15QAbstractSocket5abortEv</primary></indexterm>_ZN15QAbstractSocket5abortEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN15QAbstractSocket5closeEv</primary></indexterm>_ZN15QAbstractSocket5closeEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN15QAbstractSocket5errorENS_11SocketErrorE</primary></indexterm>_ZN15QAbstractSocket5errorENS_11SocketErrorE <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN15QAbstractSocket5flushEv</primary></indexterm>_ZN15QAbstractSocket5flushEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN15QAbstractSocket8readDataEPcx</primary></indexterm>_ZN15QAbstractSocket8readDataEPcx <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN15QAbstractSocket8setProxyERK13QNetworkProxy</primary></indexterm>_ZN15QAbstractSocket8setProxyERK13QNetworkProxy <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN15QAbstractSocket9connectedEv</primary></indexterm>_ZN15QAbstractSocket9connectedEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN15QAbstractSocket9hostFoundEv</primary></indexterm>_ZN15QAbstractSocket9hostFoundEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN15QAbstractSocket9writeDataEPKcx</primary></indexterm>_ZN15QAbstractSocket9writeDataEPKcx <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN15QAbstractSocketC1ENS_10SocketTypeEP7QObject</primary></indexterm>_ZN15QAbstractSocketC1ENS_10SocketTypeEP7QObject <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN15QAbstractSocketC1ENS_10SocketTypeER22QAbstractSocketPrivateP7QObject</primary></indexterm>_ZN15QAbstractSocketC1ENS_10SocketTypeER22QAbstractSocketPrivateP7QObject <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN15QAbstractSocketC2ENS_10SocketTypeEP7QObject</primary></indexterm>_ZN15QAbstractSocketC2ENS_10SocketTypeEP7QObject <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN15QAbstractSocketC2ENS_10SocketTypeER22QAbstractSocketPrivateP7QObject</primary></indexterm>_ZN15QAbstractSocketC2ENS_10SocketTypeER22QAbstractSocketPrivateP7QObject <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN15QAbstractSocketD0Ev</primary></indexterm>_ZN15QAbstractSocketD0Ev <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN15QAbstractSocketD1Ev</primary></indexterm>_ZN15QAbstractSocketD1Ev <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN15QAbstractSocketD2Ev</primary></indexterm>_ZN15QAbstractSocketD2Ev <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN18QHttpRequestHeader10setRequestERK7QStringS2_ii</primary></indexterm>_ZN18QHttpRequestHeader10setRequestERK7QStringS2_ii <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN18QHttpRequestHeader9parseLineERK7QStringi</primary></indexterm>_ZN18QHttpRequestHeader9parseLineERK7QStringi <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN18QHttpRequestHeaderC1ERK7QString</primary></indexterm>_ZN18QHttpRequestHeaderC1ERK7QString <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN18QHttpRequestHeaderC1ERK7QStringS2_ii</primary></indexterm>_ZN18QHttpRequestHeaderC1ERK7QStringS2_ii <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN18QHttpRequestHeaderC1ERKS_</primary></indexterm>_ZN18QHttpRequestHeaderC1ERKS_ <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN18QHttpRequestHeaderC1Ev</primary></indexterm>_ZN18QHttpRequestHeaderC1Ev <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN18QHttpRequestHeaderC2ERK7QString</primary></indexterm>_ZN18QHttpRequestHeaderC2ERK7QString <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN18QHttpRequestHeaderC2ERK7QStringS2_ii</primary></indexterm>_ZN18QHttpRequestHeaderC2ERK7QStringS2_ii <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN18QHttpRequestHeaderC2ERKS_</primary></indexterm>_ZN18QHttpRequestHeaderC2ERKS_ <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN18QHttpRequestHeaderC2Ev</primary></indexterm>_ZN18QHttpRequestHeaderC2Ev <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN18QHttpRequestHeaderD0Ev</primary></indexterm>_ZN18QHttpRequestHeaderD0Ev <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN18QHttpRequestHeaderD1Ev</primary></indexterm>_ZN18QHttpRequestHeaderD1Ev <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN18QHttpRequestHeaderaSERKS_</primary></indexterm>_ZN18QHttpRequestHeaderaSERKS_ <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN19QHttpResponseHeader13setStatusLineEiRK7QStringii</primary></indexterm>_ZN19QHttpResponseHeader13setStatusLineEiRK7QStringii <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN19QHttpResponseHeader9parseLineERK7QStringi</primary></indexterm>_ZN19QHttpResponseHeader9parseLineERK7QStringi <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN19QHttpResponseHeaderC1ERK7QString</primary></indexterm>_ZN19QHttpResponseHeaderC1ERK7QString <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN19QHttpResponseHeaderC1ERKS_</primary></indexterm>_ZN19QHttpResponseHeaderC1ERKS_ <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN19QHttpResponseHeaderC1EiRK7QStringii</primary></indexterm>_ZN19QHttpResponseHeaderC1EiRK7QStringii <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN19QHttpResponseHeaderC1Ev</primary></indexterm>_ZN19QHttpResponseHeaderC1Ev <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN19QHttpResponseHeaderC2ERK7QString</primary></indexterm>_ZN19QHttpResponseHeaderC2ERK7QString <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN19QHttpResponseHeaderC2ERKS_</primary></indexterm>_ZN19QHttpResponseHeaderC2ERKS_ <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN19QHttpResponseHeaderC2EiRK7QStringii</primary></indexterm>_ZN19QHttpResponseHeaderC2EiRK7QStringii <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN19QHttpResponseHeaderC2Ev</primary></indexterm>_ZN19QHttpResponseHeaderC2Ev <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN19QHttpResponseHeaderD0Ev</primary></indexterm>_ZN19QHttpResponseHeaderD0Ev <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN19QHttpResponseHeaderD1Ev</primary></indexterm>_ZN19QHttpResponseHeaderD1Ev <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN19QHttpResponseHeaderaSERKS_</primary></indexterm>_ZN19QHttpResponseHeaderaSERKS_ <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN4QFtp10rawCommandERK7QString</primary></indexterm>_ZN4QFtp10rawCommandERK7QString <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN4QFtp11qt_metacallEN11QMetaObject4CallEiPPv</primary></indexterm>_ZN4QFtp11qt_metacallEN11QMetaObject4CallEiPPv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN4QFtp11qt_metacastEPKc</primary></indexterm>_ZN4QFtp11qt_metacastEPKc <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN4QFtp12stateChangedEi</primary></indexterm>_ZN4QFtp12stateChangedEi <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN4QFtp13connectToHostERK7QStringt</primary></indexterm>_ZN4QFtp13connectToHostERK7QStringt <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN4QFtp14commandStartedEi</primary></indexterm>_ZN4QFtp14commandStartedEi <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN4QFtp15commandFinishedEib</primary></indexterm>_ZN4QFtp15commandFinishedEib <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN4QFtp15rawCommandReplyEiRK7QString</primary></indexterm>_ZN4QFtp15rawCommandReplyEiRK7QString <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN4QFtp15setTransferModeENS_12TransferModeE</primary></indexterm>_ZN4QFtp15setTransferModeENS_12TransferModeE <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN4QFtp20clearPendingCommandsEv</primary></indexterm>_ZN4QFtp20clearPendingCommandsEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN4QFtp20dataTransferProgressExx</primary></indexterm>_ZN4QFtp20dataTransferProgressExx <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN4QFtp2cdERK7QString</primary></indexterm>_ZN4QFtp2cdERK7QString <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN4QFtp3getERK7QStringP9QIODeviceNS_12TransferTypeE</primary></indexterm>_ZN4QFtp3getERK7QStringP9QIODeviceNS_12TransferTypeE <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN4QFtp3putEP9QIODeviceRK7QStringNS_12TransferTypeE</primary></indexterm>_ZN4QFtp3putEP9QIODeviceRK7QStringNS_12TransferTypeE <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN4QFtp3putERK10QByteArrayRK7QStringNS_12TransferTypeE</primary></indexterm>_ZN4QFtp3putERK10QByteArrayRK7QStringNS_12TransferTypeE <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN4QFtp4doneEb</primary></indexterm>_ZN4QFtp4doneEb <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN4QFtp4listERK7QString</primary></indexterm>_ZN4QFtp4listERK7QString <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN4QFtp4readEPcx</primary></indexterm>_ZN4QFtp4readEPcx <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN4QFtp5abortEv</primary></indexterm>_ZN4QFtp5abortEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN4QFtp5closeEv</primary></indexterm>_ZN4QFtp5closeEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN4QFtp5loginERK7QStringS2_</primary></indexterm>_ZN4QFtp5loginERK7QStringS2_ <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN4QFtp5mkdirERK7QString</primary></indexterm>_ZN4QFtp5mkdirERK7QString <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN4QFtp5rmdirERK7QString</primary></indexterm>_ZN4QFtp5rmdirERK7QString <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN4QFtp6removeERK7QString</primary></indexterm>_ZN4QFtp6removeERK7QString <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN4QFtp6renameERK7QStringS2_</primary></indexterm>_ZN4QFtp6renameERK7QStringS2_ <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN4QFtp7readAllEv</primary></indexterm>_ZN4QFtp7readAllEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN4QFtp8listInfoERK8QUrlInfo</primary></indexterm>_ZN4QFtp8listInfoERK8QUrlInfo <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN4QFtp8setProxyERK7QStringt</primary></indexterm>_ZN4QFtp8setProxyERK7QStringt <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN4QFtp9readyReadEv</primary></indexterm>_ZN4QFtp9readyReadEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN4QFtpC1EP7QObject</primary></indexterm>_ZN4QFtpC1EP7QObject <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN4QFtpC1EP7QObjectPKc</primary></indexterm>_ZN4QFtpC1EP7QObjectPKc <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN4QFtpC2EP7QObject</primary></indexterm>_ZN4QFtpC2EP7QObject <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN4QFtpC2EP7QObjectPKc</primary></indexterm>_ZN4QFtpC2EP7QObjectPKc <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN4QFtpD0Ev</primary></indexterm>_ZN4QFtpD0Ev <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN4QFtpD1Ev</primary></indexterm>_ZN4QFtpD1Ev <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN4QFtpD2Ev</primary></indexterm>_ZN4QFtpD2Ev <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN5QHttp11qt_metacallEN11QMetaObject4CallEiPPv</primary></indexterm>_ZN5QHttp11qt_metacallEN11QMetaObject4CallEiPPv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN5QHttp11qt_metacastEPKc</primary></indexterm>_ZN5QHttp11qt_metacastEPKc <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN5QHttp12stateChangedEi</primary></indexterm>_ZN5QHttp12stateChangedEi <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN5QHttp14requestStartedEi</primary></indexterm>_ZN5QHttp14requestStartedEi <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN5QHttp15closeConnectionEv</primary></indexterm>_ZN5QHttp15closeConnectionEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN5QHttp15requestFinishedEib</primary></indexterm>_ZN5QHttp15requestFinishedEib <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN5QHttp16dataReadProgressEii</primary></indexterm>_ZN5QHttp16dataReadProgressEii <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN5QHttp16dataSendProgressEii</primary></indexterm>_ZN5QHttp16dataSendProgressEii <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN5QHttp20clearPendingRequestsEv</primary></indexterm>_ZN5QHttp20clearPendingRequestsEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN5QHttp22responseHeaderReceivedERK19QHttpResponseHeader</primary></indexterm>_ZN5QHttp22responseHeaderReceivedERK19QHttpResponseHeader <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN5QHttp3getERK7QStringP9QIODevice</primary></indexterm>_ZN5QHttp3getERK7QStringP9QIODevice <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN5QHttp4doneEb</primary></indexterm>_ZN5QHttp4doneEb <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN5QHttp4headERK7QString</primary></indexterm>_ZN5QHttp4headERK7QString <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN5QHttp4postERK7QStringP9QIODeviceS4_</primary></indexterm>_ZN5QHttp4postERK7QStringP9QIODeviceS4_ <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN5QHttp4postERK7QStringRK10QByteArrayP9QIODevice</primary></indexterm>_ZN5QHttp4postERK7QStringRK10QByteArrayP9QIODevice <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN5QHttp4readEPcx</primary></indexterm>_ZN5QHttp4readEPcx <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN5QHttp5abortEv</primary></indexterm>_ZN5QHttp5abortEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN5QHttp5closeEv</primary></indexterm>_ZN5QHttp5closeEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN5QHttp7readAllEv</primary></indexterm>_ZN5QHttp7readAllEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN5QHttp7requestERK18QHttpRequestHeaderP9QIODeviceS4_</primary></indexterm>_ZN5QHttp7requestERK18QHttpRequestHeaderP9QIODeviceS4_ <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN5QHttp7requestERK18QHttpRequestHeaderRK10QByteArrayP9QIODevice</primary></indexterm>_ZN5QHttp7requestERK18QHttpRequestHeaderRK10QByteArrayP9QIODevice <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN5QHttp7setHostERK7QStringt</primary></indexterm>_ZN5QHttp7setHostERK7QStringt <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN5QHttp7setUserERK7QStringS2_</primary></indexterm>_ZN5QHttp7setUserERK7QStringS2_ <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN5QHttp8setProxyERK7QStringiS2_S2_</primary></indexterm>_ZN5QHttp8setProxyERK7QStringiS2_S2_ <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN5QHttp9readyReadERK19QHttpResponseHeader</primary></indexterm>_ZN5QHttp9readyReadERK19QHttpResponseHeader <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN5QHttp9setSocketEP10QTcpSocket</primary></indexterm>_ZN5QHttp9setSocketEP10QTcpSocket <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN5QHttpC1EP7QObject</primary></indexterm>_ZN5QHttpC1EP7QObject <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN5QHttpC1ERK7QStringtP7QObject</primary></indexterm>_ZN5QHttpC1ERK7QStringtP7QObject <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN5QHttpC2EP7QObject</primary></indexterm>_ZN5QHttpC2EP7QObject <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN5QHttpC2ERK7QStringtP7QObject</primary></indexterm>_ZN5QHttpC2ERK7QStringtP7QObject <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN5QHttpD0Ev</primary></indexterm>_ZN5QHttpD0Ev <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN5QHttpD1Ev</primary></indexterm>_ZN5QHttpD1Ev <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN5QHttpD2Ev</primary></indexterm>_ZN5QHttpD2Ev <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QUrlInfo10setSymLinkEb</primary></indexterm>_ZN8QUrlInfo10setSymLinkEb <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QUrlInfo11greaterThanERKS_S1_i</primary></indexterm>_ZN8QUrlInfo11greaterThanERKS_S1_i <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QUrlInfo11setReadableEb</primary></indexterm>_ZN8QUrlInfo11setReadableEb <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QUrlInfo11setWritableEb</primary></indexterm>_ZN8QUrlInfo11setWritableEb <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QUrlInfo14setPermissionsEi</primary></indexterm>_ZN8QUrlInfo14setPermissionsEi <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QUrlInfo15setLastModifiedERK9QDateTime</primary></indexterm>_ZN8QUrlInfo15setLastModifiedERK9QDateTime <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QUrlInfo5equalERKS_S1_i</primary></indexterm>_ZN8QUrlInfo5equalERKS_S1_i <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QUrlInfo6setDirEb</primary></indexterm>_ZN8QUrlInfo6setDirEb <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QUrlInfo7setFileEb</primary></indexterm>_ZN8QUrlInfo7setFileEb <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QUrlInfo7setNameERK7QString</primary></indexterm>_ZN8QUrlInfo7setNameERK7QString <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QUrlInfo7setSizeEx</primary></indexterm>_ZN8QUrlInfo7setSizeEx <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QUrlInfo8lessThanERKS_S1_i</primary></indexterm>_ZN8QUrlInfo8lessThanERKS_S1_i <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QUrlInfo8setGroupERK7QString</primary></indexterm>_ZN8QUrlInfo8setGroupERK7QString <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QUrlInfo8setOwnerERK7QString</primary></indexterm>_ZN8QUrlInfo8setOwnerERK7QString <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QUrlInfoC1ERK4QUrliRK7QStringS5_xRK9QDateTimeS8_bbbbbb</primary></indexterm>_ZN8QUrlInfoC1ERK4QUrliRK7QStringS5_xRK9QDateTimeS8_bbbbbb <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QUrlInfoC1ERK7QStringiS2_S2_xRK9QDateTimeS5_bbbbbb</primary></indexterm>_ZN8QUrlInfoC1ERK7QStringiS2_S2_xRK9QDateTimeS5_bbbbbb <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QUrlInfoC1ERKS_</primary></indexterm>_ZN8QUrlInfoC1ERKS_ <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QUrlInfoC1Ev</primary></indexterm>_ZN8QUrlInfoC1Ev <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QUrlInfoC2ERK4QUrliRK7QStringS5_xRK9QDateTimeS8_bbbbbb</primary></indexterm>_ZN8QUrlInfoC2ERK4QUrliRK7QStringS5_xRK9QDateTimeS8_bbbbbb <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QUrlInfoC2ERK7QStringiS2_S2_xRK9QDateTimeS5_bbbbbb</primary></indexterm>_ZN8QUrlInfoC2ERK7QStringiS2_S2_xRK9QDateTimeS5_bbbbbb <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QUrlInfoC2ERKS_</primary></indexterm>_ZN8QUrlInfoC2ERKS_ <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QUrlInfoC2Ev</primary></indexterm>_ZN8QUrlInfoC2Ev <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QUrlInfoD0Ev</primary></indexterm>_ZN8QUrlInfoD0Ev <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QUrlInfoD1Ev</primary></indexterm>_ZN8QUrlInfoD1Ev <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN8QUrlInfoD2Ev</primary></indexterm>_ZN8QUrlInfoD2Ev <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN8QUrlInfoaSERKS_</primary></indexterm>_ZN8QUrlInfoaSERKS_ <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QHostInfo10lookupHostERK7QStringP7QObjectPKc</primary></indexterm>_ZN9QHostInfo10lookupHostERK7QStringP7QObjectPKc <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QHostInfo11setHostNameERK7QString</primary></indexterm>_ZN9QHostInfo11setHostNameERK7QString <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QHostInfo11setLookupIdEi</primary></indexterm>_ZN9QHostInfo11setLookupIdEi <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QHostInfo12setAddressesERK5QListI12QHostAddressE</primary></indexterm>_ZN9QHostInfo12setAddressesERK5QListI12QHostAddressE <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QHostInfo13localHostNameEv</primary></indexterm>_ZN9QHostInfo13localHostNameEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QHostInfo14setErrorStringERK7QString</primary></indexterm>_ZN9QHostInfo14setErrorStringERK7QString <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QHostInfo15abortHostLookupEi</primary></indexterm>_ZN9QHostInfo15abortHostLookupEi <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QHostInfo8fromNameERK7QString</primary></indexterm>_ZN9QHostInfo8fromNameERK7QString <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QHostInfo8setErrorENS_13HostInfoErrorE</primary></indexterm>_ZN9QHostInfo8setErrorENS_13HostInfoErrorE <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QHostInfoC1ERKS_</primary></indexterm>_ZN9QHostInfoC1ERKS_ <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QHostInfoC1Ei</primary></indexterm>_ZN9QHostInfoC1Ei <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QHostInfoC2ERKS_</primary></indexterm>_ZN9QHostInfoC2ERKS_ <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QHostInfoC2Ei</primary></indexterm>_ZN9QHostInfoC2Ei <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QHostInfoD1Ev</primary></indexterm>_ZN9QHostInfoD1Ev <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN9QHostInfoD2Ev</primary></indexterm>_ZN9QHostInfoD2Ev <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN9QHostInfoaSERKS_</primary></indexterm>_ZN9QHostInfoaSERKS_ <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK10QTcpServer10metaObjectEv</primary></indexterm>_ZNK10QTcpServer10metaObjectEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK10QTcpServer10serverPortEv</primary></indexterm>_ZNK10QTcpServer10serverPortEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK10QTcpServer11errorStringEv</primary></indexterm>_ZNK10QTcpServer11errorStringEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK10QTcpServer11isListeningEv</primary></indexterm>_ZNK10QTcpServer11isListeningEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK10QTcpServer11serverErrorEv</primary></indexterm>_ZNK10QTcpServer11serverErrorEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK10QTcpServer13serverAddressEv</primary></indexterm>_ZNK10QTcpServer13serverAddressEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK10QTcpServer16socketDescriptorEv</primary></indexterm>_ZNK10QTcpServer16socketDescriptorEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK10QTcpServer21hasPendingConnectionsEv</primary></indexterm>_ZNK10QTcpServer21hasPendingConnectionsEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK10QTcpServer21maxPendingConnectionsEv</primary></indexterm>_ZNK10QTcpServer21maxPendingConnectionsEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK10QTcpServer5proxyEv</primary></indexterm>_ZNK10QTcpServer5proxyEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK10QTcpSocket10metaObjectEv</primary></indexterm>_ZNK10QTcpSocket10metaObjectEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK10QUdpSocket10metaObjectEv</primary></indexterm>_ZNK10QUdpSocket10metaObjectEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK10QUdpSocket19hasPendingDatagramsEv</primary></indexterm>_ZNK10QUdpSocket19hasPendingDatagramsEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK10QUdpSocket19pendingDatagramSizeEv</primary></indexterm>_ZNK10QUdpSocket19pendingDatagramSizeEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK11QHttpHeader11contentTypeEv</primary></indexterm>_ZNK11QHttpHeader11contentTypeEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK11QHttpHeader13contentLengthEv</primary></indexterm>_ZNK11QHttpHeader13contentLengthEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK11QHttpHeader14hasContentTypeEv</primary></indexterm>_ZNK11QHttpHeader14hasContentTypeEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK11QHttpHeader16hasContentLengthEv</primary></indexterm>_ZNK11QHttpHeader16hasContentLengthEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK11QHttpHeader4keysEv</primary></indexterm>_ZNK11QHttpHeader4keysEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK11QHttpHeader5valueERK7QString</primary></indexterm>_ZNK11QHttpHeader5valueERK7QString <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK11QHttpHeader6hasKeyERK7QString</primary></indexterm>_ZNK11QHttpHeader6hasKeyERK7QString <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK11QHttpHeader6valuesEv</primary></indexterm>_ZNK11QHttpHeader6valuesEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK11QHttpHeader7isValidEv</primary></indexterm>_ZNK11QHttpHeader7isValidEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK11QHttpHeader8toStringEv</primary></indexterm>_ZNK11QHttpHeader8toStringEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK11QHttpHeader9allValuesERK7QString</primary></indexterm>_ZNK11QHttpHeader9allValuesERK7QString <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK12QHostAddress13toIPv4AddressEv</primary></indexterm>_ZNK12QHostAddress13toIPv4AddressEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK12QHostAddress13toIPv6AddressEv</primary></indexterm>_ZNK12QHostAddress13toIPv6AddressEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK12QHostAddress6isNullEv</primary></indexterm>_ZNK12QHostAddress6isNullEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK12QHostAddress7scopeIdEv</primary></indexterm>_ZNK12QHostAddress7scopeIdEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK12QHostAddress8protocolEv</primary></indexterm>_ZNK12QHostAddress8protocolEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK12QHostAddress8toStringEv</primary></indexterm>_ZNK12QHostAddress8toStringEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK12QHostAddresseqENS_14SpecialAddressE</primary></indexterm>_ZNK12QHostAddresseqENS_14SpecialAddressE <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK12QHostAddresseqERKS_</primary></indexterm>_ZNK12QHostAddresseqERKS_ <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK13QNetworkProxy4portEv</primary></indexterm>_ZNK13QNetworkProxy4portEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK13QNetworkProxy4typeEv</primary></indexterm>_ZNK13QNetworkProxy4typeEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK13QNetworkProxy4userEv</primary></indexterm>_ZNK13QNetworkProxy4userEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK13QNetworkProxy8hostNameEv</primary></indexterm>_ZNK13QNetworkProxy8hostNameEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK13QNetworkProxy8passwordEv</primary></indexterm>_ZNK13QNetworkProxy8passwordEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK15QAbstractSocket10metaObjectEv</primary></indexterm>_ZNK15QAbstractSocket10metaObjectEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK15QAbstractSocket10socketTypeEv</primary></indexterm>_ZNK15QAbstractSocket10socketTypeEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK15QAbstractSocket11canReadLineEv</primary></indexterm>_ZNK15QAbstractSocket11canReadLineEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK15QAbstractSocket11peerAddressEv</primary></indexterm>_ZNK15QAbstractSocket11peerAddressEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK15QAbstractSocket12bytesToWriteEv</primary></indexterm>_ZNK15QAbstractSocket12bytesToWriteEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK15QAbstractSocket12isSequentialEv</primary></indexterm>_ZNK15QAbstractSocket12isSequentialEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK15QAbstractSocket12localAddressEv</primary></indexterm>_ZNK15QAbstractSocket12localAddressEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK15QAbstractSocket14bytesAvailableEv</primary></indexterm>_ZNK15QAbstractSocket14bytesAvailableEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK15QAbstractSocket14readBufferSizeEv</primary></indexterm>_ZNK15QAbstractSocket14readBufferSizeEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK15QAbstractSocket16socketDescriptorEv</primary></indexterm>_ZNK15QAbstractSocket16socketDescriptorEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK15QAbstractSocket5atEndEv</primary></indexterm>_ZNK15QAbstractSocket5atEndEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK15QAbstractSocket5errorEv</primary></indexterm>_ZNK15QAbstractSocket5errorEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK15QAbstractSocket5proxyEv</primary></indexterm>_ZNK15QAbstractSocket5proxyEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK15QAbstractSocket5stateEv</primary></indexterm>_ZNK15QAbstractSocket5stateEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK15QAbstractSocket7isValidEv</primary></indexterm>_ZNK15QAbstractSocket7isValidEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK15QAbstractSocket8peerNameEv</primary></indexterm>_ZNK15QAbstractSocket8peerNameEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK15QAbstractSocket8peerPortEv</primary></indexterm>_ZNK15QAbstractSocket8peerPortEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK15QAbstractSocket9localPortEv</primary></indexterm>_ZNK15QAbstractSocket9localPortEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK18QHttpRequestHeader12majorVersionEv</primary></indexterm>_ZNK18QHttpRequestHeader12majorVersionEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK18QHttpRequestHeader12minorVersionEv</primary></indexterm>_ZNK18QHttpRequestHeader12minorVersionEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK18QHttpRequestHeader4pathEv</primary></indexterm>_ZNK18QHttpRequestHeader4pathEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK18QHttpRequestHeader6methodEv</primary></indexterm>_ZNK18QHttpRequestHeader6methodEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK18QHttpRequestHeader8toStringEv</primary></indexterm>_ZNK18QHttpRequestHeader8toStringEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK19QHttpResponseHeader10statusCodeEv</primary></indexterm>_ZNK19QHttpResponseHeader10statusCodeEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK19QHttpResponseHeader12majorVersionEv</primary></indexterm>_ZNK19QHttpResponseHeader12majorVersionEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK19QHttpResponseHeader12minorVersionEv</primary></indexterm>_ZNK19QHttpResponseHeader12minorVersionEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK19QHttpResponseHeader12reasonPhraseEv</primary></indexterm>_ZNK19QHttpResponseHeader12reasonPhraseEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK19QHttpResponseHeader8toStringEv</primary></indexterm>_ZNK19QHttpResponseHeader8toStringEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK4QFtp10metaObjectEv</primary></indexterm>_ZNK4QFtp10metaObjectEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK4QFtp11errorStringEv</primary></indexterm>_ZNK4QFtp11errorStringEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK4QFtp13currentDeviceEv</primary></indexterm>_ZNK4QFtp13currentDeviceEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK4QFtp14bytesAvailableEv</primary></indexterm>_ZNK4QFtp14bytesAvailableEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK4QFtp14currentCommandEv</primary></indexterm>_ZNK4QFtp14currentCommandEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK4QFtp18hasPendingCommandsEv</primary></indexterm>_ZNK4QFtp18hasPendingCommandsEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK4QFtp5errorEv</primary></indexterm>_ZNK4QFtp5errorEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK4QFtp5stateEv</primary></indexterm>_ZNK4QFtp5stateEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK4QFtp9currentIdEv</primary></indexterm>_ZNK4QFtp9currentIdEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK5QHttp10metaObjectEv</primary></indexterm>_ZNK5QHttp10metaObjectEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK5QHttp11errorStringEv</primary></indexterm>_ZNK5QHttp11errorStringEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK5QHttp12lastResponseEv</primary></indexterm>_ZNK5QHttp12lastResponseEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK5QHttp14bytesAvailableEv</primary></indexterm>_ZNK5QHttp14bytesAvailableEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK5QHttp14currentRequestEv</primary></indexterm>_ZNK5QHttp14currentRequestEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK5QHttp18hasPendingRequestsEv</primary></indexterm>_ZNK5QHttp18hasPendingRequestsEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK5QHttp19currentSourceDeviceEv</primary></indexterm>_ZNK5QHttp19currentSourceDeviceEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK5QHttp24currentDestinationDeviceEv</primary></indexterm>_ZNK5QHttp24currentDestinationDeviceEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK5QHttp5errorEv</primary></indexterm>_ZNK5QHttp5errorEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK5QHttp5stateEv</primary></indexterm>_ZNK5QHttp5stateEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK5QHttp9currentIdEv</primary></indexterm>_ZNK5QHttp9currentIdEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK8QUrlInfo10isReadableEv</primary></indexterm>_ZNK8QUrlInfo10isReadableEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK8QUrlInfo10isWritableEv</primary></indexterm>_ZNK8QUrlInfo10isWritableEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK8QUrlInfo11permissionsEv</primary></indexterm>_ZNK8QUrlInfo11permissionsEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK8QUrlInfo12isExecutableEv</primary></indexterm>_ZNK8QUrlInfo12isExecutableEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK8QUrlInfo12lastModifiedEv</primary></indexterm>_ZNK8QUrlInfo12lastModifiedEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK8QUrlInfo4nameEv</primary></indexterm>_ZNK8QUrlInfo4nameEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK8QUrlInfo4sizeEv</primary></indexterm>_ZNK8QUrlInfo4sizeEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK8QUrlInfo5groupEv</primary></indexterm>_ZNK8QUrlInfo5groupEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK8QUrlInfo5isDirEv</primary></indexterm>_ZNK8QUrlInfo5isDirEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK8QUrlInfo5ownerEv</primary></indexterm>_ZNK8QUrlInfo5ownerEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK8QUrlInfo6isFileEv</primary></indexterm>_ZNK8QUrlInfo6isFileEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK8QUrlInfo7isValidEv</primary></indexterm>_ZNK8QUrlInfo7isValidEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK8QUrlInfo8lastReadEv</primary></indexterm>_ZNK8QUrlInfo8lastReadEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK8QUrlInfo9isSymLinkEv</primary></indexterm>_ZNK8QUrlInfo9isSymLinkEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK8QUrlInfoeqERKS_</primary></indexterm>_ZNK8QUrlInfoeqERKS_ <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK9QHostInfo11errorStringEv</primary></indexterm>_ZNK9QHostInfo11errorStringEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK9QHostInfo5errorEv</primary></indexterm>_ZNK9QHostInfo5errorEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK9QHostInfo8hostNameEv</primary></indexterm>_ZNK9QHostInfo8hostNameEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZNK9QHostInfo8lookupIdEv</primary></indexterm>_ZNK9QHostInfo8lookupIdEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZNK9QHostInfo9addressesEv</primary></indexterm>_ZNK9QHostInfo9addressesEv <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_Zls6QDebugRK12QHostAddress</primary></indexterm>_Zls6QDebugRK12QHostAddress <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for QtNetwork specified in <XREF linkend="tbl-libQtNetwork-qtn-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<TABLE id="tbl-libQtNetwork-qtn-data">
<TITLE>libQtNetwork - QtNetwork Data Interfaces</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY><indexterm><primary>_ZN10QTcpServer16staticMetaObjectE</primary></indexterm>_ZN10QTcpServer16staticMetaObjectE <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN10QTcpSocket16staticMetaObjectE</primary></indexterm>_ZN10QTcpSocket16staticMetaObjectE <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN10QUdpSocket16staticMetaObjectE</primary></indexterm>_ZN10QUdpSocket16staticMetaObjectE <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN15QAbstractSocket16staticMetaObjectE</primary></indexterm>_ZN15QAbstractSocket16staticMetaObjectE <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZN4QFtp16staticMetaObjectE</primary></indexterm>_ZN4QFtp16staticMetaObjectE <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZN5QHttp16staticMetaObjectE</primary></indexterm>_ZN5QHttp16staticMetaObjectE <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZTI10QTcpServer</primary></indexterm>_ZTI10QTcpServer <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZTI10QTcpSocket</primary></indexterm>_ZTI10QTcpSocket <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZTI10QUdpSocket</primary></indexterm>_ZTI10QUdpSocket <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZTI11QHttpHeader</primary></indexterm>_ZTI11QHttpHeader <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZTI15QAbstractSocket</primary></indexterm>_ZTI15QAbstractSocket <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZTI18QHttpRequestHeader</primary></indexterm>_ZTI18QHttpRequestHeader <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZTI19QHttpResponseHeader</primary></indexterm>_ZTI19QHttpResponseHeader <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZTI4QFtp</primary></indexterm>_ZTI4QFtp <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZTI5QHttp</primary></indexterm>_ZTI5QHttp <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZTI8QUrlInfo</primary></indexterm>_ZTI8QUrlInfo <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZTV10QTcpServer</primary></indexterm>_ZTV10QTcpServer <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZTV10QTcpSocket</primary></indexterm>_ZTV10QTcpSocket <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZTV10QUdpSocket</primary></indexterm>_ZTV10QUdpSocket <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZTV11QHttpHeader</primary></indexterm>_ZTV11QHttpHeader <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZTV15QAbstractSocket</primary></indexterm>_ZTV15QAbstractSocket <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZTV18QHttpRequestHeader</primary></indexterm>_ZTV18QHttpRequestHeader <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZTV19QHttpResponseHeader</primary></indexterm>_ZTV19QHttpResponseHeader <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZTV4QFtp</primary></indexterm>_ZTV4QFtp <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_ZTV5QHttp</primary></indexterm>_ZTV5QHttp <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
<ENTRY><indexterm><primary>_ZTV8QUrlInfo</primary></indexterm>_ZTV8QUrlInfo <LINK LINKEND="REFSTD.libQtNetwork.1">[QtNetwork]</LINK></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>
</SECT2>
</SECT1>
<SECT1 ID=libQtNetwork-ddefs>
<TITLE>Data Definitions for libQtNetwork</TITLE>
<PARA>
This section defines global identifiers and their values that are associated
with interfaces contained in libQtNetwork.
These definitions are organized into groups that
correspond to system headers. This convention is used as a
convenience for the reader, and does not imply the existence
of these headers, or their content.
Where an interface is defined as requiring a particular system header file
all of the data definitions for that system header file presented here shall be in effect.
</PARA>
<PARA>
This section gives data definitions to promote binary application
portability, not to repeat source interface definitions available
elsewhere. System providers and application developers should use this ABI
to supplement - not to replace - source interface definition specifications.
</PARA>
<PARA>
This specification uses the <XREF LINKEND='std.ISOC99'> C Language as the reference programming language, and data definitions are specified in ISO C format. The C language is used here as a convenient notation. Using a C language description of these data objects does not preclude their use by other programming languages.</PARA>
<SECT2>
<TITLE>QtNetwork/qabstractsocket.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QABSTRACTSOCKET_H
#define QABSTRACTSOCKET_H

#include &lt;QtCore/qiodevice.h>
#include &lt;QtCore/qobject.h>

QT_MODULE(Network)

class QHostAddress;
class QNetworkProxy;
class QAbstractSocketPrivate;

class Q_NETWORK_EXPORT QAbstractSocket : public QIODevice
{
    Q_OBJECT
public:
    enum SocketType {
        TcpSocket,
        UdpSocket,
        UnknownSocketType = -1
    };
    enum NetworkLayerProtocol {
        IPv4Protocol,
        IPv6Protocol,
        UnknownNetworkLayerProtocol = -1
    };
    enum SocketError {
        ConnectionRefusedError,
        RemoteHostClosedError,
        HostNotFoundError,
        SocketAccessError,
        SocketResourceError,
        SocketTimeoutError,
        DatagramTooLargeError,
        NetworkError,
        AddressInUseError,
        SocketAddressNotAvailableError,
        UnsupportedSocketOperationError,
        UnknownSocketError = -1
    };
    enum SocketState {
        UnconnectedState,
        HostLookupState,
        ConnectingState,
        ConnectedState,
        BoundState,
        ListeningState,
        ClosingState
#ifdef QT3_SUPPORT
        ,
        Idle = UnconnectedState,
        HostLookup = HostLookupState,
        Connecting = ConnectingState,
        Connected = ConnectedState,
        Closing = ClosingState,
        Connection = ConnectedState
#endif
    };

    QAbstractSocket(SocketType socketType, QObject *parent);
    virtual ~QAbstractSocket();

    void connectToHost(const QString &amp;hostName, quint16 port, OpenMode mode = ReadWrite);
    void connectToHost(const QHostAddress &amp;address, quint16 port, OpenMode mode = ReadWrite);
    void disconnectFromHost();

    bool isValid() const;

    qint64 bytesAvailable() const;
    qint64 bytesToWrite() const;

    bool canReadLine() const;

    quint16 localPort() const;
    QHostAddress localAddress() const;
    quint16 peerPort() const;
    QHostAddress peerAddress() const;
    QString peerName() const;

    qint64 readBufferSize() const;
    void setReadBufferSize(qint64 size);

    void abort();

    int socketDescriptor() const;
    bool setSocketDescriptor(int socketDescriptor, SocketState state = ConnectedState,
                             OpenMode openMode = ReadWrite);

    SocketType socketType() const;
    SocketState state() const;
    SocketError error() const;

    // from QIODevice
    void close();
    bool isSequential() const;
    bool atEnd() const;
    bool flush();

    // for synchronous access
    bool waitForConnected(int msecs = 30000);
    bool waitForReadyRead(int msecs = 30000);
    bool waitForBytesWritten(int msecs = 30000);
    bool waitForDisconnected(int msecs = 30000);

#ifndef QT_NO_NETWORKPROXY
    void setProxy(const QNetworkProxy &amp;networkProxy);
    QNetworkProxy proxy() const;
#endif

Q_SIGNALS:
    void hostFound();
    void connected();
    void disconnected();
    void stateChanged(QAbstractSocket::SocketState);
    void error(QAbstractSocket::SocketError);

protected Q_SLOTS:
    void connectToHostImplementation(const QString &amp;hostName, quint16 port, OpenMode mode = ReadWrite);
    void disconnectFromHostImplementation();

protected:
    qint64 readData(char *data, qint64 maxlen);
    qint64 readLineData(char *data, qint64 maxlen);
    qint64 writeData(const char *data, qint64 len);

    void setSocketState(SocketState state);
    void setSocketError(SocketError socketError);
    void setLocalPort(quint16 port);
    void setLocalAddress(const QHostAddress &amp;address);
    void setPeerPort(quint16 port);
    void setPeerAddress(const QHostAddress &amp;address);
    void setPeerName(const QString &amp;name);

    QAbstractSocket(SocketType socketType, QAbstractSocketPrivate &amp;dd, QObject *parent = 0);

private:
    Q_DECLARE_PRIVATE(QAbstractSocket)
    Q_DISABLE_COPY(QAbstractSocket)

    Q_PRIVATE_SLOT(d_func(), void connectToNextAddress())
    Q_PRIVATE_SLOT(d_func(), void startConnecting(const QHostInfo &amp;))
    Q_PRIVATE_SLOT(d_func(), void abortConnectionAttempt())
    Q_PRIVATE_SLOT(d_func(), void testConnection())
    Q_PRIVATE_SLOT(d_func(), bool canReadNotification())
    Q_PRIVATE_SLOT(d_func(), bool canWriteNotification())

#ifdef QT3_SUPPORT
public:
    enum Error {
        ErrConnectionRefused = ConnectionRefusedError,
        ErrHostNotFound = HostNotFoundError,
        ErrSocketRead = UnknownSocketError
    };
    inline QT3_SUPPORT int socket() const { return socketDescriptor(); }
    inline QT3_SUPPORT void setSocket(int socket) { setSocketDescriptor(socket); }
    inline QT3_SUPPORT qulonglong waitForMore(int msecs, bool *timeout = 0) const
    {
        QAbstractSocket *that = const_cast&lt;QAbstractSocket *>(this);
        if (that->waitForReadyRead(msecs))
            return qulonglong(bytesAvailable());
        if (error() == SocketTimeoutError &amp;&amp; timeout)
            *timeout = true;
        return 0;
    }
    typedef SocketState State;
Q_SIGNALS:
    QT_MOC_COMPAT void connectionClosed(); // same as disconnected()
    QT_MOC_COMPAT void delayedCloseFinished(); // same as disconnected()


#endif
};

#endif // QABSTRACTSOCKET_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtNetwork/qftp.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QFTP_H
#define QFTP_H

#include &lt;QtCore/qstring.h>
#include &lt;QtNetwork/qurlinfo.h>
#include &lt;QtCore/qobject.h>

QT_MODULE(Network)

#ifndef QT_NO_FTP

class QFtpPrivate;

class Q_NETWORK_EXPORT QFtp : public QObject
{
    Q_OBJECT

public:
    explicit QFtp(QObject *parent = 0);
    virtual ~QFtp();

    enum State {
        Unconnected,
        HostLookup,
        Connecting,
        Connected,
        LoggedIn,
        Closing
    };
    enum Error {
        NoError,
        UnknownError,
        HostNotFound,
        ConnectionRefused,
        NotConnected
    };
    enum Command {
        None,
        SetTransferMode,
        SetProxy,
        ConnectToHost,
        Login,
        Close,
        List,
        Cd,
        Get,
        Put,
        Remove,
        Mkdir,
        Rmdir,
        Rename,
        RawCommand
    };
    enum TransferMode {
        Active,
        Passive
    };
    enum TransferType {
        Binary,
        Ascii
    };

    int setProxy(const QString &amp;host, quint16 port);
    int connectToHost(const QString &amp;host, quint16 port=21);
    int login(const QString &amp;user = QString(), const QString &amp;password = QString());
    int close();
    int setTransferMode(TransferMode mode);
    int list(const QString &amp;dir = QString());
    int cd(const QString &amp;dir);
    int get(const QString &amp;file, QIODevice *dev=0, TransferType type = Binary);
    int put(const QByteArray &amp;data, const QString &amp;file, TransferType type = Binary);
    int put(QIODevice *dev, const QString &amp;file, TransferType type = Binary);
    int remove(const QString &amp;file);
    int mkdir(const QString &amp;dir);
    int rmdir(const QString &amp;dir);
    int rename(const QString &amp;oldname, const QString &amp;newname);

    int rawCommand(const QString &amp;command);

    qint64 bytesAvailable() const;
    qint64 read(char *data, qint64 maxlen);
#ifdef QT3_SUPPORT
    inline QT3_SUPPORT qint64 readBlock(char *data, quint64 maxlen)
    { return read(data, qint64(maxlen)); }
#endif
    QByteArray readAll();

    int currentId() const;
    QIODevice* currentDevice() const;
    Command currentCommand() const;
    bool hasPendingCommands() const;
    void clearPendingCommands();

    State state() const;

    Error error() const;
    QString errorString() const;

public Q_SLOTS:
    void abort();

Q_SIGNALS:
    void stateChanged(int);
    void listInfo(const QUrlInfo&amp;);
    void readyRead();
    void dataTransferProgress(qint64, qint64);
    void rawCommandReply(int, const QString&amp;);

    void commandStarted(int);
    void commandFinished(int, bool);
    void done(bool);

#ifdef QT3_SUPPORT
public:
    QT3_SUPPORT_CONSTRUCTOR QFtp(QObject *parent, const char *name);
#endif

private:
    Q_DISABLE_COPY(QFtp)
    Q_DECLARE_PRIVATE(QFtp)

    Q_PRIVATE_SLOT(d_func(), void startNextCommand())
    Q_PRIVATE_SLOT(d_func(), void piFinished(const QString&amp;))
    Q_PRIVATE_SLOT(d_func(), void piError(int, const QString&amp;))
    Q_PRIVATE_SLOT(d_func(), void piConnectState(int))
    Q_PRIVATE_SLOT(d_func(), void piFtpReply(int, const QString&amp;))
};

#endif // QT_NO_FTP

#endif // QFTP_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtNetwork/qhostaddress.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QHOSTADDRESS_H
#define QHOSTADDRESS_H

#include &lt;QtCore/qstring.h>
#include &lt;QtNetwork/qabstractsocket.h>

QT_MODULE(Network)

struct sockaddr;
class QHostAddressPrivate;

class Q_NETWORK_EXPORT QIPv6Address
{
public:
    inline quint8 &amp;operator [](int index) { return c[index]; }
    inline quint8 operator [](int index) const { return c[index]; }
    quint8 c[16];
};

typedef QIPv6Address Q_IPV6ADDR;

class Q_NETWORK_EXPORT QHostAddress
{
public:
    enum SpecialAddress {
        Null,
        Broadcast,
        LocalHost,
        LocalHostIPv6,
        Any,
        AnyIPv6
    };

    QHostAddress();
    explicit QHostAddress(quint32 ip4Addr);
    explicit QHostAddress(quint8 *ip6Addr);
    explicit QHostAddress(const Q_IPV6ADDR &amp;ip6Addr);
    explicit QHostAddress(const sockaddr *sockaddr);
    explicit QHostAddress(const QString &amp;address);
    QHostAddress(const QHostAddress &amp;copy);
    QHostAddress(SpecialAddress address);
    ~QHostAddress();

    QHostAddress &amp;operator=(const QHostAddress &amp;other);
    QHostAddress &amp;operator=(const QString &amp;address);

    void setAddress(quint32 ip4Addr);
    void setAddress(quint8 *ip6Addr);
    void setAddress(const Q_IPV6ADDR &amp;ip6Addr);
    void setAddress(const sockaddr *sockaddr);
    bool setAddress(const QString &amp;address);

    QAbstractSocket::NetworkLayerProtocol protocol() const;
    quint32 toIPv4Address() const;
    Q_IPV6ADDR toIPv6Address() const;

    QString toString() const;

    QString scopeId() const;
    void setScopeId(const QString &amp;id);

    bool operator ==(const QHostAddress &amp;address) const;
    bool operator ==(SpecialAddress address) const;
    bool isNull() const;
    void clear();

#ifdef QT3_SUPPORT
    inline QT3_SUPPORT quint32 ip4Addr() const { return toIPv4Address(); }
    inline QT3_SUPPORT bool isIPv4Address() const { return protocol() == QAbstractSocket::IPv4Protocol
                                                      || protocol() == QAbstractSocket::UnknownNetworkLayerProtocol; }
    inline QT3_SUPPORT bool isIp4Addr() const  { return protocol() == QAbstractSocket::IPv4Protocol
                                                      || protocol() == QAbstractSocket::UnknownNetworkLayerProtocol; }
    inline QT3_SUPPORT bool isIPv6Address() const { return protocol() == QAbstractSocket::IPv6Protocol; }
#endif

private:
    QHostAddressPrivate *d;
};

inline bool operator ==(QHostAddress::SpecialAddress address1, const QHostAddress &amp;address2)
{ return address2 == address1; }

#ifndef QT_NO_DEBUG_STREAM
Q_NETWORK_EXPORT QDebug operator&lt;&lt;(QDebug, const QHostAddress &amp;);
#endif

#endif // QHOSTADDRESS_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtNetwork/qhostinfo.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QHOSTINFO_H
#define QHOSTINFO_H

#include &lt;QtCore/qlist.h>
#include &lt;QtNetwork/qhostaddress.h>

QT_MODULE(Network)

class QObject;
class QHostInfoPrivate;

class Q_NETWORK_EXPORT QHostInfo
{
public:
    enum HostInfoError {
        NoError,
        HostNotFound,
        UnknownError
    };

    QHostInfo(int lookupId = -1);
    QHostInfo(const QHostInfo &amp;d);
    QHostInfo &amp;operator=(const QHostInfo &amp;d);
    ~QHostInfo();

    QString hostName() const;
    void setHostName(const QString &amp;name);

    QList&lt;QHostAddress> addresses() const;
    void setAddresses(const QList&lt;QHostAddress> &amp;addresses);

    HostInfoError error() const;
    void setError(HostInfoError error);

    QString errorString() const;
    void setErrorString(const QString &amp;errorString);

    void setLookupId(int id);
    int lookupId() const;

    static int lookupHost(const QString &amp;name, QObject *receiver, const char *member);
    static void abortHostLookup(int lookupId);

    static QHostInfo fromName(const QString &amp;name);
    static QString localHostName();

private:
    QHostInfoPrivate *d;
};

#endif // QHOSTINFO_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtNetwork/qhttp.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QHTTP_H
#define QHTTP_H

#include &lt;QtCore/qobject.h>
#include &lt;QtCore/qstringlist.h>
#include &lt;QtCore/qmap.h>
#include &lt;QtCore/qpair.h>

QT_MODULE(Network)

#ifndef QT_NO_HTTP

class QTcpSocket;
class QTimerEvent;
class QIODevice;

class QHttpPrivate;

class QHttpHeaderPrivate;
class Q_NETWORK_EXPORT QHttpHeader
{
public:
    QHttpHeader();
    QHttpHeader(const QHttpHeader &amp;header);
    QHttpHeader(const QString &amp;str);
    virtual ~QHttpHeader();

    QHttpHeader &amp;operator=(const QHttpHeader &amp;h);

    void setValue(const QString &amp;key, const QString &amp;value);
    void setValues(const QList&lt;QPair&lt;QString, QString> > &amp;values);
    void addValue(const QString &amp;key, const QString &amp;value);
    QList&lt;QPair&lt;QString, QString> > values() const;
    bool hasKey(const QString &amp;key) const;
    QStringList keys() const;
    QString value(const QString &amp;key) const;
    QStringList allValues(const QString &amp;key) const;
    void removeValue(const QString &amp;key);
    void removeAllValues(const QString &amp;key);

    bool hasContentLength() const;
    uint contentLength() const;
    void setContentLength(int len);

    bool hasContentType() const;
    QString contentType() const;
    void setContentType(const QString &amp;type);

    virtual QString toString() const;
    bool isValid() const;

    virtual int majorVersion() const = 0;
    virtual int minorVersion() const = 0;

protected:
    virtual bool parseLine(const QString &amp;line, int number);
    bool parse(const QString &amp;str);
    void setValid(bool);

    QHttpHeader(QHttpHeaderPrivate &amp;dd, const QString &amp;str = QString());
    QHttpHeader(QHttpHeaderPrivate &amp;dd, const QHttpHeader &amp;header);
    QHttpHeaderPrivate *d_ptr;

private:
    Q_DECLARE_PRIVATE(QHttpHeader)
};

class QHttpResponseHeaderPrivate;
class Q_NETWORK_EXPORT QHttpResponseHeader : public QHttpHeader
{
public:
    QHttpResponseHeader();
    QHttpResponseHeader(const QHttpResponseHeader &amp;header);
    QHttpResponseHeader(const QString &amp;str);
    QHttpResponseHeader(int code, const QString &amp;text = QString(), int majorVer = 1, int minorVer = 1);
    QHttpResponseHeader &amp;operator=(const QHttpResponseHeader &amp;header);

    void setStatusLine(int code, const QString &amp;text = QString(), int majorVer = 1, int minorVer = 1);

    int statusCode() const;
    QString reasonPhrase() const;

    int majorVersion() const;
    int minorVersion() const;

    QString toString() const;

protected:
    bool parseLine(const QString &amp;line, int number);

private:
    Q_DECLARE_PRIVATE(QHttpResponseHeader)
    friend class QHttpPrivate;
};

class QHttpRequestHeaderPrivate;
class Q_NETWORK_EXPORT QHttpRequestHeader : public QHttpHeader
{
public:
    QHttpRequestHeader();
    QHttpRequestHeader(const QString &amp;method, const QString &amp;path, int majorVer = 1, int minorVer = 1);
    QHttpRequestHeader(const QHttpRequestHeader &amp;header);
    QHttpRequestHeader(const QString &amp;str);
    QHttpRequestHeader &amp;operator=(const QHttpRequestHeader &amp;header);

    void setRequest(const QString &amp;method, const QString &amp;path, int majorVer = 1, int minorVer = 1);

    QString method() const;
    QString path() const;

    int majorVersion() const;
    int minorVersion() const;

    QString toString() const;

protected:
    bool parseLine(const QString &amp;line, int number);

private:
    Q_DECLARE_PRIVATE(QHttpRequestHeader)
};

class Q_NETWORK_EXPORT QHttp : public QObject
{
    Q_OBJECT

public:
    explicit QHttp(QObject *parent = 0);
    QHttp(const QString &amp;hostname, quint16 port = 80, QObject *parent = 0);
    virtual ~QHttp();

    enum State {
        Unconnected,
        HostLookup,
        Connecting,
        Sending,
        Reading,
        Connected,
        Closing
    };
    enum Error {
        NoError,
        UnknownError,
        HostNotFound,
        ConnectionRefused,
        UnexpectedClose,
        InvalidResponseHeader,
        WrongContentLength,
        Aborted
    };

    int setHost(const QString &amp;hostname, quint16 port = 80);
    int setSocket(QTcpSocket *socket);
    int setUser(const QString &amp;username, const QString &amp;password = QString());

    int setProxy(const QString &amp;host, int port,
                 const QString &amp;username = QString(),
                 const QString &amp;password = QString());

    int get(const QString &amp;path, QIODevice *to=0);
    int post(const QString &amp;path, QIODevice *data, QIODevice *to=0 );
    int post(const QString &amp;path, const QByteArray &amp;data, QIODevice *to=0);
    int head(const QString &amp;path);
    int request(const QHttpRequestHeader &amp;header, QIODevice *device=0, QIODevice *to=0);
    int request(const QHttpRequestHeader &amp;header, const QByteArray &amp;data, QIODevice *to=0);

    int closeConnection();
    int close();

    qint64 bytesAvailable() const;
    qint64 read(char *data, qint64 maxlen);
#ifdef QT3_SUPPORT
    inline QT3_SUPPORT qint64 readBlock(char *data, quint64 maxlen)
    { return read(data, qint64(maxlen)); }
#endif
    QByteArray readAll();

    int currentId() const;
    QIODevice *currentSourceDevice() const;
    QIODevice *currentDestinationDevice() const;
    QHttpRequestHeader currentRequest() const;
    QHttpResponseHeader lastResponse() const;
    bool hasPendingRequests() const;
    void clearPendingRequests();

    State state() const;

    Error error() const;
    QString errorString() const;

public Q_SLOTS:
    void abort();

Q_SIGNALS:
    void stateChanged(int);
    void responseHeaderReceived(const QHttpResponseHeader &amp;resp);
    void readyRead(const QHttpResponseHeader &amp;resp);
    void dataSendProgress(int, int);
    void dataReadProgress(int, int);

    void requestStarted(int);
    void requestFinished(int, bool);
    void done(bool);

private:
    Q_DISABLE_COPY(QHttp)
    Q_DECLARE_PRIVATE(QHttp)

    Q_PRIVATE_SLOT(d_func(), void startNextRequest())
    Q_PRIVATE_SLOT(d_func(), void slotReadyRead())
    Q_PRIVATE_SLOT(d_func(), void slotConnected())
    Q_PRIVATE_SLOT(d_func(), void slotError(QAbstractSocket::SocketError))
    Q_PRIVATE_SLOT(d_func(), void slotClosed())
    Q_PRIVATE_SLOT(d_func(), void slotBytesWritten(qint64 numBytes))
    Q_PRIVATE_SLOT(d_func(), void slotDoFinished())

    friend class QHttpNormalRequest;
    friend class QHttpSetHostRequest;
    friend class QHttpSetSocketRequest;
    friend class QHttpSetUserRequest;
    friend class QHttpSetProxyRequest;
    friend class QHttpCloseRequest;
    friend class QHttpPGHRequest;
};

#endif // QT_NO_HTTP

#endif // QHTTP_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtNetwork/qnetworkproxy.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QNETWORKPROXY_H
#define QNETWORKPROXY_H

#include &lt;QtNetwork/qhostaddress.h>

#ifndef QT_NO_NETWORKPROXY

QT_MODULE(Network)

class QNetworkProxyPrivate;

class Q_NETWORK_EXPORT QNetworkProxy
{
    Q_DECLARE_PRIVATE(QNetworkProxy)

public:
    enum ProxyType {
        DefaultProxy,
        Socks5Proxy,
        NoProxy
    };

    QNetworkProxy();
    QNetworkProxy(ProxyType type, const QString &amp;hostName = QString(), quint16 port = 0,
                  const QString &amp;user = QString(), const QString &amp;password = QString());
    QNetworkProxy(const QNetworkProxy &amp;other);
    QNetworkProxy &amp;operator=(const QNetworkProxy &amp;other);
    ~QNetworkProxy();

    void setType(QNetworkProxy::ProxyType type);
    QNetworkProxy::ProxyType type() const;

    void setUser(const QString &amp;userName);
    QString user() const;

    void setPassword(const QString &amp;password);
    QString password() const;

    void setHostName(const QString &amp;hostName);
    QString hostName() const;

    void setPort(quint16 port);
    quint16 port() const;

    static void setApplicationProxy(const QNetworkProxy &amp;proxy);
    static QNetworkProxy applicationProxy();

private:
    QNetworkProxyPrivate *d_ptr;
};
#endif // QT_NO_NETWORKPROXY
#endif // QHOSTINFO_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtNetwork/qtcpserver.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QTCPSERVER_H
#define QTCPSERVER_H

#include &lt;QtCore/qobject.h>
#include &lt;QtNetwork/qabstractsocket.h>
#include &lt;QtNetwork/qhostaddress.h>

QT_MODULE(Network)

class QTcpServerPrivate;
class QNetworkProxy;
class QTcpSocket;

class Q_NETWORK_EXPORT QTcpServer : public QObject
{
    Q_OBJECT
public:
    explicit QTcpServer(QObject *parent = 0);
    virtual ~QTcpServer();

    bool listen(const QHostAddress &amp;address = QHostAddress::Any, quint16 port = 0);
    void close();

    bool isListening() const;

    void setMaxPendingConnections(int numConnections);
    int maxPendingConnections() const;

    quint16 serverPort() const;
    QHostAddress serverAddress() const;

    int socketDescriptor() const;
    bool setSocketDescriptor(int socketDescriptor);

    bool waitForNewConnection(int msec = 0, bool *timedOut = 0);
    virtual bool hasPendingConnections() const;
    virtual QTcpSocket *nextPendingConnection();

    QAbstractSocket::SocketError serverError() const;
    QString errorString() const;

#ifndef QT_NO_NETWORKPROXY
    void setProxy(const QNetworkProxy &amp;networkProxy);
    QNetworkProxy proxy() const;
#endif

protected:
    virtual void incomingConnection(int handle);

Q_SIGNALS:
    void newConnection();

private:
    Q_PRIVATE_SLOT(d_func(), void processIncomingConnection())
    Q_DISABLE_COPY(QTcpServer)
    Q_DECLARE_PRIVATE(QTcpServer)
};

#endif // QTCPSERVER_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtNetwork/qtcpsocket.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QTCPSOCKET_H
#define QTCPSOCKET_H

#include &lt;QtNetwork/qabstractsocket.h>

QT_MODULE(Network)

class QTcpSocketPrivate;

class Q_NETWORK_EXPORT QTcpSocket : public QAbstractSocket
{
    Q_OBJECT
public:
    explicit QTcpSocket(QObject *parent = 0);
    virtual ~QTcpSocket();

private:
    Q_DISABLE_COPY(QTcpSocket)
    Q_DECLARE_PRIVATE(QTcpSocket)
};

#endif // QTCPSOCKET_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtNetwork/qudpsocket.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QUDPSOCKET_H
#define QUDPSOCKET_H

#include &lt;QtNetwork/qabstractsocket.h>
#include &lt;QtNetwork/qhostaddress.h>

QT_MODULE(Network)

#ifndef QT_NO_UDPSOCKET

class QUdpSocketPrivate;

class Q_NETWORK_EXPORT QUdpSocket : public QAbstractSocket
{
    Q_OBJECT
public:
    enum BindFlag {
        DefaultForPlatform = 0x0,
        ShareAddress = 0x1,
        DontShareAddress = 0x2,
        ReuseAddressHint = 0x4
    };
    Q_DECLARE_FLAGS(BindMode, BindFlag)

    explicit QUdpSocket(QObject *parent = 0);
    virtual ~QUdpSocket();

    bool bind(const QHostAddress &amp;address, quint16 port);
    bool bind(quint16 port = 0);
    bool bind(const QHostAddress &amp;address, quint16 port, BindMode mode);
    bool bind(quint16 port, BindMode mode);
    // ### Qt 5: Merge the bind functions

    bool hasPendingDatagrams() const;
    qint64 pendingDatagramSize() const;
    qint64 readDatagram(char *data, qint64 maxlen, QHostAddress *host = 0, quint16 *port = 0);
    qint64 writeDatagram(const char *data, qint64 len, const QHostAddress &amp;host, quint16 port);
    inline qint64 writeDatagram(const QByteArray &amp;datagram, const QHostAddress &amp;host, quint16 port)
        { return writeDatagram(datagram.constData(), datagram.size(), host, port); }

private:
    Q_DISABLE_COPY(QUdpSocket)
    Q_DECLARE_PRIVATE(QUdpSocket)
};

#endif // QT_NO_UDPSOCKET

#endif // QUDPSOCKET_H
</SCREEN>
</SECT2>
<SECT2>
<TITLE>QtNetwork/qurlinfo.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/****************************************************************************
**
** Copyright (C) 1992-2006 Trolltech AS. All rights reserved.
**
** This file is part of the LSB_Toolkit_Qt of the Qt Toolkit.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#ifndef QURLINFO_H
#define QURLINFO_H

#include &lt;QtCore/qdatetime.h>
#include &lt;QtCore/qstring.h>
#include &lt;QtCore/qiodevice.h>

QT_MODULE(Network)

#ifndef QT_NO_URLINFO

class QUrl;
class QUrlInfoPrivate;

class Q_NETWORK_EXPORT QUrlInfo
{
public:
    enum PermissionSpec {
        ReadOwner = 00400, WriteOwner = 00200, ExeOwner = 00100,
        ReadGroup = 00040, WriteGroup = 00020, ExeGroup = 00010,
        ReadOther = 00004, WriteOther = 00002, ExeOther = 00001 };

    QUrlInfo();
    QUrlInfo(const QUrlInfo &amp;ui);
    QUrlInfo(const QString &amp;name, int permissions, const QString &amp;owner,
             const QString &amp;group, qint64 size, const QDateTime &amp;lastModified,
             const QDateTime &amp;lastRead, bool isDir, bool isFile, bool isSymLink,
             bool isWritable, bool isReadable, bool isExecutable);
    QUrlInfo(const QUrl &amp;url, int permissions, const QString &amp;owner,
             const QString &amp;group, qint64 size, const QDateTime &amp;lastModified,
             const QDateTime &amp;lastRead, bool isDir, bool isFile, bool isSymLink,
             bool isWritable, bool isReadable, bool isExecutable);
    QUrlInfo &amp;operator=(const QUrlInfo &amp;ui);
    virtual ~QUrlInfo();

    virtual void setName(const QString &amp;name);
    virtual void setDir(bool b);
    virtual void setFile(bool b);
    virtual void setSymLink(bool b);
    virtual void setOwner(const QString &amp;s);
    virtual void setGroup(const QString &amp;s);
    virtual void setSize(qint64 size);
    virtual void setWritable(bool b);
    virtual void setReadable(bool b);
    virtual void setPermissions(int p);
    virtual void setLastModified(const QDateTime &amp;dt);

    bool isValid() const;

    QString name() const;
    int permissions() const;
    QString owner() const;
    QString group() const;
    qint64 size() const;
    QDateTime lastModified() const;
    QDateTime lastRead() const;
    bool isDir() const;
    bool isFile() const;
    bool isSymLink() const;
    bool isWritable() const;
    bool isReadable() const;
    bool isExecutable() const;

    static bool greaterThan(const QUrlInfo &amp;i1, const QUrlInfo &amp;i2,
                             int sortBy);
    static bool lessThan(const QUrlInfo &amp;i1, const QUrlInfo &amp;i2,
                          int sortBy);
    static bool equal(const QUrlInfo &amp;i1, const QUrlInfo &amp;i2,
                       int sortBy);

    bool operator==(const QUrlInfo &amp;i) const;

private:
    QUrlInfoPrivate *d;
};

#endif // QT_NO_URLINFO

#endif // QURLINFO_H
</SCREEN>
</SECT2>
</SECT1>
<!-- End of text generated from database -->
<!--    by $Header: /cvsroot/lsb/lsbspec/mklibspec,v 1.76 2005/12/02 01:32:08 nick Exp 0 -->
