This document contains:
+ Synopsis markup in SGML
  - examples for command markup
  - examples for function markup
+ Common LSB usages
  - notes on man page text development
  - tags to be phased into general use prior to LSB v2.0
  - corrections to tags now in general use
  - often-used spec phrases

This document:
+ is based on DocBook 4.2 markup principles and examples as illustrated
  in official DocBook documentation:
  - "DocBook - The Definitive Guide" by N.Walsh & L.Muellner (O'Reilly)
  - http://docbook.org/tdg/en/html/docbook.html
+ is the start of a formal style guide for LSB content contributors
+ will be used for updates to existing specification texts
+ may be used for development of new content
+ is a work-in-progress and will be updated as needed to reflect
  current text development goals



SYNOPSIS MARKUP IN SGML
=======================

SYNOPSIS EXAMPLE - fictional command as appears below with:
+ standard argument
+ argument with input (file ital.)
+ nested arguments
+ mutually exclusive arguments
+ required bracketed argument (ital.)
+ required unbracketed argument (ital.)
+ required unbracketed repeating argument (ital.)
------------------------------
abc [-d] [-e file] [month [year]] [-f | -g] {directory} group file...
------------------------------
<CMDSYNOPSIS>
 <COMMAND>abc</COMMAND>
 <ARG>-d</ARG>
 <ARG>-e <REPLACEABLE>file</REPLACEABLE></ARG>
 <ARG>month <ARG>year</ARG></ARG>
 <GROUP>
  <ARG>-f</ARG>
  <ARG>-g</ARG>
 </GROUP>
 <ARG CHOICE=REQ><REPLACEABLE>directory</REPLACEABLE></ARG>
 <ARG CHOICE=PLAIN><REPLACEABLE>group</REPLACEABLE></ARG>
 <ARG REP=REPEAT CHOICE=PLAIN><REPLACEABLE>file</REPLACEABLE></ARG>
</CMDSYNOPSIS>


SYNOPSIS EXAMPLE - function requiring:
+ preamble header
+ absolute number of arguments (variable names ital.)
------------------------------
#include <varargs.h>

int abc(int def, int ghi);
------------------------------
<FUNCSYNOPSIS>
<FUNCSYNOPSISINFO>
#include &lt;varargs.h&gt;
</FUNCSYNOPSISINFO>
<FUNCPROTOTYPE>
 <FUNCDEF>int 
  <FUNCTION>abc</FUNCTION></FUNCDEF>
 <PARAMDEF>int 
  <PARAMETER><REPLACEABLE>def</REPLACEABLE></PARAMETER></PARAMDEF>
 <PARAMDEF>int 
  <PARAMETER><REPLACEABLE>ghi</REPLACEABLE></PARAMETER></PARAMDEF>
</FUNCPROTOTYPE>
</FUNCSYNOPSIS>


SYNOPSIS EXAMPLE - function requiring:
+ variable number of arguments
------------------------------
int abc(...);
------------------------------
<FUNCSYNOPSIS>
<FUNCPROTOTYPE>
 <FUNCDEF>int 
  <FUNCTION>abc</FUNCTION></FUNCDEF>
 <VARARGS>
</FUNCPROTOTYPE>
</FUNCSYNOPSIS>


SYNOPSIS EXAMPLE - function requiring:
+ absolute number of arguments (variable names ital.)
+ followed by variable number of arguments (ellipses ital.)
------------------------------
int abc(char *abc, ...);
------------------------------
<FUNCSYNOPSIS>
<FUNCPROTOTYPE>
 <FUNCDEF>int 
  <FUNCTION>abc</FUNCTION></FUNCDEF>
 <PARAMDEF><PARAMETER>char *def</PARAMETER>
  <PARAMETER><REPLACEABLE>...</REPLACEABLE></PARAMETER></PARAMDEF>
</FUNCPROTOTYPE>
</FUNCSYNOPSIS>


SYNOPSIS EXAMPLE - function requiring:
+ zero arguments
------------------------------
int abc(void);
------------------------------
<FUNCSYNOPSIS>
<FUNCPROTOTYPE>
 <FUNCDEF>int 
  <FUNCTION>abc</FUNCTION></FUNCDEF>
 <VOID>
</FUNCPROTOTYPE>
</FUNCSYNOPSIS>



COMMON LSB USAGES
=================

NOTES ON MAN PAGE TEXT DEVELOPMENT:
+ External to the Synopsis, references to function names will appear
  sans "()".
+ Command or function elements identified in the synopsis (name,
  parameter) will not be type-labeled in subsequent text. Example: the
  phrase "the getopt function" will appear simply as "getopt".
+ On exception, type-labels will be used in these cases:
  - to avoid misidentification of similarly-named command or function
  elements.
  - to qualify names of functions/elements that are not specified in
  the Synopsis.
+ Where possible, Description text will begin with the name of the
  entity (command, function) described, followed by an action.
  Examples: "memmem finds the start ...", "newgrp changes the current
  group ..."
+ The use of pronouns ("It", "This") to begin the first sentences of 
  Description paragraphs will be avoided.


TAGS TO BE PHASED INTO GENERAL USE PRIOR TO LSB V2.0:
  <ACRONYM>
  <ACTION>
  <APPLICATION>
  <ERRORCODE>, <ERRORNAME> and <ERRORTYPE>
  <EXAMPLE>
  <FILENAME>
  <IMPORTANT>
  <INTERFACENAME>
  <OPTION>
  <QUOTE> and <BLOCKQUOTE>
  <RETURNVALUE>
  <STRUCTNAME> and <STRUCTFIELD>
  <SYMBOL>
  <VARNAME>


CORRECTIONS TO TAGS NOW IN GENERAL USE:
  <EMPHASIS>     will be replaced whenever a more appropriate tag is
                 required.
  <REPLACEABLE>  will be replaced whenever a more appropriate tag is
                 required; used only to indicate user-specified text.
  <LITERAL>      used only to indicate a literal data value, a generic
                 bit of data (the same data would be represented in
                 volume text by <COMPUTEROUTPUT> or <USERINPUT>).


OFTEN-USED SPEC PHRASES:

<PARA>
On success, the global variable <VARNAME>errno</VARNAME> is set to 
<RETURNVALUE>0</RETURNVALUE>. On error, <RETURNVALUE>-1</RETURNVALUE> 
is returned.
</PARA>

<PARA>
<COMMAND>split</COMMAND> is as specified in the <ACRONYM>SUS</ACRONYM>, 
but with differences as listed below.
</PARA>

