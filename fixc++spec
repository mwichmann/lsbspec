#!/usr/bin/perl

#use Getopt::Long;
#use Mysql;

#use Env qw(LSBUSER LSBDBPASSWD LSBDB LSBDBHOST);

sub usage()
{
print STDERR "fixc++spec\n";
die;
}

# Uncomment to trace SQL statments
#$trace=1;

#
# 1) process the arguments
#
#GetOptions("l=s" => \$libname,
#	   "a=s" => \$archname);

#if( !$libname ) { usage(); }
#if( !$archname ) { usage(); }

sub
dotable()
{
print "<!--table start-->\n";
#
# Skip down to the next TITLE
#
while(<>) {
	if(/<TITLE(\sID=".*")?>/i) {
		$title=$_;
		$id=$1;
		$title=~/<TITLE.*>(.+)<\/TITLE>/i;
		$title=$1;
		$title=~s/std:://g;
		# $title=~s/\</&lt;/g; -- now done in mklibspec
		print "<TITLE$id>$title</TITLE>\n";
		last;
		}
	if(/<\/SECT2>/) {
		#fail-safe for an empty section
		print $_;
		return;
		}
	print $_;
	}
#
# Process each Row in the table
#
while(<>) {
	if(/<\/TABLE.*>/) {
		#print STDERR $_;
		print $_;
		last;
		}
	if(/<TBODY>/) {
		print $_;
		#print STDERR $_;
		next;
		}
	if(/<\/TBODY>/) {
		#print STDERR $_;
		print $_;
		next;
		}
	if(/<TGROUP/) {
		print $_;
		#print STDERR $_;
		next;
		}
	if(/<\/TGROUP/) {
		print $_;
		#print STDERR $_;
		next;
		}
	if(/<ROW>/) {
		print $_;
		#print STDERR $_;
		next;
		}
	if(/<\/ROW>/) {
		print $_;
		#print STDERR $_;
		next;
		}
	#
	# Process each entry in the table
	#
	if(/<ENTRY>/) {
		print "<!--entry start-->\n";
		$origline=$_;
		$origline=~s/std:://g;
		$entry=$origline;
		#print STDERR "Entry1: $entry\n";
		$entry=~/(.+)<primary>(.+)<\/primary><\/indexterm>(.+)<FOOTNOTEREF(.+)/;
		$linestart=$1;
		$entry=$2;
		$entry2=$3;
		$lineend=$4;
		if( $entry eq "" ) {
			$entry=$origline;
			$entry=~/(.+)<primary>(.+)<\/primary><\/indexterm>(.+)<\/ENTRY>/;
			$linestart=$1;
			$entry=$2;
			$entry2=$3;
			$lineend="";
		}
		#print STDERR "Entry2: $entry\n";
		# $entry=~s/\</&lt;/g; -- now done in mklibspec
		# $entry=~s/\[/&lsqb;/g; -- not needed
		# $entry2=~s/\</&lt;/g; -- now done in mklibspec
		# $entry2=~s/\[/&lsqb;/g; -- not needed
		#print STDERR "Entry3: $entry\n";
		if( $entry ne "" ) {
			print "$linestart<primary>$entry";
			print "</primary></indexterm>$entry2";
			if( $lineend ne "" ) {
				print "<FOOTNOTEREF$lineend\n";
			} else {
				print "</ENTRY>\n";
				}
		} else {
			print "$origline";
			}
		print "<!--entry end-->\n";
		next;
		}
	print "<!--huh??-->".$_;
	}
print "<!--table end-->\n";
}

while(<>) {
	#
	# Top level loop that looks for the tables on which to work.
	#
	#s/std:://g;
	if(/<!--libgroup-->/) {
		print $_;
		$title=<>;
		$title=~s/std:://g;
		$group=$title;
		$group=~/<TITLE>(.+)<\/TITLE>/;
		#print STDERR "Title: $title\n";
		#print STDERR "Group: $1\n";
		$group=$1;
		$title=$1;
		# $title=~s/\</&lt;/g; -- now done in mklibspec
		print "<TITLE>$title</TITLE>\n";
		next;
	}
	if(/<SECT3>/) {
		print $_;
		$title=<>;
		$title=~s/std:://g;
		$group=$title;
		$group=~/<TITLE>(.+)<\/TITLE>/;
		#print STDERR "Title: $title\n";
		#print STDERR "Group: $1\n";
		$group=$1;
		$title=$1;
		# $title=~s/\</&lt;/g; -- now done in mklibspec
		print "<TITLE>$title</TITLE>\n";
		next;
	}
	if(/<!--classdata-->/) {
		print $_;
		dotable();
		next;
	}
	if(/<!--libgroupints-->/) {
		print $_;
		dotable();
		next;
	}
	if(/<!--libgroupdepints-->/) {
		print $_;
		dotable();
		next;
	}
	if(/<!--libgroupdata-->/) {
		print $_;
		dotable();
		next;
	}
	if(/<!--libgroupddata-->/) {
		print $_;
		dotable();
		next;
	}
	#s/\</&lt;/g;
	print $_;
}

