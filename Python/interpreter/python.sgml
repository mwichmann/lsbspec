<PART ID="python">
<TITLE>Python Interpreter</TITLE>

<CHAPTER ID="python-int">
<TITLE>Python Interpreter</TITLE>

<SECT1 ID="pythonintro">
<TITLE>Introduction</TITLE>
<PARA>
The Python intrepreter API is described in the
<xref linkend="std.PythonLib">,
with the following requirements for an LSB conforming runtime.
</PARA>
</SECT1>

<SECT1 ID="pylocation">
<TITLE>Python Interpreter Location</TITLE>
<PARA>
The Python interpreter binary, or a link to the binary, 
shall exist at <filename>/usr/bin/python</filename>.
</PARA>
</SECT1>

<SECT1 ID="pyversion">
<TITLE>Python Interpreter Version</TITLE>
<PARA>
The default installed Python version shall be 2.4.2 or greater.
Applications can depend on the 2.4 interfaces.
</PARA>
</SECT1>

<SECT1 ID="pyoper" XRefLabel="Operators and Functions">
<TITLE>Operators and Functions</TITLE>
<PARA>
Core Python operators, subroutines, and built-in functions
shall be present and shall operate as defined in 
<xref linkend="std.Python">.
</PARA>
</SECT1>

<SECT1 ID="pymodules" XRefLabel="Python Modules">
<TITLE>Python Modules</TITLE>
<!-- Start of generated text - do not edit! -->
<!-- generated from the LSB specification database by mkilmodtable -->
<PARA>
An LSB conforming implementation shall provide the
Python modules as described in <XREF LINKEND="tbl-Python-mods">
with at least the behavior described as mandatory
in the referenced underlying specification
</PARA>
<TABLE id="tbl-Python-mods">
<TITLE>Python Modules</TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW>
<ENTRY>array
<LINK LINKEND="std-mod-133"> [1]</LINK>
</ENTRY>
<ENTRY>csv
<LINK LINKEND="std-mod-133"> [1]</LINK>
</ENTRY>
<ENTRY>itertools
<LINK LINKEND="std-mod-133"> [1]</LINK>
</ENTRY>
<ENTRY>random
<LINK LINKEND="std-mod-133"> [1]</LINK>
</ENTRY>
<ENTRY>thread
<LINK LINKEND="std-mod-133"> [1]</LINK>
</ENTRY>
</ROW><ROW>
<ENTRY>audioop
<LINK LINKEND="std-mod-133"> [1]</LINK>
</ENTRY>
<ENTRY>datetime
<LINK LINKEND="std-mod-133"> [1]</LINK>
</ENTRY>
<ENTRY>locale
<LINK LINKEND="std-mod-133"> [1]</LINK>
</ENTRY>
<ENTRY>re
<LINK LINKEND="std-mod-133"> [1]</LINK>
</ENTRY>
<ENTRY>time
<LINK LINKEND="std-mod-133"> [1]</LINK>
</ENTRY>
</ROW><ROW>
<ENTRY>binascii
<LINK LINKEND="std-mod-133"> [1]</LINK>
</ENTRY>
<ENTRY>errno
<LINK LINKEND="std-mod-133"> [1]</LINK>
</ENTRY>
<ENTRY>marshal
<LINK LINKEND="std-mod-133"> [1]</LINK>
</ENTRY>
<ENTRY>resource
<LINK LINKEND="std-mod-133"> [1]</LINK>
</ENTRY>
<ENTRY>unicodedata
<LINK LINKEND="std-mod-133"> [1]</LINK>
</ENTRY>
</ROW><ROW>
<ENTRY>bisect
<LINK LINKEND="std-mod-133"> [1]</LINK>
</ENTRY>
<ENTRY>exceptions
<LINK LINKEND="std-mod-133"> [1]</LINK>
</ENTRY>
<ENTRY>mmap
<LINK LINKEND="std-mod-133"> [1]</LINK>
</ENTRY>
<ENTRY>select
<LINK LINKEND="std-mod-133"> [1]</LINK>
</ENTRY>
<ENTRY>weakref
<LINK LINKEND="std-mod-133"> [1]</LINK>
</ENTRY>
</ROW><ROW>
<ENTRY>cPickle
<LINK LINKEND="std-mod-133"> [1]</LINK>
</ENTRY>
<ENTRY>fcntl
<LINK LINKEND="std-mod-133"> [1]</LINK>
</ENTRY>
<ENTRY>operator
<LINK LINKEND="std-mod-133"> [1]</LINK>
</ENTRY>
<ENTRY>signal
<LINK LINKEND="std-mod-133"> [1]</LINK>
</ENTRY>
<ENTRY>zipimport
<LINK LINKEND="std-mod-133"> [1]</LINK>
</ENTRY>
</ROW><ROW>
<ENTRY>cStringIO
<LINK LINKEND="std-mod-133"> [1]</LINK>
</ENTRY>
<ENTRY>gc
<LINK LINKEND="std-mod-133"> [1]</LINK>
</ENTRY>
<ENTRY>os
<LINK LINKEND="std-mod-133"> [1]</LINK>
</ENTRY>
<ENTRY>socket
<LINK LINKEND="std-mod-133"> [1]</LINK>
</ENTRY>
<ENTRY>zlib
<LINK LINKEND="std-mod-133"> [1]</LINK>
</ENTRY>
</ROW><ROW>
<ENTRY>cmath
<LINK LINKEND="std-mod-133"> [1]</LINK>
</ENTRY>
<ENTRY>grp
<LINK LINKEND="std-mod-133"> [1]</LINK>
</ENTRY>
<ENTRY>ossaudiodev
<LINK LINKEND="std-mod-133"> [1]</LINK>
</ENTRY>
<ENTRY>string
<LINK LINKEND="std-mod-133"> [1]</LINK>
</ENTRY>
<ENTRY>
</ENTRY>
</ROW><ROW>
<ENTRY>codecs
<LINK LINKEND="std-mod-133"> [1]</LINK>
</ENTRY>
<ENTRY>heapq
<LINK LINKEND="std-mod-133"> [1]</LINK>
</ENTRY>
<ENTRY>parser
<LINK LINKEND="std-mod-133"> [1]</LINK>
</ENTRY>
<ENTRY>sys
<LINK LINKEND="std-mod-133"> [1]</LINK>
</ENTRY>
<ENTRY>
</ENTRY>
</ROW><ROW>
<ENTRY>collections
<LINK LINKEND="std-mod-133"> [1]</LINK>
</ENTRY>
<ENTRY>hotshot
<LINK LINKEND="std-mod-133"> [1]</LINK>
</ENTRY>
<ENTRY>posix
<LINK LINKEND="std-mod-133"> [1]</LINK>
</ENTRY>
<ENTRY>syslog
<LINK LINKEND="std-mod-133"> [1]</LINK>
</ENTRY>
<ENTRY>
</ENTRY>
</ROW><ROW>
<ENTRY>crypt
<LINK LINKEND="std-mod-133"> [1]</LINK>
</ENTRY>
<ENTRY>imp
<LINK LINKEND="std-mod-133"> [1]</LINK>
</ENTRY>
<ENTRY>pwd
<LINK LINKEND="std-mod-133"> [1]</LINK>
</ENTRY>
<ENTRY>termios
<LINK LINKEND="std-mod-133"> [1]</LINK>
</ENTRY>
<ENTRY>
</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA><EMPHASIS>Referenced Specification(s)</EMPHASIS></PARA>
<FORMALPARA><TITLE id="std-mod-133">[1]</TITLE><para><XREF LINKEND=std.Python></para></FORMALPARA>
<!-- End of text generated from database -->

</SECT1>

<SECT1 ID=pycommand XRefLabel="Python Command">
<TITLE>Python Interpreter Command</TITLE>
<PARA>
This section contains a description of the 
<command>python</command> command.
</PARA>

<!-- lifted from troff+man by doclifter -->
<refentry id='pythonman'>
<refmeta>
<refentrytitle>PYTHON</refentrytitle>
<manvolnum>1</manvolnum>
<refmiscinfo class='source'>$Date: 2005-03-21 01:18:04 +1100 (Mon, 21 Mar 2005) $</refmiscinfo>
</refmeta>
<refnamediv id='pyname'>
<refname>python</refname>
<refpurpose>an interpreted, interactive, object-oriented programming language</refpurpose>
</refnamediv>
<!-- body begins here -->
<refsynopsisdiv id='pysynopsis'>
<cmdsynopsis>
  <command>python</command>    
    <arg choice='opt'>-d </arg>
    <arg choice='opt'>-E </arg>
    <arg choice='opt'>-h </arg>
    <arg choice='opt'>-i </arg>
    <arg choice='opt'><arg choice='plain'>-m </arg><arg choice='plain'><replaceable>module-name</replaceable></arg></arg>
    <arg choice='opt'>-O </arg>
    <sbr>
    <arg choice='opt'><arg choice='plain'>-Q </arg><arg choice='plain'><replaceable>argument</replaceable></arg></arg>
    <arg choice='opt'>-S </arg>
    <arg choice='opt'>-t </arg>
    <arg choice='opt'>-u </arg>
    <sbr>
    <arg choice='opt'>-v </arg>
    <arg choice='opt'>-V </arg>
    <arg choice='opt'><arg choice='plain'>-W </arg><arg choice='plain'><replaceable>argument</replaceable></arg></arg>
    <arg choice='opt'>-x </arg>
    <sbr>
    <arg choice='opt'><arg choice='plain'>-c </arg><group choice='plain'><arg choice='plain'><replaceable>command</replaceable></arg><arg choice='plain'><replaceable>script</replaceable></arg><arg choice='plain'>- </arg></group></arg>
    <arg choice='opt'><replaceable>arguments</replaceable></arg>
</cmdsynopsis>
</refsynopsisdiv>


<refsect1 id='pydescription'><title>DESCRIPTION</title>
<para>Python is an interpreted, interactive, object-oriented programming
language that combines remarkable power with very clear syntax.
For an introduction to programming in Python you are referred to the
Python Tutorial.
The Python Library Reference documents built-in and standard types,
constants, functions and modules.
Finally, the Python Reference Manual describes the syntax and
semantics of the core language in (perhaps too) much detail.
(These documents may be located via the
<link linkend="pyinternet-resources">INTERNET RESOURCES</link>
below; they may be installed on your system as well.)</para>

<para>Python's basic power can be extended with your own modules written in
C or C++.
On most systems such modules may be dynamically loaded.
Python is also adaptable as an extension language for existing
applications.
See the internal documentation for hints.</para>

<para>Documentation for installed Python modules and packages can be 
viewed by running the 
<emphasis remap='B'>pydoc</emphasis>
program.</para>  
</refsect1>

<refsect1 id='pycommand-line-options'><title>COMMAND LINE OPTIONS</title>
<variablelist remap='TP'>
  <varlistentry>
  <term><option>-c </option><emphasis remap='I'>command</emphasis></term>
  <listitem>
<para>Specify the command to execute (see next section).
This terminates the option list (following options are passed as
arguments to the command).</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><option>-d</option></term>
  <listitem>
<para>Turn on parser debugging output (for wizards only, depending on
compilation options).</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><option>-E</option></term>
  <listitem>
<para>Ignore environment variables like PYTHONPATH and PYTHONHOME that modify
the behavior of the interpreter.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><option>-h</option></term>
  <listitem>
<para>Prints the usage for the interpreter executable and exits.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><option>-i</option></term>
  <listitem>
<para>When a script is passed as first argument or the <option>-c</option> option is
used, enter interactive mode after executing the script or the
command.  It does not read the $PYTHONSTARTUP file.  This can be
useful to inspect global variables or a stack trace when a script
raises an exception.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><option>-m </option><emphasis remap='I'>module-name</emphasis></term>
  <listitem>
<para>Searches 
<emphasis remap='I'>sys.path</emphasis>
for the named module and runs the corresponding 
<markup>.py</markup>
file as a script.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><option>-O</option></term>
  <listitem>
<para>Turn on basic optimizations.  This changes the filename extension for
compiled (bytecode) files from
<markup>.pyc</markup>
to <markup>.pyo</markup>.  Given twice, causes docstrings to be discarded.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><option>-Q </option><emphasis remap='I'>argument</emphasis></term>
  <listitem>
<para>Division control; see PEP 238.  The argument must be one of "old" (the
default, int/int and long/long return an int or long), "new" (new
division semantics, i.e. int/int and long/long returns a float),
"warn" (old division semantics with a warning for int/int and
long/long), or "warnall" (old division semantics with a warning for
all use of the division operator).  For a use of "warnall", see the
Tools/scripts/fixdiv.py script.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><option>-S</option></term>
  <listitem>
<para>Disable the import of the module
<emphasis remap='I'>site</emphasis>
and the site-dependent manipulations of
<emphasis remap='I'>sys.path</emphasis>
that it entails.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><option>-t</option></term>
  <listitem>
<para>Issue a warning when a source file mixes tabs and spaces for
indentation in a way that makes it depend on the worth of a tab
expressed in spaces.  Issue an error when the option is given twice.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><option>-u</option></term>
  <listitem>
<para>Force stdin, stdout and stderr to be totally unbuffered.  On systems
where it matters, also put stdin, stdout and stderr in binary mode.
Note that there is internal buffering in xreadlines(), readlines() and
file-object iterators ("for line in sys.stdin") which is not
influenced by this option.  To work around this, you will want to use
"sys.stdin.readline()" inside a "while 1:" loop.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><option>-v</option></term>
  <listitem>
<para>Print a message each time a module is initialized, showing the place
(filename or built-in module) from which it is loaded.  When given
twice, print a message for each file that is checked for when 
searching for a module.  Also provides information on module cleanup
at exit.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><option>-V</option></term>
  <listitem>
<para>Prints the Python version number of the executable and exits.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><option>-W </option><emphasis remap='I'>argument</emphasis></term>
  <listitem>
<para>Warning control.  Python sometimes prints warning message to
<emphasis remap='I'>sys.stderr</emphasis>.
A typical warning message has the following form:
<emphasis remap='I'>file</emphasis><emphasis remap='B'>:</emphasis><emphasis remap='I'>line</emphasis><emphasis remap='B'>: </emphasis><emphasis remap='I'>category</emphasis><emphasis remap='B'>: </emphasis><emphasis remap='I'>message.</emphasis>
By default, each warning is printed once for each source line where it
occurs.  This option controls how often warnings are printed.
Multiple
<option>-W</option>
options may be given; when a warning matches more than one
option, the action for the last matching option is performed.
Invalid
<option>-W</option>
options are ignored (a warning message is printed about invalid
options when the first warning is issued).  Warnings can also be
controlled from within a Python program using the
<emphasis remap='I'>warnings</emphasis>
module.</para>

<para>The simplest form of
<emphasis remap='I'>argument</emphasis>
is one of the following
<emphasis remap='I'>action</emphasis>
strings (or a unique abbreviation):
<emphasis remap='B'>ignore</emphasis>
to ignore all warnings;
<emphasis remap='B'>default</emphasis>
to explicitly request the default behavior (printing each warning once
per source line);
<emphasis remap='B'>all</emphasis>
to print a warning each time it occurs (this may generate many
messages if a warning is triggered repeatedly for the same source
line, such as inside a loop);
<emphasis remap='B'>module</emphasis>
to print each warning only only the first time it occurs in each
module;
<emphasis remap='B'>once</emphasis>
to print each warning only the first time it occurs in the program; or
<emphasis remap='B'>error</emphasis>
to raise an exception instead of printing a warning message.</para>

<para>The full form of
<emphasis remap='I'>argument</emphasis>
is
<emphasis remap='I'>action</emphasis><emphasis remap='B'>:</emphasis><emphasis remap='I'>message</emphasis><emphasis remap='B'>:</emphasis><emphasis remap='I'>category</emphasis><emphasis remap='B'>:</emphasis><emphasis remap='I'>module</emphasis><emphasis remap='B'>:</emphasis><emphasis remap='I'>line.</emphasis>
Here,
<emphasis remap='I'>action</emphasis>
is as explained above but only applies to messages that match the
remaining fields.  Empty fields match all values; trailing empty
fields may be omitted.  The
<emphasis remap='I'>message</emphasis>
field matches the start of the warning message printed; this match is
case-insensitive.  The
<emphasis remap='I'>category</emphasis>
field matches the warning category.  This must be a class name; the
match test whether the actual warning category of the message is a
subclass of the specified warning category.  The full class name must
be given.  The
<emphasis remap='I'>module</emphasis>
field matches the (fully-qualified) module name; this match is
case-sensitive.  The
<emphasis remap='I'>line</emphasis>
field matches the line number, where zero matches all line numbers and
is thus equivalent to an omitted line number.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><option>-x</option></term>
  <listitem>
<para>Skip the first line of the source.  This is intended for a DOS
specific hack only.  Warning: the line numbers in error messages will
be off by one!</para>
  </listitem>
  </varlistentry>
</variablelist>
</refsect1>

<refsect1 id='pyinterpreter-interface'><title>INTERPRETER INTERFACE</title>
<para>The interpreter interface resembles that of the UNIX shell: when
called with standard input connected to a tty device, it prompts for
commands and executes them until an EOF is read; when called with a
file name argument or with a file as standard input, it reads and
executes a
<emphasis remap='I'>script</emphasis>
from that file;
when called with
<option>-c</option>
<replaceable>command,</replaceable>
it executes the Python statement(s) given as
<emphasis remap='I'>command.</emphasis>
Here
<emphasis remap='I'>command</emphasis>
may contain multiple statements separated by newlines.
Leading whitespace is significant in Python statements!
In non-interactive mode, the entire input is parsed before it is
executed.</para>

<para>If available, the script name and additional arguments thereafter are
passed to the script in the Python variable
<emphasis remap='I'>sys.argv ,</emphasis>
which is a list of strings (you must first
<emphasis remap='I'>import sys</emphasis>
to be able to access it).
If no script name is given,
<emphasis remap='I'>sys.argv[0]</emphasis>
is an empty string; if
<option>-c</option>
is used,
<emphasis remap='I'>sys.argv[0]</emphasis>
contains the string
<emphasis remap='I'>'-c'.</emphasis>
Note that options interpreted by the Python interpreter itself
are not placed in
<emphasis remap='I'>sys.argv.</emphasis></para>

<para>In interactive mode, the primary prompt is &gt;&gt;&gt;; the second prompt
(which appears when a command is not complete) is ....
The prompts can be changed by assignment to
<emphasis remap='I'>sys.ps1</emphasis>
or
<emphasis remap='I'>sys.ps2.</emphasis>
The interpreter quits when it reads an EOF at a prompt.
When an unhandled exception occurs, a stack trace is printed and
control returns to the primary prompt; in non-interactive mode, the
interpreter exits after printing the stack trace.
The interrupt signal raises the
<emphasis remap='I'>Keyboard&shy;Interrupt</emphasis>
exception; other UNIX signals are not caught (except that SIGPIPE is
sometimes ignored, in favor of the
<emphasis remap='I'>IOError</emphasis>
exception).  Error messages are written to stderr.</para>
</refsect1>

<refsect1 id='pyfiles-and-directories'><title>FILES AND DIRECTORIES</title>
<para>These are subject to difference depending on local installation
conventions; ${prefix} and ${exec_prefix} are installation-dependent
and should be interpreted as for GNU software; they may be the same.
The default for both is <filename>/usr/local</filename>.</para>
<variablelist remap='IP'>
  <varlistentry>
  <term><emphasis remap='I'>${exec_prefix}/bin/python</emphasis></term>
  <listitem>
<para>Recommended location of the interpreter.</para>
  </listitem>
  </varlistentry>
</variablelist>

<para><emphasis remap='I'>${prefix}/lib/python&lt;version&gt;</emphasis>
<!-- .br -->
<emphasis remap='I'>${exec_prefix}/lib/python&lt;version&gt;</emphasis></para>
  <blockquote remap='RS'>
<para>Recommended locations of the directories containing the standard
modules.
  </para></blockquote> <!-- remap='RE' -->

<para><emphasis remap='I'>${prefix}/include/python&lt;version&gt;</emphasis>
<!-- .br -->
<emphasis remap='I'>${exec_prefix}/include/python&lt;version&gt;</emphasis></para>
  <blockquote remap='RS'>
<para>Recommended locations of the directories containing the include files
needed for developing Python extensions and embedding the
interpreter.
  </para></blockquote> <!-- remap='RE' -->
<variablelist remap='IP'>
  <varlistentry>
  <term><filename>~/.pythonrc.py</filename></term>
  <listitem>
<para>User-specific initialization file loaded by the <emphasis remap='I'>user</emphasis> module;
not used by default or by most applications.</para>
  </listitem>
  </varlistentry>
</variablelist>
</refsect1>

<refsect1 id='pyenvironment-variables'><title>ENVIRONMENT VARIABLES</title>
<variablelist remap='IP'>
  <varlistentry>
  <term>PYTHONHOME</term>
  <listitem>
<para>Change the location of the standard Python libraries.  By default, the
libraries are searched in ${prefix}/lib/python&lt;version&gt; and
${exec_prefix}/lib/python&lt;version&gt;, where ${prefix} and ${exec_prefix}
are installation-dependent directories, both defaulting to
<filename>/usr/local</filename>.  When $PYTHONHOME is set to a single directory, its value
replaces both ${prefix} and ${exec_prefix}.  To specify different values
for these, set $PYTHONHOME to ${prefix}:${exec_prefix}.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term>PYTHONPATH</term>
  <listitem>
<para>Augments the default search path for module files.
The format is the same as the shell's $PATH: one or more directory
pathnames separated by colons.
Non-existent directories are silently ignored.
The default search path is installation dependent, but generally
begins with ${prefix}/lib/python&lt;version&gt; (see PYTHONHOME above).
The default search path is always appended to $PYTHONPATH.
If a script argument is given, the directory containing the script is
inserted in the path in front of $PYTHONPATH.
The search path can be manipulated from within a Python program as the
variable
<emphasis remap='I'>sys.path .</emphasis></para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term>PYTHONSTARTUP</term>
  <listitem>
<para>If this is the name of a readable file, the Python commands in that
file are executed before the first prompt is displayed in interactive
mode.
The file is executed in the same name space where interactive commands
are executed so that objects defined or imported in it can be used
without qualification in the interactive session.
You can also change the prompts
<emphasis remap='I'>sys.ps1</emphasis>
and
<emphasis remap='I'>sys.ps2</emphasis>
in this file.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term>PYTHONY2K</term>
  <listitem>
<para>Set this to a non-empty string to cause the <emphasis remap='I'>time</emphasis> module to
require dates specified as strings to include 4-digit years, otherwise
2-digit years are converted based on rules described in the <emphasis remap='I'>time</emphasis>
module documentation.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term>PYTHONOPTIMIZE</term>
  <listitem>
<para>If this is set to a non-empty string it is equivalent to specifying
the <option>-O</option> option. If set to an integer, it is equivalent to
specifying <option>-O</option> multiple times.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term>PYTHONDEBUG</term>
  <listitem>
<para>If this is set to a non-empty string it is equivalent to specifying
the <option>-d</option> option. If set to an integer, it is equivalent to
specifying <option>-d</option> multiple times.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term>PYTHONINSPECT</term>
  <listitem>
<para>If this is set to a non-empty string it is equivalent to specifying
the <option>-i</option> option.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term>PYTHONUNBUFFERED</term>
  <listitem>
<para>If this is set to a non-empty string it is equivalent to specifying
the <option>-u</option> option.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term>PYTHONVERBOSE</term>
  <listitem>
<para>If this is set to a non-empty string it is equivalent to specifying
the <option>-v</option> option. If set to an integer, it is equivalent to
specifying <option>-v</option> multiple times.</para> 
  </listitem>
  </varlistentry>
</variablelist>
</refsect1>

<refsect1 id='pyauthor'><title>AUTHOR</title>
<para>The Python Software Foundation: <ulink url='http://www.python.org/psf'>http://www.python.org/psf</ulink></para>
</refsect1>

<refsect1 id='pyinternet-resources'><title>INTERNET RESOURCES</title>
<para>Main website:  <ulink url='http://www.python.org/'>http://www.python.org/</ulink>
<!-- .br -->
Documentation:  <ulink url='http://docs.python.org/'>http://docs.python.org/</ulink>
<!-- .br -->
Community website:  <ulink url='http://starship.python.net/'>http://starship.python.net/</ulink>
<!-- .br -->
Developer resources:  <ulink url='http://www.python.org/dev/'>http://www.python.org/dev/</ulink>
<!-- .br -->
FTP:  <ulink url='ftp://ftp.python.org/pub/python/'>ftp://ftp.python.org/pub/python/</ulink>
<!-- .br -->
Module repository:  <ulink url='http://www.vex.net/parnassus/'>http://www.vex.net/parnassus/</ulink>
<!-- .br -->
Newsgroups:  comp.lang.python, comp.lang.python.announce</para>
</refsect1>

<refsect1 id='pylicensing'><title>LICENSING</title>
<para>Python is distributed under an Open Source license.  See the file
"LICENSE" in the Python source distribution for information on terms &amp;
conditions for accessing and otherwise using Python and for a
DISCLAIMER OF ALL WARRANTIES.</para>
</refsect1>
</refentry>

</SECT1>

</CHAPTER>
</PART>
