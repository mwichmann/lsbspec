<PART ID="tocobjformat">
<TITLE>Object Format</TITLE>

<PARTINTRO>
<PARA>
Some additional Sections, beyond what was defined for LSB 1.3, are present on some architectures.
For C++ applications, the frame unwinding data uses some opcodes beyond those defined in the DWARF
<FOOTNOTE ID="std.DWARF2"
XREFLABEL="DWARF Debugging Information Format, Revision 2.0.0 (July 27, 1993)">
<PARA>
DWARF Debugging Information Format, Revision 2.0.0 (July 27, 1993)
</PARA>
</FOOTNOTE>
Specification.
</PARA>
</PARTINTRO>

<CHAPTER ID=SpecialSections>
<TITLE>Special Sections</TITLE>
<SECT1 ID="elfspecial">
<TITLE>Special Sections</TITLE>
<PARA>
</PARA>
<SECT2>
<TITLE>IA64 Additional Special Sections</TITLE>
<PARA>
The IA64 architecture also specifies the .opd section.
</PARA>
<!-- Start of text generated from database -->
<!-- generated from the LSB specification database -->
<!--    by $Header: /cvsroot/lsb/lsbspec/mksectiontable,v 1.10 2002/06/20 20:35:42 anderson Exp 0 -->
<!--    at Fri Nov  5 12:57:59 2004 -->
<TABLE>
<TITLE>IA64 Additional Special Sections</TITLE>
<TGROUP COLS=3>
<THEAD>
<ROW>
<ENTRY ALIGN=center>Name</ENTRY><ENTRY ALIGN=center>Type</ENTRY><ENTRY ALIGN=center>Attributes</ENTRY></ROW>
</THEAD>
<TBODY>
<ROW><ENTRY>.opd</ENTRY><ENTRY>SHT_PROGBITS</ENTRY><ENTRY>SHF_ALLOC</ENTRY></ROW>
<ROW><ENTRY>.rela.dyn</ENTRY><ENTRY>SHT_RELA</ENTRY><ENTRY>SHF_ALLOC</ENTRY></ROW>
<ROW><ENTRY>.rela.IA_64.pltoff</ENTRY><ENTRY>SHT_RELA</ENTRY><ENTRY>SHF_ALLOC</ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
<VARIABLELIST>
<VARLISTENTRY><TERM>.opd</TERM><LISTITEM><PARA>This section holds function descriptors</PARA></LISTITEM></VARLISTENTRY>
<VARLISTENTRY><TERM>.rela.dyn</TERM><LISTITEM><PARA>This section holds relocation information, as described in `Relocation'. These relocations are applied to the .dyn section.</PARA></LISTITEM></VARLISTENTRY>
<VARLISTENTRY><TERM>.rela.IA_64.pltoff</TERM><LISTITEM><PARA>This section holds relocation information, as described in `Relocation'. These relocations are applied to the .IA_64.pltoff section.</PARA></LISTITEM></VARLISTENTRY>
</VARIABLELIST>
<!-- End of text generated from database -->
<!--    by $Header: /cvsroot/lsb/lsbspec/mksectiontable,v 1.10 2002/06/20 20:35:42 anderson Exp 0 -->

</SECT2>
<SECT2>
<TITLE>PPC32 Additional Special Sections</TITLE>
<PARA>
The PPC32 architecture also specifies the .sbss and .sdata2 sections.
</PARA>
<!-- Start of text generated from database -->
<!-- generated from the LSB specification database -->
<!--    by $Header: /cvsroot/lsb/lsbspec/mksectiontable,v 1.10 2002/06/20 20:35:42 anderson Exp 0 -->
<!--    at Fri Nov  5 12:57:59 2004 -->
<TABLE>
<TITLE>PPC32 Additional Special Sections</TITLE>
<TGROUP COLS=3>
<THEAD>
<ROW>
<ENTRY ALIGN=center>Name</ENTRY><ENTRY ALIGN=center>Type</ENTRY><ENTRY ALIGN=center>Attributes</ENTRY></ROW>
</THEAD>
<TBODY>
<ROW><ENTRY>.got2</ENTRY><ENTRY>SHT_PROGBITS</ENTRY><ENTRY>SHF_ALLOC+SHF_WRITE</ENTRY></ROW>
<ROW><ENTRY>.rela.bss</ENTRY><ENTRY>SHT_RELA</ENTRY><ENTRY>SHF_ALLOC</ENTRY></ROW>
<ROW><ENTRY>.rela.dyn</ENTRY><ENTRY>SHT_RELA</ENTRY><ENTRY>SHF_ALLOC</ENTRY></ROW>
<ROW><ENTRY>.rela.got</ENTRY><ENTRY>SHT_RELA</ENTRY><ENTRY>SHF_ALLOC</ENTRY></ROW>
<ROW><ENTRY>.rela.got2</ENTRY><ENTRY>SHT_RELA</ENTRY><ENTRY>SHF_ALLOC</ENTRY></ROW>
<ROW><ENTRY>.rela.plt</ENTRY><ENTRY>SHT_RELA</ENTRY><ENTRY>SHF_ALLOC</ENTRY></ROW>
<ROW><ENTRY>.rela.sbss</ENTRY><ENTRY>SHT_RELA</ENTRY><ENTRY>SHF_ALLOC</ENTRY></ROW>
<ROW><ENTRY>.sbss</ENTRY><ENTRY>SHT_NOBITS</ENTRY><ENTRY>SHF_ALLOC+SHF_WRITE</ENTRY></ROW>
<ROW><ENTRY>.sdata2</ENTRY><ENTRY>SHT_PROGBITS</ENTRY><ENTRY>SHF_ALLOC</ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
<VARIABLELIST>
<VARLISTENTRY><TERM>.got2</TERM><LISTITEM><PARA>This section holds the second level GOT</PARA></LISTITEM></VARLISTENTRY>
<VARLISTENTRY><TERM>.rela.bss</TERM><LISTITEM><PARA>This section holds RELA type relocation information for the BSS section of a shared library or dynamically linked application</PARA></LISTITEM></VARLISTENTRY>
<VARLISTENTRY><TERM>.rela.dyn</TERM><LISTITEM><PARA>This section holds RELA type relocation information for all sections of a shared library except the PLT</PARA></LISTITEM></VARLISTENTRY>
<VARLISTENTRY><TERM>.rela.got</TERM><LISTITEM><PARA>This section holds RELA type relocation information for the GOT section of a shared library or dynamically linked application</PARA></LISTITEM></VARLISTENTRY>
<VARLISTENTRY><TERM>.rela.got2</TERM><LISTITEM><PARA>This section holds RELA type relocation information for the second level GOT section of a shared library or dynamically linked application</PARA></LISTITEM></VARLISTENTRY>
<VARLISTENTRY><TERM>.rela.plt</TERM><LISTITEM><PARA>This section holds RELA type relocation information for the PLT section of a shared library or dynamically linked application</PARA></LISTITEM></VARLISTENTRY>
<VARLISTENTRY><TERM>.rela.sbss</TERM><LISTITEM><PARA>This section holds RELA type relocation information for the SBSS section of a shared library or dynamically linked application</PARA></LISTITEM></VARLISTENTRY>
<VARLISTENTRY><TERM>.sbss</TERM><LISTITEM><PARA>This section holds uninitialized data that contribute to the program's memory image. The system initializes the data with zeroes when the program begins to run.</PARA></LISTITEM></VARLISTENTRY>
<VARLISTENTRY><TERM>.sdata2</TERM><LISTITEM><PARA>This section holds the second level of initialised small data</PARA></LISTITEM></VARLISTENTRY>
</VARIABLELIST>
<!-- End of text generated from database -->
<!--    by $Header: /cvsroot/lsb/lsbspec/mksectiontable,v 1.10 2002/06/20 20:35:42 anderson Exp 0 -->

</SECT2>
</SECT1>
</CHAPTER>

<CHAPTER ID="dwarfext">
<TITLE>DWARF Extensions</TITLE>
<PARA>
In addition to the Call Frame Instructions defined in section 6.4.2 of <XREF LINKEND="std.DWARF2">,
the following Call Frame Instructions may also be used.
</PARA>

<TABLE>
<TITLE>Additional DWARF Call Frame Instructions</TITLE>
<TGROUP COLS=3>
<THEAD>
<ROW>
<ENTRY>Name</ENTRY>
<ENTRY>Value</ENTRY>
<ENTRY>Meaning</ENTRY>
</ROW>
</THEAD>
<TBODY>
<ROW>
<ENTRY>DW_CFA_expression</ENTRY>
<ENTRY>0x10</ENTRY>
<ENTRY>The DW_CFA_expression instruction takes two operands: an unsigned LEB128 value representing a
register number, and a DW_FORM_block value representing a DWARF expression. The required action is to
establish the DWARF expression as the means by which the address in which the given register contents
are found may be computed. The value of the CFA is pushed on the DWARF evaluation stack prior to
execution of the DWARF expression. The DW_OP_call2, DW_OP_call4, DW_OP_call_ref and
DW_OP_push_object_address DWARF operators (see Section 2.4.1 of <XREF LINKEND="std.DWARF2">) cannot be
used in such a DWARF expression.</ENTRY>
</ROW>
<ROW>
<ENTRY>DW_CFA_offset_extended_sf</ENTRY>
<ENTRY>0x11</ENTRY>
<ENTRY>
The DW_CFA_offset_extended_sf instruction takes two operands: an unsigned LEB128 value representing a
register number and a signed LEB128 factored offset. This instruction is identical to
DW_CFA_offset_extended except that the second operand is signed.
</ENTRY>
</ROW>
<ROW>
<ENTRY>DW_CFA_def_cfa_sf</ENTRY>
<ENTRY>0x12</ENTRY>
<ENTRY>
The DW_CFA_def_cfa_sf instruction takes two operands: an unsigned LEB128 value representing a register
number and a signed LEB128 factored offset. This instruction is identical to DW_CFA_def_cfa except that
the second operand is signed and factored.
</ENTRY>
</ROW>
<ROW>
<ENTRY>DW_CFA_def_cfa_offset_sf</ENTRY>
<ENTRY>0x13</ENTRY>
<ENTRY>
The DW_CFA_def_cfa_offset_sf instruction takes a signed LEB128 operand representing a factored offset.
This instruction is identical to DW_CFA_def_cfa_offset except that the operand is signed and factored.
</ENTRY>
</ROW>
<ROW>
<ENTRY>DW_CFA_GNU_args_size</ENTRY>
<ENTRY>0x2e</ENTRY>
<ENTRY>
The DW_CFA_def_cfa_offset_sf instruction takes an unsigned LEB128 operand representing an argument size.
</ENTRY>
</ROW>
<ROW>
<ENTRY>DW_CFA_GNU_negative_offset_extended</ENTRY>
<ENTRY>0x2f</ENTRY>
<ENTRY>
The DW_CFA_def_cfa_sf instruction takes two operands: an unsigned LEB128 value representing a register
number and an unsigned LEB128 which represents the magnitude of the offset. This instruction is identical
to DW_CFA_offset_extended_sf except that the operand is subtracted to produce the offset. This
instructions is obsoleted by DW_CFA_offset_extended_sf.
</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>

</CHAPTER>


</PART>
