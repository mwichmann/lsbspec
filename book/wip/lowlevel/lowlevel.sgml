<PART ID="lowlevel">
<TITLE>Low Level System Information</TITLE>

<CHAPTER id=machineinterface>
<TITLE>Machine Interface</TITLE>

<SECT1 ID="datarepresentation">
<TITLE>Data Representation</TITLE>
<PARA>
LSB-conforming applications shall use the data representation as defined in 
Chapter 3 of the System V Application Binary Interface - Intel386 Architecture
Processor Supplement.
</PARA>
<PARA>
</PARA>
<SECT2 ID="fundamentaltyes">
<TITLE>Fundamental Types</TITLE>
<PARA>
In addition to the fundamental types specified in Chapter 3 of the System V
Application Binary Interface - Intel386 Architecture, these additional data
types are defined here.
<TABLE>
<TITLE>Scalar Types</TITLE>
<TGROUP COLS=5>
<THEAD>
  <ROW>
    <ENTRY>Type</ENTRY>
    <ENTRY>C</ENTRY>
    <ENTRY><COMPUTEROUTPUT>sizeof</COMPUTEROUTPUT></ENTRY>
    <ENTRY>Alignment (bytes)</ENTRY>
    <ENTRY>IntelI386 Architecture</ENTRY>
  </ROW>
</THEAD>
<TBODY>
  <ROW>
    <ENTRY>Boolean</ENTRY>
    <ENTRY>bool</ENTRY>
    <ENTRY><COMPUTEROUTPUT>1</COMPUTEROUTPUT></ENTRY>
    <ENTRY>1</ENTRY>
    <ENTRY>signed byte</ENTRY>
  </ROW>
  <ROW>
    <ENTRY MOREROWS=2 VALIGN=middle>Integral</ENTRY>
    <ENTRY>long long</ENTRY>
    <ENTRY MOREROWS=1 VALIGN=middle><COMPUTEROUTPUT>8</COMPUTEROUTPUT></ENTRY>
    <ENTRY MOREROWS=1 VALIGN=middle>4</ENTRY>
    <ENTRY MOREROWS=1 VALIGN=middle>signed double word</ENTRY>
  </ROW>
  <ROW>
    <ENTRY>signed long long</ENTRY>
  </ROW>
  <ROW>
    <ENTRY>unsigned long long</ENTRY>
    <ENTRY><COMPUTEROUTPUT>8</COMPUTEROUTPUT></ENTRY>
    <ENTRY>4</ENTRY>
    <ENTRY>unsigned double word</ENTRY>
  </ROW>
</TBODY>
</TGROUP>
</TABLE>
</PARA>
</SECT2>

<SECT2 ID="aggregatesandunions">
<TITLE>Aggregates and Unions</TITLE>
<PARA>
</PARA>
</SECT2>

<SECT2 ID="bitfields">
<TITLE>Bit Fields</TITLE>
<PARA>
</PARA>
</SECT2>

<SECT2 ID="memberptr">
<TITLE>Member Pointers</TITLE>
<PARA>
A pointer to data member is an offset from the base address of the class
object containing it, represented as a ptrdiff_t. It has the size
and alignment attributes of a ptrdiff_t. A NULL pointer is represented as -1. 
</PARA>
</SECT2>

<SECT2 ID="classes">
<TITLE>Class Representation</TITLE>
<PARA>
A C++ Class is represented by several closely related data objects. 
<TABLE>
<TITLE>Class Components</TITLE>
<TGROUP COLS=2>
<THEAD>
  <ROW>
    <ENTRY>Object</ENTRY>
    <ENTRY>Contains</ENTRY>
  </ROW>
</THEAD>
<TBODY>
  <ROW>
    <ENTRY>Class Data</ENTRY>
    <ENTRY>All non-static Class members</ENTRY>
  </ROW>
  <ROW>
    <ENTRY>Virtual Table</ENTRY>
    <ENTRY>Information needed to dispatch virtual functions, access virtual base class subobjects and to access the RTTI information</ENTRY>
  </ROW>
  <ROW>
    <ENTRY>RTTI</ENTRY>
    <ENTRY>Run-Time Type Information used by the typeid and dynamic_cast operators, and exception handlers</ENTRY>
  </ROW>
  <ROW>
    <ENTRY>Typeinfo Name</ENTRY>
    <ENTRY>String representaion of Class name</ENTRY>
  </ROW>
  <ROW>
    <ENTRY>Construction Virtual Table</ENTRY>
    <ENTRY>Information needed during construction and destruction of Classes with non-trivial inheritance relationships.</ENTRY>
  </ROW>
  <ROW>
    <ENTRY>VTT</ENTRY>
    <ENTRY>A table of virtual table pointers which holds the addresses of construction and non-contruction virtual tables.</ENTRY>
  </ROW>
</TBODY>
</TGROUP>
</TABLE>
</PARA>

<SECT3 ID="classordering">
<TITLE>Class Ordering</TITLE>
<PARA>
Derived classes have a unique linear ordering of all base classes, referered to
as the Inhereitance Graph Order. The ordering on a class object and all its
subobjects obtained by a depth-first traversal of its inheritance graph, from
the most-derived class object to base objects, where: 
</PARA>
No node is visited more than once. (So, a virtual base subobject, and all of
its base subobjects, will be visited only once.) 

The subobjects of a node are visited in the order in which they were declared.
(So, given  class A : public B, public C, A is walked first, then B and its
subobjects, and then C and its subobjects.) 

Note that the traversal may be preorder or postorder. Unless otherwise
specified, preorder (derived classes before their bases) is intended. 
<NOTE>
<PARA>
We need some good examples here.
</PARA>
</NOTE>
</SECT3>

<SECT3 ID="classdata">
<TITLE>Class Data</TITLE>
<PARA>
Non-static class members are arranged as if in a C structure according to
the following rules.
</PARA>
<NOTE>
<PARA>
Fill in algorithm from Itanium C++ ABI document
</PARA>
</NOTE>
</SECT3>

<SECT3 ID="virtualtable">
<TITLE>Virtual Table</TITLE>
<PARA>
</PARA>
<FIGURE ID="CXX-virtualtable">
<TITLE>
Vitual Table Prefix
</TITLE>
<SCREEN>
struct {
       ptrdiff_t  baseobject;
       const void *typeinfo;
       const void *virtfuncs[0];
       };
</SCREEN>
</FIGURE>
</SECT3>
<SECT3 ID="RTTI">
<TITLE>Run-Time Type Information</TITLE>
<PARA>
</PARA>
<FIGURE ID="CXX-RTTI">
<TITLE>
Run-Time Type Information Prefix
</TITLE>
<SCREEN>
struct {
       void      *basevtable;
       char      *__name;
       void      *basetypeinfo[0];
       };
</SCREEN>
</FIGURE>
</SECT3>
<SECT3 ID="typeinfoname">
<TITLE>Typeinfo Name</TITLE>
<PARA>
</PARA>
</SECT3>
<SECT3 ID="constructionvirtualtable">
<TITLE>Construction Virtual Table</TITLE>
<PARA>
</PARA>
<FIGURE ID="CXX-CVT">
<TITLE>
Construction Cirtual Table Prefix
</TITLE>
<SCREEN>
struct {
       ????
       };
</SCREEN>
</FIGURE>
</SECT3>
<SECT3 ID="virtualtypetable">
<TITLE>Virtual Type Tables </TITLE>
<PARA>
</PARA>
<FIGURE ID="CXX-VTT">
<TITLE>
Virtual Type Table Prefix
</TITLE>
<SCREEN>
struct {
       ???
       };
</SCREEN>
</FIGURE>
</SECT3>
</SECT2>
</SECT1>

</CHAPTER>

<CHAPTER id=callingsequence>
<TITLE>Function Calling Sequence</TITLE>
<PARA>
LSB-conforming applications shall use the function calling sequence as defined
in Chapter 3 of the System V Application Binary Interface - Intel386
Architecture Processor Supplement.
</PARA>

<SECT1 ID="cpuregisters">
<TITLE>CPU Registers</TITLE>
<PARA>
</PARA>
</SECT1>

<SECT1 ID="fpuregisters">
<TITLE>Floating Point Registers</TITLE>
<PARA>
</PARA>
</SECT1>

<SECT1 ID="stackframe">
<TITLE>Stack Frame</TITLE>
<PARA>
</PARA>
</SECT1>

<SECT1 ID="arguments">
<TITLE>Arguments</TITLE>
<PARA>
</PARA>
<SECT2 ID="integralpointerarg">
<TITLE>Integral/Pointer</TITLE>
<PARA>
</PARA>
</SECT2>
<SECT2 ID="floatingpointarg">
<TITLE>Floating Point</TITLE>
<PARA>
</PARA>
</SECT2>
<SECT2 ID="structunitonarg">
<TITLE>Struct and Union Point</TITLE>
<PARA>
</PARA>
</SECT2>
<SECT2 ID="variableargs">
<TITLE>Variable Arguments</TITLE>
<PARA>
</PARA>
</SECT2>
</SECT1>

<SECT1 ID="returnvalues">
<TITLE>Return Values</TITLE>
<PARA>
</PARA>
<SECT2 ID="voidret">
<TITLE>Void</TITLE>
<PARA>
</PARA>
</SECT2>
<SECT2 ID="integralpointerret">
<TITLE>Integral/Pointer</TITLE>
<PARA>
</PARA>
</SECT2>
<SECT2 ID="floatingpointret">
<TITLE>Floating Point</TITLE>
<PARA>
</PARA>
</SECT2>
<SECT2 ID="structunitonret">
<TITLE>Struct and Union Point</TITLE>
<PARA>
</PARA>
</SECT2>
</SECT1>

</CHAPTER>

<CHAPTER id=osinterface>
<TITLE>Operating System Interface</TITLE>
<PARA>
LSB-conforming applications shall use the Operating System Interfaces as
defined in Chapter 3 of the System V Application Binary Interface - Intel386
Architecture Processor Supplement.
</PARA>

<SECT1 ID="virtualaddressspace">
<TITLE>Virtual Address Space</TITLE>
<PARA>
</PARA>
<SECT2 ID="pagesize">
<TITLE>Page Size</TITLE>
<PARA>
</PARA>
</SECT2>
<SECT2 ID="virtualaddressassignments">
<TITLE>Virtual Address Assignments</TITLE>
<PARA>
</PARA>
</SECT2>
<SECT2 ID="managinprocesstack">
<TITLE>Managing the PRocess Stack</TITLE>
<PARA>
</PARA>
</SECT2>
<SECT2 ID="codingguidlines">
<TITLE>Coding Guidlines</TITLE>
<PARA>
</PARA>
</SECT2>
</SECT1>

<SECT1 ID="processorexecutionmode">
<TITLE>Processor Execution Mode</TITLE>
<PARA>
</PARA>
</SECT1>

<SECT1 ID="exceptioninterface">
<TITLE>Exception Interface</TITLE>
<PARA>
</PARA>
<SECT2 ID="hardwareexceptiontypes">
<TITLE>Hardware Exception Types</TITLE>
<PARA>
</PARA>
</SECT2>
<SECT2 ID="softwaretraptypes">
<TITLE>Software Trap Types</TITLE>
<PARA>
</PARA>
</SECT2>
</SECT1>

<SECT1 ID="signaldelivery">
<TITLE>Signal Delivery</TITLE>
<PARA>
</PARA>
<SECT2 ID="signalhandlerinterface">
<TITLE>Signal Handler Interface</TITLE>
<PARA>
</PARA>
</SECT2>
</SECT1>

</CHAPTER>

<CHAPTER id=processinitialization>
<TITLE>Process Initialization</TITLE>
<PARA>
LSB-conforming applications shall use the Process Initialization as
defined in Chapter 3 of the System V Application Binary Interface - Intel386
Architecture Processor Supplement.
</PARA>

<SECT1 ID="specialregisters">
<TITLE>Special Registers</TITLE>
<PARA>
</PARA>
</SECT1>

<SECT1 ID="processstack">
<TITLE>Process Stack (on entry)</TITLE>
<PARA>
</PARA>
</SECT1>

<SECT1 ID="auxilliaryvectors">
<TITLE>Auxilliary Vectors</TITLE>
<PARA>
</PARA>
</SECT1>

<SECT1 ID="environment">
<TITLE>Environment</TITLE>
<PARA>
</PARA>
</SECT1>

</CHAPTER>

<CHAPTER id=codingexamples>
<TITLE>Coding Examples</TITLE>
<PARA>
LSB-conforming applications may implement fundamental operations using the
Coding Examples as defined in Chapter 3 of the System V Application Binary
Interface - Intel386 Architecture Processor Supplement.
</PARA>

<SECT1 ID="codemodeloverview">
<TITLE>Code Model Overview/Architecture Constraints</TITLE>
<PARA>
</PARA>
</SECT1>

<SECT1 ID="picprologue">
<TITLE>Position-Independent Fucntion Prologue</TITLE>
<PARA>
</PARA>
</SECT1>

<SECT1 ID="dataobjects">
<TITLE>Data Objects</TITLE>
<PARA>
</PARA>
<SECT2 ID="dataobjectsabsload">
<TITLE>Absolute Load & Store</TITLE>
<PARA>
</PARA>
</SECT2>
<SECT2 ID="dataobjectsrelload">
<TITLE>Position Relative Load & Store</TITLE>
<PARA>
</PARA>
</SECT2>
</SECT1>

<SECT1 ID="functioncalls">
<TITLE>Function Calls</TITLE>
<PARA>
</PARA>
<SECT2 ID="funccalldirect">
<TITLE>Absolute Direct Function Call</TITLE>
<PARA>
</PARA>
</SECT2>
<SECT2 ID="funccallindirect">
<TITLE>Absolute Indirect Function Call</TITLE>
<PARA>
</PARA>
</SECT2>
<SECT2 ID="funccallpicdirect">
<TITLE>Position-Independent Direct Function Call</TITLE>
<PARA>
</PARA>
</SECT2>
<SECT2 ID="funccallpicindirect">
<TITLE>Position-Independent Indirect Function Call</TITLE>
<PARA>
</PARA>
</SECT2>
</SECT1>

<SECT1 ID="branching">
<TITLE>Branching</TITLE>
<PARA>
</PARA>
<SECT2 ID="branchinstruction">
<TITLE>Branch Instruction</TITLE>
<PARA>
</PARA>
</SECT2>
<SECT2 ID="absoluteswitchcode">
<TITLE>Absolute switch() code</TITLE>
<PARA>
</PARA>
</SECT2>
<SECT2 ID="picswitchcode">
<TITLE>Position-Independent switch() code</TITLE>
<PARA>
</PARA>
</SECT2>
</SECT1>

</CHAPTER>

<CHAPTER id=cstackframe>
<TITLE>C Stack Frame</TITLE>

<SECT1 ID="variablearglist">
<TITLE>Variable Argument List</TITLE>
<PARA>
</PARA>
</SECT1>

<SECT1 ID="dynamicstackalloc">
<TITLE>Dynamic Allocation of Stack Space</TITLE>
<PARA>
</PARA>
</SECT1>

</CHAPTER>

<CHAPTER id=debuginfo>
<TITLE>Debug Information</TITLE>

<PARA>
The LSB does not currently specify the format of Debug information.
</PARA>

</CHAPTER>

</PART>
