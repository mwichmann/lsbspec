<PART ID=tocbaselib>
<TITLE>Base Libraries</TITLE>

<CHAPTER id=baselib>
<TITLE>Libraries</TITLE>

<PARA>
An LSB-conforming implementation shall support some base libraries which
provide interfaces for accessing the operating system, processor and other
hardware in the system.
</PARA>

<!-- Start of text generated from database -->
<!-- generated from the LSB specification database -->
<!--    by $Header: /cvsroot/lsb/spec/mklibspec,v 1.45 2002/09/20 00:03:45 anderson Exp 0 -->
<!--    at Mon Sep 23 19:35:07 2002 -->
<SECT1 ID=libstdcxx>
<TITLE>Interfaces for libstdcxx</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libstdcxx Definition</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Library:</ENTRY>
<ENTRY>libstdcxx</ENTRY>
</ROW>
<ROW>
<ENTRY>SONAME:</ENTRY>
<ENTRY>libstdc++.so.5</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The behavior of the interfaces in this library is specified by the following standards.<SIMPLELIST COLUMNS=1>
<MEMBER>
ISO/IEC 14882: 1998(E) Programming languages --C++<FOOTNOTE ID="std-231-65">
<PARA>
ISO/IEC 14882: 1998(E) Programming languages --C++</PARA>
</FOOTNOTE>
</MEMBER>
</SIMPLELIST>
</PARA>
<SECT2>
<TITLE>18.4 C++ Dynamic Memory Managment</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libstdcxx - 18.4 C++ Dynamic Memory Managment Function Interfaces</TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW>
<ENTRY>operator delete&lsqb;](void*)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>operator delete(void*)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>operator new&lsqb;](unsigned)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>operator new(unsigned)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY></ENTRY>
</ROW>
<ROW>
<ENTRY>operator delete&lsqb;](void*, nothrow_t const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>operator delete(void*, nothrow_t const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>operator new&lsqb;](unsigned, nothrow_t const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>operator new(unsigned, nothrow_t const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>18.5 C++ Type identification</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libstdcxx - 18.5 C++ Type identification Function Interfaces</TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW>
<ENTRY>type_info::__do_catch(type_info const*, void**, unsigned) const(GLIBCPP_3.2)</ENTRY>
<ENTRY>type_info::__is_function_p() const(GLIBCPP_3.2)</ENTRY>
<ENTRY>bad_typeid::~bad_typeid &lsqb;not-in-charge]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>bad_cast::~bad_cast &lsqb;not-in-charge]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>type_info::~type_info &lsqb;not-in-charge]()(GLIBCPP_3.2)</ENTRY>
</ROW>
<ROW>
<ENTRY>type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const(GLIBCPP_3.2)</ENTRY>
<ENTRY>bad_typeid::~bad_typeid &lsqb;in-charge deleting]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>bad_cast::~bad_cast &lsqb;in-charge deleting]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>type_info::~type_info &lsqb;in-charge deleting]()(GLIBCPP_3.2)</ENTRY>
<ENTRY>__throw_bad_typeid()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>type_info::__is_pointer_p() const(GLIBCPP_3.2)</ENTRY>
<ENTRY>bad_typeid::~bad_typeid &lsqb;in-charge]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>bad_cast::~bad_cast &lsqb;in-charge]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>type_info::~type_info &lsqb;in-charge]()(GLIBCPP_3.2)</ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>18.6 C++ Exception handling</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libstdcxx - 18.6 C++ Exception handling Function Interfaces</TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW>
<ENTRY>unexpected()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>set_unexpected(void (*)())(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>uncaught_exception()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>terminate()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>18.6.1 C++ Class exception</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libstdcxx - 18.6.1 C++ Class exception Function Interfaces</TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW>
<ENTRY>exception::what() const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>exception::~exception &lsqb;in-charge deleting]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>exception::~exception &lsqb;in-charge]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>exception::~exception &lsqb;not-in-charge]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>18.6.2.1 C++ Class bad_exception</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libstdcxx - 18.6.2.1 C++ Class bad_exception Function Interfaces</TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW>
<ENTRY>domain_error::~domain_error &lsqb;in-charge deleting]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>bad_exception::~bad_exception &lsqb;in-charge deleting]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>bad_exception::~bad_exception &lsqb;in-charge]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>bad_exception::~bad_exception &lsqb;not-in-charge]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>19.1 Exception classes</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libstdcxx - 19.1 Exception classes Function Interfaces</TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW>
<ENTRY>logic_error::what() const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>range_error::~range_error &lsqb;in-charge deleting]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>length_error::~length_error &lsqb;in-charge]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>runtime_error::~runtime_error &lsqb;in-charge]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>underflow_error::~underflow_error &lsqb;in-charge deleting]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>logic_error::logic_error&lsqb;in-charge](basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>range_error::~range_error &lsqb;in-charge]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>out_of_range::out_of_range&lsqb;in-charge](basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>runtime_error::~runtime_error &lsqb;not-in-charge]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>underflow_error::~underflow_error &lsqb;in-charge]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>logic_error::logic_error&lsqb;not-in-charge](basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>domain_error::domain_error&lsqb;in-charge](basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>out_of_range::out_of_range&lsqb;not-in-charge](basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>overflow_error::overflow_error&lsqb;in-charge](basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>invalid_argument::invalid_argument&lsqb;in-charge](basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>logic_error::~logic_error &lsqb;in-charge deleting]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>domain_error::domain_error&lsqb;not-in-charge](basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>out_of_range::~out_of_range &lsqb;in-charge deleting]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>overflow_error::overflow_error&lsqb;not-in-charge](basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>invalid_argument::invalid_argument&lsqb;not-in-charge](basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>logic_error::~logic_error &lsqb;in-charge]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>domain_error::~domain_error &lsqb;in-charge]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>out_of_range::~out_of_range &lsqb;in-charge]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>overflow_error::~overflow_error &lsqb;in-charge deleting]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>invalid_argument::~invalid_argument &lsqb;in-charge deleting]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>logic_error::~logic_error &lsqb;not-in-charge]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>length_error::length_error&lsqb;in-charge](basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>runtime_error::runtime_error&lsqb;in-charge](basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>overflow_error::~overflow_error &lsqb;in-charge]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>invalid_argument::~invalid_argument &lsqb;in-charge]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>range_error::range_error&lsqb;in-charge](basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>length_error::length_error&lsqb;not-in-charge](basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>runtime_error::runtime_error&lsqb;not-in-charge](basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>underflow_error::underflow_error&lsqb;in-charge](basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY></ENTRY>
</ROW>
<ROW>
<ENTRY>range_error::range_error&lsqb;not-in-charge](basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>length_error::~length_error &lsqb;in-charge deleting]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>runtime_error::~runtime_error &lsqb;in-charge deleting]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>underflow_error::underflow_error&lsqb;not-in-charge](basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>21.3.1 C++ Class basic_string constructors</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libstdcxx - 21.3.1 C++ Class basic_string constructors Function Interfaces</TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW>
<ENTRY>basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> >::basic_string&lsqb;in-charge](wchar_t const*, allocator&lt;wchar_t> const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> >::basic_string&lsqb;in-charge](unsigned, wchar_t, allocator&lt;wchar_t> const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> >::basic_string&lsqb;not-in-charge](wchar_t const*, allocator&lt;wchar_t> const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> >::basic_string&lsqb;not-in-charge](unsigned, wchar_t, allocator&lt;wchar_t> const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> >::~basic_string &lsqb;in-charge]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> >::basic_string&lsqb;in-charge](wchar_t const*, unsigned, allocator&lt;wchar_t> const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> >::basic_string&lsqb;in-charge]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> >::basic_string&lsqb;not-in-charge](wchar_t const*, unsigned, allocator&lt;wchar_t> const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> >::basic_string&lsqb;not-in-charge]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> >::~basic_string &lsqb;not-in-charge]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> >::basic_string&lsqb;in-charge](allocator&lt;wchar_t> const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> >::basic_string&lsqb;in-charge]&lt;__gnu_cxx::__normal_iterator&lt;wchar_t const*, basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> > > >(__gnu_cxx::__normal_iterator&lt;wchar_t const*, basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> > >, __gnu_cxx::__normal_iterator&lt;wchar_t const*, basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> > >, allocator&lt;wchar_t> const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> >::basic_string&lsqb;not-in-charge](allocator&lt;wchar_t> const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> >::basic_string&lsqb;not-in-charge]&lt;__gnu_cxx::__normal_iterator&lt;wchar_t const*, basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> > > >(__gnu_cxx::__normal_iterator&lt;wchar_t const*, basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> > >, __gnu_cxx::__normal_iterator&lt;wchar_t const*, basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> > >, allocator&lt;wchar_t> const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> >::operator=(wchar_t const*)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> >::basic_string&lsqb;in-charge](basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> > const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> >::basic_string&lsqb;in-charge]&lt;__gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> > > >(__gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> > >, __gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> > >, allocator&lt;wchar_t> const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> >::basic_string&lsqb;not-in-charge](basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> > const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> >::basic_string&lsqb;not-in-charge]&lt;__gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> > > >(__gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> > >, __gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> > >, allocator&lt;wchar_t> const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> >::operator=(basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> > const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> >::basic_string&lsqb;in-charge](basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> > const&, unsigned, unsigned)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> >::basic_string&lsqb;in-charge]&lt;wchar_t const*>(wchar_t const*, wchar_t const*, allocator&lt;wchar_t> const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> >::basic_string&lsqb;not-in-charge](basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> > const&, unsigned, unsigned)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> >::basic_string&lsqb;not-in-charge]&lt;wchar_t const*>(wchar_t const*, wchar_t const*, allocator&lt;wchar_t> const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> >::operator=(wchar_t)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> >::basic_string&lsqb;in-charge](basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> > const&, unsigned, unsigned, allocator&lt;wchar_t> const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> >::basic_string&lsqb;in-charge]&lt;wchar_t*>(wchar_t*, wchar_t*, allocator&lt;wchar_t> const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> >::basic_string&lsqb;not-in-charge](basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> > const&, unsigned, unsigned, allocator&lt;wchar_t> const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> >::basic_string&lsqb;not-in-charge]&lt;wchar_t*>(wchar_t*, wchar_t*, allocator&lt;wchar_t> const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>21.3.2 C++ Class basic_string iterator support</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libstdcxx - 21.3.2 C++ Class basic_string iterator support Function Interfaces</TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::end() const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::rend() const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::begin() const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::rbegin() const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>21.3.3 C++ Class basic_string capacity</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libstdcxx - 21.3.3 C++ Class basic_string capacity Function Interfaces</TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::size() const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::max_size() const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::resize(unsigned)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::reserve(unsigned)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY></ENTRY>
</ROW>
<ROW>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::length() const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::clear()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::resize(unsigned, char)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>21.3.4 C++ Class basic_string element access</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libstdcxx - 21.3.4 C++ Class basic_string element access Function Interfaces</TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::at(unsigned) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::operator&lsqb;](unsigned)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>21.3.5 C++ Class basic_string modifiers</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libstdcxx - 21.3.5 C++ Class basic_string modifiers Function Interfaces</TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::copy(char*, unsigned, unsigned) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::append(basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&, unsigned, unsigned)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::insert(__gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > >, unsigned, char)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::replace(__gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > >, __gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > >, char const*, char const*)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::replace(unsigned, unsigned, basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::swap(basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::append(unsigned, char)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::insert(unsigned, char const*)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::replace(__gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > >, __gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > >, char const*, unsigned)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::replace(unsigned, unsigned, basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&, unsigned, unsigned)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::erase(__gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > >)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::assign(char const*)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::insert(unsigned, char const*, unsigned)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::replace(__gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > >, __gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > >, basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::replace(unsigned, unsigned, unsigned, char)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::erase(__gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > >, __gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > >)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::assign(char const*, unsigned)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::insert(unsigned, basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::replace(__gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > >, __gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > >, char*, char*)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::operator=(char const*)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::erase(unsigned, unsigned)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::assign(basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::insert(unsigned, basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&, unsigned, unsigned)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::replace(__gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > >, __gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > >, __gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > >, __gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > >)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::operator=(basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::append(char const*)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::assign(basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&, unsigned, unsigned)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::insert(unsigned, unsigned, char)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::replace(__gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > >, __gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > >, unsigned, char)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::operator=(char)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::append(char const*, unsigned)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::assign(unsigned, char)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::replace(__gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > >, __gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > >, __gnu_cxx::__normal_iterator&lt;char const*, basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > >, __gnu_cxx::__normal_iterator&lt;char const*, basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > >)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::replace(unsigned, unsigned, char const*)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY></ENTRY>
</ROW>
<ROW>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::append(basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::insert(__gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > >, char)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::replace(__gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > >, __gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > >, char const*)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::replace(unsigned, unsigned, char const*, unsigned)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>21.3.6 C++ Class basic_string string operations</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libstdcxx - 21.3.6 C++ Class basic_string string operations Function Interfaces</TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::find_last_of(char const*, unsigned) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::find_first_of(basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&, unsigned) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::find_first_not_of(char, unsigned) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::c_str() const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::compare(char const*) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::find_last_of(char const*, unsigned, unsigned) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::find_first_of(char, unsigned) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::data() const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::rfind(char const*, unsigned) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::compare(basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::find_last_of(basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&, unsigned) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::get_allocator() const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::find(char const*, unsigned) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::rfind(char const*, unsigned, unsigned) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::compare(unsigned, unsigned, char const*) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::find_last_of(char, unsigned) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::find_first_not_of(char const*, unsigned) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::find(char const*, unsigned, unsigned) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::rfind(basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&, unsigned) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::compare(unsigned, unsigned, char const*, unsigned) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::find_first_of(char const*, unsigned) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::find_first_not_of(char const*, unsigned, unsigned) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::find(basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&, unsigned) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::rfind(char, unsigned) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::compare(unsigned, unsigned, basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::find_first_of(char const*, unsigned, unsigned) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::find_first_not_of(basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&, unsigned) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::find(char, unsigned) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::substr(unsigned, unsigned) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::compare(unsigned, unsigned, basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&, unsigned, unsigned) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>21.3.7 C++ class basic_string non-member functions</TITLE>
<PARA>
</PARA>
</SECT2>
<SECT2>
<TITLE>22.1.1 C++ Class locale</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libstdcxx - 22.1.1 C++ Class locale Function Interfaces</TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW>
<ENTRY>locale::name() const<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>locale::global(locale const&)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>locale::locale&lsqb;in-charge](locale const&)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>locale::locale&lsqb;not-in-charge](char const*)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>locale::locale&lsqb;not-in-charge](locale const&, locale const&, unsigned)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>locale::operator==(locale const&) const<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>locale::classic()<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>locale::locale&lsqb;in-charge](locale const&, char const*, unsigned)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>locale::locale&lsqb;not-in-charge](locale::_Impl*)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>locale::locale&lsqb;not-in-charge]()<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>locale::id::id&lsqb;in-charge]()<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>locale::locale&lsqb;in-charge](char const*)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>locale::locale&lsqb;in-charge](locale const&, locale const&, unsigned)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>locale::locale&lsqb;not-in-charge](locale const&)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>locale::~locale &lsqb;in-charge]()<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>locale::id::id&lsqb;not-in-charge]()<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>locale::locale&lsqb;in-charge](locale::_Impl*)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>locale::locale&lsqb;in-charge]()<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>locale::locale&lsqb;not-in-charge](locale const&, char const*, unsigned)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>locale::~locale &lsqb;not-in-charge]()<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>22.2.1.3 C++ ctype specializations ctype&lt;char></TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libstdcxx - 22.2.1.3 C++ ctype specializations ctype&lt;char> Function Interfaces</TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW>
<ENTRY>ctype&lt;char>::do_scan_is(unsigned short, char const*, char const*) const<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>ctype&lt;char>::do_toupper(char) const<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>ctype&lt;char>::do_widen(char const*, char const*, char*) const<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>ctype&lt;char>::classic_table()<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>ctype&lt;char>::ctype&lsqb;not-in-charge](unsigned short const*, bool, unsigned)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>ctype&lt;char>::do_tolower(char*, char const*) const<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>ctype&lt;char>::do_scan_not(unsigned short, char const*, char const*) const<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>ctype&lt;char>::do_widen(char) const<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>ctype&lt;char>::ctype&lsqb;in-charge](__locale_struct*, unsigned short const*, bool, unsigned)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>ctype&lt;char>::~ctype &lsqb;in-charge deleting]()<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>ctype&lt;char>::do_tolower(char) const<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>ctype&lt;char>::do_is(char const*, char const*, unsigned short*) const<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>ctype&lt;char>::do_narrow(char const*, char const*, char, char*) const<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>ctype&lt;char>::ctype&lsqb;in-charge](unsigned short const*, bool, unsigned)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>ctype&lt;char>::~ctype &lsqb;in-charge]()<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>ctype&lt;char>::do_toupper(char*, char const*) const<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>ctype&lt;char>::do_is(unsigned short, char) const<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>ctype&lt;char>::do_narrow(char, char) const<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>ctype&lt;char>::ctype&lsqb;not-in-charge](__locale_struct*, unsigned short const*, bool, unsigned)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>ctype&lt;char>::~ctype &lsqb;not-in-charge]()<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<TABLE>
<TITLE>libstdcxx - 22.2.1.3 C++ ctype specializations ctype&lt;char> Data Interfaces</TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW>
<ENTRY>ctype&lt;char>::id<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>22.2.1.3 C++ ctype specializations ctype&lt;wchar_t></TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libstdcxx - 22.2.1.3 C++ ctype specializations ctype&lt;wchar_t> Function Interfaces</TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW>
<ENTRY>ctype&lt;wchar_t>::do_scan_is(unsigned short, wchar_t const*, wchar_t const*) const<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>ctype&lt;wchar_t>::do_toupper(wchar_t) const<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>ctype&lt;wchar_t>::do_is(unsigned short, wchar_t) const<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>ctype&lt;wchar_t>::do_narrow(wchar_t, char) const<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>ctype&lt;wchar_t>::ctype&lsqb;not-in-charge](unsigned)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>ctype&lt;wchar_t>::do_tolower(wchar_t*, wchar_t const*) const<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>ctype&lt;wchar_t>::do_scan_not(unsigned short, wchar_t const*, wchar_t const*) const<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>ctype&lt;wchar_t>::do_widen(char const*, char const*, wchar_t*) const<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>ctype&lt;wchar_t>::ctype&lsqb;in-charge](__locale_struct*, unsigned)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>ctype&lt;wchar_t>::~ctype &lsqb;in-charge deleting]()<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>ctype&lt;wchar_t>::do_tolower(wchar_t) const<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>ctype&lt;wchar_t>::_M_convert_to_wmask(unsigned short) const<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>ctype&lt;wchar_t>::do_widen(char) const<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>ctype&lt;wchar_t>::ctype&lsqb;in-charge](unsigned)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>ctype&lt;wchar_t>::~ctype &lsqb;in-charge]()<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>ctype&lt;wchar_t>::do_toupper(wchar_t*, wchar_t const*) const<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>ctype&lt;wchar_t>::do_is(wchar_t const*, wchar_t const*, unsigned short*) const<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>ctype&lt;wchar_t>::do_narrow(wchar_t const*, wchar_t const*, char, char*) const<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>ctype&lt;wchar_t>::ctype&lsqb;not-in-charge](__locale_struct*, unsigned)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>ctype&lt;wchar_t>::~ctype &lsqb;not-in-charge]()<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<TABLE>
<TITLE>libstdcxx - 22.2.1.3 C++ ctype specializations ctype&lt;wchar_t> Data Interfaces</TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW>
<ENTRY>ctype&lt;wchar_t>::id<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>22.2.1.4 C++ class ctype_byname&lt;char></TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libstdcxx - 22.2.1.4 C++ class ctype_byname&lt;char> Function Interfaces</TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW>
<ENTRY>ctype_byname&lt;char>::ctype_byname&lsqb;in-charge](char const*, unsigned)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>ctype_byname&lt;char>::ctype_byname&lsqb;not-in-charge](char const*, unsigned)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<TABLE>
<TITLE>libstdcxx - 22.2.1.4 C++ class ctype_byname&lt;char> Data Interfaces</TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW>
<ENTRY>ctype_byname&lt;char>::~ctype_byname &lsqb;in-charge deleting]()<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>ctype_byname&lt;char>::~ctype_byname &lsqb;in-charge]()<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>ctype_byname&lt;char>::~ctype_byname &lsqb;not-in-charge]()<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>22.2.1.4 C++ class ctype_byname&lt;wchar_t></TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libstdcxx - 22.2.1.4 C++ class ctype_byname&lt;wchar_t> Function Interfaces</TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW>
<ENTRY>ctype_byname&lt;wchar_t>::ctype_byname&lsqb;in-charge](char const*, unsigned)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>ctype_byname&lt;wchar_t>::ctype_byname&lsqb;not-in-charge](char const*, unsigned)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>ctype_byname&lt;wchar_t>::~ctype_byname &lsqb;in-charge deleting]()<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>ctype_byname&lt;wchar_t>::~ctype_byname &lsqb;in-charge]()<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>ctype_byname&lt;wchar_t>::~ctype_byname &lsqb;not-in-charge]()<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>22.2.1.5 C++ Class codecvt&lt;char></TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libstdcxx - 22.2.1.5 C++ Class codecvt&lt;char> Function Interfaces</TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW>
<ENTRY>codecvt&lt;char, char, __mbstate_t>::do_unshift(__mbstate_t&, char*, char*, char*&) const<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>codecvt&lt;char, char, __mbstate_t>::do_always_noconv() const<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>codecvt&lt;char, char, __mbstate_t>::do_length(__mbstate_t const&, char const*, char const*, unsigned) const<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>codecvt&lt;char, char, __mbstate_t>::~codecvt &lsqb;in-charge deleting]()<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY></ENTRY>
</ROW>
<ROW>
<ENTRY>codecvt&lt;char, char, __mbstate_t>::do_encoding() const<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>codecvt&lt;char, char, __mbstate_t>::do_in(__mbstate_t&, char const*, char const*, char const*&, char*, char*, char*&) const<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>codecvt&lt;char, char, __mbstate_t>::codecvt&lsqb;in-charge](unsigned)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>codecvt&lt;char, char, __mbstate_t>::~codecvt &lsqb;in-charge]()<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY></ENTRY>
</ROW>
<ROW>
<ENTRY>codecvt&lt;char, char, __mbstate_t>::do_max_length() const<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>codecvt&lt;char, char, __mbstate_t>::do_out(__mbstate_t&, char const*, char const*, char const*&, char*, char*, char*&) const<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>codecvt&lt;char, char, __mbstate_t>::codecvt&lsqb;not-in-charge](unsigned)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>codecvt&lt;char, char, __mbstate_t>::~codecvt &lsqb;not-in-charge]()<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<TABLE>
<TITLE>libstdcxx - 22.2.1.5 C++ Class codecvt&lt;char> Data Interfaces</TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW>
<ENTRY>codecvt&lt;char, char, __mbstate_t>::id<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>22.2.1.5 C++ Class codecvt&lt;wchar_t></TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libstdcxx - 22.2.1.5 C++ Class codecvt&lt;wchar_t> Function Interfaces</TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW>
<ENTRY>codecvt&lt;wchar_t, char, __mbstate_t>::do_unshift(__mbstate_t&, char*, char*, char*&) const<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>codecvt&lt;wchar_t, char, __mbstate_t>::do_always_noconv() const<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>codecvt&lt;wchar_t, char, __mbstate_t>::do_length(__mbstate_t const&, char const*, char const*, unsigned) const<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>codecvt&lt;wchar_t, char, __mbstate_t>::~codecvt &lsqb;in-charge deleting]()<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY></ENTRY>
</ROW>
<ROW>
<ENTRY>codecvt&lt;wchar_t, char, __mbstate_t>::do_encoding() const<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>codecvt&lt;wchar_t, char, __mbstate_t>::do_in(__mbstate_t&, char const*, char const*, char const*&, wchar_t*, wchar_t*, wchar_t*&) const<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>codecvt&lt;wchar_t, char, __mbstate_t>::codecvt&lsqb;in-charge](unsigned)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>codecvt&lt;wchar_t, char, __mbstate_t>::~codecvt &lsqb;in-charge]()<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY></ENTRY>
</ROW>
<ROW>
<ENTRY>codecvt&lt;wchar_t, char, __mbstate_t>::do_max_length() const<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>codecvt&lt;wchar_t, char, __mbstate_t>::do_out(__mbstate_t&, wchar_t const*, wchar_t const*, wchar_t const*&, char*, char*, char*&) const<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>codecvt&lt;wchar_t, char, __mbstate_t>::codecvt&lsqb;not-in-charge](unsigned)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>codecvt&lt;wchar_t, char, __mbstate_t>::~codecvt &lsqb;not-in-charge]()<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<TABLE>
<TITLE>libstdcxx - 22.2.1.5 C++ Class codecvt&lt;wchar_t> Data Interfaces</TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW>
<ENTRY>codecvt&lt;wchar_t, char, __mbstate_t>::id<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>22.2.2.1 C++ Class num_get&lt;char></TITLE>
<PARA>
</PARA>
</SECT2>
<SECT2>
<TITLE>22.2.2.1 C++ Class num_get&lt;wchar_t></TITLE>
<PARA>
</PARA>
</SECT2>
</SECT1>
<!-- End of text generated from database -->
<!--    by $Header: /cvsroot/lsb/spec/mklibspec,v 1.45 2002/09/20 00:03:45 anderson Exp 0 -->

<!-- Start of text generated from database -->
<!-- generated from the LSB specification database -->
<!--    by $Header: /cvsroot/lsb/spec/mklibspec,v 1.45 2002/09/20 00:03:45 anderson Exp 0 -->
<!--    at Mon Sep 23 19:35:46 2002 -->
<SECT1 ID=libpam>
<TITLE>Interfaces for libpam</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libpam Definition</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Library:</ENTRY>
<ENTRY>libpam</ENTRY>
</ROW>
<ROW>
<ENTRY>SONAME:</ENTRY>
<ENTRY>libpam.so.0</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The behavior of the interfaces in this library is specified by the following standards.<SIMPLELIST COLUMNS=1>
<MEMBER>
OSF-RFC 86.0<FOOTNOTE ID="std-233-66">
<PARA>
OSF-RFC 86.0</PARA>
</FOOTNOTE>
</MEMBER>
</SIMPLELIST>
</PARA>
<SECT2>
<!--libgroup-->
<TITLE>Pluggable Authentication API</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libpam - Pluggable Authentication API Function Interfaces</TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW>
<ENTRY>pam_acct_mgmt<FOOTNOTEREF LINKEND="std-233-66"></ENTRY>
<ENTRY>pam_end<FOOTNOTEREF LINKEND="std-233-66"></ENTRY>
<ENTRY>pam_set_data<FOOTNOTEREF LINKEND="std-233-66"></ENTRY>
<ENTRY>pam_start<FOOTNOTEREF LINKEND="std-233-66"></ENTRY>
<ENTRY></ENTRY>
</ROW>
<ROW>
<ENTRY>pam_authenticate<FOOTNOTEREF LINKEND="std-233-66"></ENTRY>
<ENTRY>pam_get_item<FOOTNOTEREF LINKEND="std-233-66"></ENTRY>
<ENTRY>pam_set_item<FOOTNOTEREF LINKEND="std-233-66"></ENTRY>
<ENTRY>pam_strerror<FOOTNOTEREF LINKEND="std-233-66"></ENTRY>
<ENTRY></ENTRY>
</ROW>
<ROW>
<ENTRY>pam_close_session<FOOTNOTEREF LINKEND="std-233-66"></ENTRY>
<ENTRY>pam_open_session<FOOTNOTEREF LINKEND="std-233-66"></ENTRY>
<ENTRY>pam_setcred<FOOTNOTEREF LINKEND="std-233-66"></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
</SECT1>
<SECT1 ID=libpam-ddefs>
<TITLE>Data Definitions for libpam</TITLE>
<PARA>
This section contains standard data definitions that describe system data. These definitions are organized into groups that correspond to system headers. This convention is used as a convenience for the reader, and does not imply the existence of these headers, or their content.</PARA>
<PARA>
ISO C serves as the LSB reference programming language, and data definitions are specified in ISO C format. The C language is used here as a convenient notation. Using a C language description of these data objects does not preclude their use by other programming languages.</PARA>
<SECT2>
<TITLE>security/pam_appl.h</TITLE>
<PARA>
</PARA>
<SCREEN>






struct pam_message
{
  int msg_style;
  const char *msg;
}
 ;
struct pam_response
{
  char *resp;
  int resp_retcode;
}
 ;


struct pam_conv
{
  int (*conv) (int num_msg, const struct pam_message * *msg,
	       struct pam_response * *resp, void *appdata_ptr);
  void *appdata_ptr;
}
 ;
#define PAM_SERVICE	1
#define PAM_USER	2
#define PAM_TTY	3
#define PAM_RHOST	4
#define PAM_CONV	5
</SCREEN>
</SECT2>
</SECT1>
<!-- End of text generated from database -->
<!--    by $Header: /cvsroot/lsb/spec/mklibspec,v 1.45 2002/09/20 00:03:45 anderson Exp 0 -->


</CHAPTER>

</PART>
