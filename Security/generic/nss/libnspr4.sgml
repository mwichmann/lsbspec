<!-- Start of generated text - do not edit! -->
<!-- generated from the LSB specification database by mklibspec -->
<SECT1 ID=libnspr4>
<TITLE>Interfaces for libnspr4</TITLE>
<PARA>
<xref linkend="lib-libnspr4-def"> defines the library name and shared object name
for the libnspr4 library
</PARA>
<TABLE id="lib-libnspr4-def">
<TITLE>libnspr4 Definition</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Library:</ENTRY>
<ENTRY>libnspr4</ENTRY>
</ROW>
<ROW>
<ENTRY>SONAME:</ENTRY>
<ENTRY>libnspr4.so</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The behavior of the interfaces in this library is specified by the following specifications:<SIMPLELIST COLUMNS=1>
<MEMBER ID='REFSTD.libnspr4.1'>
[NSPR] <xref linkend="std.NSPR">
</MEMBER>
</SIMPLELIST>
</PARA>
<!-- debug: database interface name Netscape Portable Runtime -->
<SECT2>
<!--libgroup-->
<TITLE>Netscape Portable Runtime</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for Netscape Portable Runtime</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic functions
for Netscape Portable Runtime specified in <xref linkend="tbl-libnspr4-netsc-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<TABLE id="tbl-libnspr4-netsc-ints">
<TITLE>libnspr4 - Netscape Portable Runtime Function Interfaces</TITLE>
<TGROUP COLS=3>
<TBODY>
<ROW>
<ENTRY><indexterm><primary>PR_Abort</primary></indexterm>PR_Abort <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_Accept</primary></indexterm>PR_Accept <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_AtomicAdd</primary></indexterm>PR_AtomicAdd <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>PR_AtomicDecrement</primary></indexterm>PR_AtomicDecrement <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_AtomicIncrement</primary></indexterm>PR_AtomicIncrement <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_AtomicSet</primary></indexterm>PR_AtomicSet <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>PR_Bind</primary></indexterm>PR_Bind <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_Calloc</primary></indexterm>PR_Calloc <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_Cleanup</primary></indexterm>PR_Cleanup <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>PR_ClearInterrupt</primary></indexterm>PR_ClearInterrupt <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_Close</primary></indexterm>PR_Close <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_Connect</primary></indexterm>PR_Connect <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>PR_ConnectContinue</primary></indexterm>PR_ConnectContinue <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_ConvertIPv4AddrToIPv6</primary></indexterm>PR_ConvertIPv4AddrToIPv6 <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_CreateIOLayerStub</primary></indexterm>PR_CreateIOLayerStub <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>PR_CreatePipe</primary></indexterm>PR_CreatePipe <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_DestroyCondVar</primary></indexterm>PR_DestroyCondVar <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_DestroyLock</primary></indexterm>PR_DestroyLock <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>PR_EnumerateAddrInfo</primary></indexterm>PR_EnumerateAddrInfo <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_ExplodeTime</primary></indexterm>PR_ExplodeTime <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_FormatTime</primary></indexterm>PR_FormatTime <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>PR_Free</primary></indexterm>PR_Free <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_FreeAddrInfo</primary></indexterm>PR_FreeAddrInfo <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_GMTParameters</primary></indexterm>PR_GMTParameters <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>PR_GetAddrInfoByName</primary></indexterm>PR_GetAddrInfoByName <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_GetCanonNameFromAddrInfo</primary></indexterm>PR_GetCanonNameFromAddrInfo <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_GetDefaultIOMethods</primary></indexterm>PR_GetDefaultIOMethods <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>PR_GetDescType</primary></indexterm>PR_GetDescType <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_GetError</primary></indexterm>PR_GetError <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_GetErrorText</primary></indexterm>PR_GetErrorText <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>PR_GetErrorTextLength</primary></indexterm>PR_GetErrorTextLength <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_GetLayersIdentity</primary></indexterm>PR_GetLayersIdentity <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_GetOSError</primary></indexterm>PR_GetOSError <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>PR_GetSocketOption</primary></indexterm>PR_GetSocketOption <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_GetThreadPrivate</primary></indexterm>PR_GetThreadPrivate <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_GetThreadScope</primary></indexterm>PR_GetThreadScope <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>PR_GetThreadState</primary></indexterm>PR_GetThreadState <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_GetUniqueIdentity</primary></indexterm>PR_GetUniqueIdentity <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_ImplodeTime</primary></indexterm>PR_ImplodeTime <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>PR_ImportTCPSocket</primary></indexterm>PR_ImportTCPSocket <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_Init</primary></indexterm>PR_Init <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_Initialize</primary></indexterm>PR_Initialize <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>PR_InitializeNetAddr</primary></indexterm>PR_InitializeNetAddr <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_Initialized</primary></indexterm>PR_Initialized <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_Interrupt</primary></indexterm>PR_Interrupt <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>PR_IntervalNow</primary></indexterm>PR_IntervalNow <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_IntervalToMicroseconds</primary></indexterm>PR_IntervalToMicroseconds <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_IntervalToMilliseconds</primary></indexterm>PR_IntervalToMilliseconds <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>PR_IntervalToSeconds</primary></indexterm>PR_IntervalToSeconds <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_Listen</primary></indexterm>PR_Listen <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_LocalTimeParameters</primary></indexterm>PR_LocalTimeParameters <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>PR_Lock</primary></indexterm>PR_Lock <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_Malloc</primary></indexterm>PR_Malloc <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_MicrosecondsToInterval</primary></indexterm>PR_MicrosecondsToInterval <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>PR_MillisecondsToInterval</primary></indexterm>PR_MillisecondsToInterval <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_NetAddrToString</primary></indexterm>PR_NetAddrToString <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_NewCondVar</primary></indexterm>PR_NewCondVar <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>PR_NewLock</primary></indexterm>PR_NewLock <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_NewThreadPrivateIndex</primary></indexterm>PR_NewThreadPrivateIndex <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_NormalizeTime</primary></indexterm>PR_NormalizeTime <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>PR_NotifyAllCondVar</primary></indexterm>PR_NotifyAllCondVar <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_NotifyCondVar</primary></indexterm>PR_NotifyCondVar <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_Now</primary></indexterm>PR_Now <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>PR_Open</primary></indexterm>PR_Open <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_OpenTCPSocket</primary></indexterm>PR_OpenTCPSocket <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_OpenUDPSocket</primary></indexterm>PR_OpenUDPSocket <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>PR_ParseTimeString</primary></indexterm>PR_ParseTimeString <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_ParseTimeStringToExplodedTime</primary></indexterm>PR_ParseTimeStringToExplodedTime <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_Poll</primary></indexterm>PR_Poll <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>PR_PopIOLayer</primary></indexterm>PR_PopIOLayer <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_ProcessExit</primary></indexterm>PR_ProcessExit <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_PushIOLayer</primary></indexterm>PR_PushIOLayer <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>PR_Read</primary></indexterm>PR_Read <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_Realloc</primary></indexterm>PR_Realloc <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_Recv</primary></indexterm>PR_Recv <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>PR_RecvFrom</primary></indexterm>PR_RecvFrom <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_SecondsToInterval</primary></indexterm>PR_SecondsToInterval <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_Send</primary></indexterm>PR_Send <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>PR_SendTo</primary></indexterm>PR_SendTo <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_SetError</primary></indexterm>PR_SetError <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_SetErrorText</primary></indexterm>PR_SetErrorText <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>PR_SetSocketOption</primary></indexterm>PR_SetSocketOption <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_SetThreadPrivate</primary></indexterm>PR_SetThreadPrivate <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_Shutdown</primary></indexterm>PR_Shutdown <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>PR_Sleep</primary></indexterm>PR_Sleep <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_StringToNetAddr</primary></indexterm>PR_StringToNetAddr <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_TicksPerSecond</primary></indexterm>PR_TicksPerSecond <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>PR_Unlock</primary></indexterm>PR_Unlock <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_WaitCondVar</primary></indexterm>PR_WaitCondVar <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_Write</primary></indexterm>PR_Write <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>
</SECT2>
</SECT1>
<SECT1 ID=libnspr4-ddefs>
<TITLE>Data Definitions for libnspr4</TITLE>
<PARA>
This section defines global identifiers and their values that are associated
with interfaces contained in libnspr4.
These definitions are organized into groups that
correspond to system headers. This convention is used as a
convenience for the reader, and does not imply the existence
of these headers, or their content.
Where an interface is defined as requiring a particular system header file
all of the data definitions for that system header file presented here shall be in effect.
</PARA>
<PARA>
This section gives data definitions to promote binary application
portability, not to repeat source interface definitions available
elsewhere. System providers and application developers should use this ABI
to supplement - not to replace - source interface definition specifications.
</PARA>
<PARA>
This specification uses the <xref linkend="std.ISOC99"> C Language as the reference programming language, and data definitions are specified in ISO C format. The C language is used here as a convenient notation. Using a C language description of these data objects does not preclude their use by other programming languages.</PARA>
<SECT2>
<TITLE>nspr4/nspr.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define nspr_h___
</SCREEN>
</SECT2>
<SECT2>
<TITLE>nspr4/plarena.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define plarena_h___

typedef struct PLArenaPool {
    struct PLArena first;
    struct PLArena *current;
    PRUint32 arenasize;
    PRUword mask;
} PLArenaPool;
struct PLArena {
    struct PLArena *next;
    PRUword base;
    PRUword limit;
    PRUword avail;
};
</SCREEN>
</SECT2>
<SECT2>
<TITLE>nspr4/plhash.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define plhash_h___

typedef PRUint32 PLHashNumber;
typedef PRIntn(*PLHashComparator) (const void *, const void *);
typedef struct PLHashAllocOps {
    void *(*allocTable) (void *, PRSize);
    void (*freeTable) (void *, void *);
    struct PLHashEntry *(*allocEntry) (void *, const void *);
    void (*freeEntry) (void *, struct PLHashEntry *, PRUintn);
} PLHashAllocOps;
typedef PLHashNumber(*PLHashFunction) (const void *);
struct PLHashEntry {
    struct PLHashEntry *next;
    PLHashNumber keyHash;
    const void *key;
    void *value;
};
struct PLHashTable {
    struct PLHashEntry **buckets;
    PRUint32 nentries;
    PRUint32 shift;
    PLHashFunction keyHash;
    PLHashComparator keyCompare;
    PLHashComparator valueCompare;
    const PLHashAllocOps *allocOps;
    void *allocPriv;
};
</SCREEN>
</SECT2>
<SECT2>
<TITLE>nspr4/pratom.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define PR_ATOMIC_ADD(val)	PR_AtomicAdd(val)
#define PR_ATOMIC_DECREMENT(val)	PR_AtomicDecrement(val)
#define PR_ATOMIC_INCREMENT(val)	PR_AtomicIncrement(val)
#define PR_ATOMIC_SET(val)	PR_AtomicSet(val)

extern PRInt32 PR_AtomicAdd(PRInt32 * ptr, PRInt32 val);
extern PRInt32 PR_AtomicDecrement(PRInt32 * val);
extern PRInt32 PR_AtomicIncrement(PRInt32 * val);
extern PRInt32 PR_AtomicSet(PRInt32 * val, PRInt32 newval);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>nspr4/prclist.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define prclist_h___

typedef struct PRCListStr {
    PRCList *next;
    PRCList *prev;
} PRCList;
</SCREEN>
</SECT2>
<SECT2>
<TITLE>nspr4/prcvar.h</TITLE>
<PARA>
</PARA>
<SCREEN>

typedef struct PRCondVar PRCondVar;
extern void PR_DestroyCondVar(PRCondVar * cvar);
extern PRCondVar *PR_NewCondVar(PRLock * lock);
extern PRStatus PR_NotifyAllCondVar(PRCondVar * cvar);
extern PRStatus PR_NotifyCondVar(PRCondVar * cvar);
extern PRStatus PR_WaitCondVar(PRCondVar * cvar, PRIntervalTime timeout);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>nspr4/prerror.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define prerror_h___

typedef PRInt32 PRErrorCode;
extern PRErrorCode PR_GetError(void);
extern PRInt32 PR_GetErrorText(char *text);
extern PRInt32 PR_GetErrorTextLength(void);
extern PRInt32 PR_GetOSError(void);
extern void PR_SetError(PRErrorCode errorCode, PRInt32 oserr);
extern void PR_SetErrorText(PRIntn textLength, const char *text);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>nspr4/prinit.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define prinit_h___

typedef PRIntn(*PRPrimordialFn) (PRIntn argc, char **argv);
typedef PRStatus(*PRCallOnceFN) (void);
typedef PRStatus(*PRCallOnceWithArgFN) (void *arg);
extern void PR_Abort(void);
extern PRStatus PR_Cleanup(void);
extern void PR_Init(PRThreadType type, PRThreadPriority priority,
		    PRUintn maxPTDs);
extern PRIntn PR_Initialize(PRPrimordialFn prmain, PRIntn argc,
			    char **argv, PRUintn maxPTDs);
extern PRBool PR_Initialized(void);
extern void PR_ProcessExit(PRIntn status);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>nspr4/prinrval.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define prinrval_h
#define PR_INTERVAL_NO_WAIT	0UL
#define PR_INTERVAL_NO_TIMEOUT	0xffffffffUL

typedef PRUint32 PRIntervalTime;
extern PRIntervalTime PR_IntervalNow(void);
extern PRUint32 PR_IntervalToMicroseconds(PRIntervalTime ticks);
extern PRUint32 PR_IntervalToMilliseconds(PRIntervalTime ticks);
extern PRUint32 PR_IntervalToSeconds(PRIntervalTime ticks);
extern PRIntervalTime PR_MicrosecondsToInterval(PRUint32 micro);
extern PRIntervalTime PR_MillisecondsToInterval(PRUint32 milli);
extern PRIntervalTime PR_SecondsToInterval(PRUint32 seconds);
extern PRUint32 PR_TicksPerSecond(void);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>nspr4/prio.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define prio_h___
#define PR_RDONLY	0x01
#define PR_WRONLY	0x02
#define PR_RDWR	0x04
#define PR_CREATE_FILE	0x08
#define PR_APPEND	0x10
#define PR_TRUNCATE	0x20
#define PR_SYNC	0x40
#define PR_EXCL	0x80

typedef enum PRDescType {
    PR_DESC_FILE = 1,
    PR_DESC_SOCKET_TCP = 2,
    PR_DESC_SOCKET_UDP = 3,
    PR_DESC_LAYERED = 4,
    PR_DESC_PIPE = 5
} PRDescType;
typedef struct PRIPv6Addr {
    union {
	PRUint8 _S6_u8[15];
	PRUint16 _S6_u16[7];
	PRUint32 _S6_u32[3];
	PRUint64 _S6_u64[1];
    } _S6_un;
} PRIPv6Addr;
typedef enum PRTransmitFileFlags {
    PR_TRANSMITFILE_KEEP_OPEN = 0,
    PR_TRANSMITFILE_CLOSE_SOCKET = 1
} PRTransmitFileFlags;
typedef struct PRLinger {
    PRBool polarity;
    PRIntervalTime linger;
} PRLinger;
typedef struct PRFilePrivate PRFilePrivate;
typedef struct PRFileDesc {
    const struct PRIOMethods *methods;
    PRFilePrivate *secret;
    PRFileDesc *lower;
    PRFileDesc *higher;
    void (*dtor) (PRFileDesc *);
    PRDescIdentity identity;
} PRFileDesc;
typedef union PRNetAddr {
    struct {
	PRUint16 family;
	char data[14];
    } raw;
    struct {
	PRUint16 family;
	PRUint16 port;
	PRUint32 ip;
	char pad[7];
    } inet;
    struct {
	PRUint16 family;
	PRUint16 port;
	PRUint32 flowinfo;
	PRIPv6Addr ip;
	PRUint32 scope_id;
    } ipv6;
    struct {
	PRUint16 family;
	char path[103];
    } local;
} PRNetAddr;
typedef struct PRMcastRequest {
    union PRNetAddr mcaddr;
    union PRNetAddr ifaddr;
} PRMcastRequest;
typedef struct PRIOVec {
    char *iov_base;
    int iov_len;
} PRIOVec;
typedef struct PRSocketOptionData {
    PRSockOption option;
    union {
	PRUintn ip_ttl;
	PRUintn mcast_ttl;
	PRUintn tos;
	PRBool non_blocking;
	PRBool reuse_addr;
	PRBool keep_alive;
	PRBool mcast_loopback;
	PRBool no_delay;
	PRBool broadcast;
	PRSize max_segment;
	PRSize recv_buffer_size;
	PRSize send_buffer_size;
	PRLinger linger;
	PRMcastRequest add_member;
	PRMcastRequest drop_member;
	union PRNetAddr mcast_if;
    } value;
} PRSocketOptionData;
typedef PRStatus(*PRFsyncFN) (PRFileDesc * fd);
typedef PRStatus(*PRListenFN) (PRFileDesc * fd, PRIntn how);
typedef enum PRSeekWhence {
    PR_SEEK_SET = 0,
    PR_SEEK_CUR = 1,
    PR_SEEK_END = 2
} PRSeekWhence;
typedef PRInt32(*PRAcceptreadFN) (PRFileDesc * sd, PRFileDesc * *nd,
				  PRNetAddr * *raddr, void *buf,
				  PRInt32 amount, PRIntervalTime t);
typedef PRStatus(*PRCloseFN) (PRFileDesc * fd);
typedef PRInt32(*PRTransmitfileFN) (PRFileDesc * sd, PRFileDesc * fd,
				    const void *headers, PRInt32 hlen,
				    PRTransmitFileFlags flags,
				    PRIntervalTime t);
typedef enum PRSockOption {
    PR_SockOpt_Nonblocking,
    PR_SockOpt_Linger = 1,
    PR_SockOpt_Reuseaddr = 2,
    PR_SockOpt_Keepalive = 3,
    PR_SockOpt_RecvBufferSize = 4,
    PR_SockOpt_SendBufferSize = 5,
    PR_SockOpt_IpTimeToLive = 6,
    PR_SockOpt_IpTypeOfService = 7,
    PR_SockOpt_AddMember = 8,
    PR_SockOpt_DropMember = 9,
    PR_SockOpt_McastInterface = 10,
    PR_SockOpt_McastTimeToLive = 11,
    PR_SockOpt_McastLoopback = 12,
    PR_SockOpt_NoDelay = 13,
    PR_SockOpt_MaxSegment = 14,
    PR_SockOpt_Broadcast = 15,
    PR_SockOpt_Last = 16
} PRSockOption;
typedef PRFileDesc *(*PRAcceptFN) (PRFileDesc * fd, PRNetAddr * addr,
				   PRIntervalTime timeout);
typedef PRStatus(*PRConnectcontinueFN) (PRFileDesc * fd,
					PRInt16 out_flags);
typedef PRInt32(*PRReadFN) (PRFileDesc * fd, void *buf, PRInt32 amount);
typedef struct PRFileInfo64 {
    PRFileType type;
    PROffset64 size;
    PRTime creationTime;
    PRTime modifyTime;
} PRFileInfo64;
typedef PRStatus(*PRGetsocketoptionFN) (PRFileDesc * fd,
					PRSocketOptionData * data);
typedef PRInt32(*PRSendtoFN) (PRFileDesc * fd, const void *buf,
			      PRInt32 amount, PRIntn flags,
			      const PRNetAddr * addr,
			      PRIntervalTime timeout);
typedef PRStatus(*PRGetsocknameFN) (PRFileDesc * fd, PRNetAddr * addr);
typedef PRInt32(*PRSendFN) (PRFileDesc * fd, const void *buf,
			    PRInt32 amount, PRIntn flags,
			    PRIntervalTime timeout);
typedef PROffset32(*PRSeekFN) (PRFileDesc * fd, PROffset32 offset,
			       PRSeekWhence how);
typedef PRInt64(*PRAvailable64FN) (PRFileDesc * fd);
typedef PRInt32(*PRAvailableFN) (PRFileDesc * fd);
typedef struct PRFileInfo {
    PRFileType type;
    PROffset32 size;
    PRTime creationTime;
    PRTime modifyTime;
} PRFileInfo;
typedef PROffset64(*PRSeek64FN) (PRFileDesc * fd, PROffset64 offset,
				 PRSeekWhence how);
typedef PRStatus(*PRSetsocketoptionFN) (PRFileDesc * fd,
					const PRSocketOptionData * data);
typedef PRInt32(*PRRecvFN) (PRFileDesc * fd, void *buf, PRInt32 amount,
			    PRIntn flags, PRIntervalTime timeout);
typedef struct PRSendFileData {
    PRFileDesc *fd;
    PRUint32 file_offset;
    PRSize file_nbytes;
    const void *header;
    PRInt32 hlen;
    const void *trailer;
    PRInt32 tlen;
} PRSendFileData;
typedef PRIntn PRDescIdentity;
typedef PRStatus(*PRConnectFN) (PRFileDesc * fd, const PRNetAddr * addr,
				PRIntervalTime timeout);
typedef PRInt32(*PRSendfileFN) (PRFileDesc * networkSocket,
				PRSendFileData * sendData,
				PRTransmitFileFlags flags,
				PRIntervalTime timeout);
typedef PRInt32(*PRRecvfromFN) (PRFileDesc * fd, void *buf, PRInt32 amount,
				PRIntn flags, PRNetAddr * addr,
				PRIntervalTime timeout);
typedef struct PRPollDesc {
    PRFileDesc *fd;
    PRInt16 in_flags;
    PRInt16 out_flags;
} PRPollDesc;
typedef PRInt32(*PRWriteFN) (PRFileDesc * fd, const void *buf,
			     PRInt32 amount);
typedef PRStatus(*PRFileInfo64FN) (PRFileDesc * fd, PRFileInfo64 * info);
typedef PRStatus(*PRShutdownFN) (PRFileDesc * fd, PRIntn how);
typedef PRIntn(*PRReservedFN) (PRFileDesc * fd);
typedef PRStatus(*PRFileInfoFN) (PRFileDesc * fd, PRFileInfo * info);
typedef PRInt32(*PRWritevFN) (PRFileDesc * fd, const PRIOVec * iov,
			      PRInt32 iov_size, PRIntervalTime timeout);
typedef enum PRFileType {
    PR_FILE_FILE = 1,
    PR_FILE_DIRECTORY = 2,
    PR_FILE_OTHER = 3
} PRFileType;
typedef PRStatus(*PRBindFN) (PRFileDesc * fd, const PRNetAddr * addr);
typedef PRInt16(*PRPollFN) (PRFileDesc * fd, PRInt16 in_flags,
			    PRInt16 * out_flags);
struct PRIOMethods {
    PRDescType file_type;
    PRCloseFN close;
    PRReadFN read;
    PRWriteFN write;
    PRAvailableFN available;
    PRAvailable64FN available64;
    PRFsyncFN fsync;
    PRSeekFN seek;
    PRSeek64FN seek64;
    PRFileInfoFN fileInfo;
    PRFileInfo64FN fileInfo64;
    PRWritevFN writev;
    PRConnectFN connect;
    PRAcceptFN accept;
    PRBindFN bind;
    PRListenFN listen;
    PRShutdownFN shutdown;
    PRRecvFN recv;
    PRSendFN send;
    PRRecvfromFN recvfrom;
    PRSendtoFN sendto;
    PRPollFN poll;
    PRAcceptreadFN acceptread;
    PRTransmitfileFN transmitfile;
    PRGetsocknameFN getsockname;
    PRGetpeernameFN getpeername;
    PRReservedFN reserved_fn_6;
    PRReservedFN reserved_fn_5;
    PRGetsocketoptionFN getsocketoption;
    PRSetsocketoptionFN setsocketoption;
    PRSendfileFN sendfile;
    PRConnectcontinueFN connectcontinue;
    PRReservedFN reserved_fn_3;
    PRReservedFN reserved_fn_2;
    PRReservedFN reserved_fn_1;
    PRReservedFN reserved_fn_0;
};
typedef PRStatus(*PRGetpeernameFN) (PRFileDesc * fd, PRNetAddr * addr);
typedef enum PRShutdownHow {
    PR_SHUTDOWN_RCV = 0,
    PR_SHUTDOWN_SEND = 1,
    PR_SHUTDOWN_BOTH = 2
} PRShutdownHow;
extern PRFileDesc *PR_Accept(PRFileDesc * fd, PRNetAddr * addr,
			     PRIntervalTime timeout);
extern PRStatus PR_Bind(PRFileDesc * fd, const PRNetAddr * addr);
extern PRStatus PR_Close(PRFileDesc * fd);
extern PRStatus PR_Connect(PRFileDesc * fd, const PRNetAddr * addr,
			   PRIntervalTime timeout);
extern PRStatus PR_ConnectContinue(PRFileDesc * fd, PRInt16 out_flags);
extern PRFileDesc *PR_CreateIOLayerStub(PRDescIdentity ident,
					const struct PRIOMethods *methods);
extern PRStatus PR_CreatePipe(PRFileDesc * *readPipe,
			      PRFileDesc * *writePipe);
extern const struct PRIOMethods *PR_GetDefaultIOMethods(void);
extern PRDescType PR_GetDescType(PRFileDesc * file);
extern PRDescIdentity PR_GetLayersIdentity(PRFileDesc * fd);
extern PRStatus PR_GetSocketOption(PRFileDesc * fd,
				   PRSocketOptionData * data);
extern PRDescIdentity PR_GetUniqueIdentity(const char *layer_name);
extern PRStatus PR_Listen(PRFileDesc * fd, PRIntn backlog);
extern PRFileDesc *PR_Open(const char *name, PRIntn flags, PRIntn mode);
extern PRFileDesc *PR_OpenTCPSocket(PRIntn af);
extern PRFileDesc *PR_OpenUDPSocket(PRIntn af);
extern PRInt32 PR_Poll(PRPollDesc * pds, PRIntn npds,
		       PRIntervalTime timeout);
extern PRFileDesc *PR_PopIOLayer(PRFileDesc * fd_stack, PRDescIdentity id);
extern PRStatus PR_PushIOLayer(PRFileDesc * fd_stack, PRDescIdentity id,
			       PRFileDesc * layer);
extern PRInt32 PR_Read(PRFileDesc * fd, void *buf, PRInt32 amount);
extern PRInt32 PR_Recv(PRFileDesc * fd, void *buf, PRInt32 amount,
		       PRIntn flags, PRIntervalTime timeout);
extern PRInt32 PR_RecvFrom(PRFileDesc * fd, void *buf, PRInt32 amount,
			   PRIntn flags, PRNetAddr * addr,
			   PRIntervalTime timeout);
extern PRInt32 PR_Send(PRFileDesc * fd, const void *buf, PRInt32 amount,
		       PRIntn flags, PRIntervalTime timeout);
extern PRInt32 PR_SendTo(PRFileDesc * fd, const void *buf, PRInt32 amount,
			 PRIntn flags, const PRNetAddr * addr,
			 PRIntervalTime timeout);
extern PRStatus PR_SetSocketOption(PRFileDesc * fd,
				   const PRSocketOptionData * data);
extern PRStatus PR_Shutdown(PRFileDesc * fd, PRShutdownHow how);
extern PRInt32 PR_Write(PRFileDesc * fd, const void *buf, PRInt32 amount);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>nspr4/private/pprio.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define pprio_h___

typedef PRInt32 PROsfd;
extern PRFileDesc *PR_ImportTCPSocket(PROsfd osfd);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>nspr4/prlock.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define prlock_h___

typedef struct PRLock PRLock;
extern void PR_DestroyLock(PRLock * lock);
extern void PR_Lock(PRLock * lock);
extern PRLock *PR_NewLock(void);
extern PRStatus PR_Unlock(PRLock * lock);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>nspr4/prmem.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define PR_NEW(_struct)	((_struct *) PR_MALLOC(sizeof(_struct)))
#define PR_NEWZAP(_struct)	((_struct*)PR_Calloc(1, sizeof(_struct)))
#define PR_CALLOC(_size)	(PR_Calloc(1, (_size)))
#define PR_MALLOC(_bytes)	(PR_Malloc(_bytes))
#define PR_REALLOC(_ptr, _size)	(PR_Realloc((_ptr), (_size)))
#define PR_FREEIF(_ptr)	if (_ptr) PR_DELETE(_ptr)
#define PR_DELETE(_ptr)	{ PR_Free(_ptr); (_ptr) = NULL; }

extern void *PR_Calloc(PRUint32 nelem, PRUint32 elsize);
extern void PR_Free(void *ptr);
extern void *PR_Malloc(PRUint32 size);
extern void *PR_Realloc(void *ptr, PRUint32 size);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>nspr4/prmon.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define prmon_h___

typedef struct PRMonitor PRMonitor;
</SCREEN>
</SECT2>
<SECT2>
<TITLE>nspr4/prnetdb.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define prnetdb_h___
#define PR_NetAddrFamily(addr)	((addr)->raw.family)
#define PR_NetAddrInetPort(addr)	\
     ((addr)->raw.family == PR_AF_INET6 ? (addr)->ipv6.port : (addr)->inet.port)

typedef struct PRHostEnt {
    char *h_name;
    char **h_aliases;
    PRInt32 h_addrtype;
    PRInt32 h_length;
    char **h_addr_list;
} PRHostEnt;
typedef struct PRAddrInfo PRAddrInfo;
typedef enum PRNetAddrValue {
    PR_IpAddrNull,
    PR_IpAddrAny,
    PR_IpAddrLoopback,
    PR_IpAddrV4Mapped
} PRNetAddrValue;
extern void PR_ConvertIPv4AddrToIPv6(PRUint32 v4addr, PRIPv6Addr * v6addr);
extern void *PR_EnumerateAddrInfo(void *enumPtr,
				  const PRAddrInfo * addrInfo,
				  PRUint16 port, PRNetAddr * result);
extern void PR_FreeAddrInfo(PRAddrInfo * addrInfo);
extern PRAddrInfo *PR_GetAddrInfoByName(const char *hostname, PRUint16 af,
					PRIntn flags);
extern const char *PR_GetCanonNameFromAddrInfo(const PRAddrInfo *
					       addrInfo);
extern PRStatus PR_InitializeNetAddr(PRNetAddrValue val, PRUint16 port,
				     PRNetAddr * addr);
extern PRStatus PR_NetAddrToString(const PRNetAddr * addr, char *string,
				   PRUint32 size);
extern PRStatus PR_StringToNetAddr(const char *string, PRNetAddr * addr);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>nspr4/prthread.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define prthread_h___

typedef struct PRThread PRThread;
typedef enum PRThreadType {
    PR_USER_THREAD,
    PR_SYSTEM_THREAD
} PRThreadType;
typedef enum PRThreadScope {
    PR_LOCAL_THREAD,
    PR_GLOBAL_THREAD,
    PR_GLOBAL_BOUND_THREAD
} PRThreadScope;
typedef enum PRThreadState {
    PR_JOINABLE_THREAD,
    PR_UNJOINABLE_THREAD
} PRThreadState;
typedef enum PRThreadPriority {
    PR_PRIORITY_FIRST = 0,
    PR_PRIORITY_LOW = 0,
    PR_PRIORITY_NORMAL = 1,
    PR_PRIORITY_HIGH = 2,
    PR_PRIORITY_URGENT = 3,
    PR_PRIORITY_LAST = 3
} PRThreadPriority;
typedef void (*PRThreadPrivateDTOR) (void *priv);
extern PRStatus PR_ClearInterrupt(void);
extern void *PR_GetThreadPrivate(PRUintn tpdIndex);
extern PRThreadScope PR_GetThreadScope(const PRThread * thread);
extern PRThreadState PR_GetThreadState(const PRThread * thread);
extern PRStatus PR_Interrupt(PRThread * thread);
extern PRStatus PR_NewThreadPrivateIndex(PRUintn * newIndex,
					 PRThreadPrivateDTOR destructor);
extern PRStatus PR_SetThreadPrivate(PRUintn tpIndex, void *priv);
extern PRStatus PR_Sleep(PRIntervalTime ticks);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>nspr4/prtime.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define prtime_h___

typedef PRInt64 PRTime;
typedef struct PRTimeParameters {
    PRInt32 tp_gmt_offset;
    PRInt32 tp_dst_offset;
} PRTimeParameters;
typedef struct PRExplodedTime {
    PRInt32 tm_usec;
    PRInt32 tm_sec;
    PRInt32 tm_min;
    PRInt32 tm_hour;
    PRInt32 tm_mday;
    PRInt32 tm_month;
    PRInt16 tm_year;
    PRInt8 tm_wday;
    PRInt16 tm_yday;
    PRTimeParameters tm_params;
} PRExplodedTime;
typedef PRTimeParameters(*PRTimeParamFn) (const PRExplodedTime * gmt);
extern void PR_ExplodeTime(PRTime usecs, PRTimeParamFn params,
			   PRExplodedTime * expoded);
extern PRUint32 PR_FormatTime(char *buf, int buflen, const char *fmt,
			      const PRExplodedTime * tm);
extern PRTimeParameters PR_GMTParameters(const PRExplodedTime * gmt);
extern PRTime PR_ImplodeTime(const PRExplodedTime * exploded);
extern PRTimeParameters PR_LocalTimeParameters(const PRExplodedTime * gmt);
extern void PR_NormalizeTime(PRExplodedTime * exploded,
			     PRTimeParamFn params);
extern PRTime PR_Now(void);
extern PRStatus PR_ParseTimeString(const char *string,
				   PRBool default_to_gmt, PRTime * result);
extern PRStatus PR_ParseTimeStringToExplodedTime(const char *string,
						 PRBool default_to_gmt,
						 PRExplodedTime * result);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>nspr4/prtypes.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define prtypes_h___

typedef int PRInt32;
typedef unsigned long int PRUword;
typedef int PRIntn;
typedef unsigned long int PRUint64;
typedef unsigned char PRUint8;
typedef short int PRInt16;
typedef long int PRInt64;
typedef PRIntn PRBool;
typedef unsigned short PRUint16;
typedef unsigned int PRUint32;
typedef size_t PRSize;
typedef unsigned int PRUintn;
typedef PRInt64 PROffset64;
typedef PRInt32 PROffset32;
typedef enum {
    PR_FAILURE = -1,
    PR_SUCCESS = 0
} PRStatus;
typedef signed char PRInt8;
</SCREEN>
</SECT2>
</SECT1>
<!-- End of text generated from database -->
