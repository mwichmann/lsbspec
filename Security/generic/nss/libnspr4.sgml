<!-- Start of generated text - do not edit! -->
<!-- generated from the LSB specification database by mklibspec -->
<SECT1 ID=libnspr4>
<TITLE>Interfaces for libnspr4</TITLE>
<PARA>
<XREF LINKEND="lib-libnspr4-def"> defines the library name and shared object name
for the libnspr4 library
</PARA>
<TABLE id="lib-libnspr4-def">
<TITLE>libnspr4 Definition</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Library:</ENTRY>
<ENTRY>libnspr4</ENTRY>
</ROW>
<ROW>
<ENTRY>SONAME:</ENTRY>
<ENTRY>libnspr4.so</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The behavior of the interfaces in this library is specified by the following specifications:<SIMPLELIST COLUMNS=1>
<MEMBER ID='REFSTD.libnspr4.1'>
[NSPR] <XREF LINKEND="std.NSPR">
</MEMBER>
</SIMPLELIST>
</PARA>
<!-- debug: database interface name Netscape Portable Runtime -->
<SECT2>
<!--libgroup-->
<TITLE>Netscape Portable Runtime</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for Netscape Portable Runtime</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic functions
for Netscape Portable Runtime specified in <XREF linkend="tbl-libnspr4-netsc-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<TABLE id="tbl-libnspr4-netsc-ints">
<TITLE>libnspr4 - Netscape Portable Runtime Function Interfaces</TITLE>
<TGROUP COLS=3>
<TBODY>
<ROW>
<ENTRY><indexterm><primary>PR_Accept</primary></indexterm>PR_Accept <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_AcceptRead</primary></indexterm>PR_AcceptRead <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_Bind</primary></indexterm>PR_Bind <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>PR_Cleanup</primary></indexterm>PR_Cleanup <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_Connect</primary></indexterm>PR_Connect <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_CreateIOLayerStub</primary></indexterm>PR_CreateIOLayerStub <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>PR_EnumerateHostEnt</primary></indexterm>PR_EnumerateHostEnt <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_GetConnectStatus</primary></indexterm>PR_GetConnectStatus <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_GetCurrentThread</primary></indexterm>PR_GetCurrentThread <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>PR_GetDefaultIOMethods</primary></indexterm>PR_GetDefaultIOMethods <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_GetError</primary></indexterm>PR_GetError <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_GetHostByAddr</primary></indexterm>PR_GetHostByAddr <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>PR_GetHostByName</primary></indexterm>PR_GetHostByName <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_GetLayersIdentity</primary></indexterm>PR_GetLayersIdentity <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_GetNameForIdentity</primary></indexterm>PR_GetNameForIdentity <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>PR_GetOSError</primary></indexterm>PR_GetOSError <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_GetPeerName</primary></indexterm>PR_GetPeerName <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_GetSockName</primary></indexterm>PR_GetSockName <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>PR_GetSocketOption</primary></indexterm>PR_GetSocketOption <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_GetUniqueIdentity</primary></indexterm>PR_GetUniqueIdentity <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_Interrupt</primary></indexterm>PR_Interrupt <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>PR_Listen</primary></indexterm>PR_Listen <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_NewTCPSocket</primary></indexterm>PR_NewTCPSocket <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_NewUDPSocket</primary></indexterm>PR_NewUDPSocket <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>PR_Now</primary></indexterm>PR_Now <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_Poll</primary></indexterm>PR_Poll <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_PopIOLayer</primary></indexterm>PR_PopIOLayer <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>PR_PushIOLayer</primary></indexterm>PR_PushIOLayer <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_Recv</primary></indexterm>PR_Recv <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_RecvFrom</primary></indexterm>PR_RecvFrom <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>PR_Send</primary></indexterm>PR_Send <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_SendTo</primary></indexterm>PR_SendTo <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_SetSocketOption</primary></indexterm>PR_SetSocketOption <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>PR_Shutdown</primary></indexterm>PR_Shutdown <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY><indexterm><primary>PR_TransmitFile</primary></indexterm>PR_TransmitFile <LINK LINKEND="REFSTD.libnspr4.1">[NSPR]</LINK></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>
</SECT2>
</SECT1>
<!-- empty header file All/nspr4/nspr.h -->
<SECT1 ID=libnspr4-ddefs>
<TITLE>Data Definitions for libnspr4</TITLE>
<PARA>
This section defines global identifiers and their values that are associated
with interfaces contained in libnspr4.
These definitions are organized into groups that
correspond to system headers. This convention is used as a
convenience for the reader, and does not imply the existence
of these headers, or their content.
Where an interface is defined as requiring a particular system header file
all of the data definitions for that system header file presented here shall be in effect.
</PARA>
<PARA>
This section gives data definitions to promote binary application
portability, not to repeat source interface definitions available
elsewhere. System providers and application developers should use this ABI
to supplement - not to replace - source interface definition specifications.
</PARA>
<PARA>
This specification uses the <XREF LINKEND='std.ISOC99'> C Language as the reference programming language, and data definitions are specified in ISO C format. The C language is used here as a convenient notation. Using a C language description of these data objects does not preclude their use by other programming languages.</PARA>
<SECT2>
<TITLE>nspr4/plarena.h</TITLE>
<PARA>
</PARA>
<SCREEN>

typedef struct PLArenaPool {
    struct PLArena first;
    struct PLArena *current;
    PRUint32 arenasize;
    PRUword mask;
} PLArenaPool;
struct PLArena {
    struct PLArena *next;
    PRUword base;
    PRUword limit;
    PRUword avail;
};
</SCREEN>
</SECT2>
<SECT2>
<TITLE>nspr4/plhash.h</TITLE>
<PARA>
</PARA>
<SCREEN>

typedef PRUint32 PLHashNumber;
typedef PRIntn(*PLHashComparator) (const void *, const void *);
typedef struct PLHashAllocOps {
    void *(*allocTable) (void *, PRSize);
    void (*freeTable) (void *, void *);
    struct PLHashEntry *(*allocEntry) (void *, const void *);
    void (*freeEntry) (void *, struct PLHashEntry *, PRUintn);
} PLHashAllocOps;
typedef PLHashNumber(*PLHashFunction) (const void *);
struct PLHashEntry {
    struct PLHashEntry *next;
    PLHashNumber keyHash;
    const void *key;
    void *value;
};
struct PLHashTable {
    struct PLHashEntry **buckets;
    PRUint32 nentries;
    PRUint32 shift;
    PLHashFunction keyHash;
    PLHashComparator keyCompare;
    PLHashComparator valueCompare;
    const PLHashAllocOps *allocOps;
    void *allocPriv;
};
</SCREEN>
</SECT2>
<SECT2>
<TITLE>nspr4/prclist.h</TITLE>
<PARA>
</PARA>
<SCREEN>

typedef struct PRCListStr {
    PRCList *next;
    PRCList *prev;
} PRCList;
</SCREEN>
</SECT2>
<SECT2>
<TITLE>nspr4/prerror.h</TITLE>
<PARA>
</PARA>
<SCREEN>

typedef PRInt32 PRErrorCode;
extern PRInt32 PR_GetOSError(void);
extern PRErrorCode PR_GetError(void);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>nspr4/prinit.h</TITLE>
<PARA>
</PARA>
<SCREEN>

extern PRStatus PR_Cleanup(void);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>nspr4/prinrval.h</TITLE>
<PARA>
</PARA>
<SCREEN>

typedef PRUint32 PRIntervalTime;
</SCREEN>
</SECT2>
<SECT2>
<TITLE>nspr4/prio.h</TITLE>
<PARA>
</PARA>
<SCREEN>

typedef enum PRDescType {
    PR_DESC_FILE = 1,
    PR_DESC_SOCKET_TCP = 2,
    PR_DESC_SOCKET_UDP = 3,
    PR_DESC_LAYERED = 4,
    PR_DESC_PIPE = 5
} PRDescType;
typedef struct PRIPv6Addr {
    union {
	PRUint8 _S6_u8[15];
	PRUint16 _S6_u16[7];
	PRUint32 _S6_u32[3];
	PRUint64 _S6_u64[1];
    } _S6_un;
} PRIPv6Addr;
typedef enum PRTransmitFileFlags {
    PR_TRANSMITFILE_KEEP_OPEN,
    PR_TRANSMITFILE_CLOSE_SOCKET = 1
} PRTransmitFileFlags;
typedef struct PRLinger {
    PRBool polarity;
    PRIntervalTime linger;
} PRLinger;
typedef struct PRFilePrivate PRFilePrivate;
typedef struct PRFileDesc {
    const struct PRIOMethods *methods;
    PRFilePrivate *secret;
    PRFileDesc *lower;
    PRFileDesc *higher;
    void (*dtor) (PRFileDesc *);
    PRDescIdentity identity;
} PRFileDesc;
typedef union PRNetAddr {
    struct {
	PRUint16 family;
	char data[0];
    } raw;
    struct {
	PRUint16 family;
	PRUint16 port;
	PRUint32 ip;
	char pad[7];
    } inet;
    struct {
	PRUint16 family;
	PRUint16 port;
	PRUint32 flowinfo;
	PRIPv6Addr ip;
	PRUint32 scope_id;
    } ipv6;
    struct {
	PRUint16 family;
	char path[103];
    } local;
} PRNetAddr;
typedef struct PRMcastRequest {
    union PRNetAddr mcaddr;
    union PRNetAddr ifaddr;
} PRMcastRequest;
typedef struct PRIOVec {
    char *iov_base;
    int iov_len;
} PRIOVec;
typedef struct PRSocketOptionData {
    PRSockOption option;
    union {
	PRUintn ip_ttl;
	PRUintn mcast_ttl;
	PRUintn tos;
	PRBool non_blocking;
	PRBool reuse_addr;
	PRBool keep_alive;
	PRBool mcast_loopback;
	PRBool no_delay;
	PRBool broadcast;
	PRSize max_segment;
	PRSize recv_buffer_size;
	PRSize send_buffer_size;
	PRLinger linger;
	PRMcastRequest add_member;
	PRMcastRequest drop_member;
	union PRNetAddr mcast_if;
    } value;
} PRSocketOptionData;
typedef PRStatus(*PRFsyncFN) (PRFileDesc *);
typedef PRStatus(*PRListenFN) (PRFileDesc *, PRIntn);
typedef enum PRSeekWhence {
    PR_SEEK_SET,
    PR_SEEK_CUR = 1,
    PR_SEEK_END = 2
} PRSeekWhence;
typedef PRInt32(*PRAcceptreadFN) (PRFileDesc *, PRFileDesc * *,
				  PRNetAddr * *, void *, PRInt32,
				  PRIntervalTime);
typedef PRStatus(*PRCloseFN) (PRFileDesc *);
typedef PRInt32(*PRTransmitfileFN) (PRFileDesc *, PRFileDesc *,
				    const void *, PRInt32,
				    PRTransmitFileFlags, PRIntervalTime);
typedef enum PRSockOption {
    PR_SockOpt_Nonblocking,
    PR_SockOpt_Linger = 1,
    PR_SockOpt_Reuseaddr = 2,
    PR_SockOpt_Keepalive = 3,
    PR_SockOpt_RecvBufferSize = 4,
    PR_SockOpt_SendBufferSize = 5,
    PR_SockOpt_IpTimeToLive = 6,
    PR_SockOpt_IpTypeOfService = 7,
    PR_SockOpt_AddMember = 8,
    PR_SockOpt_DropMember = 9,
    PR_SockOpt_McastInterface = 10,
    PR_SockOpt_McastTimeToLive = 11,
    PR_SockOpt_McastLoopback = 12,
    PR_SockOpt_NoDelay = 13,
    PR_SockOpt_MaxSegment = 14,
    PR_SockOpt_Broadcast = 15,
    PR_SockOpt_Last = 16
} PRSockOption;
typedef PRFileDesc *(*PRAcceptFN) (PRFileDesc *, PRNetAddr *,
				   PRIntervalTime);
typedef PRStatus(*PRConnectcontinueFN) (PRFileDesc *, PRInt16);
typedef PRInt32(*PRReadFN) (PRFileDesc *, void *, PRInt32);
typedef struct PRFileInfo64 {
    PRFileType type;
    PROffset64 size;
    PRTime creationTime;
    PRTime modifyTime;
} PRFileInfo64;
typedef PRStatus(*PRGetsocketoptionFN) (PRFileDesc *,
					PRSocketOptionData *);
typedef PRInt32(*PRSendtoFN) (PRFileDesc *, const void *, PRInt32, PRIntn,
			      const PRNetAddr *, PRIntervalTime);
typedef PRStatus(*PRGetsocknameFN) (PRFileDesc *, PRNetAddr *);
typedef PRInt32(*PRSendFN) (PRFileDesc *, const void *, PRInt32, PRIntn,
			    PRIntervalTime);
typedef PROffset32(*PRSeekFN) (PRFileDesc *, PROffset32, PRSeekWhence);
typedef PRInt64(*PRAvailable64FN) (PRFileDesc *);
typedef PRInt32(*PRAvailableFN) (PRFileDesc *);
typedef struct PRFileInfo {
    PRFileType type;
    PROffset32 size;
    PRTime creationTime;
    PRTime modifyTime;
} PRFileInfo;
typedef PROffset64(*PRSeek64FN) (PRFileDesc *, PROffset64, PRSeekWhence);
typedef PRStatus(*PRSetsocketoptionFN) (PRFileDesc *,
					const PRSocketOptionData *);
typedef PRInt32(*PRRecvFN) (PRFileDesc *, void *, PRInt32, PRIntn,
			    PRIntervalTime);
typedef struct PRSendFileData {
    PRFileDesc *fd;
    PRUint32 file_offset;
    PRSize file_nbytes;
    const void *header;
    PRInt32 hlen;
    const void *trailer;
    PRInt32 tlen;
} PRSendFileData;
typedef PRIntn PRDescIdentity;
typedef PRStatus(*PRConnectFN) (PRFileDesc *, const PRNetAddr *,
				PRIntervalTime);
typedef PRInt32(*PRSendfileFN) (PRFileDesc *, PRSendFileData *,
				PRTransmitFileFlags, PRIntervalTime);
typedef PRInt32(*PRRecvfromFN) (PRFileDesc *, void *, PRInt32, PRIntn,
				PRNetAddr *, PRIntervalTime);
typedef struct PRPollDesc {
    PRFileDesc *fd;
    PRInt16 in_flags;
    PRInt16 out_flags;
} PRPollDesc;
typedef PRInt32(*PRWriteFN) (PRFileDesc *, const void *, PRInt32);
typedef PRStatus(*PRFileInfo64FN) (PRFileDesc *, PRFileInfo64 *);
typedef PRStatus(*PRShutdownFN) (PRFileDesc *, PRIntn);
typedef PRIntn(*PRReservedFN) (PRFileDesc *);
typedef PRStatus(*PRFileInfoFN) (PRFileDesc *, PRFileInfo *);
typedef PRInt32(*PRWritevFN) (PRFileDesc *, const PRIOVec *, PRInt32,
			      PRIntervalTime);
typedef enum PRFileType {
    PR_FILE_FILE = 1,
    PR_FILE_DIRECTORY = 2,
    PR_FILE_OTHER = 3
} PRFileType;
typedef PRStatus(*PRBindFN) (PRFileDesc *, const PRNetAddr *);
typedef PRInt16(*PRPollFN) (PRFileDesc *, PRInt16, PRInt16 *);
struct PRIOMethods {
    PRDescType file_type;
    PRCloseFN close;
    PRReadFN read;
    PRWriteFN write;
    PRAvailableFN available;
    PRAvailable64FN available64;
    PRFsyncFN fsync;
    PRSeekFN seek;
    PRSeek64FN seek64;
    PRFileInfoFN fileInfo;
    PRFileInfo64FN fileInfo64;
    PRWritevFN writev;
    PRConnectFN connect;
    PRAcceptFN accept;
    PRBindFN bind;
    PRListenFN listen;
    PRShutdownFN shutdown;
    PRRecvFN recv;
    PRSendFN send;
    PRRecvfromFN recvfrom;
    PRSendtoFN sendto;
    PRPollFN poll;
    PRAcceptreadFN acceptread;
    PRTransmitfileFN transmitfile;
    PRGetsocknameFN getsockname;
    PRGetpeernameFN getpeername;
    PRReservedFN reserved_fn_6;
    PRReservedFN reserved_fn_5;
    PRGetsocketoptionFN getsocketoption;
    PRSetsocketoptionFN setsocketoption;
    PRSendfileFN sendfile;
    PRConnectcontinueFN connectcontinue;
    PRReservedFN reserved_fn_3;
    PRReservedFN reserved_fn_2;
    PRReservedFN reserved_fn_1;
    PRReservedFN reserved_fn_0;
};
typedef PRStatus(*PRGetpeernameFN) (PRFileDesc *, PRNetAddr *);
typedef enum PRShutdownHow {
    PR_SHUTDOWN_RCV,
    PR_SHUTDOWN_SEND = 1,
    PR_SHUTDOWN_BOTH = 2
} PRShutdownHow;
extern PRFileDesc *PR_NewUDPSocket(void);
extern PRFileDesc *PR_NewTCPSocket(void);
extern PRStatus PR_Connect(PRFileDesc *, const PRNetAddr *,
			   PRIntervalTime);
extern PRFileDesc *PR_Accept(PRFileDesc *, PRNetAddr *, PRIntervalTime);
extern PRStatus PR_Bind(PRFileDesc *, const PRNetAddr *);
extern PRStatus PR_Listen(PRFileDesc *, PRIntn);
extern PRStatus PR_Shutdown(PRFileDesc *, PRShutdownHow);
extern PRStatus PR_SetSocketOption(PRFileDesc *,
				   const PRSocketOptionData *);
extern PRStatus PR_GetSocketOption(PRFileDesc *, PRSocketOptionData *);
extern PRStatus PR_GetSockName(PRFileDesc *, PRNetAddr *);
extern PRStatus PR_GetPeerName(PRFileDesc *, PRNetAddr *);
extern PRInt32 PR_Poll(PRPollDesc *, PRIntn, PRIntervalTime);
extern PRStatus PR_GetConnectStatus(const PRPollDesc *);
extern PRDescIdentity PR_GetUniqueIdentity(const char *);
extern const char *PR_GetNameForIdentity(PRDescIdentity);
extern PRDescIdentity PR_GetLayersIdentity(PRFileDesc *);
extern const struct PRIOMethods *PR_GetDefaultIOMethods(void);
extern PRFileDesc *PR_CreateIOLayerStub(PRDescIdentity,
					const struct PRIOMethods *);
extern PRStatus PR_PushIOLayer(PRFileDesc *, PRDescIdentity, PRFileDesc *);
extern PRFileDesc *PR_PopIOLayer(PRFileDesc *, PRDescIdentity);
extern PRInt32 PR_Recv(PRFileDesc *, void *, PRInt32, PRIntn,
		       PRIntervalTime);
extern PRInt32 PR_Send(PRFileDesc *, const void *, PRInt32, PRIntn,
		       PRIntervalTime);
extern PRInt32 PR_RecvFrom(PRFileDesc *, void *, PRInt32, PRIntn,
			   PRNetAddr *, PRIntervalTime);
extern PRInt32 PR_SendTo(PRFileDesc *, const void *, PRInt32, PRIntn,
			 const PRNetAddr *, PRIntervalTime);
extern PRInt32 PR_TransmitFile(PRFileDesc *, PRFileDesc *, const void *,
			       PRInt32, PRTransmitFileFlags,
			       PRIntervalTime);
extern PRInt32 PR_AcceptRead(PRFileDesc *, PRFileDesc * *, PRNetAddr * *,
			     void *, PRInt32, PRIntervalTime);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>nspr4/prlock.h</TITLE>
<PARA>
</PARA>
<SCREEN>

typedef struct PRLock PRLock;
</SCREEN>
</SECT2>
<SECT2>
<TITLE>nspr4/prmon.h</TITLE>
<PARA>
</PARA>
<SCREEN>

typedef struct PRMonitor PRMonitor;
</SCREEN>
</SECT2>
<SECT2>
<TITLE>nspr4/prnetdb.h</TITLE>
<PARA>
</PARA>
<SCREEN>

typedef struct PRHostEnt {
    char *h_name;
    char **h_aliases;
    PRInt32 h_addrtype;
    PRInt32 h_length;
    char **h_addr_list;
} PRHostEnt;
extern PRStatus PR_GetHostByName(const char *, char *, PRIntn,
				 PRHostEnt *);
extern PRStatus PR_GetHostByAddr(const PRNetAddr *, char *, PRIntn,
				 PRHostEnt *);
extern PRIntn PR_EnumerateHostEnt(PRIntn, const PRHostEnt *, PRUint16,
				  PRNetAddr *);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>nspr4/prthread.h</TITLE>
<PARA>
</PARA>
<SCREEN>

typedef struct PRThread PRThread;
extern PRThread *PR_GetCurrentThread(void);
extern PRStatus PR_Interrupt(PRThread *);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>nspr4/prtime.h</TITLE>
<PARA>
</PARA>
<SCREEN>

typedef PRInt64 PRTime;
extern PRTime PR_Now(void);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>nspr4/prtypes.h</TITLE>
<PARA>
</PARA>
<SCREEN>

typedef int PRInt32;
typedef unsigned long int PRUword;
typedef int PRIntn;
typedef unsigned long int PRUint64;
typedef unsigned char PRUint8;
typedef short int PRInt16;
typedef long int PRInt64;
typedef PRIntn PRBool;
typedef unsigned short PRUint16;
typedef unsigned int PRUint32;
typedef size_t PRSize;
typedef unsigned int PRUintn;
typedef PRInt64 PROffset64;
typedef PRInt32 PROffset32;
typedef enum {
    PR_FAILURE = -1,
    PR_SUCCESS
} PRStatus;
</SCREEN>
</SECT2>
</SECT1>
<!-- End of text generated from database -->
