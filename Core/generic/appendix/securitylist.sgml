<!-- Start of generated text - do not edit! -->
<!-- generated from the LSB specification database by mklibapnd -->
<sect1 id=app-libnspr4>
<title>libnspr4</title>
<para>
</para>
<para>
The behavior of the interfaces in this library is specified by the following Standards.<simplelist columns=1>
<member>
<xref linkend="std.NSPR"> [NSPR]
</member>
</simplelist>
</para>
<table>
<title>libnspr4 Function Interfaces</title>
<tgroup cols=3>
<tbody>
<row><entry>PR_Abort<link linkend="std.NSPR">[NSPR]</link></entry><entry>PR_GetErrorTextLength<link linkend="std.NSPR">[NSPR]</link></entry><entry>PR_NotifyAllCondVar<link linkend="std.NSPR">[NSPR]</link></entry></row>
<row><entry>PR_Accept<link linkend="std.NSPR">[NSPR]</link></entry><entry>PR_GetLayersIdentity<link linkend="std.NSPR">[NSPR]</link></entry><entry>PR_NotifyCondVar<link linkend="std.NSPR">[NSPR]</link></entry></row>
<row><entry>PR_AtomicAdd<link linkend="std.NSPR">[NSPR]</link></entry><entry>PR_GetOSError<link linkend="std.NSPR">[NSPR]</link></entry><entry>PR_Now<link linkend="std.NSPR">[NSPR]</link></entry></row>
<row><entry>PR_AtomicDecrement<link linkend="std.NSPR">[NSPR]</link></entry><entry>PR_GetSocketOption<link linkend="std.NSPR">[NSPR]</link></entry><entry>PR_Open<link linkend="std.NSPR">[NSPR]</link></entry></row>
<row><entry>PR_AtomicIncrement<link linkend="std.NSPR">[NSPR]</link></entry><entry>PR_GetThreadPrivate<link linkend="std.NSPR">[NSPR]</link></entry><entry>PR_OpenTCPSocket<link linkend="std.NSPR">[NSPR]</link></entry></row>
<row><entry>PR_AtomicSet<link linkend="std.NSPR">[NSPR]</link></entry><entry>PR_GetThreadScope<link linkend="std.NSPR">[NSPR]</link></entry><entry>PR_OpenUDPSocket<link linkend="std.NSPR">[NSPR]</link></entry></row>
<row><entry>PR_Bind<link linkend="std.NSPR">[NSPR]</link></entry><entry>PR_GetThreadState<link linkend="std.NSPR">[NSPR]</link></entry><entry>PR_ParseTimeString<link linkend="std.NSPR">[NSPR]</link></entry></row>
<row><entry>PR_Calloc<link linkend="std.NSPR">[NSPR]</link></entry><entry>PR_GetUniqueIdentity<link linkend="std.NSPR">[NSPR]</link></entry><entry>PR_ParseTimeStringToExplodedTime<link linkend="std.NSPR">[NSPR]</link></entry></row>
<row><entry>PR_Cleanup<link linkend="std.NSPR">[NSPR]</link></entry><entry>PR_ImplodeTime<link linkend="std.NSPR">[NSPR]</link></entry><entry>PR_Poll<link linkend="std.NSPR">[NSPR]</link></entry></row>
<row><entry>PR_ClearInterrupt<link linkend="std.NSPR">[NSPR]</link></entry><entry>PR_ImportTCPSocket<link linkend="std.NSPR">[NSPR]</link></entry><entry>PR_PopIOLayer<link linkend="std.NSPR">[NSPR]</link></entry></row>
<row><entry>PR_Close<link linkend="std.NSPR">[NSPR]</link></entry><entry>PR_Init<link linkend="std.NSPR">[NSPR]</link></entry><entry>PR_ProcessExit<link linkend="std.NSPR">[NSPR]</link></entry></row>
<row><entry>PR_Connect<link linkend="std.NSPR">[NSPR]</link></entry><entry>PR_Initialize<link linkend="std.NSPR">[NSPR]</link></entry><entry>PR_PushIOLayer<link linkend="std.NSPR">[NSPR]</link></entry></row>
<row><entry>PR_ConnectContinue<link linkend="std.NSPR">[NSPR]</link></entry><entry>PR_InitializeNetAddr<link linkend="std.NSPR">[NSPR]</link></entry><entry>PR_Read<link linkend="std.NSPR">[NSPR]</link></entry></row>
<row><entry>PR_ConvertIPv4AddrToIPv6<link linkend="std.NSPR">[NSPR]</link></entry><entry>PR_Initialized<link linkend="std.NSPR">[NSPR]</link></entry><entry>PR_Realloc<link linkend="std.NSPR">[NSPR]</link></entry></row>
<row><entry>PR_CreateIOLayerStub<link linkend="std.NSPR">[NSPR]</link></entry><entry>PR_Interrupt<link linkend="std.NSPR">[NSPR]</link></entry><entry>PR_Recv<link linkend="std.NSPR">[NSPR]</link></entry></row>
<row><entry>PR_CreatePipe<link linkend="std.NSPR">[NSPR]</link></entry><entry>PR_IntervalNow<link linkend="std.NSPR">[NSPR]</link></entry><entry>PR_RecvFrom<link linkend="std.NSPR">[NSPR]</link></entry></row>
<row><entry>PR_DestroyCondVar<link linkend="std.NSPR">[NSPR]</link></entry><entry>PR_IntervalToMicroseconds<link linkend="std.NSPR">[NSPR]</link></entry><entry>PR_SecondsToInterval<link linkend="std.NSPR">[NSPR]</link></entry></row>
<row><entry>PR_DestroyLock<link linkend="std.NSPR">[NSPR]</link></entry><entry>PR_IntervalToMilliseconds<link linkend="std.NSPR">[NSPR]</link></entry><entry>PR_Send<link linkend="std.NSPR">[NSPR]</link></entry></row>
<row><entry>PR_EnumerateAddrInfo<link linkend="std.NSPR">[NSPR]</link></entry><entry>PR_IntervalToSeconds<link linkend="std.NSPR">[NSPR]</link></entry><entry>PR_SendTo<link linkend="std.NSPR">[NSPR]</link></entry></row>
<row><entry>PR_ExplodeTime<link linkend="std.NSPR">[NSPR]</link></entry><entry>PR_Listen<link linkend="std.NSPR">[NSPR]</link></entry><entry>PR_SetError<link linkend="std.NSPR">[NSPR]</link></entry></row>
<row><entry>PR_FormatTime<link linkend="std.NSPR">[NSPR]</link></entry><entry>PR_LocalTimeParameters<link linkend="std.NSPR">[NSPR]</link></entry><entry>PR_SetErrorText<link linkend="std.NSPR">[NSPR]</link></entry></row>
<row><entry>PR_Free<link linkend="std.NSPR">[NSPR]</link></entry><entry>PR_Lock<link linkend="std.NSPR">[NSPR]</link></entry><entry>PR_SetSocketOption<link linkend="std.NSPR">[NSPR]</link></entry></row>
<row><entry>PR_FreeAddrInfo<link linkend="std.NSPR">[NSPR]</link></entry><entry>PR_Malloc<link linkend="std.NSPR">[NSPR]</link></entry><entry>PR_SetThreadPrivate<link linkend="std.NSPR">[NSPR]</link></entry></row>
<row><entry>PR_GMTParameters<link linkend="std.NSPR">[NSPR]</link></entry><entry>PR_MicrosecondsToInterval<link linkend="std.NSPR">[NSPR]</link></entry><entry>PR_Shutdown<link linkend="std.NSPR">[NSPR]</link></entry></row>
<row><entry>PR_GetAddrInfoByName<link linkend="std.NSPR">[NSPR]</link></entry><entry>PR_MillisecondsToInterval<link linkend="std.NSPR">[NSPR]</link></entry><entry>PR_Sleep<link linkend="std.NSPR">[NSPR]</link></entry></row>
<row><entry>PR_GetCanonNameFromAddrInfo<link linkend="std.NSPR">[NSPR]</link></entry><entry>PR_NetAddrToString<link linkend="std.NSPR">[NSPR]</link></entry><entry>PR_StringToNetAddr<link linkend="std.NSPR">[NSPR]</link></entry></row>
<row><entry>PR_GetDefaultIOMethods<link linkend="std.NSPR">[NSPR]</link></entry><entry>PR_NewCondVar<link linkend="std.NSPR">[NSPR]</link></entry><entry>PR_TicksPerSecond<link linkend="std.NSPR">[NSPR]</link></entry></row>
<row><entry>PR_GetDescType<link linkend="std.NSPR">[NSPR]</link></entry><entry>PR_NewLock<link linkend="std.NSPR">[NSPR]</link></entry><entry>PR_Unlock<link linkend="std.NSPR">[NSPR]</link></entry></row>
<row><entry>PR_GetError<link linkend="std.NSPR">[NSPR]</link></entry><entry>PR_NewThreadPrivateIndex<link linkend="std.NSPR">[NSPR]</link></entry><entry>PR_WaitCondVar<link linkend="std.NSPR">[NSPR]</link></entry></row>
<row><entry>PR_GetErrorText<link linkend="std.NSPR">[NSPR]</link></entry><entry>PR_NormalizeTime<link linkend="std.NSPR">[NSPR]</link></entry><entry>PR_Write<link linkend="std.NSPR">[NSPR]</link></entry></row>
</tbody>
</tgroup>
</table>
</sect1>
<sect1 id=app-libnss3>
<title>libnss3</title>
<para>
</para>
<para>
The behavior of the interfaces in this library is specified by the following Standards.<simplelist columns=1>
<member>
<xref linkend="std.NSS.SSL"> [NSS SSL]
</member>
</simplelist>
</para>
<table>
<title>libnss3 Function Interfaces</title>
<tgroup cols=3>
<tbody>
<row><entry>CERT_CheckCertValidTimes(NSS_3.2)<link linkend="std.NSS.SSL">[NSS SSL]</link></entry><entry>CERT_VerifyCertNow(NSS_3.2)<link linkend="std.NSS.SSL">[NSS SSL]</link></entry><entry>PK11_GetSlotName(NSS_3.2)<link linkend="std.NSS.SSL">[NSS SSL]</link></entry></row>
<row><entry>CERT_DestroyCertificate(NSS_3.2)<link linkend="std.NSS.SSL">[NSS SSL]</link></entry><entry>NSS_Init(NSS_3.2)<link linkend="std.NSS.SSL">[NSS SSL]</link></entry><entry>PK11_GetTokenName(NSS_3.2)<link linkend="std.NSS.SSL">[NSS SSL]</link></entry></row>
<row><entry>CERT_DupCertificate(NSS_3.2)<link linkend="std.NSS.SSL">[NSS SSL]</link></entry><entry>NSS_InitReadWrite(NSS_3.2)<link linkend="std.NSS.SSL">[NSS SSL]</link></entry><entry>PK11_IsHW(NSS_3.2)<link linkend="std.NSS.SSL">[NSS SSL]</link></entry></row>
<row><entry>CERT_FreeNicknames(NSS_3.2)<link linkend="std.NSS.SSL">[NSS SSL]</link></entry><entry>NSS_NoDB_Init(NSS_3.2)<link linkend="std.NSS.SSL">[NSS SSL]</link></entry><entry>PK11_IsPresent(NSS_3.2)<link linkend="std.NSS.SSL">[NSS SSL]</link></entry></row>
<row><entry>CERT_GetCertNicknames(NSS_3.2)<link linkend="std.NSS.SSL">[NSS SSL]</link></entry><entry>NSS_Shutdown(NSS_3.2)<link linkend="std.NSS.SSL">[NSS SSL]</link></entry><entry>PK11_IsReadOnly(NSS_3.2)<link linkend="std.NSS.SSL">[NSS SSL]</link></entry></row>
<row><entry>CERT_GetDefaultCertDB(NSS_3.2)<link linkend="std.NSS.SSL">[NSS SSL]</link></entry><entry>PK11_FindCertFromNickname(NSS_3.2)<link linkend="std.NSS.SSL">[NSS SSL]</link></entry><entry>PK11_SetPasswordFunc(NSS_3.2)<link linkend="std.NSS.SSL">[NSS SSL]</link></entry></row>
<row><entry>CERT_VerifyCertName(NSS_3.2)<link linkend="std.NSS.SSL">[NSS SSL]</link></entry><entry>PK11_FindKeyByAnyCert(NSS_3.2)<link linkend="std.NSS.SSL">[NSS SSL]</link></entry><entry>SECKEY_DestroyPrivateKey(NSS_3.2)<link linkend="std.NSS.SSL">[NSS SSL]</link></entry></row>
</tbody>
</tgroup>
</table>
</sect1>
<sect1 id=app-libssl3>
<title>libssl3</title>
<para>
</para>
<para>
The behavior of the interfaces in this library is specified by the following Standards.<simplelist columns=1>
<member>
<xref linkend="std.NSS.SSL"> [NSS SSL]
</member>
</simplelist>
</para>
<table>
<title>libssl3 Function Interfaces</title>
<tgroup cols=3>
<tbody>
<row><entry>NSS_CmpCertChainWCANames(NSS_3.2)<link linkend="std.NSS.SSL">[NSS SSL]</link></entry><entry>SSL_ConfigMPServerSIDCache(NSS_3.2)<link linkend="std.NSS.SSL">[NSS SSL]</link></entry><entry>SSL_OptionSet(NSS_3.2)<link linkend="std.NSS.SSL">[NSS SSL]</link></entry></row>
<row><entry>NSS_FindCertKEAType(NSS_3.2)<link linkend="std.NSS.SSL">[NSS SSL]</link></entry><entry>SSL_ConfigSecureServer(NSS_3.2)<link linkend="std.NSS.SSL">[NSS SSL]</link></entry><entry>SSL_OptionSetDefault(NSS_3.2)<link linkend="std.NSS.SSL">[NSS SSL]</link></entry></row>
<row><entry>NSS_GetClientAuthData(NSS_3.2)<link linkend="std.NSS.SSL">[NSS SSL]</link></entry><entry>SSL_ConfigServerSessionIDCache(NSS_3.2)<link linkend="std.NSS.SSL">[NSS SSL]</link></entry><entry>SSL_PeerCertificate(NSS_3.2)<link linkend="std.NSS.SSL">[NSS SSL]</link></entry></row>
<row><entry>SSL_AuthCertificate(NSS_3.2)<link linkend="std.NSS.SSL">[NSS SSL]</link></entry><entry>SSL_DataPending(NSS_3.2)<link linkend="std.NSS.SSL">[NSS SSL]</link></entry><entry>SSL_ReHandshake(NSS_3.2)<link linkend="std.NSS.SSL">[NSS SSL]</link></entry></row>
<row><entry>SSL_AuthCertificateHook(NSS_3.2)<link linkend="std.NSS.SSL">[NSS SSL]</link></entry><entry>SSL_ForceHandshake(NSS_3.2)<link linkend="std.NSS.SSL">[NSS SSL]</link></entry><entry>SSL_ResetHandshake(NSS_3.2)<link linkend="std.NSS.SSL">[NSS SSL]</link></entry></row>
<row><entry>SSL_BadCertHook(NSS_3.2)<link linkend="std.NSS.SSL">[NSS SSL]</link></entry><entry>SSL_GetClientAuthDataHook(NSS_3.2)<link linkend="std.NSS.SSL">[NSS SSL]</link></entry><entry>SSL_RevealPinArg(NSS_3.2)<link linkend="std.NSS.SSL">[NSS SSL]</link></entry></row>
<row><entry>SSL_CipherPolicyGet(NSS_3.2)<link linkend="std.NSS.SSL">[NSS SSL]</link></entry><entry>SSL_GetSessionID(NSS_3.2)<link linkend="std.NSS.SSL">[NSS SSL]</link></entry><entry>SSL_RevealURL(NSS_3.2)<link linkend="std.NSS.SSL">[NSS SSL]</link></entry></row>
<row><entry>SSL_CipherPolicySet(NSS_3.2)<link linkend="std.NSS.SSL">[NSS SSL]</link></entry><entry>SSL_HandshakeCallback(NSS_3.2)<link linkend="std.NSS.SSL">[NSS SSL]</link></entry><entry>SSL_SecurityStatus(NSS_3.2)<link linkend="std.NSS.SSL">[NSS SSL]</link></entry></row>
<row><entry>SSL_CipherPrefGet(NSS_3.2)<link linkend="std.NSS.SSL">[NSS SSL]</link></entry><entry>SSL_ImportFD(NSS_3.2)<link linkend="std.NSS.SSL">[NSS SSL]</link></entry><entry>SSL_SetPKCS11PinArg(NSS_3.2)<link linkend="std.NSS.SSL">[NSS SSL]</link></entry></row>
<row><entry>SSL_CipherPrefGetDefault(NSS_3.2)<link linkend="std.NSS.SSL">[NSS SSL]</link></entry><entry>SSL_InheritMPServerSIDCache(NSS_3.2)<link linkend="std.NSS.SSL">[NSS SSL]</link></entry><entry>SSL_SetSockPeerID(NSS_3.2)<link linkend="std.NSS.SSL">[NSS SSL]</link></entry></row>
<row><entry>SSL_CipherPrefSet(NSS_3.2)<link linkend="std.NSS.SSL">[NSS SSL]</link></entry><entry>SSL_InvalidateSession(NSS_3.2)<link linkend="std.NSS.SSL">[NSS SSL]</link></entry><entry>SSL_SetURL(NSS_3.2)<link linkend="std.NSS.SSL">[NSS SSL]</link></entry></row>
<row><entry>SSL_CipherPrefSetDefault(NSS_3.2)<link linkend="std.NSS.SSL">[NSS SSL]</link></entry><entry>SSL_OptionGet(NSS_3.2)<link linkend="std.NSS.SSL">[NSS SSL]</link></entry><entry></entry></row>
<row><entry>SSL_ClearSessionCache(NSS_3.2)<link linkend="std.NSS.SSL">[NSS SSL]</link></entry><entry>SSL_OptionGetDefault(NSS_3.2)<link linkend="std.NSS.SSL">[NSS SSL]</link></entry><entry></entry></row>
</tbody>
</tgroup>
</table>
</sect1>
<!-- End of text generated from database -->
