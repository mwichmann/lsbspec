#!/usr/bin/perl

use Getopt::Long;
use Mysql;

use Env qw(LSBUSER LSBDBPASSWD LSBDB LSBDBHOST);

sub usage()
{
print STDERR "mklibapdn -a <archname> [-m module]\n";
die;
}

sub makeid($)
{
	my ($name) = @_;
	$name =~ s/\s+/./g;
	$name =~ s/[^A-Za-z0-9.]+/./g;
	# finally, remove any repeated . (e.g. "RPC...XDR" which arose from "RPC & XDR")
	$name =~ s/\.\.+/./g;
	return $name;
}

# Uncomment to trace SQL statments
#$trace=1;

#
# 1) process the arguments
#
GetOptions("a=s" => \$archname,
           "m=s" => \$module);

if( !$archname ) { usage(); }

#
# 2) Establish connection to the database
#
$Dbh = Mysql->connect($LSBDBHOST,$LSBDB,$LSBUSER, $LSBDBPASSWD) || die $Mysql::db_errstr;

#
# 3) get & print the architecture info
#
$select = "SELECT * FROM Architecture WHERE ";
$select.= "Architecture.Aname=".$Dbh->quote($archname);
print STDERR $select,"\n" if $trace;
$sth = $Dbh->query($select) || die $select."\n".$Dbh->errmsg();

%entry=$sth->fetchhash;
$Aid=$entry{'Aid'};
$Aname=$entry{'Aname'};

printf("<!-- Start of text generated from database -->\n");
printf("<!-- generated from the LSB specification database -->\n");
printf("<!--    by \$Header: /home/mats.deb/cvsrepo/lsb/lsbspec.smaller/mklibapnd,v 1.19 2005-10-26 23:35:28 nick Exp $- -->\n");
my $now_string = localtime;
printf("<!--    at %s -->\n", $now_string );

print "<APPENDIX ID=app-A>\n";
print "<TITLE>Alphabetical Listing of Interfaces</TITLE>\n";
print "<PARA>\n";
print "</PARA>\n";
#
# 4) get & print the library info
#
$select = "SELECT * FROM Library ";
if( $module ) {
	$select.= "LEFT JOIN ModLib ON MLlid=Lid ";
	$select.= "LEFT JOIN Module ON MLmid=Mid ";
}
$select.= "WHERE Library.Lstd='Yes' ";
if( $module ) {
	$select.= "AND Mname='".$module."' ";
}
$select.= "AND Library.Lname!='libstdcxx' ";
$select.= "ORDER BY Lname ";
print STDERR $select,"\n" if $trace;
$lth = $Dbh->query($select) || die $select."\n".$Dbh->errmsg();
for(1..$lth->numrows) {

%entry=$lth->fetchhash;
$Lid=$entry{'Lid'};
$Lname=$entry{'Lname'};

$select = "SELECT Iname,Istandard,Vname,Sname ";
$select.= "FROM Interface,LGInt,LibGroup ";
$select.= "LEFT JOIN Version ON Vid=Iversion ";
$select.= "LEFT JOIN Standard ON Sid=Istandard ";
$select.= "WHERE Iid=LGIint AND LGIlibg=LGid AND Itype='Function' ";
$select.= "AND LGlib=$Lid AND Iarch=$Aid AND Istatus='Included' ";
$select.= "ORDER BY Iname";
$inh = $Dbh->query($select) || die $select."\n".$Dbh->errmsg();
if( $inh->numrows == 0) { next; }

print "<SECT1 ID=app-", $Lname, ">\n";
print "<TITLE>", $Lname, "</TITLE>\n";
print "<PARA>\n";
print "</PARA>\n";

#
# 6) Get a list of the Standards that are used by this library
#
print "<PARA>\n";
$select = "SELECT DISTINCT Sname,Sid FROM Standard,LibGroup,LGInt,Interface ";
$select.= "WHERE Sid=Istandard AND Iid=LGIint AND LGIlibg=LGid ";
$select.= "AND LGlib=$Lid AND Iarch=$Aid ORDER BY Sname";
print STDERR $select,"\n" if $trace;
$lsh = $Dbh->query($select) || die $select."\n".$Dbh->errmsg();
local @refname;
if( $lsh->numrows) {
	print "The behavior of the interfaces in this library is specified ";
	print "by the following Standards.";
	print "<SIMPLELIST COLUMNS=1>\n";
	for(1..$lsh->numrows) {
		local(*entry);
		%entry=$lsh->fetchhash;
		$refname[$_] = $entry{'Sname'};
		print "<MEMBER>\n";
		printf "<XREF LINKEND=\"STD.%s\"> [%s]\n", 
			makeid($entry{'Sname'}), $entry{'Sname'};
		print "</MEMBER>\n";
		}
	print "</SIMPLELIST>\n";
	}
print "</PARA>\n";
print "<TABLE>\n";
print "<TITLE>$Lname Function Interfaces</TITLE>\n";
print "<TGROUP COLS=3>\n";
print "<TBODY>\n";

#
# 7) Get a list of the interfaces in the library
#
{
	local(*std);
	local(*symver);
	local(*entry);
	local(*xrefs);
	local(*refs);
	# we did the following query back at step 4, 
	# and the results are still there waiting to be fetched ...
	#$select = "SELECT Iname,Istandard,Vname,Sname ";
	#$select.= "FROM Interface,LGInt,LibGroup ";
	#$select.= "LEFT JOIN Version ON Vid=Iversion ";
	#$select.= "LEFT JOIN Standard ON Sid=Istandard ";
	#$select.= "WHERE Iid=LGIint AND LGIlibg=LGid AND Itype='Function' ";
	#$select.= "AND LGlib=$Lid AND Iarch=$Aid AND Istatus='Included' ";
	#$select.= "ORDER BY Iname";
	#$inh = $Dbh->query($select) || die $select."\n".$Dbh->errmsg();
	print STDERR $select,"\n" if $trace;
	for(1..$inh->numrows) {
		%entry=$inh->fetchhash;
		$entry[$_]=$entry{'Iname'};
		$std[$_]=$entry{'Istandard'};
		$xrefs[$_]=sprintf ("std.%s", makeid($entry{'Sname'}));
		$refs[$_]=sprintf "[%s]", $entry{'Sname'};
		$symver[$_]=$entry{'Vname'};
	}
	# we now have @entry, an array of interface names
	# @std, an array of Standards (by Sid),
	# @refs, an array of xref labels to the standards in the normative refs,
	# and @symver, an array of symbol versions
	#
	#
	# this is a three column table
	#
	# inc is the last row number ...
	$inc=int(($inh->numrows+2)/3);
	for(1..$inc) {
		print "<ROW>";
		printf "<ENTRY>%s", $entry[$_];
		if( $symver[$_] ) {
			printf "(%s)", $symver[$_];
		}
		if( $std[$_] ) {
			printf "<LINK LINKEND=\"%s\">%s</LINK>", $xrefs[$_], $refs[$_];
		}
		printf "</ENTRY>";
		printf "<ENTRY>%s", $entry[$_+$inc];
		if( $symver[$_+$inc] ) {
			printf "(%s)", $symver[$_];
		}
		if( $std[$_+$inc] ) {
			printf "<LINK LINKEND=\"%s\">%s</LINK>", $xrefs[$_+$inc], $refs[$_+$inc];
		}
		printf "</ENTRY>";
		printf "<ENTRY>%s", $entry[$_+(2*$inc)];
		if( $symver[$_+(2*$inc)] ) {
			printf "(%s)", $symver[$_];
		}
		if( $std[$_+(2*$inc)] ) {
			printf "<LINK LINKEND=\"%s\">%s</LINK>", $xrefs[$_+(2*$inc)], $refs[$_+(2*$inc)];
		}
		printf "</ENTRY>";
		print "</ROW>\n";
	}
}

print "</TBODY>\n";
print "</TGROUP>\n";
print "</TABLE>\n";
#
# 8) Make a table of data interfaces
#
{
	local(*datasym);
	local(*symver);
	local(*std);
	local(*xrefs);
	local(*refs);
	$select = "SELECT Iname,Istandard,Vname,Sname ";
	$select.= "FROM Interface,LGInt,LibGroup ";
	$select.= "LEFT JOIN Version ON Vid=Iversion ";
	$select.= "LEFT JOIN Standard ON Sid=Istandard ";
	$select.= "WHERE Iid=LGIint AND LGIlibg=LGid AND Itype='Data' ";
	$select.= "AND LGlib=$Lid AND Iarch=$Aid AND Istatus='Included' ";
	$select.= "ORDER BY Iname";
	print STDERR $select,"\n" if $trace;
	$sth = $Dbh->query($select) || die $select."\n".$Dbh->errmsg();
	if ($sth->numrows > 0 ) {
		for(1..$sth->numrows) {
			%datasym=$sth->fetchhash;
			$datasym[$_]=$datasym{'Iname'};
			$std[$_]=$datasym{'Istandard'};
			$xrefs[$_]=sprintf ("std.%s", makeid($datasym{'Sname'}));
			$symver[$_]=$datasym{'Vname'};
		}
		print "<TABLE>\n";
		print "<TITLE>$Lname Data Interfaces</TITLE>\n";
		print "<TGROUP COLS=3>\n";
		print "<TBODY>\n";
		$inc=($sth->numrows+2)/3;
		for(1..$inc) {
			print "<ROW>";
			printf "<ENTRY>%s",$datasym[$_];
			if( $datasym[$_] && $std[$_] ) {
				printf "<LINK LINKEND=\"%s\">%s</LINK>", $xrefs[$_], $refs{$xrefs[$_]};
			}
			printf "</ENTRY>";
			printf "<ENTRY>%s",$datasym[$_+$inc];
			if( $datasym[$_+$inc] && $std[$_+$inc] ) {
				printf "<LINK LINKEND=\"%s\">%s</LINK>", $xrefs[$_+$inc], $refs{$xrefs[$_+$inc]};
			}
			printf "</ENTRY>";
			printf "<ENTRY>%s",$datasym[$_+(2*$inc)];
			if( $datasym[$_+(2*$inc)] && $std[$_+(2*$inc)] ) {
				printf "<LINK LINKEND=\"%s\">%s</LINK>", $xrefs[$_+(2*$inc)], $refs{$xrefs[$_+(2*$inc)]};
			}
			printf "</ENTRY>";
			print "</ROW>\n";
		}
		print "</TBODY>\n";
		print "</TGROUP>\n";
		print "</TABLE>\n";
	}
}
print "</SECT1>\n";
}
print "</APPENDIX>\n";
printf("<!-- End of text generated from database -->\n");
printf("<!--    by \$Header: /home/mats.deb/cvsrepo/lsb/lsbspec.smaller/mklibapnd,v 1.19 2005-10-26 23:35:28 nick Exp $- -->\n");
