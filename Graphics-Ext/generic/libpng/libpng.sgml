<PART ID="toclibpng">
<TITLE>PNG12 library</TITLE>

<CHAPTER id=libpng>
<TITLE>Libraries</TITLE>

<!-- Start of generated text - do not edit! -->
<!-- generated from the LSB specification database by mklibspec -->
<SECT1 ID=libpng12>
<TITLE>Interfaces for libpng12</TITLE>
<PARA>
<XREF LINKEND="lib-libpng12-def"> defines the library name and shared object name
for the libpng12 library
</PARA>
<TABLE id="lib-libpng12-def">
<TITLE>libpng12 Definition</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Library:</ENTRY>
<ENTRY>libpng12</ENTRY>
</ROW>
<ROW>
<ENTRY>SONAME:</ENTRY>
<ENTRY>libpng12.so.0</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The behavior of the interfaces in this library is specified by the following specifications:<SIMPLELIST COLUMNS=1>
<MEMBER ID='REFSTD.libpng12.1'>
[LSB] <XREF LINKEND="std.LSB">
</MEMBER>
</SIMPLELIST>
</PARA>
<!-- debug: database interface name PNG Reference library -->
<SECT2>
<!--libgroup-->
<TITLE>PNG Reference library</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for PNG Reference library</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic functions
for PNG Reference library specified in <XREF linkend="tbl-libpng12-png-r-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<TABLE id="tbl-libpng12-png-r-ints">
<TITLE>libpng12 - PNG Reference library Function Interfaces</TITLE>
<TGROUP COLS=3>
<TBODY>
<ROW>
<ENTRY><indexterm><primary>png_access_version_number</primary></indexterm>png_access_version_number(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_check_sig</primary></indexterm>png_check_sig(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_convert_from_struct_tm</primary></indexterm>png_convert_from_struct_tm(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_convert_from_time_t</primary></indexterm>png_convert_from_time_t(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_create_info_struct</primary></indexterm>png_create_info_struct(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_create_read_struct</primary></indexterm>png_create_read_struct(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_create_read_struct_2</primary></indexterm>png_create_read_struct_2(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_create_write_struct</primary></indexterm>png_create_write_struct(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_create_write_struct_2</primary></indexterm>png_create_write_struct_2(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_data_freer</primary></indexterm>png_data_freer(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_destroy_info_struct</primary></indexterm>png_destroy_info_struct(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_destroy_read_struct</primary></indexterm>png_destroy_read_struct(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_destroy_write_struct</primary></indexterm>png_destroy_write_struct(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_error</primary></indexterm>png_error(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_free</primary></indexterm>png_free(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_free_data</primary></indexterm>png_free_data(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_get_IHDR</primary></indexterm>png_get_IHDR(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_get_PLTE</primary></indexterm>png_get_PLTE(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_get_bKGD</primary></indexterm>png_get_bKGD(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_get_bit_depth</primary></indexterm>png_get_bit_depth(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_get_cHRM</primary></indexterm>png_get_cHRM(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_get_channels</primary></indexterm>png_get_channels(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_get_color_type</primary></indexterm>png_get_color_type(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_get_error_ptr</primary></indexterm>png_get_error_ptr(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_get_gAMA</primary></indexterm>png_get_gAMA(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_get_hIST</primary></indexterm>png_get_hIST(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_get_header_ver</primary></indexterm>png_get_header_ver(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_get_iCCP</primary></indexterm>png_get_iCCP(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_get_image_height</primary></indexterm>png_get_image_height(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_get_image_width</primary></indexterm>png_get_image_width(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_get_interlace_type</primary></indexterm>png_get_interlace_type(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_get_io_ptr</primary></indexterm>png_get_io_ptr(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_get_libpng_ver</primary></indexterm>png_get_libpng_ver(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_get_oFFs</primary></indexterm>png_get_oFFs(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_get_pHYs</primary></indexterm>png_get_pHYs(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_get_progressive_ptr</primary></indexterm>png_get_progressive_ptr(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_get_rowbytes</primary></indexterm>png_get_rowbytes(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_get_rows</primary></indexterm>png_get_rows(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_get_sBIT</primary></indexterm>png_get_sBIT(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_get_sRGB</primary></indexterm>png_get_sRGB(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_get_tIME</primary></indexterm>png_get_tIME(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_get_tRNS</primary></indexterm>png_get_tRNS(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_get_text</primary></indexterm>png_get_text(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_get_unknown_chunks</primary></indexterm>png_get_unknown_chunks(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_get_user_chunk_ptr</primary></indexterm>png_get_user_chunk_ptr(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_get_valid</primary></indexterm>png_get_valid(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_get_x_offset_pixels</primary></indexterm>png_get_x_offset_pixels(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_get_x_pixels_per_meter</primary></indexterm>png_get_x_pixels_per_meter(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_get_y_offset_pixels</primary></indexterm>png_get_y_offset_pixels(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_get_y_pixels_per_meter</primary></indexterm>png_get_y_pixels_per_meter(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_info_init_3</primary></indexterm>png_info_init_3(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_init_io</primary></indexterm>png_init_io(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_malloc</primary></indexterm>png_malloc(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_permit_mng_features</primary></indexterm>png_permit_mng_features(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_process_data</primary></indexterm>png_process_data(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_progressive_combine_row</primary></indexterm>png_progressive_combine_row(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_read_end</primary></indexterm>png_read_end(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_read_image</primary></indexterm>png_read_image(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_read_info</primary></indexterm>png_read_info(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_read_png</primary></indexterm>png_read_png(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_read_row</primary></indexterm>png_read_row(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_read_rows</primary></indexterm>png_read_rows(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_read_update_info</primary></indexterm>png_read_update_info(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_set_IHDR</primary></indexterm>png_set_IHDR(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_PLTE</primary></indexterm>png_set_PLTE(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_bKGD</primary></indexterm>png_set_bKGD(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_set_background</primary></indexterm>png_set_background(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_bgr</primary></indexterm>png_set_bgr(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_cHRM</primary></indexterm>png_set_cHRM(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_set_compression_buffer_size</primary></indexterm>png_set_compression_buffer_size(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_compression_level</primary></indexterm>png_set_compression_level(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_compression_mem_level</primary></indexterm>png_set_compression_mem_level(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_set_compression_method</primary></indexterm>png_set_compression_method(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_compression_strategy</primary></indexterm>png_set_compression_strategy(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_compression_window_bits</primary></indexterm>png_set_compression_window_bits(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_set_dither</primary></indexterm>png_set_dither(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_error_fn</primary></indexterm>png_set_error_fn(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_expand</primary></indexterm>png_set_expand(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_set_filler</primary></indexterm>png_set_filler(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_filter</primary></indexterm>png_set_filter(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_gAMA</primary></indexterm>png_set_gAMA(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_set_gamma</primary></indexterm>png_set_gamma(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_gray_1_2_4_to_8</primary></indexterm>png_set_gray_1_2_4_to_8(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_gray_to_rgb</primary></indexterm>png_set_gray_to_rgb(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_set_hIST</primary></indexterm>png_set_hIST(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_iCCP</primary></indexterm>png_set_iCCP(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_interlace_handling</primary></indexterm>png_set_interlace_handling(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_set_invert_alpha</primary></indexterm>png_set_invert_alpha(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_invert_mono</primary></indexterm>png_set_invert_mono(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_keep_unknown_chunks</primary></indexterm>png_set_keep_unknown_chunks(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_set_mem_fn</primary></indexterm>png_set_mem_fn(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_oFFs</primary></indexterm>png_set_oFFs(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_pHYs</primary></indexterm>png_set_pHYs(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_set_packing</primary></indexterm>png_set_packing(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_packswap</primary></indexterm>png_set_packswap(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_palette_to_rgb</primary></indexterm>png_set_palette_to_rgb(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_set_progressive_read_fn</primary></indexterm>png_set_progressive_read_fn(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_read_fn</primary></indexterm>png_set_read_fn(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_read_user_chunk_fn</primary></indexterm>png_set_read_user_chunk_fn(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_set_read_user_transform_fn</primary></indexterm>png_set_read_user_transform_fn(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_rgb_to_gray</primary></indexterm>png_set_rgb_to_gray(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_rows</primary></indexterm>png_set_rows(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_set_sBIT</primary></indexterm>png_set_sBIT(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_sRGB</primary></indexterm>png_set_sRGB(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_sRGB_gAMA_and_cHRM</primary></indexterm>png_set_sRGB_gAMA_and_cHRM(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_set_shift</primary></indexterm>png_set_shift(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_sig_bytes</primary></indexterm>png_set_sig_bytes(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_strip_16</primary></indexterm>png_set_strip_16(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_set_strip_alpha</primary></indexterm>png_set_strip_alpha(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_swap</primary></indexterm>png_set_swap(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_swap_alpha</primary></indexterm>png_set_swap_alpha(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_set_tIME</primary></indexterm>png_set_tIME(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_tRNS</primary></indexterm>png_set_tRNS(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_tRNS_to_alpha</primary></indexterm>png_set_tRNS_to_alpha(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_set_text</primary></indexterm>png_set_text(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_unknown_chunk_location</primary></indexterm>png_set_unknown_chunk_location(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_unknown_chunks</primary></indexterm>png_set_unknown_chunks(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_set_write_fn</primary></indexterm>png_set_write_fn(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_write_status_fn</primary></indexterm>png_set_write_status_fn(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_write_user_transform_fn</primary></indexterm>png_set_write_user_transform_fn(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_sig_cmp</primary></indexterm>png_sig_cmp(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_start_read_image</primary></indexterm>png_start_read_image(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_warning</primary></indexterm>png_warning(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_write_chunk</primary></indexterm>png_write_chunk(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_write_end</primary></indexterm>png_write_end(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_write_flush</primary></indexterm>png_write_flush(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_write_image</primary></indexterm>png_write_image(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_write_info</primary></indexterm>png_write_info(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_write_png</primary></indexterm>png_write_png(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_write_row</primary></indexterm>png_write_row(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_write_rows</primary></indexterm>png_write_rows(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for PNG Reference library specified in <XREF linkend="tbl-libpng12-png-r-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<TABLE id="tbl-libpng12-png-r-data">
<TITLE>libpng12 - PNG Reference library Data Interfaces</TITLE>
<TGROUP COLS=3>
<TBODY>
<ROW>
<ENTRY><indexterm><primary>png_libpng_ver</primary></indexterm>png_libpng_ver(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>
</SECT2>
</SECT1>
<SECT1 ID=libpng12-ddefs>
<TITLE>Data Definitions for libpng12</TITLE>
<PARA>
This section defines global identifiers and their values that are associated
with interfaces contained in libpng12.
These definitions are organized into groups that
correspond to system headers. This convention is used as a
convenience for the reader, and does not imply the existence
of these headers, or their content.
Where an interface is defined as requiring a particular system header file
all of the data definitions for that system header file presented here shall be in effect.
</PARA>
<PARA>
This section gives data definitions to promote binary application
portability, not to repeat source interface definitions available
elsewhere. System providers and application developers should use this ABI
to supplement - not to replace - source interface definition specifications.
</PARA>
<PARA>
This specification uses the <XREF LINKEND='std.ISOC99'> C Language as the reference programming language, and data definitions are specified in ISO C format. The C language is used here as a convenient notation. Using a C language description of these data objects does not preclude their use by other programming languages.</PARA>
<SECT2>
<TITLE>png.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define FARDATA
#define PNGAPI
#define PNG_1_2_X
#define PNG_EASY_ACCESS_SUPPORTED
#define PNG_ERROR_NUMBERS_SUPPORTED
#define PNG_FIXED_POINT_SUPPORTED
#define PNG_FLOATING_POINT_SUPPORTED
#define PNG_FREE_ME_SUPPORTED
#define PNG_HANDLE_AS_UNKNOWN_SUPPORTED
#define PNG_IMPEXP
#define PNG_INFO_IMAGE_SUPPORTED
#define PNG_MMX_CODE_SUPPORTED
#define PNG_MNG_FEATURES_SUPPORTED
#define PNG_NO_READ_iTXt
#define PNG_NO_WRITE_iTXt
#define PNG_PROGRESSIVE_READ_SUPPORTED
#define PNG_READ_16_TO_8_SUPPORTED
#define PNG_READ_ANCILLARY_CHUNKS_SUPPORTED
#define PNG_READ_BACKGROUND_SUPPORTED
#define PNG_READ_BGR_SUPPORTED
#define PNG_READ_COMPOSITE_NODIV_SUPPORTED
#define PNG_READ_DITHER_SUPPORTED
#define PNG_READ_EMPTY_PLTE_SUPPORTED
#define PNG_READ_EXPAND_SUPPORTED
#define PNG_READ_FILLER_SUPPORTED
#define PNG_READ_GAMMA_SUPPORTED
#define PNG_READ_GRAY_TO_RGB_SUPPORTED
#define PNG_READ_INTERLACING_SUPPORTED
#define PNG_READ_INVERT_ALPHA_SUPPORTED
#define PNG_READ_INVERT_SUPPORTED
#define PNG_READ_OPT_PLTE_SUPPORTED
#define PNG_READ_PACKSWAP_SUPPORTED
#define PNG_READ_PACK_SUPPORTED
#define PNG_READ_RGB_TO_GRAY_SUPPORTED
#define PNG_READ_SHIFT_SUPPORTED
#define PNG_READ_STRIP_ALPHA_SUPPORTED
#define PNG_READ_SUPPORTED
#define PNG_READ_SWAP_ALPHA_SUPPORTED
#define PNG_READ_SWAP_SUPPORTED
#define PNG_READ_TEXT_SUPPORTED
#define PNG_READ_TRANSFORMS_SUPPORTED
#define PNG_READ_UNKNOWN_CHUNKS_SUPPORTED
#define PNG_READ_USER_CHUNKS_SUPPORTED
#define PNG_READ_USER_TRANSFORM_SUPPORTED
#define PNG_READ_bKGD_SUPPORTED
#define PNG_READ_cHRM_SUPPORTED
#define PNG_READ_gAMA_SUPPORTED
#define PNG_READ_hIST_SUPPORTED
#define PNG_READ_iCCP_SUPPORTED
#define PNG_READ_oFFs_SUPPORTED
#define PNG_READ_pCAL_SUPPORTED
#define PNG_READ_pHYs_SUPPORTED
#define PNG_READ_sBIT_SUPPORTED
#define PNG_READ_sCAL_SUPPORTED
#define PNG_READ_sPLT_SUPPORTED
#define PNG_READ_sRGB_SUPPORTED
#define PNG_READ_tEXt_SUPPORTED
#define PNG_READ_tIME_SUPPORTED
#define PNG_READ_tRNS_SUPPORTED
#define PNG_READ_zTXt_SUPPORTED
#define PNG_SETJMP_SUPPORTED
#define PNG_SET_USER_LIMITS_SUPPORTED
#define PNG_TEXT_SUPPORTED
#define PNG_TIME_RFC1123_SUPPORTED
#define PNG_UNKNOWN_CHUNKS_SUPPORTED
#define PNG_USER_CHUNKS_SUPPORTED
#define PNG_USER_MEM_SUPPORTED
#define PNG_USER_TRANSFORM_PTR_SUPPORTED
#define PNG_USE_GLOBAL_ARRAYS
#define PNG_WRITE_ANCILLARY_CHUNKS_SUPPORTED
#define PNG_WRITE_BGR_SUPPORTED
#define PNG_WRITE_EMPTY_PLTE_SUPPORTED
#define PNG_WRITE_FILLER_SUPPORTED
#define PNG_WRITE_FLUSH_SUPPORTED
#define PNG_WRITE_INTERLACING_SUPPORTED
#define PNG_WRITE_INVERT_ALPHA_SUPPORTED
#define PNG_WRITE_INVERT_SUPPORTED
#define PNG_WRITE_PACKSWAP_SUPPORTED
#define PNG_WRITE_PACK_SUPPORTED
#define PNG_WRITE_SHIFT_SUPPORTED
#define PNG_WRITE_SUPPORTED
#define PNG_WRITE_SWAP_ALPHA_SUPPORTED
#define PNG_WRITE_SWAP_SUPPORTED
#define PNG_WRITE_TEXT_SUPPORTED
#define PNG_WRITE_TRANSFORMS_SUPPORTED
#define PNG_WRITE_UNKNOWN_CHUNKS_SUPPORTED
#define PNG_WRITE_USER_TRANSFORM_SUPPORTED
#define PNG_WRITE_WEIGHTED_FILTER_SUPPORTED
#define PNG_WRITE_bKGD_SUPPORTED
#define PNG_WRITE_cHRM_SUPPORTED
#define PNG_WRITE_gAMA_SUPPORTED
#define PNG_WRITE_hIST_SUPPORTED
#define PNG_WRITE_iCCP_SUPPORTED
#define PNG_WRITE_oFFs_SUPPORTED
#define PNG_WRITE_pCAL_SUPPORTED
#define PNG_WRITE_pHYs_SUPPORTED
#define PNG_WRITE_sBIT_SUPPORTED
#define PNG_WRITE_sCAL_SUPPORTED
#define PNG_WRITE_sPLT_SUPPORTED
#define PNG_WRITE_sRGB_SUPPORTED
#define PNG_WRITE_tEXt_SUPPORTED
#define PNG_WRITE_tIME_SUPPORTED
#define PNG_WRITE_tRNS_SUPPORTED
#define PNG_WRITE_zTXt_SUPPORTED
#define PNG_bKGD_SUPPORTED
#define PNG_cHRM_SUPPORTED
#define PNG_gAMA_SUPPORTED
#define PNG_hIST_SUPPORTED
#define PNG_iCCP_SUPPORTED
#define PNG_oFFs_SUPPORTED
#define PNG_pCAL_SUPPORTED
#define PNG_pHYs_SUPPORTED
#define PNG_sBIT_SUPPORTED
#define PNG_sCAL_SUPPORTED
#define PNG_sPLT_SUPPORTED
#define PNG_sRGB_SUPPORTED
#define PNG_tEXt_SUPPORTED
#define PNG_tIME_SUPPORTED
#define PNG_tRNS_SUPPORTED
#define PNG_zTXt_SUPPORTED
#define PNG_HEADER_VERSION_STRING	" libpng version 1.2.8 - December 3, 2004 (header)\n"
#define PNG_MMX_READ_FLAGS	 \
	( PNG_ASM_FLAG_MMX_READ_COMBINE_ROW | PNG_ASM_FLAG_MMX_READ_INTERLACE \
	| PNG_ASM_FLAG_MMX_READ_FILTER_SUB | PNG_ASM_FLAG_MMX_READ_FILTER_UP | \
	PNG_ASM_FLAG_MMX_READ_FILTER_AVG | PNG_ASM_FLAG_MMX_READ_FILTER_PAETH \
	)
#define PNG_MMX_FLAGS	 \
	( PNG_ASM_FLAG_MMX_SUPPORT_COMPILED | PNG_ASM_FLAG_MMX_SUPPORT_IN_CPU \
	| PNG_MMX_READ_FLAGS | PNG_MMX_WRITE_FLAGS )
#define PNG_ALL_FILTERS	 \
	(PNG_FILTER_NONE | PNG_FILTER_SUB | PNG_FILTER_UP | PNG_FILTER_AVG | \
	PNG_FILTER_PAETH)
#define png_info_init(info_ptr)	 \
	png_info_init_3(&amp;info_ptr, png_sizeof(png_info));
#define png_composite(composite,fg,alpha,bg)	 \
	{ png_uint_16 temp = (png_uint_16)((png_uint_16)(fg) * \
	(png_uint_16)(alpha) + (png_uint_16)(bg)*(png_uint_16)(255 - \
	(png_uint_16)(alpha)) + (png_uint_16)128); (composite) = \
	(png_byte)((temp + (temp >> 8)) >> 8); }
#define png_composite_16(composite,fg,alpha,bg)	 \
	{ png_uint_32 temp = (png_uint_32)((png_uint_32)(fg) * \
	(png_uint_32)(alpha) + (png_uint_32)(bg)*(png_uint_32)(65535L - \
	(png_uint_32)(alpha)) + (png_uint_32)32768L); (composite) = \
	(png_uint_16)((temp + (temp >> 16)) >> 16); }
#define PNG_MMX_WRITE_FLAGS	( 0 )
#define png_jmpbuf(png_ptr)	((png_ptr)->jmpbuf)
#define PNG_SIZE_MAX	((png_size_t)(-1))
#define PNG_UINT_32_MAX	((png_uint_32)(-1))
#define PNG_UINT_31_MAX	((png_uint_32)0x7fffffffL)
#define int_p_NULL	(int *)NULL
#define png_bytep_NULL	(png_bytep)NULL
#define png_bytepp_NULL	(png_bytepp)NULL
#define PNG_COLOR_TYPE_GRAY_ALPHA	(PNG_COLOR_MASK_ALPHA)
#define PNG_COLOR_TYPE_RGB_ALPHA	(PNG_COLOR_MASK_COLOR | PNG_COLOR_MASK_ALPHA)
#define PNG_COLOR_TYPE_PALETTE	(PNG_COLOR_MASK_COLOR | PNG_COLOR_MASK_PALETTE)
#define PNG_COLOR_TYPE_RGB	(PNG_COLOR_MASK_COLOR)
#define png_doublep_NULL	(png_doublep)NULL
#define png_error_ptr_NULL	(png_error_ptr)NULL
#define png_flush_ptr_NULL	(png_flush_ptr)NULL
#define png_infopp_NULL	(png_infopp)NULL
#define png_rw_ptr_NULL	(png_rw_ptr)NULL
#define png_structp_NULL	(png_structp)NULL
#define png_uint_16p_NULL	(png_uint_16p)NULL
#define png_voidp_NULL	(png_voidp)NULL
#define CVT_PTR(ptr)	(ptr)
#define CVT_PTR_NOCHECK(ptr)	(ptr)
#define PNG_TEXT_COMPRESSION_NONE	-1
#define PNG_TEXT_COMPRESSION_zTXt_WR	-2
#define PNG_TEXT_COMPRESSION_NONE_WR	-3
#define PNG_BACKGROUND_GAMMA_UNKNOWN	0
#define PNG_COLOR_TYPE_GRAY	0
#define PNG_COMPRESSION_TYPE_BASE	0
#define PNG_CRC_DEFAULT	0
#define PNG_EQUATION_LINEAR	0
#define PNG_FILLER_BEFORE	0
#define PNG_FILTER_HEURISTIC_DEFAULT	0
#define PNG_FILTER_TYPE_BASE	0
#define PNG_FILTER_VALUE_NONE	0
#define PNG_HANDLE_CHUNK_AS_DEFAULT	0
#define PNG_INTERLACE_NONE	0
#define PNG_LIBPNG_VER_BUILD	0
#define PNG_LIBPNG_VER_SONUM	0
#define PNG_OFFSET_PIXEL	0
#define PNG_RESOLUTION_UNKNOWN	0
#define PNG_SCALE_UNKNOWN	0
#define PNG_TEXT_COMPRESSION_zTXt	0
#define PNG_sRGB_INTENT_PERCEPTUAL	0
#define PNG_NO_FILTERS	0x00
#define PNG_TRANSFORM_IDENTITY	0x0000
#define PNG_INFO_gAMA	0x0001
#define PNG_TRANSFORM_STRIP_16	0x0001
#define PNG_INFO_sBIT	0x0002
#define PNG_TRANSFORM_STRIP_ALPHA	0x0002
#define PNG_INFO_cHRM	0x0004
#define PNG_TRANSFORM_PACKING	0x0004
#define PNG_FREE_HIST	0x0008
#define PNG_INFO_PLTE	0x0008
#define PNG_TRANSFORM_PACKSWAP	0x0008
#define PNG_FREE_ICCP	0x0010
#define PNG_INFO_tRNS	0x0010
#define PNG_TRANSFORM_EXPAND	0x0010
#define PNG_FREE_SPLT	0x0020
#define PNG_INFO_bKGD	0x0020
#define PNG_TRANSFORM_INVERT_MONO	0x0020
#define PNG_FREE_ROWS	0x0040
#define PNG_INFO_hIST	0x0040
#define PNG_TRANSFORM_SHIFT	0x0040
#define PNG_FREE_PCAL	0x0080
#define PNG_INFO_pHYs	0x0080
#define PNG_TRANSFORM_BGR	0x0080
#define PNG_ASM_FLAG_MMX_SUPPORT_COMPILED	0x01
#define PNG_FLAG_MNG_EMPTY_PLTE	0x01
#define PNG_FREE_SCAL	0x0100
#define PNG_INFO_oFFs	0x0100
#define PNG_TRANSFORM_SWAP_ALPHA	0x0100
#define PNG_ASM_FLAG_MMX_SUPPORT_IN_CPU	0x02
#define PNG_FREE_UNKN	0x0200
#define PNG_INFO_tIME	0x0200
#define PNG_TRANSFORM_SWAP_ENDIAN	0x0200
#define PNG_ASM_FLAG_MMX_READ_COMBINE_ROW	0x04
#define PNG_FLAG_MNG_FILTER_64	0x04
#define PNG_FREE_LIST	0x0400
#define PNG_INFO_pCAL	0x0400
#define PNG_TRANSFORM_INVERT_ALPHA	0x0400
#define PNG_ALL_MNG_FEATURES	0x05
#define PNG_ASM_FLAG_MMX_READ_INTERLACE	0x08
#define PNG_FILTER_NONE	0x08
#define PNG_INFO_sRGB	0x0800
#define PNG_TRANSFORM_STRIP_FILLER	0x0800
#define PNG_ASM_FLAG_MMX_READ_FILTER_SUB	0x10
#define PNG_FILTER_SUB	0x10
#define PNG_FREE_PLTE	0x1000
#define PNG_INFO_iCCP	0x1000
#define PNG_ASM_FLAG_MMX_READ_FILTER_UP	0x20
#define PNG_FILTER_UP	0x20
#define PNG_FREE_TRNS	0x2000
#define PNG_INFO_sPLT	0x2000
#define PNG_ASM_FLAG_MMX_READ_FILTER_AVG	0x40
#define PNG_FILTER_AVG	0x40
#define PNG_FREE_TEXT	0x4000
#define PNG_INFO_sCAL	0x4000
#define PNG_FREE_MUL	0x4220
#define PNG_FREE_ALL	0x7fff
#define PNG_ASM_FLAG_MMX_READ_FILTER_PAETH	0x80
#define PNG_FILTER_PAETH	0x80
#define PNG_ASM_FLAGS_INITIALIZED	0x80000000
#define PNG_INFO_IDAT	0x8000L
#define PNG_BACKGROUND_GAMMA_SCREEN	1
#define PNG_COLOR_MASK_PALETTE	1
#define PNG_CRC_ERROR_QUIT	1
#define PNG_DESTROY_WILL_FREE_DATA	1
#define PNG_EQUATION_BASE_E	1
#define PNG_FILLER_AFTER	1
#define PNG_FILTER_HEURISTIC_UNWEIGHTED	1
#define PNG_FILTER_VALUE_SUB	1
#define PNG_HANDLE_CHUNK_NEVER	1
#define PNG_INTERLACE_ADAM7	1
#define PNG_ITXT_COMPRESSION_NONE	1
#define PNG_LIBPNG_BUILD_ALPHA	1
#define PNG_LIBPNG_VER_MAJOR	1
#define PNG_OFFSET_MICROMETER	1
#define PNG_RESOLUTION_METER	1
#define PNG_SCALE_METER	1
#define PNG_SELECT_READ	1
#define PNG_SET_WILL_FREE_DATA	1
#define PNG_sRGB_INTENT_RELATIVE	1
#define PNG_LIBPNG_VER_STRING	"1.2.8"
#define PNG_USER_HEIGHT_MAX	1000000L
#define PNG_USER_WIDTH_MAX	1000000L
#define PNG_LIBPNG_VER	10208
#define PNG_LIBPNG_VER_DLLNUM	13
#define PNG_LIBPNG_BUILD_PRIVATE	16
#define PNG_BACKGROUND_GAMMA_FILE	2
#define PNG_COLOR_MASK_COLOR	2
#define PNG_CRC_WARN_DISCARD	2
#define PNG_EQUATION_ARBITRARY	2
#define PNG_FILTER_HEURISTIC_WEIGHTED	2
#define PNG_FILTER_VALUE_UP	2
#define PNG_HANDLE_CHUNK_IF_SAFE	2
#define PNG_INTERLACE_LAST	2
#define PNG_ITXT_COMPRESSION_zTXt	2
#define PNG_LIBPNG_BUILD_BETA	2
#define PNG_LIBPNG_VER_MINOR	2
#define PNG_OFFSET_LAST	2
#define PNG_RESOLUTION_LAST	2
#define PNG_SCALE_RADIAN	2
#define PNG_SELECT_WRITE	2
#define PNG_USER_WILL_FREE_DATA	2
#define PNG_sRGB_INTENT_SATURATION	2
#define PNG_MAX_PALETTE_LENGTH	256
#define PNG_BACKGROUND_GAMMA_UNIQUE	3
#define PNG_CRC_WARN_USE	3
#define PNG_EQUATION_HYPERBOLIC	3
#define PNG_FILTER_HEURISTIC_LAST	3
#define PNG_FILTER_VALUE_AVG	3
#define PNG_HANDLE_CHUNK_ALWAYS	3
#define PNG_LIBPNG_BUILD_RC	3
#define PNG_SCALE_LAST	3
#define PNG_TEXT_COMPRESSION_LAST	3
#define PNG_sRGB_INTENT_ABSOLUTE	3
#define PNG_LIBPNG_BUILD_SPECIAL	32
#define PNG_COLOR_MASK_ALPHA	4
#define PNG_CRC_QUIET_USE	4
#define PNG_EQUATION_LAST	4
#define PNG_FILTER_VALUE_PAETH	4
#define PNG_LIBPNG_BUILD_STABLE	4
#define PNG_sRGB_INTENT_LAST	4
#define PNG_CRC_NO_CHANGE	5
#define PNG_FILTER_VALUE_LAST	5
#define PNG_INTRAPIXEL_DIFFERENCING	64
#define PNG_LIBPNG_BUILD_RELEASE_STATUS_MASK	7
#define PNG_KEYWORD_MAX_LENGTH	79
#define PNG_LIBPNG_BUILD_PATCH	8
#define PNG_LIBPNG_VER_RELEASE	8
#define PNG_ZBUF_SIZE	8192
#define PNG_ABORT()	abort()
#define PNG_CONST	const
#define PNG_EXPORT_VAR(type)	extern PNG_IMPEXP type
#define png_memcmp	memcmp
#define png_memcpy	memcpy
#define png_memset	memset
#define PNG_COLOR_TYPE_GA	PNG_COLOR_TYPE_GRAY_ALPHA
#define PNG_COLOR_TYPE_RGBA	PNG_COLOR_TYPE_RGB_ALPHA
#define PNG_COMPRESSION_TYPE_DEFAULT	PNG_COMPRESSION_TYPE_BASE
#define PNG_FILTER_TYPE_DEFAULT	PNG_FILTER_TYPE_BASE
#define PNG_EXPORT(type,symbol)	PNG_IMPEXP type PNGAPI symbol
#define PNG_LIBPNG_BUILD_TYPE	PNG_LIBPNG_BUILD_BASE_TYPE
#define PNG_LIBPNG_BUILD_BASE_TYPE	PNG_LIBPNG_BUILD_STABLE
#define PNG_MAX_UINT	PNG_UINT_31_MAX
#define png_sizeof(x)	sizeof (x)
#define png_strcpy	strcpy
#define png_strlen	strlen
#define png_strncpy	strncpy

typedef png_unknown_chunk **png_unknown_chunkpp;
typedef struct png_sPLT_entry_struct {
    png_uint_16 red;
    png_uint_16 green;
    png_uint_16 blue;
    png_uint_16 alpha;
    png_uint_16 frequency;
} png_sPLT_entry;
typedef png_sPLT_entry *png_sPLT_entryp;
typedef png_sPLT_entry **png_sPLT_entrypp;
typedef struct png_sPLT_struct {
    png_charp name;
    png_byte depth;
    png_sPLT_entryp entries;
    png_int_32 nentries;
} png_sPLT_t;
typedef png_sPLT_t *png_sPLT_tp;
typedef png_sPLT_t **png_sPLT_tpp;
typedef struct png_unknown_chunk_t {
    png_byte name[5];
    png_byte *data;
    png_size_t size;
    png_byte location;
} png_unknown_chunk;
typedef png_unknown_chunk *png_unknown_chunkp;
typedef struct png_struct_def {
    struct __jmp_buf_tag jmpbuf[1];
    png_error_ptr error_fn;
    png_error_ptr warning_fn;
    png_voidp error_ptr;
    png_rw_ptr write_data_fn;
    png_rw_ptr read_data_fn;
    png_voidp io_ptr;
    png_user_transform_ptr read_user_transform_fn;
    png_user_transform_ptr write_user_transform_fn;
    png_voidp user_transform_ptr;
    png_byte user_transform_depth;
    png_byte user_transform_channels;
    png_uint_32 mode;
    png_uint_32 flags;
    png_uint_32 transformations;
    z_stream zstream;
    png_bytep zbuf;
    png_size_t zbuf_size;
    int zlib_level;
    int zlib_method;
    int zlib_window_bits;
    int zlib_mem_level;
    int zlib_strategy;
    png_uint_32 width;
    png_uint_32 height;
    png_uint_32 num_rows;
    png_uint_32 usr_width;
    png_uint_32 rowbytes;
    png_uint_32 irowbytes;
    png_uint_32 iwidth;
    png_uint_32 row_number;
    png_bytep prev_row;
    png_bytep row_buf;
    png_bytep sub_row;
    png_bytep up_row;
    png_bytep avg_row;
    png_bytep paeth_row;
    png_row_info row_info;
    png_uint_32 idat_size;
    png_uint_32 crc;
    png_colorp palette;
    png_uint_16 num_palette;
    png_uint_16 num_trans;
    png_byte chunk_name[5];
    png_byte compression;
    png_byte filter;
    png_byte interlaced;
    png_byte pass;
    png_byte do_filter;
    png_byte color_type;
    png_byte bit_depth;
    png_byte usr_bit_depth;
    png_byte pixel_depth;
    png_byte channels;
    png_byte usr_channels;
    png_byte sig_bytes;
    png_uint_16 filler;
    png_byte background_gamma_type;
    float background_gamma;
    png_color_16 background;
    png_color_16 background_1;
    png_flush_ptr output_flush_fn;
    png_uint_32 flush_dist;
    png_uint_32 flush_rows;
    int gamma_shift;
    float gamma;
    float screen_gamma;
    png_bytep gamma_table;
    png_bytep gamma_from_1;
    png_bytep gamma_to_1;
    png_uint_16pp gamma_16_table;
    png_uint_16pp gamma_16_from_1;
    png_uint_16pp gamma_16_to_1;
    png_color_8 sig_bit;
    png_color_8 shift;
    png_bytep trans;
    png_color_16 trans_values;
    png_read_status_ptr read_row_fn;
    png_write_status_ptr write_row_fn;
    png_progressive_info_ptr info_fn;
    png_progressive_row_ptr row_fn;
    png_progressive_end_ptr end_fn;
    png_bytep save_buffer_ptr;
    png_bytep save_buffer;
    png_bytep current_buffer_ptr;
    png_bytep current_buffer;
    png_uint_32 push_length;
    png_uint_32 skip_length;
    png_size_t save_buffer_size;
    png_size_t save_buffer_max;
    png_size_t buffer_size;
    png_size_t current_buffer_size;
    int process_mode;
    int cur_palette;
    png_size_t current_text_size;
    png_size_t current_text_left;
    png_charp current_text;
    png_charp current_text_ptr;
    png_bytep palette_lookup;
    png_bytep dither_index;
    png_uint_16p hist;
    png_byte heuristic_method;
    png_byte num_prev_filters;
    png_bytep prev_filters;
    png_uint_16p filter_weights;
    png_uint_16p inv_filter_weights;
    png_uint_16p filter_costs;
    png_uint_16p inv_filter_costs;
    png_charp time_buffer;
    png_uint_32 free_me;
    png_voidp user_chunk_ptr;
    png_user_chunk_ptr read_user_chunk_fn;
    int num_chunk_list;
    png_bytep chunk_list;
    png_byte rgb_to_gray_status;
    png_uint_16 rgb_to_gray_red_coeff;
    png_uint_16 rgb_to_gray_green_coeff;
    png_uint_16 rgb_to_gray_blue_coeff;
    png_uint_32 mng_features_permitted;
    png_fixed_point int_gamma;
    png_byte filter_type;
    png_voidp mem_ptr;
    png_malloc_ptr malloc_fn;
    png_free_ptr free_fn;
    png_bytep big_row_buf;
    png_bytep dither_sort;
    png_bytep index_to_palette;
    png_bytep palette_to_index;
    png_byte compression_type;
    png_uint_32 user_width_max;
    png_uint_32 user_height_max;
} png_struct;
typedef png_struct *png_structp;
typedef struct png_info_struct {
    png_uint_32 width;
    png_uint_32 height;
    png_uint_32 valid;
    png_uint_32 rowbytes;
    png_colorp palette;
    png_uint_16 num_palette;
    png_uint_16 num_trans;
    png_byte bit_depth;
    png_byte color_type;
    png_byte compression_type;
    png_byte filter_type;
    png_byte interlace_type;
    png_byte channels;
    png_byte pixel_depth;
    png_byte spare_byte;
    png_byte signature[8];
    float gamma;
    png_byte srgb_intent;
    int num_text;
    int max_text;
    png_textp text;
    png_time mod_time;
    png_color_8 sig_bit;
    png_bytep trans;
    png_color_16 trans_values;
    png_color_16 background;
    png_int_32 x_offset;
    png_int_32 y_offset;
    png_byte offset_unit_type;
    png_uint_32 x_pixels_per_unit;
    png_uint_32 y_pixels_per_unit;
    png_byte phys_unit_type;
    png_uint_16p hist;
    float x_white;
    float y_white;
    float x_red;
    float y_red;
    float x_green;
    float y_green;
    float x_blue;
    float y_blue;
    png_charp pcal_purpose;
    png_int_32 pcal_X0;
    png_int_32 pcal_X1;
    png_charp pcal_units;
    png_charpp pcal_params;
    png_byte pcal_type;
    png_byte pcal_nparams;
    png_uint_32 free_me;
    png_unknown_chunkp unknown_chunks;
    png_size_t unknown_chunks_num;
    png_charp iccp_name;
    png_charp iccp_profile;
    png_uint_32 iccp_proflen;
    png_byte iccp_compression;
    png_sPLT_tp splt_palettes;
    png_uint_32 splt_palettes_num;
    png_byte scal_unit;
    double scal_pixel_width;
    double scal_pixel_height;
    png_charp scal_s_width;
    png_charp scal_s_height;
    png_bytepp row_pointers;
    png_fixed_point int_gamma;
    png_fixed_point int_x_white;
    png_fixed_point int_y_white;
    png_fixed_point int_x_red;
    png_fixed_point int_y_red;
    png_fixed_point int_x_green;
    png_fixed_point int_y_green;
    png_fixed_point int_x_blue;
    png_fixed_point int_y_blue;
} png_info;
typedef png_info *png_infop;
typedef void *png_voidp;
typedef void (*png_progressive_info_ptr) (png_structp, png_infop);
typedef unsigned char png_byte;
typedef png_byte *png_bytep;
typedef unsigned long int png_uint_32;
typedef void (*png_progressive_row_ptr) (png_structp, png_bytep,
					 png_uint_32, int);
typedef void (*png_progressive_end_ptr) (png_structp, png_infop);
typedef struct png_color_8_struct {
    png_byte red;
    png_byte green;
    png_byte blue;
    png_byte gray;
    png_byte alpha;
} png_color_8;
typedef png_color_8 *png_color_8p;
typedef long int png_int_32;
typedef char *png_charp;
typedef size_t png_size_t;
typedef struct png_text_struct {
    int compression;
    png_charp key;
    png_charp text;
    png_size_t text_length;
} png_text;
typedef png_text *png_textp;
typedef png_byte **png_bytepp;
typedef unsigned short png_uint_16;
typedef struct png_color_16_struct {
    png_byte index;
    png_uint_16 red;
    png_uint_16 green;
    png_uint_16 blue;
    png_uint_16 gray;
} png_color_16;
typedef png_color_16 *png_color_16p;
typedef struct png_color_struct {
    png_byte red;
    png_byte green;
    png_byte blue;
} png_color;
typedef png_color *png_colorp;
typedef const char *png_const_charp;
typedef void (*png_error_ptr) (png_structp, png_const_charp);
typedef void (*png_rw_ptr) (png_structp, png_bytep, png_size_t);
typedef struct png_time_struct {
    png_uint_16 year;
    png_byte month;
    png_byte day;
    png_byte hour;
    png_byte minute;
    png_byte second;
} png_time;
typedef png_time *png_timep;
typedef png_uint_16 *png_uint_16p;
typedef void (*png_flush_ptr) (png_structp);
typedef char **png_charpp;
typedef png_struct **png_structpp;
typedef png_info **png_infopp;
typedef FILE *png_FILE_p;
typedef struct png_row_info_struct {
    png_uint_32 width;
    png_uint_32 rowbytes;
    png_byte color_type;
    png_byte bit_depth;
    png_byte channels;
    png_byte pixel_depth;
} png_row_info;
typedef png_row_info *png_row_infop;
typedef png_structp version_1_2_8;
typedef png_uint_32 *png_uint_32p;
typedef png_uint_16 **png_uint_16pp;
typedef png_int_32 png_fixed_point;
typedef double *png_doublep;
typedef charf *png_zcharp;
typedef png_fixed_point *png_fixed_point_p;
typedef png_int_32 *png_int_32p;
typedef z_stream *png_zstreamp;
typedef short png_int_16;
typedef png_int_16 *png_int_16p;
typedef png_int_16 **png_int_16pp;
typedef png_int_32 **png_int_32pp;
typedef png_uint_32 **png_uint_32pp;
typedef charf **png_zcharpp;
typedef char ***png_charppp;
typedef const char **png_const_charpp;
typedef double **png_doublepp;
typedef png_colorp *png_colorpp;
typedef png_color_16p *png_color_16pp;
typedef png_color_8p *png_color_8pp;
typedef png_fixed_point **png_fixed_point_pp;
typedef png_row_info **png_row_infopp;
typedef png_textp *png_textpp;
typedef png_timep *png_timepp;
typedef void (*png_user_transform_ptr) (png_structp, png_row_infop,
					png_bytep);
typedef void (*png_read_status_ptr) (png_structp, png_uint_32, int);
typedef void (*png_write_status_ptr) (png_structp, png_uint_32, int);
typedef int (*png_user_chunk_ptr) (png_structp, png_unknown_chunkp);
typedef png_voidp(*png_malloc_ptr) (png_structp, png_size_t);
typedef void (*png_free_ptr) (png_structp, png_voidp);
extern png_uint_32 png_access_version_number(void);
extern int png_check_sig(png_bytep sig, int num);
extern void png_convert_from_struct_tm(png_timep ptime, struct tm *ttime);
extern void png_convert_from_time_t(png_timep ptime, time_t ttime);
extern png_infop png_create_info_struct(png_structp png_ptr);
extern png_structp png_create_read_struct(png_const_charp user_png_ver,
					  png_voidp error_ptr,
					  png_error_ptr error_fn,
					  png_error_ptr warn_fn);
extern png_structp png_create_read_struct_2(png_const_charp user_png_ver,
					    png_voidp error_ptr,
					    png_error_ptr error_fn,
					    png_error_ptr warn_fn,
					    png_voidp mem_ptr,
					    png_malloc_ptr malloc_fn,
					    png_free_ptr free_fn);
extern png_structp png_create_write_struct(png_const_charp user_png_ver,
					   png_voidp error_ptr,
					   png_error_ptr error_fn,
					   png_error_ptr warn_fn);
extern png_structp png_create_write_struct_2(png_const_charp user_png_ver,
					     png_voidp error_ptr,
					     png_error_ptr error_fn,
					     png_error_ptr warn_fn,
					     png_voidp mem_ptr,
					     png_malloc_ptr malloc_fn,
					     png_free_ptr free_fn);
extern void png_data_freer(png_structp png_ptr, png_infop info_ptr,
			   int freer, png_uint_32 mask);
extern void png_destroy_info_struct(png_structp png_ptr,
				    png_infopp info_ptr_ptr);
extern void png_destroy_read_struct(png_structpp png_ptr_ptr,
				    png_infopp info_ptr_ptr,
				    png_infopp end_info_ptr_ptr);
extern void png_destroy_write_struct(png_structpp png_ptr_ptr,
				     png_infopp info_ptr_ptr);
extern void png_error(png_structp png_ptr, png_const_charp error_message);
extern void png_free(png_structp png_ptr, png_voidp ptr);
extern void png_free_data(png_structp png_ptr, png_infop info_ptr,
			  png_uint_32 free_me, int num);
extern png_uint_32 png_get_IHDR(png_structp png_ptr, png_infop info_ptr,
				png_uint_32 * width, png_uint_32 * height,
				int *bit_depth, int *color_type,
				int *interlace_method,
				int *compression_method,
				int *filter_method);
extern png_uint_32 png_get_PLTE(png_structp png_ptr, png_infop info_ptr,
				png_colorp * palette, int *num_palette);
extern png_uint_32 png_get_bKGD(png_structp png_ptr, png_infop info_ptr,
				png_color_16p * background);
extern png_byte png_get_bit_depth(png_structp png_ptr, png_infop info_ptr);
extern png_uint_32 png_get_cHRM(png_structp png_ptr, png_infop info_ptr,
				double *white_x, double *white_y,
				double *red_x, double *red_y,
				double *green_x, double *green_y,
				double *blue_x, double *blue_y);
extern png_byte png_get_channels(png_structp png_ptr, png_infop info_ptr);
extern png_byte png_get_color_type(png_structp png_ptr,
				   png_infop info_ptr);
extern png_voidp png_get_error_ptr(png_structp png_ptr);
extern png_uint_32 png_get_gAMA(png_structp png_ptr, png_infop info_ptr,
				double *file_gamma);
extern png_uint_32 png_get_hIST(png_structp png_ptr, png_infop info_ptr,
				png_uint_16p * hist);
extern png_charp png_get_header_ver(png_structp png_ptr);
extern png_uint_32 png_get_iCCP(png_structp png_ptr, png_infop info_ptr,
				png_charpp name, int *compression_type,
				png_charpp profile, png_uint_32 * proflen);
extern png_uint_32 png_get_image_height(png_structp png_ptr,
					png_infop info_ptr);
extern png_uint_32 png_get_image_width(png_structp png_ptr,
				       png_infop info_ptr);
extern png_byte png_get_interlace_type(png_structp png_ptr,
				       png_infop info_ptr);
extern png_voidp png_get_io_ptr(png_structp png_ptr);
extern png_charp png_get_libpng_ver(png_structp png_ptr);
extern png_uint_32 png_get_oFFs(png_structp png_ptr, png_infop info_ptr,
				png_int_32 * offset_x,
				png_int_32 * offset_y, int *unit_type);
extern png_uint_32 png_get_pHYs(png_structp png_ptr, png_infop info_ptr,
				png_uint_32 * res_x, png_uint_32 * res_y,
				int *unit_type);
extern png_voidp png_get_progressive_ptr(png_structp png_ptr);
extern png_uint_32 png_get_rowbytes(png_structp png_ptr,
				    png_infop info_ptr);
extern png_bytepp png_get_rows(png_structp png_ptr, png_infop info_ptr);
extern png_uint_32 png_get_sBIT(png_structp png_ptr, png_infop info_ptr,
				png_color_8p * sig_bit);
extern png_uint_32 png_get_sRGB(png_structp png_ptr, png_infop info_ptr,
				int *intent);
extern png_uint_32 png_get_tIME(png_structp png_ptr, png_infop info_ptr,
				png_timep * mod_time);
extern png_uint_32 png_get_tRNS(png_structp png_ptr, png_infop info_ptr,
				png_bytep * trans, int *num_trans,
				png_color_16p * trans_values);
extern png_uint_32 png_get_text(png_structp png_ptr, png_infop info_ptr,
				png_textp * text_ptr, int *num_text);
extern png_uint_32 png_get_unknown_chunks(png_structp png_ptr,
					  png_infop info_ptr,
					  png_unknown_chunkpp entries);
extern png_voidp png_get_user_chunk_ptr(png_structp png_ptr);
extern png_uint_32 png_get_valid(png_structp png_ptr, png_infop info_ptr,
				 png_uint_32 flag);
extern png_int_32 png_get_x_offset_pixels(png_structp png_ptr,
					  png_infop info_ptr);
extern png_uint_32 png_get_x_pixels_per_meter(png_structp png_ptr,
					      png_infop info_ptr);
extern png_int_32 png_get_y_offset_pixels(png_structp png_ptr,
					  png_infop info_ptr);
extern png_uint_32 png_get_y_pixels_per_meter(png_structp png_ptr,
					      png_infop info_ptr);
extern void png_info_init_3(png_infopp info_ptr,
			    png_size_t png_info_struct_size);
extern void png_init_io(png_structp png_ptr, png_FILE_p fp);
extern const char png_libpng_ver[];
extern png_voidp png_malloc(png_structp png_ptr, png_uint_32 size);
extern png_uint_32 png_permit_mng_features(png_structp png_ptr,
					   png_uint_32
					   mng_features_permitted);
extern void png_process_data(png_structp png_ptr, png_infop info_ptr,
			     png_bytep buffer, png_size_t buffer_size);
extern void png_progressive_combine_row(png_structp png_ptr,
					png_bytep old_row,
					png_bytep new_row);
extern void png_read_end(png_structp png_ptr, png_infop info_ptr);
extern void png_read_image(png_structp png_ptr, png_bytepp image);
extern void png_read_info(png_structp png_ptr, png_infop info_ptr);
extern void png_read_png(png_structp png_ptr, png_infop info_ptr,
			 int transforms, voidp params);
extern void png_read_row(png_structp png_ptr, png_bytep row,
			 png_bytep display_row);
extern void png_read_rows(png_structp png_ptr, png_bytepp row,
			  png_bytepp display_row, png_uint_32 num_rows);
extern void png_read_update_info(png_structp png_ptr, png_infop info_ptr);
extern void png_set_IHDR(png_structp png_ptr, png_infop info_ptr,
			 png_uint_32 width, png_uint_32 height,
			 int bit_depth, int color_type,
			 int interlace_method, int compression_method,
			 int filter_method);
extern void png_set_PLTE(png_structp png_ptr, png_infop info_ptr,
			 png_colorp palette, int num_palette);
extern void png_set_bKGD(png_structp png_ptr, png_infop info_ptr,
			 png_color_16p background);
extern void png_set_background(png_structp png_ptr,
			       png_color_16p background_color,
			       int background_gamma_code, int need_expand,
			       double background_gamma);
extern void png_set_bgr(png_structp png_ptr);
extern void png_set_cHRM(png_structp png_ptr, png_infop info_ptr,
			 double white_x, double white_y, double red_x,
			 double red_y, double green_x, double green_y,
			 double blue_x, double blue_y);
extern void png_set_compression_buffer_size(png_structp png_ptr,
					    png_uint_32 size);
extern void png_set_compression_level(png_structp png_ptr, int level);
extern void png_set_compression_mem_level(png_structp png_ptr,
					  int mem_level);
extern void png_set_compression_method(png_structp png_ptr, int method);
extern void png_set_compression_strategy(png_structp png_ptr,
					 int strategy);
extern void png_set_compression_window_bits(png_structp png_ptr,
					    int window_bits);
extern void png_set_dither(png_structp png_ptr, png_colorp palette,
			   int num_palette, int maximum_colors,
			   png_uint_16p histogram, int full_dither);
extern void png_set_error_fn(png_structp png_ptr, png_voidp error_ptr,
			     png_error_ptr error_fn,
			     png_error_ptr warning_fn);
extern void png_set_expand(png_structp png_ptr);
extern void png_set_filler(png_structp png_ptr, png_uint_32 filler,
			   int flags);
extern void png_set_filter(png_structp png_ptr, int method, int filters);
extern void png_set_gAMA(png_structp png_ptr, png_infop info_ptr,
			 double file_gamma);
extern void png_set_gamma(png_structp png_ptr, double screen_gamma,
			  double default_file_gamma);
extern void png_set_gray_1_2_4_to_8(png_structp png_ptr);
extern void png_set_gray_to_rgb(png_structp png_ptr);
extern void png_set_hIST(png_structp png_ptr, png_infop info_ptr,
			 png_uint_16p hist);
extern void png_set_iCCP(png_structp png_ptr, png_infop info_ptr,
			 png_charp name, int compression_type,
			 png_charp profile, png_uint_32 proflen);
extern int png_set_interlace_handling(png_structp png_ptr);
extern void png_set_invert_alpha(png_structp png_ptr);
extern void png_set_invert_mono(png_structp png_ptr);
extern void png_set_keep_unknown_chunks(png_structp png_ptr, int keep,
					png_bytep chunk_list,
					int num_chunks);
extern void png_set_mem_fn(png_structp png_ptr, png_voidp mem_ptr,
			   png_malloc_ptr malloc_fn, png_free_ptr free_fn);
extern void png_set_oFFs(png_structp png_ptr, png_infop info_ptr,
			 png_int_32 offset_x, png_int_32 offset_y,
			 int unit_type);
extern void png_set_pHYs(png_structp png_ptr, png_infop info_ptr,
			 png_uint_32 res_x, png_uint_32 res_y,
			 int unit_type);
extern void png_set_packing(png_structp png_ptr);
extern void png_set_packswap(png_structp png_ptr);
extern void png_set_palette_to_rgb(png_structp png_ptr);
extern void png_set_progressive_read_fn(png_structp png_ptr,
					png_voidp progressive_ptr,
					png_progressive_info_ptr info_fn,
					png_progressive_row_ptr row_fn,
					png_progressive_end_ptr end_fn);
extern void png_set_read_fn(png_structp png_ptr, png_voidp io_ptr,
			    png_rw_ptr read_data_fn);
extern void png_set_read_user_chunk_fn(png_structp png_ptr,
				       png_voidp user_chunk_ptr,
				       png_user_chunk_ptr
				       read_user_chunk_fn);
extern void png_set_read_user_transform_fn(png_structp png_ptr,
					   png_user_transform_ptr
					   read_user_transform_fn);
extern void png_set_rgb_to_gray(png_structp png_ptr, int error_action,
				double red, double green);
extern void png_set_rows(png_structp png_ptr, png_infop info_ptr,
			 png_bytepp row_pointers);
extern void png_set_sBIT(png_structp png_ptr, png_infop info_ptr,
			 png_color_8p sig_bit);
extern void png_set_sRGB(png_structp png_ptr, png_infop info_ptr,
			 int intent);
extern void png_set_sRGB_gAMA_and_cHRM(png_structp png_ptr,
				       png_infop info_ptr, int intent);
extern void png_set_shift(png_structp png_ptr, png_color_8p true_bits);
extern void png_set_sig_bytes(png_structp png_ptr, int num_bytes);
extern void png_set_strip_16(png_structp png_ptr);
extern void png_set_strip_alpha(png_structp png_ptr);
extern void png_set_swap(png_structp png_ptr);
extern void png_set_swap_alpha(png_structp png_ptr);
extern void png_set_tIME(png_structp png_ptr, png_infop info_ptr,
			 png_timep mod_time);
extern void png_set_tRNS(png_structp png_ptr, png_infop info_ptr,
			 png_bytep trans, int num_trans,
			 png_color_16p trans_values);
extern void png_set_tRNS_to_alpha(png_structp png_ptr);
extern void png_set_text(png_structp png_ptr, png_infop info_ptr,
			 png_textp text_ptr, int num_text);
extern void png_set_unknown_chunk_location(png_structp png_ptr,
					   png_infop info_ptr, int chunk,
					   int location);
extern void png_set_unknown_chunks(png_structp png_ptr, png_infop info_ptr,
				   png_unknown_chunkp unknowns,
				   int num_unknowns);
extern void png_set_write_fn(png_structp png_ptr, png_voidp io_ptr,
			     png_rw_ptr write_data_fn,
			     png_flush_ptr output_flush_fn);
extern void png_set_write_status_fn(png_structp png_ptr,
				    png_write_status_ptr write_row_fn);
extern void png_set_write_user_transform_fn(png_structp png_ptr,
					    png_user_transform_ptr
					    write_user_transform_fn);
extern int png_sig_cmp(png_bytep sig, png_size_t start,
		       png_size_t num_to_check);
extern void png_start_read_image(png_structp png_ptr);
extern void png_warning(png_structp png_ptr,
			png_const_charp warning_message);
extern void png_write_chunk(png_structp png_ptr, png_bytep chunk_name,
			    png_bytep data, png_size_t length);
extern void png_write_end(png_structp png_ptr, png_infop info_ptr);
extern void png_write_flush(png_structp png_ptr);
extern void png_write_image(png_structp png_ptr, png_bytepp image);
extern void png_write_info(png_structp png_ptr, png_infop info_ptr);
extern void png_write_png(png_structp png_ptr, png_infop info_ptr,
			  int transforms, voidp params);
extern void png_write_row(png_structp png_ptr, png_bytep row);
extern void png_write_rows(png_structp png_ptr, png_bytepp row,
			   png_uint_32 num_rows);
</SCREEN>
</SECT2>
</SECT1>
<SECT1 ID=libpng12man>
<TITLE>Interface Definitions for libpng12</TITLE>
<PARA>
The interfaces defined on the following pages are included in libpng12 and are defined
by this specification.
Unless otherwise noted, these interfaces shall be included
in the source standard.
</PARA>
<PARA>
Other interfaces listed in <XREF LINKEND=libpng12> shall behave as described
in the referenced base document.
</PARA>
<refentry id="libpng12.png.access.version.number.1">
<refmeta>
<refentrytitle>png_access_version_number</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_access_version_number</refname>
<refpurpose>return version of the run-time library</refpurpose>
<indexterm id="ix.libpng12.png.access.version.number.1">	<primary>png_access_version_number</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_uint_32
<function>png_access_version_number</function>
</funcdef>
<void>
</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_access_version_number() returns version of the libpng12 library available at
run-time.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
png_access_version_number() returns integer constructed from the major version,
minor version with leading zero and leading number with leading zero. For
example, the version number for version 1.2.8 is 10208.
</para>
</refsect1>
</refentry>


<refentry id="libpng12.png.check.sig.1">
<refmeta>
<refentrytitle>png_check_sig</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_check_sig</refname>
<refpurpose>INSERT PURPOSE HERE</refpurpose>
<indexterm id="ix.libpng12.png.check.sig.1">	<primary>png_check_sig</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>int
<function>png_check_sig</function>
</funcdef>
<paramdef>png_bytep
<parameter>arg0</parameter>
</paramdef>
<paramdef>int
<parameter>arg1</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
INSERT TEXT HERE
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
INSERT TEXT HERE
</para>
</refsect1>
<refsect1>
<title>Errors</title>
<para>
INSERT TEXT HERE
</para>
</refsect1>
</refentry>


<refentry id="libpng-png-convert-from-struct-tm-1">

<refmeta>
<refentrytitle>png_convert_from_struct_tm</refentrytitle>
<refmiscinfo>libpng</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_convert_from_struct_tm</refname>
<refpurpose>convert struct tm to png_time</refpurpose>
<indexterm id="ix-libpng-png-convert-from-struct-tm-1">
	<primary>png_convert_from_struct_tm</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_convert_from_struct_tm</function>
</funcdef>
<paramdef>png_timep
<parameter>ptime</parameter>
</paramdef>
<paramdef>struct tm *
<parameter>ttime</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>This interface shall convert from the <type>struct tm</type>
time format to the <type>png_time</type> format.
</para>
<para>The parameter <parameter>ttime</parameter> shall specify the 
<type>struct tm</type> value to convert to <type>png_time</type> format.
</para>
<para>The output parameter <parameter>ptime</parameter>
shall contain the converted value.
</para>
</refsect1>
</refentry>


<refentry id="libpng-png-convert-from-time-t-1">

<refmeta>
<refentrytitle>png_convert_from_time_t</refentrytitle>
<refmiscinfo>libpng</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_convert_from_time_t</refname>
<refpurpose>convert time_t to png_time</refpurpose>
<indexterm id="ix-libpng-png-convert-from-time-t-1">
	<primary>png_convert_from_time_t</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_convert_from_time_t</function>
</funcdef>
<paramdef>png_timep
<parameter>ptime</parameter>
</paramdef>
<paramdef>time_t
<parameter>ttime</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>This interface shall convert from the <type>time_t</type>
time format to the <type>png_time</type> format.
</para>
<para>The parameter <parameter>ttime</parameter> shall specify the 
<type>time_t</type> value to convert to <type>png_time</type> format.
</para>
<para>The output parameter <parameter>ptime</parameter>
shall contain the converted value.
</para>
</refsect1>
</refentry>


<refentry id="libpng12.png.create.info.struct.1">
<refmeta>
<refentrytitle>png_create_info_struct</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_create_info_struct</refname>
<refpurpose>allocate and initialize a png_info structure</refpurpose>
<indexterm id="ix.libpng12.png.create.info.struct.1">	<primary>png_create_info_struct</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_infop
<function>png_create_info_struct</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_create_info_struct() shall allocate and initialize a png_info structure.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
Returns the pointer to png_info structure. Returns NULL if it fails to create the structure.
</para>
</refsect1>
<refsect1>
<title>Errors</title>
<para>
png_create_info_struct() shall return NULL if the allocation fails. The
application should check for the return value.
</para>
</refsect1>
</refentry>


<refentry id="libpng12.png.create.read.struct.1">
<refmeta>
<refentrytitle>png_create_read_struct</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_create_read_struct</refname>
<refpurpose>allocate and initialize a png_struct structure for reading PNG file</refpurpose>
<indexterm id="ix.libpng12.png.create.read.struct.1">	<primary>png_create_read_struct</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_structp
<function>png_create_read_struct</function>
</funcdef>
<paramdef>png_const_charp
<parameter>user_png_ver</parameter>
</paramdef>
<paramdef>png_voidp
<parameter>error_ptr</parameter>
</paramdef>
<paramdef>png_error_ptr
<parameter>error_fn</parameter>
</paramdef>
<paramdef>png_error_ptr
<parameter>warn_fn</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_create_read_struct() shall allocate and initialize a png_struct
structure. The function shall return NULL if the allocation fails. The
application should check for the return value.
For handling errors and warnings, the application can pass desired error
handling routines as arguments to png_create_read_struct(). Otherwise, the
default error handling uses stderr and longjmp.  The error handling routine
must NOT return to the calling routine.

<variablelist>
<varlistentry>
<term><parameter>user_png_ver</parameter></term>
<listitem><para> version string of the library. Must be
PNG_LIBPNG_VER_STRING</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>error_ptr</parameter></term>
<listitem><para>user defined struct for error functions.</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>error_fn</parameter></term> 
<listitem><para>user defined function for printing errors and aborting.</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>warn_fn</parameter></term> 
<listitem><para>user defined function for warnings.</para></listitem>
</varlistentry>
</variablelist>
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
Returns the pointer to png_struct structure. Returns NULL if it fails to create
the structure.
</para>
</refsect1>
<refsect1>
<title>Errors</title>
<para>
png_create_read_struct() shall return NULL if the allocation fails. The
application should check for the return value.
</para>
</refsect1>
</refentry>


<refentry id="libpng-png-create-read-struct-2-1">

<refmeta>
<refentrytitle>png_create_read_struct_2</refentrytitle>
<refmiscinfo>libpng</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_create_read_struct_2</refname>
<refpurpose>register custom read function</refpurpose>
<indexterm id="ix-libpng-png-create-read-struct-2-1">
	<primary>png_create_read_struct_2</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_structp
<function>png_create_read_struct_2</function>
</funcdef>
<paramdef>png_const_charp
<parameter>user_png_ver</parameter>
</paramdef>
<paramdef>png_voidp
<parameter>error_ptr</parameter>
</paramdef>
<paramdef>png_error_ptr
<parameter>error_fn</parameter>
</paramdef>
<paramdef>png_error_ptr
<parameter>warn_fn</parameter>
</paramdef>
<paramdef>png_voidp
<parameter>mem_ptr</parameter>
</paramdef>
<paramdef>png_malloc_ptr
<parameter>malloc_fn</parameter>
</paramdef>
<paramdef>png_free_ptr
<parameter>free_fn</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>

<refsect1>
<title>Description</title>
<para>This interface shall register a custom read function 
and allocate and initialize a <type>png_struct</type> structure.
For handling errors and warnings, as well as allocating and deallocating memory,
the application can pass functions as arguments.
Otherwise, the default error handling functions
<varname>stderr</varname> and <function>longjmp</function> will be used. 
The error handling routine must not return to the calling routine.</para>

<para>The parameter <parameter>user_png_ver</parameter> 
shall specify the version string of the library, which
must be <constant>PNG_LIBPNG_VER_STRING</constant>.</para>
<para>The parameter <parameter>error_ptr</parameter> shall specify a user-defined structure for error functions.</para>
<para>The parameter <parameter>error_fn</parameter> shall specify an optional user-defined
function for printing errors and aborting.</para>
<para>The parameter <parameter>warn_fn</parameter> shall specify an optional user-defined function for warnings.</para>
<para>The parameter <parameter>mem_ptr</parameter> shall specify the memory to allocate.</para>
<para>The parameter <parameter>malloc_fn</parameter> shall specify an optional user-defined memory allocation function.</para>
<para>The parameter <parameter>free_fn</parameter> shall specify an optional user-defined memory deallocation function.</para>
</refsect1>

<refsect1>
<title>Application Usage (informative)</title>
<para>
You should define <constant>PNG_USER_MEM_SUPPORTED</constant>
before you call <function>png_create_read_struct2</function>.
</para>
</refsect1>
</refentry>


<refentry id="libpng12.png.create.write.struct.1">
<refmeta>
<refentrytitle>png_create_write_struct</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_create_write_struct</refname>
<refpurpose>allocate and initialize a png_struct structure for writing PNG file</refpurpose>
<indexterm id="ix.libpng12.png.create.write.struct.1">	<primary>png_create_write_struct</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_structp
<function>png_create_write_struct</function>
</funcdef>
<paramdef>png_const_charp
<parameter>user_png_ver</parameter>
</paramdef>
<paramdef>png_voidp
<parameter>error_ptr</parameter>
</paramdef>
<paramdef>png_error_ptr
<parameter>error_fn</parameter>
</paramdef>
<paramdef>png_error_ptr
<parameter>warn_fn</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_create_write_struct() shall allocate and initialize a png_struct
structure. The function shall return NULL if the allocation fails. The
application should check for the return value.
<variablelist>
<varlistentry>
<term><parameter>user_png_ver</parameter></term>
<listitem><para> version string of the library. Must be
PNG_LIBPNG_VER_STRING</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>error_ptr</parameter></term>
<listitem><para>user defined struct for error functions.</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>error_fn</parameter></term> 
<listitem><para>user defined function for printing errors and aborting.</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>warn_fn</parameter></term> 
<listitem><para>user defined function for warnings.</para></listitem>
</varlistentry>
</variablelist>

</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
Returns the pointer to png_struct structure. Returns NULL if it fails to create the structure.
</para>
</refsect1>
</refentry>


<refentry id="libpng-png-create-write-struct-2-1">

<refmeta>
<refentrytitle>png_create_write_struct_2</refentrytitle>
<refmiscinfo>libpng</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_create_write_struct_2</refname>
<refpurpose>register custom write function</refpurpose>
<indexterm id="ix-libpng-png-create-write-struct-2-1">
	<primary>png_create_write_struct_2</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_structp
<function>png_create_write_struct_2</function>
</funcdef>
<paramdef>png_const_charp
<parameter>user_png_ver</parameter>
</paramdef>
<paramdef>png_voidp
<parameter>error_ptr</parameter>
</paramdef>
<paramdef>png_error_ptr
<parameter>error_fn</parameter>
</paramdef>
<paramdef>png_error_ptr
<parameter>warn_fn</parameter>
</paramdef>
<paramdef>png_voidp
<parameter>mem_ptr</parameter>
</paramdef>
<paramdef>png_malloc_ptr
<parameter>malloc_fn</parameter>
</paramdef>
<paramdef>png_free_ptr
<parameter>free_fn</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>

<refsect1>
<title>Description</title>
<para>This interface shall register a custom write function 
and allocate and initialize a <type>png_struct</type> structure.
For handling errors and warnings, as well as allocating and deallocating memory,
the application can pass functions as arguments.
Otherwise, the default error handling functions 
<varname>stderr</varname> and <function>longjmp</function> will be used. 
The error handling routine must not return to the calling routine.</para>

<para>The parameter <parameter>user_png_ver</parameter> shall specify the version string of the library,
which must be <constant>PNG_LIBPNG_VER_STRING</constant>.</para>
<para>The parameter <parameter>error_ptr</parameter> shall specify a user-defined structure for error functions.</para>
<para>The parameter <parameter>error_fn</parameter> shall specify an optional user-defined
function for printing errors and aborting.</para>
<para>The parameter <parameter>warn_fn</parameter> shall specify an optional user-defined function for warnings.</para>
<para>The parameter <parameter>mem_ptr</parameter> shall specify the memory to allocate.</para>
<para>The parameter <parameter>malloc_fn</parameter> shall specify an optional user-defined memory allocation function.</para>
<para>The parameter <parameter>free_fn</parameter> shall specify an optional user-defined memory deallocation function.</para>
</refsect1>

<refsect1>
<title>Return Value</title>
<para>
On success, returns a pointer to the <type>png_struct</type> that was created.
</para>
<para>
On failure, returns NULL.
</para>
</refsect1>

</refentry>


<refentry id="libpng-png-data-freer-1">

<refmeta>
<refentrytitle>png_data_freer</refentrytitle>
<refmiscinfo>libpng</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_data_freer</refname>
<refpurpose>change the default behavior for freeing data</refpurpose>
<indexterm id="ix-libpng-png-data-freer-1">
	<primary>png_data_freer</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_data_freer</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>int
<parameter>freer</parameter>
</paramdef>
<paramdef>png_uint_32
<parameter>mask</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
              
<refsect1>
<title>Description</title>
<para>This interface shall change the default behavior for freeing allocated data,
from only freeing data allocated internally by libpng,
to either freeing user-allocated data or to not freeing any data at all.
</para>
<para>
This interface can enable deallocation of user data allocated with 
<function>png_malloc</function> or <function>png_zalloc</function>
and passed to libpng with one of the png_set_*() interfaces.
Users can call it both before and after passing the data.
Calling it after reading PNG data but before passing the data 
controls whether the user or the interface
is responsible for the existing data.
Calling it after passing the data controls whether 
the user or the interface should deallocate the data.
</para>
<para>
If the user becomes responsible for data allocated by libpng,
<function>png_free</function> must be called
to free it. If libpng becomes responsible for user-allocated data,
the data must only have been allocated with 
<function>png_malloc</function> or <function>png_zalloc</function>.
</para>

<para>The parameter <parameter>png_ptr</parameter> shall specify the PNG file.</para>
<para>The parameter <parameter>info_ptr</parameter> shall specify the PNG info structure.</para>
<para>The parameter <parameter>freer</parameter> shall specify one of these constants:
<constant>PNG_DESTROY_WILL_FREE_DATA</constant>,
<constant>PNG_SET_WILL_FREE_DATA</constant>,
<constant>PNG_USER_WILL_FREE_DATA</constant>.         
</para>
<para>The parameter <parameter>mask</parameter> shall specify the data to free,
as described under <function>png_free_data</function>.
</para>
</refsect1>

<REFSECT1>
<TITLE>Application Usage (informative)
</TITLE>
<para>
A <varname>row_pointers</varname> array allocated in a single block
must not be freed with
<function>png_set_rows</function> or <function>png_read_destroy</function>,
because they would attempt to free the elements of the array as well.
</para>
<para>
Do not free <varname>text_ptr</varname> with libpng
if some of its members were allocated separately,
because this will actually only free <varname>text_ptr.key</varname>.
If responsibility for freeing <varname>text_ptr</varname> moves 
from libpng to the user, the user
must not free the members separately.
</para>
</REFSECT1>

</refentry>


<refentry id="libpng-png-destroy-info-struct-1">

<refmeta>
<refentrytitle>png_destroy_info_struct</refentrytitle>
<refmiscinfo>libpng</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_destroy_info_struct</refname>
<refpurpose>free memory in PNG info structure</refpurpose>
<indexterm id="ix-libpng-png-destroy-info-struct-1">
	<primary>png_destroy_info_struct</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_destroy_info_struct</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infopp
<parameter>info_ptr_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>

<refsect1>
<title>Description</title>
<para>This interface shall free any memory in a single PNG info structure.</para>
<para>The parameter <parameter>png_ptr</parameter> shall specify the PNG file.</para>
<para>The parameter <parameter>info_ptr_ptr</parameter> shall point to a pointer to the
<type>png_info_struct</type> to destroy.
</para>
</refsect1>

</refentry>


<refentry id="libpng12.png.destroy.read.struct.1">
<refmeta>
<refentrytitle>png_destroy_read_struct</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_destroy_read_struct</refname>
<refpurpose>free the memory associated with read png_struct</refpurpose>
<indexterm id="ix.libpng12.png.destroy.read.struct.1">	<primary>png_destroy_read_struct</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_destroy_read_struct</function>
</funcdef>
<paramdef>png_structpp
<parameter>png_ptr_ptr</parameter>
</paramdef>
<paramdef>png_infopp
<parameter>info_ptr_ptr</parameter>
</paramdef>
<paramdef>png_infopp
<parameter>end_info_ptr_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_destroy_read_struct() frees the memory associated with the read png_struct
struct that holds information from the given PNG file,
the associated png_info struct for holding the image information and
png_info struct for holding the information at end of the given PNG file.
</para>
</refsect1>
</refentry>


<refentry id="libpng12.png.destroy.write.struct.1">
<refmeta>
<refentrytitle>png_destroy_write_struct</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_destroy_write_struct</refname>
<refpurpose>free the memory associated with write png_struct</refpurpose>
<indexterm id="ix.libpng12.png.destroy.write.struct.1">	<primary>png_destroy_write_struct</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_destroy_write_struct</function>
</funcdef>
<paramdef>png_structpp
<parameter>png_ptr_ptr</parameter>
</paramdef>
<paramdef>png_infopp
<parameter>info_ptr_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_destroy_write_struct() frees the memory associated with the write png_struct
struct that holds information for writing the PNG file and
the associated png_info struct for holding the image information.
</para>
</refsect1>
</refentry>


<refentry id="libpng12.png.error.1">
<refmeta>
<refentrytitle>png_error</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_error</refname>
<refpurpose>default function to handle fatal errors</refpurpose>
<indexterm id="ix.libpng12.png.error.1">	<primary>png_error</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_error</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_const_charp
<parameter>error_message</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_error() is the default error handling function for fatal errors. The
default error handling functionality may be changed by using png_set_error_fn()
to replace the error function at run-time.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
</para>
</refsect1>
<refsect1>
<title>Errors</title>
<para>
</para>
</refsect1>
</refentry>


<refentry id="libpng12.png.free.1">
<refmeta>
<refentrytitle>png_free</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_free</refname>
<refpurpose>free a pointer allocated by png_malloc()</refpurpose>
<indexterm id="ix.libpng12.png.free.1">	<primary>png_free</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_free</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_voidp
<parameter>ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_free() shall free memory pointed to by "ptr" previously allocated by
png_malloc().
</para>
</refsect1>
</refentry>


<refentry id="libpng-png-free-data-1">

<refmeta>
<refentrytitle>png_free_data</refentrytitle>
<refmiscinfo>libpng</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_free_data</refname>
<refpurpose>free internally allocated data</refpurpose>
<indexterm id="ix-libpng-png-free-data-1">
	<primary>png_free_data</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_free_data</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>png_uint_32
<parameter>free_me</parameter>
</paramdef>
<paramdef>int
<parameter>num</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>

<refsect1>
<title>Description</title>
<para>This interface shall free data that was internally allocated by libpng.</para>

<para>The parameter <parameter>png_ptr</parameter> shall specify the PNG file.</para>
<para>The parameter <parameter>info_ptr</parameter> shall specify
the PNG info structure containing members to free 
that are pointing to memory allocated by libpng.
</para>
<para>The parameter <parameter>mask</parameter> shall specify
the data to free with a mask consisting of the logical OR of at least one
of the following constants: 
<constant>PNG_FREE_HIST</constant>,
<constant>PNG_FREE_ICCP</constant>,
<constant>PNG_FREE_PCAL</constant>,
<constant>PNG_FREE_PLTE</constant>,
<constant>PNG_FREE_ROWS</constant>,
<constant>PNG_FREE_SCAL</constant>,
<constant>PNG_FREE_SPLT</constant>,
<constant>PNG_FREE_TEXT</constant>,
<constant>PNG_FREE_TRNS</constant>,
<constant>PNG_FREE_UNKN</constant>.
(To specify all constants, use <constant>PNG_FREE_ALL</constant>.)
</para>
<para>The parameter <parameter>num</parameter> shall specify the sequence 
number of the item to free. The value <literal>-1</literal> specifies
all items.
</para>
</refsect1>
</refentry>


<refentry id="libpng12.png.get.IHDR.1">
<refmeta>
<refentrytitle>png_get_IHDR</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_get_IHDR</refname>
<refpurpose>get PNG_IHDR chunk information from png_info structure</refpurpose>
<indexterm id="ix.libpng12.png.get.IHDR.1">	<primary>png_get_IHDR</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_uint_32
<function>png_get_IHDR</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>png_uint_32 *
<parameter>width</parameter>
</paramdef>
<paramdef>png_uint_32 *
<parameter>height</parameter>
</paramdef>
<paramdef>int *
<parameter>bit_depth</parameter>
</paramdef>
<paramdef>int *
<parameter>color_type</parameter>
</paramdef>
<paramdef>int *
<parameter>interlace_method</parameter>
</paramdef>
<paramdef>int *
<parameter>compression_method</parameter>
</paramdef>
<paramdef>int *
<parameter>filter_method</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_get_IHDR() gets PNG_IHDR chunk type information from png_info structure.
<variablelist>
<varlistentry>
<term><parameter>width</parameter></term>
<listitem><para>holds the width of the image in pixels up to
2^31.</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>height</parameter></term>
<listitem><para>holds the height of the image in pixels up to
2^31.</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>bit_depth</parameter></term>
<listitem><para>holds the bit depth of one of the image channels. Valid values
are 1, 2, 4, 8, 16 and also depend on the color_type.</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>color_type</parameter></term>
<listitem><para>describes which color/alpha channels are present.
Supported color types shall include:
<simplelist>
<member>PNG_COLOR_TYPE_GRAY  (bit depths 1, 2, 4, 8, 16) </member>
<member>PNG_COLOR_TYPE_GRAY_ALPHA (bit depths 8, 16) </member>
<member>PNG_COLOR_TYPE_PALETTE (bit depths 1, 2, 4, 8) </member>
<member>PNG_COLOR_TYPE_RGB (bit_depths 8, 16) </member>
<member>PNG_COLOR_TYPE_RGB_ALPHA (bit_depths 8, 16) </member>
<member>PNG_COLOR_MASK_PALETTE </member>
<member>PNG_COLOR_MASK_COLOR </member>
<member>PNG_COLOR_MASK_ALPHA </member>
</simplelist>
</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>filter_method</parameter></term>
<listitem><para>holds the filter method. If this argument is NULL, the
filter method will not be retrieved. Valid values after retrieval are
<simplelist>
<member>PNG_FILTER_TYPE_BASE </member>
<member>PNG_INTRAPIXEL_DIFFERENCING</member>
</simplelist>
</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>compression_method</parameter></term>
<listitem><para>holds the compression method. If this argument is NULL, the
compression method will not be retrieved. Valid values after retrieval are
PNG_COMPRESSION_TYPE_BASE</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>interlace_method</parameter></term>
<listitem><para>holds the interlace method. If this argument is NULL, the
interlacing method will not be retrieved. Valid values after retrieval are
<simplelist>
<member>PNG_INTERLACE_NONE</member>
<member>PNG_INTERLACE_ADAM7</member>
</simplelist>
</para></listitem>
</varlistentry>
</variablelist>
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
On success, <function>png_get_HDR</function> shall return 1. Otherwise,
<function>png_get_IHDR</function> shall return 0.
</para>
</refsect1>
</refentry>


<refentry id="libpng12.png.get.PLTE.1">
<refmeta>
<refentrytitle>png_get_PLTE</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_get_PLTE</refname>
<refpurpose>get image palette information from png_info structure</refpurpose>
<indexterm id="ix.libpng12.png.get.PLTE.1">	<primary>png_get_PLTE</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_uint_32
<function>png_get_PLTE</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>png_colorp *
<parameter>palette</parameter>
</paramdef>
<paramdef>int *
<parameter>num_palette</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_get_PLTE() gets palette information from png_info structure. "palette" 
holds an array of color values with "num_palette" entries.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
On successful retrieval of palette information, png_get_PLTE() shall return
PNG_INFO_PLTE. Otherwise, png_get_PLTE() shall return 0.
</para>
</refsect1>
</refentry>


<refentry id="libpng12.png.get.bKGD.1">
<refmeta>
<refentrytitle>png_get_bKGD</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_get_bKGD</refname>
<refpurpose>get background color for given image</refpurpose>
<indexterm id="ix.libpng12.png.get.bKGD.1">	<primary>png_get_bKGD</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_uint_32
<function>png_get_bKGD</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>png_color_16p *
<parameter>background</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_get_bKGD() shall return the background color to "background" if the validity
flag for background is set.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
On success, png_get_bKGD() shall return PNG_INFO_bKGD. Otherwise, png_get_bKGD()
shall return 0.
</para>
</refsect1>
</refentry>


<refentry id="libpng12.png.get.bit.depth.1">
<refmeta>
<refentrytitle>png_get_bit_depth</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_get_bit_depth</refname>
<refpurpose>return image bit_depth</refpurpose>
<indexterm id="ix.libpng12.png.get.bit.depth.1">	<primary>png_get_bit_depth</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_byte
<function>png_get_bit_depth</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Returns the image bit_depth.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
Returns 0 if png_ptr or info_ptr is NULL, bit_depth otherwise.
</para>
</refsect1>

</refentry>


<refentry id="libpng12.png.get.cHRM.1">
<refmeta>
<refentrytitle>png_get_cHRM</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_get_cHRM</refname>
<refpurpose>get CIE chromacities and referenced white point for given image</refpurpose>
<indexterm id="ix.libpng12.png.get.cHRM.1">	<primary>png_get_cHRM</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_uint_32
<function>png_get_cHRM</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>double *
<parameter>white_x</parameter>
</paramdef>
<paramdef>double *
<parameter>white_y</parameter>
</paramdef>
<paramdef>double *
<parameter>red_x</parameter>
</paramdef>
<paramdef>double *
<parameter>red_y</parameter>
</paramdef>
<paramdef>double *
<parameter>green_x</parameter>
</paramdef>
<paramdef>double *
<parameter>green_y</parameter>
</paramdef>
<paramdef>double *
<parameter>blue_x</parameter>
</paramdef>
<paramdef>double *
<parameter>blue_y</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_get_cHRM() shall return the CIE x,y chromaticities of the red, green and
blue display primaries used in the image and the referenced white point from the
cHRM chunk in the image.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
On success, png_get_cHRM() shall return PNG_INFO_cHRM. Otherwise, the function
shall return 0.
</para>
</refsect1>
</refentry>


<refentry id="libpng12.png.get.channels.1">
<refmeta>
<refentrytitle>png_get_channels</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_get_channels</refname>
<refpurpose>get number of color channels in image</refpurpose>
<indexterm id="ix.libpng12.png.get.channels.1">	<primary>png_get_channels</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_byte
<function>png_get_channels</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_get_channels() shall return the number of data channels per pixel for the
color type of the image. The number of channels shall range from 1-4 depending
on the color type as given below.
<simplelist>
<member>1 - PNG_COLOR_TYPE_GRAY or PNG_COLOR_TYPE_PALETTE </member>
<member>2 - PNG_COLOR_TYPE_GRAY_ALPHA </member>
<member>3 - PNG_COLOR_TYPE_RGB </member>
<member>4 - PNG_COLOR_TYPE_RGB_ALPHA or PNG_COLOR_TYPE_RGB+filler byte </member>
</simplelist>
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
On success, png_get_channels() shall return the number of channels ranging from
1-4. Otherwise, png_get_channels shall return 0.
</para>
</refsect1>
</refentry>


<refentry id="libpng12.png.get.color.type.1">
<refmeta>
<refentrytitle>png_get_color_type</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_get_color_type</refname>
<refpurpose>return image color type</refpurpose>
<indexterm id="ix.libpng12.png.get.color.type.1">	<primary>png_get_color_type</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_byte
<function>png_get_color_type</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Returns the image color type.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
Returns 0 if png_ptr or info_ptr is NULL, color_type otherwise.
</para>
</refsect1>
</refentry>


<refentry id="libpng12.png.get.error.ptr.1">
<refmeta>
<refentrytitle>png_get_error_ptr</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_get_error_ptr</refname>
<refpurpose>return error_ptr for user-defined functions</refpurpose>
<indexterm id="ix.libpng12.png.get.error.ptr.1">	<primary>png_get_error_ptr</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_voidp
<function>png_get_error_ptr</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_get_error_ptr() returns the error_ptr associated with user-defined
functions. 
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
Returns error_ptr
</para>
</refsect1>

</refentry>


<refentry id="libpng12.png.get.gAMA.1">
<refmeta>
<refentrytitle>png_get_gAMA</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_get_gAMA</refname>
<refpurpose>get the gamma value for given image</refpurpose>
<indexterm id="ix.libpng12.png.get.gAMA.1">	<primary>png_get_gAMA</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_uint_32
<function>png_get_gAMA</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>double *
<parameter>file_gamma</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Returns the gamma value of an image to "file_gamma" if the gAMA chunk
information is valid for the image.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
PNG_INFO_gAMA - if png_ptr, info_ptr, file_gamma are not NULL and gAMA chunk
information is valid
0 - otherwise.
</para>
</refsect1>
</refentry>


<refentry id="libpng12.png.get.hIST.1">
<refmeta>
<refentrytitle>png_get_hIST</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_get_hIST</refname>
<refpurpose>get the histogram for given image</refpurpose>
<indexterm id="ix.libpng12.png.get.hIST.1">	<primary>png_get_hIST</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_uint_32
<function>png_get_hIST</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>png_uint_16p *
<parameter>hist</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Returns the histogram of an image to *hist if the hIST chunk information is valid
for the image.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
PNG_INFO_hIST - if png_ptr, info_ptr, hist are not NULL and hIST chunk
information is valid
0 - otherwise.
</para>
</refsect1>
</refentry>


<refentry id="libpng-png-get-header-ver-1">

<refmeta>
<refentrytitle>png_get_header_ver</refentrytitle>
<refmiscinfo>libpng</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_get_header_ver</refname>
<refpurpose>get version information for libpng header files</refpurpose>
<indexterm id="ix-libpng-png-get-header-ver-1">
	<primary>png_get_header_ver</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_charp
<function>png_get_header_ver</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
</funcprototype>
</funcsynopsis>
</refsynopsisdiv>

<refsect1>
<title>Description</title>
<para>This interface shall return the version of the header files used when building libpng 
as a short string in the format "1.0.0" through "99.99.99zz".</para>
</refsect1>

</refentry>


<refentry id="libpng12.png.get.iCCP.1">
<refmeta>
<refentrytitle>png_get_iCCP</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_get_iCCP</refname>
<refpurpose>get the embedded ICC profile data for given image</refpurpose>
<indexterm id="ix.libpng12.png.get.iCCP.1">	<primary>png_get_iCCP</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_uint_32
<function>png_get_iCCP</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>png_charpp 
<parameter>name</parameter>
</paramdef>
<paramdef>int * 
<parameter>compression_type</parameter>
</paramdef>
<paramdef>png_charpp 
<parameter>profile</parameter>
</paramdef>
<paramdef>png_uint_32 * 
<parameter>proflen</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_get_iCCP() shall return the embedded ICC profile data in iCCP chunk.
"name" shall contain the profile name, *compression_type shall contain the 
compression type, profile shall contain teh International Color Consortium color 
profile data and *proflen shall contain the length of the profile data in bytes.
*compression_type must always be set to PNG_COMPRESSION_TYPE_BASE.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
On success, png_get_iCCP() shall return PNG_INFO_iCCP. Otherwise, the function
shall return 0.
</para>
</refsect1>
</refentry>


<refentry id="libpng12.png.get.image.height.1">
<refmeta>
<refentrytitle>png_get_image_height</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_get_image_height</refname>
<refpurpose>return image height</refpurpose>
<indexterm id="ix.libpng12.png.get.image.height.1">	<primary>png_get_image_height</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_uint_32
<function>png_get_image_height</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_get_image_height() returns the image height in pixels.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
Returns 0 if png_ptr or info_ptr is NULL, image_height otherwise.
</para>
</refsect1>

</refentry>


<refentry id="libpng12.png.get.image.width.1">
<refmeta>
<refentrytitle>png_get_image_width</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_get_image_width</refname>
<refpurpose>return image width</refpurpose>
<indexterm id="ix.libpng12.png.get.image.width.1">	<primary>png_get_image_width</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_uint_32
<function>png_get_image_width</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_get_image_width() returns the image width in pixels.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
Returns 0 if png_ptr or info_ptr is NULL, image_width otherwise.
</para>
</refsect1>

</refentry>


<refentry id="libpng12.png.get.interlace.type.1">
<refmeta>
<refentrytitle>png_get_interlace_type</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_get_interlace_type</refname>
<refpurpose>returns interlace method</refpurpose>
<indexterm id="ix.libpng12.png.get.interlace.type.1">	<primary>png_get_interlace_type</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_byte
<function>png_get_interlace_type</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_get_interlace_type() returns the interlace method used for the image.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
Valid values are PNG_INTERLACE_NONE, PNG_INTERLACE_ADAM7. 
Returns 0 if png_ptr or info_ptr is NULL.
</para>
</refsect1>

</refentry>


<refentry id="libpng12.png.get.io.ptr.1">
<refmeta>
<refentrytitle>png_get_io_ptr</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_get_io_ptr</refname>
<refpurpose>return pointer for user-defined I/O</refpurpose>
<indexterm id="ix.libpng12.png.get.io.ptr.1">	<primary>png_get_io_ptr</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_voidp
<function>png_get_io_ptr</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Returns the pointer associated with user-defined input-output functions.
</para>
</refsect1>


</refentry>


<refentry id="libpng12.png.get.libpng.ver.1">
<refmeta>
<refentrytitle>png_get_libpng_ver</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_get_libpng_ver</refname>
<refpurpose>get the library version string</refpurpose>
<indexterm id="ix.libpng12.png.get.libpng.ver.1">	<primary>png_get_libpng_ver</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_charp
<function>png_get_libpng_ver</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_get_libpng_ver() shall return the library version as a short string in the
format "1.0.0" through "99.99.99zz".
</para>
</refsect1>
</refentry>


<refentry id="libpng12.png.get.oFFs.1">
<refmeta>
<refentrytitle>png_get_oFFs</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_get_oFFs</refname>
<refpurpose>get screen offsets for the given image</refpurpose>
<indexterm id="ix.libpng12.png.get.oFFs.1">	<primary>png_get_oFFs</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_uint_32
<function>png_get_oFFs</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>png_int_32 *
<parameter>x_offset</parameter>
</paramdef>
<paramdef>png_int_32 *
<parameter>y_offset</parameter>
</paramdef>
<paramdef>int *
<parameter>unit_type</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_get_oFFs() shall read the positive offset from the left edge of the screen
from info_ptr to x_offset and the positive offset from the top edge of the
screen to y_offset. The unit type shall be returned in unit_type, which can take
the following values
<simplelist>
<member> PNG_OFFSET_PIXEL </member>
<member> PNG_OFFSET_MICROMETER </member>
</simplelist>
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
On success, png_get_oFFs() shall return PNG_INFO_oFFs. Otherwise, png_get_oFFs()
shall return 0.
</para>
</refsect1>
</refentry>


<refentry id="libpng12.png.get.pHYs.1">
<refmeta>
<refentrytitle>png_get_pHYs</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_get_pHYs</refname>
<refpurpose>get the physical resolution for given image</refpurpose>
<indexterm id="ix.libpng12.png.get.pHYs.1">	<primary>png_get_pHYs</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_uint_32
<function>png_get_pHYs</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>png_uint_32 *
<parameter>res_x</parameter>
</paramdef>
<paramdef>png_uint_32 *
<parameter>res_y</parameter>
</paramdef>
<paramdef>int *
<parameter>unit_type</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_get_pHYs() shall return the physical pixel resolution of the image and the
unit of resolution. Upon success, *res_x shall contain the horizontal resolution
and *res_y shall contain the vertical resolution in pixels per unit. *unit_type
will be set to PNG_RESOLUTION_METER if the resolution is expressed in pixels per
meter. Otherwise *unit_type will be PNG_RESOLUTION_UNKNOWN.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
PNG_INFO_pHYs - on success
0 - otherwise.
</para>
</refsect1>
</refentry>


<refentry id="libpng12.png.get.progressive.ptr.1">
<refmeta>
<refentrytitle>png_get_progressive_ptr</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_get_progressive_ptr</refname>
<refpurpose>return pointer to user-defined push read functions</refpurpose>
<indexterm id="ix.libpng12.png.get.progressive.ptr.1">	<primary>png_get_progressive_ptr</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_voidp
<function>png_get_progressive_ptr</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Returns the pointer to user-defined structure containing information about the
callback functions.
</para>
</refsect1>
</refentry>


<refentry id="libpng12.png.get.rowbytes.1">
<refmeta>
<refentrytitle>png_get_rowbytes</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_get_rowbytes</refname>
<refpurpose>Return number of bytes for a row</refpurpose>
<indexterm id="ix.libpng12.png.get.rowbytes.1">	<primary>png_get_rowbytes</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_uint_32
<function>png_get_rowbytes</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_get_rowbytes() returns the number of bytes needed to hold a transformed row
of an image.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
Returns 0 if png_ptr or info_ptr is NULL, number of bytes otherwise.
</para>
</refsect1>

</refentry>


<refentry id="libpng12.png.get.rows.1">
<refmeta>
<refentrytitle>png_get_rows</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_get_rows</refname>
<refpurpose>retrieve image data from png_info structure</refpurpose>
<indexterm id="ix.libpng12.png.get.rows.1">	<primary>png_get_rows</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_bytepp
<function>png_get_rows</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_get_rows() shall retrieve rows of image data from the info_ptr structure
in an array of pointers to the pixel data for each row.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
On success, png_get_rows() shall return an array of pointers to the pixel data
for each row of the image.
</para>
</refsect1>
</refentry>


<refentry id="libpng12.png.get.sBIT.1">
<refmeta>
<refentrytitle>png_get_sBIT</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_get_sBIT</refname>
<refpurpose>get number of significant bits for each color channel</refpurpose>
<indexterm id="ix.libpng12.png.get.sBIT.1">	<primary>png_get_sBIT</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_uint_32
<function>png_get_sBIT</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>png_color_8p *
<parameter>sig_bit</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_get_sBIT() shall return the number of significant bit for each of the gray,
red, blue and green color channels.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
On success, png_get_sBIT() shall return PNG_INFO_sBIT. Otherwise, png_get_sBIT()
shall return 0.
</para>
</refsect1>
</refentry>


<refentry id="libpng12.png.get.sRGB.1">
<refmeta>
<refentrytitle>png_get_sRGB</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_get_sRGB</refname>
<refpurpose>get the rendering intent for given image</refpurpose>
<indexterm id="ix.libpng12.png.get.sRGB.1">	<primary>png_get_sRGB</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_uint_32
<function>png_get_sRGB</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>int *
<parameter>srgb_intent</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_get_sRGB() shall return the rendering intent of an image to
*srgb_intent if the sRGB chunk information is valid for the image. 
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
PNG_INFO_sRGB - if png_ptr, info_ptr, srgb_intent are not NULL and sRGB chunk
information is valid
0 - otherwise.
</para>
</refsect1>
</refentry>


<refentry id="libpng12.png.get.tIME.1">
<refmeta>
<refentrytitle>png_get_tIME</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_get_tIME</refname>
<refpurpose>get last modification time for the image</refpurpose>
<indexterm id="ix.libpng12.png.get.tIME.1">	<primary>png_get_tIME</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_uint_32
<function>png_get_tIME</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>png_timep *
<parameter>mod_time</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_get_sBIT() shall return the time of last modification of the image if the
tIME information is valid for the image.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
PNG_INFO_tIME - if png_ptr, info_ptr, mod_time are not NULL and tIME
information is valid
0 - otherwise.
</para>
</refsect1>
</refentry>


<refentry id="libpng12.png.get.tRNS.1">
<refmeta>
<refentrytitle>png_get_tRNS</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_get_tRNS</refname>
<refpurpose>get transparency data for images</refpurpose>
<indexterm id="ix.libpng12.png.get.tRNS.1">	<primary>png_get_tRNS</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_uint_32
<function>png_get_tRNS</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>png_bytep *
<parameter>trans</parameter>
</paramdef>
<paramdef>int *
<parameter>num_trans</parameter>
</paramdef>
<paramdef>png_color_16p *
<parameter>trans_values</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_get_tRNS() shall obtain the transparency data for paletted images and
image types that don't need a full alpha channel from info_ptr. 
For a paletted image, the function retrieves the transparency values 
stored in the same order as the palette colors, starting from index 0.
For non-paletted images, the function retrieves the single color value
which is treated as fully transparent. If the transparency information is
valid, i.e. PNG_INFO_tRNS bit is set for info_ptr->valid:
*trans shall be set to the transparency values for a paletted image. Values for
the data shall be in range [0,255], ranging from fully transparent to fully
opaque, respectively.
*num_trans shall be set to the number of transparency values
*trans_values shall be set to the single color value specified for non-paletted
images.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
Returns PNG_INFO_tRNS on successful return, 0 otherwise.

</para>
</refsect1>
</refentry>


<refentry id="libpng12.png.get.text.1">
<refmeta>
<refentrytitle>png_get_text</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_get_text</refname>
<refpurpose>get comments information from png_info structure</refpurpose>
<indexterm id="ix.libpng12.png.get.text.1">	<primary>png_get_text</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_uint_32
<function>png_get_text</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>png_textp *
<parameter>text_ptr</parameter>
</paramdef>
<paramdef>int *
<parameter>num_text</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
<function>png_get_text</function> returns the text chunk
information from the PNG stream in the array pointed to by
<parameter>text_ptr</parameter>. It also returns the number of text
chunks in <parameter>num_text</parameter>. <parameter>text_ptr</parameter>
is an array of structure <structname>png_text</structname> whose members
include:
<variablelist>
<varlistentry>
<term><parameter>compression</parameter></term>
<listitem><para>type of compression used on text. Valid values are:
<simplelist>
<member>PNG_TEXT_COMPRESSION_NONE</member>
<member>PNG_TEXT_COMPRESSION_zTXt</member>
<member>PNG_ITXT_COMPRESSION_NONE</member>
<member>PNG_ITXT_COMPRESSION_zTXt</member>
</simplelist>
</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>key</parameter></term>
<listitem><para>keyword for comment. Must contain 1-79 characters.
</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>text</parameter></term>
<listitem><para>text comment for current keyword. May be empty.
</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>text_length</parameter></term>
<listitem><para>length of text string after decompression. 0 for iTXt.
</para></listitem>
</varlistentry>
<!-- these were found to be too new, removed for now
<varlistentry>
<term><parameter>itxt_length</parameter></term>
<listitem><para>length of iTXt string after decompression. 0 for tEXt/zTXt.
</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>lang</parameter></term>
<listitem><para>language of comment. Empty string if language is unknown.
</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>lang_key</parameter></term>
<listitem><para>keyword in UTF-8. Empty string if language is unknown.
</para></listitem>
</varlistentry>
end of removed chunk -->
</variablelist>
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
Returns <constant>0</constant> if <parameter>png_ptr</parameter> or
<parameter>info_ptr</parameter> is <constant>NULL</constant>,
returns the number of text chunks otherwise.
</para>
</refsect1>
</refentry>


<refentry id="libpng-png-get-unknown-chunks-1">

<refmeta>
<refentrytitle>png_get_unknown_chunks</refentrytitle>
<refmiscinfo>libpng</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_get_unknown_chunks</refname>
<refpurpose>retrieve the unknown chunks from a PNG file</refpurpose>
<indexterm id="ix-libpng-png-get-unknown-chunks-1">
	<primary>png_get_unknown_chunks</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_uint_32		
<function>png_get_unknown_chunks</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>png_unknown_chunkpp
<parameter>unknowns</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>

<refsect1>
<title>Description</title>
<para>
This interface shall retrieve the unknown chunks from a PNG file.
</para>

<para>The parameter <parameter>png_ptr</parameter> shall specify the PNG file.</para>
<para>The parameter <parameter>info_ptr</parameter> shall specify the PNG info structure.</para>
<para>The parameter <parameter>unknowns</parameter> shall specify an array of <type>png_unknown_chunk</type>
structures containing the unknown chunks. 
The position of a structure in the array shall correspond to the order in which
<function>png_set_unknown_chunks</function> inserted its chunk into the PNG file,
or in which it was read.
</para>
<para>
The <type>png_unknown_chunkpp</type> structure shall contain the following members.
</para>

<para>
<VARIABLELIST>
<VARLISTENTRY>
<TERM>
name
</TERM>
<LISTITEM>
<PARA>
the name of the chunk
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>
data
</TERM>
<LISTITEM>
<PARA>
the data of the chunk
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>
size
</TERM>
<LISTITEM>
<PARA>
the size of the chunk's data
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>
location
</TERM>
<LISTITEM>
<PARA>
the position of the chunk in the PNG file
</PARA>
</LISTITEM>
</VARLISTENTRY>

</VARIABLELIST>
</para>

</refsect1>

<refsect1>
<title>Return Value</title>
<para>
On success, this interface shall return the number of unknown chunks obtained.
</para>
<para>
On failure, this interface shall return <literal>0</literal>.
</para>
</refsect1>

</refentry>


<refentry id="libpng-png-get-user-chunk-ptr-1">

<refmeta>
<refentrytitle>png_get_user_chunk_ptr</refentrytitle>
<refmiscinfo>libpng</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_get_user_chunk_ptr</refname>
<refpurpose>get pointer to user chunk data</refpurpose>
<indexterm id="ix-libpng-png-get-user-chunk-ptr-1">
	<primary>png_get_user_chunk_ptr</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_voidp
<function>png_get_user_chunk_ptr</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>

<refsect1>
<title>Description</title>
<para>This interface shall return the pointer
to the user chunk data
associated with the specified PNG file.</para>
<para>The parameter <parameter>png_ptr</parameter> shall specify the PNG file.</para>
</refsect1>
</refentry>


<refentry id="libpng12.png.get.valid.1">
<refmeta>
<refentrytitle>png_get_valid</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_get_valid</refname>
<refpurpose>determine if given chunk data is valid</refpurpose>
<indexterm id="ix.libpng12.png.get.valid.1">	<primary>png_get_valid</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_uint_32
<function>png_get_valid</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>png_uint_32
<parameter>flag</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_get_valid() shall obtain the validity of chunk data specified by the bits
set in "flag". The following bits may be set in flag:
PNG_INFO_gAMA
PNG_INFO_sBIT
PNG_INFO_cHRM
PNG_INFO_PLTE
PNG_INFO_tRNS
PNG_INFO_bKGD
PNG_INFO_hIST
PNG_INFO_pHYs
PNG_INFO_oFFs
PNG_INFO_tIME
PNG_INFO_pCAL
PNG_INFO_sRGB
PNG_INFO_iCCP
PNG_INFO_sPLT
PNG_INFO_sCAL
PNG_INFO_IDAT

</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
On success, png_get_valid() shall return "flag" with the chunk bits set.
Otherwise, png_get_valid() shall return 0.
</para>
</refsect1>

</refentry>


<refentry id="libpng12.png.get.x.offset.pixels.1">
<refmeta>
<refentrytitle>png_get_x_offset_pixels</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_get_x_offset_pixels</refname>
<refpurpose>return x offset in pixels from oFFs chunk</refpurpose>
<indexterm id="ix.libpng12.png.get.x.offset.pixels.1">	<primary>png_get_x_offset_pixels</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_int_32
<function>png_get_x_offset_pixels</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_get_x_offset_pixels() shall obtain x offset in pixels for the
image from its PNG_oFFs chunk data stored in info_ptr, if the unit for offset is
pixels.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
On success, png_get_x_offset_pixels() shall return x offset in pixels.
Otherwise png_get_x_offset_pixels() shall return 0.
</para>
</refsect1>

</refentry>


<refentry id="libpng12.png.get.x.pixels.per.meter.1">
<refmeta>
<refentrytitle>png_get_x_pixels_per_meter</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_get_x_pixels_per_meter</refname>
<refpurpose>return horizontal pixel density per meter</refpurpose>
<indexterm id="ix.libpng12.png.get.x.pixels.per.meter.1">	<primary>png_get_x_pixels_per_meter</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_uint_32
<function>png_get_x_pixels_per_meter</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_get_x_pixels_per_meter() shall obtain the horizontal pixel density in pixels
per meter from its PNG_pHYs chunk data stored in info_ptr, if the unit for
resolution is pixels per meter.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
On success, png_get_x_pixels_per_meter() shall return horizontal pixel density
in pixels per meter.
Otherwise png_get_x_pixels_per_meter() shall return 0.
</para>
</refsect1>

</refentry>


<refentry id="libpng12.png.get.y.offset.pixels.1">
<refmeta>
<refentrytitle>png_get_y_offset_pixels</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_get_y_offset_pixels</refname>
<refpurpose>return y offset in pixels from oFFs chunk</refpurpose>
<indexterm id="ix.libpng12.png.get.y.offset.pixels.1">	<primary>png_get_y_offset_pixels</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_int_32
<function>png_get_y_offset_pixels</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_get_y_offset_pixels() shall obtain y offset in pixels for the
image from its PNG_oFFs chunk data stored in info_ptr, if the unit for offset is
pixels.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
On success, png_get_y_offset_pixels() shall return y offset in pixels.
Otherwise png_get_y_offset_pixels() shall return 0.
</para>
</refsect1>

</refentry>


<refentry id="libpng12.png.get.y.pixels.per.meter.1">
<refmeta>
<refentrytitle>png_get_y_pixels_per_meter</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_get_y_pixels_per_meter</refname>
<refpurpose>return vertical pixel density per meter</refpurpose>
<indexterm id="ix.libpng12.png.get.y.pixels.per.meter.1">	<primary>png_get_y_pixels_per_meter</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_uint_32
<function>png_get_y_pixels_per_meter</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_get_y_pixels_per_meter() shall obtain the vertical pixel density in pixels
per meter from its PNG_pHYs chunk data stored in info_ptr, if the unit for
resolution is pixels per meter.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
On success, png_get_y_pixels_per_meter() shall return vertical pixel density
in pixels per meter.
Otherwise png_get_y_pixels_per_meter() shall return 0.
</para>
</refsect1>

</refentry>


<refentry id="libpng-png-info-init-3-1">

<refmeta>
<refentrytitle>png_info_init_3</refentrytitle>
<refmiscinfo>libpng</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_info_init_3</refname>
<refpurpose>initialize an info structure (DEPRECATED)</refpurpose>
<indexterm id="ix-libpng-png-info-init-3-1">
	<primary>png_info_init_3</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_info_init_3</function>
</funcdef>
<paramdef>png_infopp
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>png_size_t
<parameter>png_info_struct_size</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>

<refsect1>
<title>Description</title>
<para>This interface shall initialize a PNG info structure. This interface is deprecated.</para>
<para>The parameter <parameter>info_ptr</parameter> shall specify
the PNG info structure to initialize.</para>
<para>The parameter <parameter>png_info_struct_size</parameter> shall specify the size of the
new structure.</para>
</refsect1>

</refentry>


<refentry id="libpng12.png.init.io.1">
<refmeta>
<refentrytitle>png_init_io</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_init_io</refname>
<refpurpose>initialize input/output for the PNG file</refpurpose>
<indexterm id="ix.libpng12.png.init.io.1">	<primary>png_init_io</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_init_io</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_FILE_p
<parameter>fp</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Initialize the default input/output functions for the PNG file to standard C
streams. To replace the default read and write functions, use png_set_read_fn()
and png_set_write_fn() respectively.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
</para>
</refsect1>
<refsect1>
<title>Errors</title>
<para>
</para>
</refsect1>
</refentry>


<refentry id="libpng-png-libpng-ver-1">
<refmeta>
<refentrytitle>png_libpng_ver</refentrytitle>
<refmiscinfo>libpng</refmiscinfo>
</refmeta>
<refnamediv>
<refname>png_libpng_ver</refname>
<refpurpose>external variable holding version number of libpng</refpurpose>
<indexterm id="ix-libpng-png-libpng-ver-1">
	<primary>png_libpng_ver</primary></indexterm>
</refnamediv>
<refsynopsisdiv>

<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
const char <VARNAME>png_libpng_ver</VARNAME>[18];
</funcsynopsisinfo>
</funcsynopsis>
</refsynopsisdiv>

<refsect1>
<title>Description</title>
<para>
The external variable <varname>png_libpng_ver</varname>
shall contain a character string value indicating the 
version number of libpng. 
An LSB conforming implementation shall return a value
at least as high as
<constant>PNG_LIBPNG_VER_STRING</constant> as
defined in this specification.
</para>
</refsect1>

</refentry>


<refentry id="libpng12.png.malloc.1">
<refmeta>
<refentrytitle>png_malloc</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_malloc</refname>
<refpurpose>allocate memory</refpurpose>
<indexterm id="ix.libpng12.png.malloc.1">	<primary>png_malloc</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_voidp
<function>png_malloc</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_uint_32
<parameter>size</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_malloc() shall return a pointer to allocated memory of the specified size.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
Pointer to the block of memory allocated.
</para>
</refsect1>
<refsect1>
<title>Errors</title>
<para>
Invokes error handling function if the system is out of memory and sets
PNG_FLAG_MALLOC_NULL_MEM_OK in member flags of png_struct.
</para>
</refsect1>
</refentry>


<refentry id="libpng-png-permit-mng-features-1">

<refmeta>
<refentrytitle>png_permit_mng_features</refentrytitle>
<refmiscinfo>libpng</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_permit_mng_features</refname>
<refpurpose>enable MNG extensions for PNG image wrapped
in MNG datastream</refpurpose>
<indexterm id="ix-libpng-png-permit-mng-features-1">
	<primary>png_permit_mng_features</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_uint_32
<function>png_permit_mng_features</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_uint_32
<parameter>mng_features_permitted</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>

<refsect1>
<title>Description</title>
<para>
This interface shall enable some MNG extensions for a PNG image wrapped
in a MNG datastream.
</para>
<para>The parameter <parameter>png_ptr</parameter> shall specify the PNG image.</para>
<para>The parameter <parameter>mng_features_permitted</parameter> shall specify
the logical OR of the features to be enabled, possibly including 
<constant>PNG_ALL_MNG_FEATURES</constant>,
<constant>PNG_FLAG_MNG_EMPTY_PLTE</constant>, and
<constant>PNG_FLAG_MNG_FILTER_64</constant>.
</para>
</refsect1>

<refsect1>
<title>Return Value</title>
<para>
This interface shall return the logical AND of the parameter
<parameter>mng_features_permitted</parameter> with the set
of MNG features supported by the local version of libpng.
</para>
</refsect1>

<refsect1>
<title>Application Usage (informational)</title>
<para>
This interface may not read or write a standalone PNG file; 
the PNG datastream must be embedded in a MNG datastream with an 
8-byte MNG signature and MEND and MHDR chunks.
</para>
</refsect1>
</refentry>


<refentry id="libpng12.png.process.data.1">
<refmeta>
<refentrytitle>png_process_data</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_process_data</refname>
<refpurpose>read PNG file progressively</refpurpose>
<indexterm id="ix.libpng12.png.process.data.1">	<primary>png_process_data</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_process_data</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>png_bytep
<parameter>buffer</parameter>
</paramdef>
<paramdef>png_size_t
<parameter>length</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_process_data() shall process data progressively from the PNG stream using
callback functions set within png_set_progressive_read_fn(). The data is passed
in "buffer" and length of data to be processed is specified by "length".
</para>
</refsect1>
</refentry>


<refentry id="libpng12.png.progressive.combine.row.1">
<refmeta>
<refentrytitle>png_progressive_combine_row</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_progressive_combine_row</refname>
<refpurpose>combines current row data with processed row</refpurpose>
<indexterm id="ix.libpng12.png.progressive.combine.row.1">	<primary>png_progressive_combine_row</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_progressive_combine_row</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_bytep
<parameter>old_row</parameter>
</paramdef>
<paramdef>png_bytep
<parameter>new_row</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
For non-NULL rows of interlaced images during progressive read,
png_progressive_combine_row() shall combine the data for the current row
with the previously processed row data.
png_progressive_combine_row() shall return for NULL rows of interlaced images
and memcpy rows for non-interlaced images.
</para>
</refsect1>
</refentry>


<refentry id="libpng12.png.read.end.1">
<refmeta>
<refentrytitle>png_read_end</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_read_end</refname>
<refpurpose>read the end of PNG file</refpurpose>
<indexterm id="ix.libpng12.png.read.end.1">	<primary>png_read_end</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_read_end</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_read_end() reads the end of a PNG file after reading the image data,
including any comments or time information at the end of the file. The
function shall not read past the end of the file.
</para>
</refsect1>


</refentry>


<refentry id="libpng12.png.read.image.1">
<refmeta>
<refentrytitle>png_read_image</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_read_image</refname>
<refpurpose>read the entire image into memory</refpurpose>
<indexterm id="ix.libpng12.png.read.image.1">	<primary>png_read_image</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_read_image</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_bytepp
<parameter>image</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_read_image() reads the entire image into memory at once. For each pass of an
interlaced image, use png_read_rows() instead.
</para>
</refsect1>


</refentry>


<refentry id="libpng12.png.read.info.1">
<refmeta>
<refentrytitle>png_read_info</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_read_info</refname>
<refpurpose>read the PNG image information</refpurpose>
<indexterm id="ix.libpng12.png.read.info.1">	<primary>png_read_info</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_read_info</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Reads the information before the actual image data from the PNG file. The
function allows reading a file that already has the PNG signature bytes read
from the stream.
</para>
</refsect1>


</refentry>


<refentry id="libpng12.png.read.png.1">
<refmeta>
<refentrytitle>png_read_png</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_read_png</refname>
<refpurpose>read the entire PNG file</refpurpose>
<indexterm id="ix.libpng12.png.read.png.1">	<primary>png_read_png</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_read_png</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>int
<parameter>transforms</parameter>
</paramdef>
<paramdef>png_voidp
<parameter>params</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_read_png() shall provide the high-level read operation. The function shall
read the entire image into memory. The integer "transforms" shall contain the
logical OR of a set of the following transformation flags:
<variablelist>
<varlistentry>
<term><parameter>PNG_TRANSFORM_IDENTITY</parameter></term>
<listitem><para>No transformation</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>PNG_TRANSFORM_STRIP_16</parameter></term>
<listitem><para>Strip 16-bit samples to 8 bits</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>PNG_TRANSFORM_STRIP_ALPHA</parameter></term>
<listitem><para>Discard the alpha channel</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>PNG_TRANSFORM_PACKING</parameter></term>
<listitem><para>Expand 1, 2 and 4-bit samples to bytes</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>PNG_TRANSFORM_PACKSWAP</parameter></term>
<listitem><para>Change order of packed pixels to LSB first</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>PNG_TRANSFORM_EXPAND</parameter></term>
<listitem><para>Expand paletted images to RGB, grayscale to 8-bit images and
tRNS chunks to alpha channels</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>PNG_TRANSFORM_INVERT_MONO</parameter></term>
<listitem><para>Invert monochrome images</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>PNG_TRANSFORM_SHIFT</parameter></term>
<listitem><para>Normalize pixels to the sBIT depth</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>PNG_TRANSFORM_BGR</parameter></term>
<listitem><para>Flip RGB to BGR, RGBA to BGRA</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>PNG_TRANSFORM_SWAP_ALPHA</parameter></term>
<listitem><para>Flip RGBA to ARGB or GA to AG</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>PNG_TRANSFORM_INVERT_ALPHA</parameter></term>
<listitem><para>Change alpha from opacity to transparency</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>PNG_TRANSFORM_SWAP_ENDIAN</parameter></term>
<listitem><para>Byte-swap 16-bit samples</para></listitem>
</varlistentry>
</variablelist>

"params" is unused and must be set to NULL.
</para>
</refsect1>
</refentry>


<refentry id="libpng12.png.read.row.1">
<refmeta>
<refentrytitle>png_read_row</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_read_row</refname>
<refpurpose>read a row of image data</refpurpose>
<indexterm id="ix.libpng12.png.read.row.1">	<primary>png_read_row</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_read_row</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_bytep
<parameter>row</parameter>
</paramdef>
<paramdef>png_bytep
<parameter>display_row</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_read_row() reads a row of actual image data. "row" holds the image pixels as
they are processed.  If the image is displayed after each pass,  "display_row"
is used to display a blurred progressive image. "display_row" can be NULL if the
progressive image is not required.
</para>
</refsect1>


</refentry>


<refentry id="libpng12.png.read.rows.1">
<refmeta>
<refentrytitle>png_read_rows</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_read_rows</refname>
<refpurpose>read multiple rows of image data</refpurpose>
<indexterm id="ix.libpng12.png.read.rows.1">	<primary>png_read_rows</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_read_rows</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_bytepp
<parameter>row</parameter>
</paramdef>
<paramdef>png_bytepp
<parameter>display_row</parameter>
</paramdef>
<paramdef>png_uint_32
<parameter>num_rows</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Read "num_rows" rows of image data starting from "row". If the image is
interlaced, the rows must contain the contents of the rows from the previous
pass. If the image is displayed after each pass,  "display_row" is used
to display a blurred progressive image. "display_row" can be NULL if the
progressive image is not required.
</para>
</refsect1>


</refentry>


<refentry id="libpng12.png.read.update.info.1">
<refmeta>
<refentrytitle>png_read_update_info</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_read_update_info</refname>
<refpurpose>update png_info structure</refpurpose>
<indexterm id="ix.libpng12.png.read.update.info.1">	<primary>png_read_update_info</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_read_update_info</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_read_update_info() updates the structure pointed to by info_ptr to reflect
any transformations that have been requested. For example, rowbytes will be
updated to handle expansion of an interlaced image with png_read_update_info().
</para>
</refsect1>


</refentry>


<refentry id="libpng12.png.set.IHDR.1">
<refmeta>
<refentrytitle>png_set_IHDR</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_IHDR</refname>
<refpurpose>set the PNG_IHDR chunk information</refpurpose>
<indexterm id="ix.libpng12.png.set.IHDR.1">	<primary>png_set_IHDR</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_IHDR</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>png_uint_32
<parameter>width</parameter>
</paramdef>
<paramdef>png_uint_32
<parameter>height</parameter>
</paramdef>
<paramdef>int
<parameter>bit_depth</parameter>
</paramdef>
<paramdef>int
<parameter>color_type</parameter>
</paramdef>
<paramdef>int
<parameter>interlace_type</parameter>
</paramdef>
<paramdef>int
<parameter>compression_type</parameter>
</paramdef>
<paramdef>int
<parameter>filter_type</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_IHDR() shall set image header information in info_ptr.
width is the image width in pixels.
height is the image height in pixels.
bit_depth is the bit depth of the image. Valid values shall include 1, 2, 4, 8,
16 and shall also depend on the color type.
color_type is the type of image. Supported color types shall include:
	PNG_COLOR_TYPE_GRAY         (bit depths 1, 2, 4, 8, 16)
	PNG_COLOR_TYPE_GRAY_ALPHA   (bit depths 8, 16)
	PNG_COLOR_TYPE_PALETTE      (bit depths 1, 2, 4, 8)
	PNG_COLOR_TYPE_RGB          (bit depths 8, 16)
	PNG_COLOR_TYPE_RGB_ALPHA    (bit depths 8, 16)
	PNG_COLOR_MASK_PALETTE
	PNG_COLOR_MASK_COLOR
	PNG_COLOR_MASK_ALPHA

interlace_type is the image interlace method. Supported values shall include:
    PNG_INTERLACE_NONE or
	PNG_INTERLACE_ADAM7
compression_type is the method used for image compression. The value must be
PNG_COMPRESSION_TYPE_DEFAULT.
filter_type is the method used for image filtering. The value must be
PNG_FILTER_TYPE_DEFAULT.

</para>
</refsect1>

<refsect1>
<title>Errors</title>
<para>
png_set_IHDR() shall invoke error function if any of the arguments has an
invalid value.
</para>
</refsect1>
</refentry>


<refentry id="libpng12.png.set.PLTE.1">
<refmeta>
<refentrytitle>png_set_PLTE</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_PLTE</refname>
<refpurpose>set color values for the palette</refpurpose>
<indexterm id="ix.libpng12.png.set.PLTE.1">	<primary>png_set_PLTE</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_PLTE</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>png_colorp
<parameter>palette</parameter>
</paramdef>
<paramdef>int
<parameter>num_palette</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_PLTE() shall set the array of color values used as palette for image to
"palette".  The palette shall include "num_palette" entries.
</para>
</refsect1>


</refentry>


<refentry id="libpng12.png.set.bKGD.1">
<refmeta>
<refentrytitle>png_set_bKGD</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_bKGD</refname>
<refpurpose>set the background color for given image</refpurpose>
<indexterm id="ix.libpng12.png.set.bKGD.1">	<primary>png_set_bKGD</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_bKGD</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>png_color_16p
<parameter>background</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_bKGD() shall set the background color of an image to "background" and 
sets bKGD chunk information to valid for the image.
</para>
</refsect1>
</refentry>


<refentry id="libpng12.png.set.background.1">
<refmeta>
<refentrytitle>png_set_background</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_background</refname>
<refpurpose>set the background for given image</refpurpose>
<indexterm id="ix.libpng12.png.set.background.1">	<primary>png_set_background</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_background</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_color_16p
<parameter>background_color</parameter>
</paramdef>
<paramdef>int
<parameter>background_gamma_code</parameter>
</paramdef>
<paramdef>int
<parameter>need_expand</parameter>
</paramdef>
<paramdef>double
<parameter>background_gamma</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_background() shall set the background of an image with alpha channel or
simple transparency with the specified background color. If background_gamma_code
is set to PNG_BACKGROUND_GAMMA_SCREEN, it indicates that the supplied background 
color is in the gamma space of the display, else if it is set to
PNG_BACKGROUND_GAMMA_FILE, the color is in the gamma space of the file. If the
background color is supplied at the original bit-depth for a grayscale image that
is expanded to truecolor or to a higher bit-depth, need_expand must be set to 1,
but if the background color is supplied at the expanded bit-depth, need_expand
must be set to 0. Similarly for paletted images, if background color is supplied
as a palette index, need_expand must be set to 1, else if background color is
supplied as an RGB triplet, need_expand must be set to 0.
</para>
</refsect1>
</refentry>


<refentry id="libpng12.png.set.bgr.1">
<refmeta>
<refentrytitle>png_set_bgr</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_bgr</refname>
<refpurpose>set pixel order to blue, green, red</refpurpose>
<indexterm id="ix.libpng12.png.set.bgr.1">	<primary>png_set_bgr</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_bgr</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_bgr() shall set the pixel order to blue, green, red.
</para>
</refsect1>


</refentry>


<refentry id="libpng12.png.set.cHRM.1">
<refmeta>
<refentrytitle>png_set_cHRM</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_cHRM</refname>
<refpurpose>set CIE chromacities and referenced white point for given image</refpurpose>
<indexterm id="ix.libpng12.png.set.cHRM.1">	<primary>png_set_cHRM</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_cHRM</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>double
<parameter>white_x</parameter>
</paramdef>
<paramdef>double
<parameter>white_y</parameter>
</paramdef>
<paramdef>double
<parameter>red_x</parameter>
</paramdef>
<paramdef>double
<parameter>red_y</parameter>
</paramdef>
<paramdef>double
<parameter>green_x</parameter>
</paramdef>
<paramdef>double
<parameter>green_y</parameter>
</paramdef>
<paramdef>double
<parameter>blue_x</parameter>
</paramdef>
<paramdef>double
<parameter>blue_y</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_cHRM() shall set the CIE x,y chromaticities of the red, green and
blue display primaries for the image and the referenced white point. The values
must range from 0 to 21474.83 both inclusive.
</para>
</refsect1>
<refsect1>
<title>Errors</title>
<para>
png_set_cHRM() shall report a non-fatal error and exit if any of the chormacity
values lies outside the range 0 to 21474.83.
</para>
</refsect1>
</refentry>


<refentry id="libpng-png-set-compression-buffer-size-1">

<refmeta>
<refentrytitle>png_set_compression_buffer_size</refentrytitle>
<refmiscinfo>libpng</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_compression_buffer_size</refname>
<refpurpose>set the size of the compression buffer</refpurpose>
<indexterm id="ix-libpng-png-set-compression-buffer-size-1">
	<primary>png_set_compression_buffer_size</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_compression_buffer_size</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_uint_32
<parameter>size</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>

<refsect1>
<title>Description</title>
<para>This interface shall set the size of 
the libz compression buffer <varname>zbuf</varname>
for the specified PNG file.</para>
<para>The parameter <parameter>png_ptr</parameter> shall specify the
PNG file for which to set the size of the compression buffer.</para>
<para>The parameter <parameter>size</parameter> shall specify the size to which to
set the compression buffer, in bytes.</para>
</refsect1>

</refentry>


<refentry id="libpng12.png.set.compression.level.1">
<refmeta>
<refentrytitle>png_set_compression_level</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_compression_level</refname>
<refpurpose>set image compression level</refpurpose>
<indexterm id="ix.libpng12.png.set.compression.level.1">	<primary>png_set_compression_level</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_compression_level</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>int
<parameter>level</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_compression_level() shall set the compression level to "level". The
valid values for "level" range from [0,9], corresponding directly to compression
levels for zlib. The value 0 implies no compression and 9 implies maximal
compression.
Note: Tests have shown that zlib compression levels 3-6 usually perform as well 
as level 9 for PNG images, and do considerably fewer caclulations.
</para>
</refsect1>


</refentry>


<refentry id="libpng-png-set-compression-mem-level-1">

<refmeta>
<refentrytitle>png_set_compression_mem_level</refentrytitle>
<refmiscinfo>libpng</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_compression_mem_level</refname>
<refpurpose>set how much memory to use for the internal state during PNG compression</refpurpose>
<indexterm id="ix-libpng-png-set-compression-mem-level-1">
	<primary>png_set_compression_mem_level</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_compression_mem_level</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>int
<parameter>mem_level</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>

<refsect1>
<title>Description</title>
<para>This interface shall set how much memory to use for the internal state during PNG compression.</para>
<para>The parameter <parameter>png_ptr</parameter> shall specify the PNG file to compress.</para>
<para>The parameter <parameter>mem_level</parameter> corresponds directly to the
<parameter>memLevel</parameter> parameter of the 
libz <function>deflateInit2_</function> interface.
This parameter shall specify how much memory to use for the internal state. 
The value of <parameter>mem_level</parameter> must be between 
<literal>1</literal> and <constant>MAX_MEM_LEVEL</constant>. 
Smaller values use less memory but are slower, while higher values use more memory to gain compression speed.
</para>
</refsect1>

</refentry>


<refentry id="libpng-png-set-compression-method-1">

<refmeta>
<refentrytitle>png_set_compression_method</refentrytitle>
<refmiscinfo>libpng</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_compression_method</refname>
<refpurpose>set PNG compression algorithm</refpurpose>
<indexterm id="ix-libpng-png-set-compression-method-1">
	<primary>png_set_compression_method</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_compression_method</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>int
<parameter>method</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>

<refsect1>
<title>Description</title>
<para>This interface shall set the PNG compression algorithm to use. 
</para>
<para>The parameter <parameter>png_ptr</parameter> shall specify the PNG file to compress.</para>
<para>The parameter <parameter>method</parameter> corresponds directly to the
<parameter>method</parameter> parameter of the 
libz <function>deflateInit2_</function> interface.
An LSB-conforming implementation 
shall support the <constant>Z_DEFLATED</constant> method, 
and may support other implementation defined methods.
</para>
</refsect1>

</refentry>


<refentry id="libpng-png-set-compression-strategy-1">

<refmeta>
<refentrytitle>png_set_compression_strategy</refentrytitle>
<refmiscinfo>libpng</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_compression_strategy</refname>
<refpurpose>set PNG compression strategy</refpurpose>
<indexterm id="ix-libpng-png-set-compression-strategy-1">
	<primary>png_set_compression_strategy</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_compression_strategy</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>int
<parameter>strategy</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>

<refsect1>
<title>Description</title>
<para>This interface shall set the PNG compression strategy.</para>
<para>The parameter <parameter>png_ptr</parameter> shall specify the PNG file to compress.</para>
<para>The parameter <parameter>strategy</parameter> corresponds directly to the
<parameter>strategy</parameter> parameter of the 
libz <function>deflateInit2_</function> interface.
This parameter shall specify the PNG compression strategy to use:
one of 
<constant>Z_DEFAULT_STRATEGY</constant>,
<constant>Z_FILTERED</constant>, and
<constant>Z_HUFFMAN_ONLY</constant>.
</para>
</refsect1>

</refentry>


<refentry id="libpng-png-set-compression-window-bits-1">

<refmeta>
<refentrytitle>png_set_compression_window_bits</refentrytitle>
<refmiscinfo>libpng</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_compression_window_bits</refname>
<refpurpose>set PNG compression window size</refpurpose>
<indexterm id="ix-libpng-png-set-compression-window-bits-1">
	<primary>png_set_compression_window_bits</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_compression_window_bits</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>int
<parameter>window_bits</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>

<refsect1>
<title>Description</title>
<para>This interface shall set the PNG compression window size.</para>
<para>The parameter <parameter>window_bits</parameter> 
corresponds directly to the 
<parameter>windowBits</parameter> parameter of the 
libz <function>deflateInit2_</function> interface.
The value of this parameter equals
the base 2 logarithm of the window size to use, and must be a value between 
<literal>8</literal> and <literal>15</literal>. 
</para>
</refsect1>

</refentry>


<refentry id="libpng12.png.set.dither.1">
<refmeta>
<refentrytitle>png_set_dither</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_dither</refname>
<refpurpose>turn on dithering to 8-bit</refpurpose>
<indexterm id="ix.libpng12.png.set.dither.1">	<primary>png_set_dither</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_dither</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_colorp
<parameter>palette</parameter>
</paramdef>
<paramdef>int
<parameter>num_palette</parameter>
</paramdef>
<paramdef>int
<parameter>maximum_colors</parameter>
</paramdef>
<paramdef>png_uint_16p
<parameter>histogram</parameter>
</paramdef>
<paramdef>int
<parameter>full_dither</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_dither() shall set transformation to dither file to 8-bit. For the given
palette with num_palette number of colors, the number of colors in the palette 
shall be reduced to fit in "maximum_colors" if the palette is larger than
maximum_colors. If supplied, the histogram is used to get better results of the
reduced palette.
For reducing the number of colors in palette, full_dither must be set to 0. If
full_dither is set to 1, dithering cube shall be setup for RGB images to reduce
the RGB file to a paletted file.
</para>
</refsect1>
</refentry>


<refentry id="libpng12.png.set.error.fn.1">
<refmeta>
<refentrytitle>png_set_error_fn</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_error_fn</refname>
<refpurpose>set user defined functions for error handling</refpurpose>
<indexterm id="ix.libpng12.png.set.error.fn.1">	<primary>png_set_error_fn</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_error_fn</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_voidp
<parameter>error_ptr</parameter>
</paramdef>
<paramdef>png_error_ptr
<parameter>error_fn</parameter>
</paramdef>
<paramdef>png_error_ptr
<parameter>warning_fn</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_error_fn() shall replace the default error handling and warning
functions with user defined function error_fn for handling fatal errors and 
function warning_fn for handling non-fatal errors. The replacement functions
must do a longjmp to the last setjmp location if setjmp/longjmp method of error
handling is used.  If error_fn or warning_fn is NULL, the default functions for
error handling shall be used.
</para>
</refsect1>


</refentry>


<refentry id="libpng12.png.set.expand.1">
<refmeta>
<refentrytitle>png_set_expand</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_expand</refname>
<refpurpose>set expansion transformation</refpurpose>
<indexterm id="ix.libpng12.png.set.expand.1">	<primary>png_set_expand</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_expand</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
<function>png_set_expand</function> shall set transformation in 
<parameter>png_ptr</parameter> such that paletted images are
expanded to RGB, grayscale images of bit-depth less than 8 are 
expanded to 8-bit images and tRNS chunks are expanded to alpha channels.
</para>
</refsect1>
</refentry>


<refentry id="libpng12.png.set.filler.1">
<refmeta>
<refentrytitle>png_set_filler</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_filler</refname>
<refpurpose>add a filler byte to given image</refpurpose>
<indexterm id="ix.libpng12.png.set.filler.1">	<primary>png_set_filler</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_filler</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_uint_32
<parameter>filler</parameter>
</paramdef>
<paramdef>int
<parameter>flags</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_filler() shall set transformations in png_ptr such that a filler byte is
added when an 8-bit grayscale image or 24-bit RGB image is read and a filler
byte is deleted when an 8-bit grayscale image or 24-bit RGB image is written.
</para>
</refsect1>


</refentry>


<refentry id="libpng12.png.set.filter.1">
<refmeta>
<refentrytitle>png_set_filter</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_filter</refname>
<refpurpose>set filtering method</refpurpose>
<indexterm id="ix.libpng12.png.set.filter.1">	<primary>png_set_filter</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_filter</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>int
<parameter>method</parameter>
</paramdef>
<paramdef>int
<parameter>filters</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_filter() shall set the filtering method used for scan-line filtering.
The only valid value for "method" is 0. "filters" is a bitmap for which the
following bits may be set.
PNG_NO_FILTERS
PNG_FILTER_NONE
PNG_FILTER_SUB
PNG_FILTER_UP
PNG_FILTER_AVG
PNG_FILTER_PAETH
PNG_ALL_FILTERS
</para>
</refsect1>


</refentry>


<refentry id="libpng12.png.set.gAMA.1">
<refmeta>
<refentrytitle>png_set_gAMA</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_gAMA</refname>
<refpurpose>set the gamma value for given image</refpurpose>
<indexterm id="ix.libpng12.png.set.gAMA.1">	<primary>png_set_gAMA</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_gAMA</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>double
<parameter>file_gamma</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Sets the gamma value of an image to "file_gamma" and sets gAMA chunk
information to valid for the image.
</para>
</refsect1>

<refsect1>
<title>Errors</title>
<para>
png_set_gAMA() shall generate warning if file_gamma > 21474.83 or file_gamma = 0
</para>
</refsect1>
</refentry>


<refentry id="libpng12.png.set.gamma.1">
<refmeta>
<refentrytitle>png_set_gamma</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_gamma</refname>
<refpurpose>transform the image from file gamma to screen gamma</refpurpose>
<indexterm id="ix.libpng12.png.set.gamma.1">	<primary>png_set_gamma</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_gamma</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>double
<parameter>screen_gamma</parameter>
</paramdef>
<paramdef>double
<parameter>file_gamma</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_gama() shall set the transformation for gamma correction of the PNG file
based on the screen gamma i.e. the display exponent.
The gamma transformation may be turned off later if no semitransparent entries
are present in the tRNS array for palette images.
</para>
</refsect1>


</refentry>


<refentry id="libpng12.png.set.gray.1.2.4.to.8.1">
<refmeta>
<refentrytitle>png_set_gray_1_2_4_to_8</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_gray_1_2_4_to_8</refname>
<refpurpose>set expansion transformation</refpurpose>
<indexterm id="ix.libpng12.png.set.gray.1.2.4.to.8.1">	<primary>png_set_gray_1_2_4_to_8</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_gray_1_2_4_to_8</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
<function>png_set_gray_1_2_4_to_8</function> shall set transformation in 
<parameter>png_ptr</parameter> such that grayscale images of
bit-depth less than 8 are expanded to 8-bit images.
<function>png_set_png_set_gray_1_2_4_to_8</function> is actually an alias
for <function>png_set_expand</function>.
</para>
</refsect1>
</refentry>


<refentry id="libpng12.png.set.gray.to.rgb.1">
<refmeta>
<refentrytitle>png_set_gray_to_rgb</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_gray_to_rgb</refname>
<refpurpose>expand the grayscale image to 24-bit RGB</refpurpose>
<indexterm id="ix.libpng12.png.set.gray.to.rgb.1">	<primary>png_set_gray_to_rgb</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_gray_to_rgb</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_gray_to_rgb() shall set transformations such that the grayscale
image is converted to 24-bit RGB.
</para>
</refsect1>


</refentry>


<refentry id="libpng12.png.set.hIST.1">
<refmeta>
<refentrytitle>png_set_hIST</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_hIST</refname>
<refpurpose>set the histogram of color palette</refpurpose>
<indexterm id="ix.libpng12.png.set.hIST.1">	<primary>png_set_hIST</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_hIST</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>png_uint_16p
<parameter>hist</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_hIST() shall set the histogram of palette to "hist".
</para>
</refsect1>
</refentry>


<refentry id="libpng12.png.set.iCCP.1">
<refmeta>
<refentrytitle>png_set_iCCP</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_iCCP</refname>
<refpurpose>set ICC component</refpurpose>
<indexterm id="ix.libpng12.png.set.iCCP.1">	<primary>png_set_iCCP</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_iCCP</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>png_charp
<parameter>name</parameter>
</paramdef>
<paramdef>int
<parameter>compression_type</parameter>
</paramdef>
<paramdef>png_charp
<parameter>profile</parameter>
</paramdef>
<paramdef>png_uint_32
<parameter>proflen</parameter>
</paramdef>
</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_iCCP() shall set the ICC component information to info_ptr. The
arguments used to describe the ICC profile information have been described
below:
<variablelist>
<varlistentry>
<term><parameter>name</parameter> </term>
<listitem><para>ICC profile name</para></listitem> 
</varlistentry>
<varlistentry>
<term><parameter>compression_type</parameter> </term>
<listitem><para>compression type used must be 0</para></listitem> 
</varlistentry>
<varlistentry>
<term><parameter>profile</parameter> </term>
<listitem><para>profile data</para></listitem> 
</varlistentry>
<varlistentry>
<term><parameter>proflen</parameter> </term>
<listitem><para>length of profile data</para></listitem> 
</varlistentry>
</variablelist>
</para>
</refsect1>
</refentry>


<refentry id="libpng12.png.set.interlace.handling.1">
<refmeta>
<refentrytitle>png_set_interlace_handling</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_interlace_handling</refname>
<refpurpose>get the number of passes for image interlacing</refpurpose>
<indexterm id="ix.libpng12.png.set.interlace.handling.1">	<primary>png_set_interlace_handling</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>int
<function>png_set_interlace_handling</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_interlace_handling() shall set the scheme to interlacing for writing an
image and return the number of sub-images required to write the image.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
png_set_interlace_handling() shall return 7 if the image is interlaced,
otherwise png_set_interlace_handling() shall return 1.
</para>
</refsect1>

</refentry>


<refentry id="libpng-png-set-invert-alpha-1">

<refmeta>
<refentrytitle>png_set_invert_alpha</refentrytitle>
<refmiscinfo>libpng</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_invert_alpha</refname>
<refpurpose>invert the level of opacity of a PNG file</refpurpose>
<indexterm id="ix-libpng-png-set-invert-alpha-1">
	<primary>png_set_invert_alpha</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_invert_alpha</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>

<refsect1>
<title>Description</title>
<para>This interface shall invert the level of opacity (alpha) of a PNG file.</para>
<para>The parameter <parameter>png_ptr</parameter> shall specify the PNG file for which to invert the opacity.</para>
</refsect1>

</refentry>


<refentry id="libpng12.png.set.invert.mono.1">
<refmeta>
<refentrytitle>png_set_invert_mono</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_invert_mono</refname>
<refpurpose>reverse values for monochromicity</refpurpose>
<indexterm id="ix.libpng12.png.set.invert.mono.1">	<primary>png_set_invert_mono</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_invert_mono</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_invert_mono() shall set monochromicity value 0 to white and value 1 to
black.
</para>
</refsect1>


</refentry>


<refentry id="libpng-png-set-keep-unknown-chunks-1">

<refmeta>
<refentrytitle>png_set_keep_unknown_chunks</refentrytitle>
<refmiscinfo>libpng</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_keep_unknown_chunks</refname>
<refpurpose>specify list of chunks and how to handle them</refpurpose>
<indexterm id="ix-libpng-png-set-keep-unknown-chunks-1">
	<primary>png_set_keep_unknown_chunks</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_keep_unknown_chunks</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>int
<parameter>keep</parameter>
</paramdef>
<paramdef>png_bytep
<parameter>chunk_list</parameter>
</paramdef>
<paramdef>int
<parameter>num_chunks</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>

<refsect1>
<title>Description</title> <para>
This interface shall specify a list of chunks in the input PNG stream
and how to handle them.  Any unspecified chunks shall be handled in
the default way.  The IEND and IHDR chunks must not be
specified.</para>

<para>The parameter <parameter>png_ptr</parameter> shall specify the PNG file.</para>

<para>The parameter <parameter>keep</parameter> shall specify how the
unknown chunks are to be handled (see below).</para>

<para>The parameter <parameter>chunk_list</parameter> shall specify
the list of chunks that shall be affected.  The value passed must be a
string of bytes with five bytes per chunk, or <literal>NULL</literal>
or <literal>\0</literal> if the value of
<parameter>num_chunks</parameter> is <literal>0</literal>.</para>

<para>The parameter <parameter>num_chunks</parameter> shall specify
the number of chunks to be affected.  If the value is
<literal>0</literal>, all unknown chunks shall be affected.</para>

<para>The possible values of <parameter>keep</parameter> are as
follows.</para>

<para>
<VARIABLELIST>
<VARLISTENTRY>
<TERM>
0
</TERM>
<LISTITEM>
<PARA>
handle unknown chunks in the default way
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>
1
</TERM>
<LISTITEM>
<PARA>
do not keep unknown chunks
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>
2
</TERM>
<LISTITEM>
<PARA>
keep unknown chunks only if they are safe to copy
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>
3
</TERM>
<LISTITEM>
<PARA>
keep unknown chunks even if they are unsafe to copy
</PARA>
</LISTITEM>
</VARLISTENTRY>
</VARIABLELIST>
</para>
</refsect1>

<REFSECT1>
<TITLE>Application Usage (informative)
</TITLE>
<PARA>
The normal behavior of libpng is that known chunks are
processed and unknown chunks are discarded.
This interface reads both known and unknown chunks,
handling them as specified by the user.
</PARA>
<PARA>
Unknown chunks specified to this interface are saved unchanged in a
list of <type>png_unknown_chunk</type> structures.  If a known chunk
is specified in the list of unknown chunks, it will be handled per the
<parameter>keep</parameter> parameter.  If a chunk is specified in
successive calls to this interface, the final call takes precedence.
</PARA>
</REFSECT1>

</refentry>




<refentry id="libpng-png-set-mem-fn-1">

<refmeta>
<refentrytitle>png_set_mem_fn</refentrytitle>
<refmiscinfo>libpng</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_mem_fn</refname>
<refpurpose>install custom memory allocation functions</refpurpose>
<indexterm id="ix-libpng-png-set-mem-fn-1">
	<primary>png_set_mem_fn</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_mem_fn</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_voidp
<parameter>mem_ptr</parameter>
</paramdef>
<paramdef>png_malloc_ptr
<parameter>malloc_fn</parameter>
</paramdef>
<paramdef>png_free_ptr
<parameter>free_fn</parameter>
</paramdef>


</funcprototype>
</funcsynopsis>
</refsynopsisdiv>

<refsect1>
<title>Description</title>
<para>This interface shall install custom memory allocation functions.</para>
<para>The parameter <parameter>png_ptr</parameter> shall specify the PNG file.</para>
<para>The parameter <parameter>mem_ptr</parameter> shall specify a struct provided by the user for memory functions.</para>
<para>The parameter <parameter>malloc_fn</parameter> shall specify the function used to
allocate memory. If the value of this parameter is <literal>NULL</literal>, then the capability to allocate
memory with the libpng ABI shall be disabled.</para>
<para>The parameter <parameter>free_fn</parameter> shall specify the function used to
free memory. If the value of this parameter is <literal>NULL</literal>, then the capability to free
memory with the libpng ABI shall be disabled.</para>
</refsect1>

</refentry>


<refentry id="libpng12.png.set.oFFs.1">
<refmeta>
<refentrytitle>png_set_oFFs</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_oFFs</refname>
<refpurpose>set screen offsets for given image</refpurpose>
<indexterm id="ix.libpng12.png.set.oFFs.1">	<primary>png_set_oFFs</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_oFFs</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>png_int_32
<parameter>offset_x</parameter>
</paramdef>
<paramdef>png_int_32
<parameter>offset_y</parameter>
</paramdef>
<paramdef>int
<parameter>unit_type</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_oFFs() shall set the positive offset from the left edge of the screen to
offset_x and the positive offset from the left edge of the screen to offset_y.
The unit_type must be PNG_OFFSET_PIXEL if the offset is defined in pixels or
PNG_OFFSET_MICROMETER if the offset is defined in microns.
</para>
</refsect1>


</refentry>


<refentry id="libpng12.png.set.pHYs.1">
<refmeta>
<refentrytitle>png_set_pHYs</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_pHYs</refname>
<refpurpose>set physical resolution</refpurpose>
<indexterm id="ix.libpng12.png.set.pHYs.1">	<primary>png_set_pHYs</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_pHYs</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>png_uint_32
<parameter>res_x</parameter>
</paramdef>
<paramdef>png_uint_32
<parameter>res_y</parameter>
</paramdef>
<paramdef>int
<parameter>unit_type</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_pHYs() sets the physical resolution for the image in pixels per unit.
The physical resolution in x direction is set to res_x and that in y direction
is set to res_y. unit_type must be set to PNG_RESOLUTION_METER is the unit for
resolution is pixels per unit, otherwise unit_type must be set to
PNG_RESOLUTION_UNKNOWN.
</para>
</refsect1>


</refentry>


<refentry id="libpng12.png.set.packing.1">
<refmeta>
<refentrytitle>png_set_packing</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_packing</refname>
<refpurpose>expand image to 1 pixel per byte for bit-depths 1,2 and 4</refpurpose>
<indexterm id="ix.libpng12.png.set.packing.1">	<primary>png_set_packing</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_packing</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_packing() shall expand image to 1 pixel per byte for bit-depths 1, 2 and
4 without changing the order of the pixels.
If png_set_packing() is not called, PNG files pack pixels of bit_depths 1, 2
and 4 into bytes as small as possible, for example, 8 pixels per byte for 1-bit
files.
</para>
</refsect1>


</refentry>


<refentry id="libpng12.png.set.packswap.1">
<refmeta>
<refentrytitle>png_set_packswap</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_packswap</refname>
<refpurpose>swap the order of pixels for packed-pixel image</refpurpose>
<indexterm id="ix.libpng12.png.set.packswap.1">	<primary>png_set_packswap</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_packswap</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_swap() shall change the pixel packing order for each byte for
packed-pixel images with bit-depths 1, 2 or 4.
</para>
</refsect1>


</refentry>


<refentry id="libpng12.png.set.palette.to.rgb.1">
<refmeta>
<refentrytitle>png_set_palette_to_rgb</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_palette_to_rgb</refname>
<refpurpose>set expansion transformation</refpurpose>
<indexterm id="ix.libpng12.png.set.palette.to.rgb.1">	<primary>png_set_palette_to_rgb</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_palette_to_rgb</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
<function>png_set_palette_to_rgb</function> shall set transformation in 
<parameter>png_ptr</parameter> such that paletted images are
expanded to RGB.
<function>png_set_palette_to_rgb</function> is actually an alias
for <function>png_set_expand</function>.
</para>
</refsect1>
</refentry>


<refentry id="libpng12.png.set.progressive.read.fn.1">
<refmeta>
<refentrytitle>png_set_progressive_read_fn</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_progressive_read_fn</refname>
<refpurpose>set progressive read callback functions</refpurpose>
<indexterm id="ix.libpng12.png.set.progressive.read.fn.1">	<primary>png_set_progressive_read_fn</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_progressive_read_fn</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_voidp
<parameter>user_ptr</parameter>
</paramdef>
<paramdef>png_progressive_info_ptr
<parameter>info_callback</parameter>
</paramdef>
<paramdef>png_progressive_row_ptr
<parameter>row_callback</parameter>
</paramdef>
<paramdef>png_progressive_end_ptr
<parameter>end_callback</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_progressive_read_fn() shall provide function callbacks for which shall
be called for processing image data by png_process_data(). "info_callback" shall
be called to process header information, "row_callback" shall be called when
each row is completed and "end_callback" shall be called to process end of image
information. png_set_progressive_read_fn() must be called even if all callback
functions are NULL. The user-defined structure pointed to by "user_ptr" may be
retrieved from inside the callbacks using function get_progressive_ptr().
</para>
</refsect1>
</refentry>


<refentry id="libpng12.png.set.read.fn.1">
<refmeta>
<refentrytitle>png_set_read_fn</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_read_fn</refname>
<refpurpose>set user-defined function for reading a PNG stream</refpurpose>
<indexterm id="ix.libpng12.png.set.read.fn.1">	<primary>png_set_read_fn</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_read_fn</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_voidp
<parameter>io_ptr</parameter>
</paramdef>
<paramdef>png_rw_ptr
<parameter>read_data_fn</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_read_fn() sets the read_data_fn as the input function for reading PNG
files instead of using standard C I/O stream functions.
png_ptr      - pointer to input data structure png_struct
io_ptr       - pointer to user-defined structure containing information about the
               input functions. This value may be NULL.
read_data_fn - pointer to new input function that shall take the following
               arguments:
               - a pointer to a png_struct 
			   - a pointer to a structure where input data can be stored
			   - 32-bit unsigned int to indicate number of bytes to read
			   The input function should invoke png_error() to handle any fatal
			   errors and png_warning() to handle non-fatal errors.
</para>
</refsect1>


</refentry>


<refentry id="libpng-png-set-read-user-chunk-fn-1">

<refmeta>
<refentrytitle>png_set_read_user_chunk_fn</refentrytitle>
<refmiscinfo>libpng</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_read_user_chunk_fn</refname>
<refpurpose>install custom callback function to handle 
unknown chunks in the input stream</refpurpose>
<indexterm id="ix-libpng-png-set-read-user-chunk-fn-1">
	<primary>png_set_read_user_chunk_fn</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_read_user_chunk_fn</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_voidp
<parameter>user_chunk_ptr</parameter>
</paramdef>
<paramdef>png_user_chunk_ptr
<parameter>read_user_chunk_fn</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>

<refsect1>
<title>Description</title>
<para>This interface shall install a custom callback function
to handle unknown chunks in the input stream.
</para>

<para>The parameter <parameter>png_ptr</parameter> shall specify the PNG file.</para>
<para>The parameter <parameter>user_chunk_ptr</parameter> shall specify a user pointer
obtainable with <function>png_get_user_chunk_ptr</function>.</para>
<para>The parameter <parameter>read_user_chunk_fn</parameter> shall specify
the custom callback function.</para>
</refsect1>
</refentry>


<refentry id="libpng-png-set-read-user-transform-fn-1">

<refmeta>
<refentrytitle>png_set_read_user_transform_fn</refentrytitle>
<refmiscinfo>libpng</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_read_user_transform_fn</refname>
<refpurpose>install a custom input transformation callback function</refpurpose>
<indexterm id="ix-libpng-png-set-read-user-transform-fn-1">
	<primary>png_set_read_user_transform_fn</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_read_user_transform_fn</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_user_transform_ptr
<parameter>read_user_transform_fn</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>

<refsect1>
<title>Description</title>
<para>This interface shall install a custom input transformation callback function.</para>
<para>The parameter <parameter>png_ptr</parameter> shall specify the PNG file to be transformed.</para>
<para>The parameter <parameter>read_user_transform_fn</parameter> shall specify
the custom callback function.</para>
</refsect1>
</refentry>


<refentry id="libpng12.png.set.rgb.to.gray.1">
<refmeta>
<refentrytitle>png_set_rgb_to_gray</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_rgb_to_gray</refname>
<refpurpose>reduce 24-bit RGB to grayscale image</refpurpose>
<indexterm id="ix.libpng12.png.set.rgb.to.gray.1">	<primary>png_set_rgb_to_gray</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_rgb_to_gray</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_rgb_to_gray() shall set transformations such that the 24-bit RGB
image is converted to grayscale.
</para>
</refsect1>
</refentry>


<refentry id="libpng12.png.set.rows.1">
<refmeta>
<refentrytitle>png_set_rows</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_rows</refname>
<refpurpose>put image data in png_info structure</refpurpose>
<indexterm id="ix.libpng12.png.set.rows.1">	<primary>png_set_rows</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_rows</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>png_bytepp
<parameter>row_pointers</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_rows() shall put rows of image data into the info_ptr structure, where
row_pointers is an array of pointers to the pixel data for each row.
</para>
</refsect1>
</refentry>


<refentry id="libpng12.png.set.sBIT.1">
<refmeta>
<refentrytitle>png_set_sBIT</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_sBIT</refname>
<refpurpose>set number of significant bits for each channel</refpurpose>
<indexterm id="ix.libpng12.png.set.sBIT.1">	<primary>png_set_sBIT</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_sBIT</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>png_color_8p
<parameter>sig_bit</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_sBIT shall set the number of significant bits for each of gray, red,
green and blue channels, whichever are appropriate for the given
color type.
</para>
</refsect1>


</refentry>


<refentry id="libpng12.png.set.sRGB.1">
<refmeta>
<refentrytitle>png_set_sRGB</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_sRGB</refname>
<refpurpose>set the rendering intent for given image</refpurpose>
<indexterm id="ix.libpng12.png.set.sRGB.1">	<primary>png_set_sRGB</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_sRGB</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>int
<parameter>srgb_intent</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_sRGB() shall set the rendering intent of an image as specified by
srgb_intent and shall set the sRGB chunk information to valid for the image. The
presence of sRGB chunk implies that the pixel data is in the sRGB color space.
srgb_intent can take one of the following values
<simplelist>
<member>PNG_sRGB_INTENT_SATURATION</member>
<member>PNG_sRGB_INTENT_PERCEPTUAL</member>
<member>PNG_sRGB_INTENT_ABSOLUTE</member>
<member>PNG_sRGB_INTENT_RELATIVE</member>
</simplelist>
</para>
</refsect1>
</refentry>


<refentry id="libpng-png-set-sRGB-gAMA-and-cHRM-1">

<refmeta>
<refentrytitle>png_set_sRGB_gAMA_and_cHRM</refentrytitle>
<refmiscinfo>libpng</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_sRGB_gAMA_and_cHRM</refname>
<refpurpose>set rendering intent, gamma values, and CIE chromaticities of a PNG file</refpurpose>
<indexterm id="ix-libpng-png-set-sRGB-gAMA-and-cHRM-1">
	<primary>png_set_sRGB_gAMA_and_cHRM</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_sRGB_gAMA_and_cHRM</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>int
<parameter>srgb_intent</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>

<refsect1>
<title>Description</title>
<para>This interface shall set the rendering intent, gamma values, and CIE chromaticities of a PNG file.</para>
<para>The parameter <parameter>png_ptr</parameter> shall specify the PNG file.</para>
<para>The parameter <parameter>info_ptr</parameter> shall specify the PNG info structure.</para>
<para>The parameter <parameter>srgb_intent</parameter> shall specify the rendering intent.
Because the sRGB chunk is present, the pixel data uses the sRGB color space.
This interface shall also write gAMA and cHRM chunks with values consistent with sRGB.
</para>
</refsect1>

</refentry>


<refentry id="libpng12.png.set.shift.1">
<refmeta>
<refentrytitle>png_set_shift</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_shift</refname>
<refpurpose>shift pixel values to valid bit-depth</refpurpose>
<indexterm id="ix.libpng12.png.set.shift.1">	<primary>png_set_shift</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_shift</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_color_8p
<parameter>true_bits</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
If image data in a row buffer is stored in a bit depth other than those
supported by PNG, png_set_shift() shall scale the values to a valid bit-depth
defined by PNG format.
For example, 3-bit data in range 0-7 is scaled to 4-bit PNG.
</para>
</refsect1>


</refentry>


<refentry id="libpng12.png.set.sig.bytes.1">
<refmeta>
<refentrytitle>png_set_sig_bytes</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_sig_bytes</refname>
<refpurpose>number of bytes read from PNG file</refpurpose>
<indexterm id="ix.libpng12.png.set.sig.bytes.1">	<primary>png_set_sig_bytes</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_sig_bytes</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>int
<parameter>num_bytes</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_sig_bytes() shall store the number of bytes of the PNG file signature
that have been read from the PNG stream.
</para>
</refsect1>

<refsect1>
<title>Errors</title>
<para>
png_set_sig_bytes() shall invoke error function if num_bytes > 8.
</para>
</refsect1>
</refentry>


<refentry id="libpng12.png.set.strip.16.1">
<refmeta>
<refentrytitle>png_set_strip_16</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_strip_16</refname>
<refpurpose>strip 16 bit PNG file to 8 bit depth</refpurpose>
<indexterm id="ix.libpng12.png.set.strip.16.1">	<primary>png_set_strip_16</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_strip_16</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_strip_16() shall strip the pixels of a PNG stream with 16 bits per 
channel to 8 bits per channel.
</para>
</refsect1>


</refentry>


<refentry id="libpng12.png.set.strip.alpha.1">
<refmeta>
<refentrytitle>png_set_strip_alpha</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_strip_alpha</refname>
<refpurpose>remove alpha channel on the given image</refpurpose>
<indexterm id="ix.libpng12.png.set.strip.alpha.1">	<primary>png_set_strip_alpha</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_strip_alpha</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_strip_alpha() shall set transformation on the image to remove the alpha
channel.
</para>
</refsect1>


</refentry>


<refentry id="libpng12.png.set.swap.1">
<refmeta>
<refentrytitle>png_set_swap</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_swap</refname>
<refpurpose>swap byte-order for 16 bit depth files</refpurpose>
<indexterm id="ix.libpng12.png.set.swap.1">	<primary>png_set_swap</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_swap</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
PNG files store 16-bit pixels in network byte order (big-endian, ie most
significant bytes first). png_set_swap() shall switch the byte-order to
little-endian (ie, least significant bits first).
</para>
</refsect1>


</refentry>


<refentry id="libpng12.png.set.swap.alpha.1">
<refmeta>
<refentrytitle>png_set_swap_alpha</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_swap_alpha</refname>
<refpurpose>swap image data from RGBA to ARGB format</refpurpose>
<indexterm id="ix.libpng12.png.set.swap.alpha.1">	<primary>png_set_swap_alpha</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_swap_alpha</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_swap_alpha() shall swap data for an image with an alpha channel from
RGBA format to ARGB format.
</para>
</refsect1>
</refentry>


<refentry id="libpng12.png.set.tIME.1">
<refmeta>
<refentrytitle>png_set_tIME</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_tIME</refname>
<refpurpose>set last modification time for the image</refpurpose>
<indexterm id="ix.libpng12.png.set.tIME.1">	<primary>png_set_tIME</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_tIME</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>png_timep
<parameter>mod_time</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_sBIT shall set the time of last modification of the image in info_ptr as
specified by mod_time.
</para>
</refsect1>


</refentry>


<refentry id="libpng12.png.set.tRNS.1">
<refmeta>
<refentrytitle>png_set_tRNS</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_tRNS</refname>
<refpurpose>set transparency values for images</refpurpose>
<indexterm id="ix.libpng12.png.set.tRNS.1">	<primary>png_set_tRNS</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_tRNS</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>png_bytep
<parameter>trans</parameter>
</paramdef>
<paramdef>int
<parameter>num_trans</parameter>
</paramdef>
<paramdef>png_color_16p
<parameter>trans_values</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_tRNS() shall set the transparency data for paletted images and
image types that don't need a full alpha channel. 
For a paletted image, png_set_tRNS() shall set the array of transparency values 
for the palette colors to "trans". The number of transparency entries is given
by "num_trans".
For non-paletted images, png_set_tRNS() shall set the single color value or
graylevel to "trans_values"
</para>
</refsect1>
</refentry>


<refentry id="libpng12.png.set.tRNS.to.alpha.1">
<refmeta>
<refentrytitle>png_set_tRNS_to_alpha</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_tRNS_to_alpha</refname>
<refpurpose>set expansion transformation</refpurpose>
<indexterm id="ix.libpng12.png.set.tRNS.to.alpha.1">	<primary>png_set_tRNS_to_alpha</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_tRNS_to_alpha</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
<function>png_set_tRNS_to_alpha</function> shall set transformation in 
<parameter>png_ptr</parameter> such that tRNS chunks are expanded to
alpha channels.
<function>png_set_tRNS_to_alpha</function> is actually an alias
for <function>png_set_expand</function>.
</para>
</refsect1>
</refentry>


<refentry id="libpng12.png.set.text.1">
<refmeta>
<refentrytitle>png_set_text</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_text</refname>
<refpurpose>stores information for image comments</refpurpose>
<indexterm id="ix.libpng12.png.set.text.1">	<primary>png_set_text</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_text</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>png_textp
<parameter>text_ptr</parameter>
</paramdef>
<paramdef>int
<parameter>num_text</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
<function>png_set_text</function> shall store information
for image comments given in <parameter>text_ptr</parameter> to
<parameter>info_ptr</parameter>. <parameter>text_ptr</parameter>
is an array of size <parameter>num_text</parameter> of
<structname>png_text</structname> structures whose member fields include:
<variablelist>
<varlistentry>
<term><parameter>compression</parameter></term>
<listitem><para>type of compression used on text. Valid values are:
<simplelist>
<member>PNG_TEXT_COMPRESSION_NONE</member>
<member>PNG_TEXT_COMPRESSION_zTXt</member>
<member>PNG_ITXT_COMPRESSION_NONE</member>
<member>PNG_ITXT_COMPRESSION_zTXt</member>
</simplelist>
</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>key</parameter></term>
<listitem><para>keyword for comment. Must contain 1-79 characters.
</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>text</parameter></term>
<listitem><para>text comment for current keyword. May be empty.
</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>text_length</parameter></term>
<listitem><para>length of text string after decompression. 0 for iTXt.
</para></listitem>
</varlistentry>
<!-- these were found to be too new, removed for now
<varlistentry>
<term><parameter>itxt_length</parameter></term>
<listitem><para>length of iTXt string after decompression. 0 for tEXt/zTXt.
</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>lang</parameter></term>
<listitem><para>language of comment. Empty string if language is unknown.
</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>lang_key</parameter></term>
<listitem><para>keyword in UTF-8. Empty string if language is unknown.
</para></listitem>
</varlistentry>
end of removed chunk -->
</variablelist>
</para>
</refsect1>
</refentry>


<refentry id="libpng-png-set-unknown-chunk-location-1">

<refmeta>
<refentrytitle>png_set_unknown_chunk_location</refentrytitle>
<refmiscinfo>libpng</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_unknown_chunk_location</refname>
<refpurpose>set the location of an unknown chunk in a PNG file</refpurpose>
<indexterm id="ix-libpng-png-set-unknown-chunk-location-1">
	<primary>png_set_unknown_chunk_location</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_unknown_chunk_location</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>int
<parameter>chunk</parameter>
</paramdef>
<paramdef>int
<parameter>location</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>

<refsect1>
<title>Description</title>
<para>This interface shall set the location of an unknown chunk in a PNG file.</para>

<para>The parameter <parameter>png_ptr</parameter> shall specify the PNG file.</para>
<para>The parameter <parameter>info_ptr</parameter> shall specify the PNG info structure.</para>
<para>The parameter <parameter>chunk</parameter> shall specify the number of the chunk in the
array of unknown chunks.</para>
<para>The parameter <parameter>location</parameter> shall specify the new location of the chunk
within the PNG file.</para>
</refsect1>

</refentry>


<refentry id="libpng-png-set-unknown-chunks-1">

<refmeta>
<refentrytitle>png_set_unknown_chunks</refentrytitle>
<refmiscinfo>libpng</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_unknown_chunks</refname>
<refpurpose>insert unknown chunks into a PNG file</refpurpose>
<indexterm id="ix-libpng-png-set-unknown-chunks-1">
	<primary>png_set_unknown_chunks</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_unknown_chunks</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>png_unknown_chunkp
<parameter>unknowns</parameter>
</paramdef>
<paramdef>int
<parameter>num_unknowns</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>

<refsect1>
<title>Description</title>
<para>This interface shall insert unknown chunks into a PNG file.</para>
<para>The parameter <parameter>png_ptr</parameter> shall specify the PNG file.</para>
<para>The parameter <parameter>info_ptr</parameter> shall specify the PNG info structure.</para>
<para>The parameter <parameter>unknowns</parameter> shall specify an array of <type>png_unknown_chunk</type>
structures containing the unknown chunks, as described under <function>png_get_unknown_chunks</function>.
The <varname>location</varname> member of a <type>png_unknown_chunk</type> structure can take several
special values (see below).</para>
<para>The parameter <parameter>num_unknowns</parameter> shall specify the number of unknown chunks.</para>

<para>The special values for the <varname>location</varname> members 
of the <type>png_unknown_chunk</type> structures
are as follows.</para>

<para>
<VARIABLELIST>
<VARLISTENTRY>
<TERM>
0
</TERM>
<LISTITEM>
<PARA>
do not write the chunk
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>
<constant>PNG_HAVE_IHDR</constant>
</TERM>
<LISTITEM>
<PARA>
insert chunk before PLTE
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>
<constant>PNG_HAVE_PLTE</constant>
</TERM>
<LISTITEM>
<PARA>
insert chunk before IDAT
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>
<constant>PNG_AFTER_IDAT</constant>
</TERM>
<LISTITEM>
<PARA>
insert chunk after IDAT
</PARA>
</LISTITEM>
</VARLISTENTRY>

</VARIABLELIST>
</para>
</refsect1>

<REFSECT1>
<TITLE>Notes
</TITLE>
<PARA>
The <varname>location</varname> member of the <type>png_unknown_chunk</type> structure
is set automatically depending on how much of the PNG file has been written.
Its value can be changed after calling this interface.
The chunk is placed within a location according to its position in the array
of structures, as described under <function>png_get_unknown_chunks</function>.
</PARA>
</REFSECT1>

</refentry>


<refentry id="libpng12.png.set.write.fn.1">
<refmeta>
<refentrytitle>png_set_write_fn</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_write_fn</refname>
<refpurpose>set user-defined function for writing a PNG stream</refpurpose>
<indexterm id="ix.libpng12.png.set.write.fn.1">	<primary>png_set_write_fn</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_write_fn</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_voidp
<parameter>io_ptr</parameter>
</paramdef>
<paramdef>png_rw_ptr
<parameter>write_data_fn</parameter>
</paramdef>
<paramdef>png_flush_ptr
<parameter>output_flush_fn</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_write_fn() sets the write_data_fn as the output function for writing PNG
files instead of using standard C I/O stream functions.
png_ptr       - pointer to output data structure png_struct
io_ptr        - pointer to user-defined structure containing information about 
                the output functions. This value may be NULL.
write_data_fn - pointer to new output function that shall take the following
                arguments:
                - a pointer to a png_struct 
			    - a pointer to a structure where output data can be stored
			    - 32-bit unsigned int to indicate number of bytes to write
			    The output function should invoke png_error() to handle any fatal
			    errors and png_warning() to handle non-fatal errors.
flush_data_fn - pointer to a new flush function that shall take a pointer to
                a png_struct as argument. This function shall flush any
				remaining data in buffers used by the output function. If the
				output function does not buffer output, a function prototype
				must still be supplied.
</para>
</refsect1>


</refentry>


<refentry id="libpng-png-set-write-status-fn-1">

<refmeta>
<refentrytitle>png_set_write_status_fn</refentrytitle>
<refmiscinfo>libpng</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_write_status_fn</refname>
<refpurpose>install custom callback function
to be called after row is written
</refpurpose>
<indexterm id="ix-libpng-png-set-write-status-fn-1">
	<primary>png_set_write_status_fn</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_write_status_fn</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_write_status_ptr
<parameter>write_row_fn</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>

<refsect1>
<title>Description</title>
<para>This interface shall install a custom
callback function to be called after a row has been written.</para>
<para>The parameter <parameter>png_ptr</parameter> shall specify the PNG file to be transformed.</para>
<para>The parameter <parameter>write_row_fn</parameter> shall specify
the custom callback function.</para>
</refsect1>
</refentry>


<refentry id="libpng-png-set-write-user-transform-fn-1">

<refmeta>
<refentrytitle>png_set_write_user_transform_fn</refentrytitle>
<refmiscinfo>libpng</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_write_user_transform_fn</refname>
<refpurpose>install a custom output transformation callback function</refpurpose>
<indexterm id="ix-libpng-png-set-write-user-transform-fn-1">
	<primary>png_set_write_user_transform_fn</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_write_user_transform_fn</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_user_transform_ptr
<parameter>write_user_transform_fn</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>

<refsect1>
<title>Description</title>
<para>This interface shall install a custom output transformation callback function.</para>
<para>The parameter <parameter>png_ptr</parameter> shall specify the PNG file to be transformed.</para>
<para>The parameter <parameter>write_user_transform_fn</parameter> shall specify
the custom callback function.</para>
</refsect1>
</refentry>


<refentry id="libpng12.png.sig.cmp.1">
<refmeta>
<refentrytitle>png_sig_cmp</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_sig_cmp</refname>
<refpurpose>match the PNG signature</refpurpose>
<indexterm id="ix.libpng12.png.sig.cmp.1">	<primary>png_sig_cmp</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>int
<function>png_sig_cmp</function>
</funcdef>
<paramdef>png_bytep
<parameter>sig</parameter>
</paramdef>
<paramdef>png_size_t
<parameter>start</parameter>
</paramdef>
<paramdef>png_size_t
<parameter>num_to_check</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_sig_cmp() checks whether the given number of bytes match the PNG signature
starting from the start position. The function shall return non-zero if 
num_to_check == 0 or start > 7.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
Zero - the given number of bytes starting from start position match the
respective bytes of the PNG signature.
Non-zero - the given number of bytes starting from start position do not match
the respective bytes of the PNG signature or num_to_check == 0 or start > 7.
</para>
</refsect1>
</refentry>


<refentry id="libpng-png-start-read-image-1">

<refmeta>
<refentrytitle>png_start_read_image</refentrytitle>
<refmiscinfo>libpng</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_start_read_image</refname>
<refpurpose>start reading a PNG file</refpurpose>
<indexterm id="ix-libpng-png-start-read-image-1">
	<primary>png_start_read_image</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_start_read_image</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>

<refsect1>
<title>Description</title>
<para>This interface shall update the palette with the previously 
specified transformations, and then
start reading the specified PNG file.</para>
<para>The parameter <parameter>png_ptr</parameter> shall specify the PNG file to read.</para>
</refsect1>
</refentry>


<refentry id="libpng12.png.warning.1">
<refmeta>
<refentrytitle>png_warning</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_warning</refname>
<refpurpose>default function to handle non-fatal errors</refpurpose>
<indexterm id="ix.libpng12.png.warning.1">	<primary>png_warning</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_warning</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_const_charp
<parameter>warning_message</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_warning() is the default function for handling non-fatal errors. The
default function to handle warnings may be changed by using png_set_error_fn()
to replace the warning function at run-time.
</para>
</refsect1>


</refentry>


<refentry id="libpng12.png.write.chunk.1">
<refmeta>
<refentrytitle>png_write_chunk</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_write_chunk</refname>
<refpurpose>write a PNG chunk</refpurpose>
<indexterm id="ix.libpng12.png.write.chunk.1">	<primary>png_write_chunk</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_write_chunk</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_bytep
<parameter>chunk_name</parameter>
</paramdef>
<paramdef>png_bytep
<parameter>data</parameter>
</paramdef>
<paramdef>png_size_t
<parameter>length</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_write_chunk() writes the start of a PNG chunk, the chunk data and the end of
the chunk all at once. 
</para>
</refsect1>


</refentry>


<refentry id="libpng12.png.write.end.1">
<refmeta>
<refentrytitle>png_write_end</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_write_end</refname>
<refpurpose>write the end of a PNG file</refpurpose>
<indexterm id="ix.libpng12.png.write.end.1">	<primary>png_write_end</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_write_end</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_write_end() writes the end of a PNG file to which the image data has already
been written. The user may write time information or comments at the end of the
PNG file.
</para>
</refsect1>


</refentry>


<refentry id="libpng12.png.write.flush.1">
<refmeta>
<refentrytitle>png_write_flush</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_write_flush</refname>
<refpurpose>flush the current output buffers</refpurpose>
<indexterm id="ix.libpng12.png.write.flush.1">	<primary>png_write_flush</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_write_flush</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_write_flush() shall the current output buffers for any pending data.
</para>
</refsect1>
</refentry>


<refentry id="libpng12.png.write.image.1">
<refmeta>
<refentrytitle>png_write_image</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_write_image</refname>
<refpurpose>write the given image data</refpurpose>
<indexterm id="ix.libpng12.png.write.image.1">	<primary>png_write_image</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_write_image</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_bytepp
<parameter>image</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Write the rows of given image data. If the image is not interlaced, the image
shall be written in a single pass.
</para>
</refsect1>


</refentry>


<refentry id="libpng12.png.write.info.1">
<refmeta>
<refentrytitle>png_write_info</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_write_info</refname>
<refpurpose>write PNG information to file</refpurpose>
<indexterm id="ix.libpng12.png.write.info.1">	<primary>png_write_info</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_write_info</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_write_info() writes the PNG information in info_ptr to file.
</para>
</refsect1>


</refentry>


<refentry id="libpng12.png.write.png.1">
<refmeta>
<refentrytitle>png_write_png</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_write_png</refname>
<refpurpose>write the entire PNG file</refpurpose>
<indexterm id="ix.libpng12.png.write.png.1">	<primary>png_write_png</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_write_png</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>int
<parameter>transforms</parameter>
</paramdef>
<paramdef>png_voidp
<parameter>params</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_write_png() shall provide the high-level write operation. The function 
shall write the PNG stream if the entire image information is available in
png_ptr. The integer "transforms" shall contain the
logical OR of a set of the following transformation flags:
<variablelist>
<varlistentry>
<term><parameter>PNG_TRANSFORM_IDENTITY</parameter></term>
<listitem><para>No transformation</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>PNG_TRANSFORM_PACKING</parameter></term>
<listitem><para>Expand 1, 2 and 4-bit samples to bytes</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>PNG_TRANSFORM_PACKSWAP</parameter></term>
<listitem><para>Change order of packed pixels to LSB first</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>PNG_TRANSFORM_INVERT_MONO</parameter></term>
<listitem><para>Invert monochrome images</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>PNG_TRANSFORM_SHIFT</parameter></term>
<listitem><para>Normalize pixels to the sBIT depth</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>PNG_TRANSFORM_BGR</parameter></term>
<listitem><para>Flip RGB to BGR, RGBA to BGRA</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>PNG_TRANSFORM_SWAP_ALPHA</parameter></term>
<listitem><para>Flip RGBA to ARGB or GA to AG</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>PNG_TRANSFORM_INVERT_ALPHA</parameter></term>
<listitem><para>Change alpha from opacity to transparency</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>PNG_TRANSFORM_SWAP_ENDIAN</parameter></term>
<listitem><para>Byte-swap 16-bit samples</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>PNG_TRANSFORM_STRIP_FILLER</parameter></term>
<listitem><para>Strip off filler bytes</para></listitem>
</varlistentry>
</variablelist>

"params" is unused and must be set to NULL.
</para>
</refsect1>
</refentry>


<refentry id="libpng12.png.write.row.1">
<refmeta>
<refentrytitle>png_write_row</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_write_row</refname>
<refpurpose>write a row of image data</refpurpose>
<indexterm id="ix.libpng12.png.write.row.1">	<primary>png_write_row</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_write_row</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_bytep
<parameter>row</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Process and write a row of image data. The header information must have been
written before the image data can be written.
</para>
</refsect1>


</refentry>


<refentry id="libpng12.png.write.rows.1">
<refmeta>
<refentrytitle>png_write_rows</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_write_rows</refname>
<refpurpose>write multiple rows of image data</refpurpose>
<indexterm id="ix.libpng12.png.write.rows.1">	<primary>png_write_rows</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_write_rows</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_bytepp
<parameter>row</parameter>
</paramdef>
<paramdef>png_uint_32
<parameter>num_rows</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Process and write "num_rows" rows of image data starting from "row".
</para>
</refsect1>


</refentry>


</SECT1>
<!-- End of text generated from database -->


</CHAPTER>

</PART>
