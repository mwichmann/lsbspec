<PART ID="toclibpng">
<TITLE>PNG12 library</TITLE>

<CHAPTER id=libpng>
<TITLE>Libraries</TITLE>

<!-- Start of text generated from database -->
<!-- generated from the LSB specification database -->
<!--    by $Header: mklibspec 1.82 2006/03/29 19:10:18 mats Exp 0 -->
<!--    at Fri Nov 16 19:41:15 2007 -->
<SECT1 ID=libpng12>
<TITLE>Interfaces for libpng12</TITLE>
<PARA>
<XREF LINKEND="lib-libpng12-def"> defines the library name and shared object name
for the libpng12 library
</PARA>
<TABLE id="lib-libpng12-def">
<TITLE>libpng12 Definition</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Library:</ENTRY>
<ENTRY>libpng12</ENTRY>
</ROW>
<ROW>
<ENTRY>SONAME:</ENTRY>
<ENTRY>libpng12.so.0</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The behavior of the interfaces in this library is specified by the following specifications:<SIMPLELIST COLUMNS=1>
<MEMBER ID='REFSTD.libpng12.1'>
[LSB] <XREF LINKEND="std.LSB">
</MEMBER>
</SIMPLELIST>
</PARA>
<!-- debug: database interface name PNG Reference library -->
<SECT2>
<!--libgroup-->
<TITLE>PNG Reference library</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for PNG Reference library</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic functions
for PNG Reference library specified in <XREF linkend="tbl-libpng12-png-r-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<TABLE id="tbl-libpng12-png-r-ints">
<TITLE>libpng12 - PNG Reference library Function Interfaces</TITLE>
<TGROUP COLS=3>
<TBODY>
<ROW>
<ENTRY><indexterm><primary>png_access_version_number</primary></indexterm>png_access_version_number <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_create_info_struct</primary></indexterm>png_create_info_struct <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_create_read_struct</primary></indexterm>png_create_read_struct <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_create_write_struct</primary></indexterm>png_create_write_struct <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_destroy_read_struct</primary></indexterm>png_destroy_read_struct <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_destroy_write_struct</primary></indexterm>png_destroy_write_struct <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_error</primary></indexterm>png_error <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_free</primary></indexterm>png_free <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_get_IHDR</primary></indexterm>png_get_IHDR <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_get_PLTE</primary></indexterm>png_get_PLTE <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_get_bKGD</primary></indexterm>png_get_bKGD <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_get_bit_depth</primary></indexterm>png_get_bit_depth <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_get_cHRM</primary></indexterm>png_get_cHRM <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_get_channels</primary></indexterm>png_get_channels <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_get_color_type</primary></indexterm>png_get_color_type <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_get_error_ptr</primary></indexterm>png_get_error_ptr <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_get_gAMA</primary></indexterm>png_get_gAMA <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_get_hIST</primary></indexterm>png_get_hIST <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_get_iCCP</primary></indexterm>png_get_iCCP <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_get_image_height</primary></indexterm>png_get_image_height <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_get_image_width</primary></indexterm>png_get_image_width <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_get_interlace_type</primary></indexterm>png_get_interlace_type <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_get_io_ptr</primary></indexterm>png_get_io_ptr <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_get_libpng_ver</primary></indexterm>png_get_libpng_ver <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_get_oFFs</primary></indexterm>png_get_oFFs <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_get_pHYs</primary></indexterm>png_get_pHYs <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_get_progressive_ptr</primary></indexterm>png_get_progressive_ptr <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_get_rowbytes</primary></indexterm>png_get_rowbytes <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_get_rows</primary></indexterm>png_get_rows <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_get_sBIT</primary></indexterm>png_get_sBIT <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_get_sRGB</primary></indexterm>png_get_sRGB <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_get_tIME</primary></indexterm>png_get_tIME <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_get_tRNS</primary></indexterm>png_get_tRNS <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_get_text</primary></indexterm>png_get_text <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_get_valid</primary></indexterm>png_get_valid <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_get_x_offset_pixels</primary></indexterm>png_get_x_offset_pixels <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_get_x_pixels_per_meter</primary></indexterm>png_get_x_pixels_per_meter <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_get_y_offset_pixels</primary></indexterm>png_get_y_offset_pixels <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_get_y_pixels_per_meter</primary></indexterm>png_get_y_pixels_per_meter <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_init_io</primary></indexterm>png_init_io <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_malloc</primary></indexterm>png_malloc <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_process_data</primary></indexterm>png_process_data <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_progressive_combine_row</primary></indexterm>png_progressive_combine_row <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_read_end</primary></indexterm>png_read_end <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_read_image</primary></indexterm>png_read_image <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_read_info</primary></indexterm>png_read_info <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_read_png</primary></indexterm>png_read_png <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_read_row</primary></indexterm>png_read_row <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_read_rows</primary></indexterm>png_read_rows <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_read_update_info</primary></indexterm>png_read_update_info <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_IHDR</primary></indexterm>png_set_IHDR <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_set_PLTE</primary></indexterm>png_set_PLTE <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_bKGD</primary></indexterm>png_set_bKGD <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_background</primary></indexterm>png_set_background <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_set_bgr</primary></indexterm>png_set_bgr <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_cHRM</primary></indexterm>png_set_cHRM <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_compression_level</primary></indexterm>png_set_compression_level <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_set_dither</primary></indexterm>png_set_dither <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_error_fn</primary></indexterm>png_set_error_fn <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_expand</primary></indexterm>png_set_expand <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_set_filler</primary></indexterm>png_set_filler <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_filter</primary></indexterm>png_set_filter <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_gAMA</primary></indexterm>png_set_gAMA <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_set_gamma</primary></indexterm>png_set_gamma <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_gray_to_rgb</primary></indexterm>png_set_gray_to_rgb <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_hIST</primary></indexterm>png_set_hIST <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_set_iCCP</primary></indexterm>png_set_iCCP <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_interlace_handling</primary></indexterm>png_set_interlace_handling <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_invert_mono</primary></indexterm>png_set_invert_mono <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_set_oFFs</primary></indexterm>png_set_oFFs <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_pHYs</primary></indexterm>png_set_pHYs <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_packing</primary></indexterm>png_set_packing <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_set_packswap</primary></indexterm>png_set_packswap <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_progressive_read_fn</primary></indexterm>png_set_progressive_read_fn <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_read_fn</primary></indexterm>png_set_read_fn <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_set_rgb_to_gray</primary></indexterm>png_set_rgb_to_gray <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_rows</primary></indexterm>png_set_rows <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_sBIT</primary></indexterm>png_set_sBIT <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_set_sRGB</primary></indexterm>png_set_sRGB <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_shift</primary></indexterm>png_set_shift <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_sig_bytes</primary></indexterm>png_set_sig_bytes <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_set_strip_16</primary></indexterm>png_set_strip_16 <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_strip_alpha</primary></indexterm>png_set_strip_alpha <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_swap</primary></indexterm>png_set_swap <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_set_swap_alpha</primary></indexterm>png_set_swap_alpha <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_tIME</primary></indexterm>png_set_tIME <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_tRNS</primary></indexterm>png_set_tRNS <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_set_tRNS_to_alpha</primary></indexterm>png_set_tRNS_to_alpha <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_text</primary></indexterm>png_set_text <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_write_fn</primary></indexterm>png_set_write_fn <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_sig_cmp</primary></indexterm>png_sig_cmp <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_warning</primary></indexterm>png_warning <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_write_chunk</primary></indexterm>png_write_chunk <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_write_end</primary></indexterm>png_write_end <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_write_flush</primary></indexterm>png_write_flush <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_write_image</primary></indexterm>png_write_image <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_write_info</primary></indexterm>png_write_info <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_write_png</primary></indexterm>png_write_png <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_write_row</primary></indexterm>png_write_row <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_write_rows</primary></indexterm>png_write_rows <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for PNG Reference library specified in <XREF linkend="tbl-libpng12-png-r-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<TABLE id="tbl-libpng12-png-r-data">
<TITLE>libpng12 - PNG Reference library Data Interfaces</TITLE>
<TGROUP COLS=3>
<TBODY>
<ROW>
<ENTRY><indexterm><primary>png_libpng_ver</primary></indexterm>png_libpng_ver <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>
</SECT2>
</SECT1>
<SECT1 ID=libpng12-ddefs>
<TITLE>Data Definitions for libpng12</TITLE>
<PARA>
This section defines global identifiers and their values that are associated
with interfaces contained in libpng12.
These definitions are organized into groups that
correspond to system headers. This convention is used as a
convenience for the reader, and does not imply the existence
of these headers, or their content.
Where an interface is defined as requiring a particular system header file
all of the data definitions for that system header file presented here shall be in effect.
</PARA>
<PARA>
This section gives data definitions to promote binary application
portability, not to repeat source interface definitions available
elsewhere. System providers and application developers should use this ABI
to supplement - not to replace - source interface definition specifications.
</PARA>
<PARA>
This specification uses the <XREF LINKEND='std.ISOC99'> C Language as the reference programming language, and data definitions are specified in ISO C format. The C language is used here as a convenient notation. Using a C language description of these data objects does not preclude their use by other programming languages.</PARA>
<SECT2>
<TITLE>png.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define FARDATA
#define PNGAPI
#define PNG_1_2_X
#define PNG_ASSEMBLER_CODE_SUPPORTED
#define PNG_EASY_ACCESS_SUPPORTED
#define PNG_ERROR_NUMBERS_SUPPORTED
#define PNG_FIXED_POINT_SUPPORTED
#define PNG_FLOATING_POINT_SUPPORTED
#define PNG_FREE_ME_SUPPORTED
#define PNG_HANDLE_AS_UNKNOWN_SUPPORTED
#define PNG_IMPEXP
#define PNG_INFO_IMAGE_SUPPORTED
#define PNG_MMX_CODE_SUPPORTED
#define PNG_MNG_FEATURES_SUPPORTED
#define PNG_NO_READ_iTXt
#define PNG_NO_WRITE_iTXt
#define PNG_PROGRESSIVE_READ_SUPPORTED
#define PNG_READ_16_TO_8_SUPPORTED
#define PNG_READ_ANCILLARY_CHUNKS_SUPPORTED
#define PNG_READ_BACKGROUND_SUPPORTED
#define PNG_READ_BGR_SUPPORTED
#define PNG_READ_COMPOSITE_NODIV_SUPPORTED
#define PNG_READ_DITHER_SUPPORTED
#define PNG_READ_EMPTY_PLTE_SUPPORTED
#define PNG_READ_EXPAND_SUPPORTED
#define PNG_READ_FILLER_SUPPORTED
#define PNG_READ_GAMMA_SUPPORTED
#define PNG_READ_GRAY_TO_RGB_SUPPORTED
#define PNG_READ_INTERLACING_SUPPORTED
#define PNG_READ_INVERT_ALPHA_SUPPORTED
#define PNG_READ_INVERT_SUPPORTED
#define PNG_READ_OPT_PLTE_SUPPORTED
#define PNG_READ_PACKSWAP_SUPPORTED
#define PNG_READ_PACK_SUPPORTED
#define PNG_READ_RGB_TO_GRAY_SUPPORTED
#define PNG_READ_SHIFT_SUPPORTED
#define PNG_READ_STRIP_ALPHA_SUPPORTED
#define PNG_READ_SUPPORTED
#define PNG_READ_SWAP_ALPHA_SUPPORTED
#define PNG_READ_SWAP_SUPPORTED
#define PNG_READ_TEXT_SUPPORTED
#define PNG_READ_TRANSFORMS_SUPPORTED
#define PNG_READ_UNKNOWN_CHUNKS_SUPPORTED
#define PNG_READ_USER_CHUNKS_SUPPORTED
#define PNG_READ_USER_TRANSFORM_SUPPORTED
#define PNG_READ_bKGD_SUPPORTED
#define PNG_READ_cHRM_SUPPORTED
#define PNG_READ_gAMA_SUPPORTED
#define PNG_READ_hIST_SUPPORTED
#define PNG_READ_iCCP_SUPPORTED
#define PNG_READ_oFFs_SUPPORTED
#define PNG_READ_pCAL_SUPPORTED
#define PNG_READ_pHYs_SUPPORTED
#define PNG_READ_sBIT_SUPPORTED
#define PNG_READ_sCAL_SUPPORTED
#define PNG_READ_sPLT_SUPPORTED
#define PNG_READ_sRGB_SUPPORTED
#define PNG_READ_tEXt_SUPPORTED
#define PNG_READ_tIME_SUPPORTED
#define PNG_READ_tRNS_SUPPORTED
#define PNG_READ_zTXt_SUPPORTED
#define PNG_SETJMP_SUPPORTED
#define PNG_SET_USER_LIMITS_SUPPORTED
#define PNG_TEXT_SUPPORTED
#define PNG_TIME_RFC1123_SUPPORTED
#define PNG_UNKNOWN_CHUNKS_SUPPORTED
#define PNG_USER_CHUNKS_SUPPORTED
#define PNG_USER_MEM_SUPPORTED
#define PNG_USER_TRANSFORM_PTR_SUPPORTED
#define PNG_USE_GLOBAL_ARRAYS
#define PNG_WRITE_ANCILLARY_CHUNKS_SUPPORTED
#define PNG_WRITE_BGR_SUPPORTED
#define PNG_WRITE_EMPTY_PLTE_SUPPORTED
#define PNG_WRITE_FILLER_SUPPORTED
#define PNG_WRITE_FLUSH_SUPPORTED
#define PNG_WRITE_INTERLACING_SUPPORTED
#define PNG_WRITE_INVERT_ALPHA_SUPPORTED
#define PNG_WRITE_INVERT_SUPPORTED
#define PNG_WRITE_PACKSWAP_SUPPORTED
#define PNG_WRITE_PACK_SUPPORTED
#define PNG_WRITE_SHIFT_SUPPORTED
#define PNG_WRITE_SUPPORTED
#define PNG_WRITE_SWAP_ALPHA_SUPPORTED
#define PNG_WRITE_SWAP_SUPPORTED
#define PNG_WRITE_TEXT_SUPPORTED
#define PNG_WRITE_TRANSFORMS_SUPPORTED
#define PNG_WRITE_UNKNOWN_CHUNKS_SUPPORTED
#define PNG_WRITE_USER_TRANSFORM_SUPPORTED
#define PNG_WRITE_WEIGHTED_FILTER_SUPPORTED
#define PNG_WRITE_bKGD_SUPPORTED
#define PNG_WRITE_cHRM_SUPPORTED
#define PNG_WRITE_gAMA_SUPPORTED
#define PNG_WRITE_hIST_SUPPORTED
#define PNG_WRITE_iCCP_SUPPORTED
#define PNG_WRITE_oFFs_SUPPORTED
#define PNG_WRITE_pCAL_SUPPORTED
#define PNG_WRITE_pHYs_SUPPORTED
#define PNG_WRITE_sBIT_SUPPORTED
#define PNG_WRITE_sCAL_SUPPORTED
#define PNG_WRITE_sPLT_SUPPORTED
#define PNG_WRITE_sRGB_SUPPORTED
#define PNG_WRITE_tEXt_SUPPORTED
#define PNG_WRITE_tIME_SUPPORTED
#define PNG_WRITE_tRNS_SUPPORTED
#define PNG_WRITE_zTXt_SUPPORTED
#define PNG_bKGD_SUPPORTED
#define PNG_cHRM_SUPPORTED
#define PNG_gAMA_SUPPORTED
#define PNG_hIST_SUPPORTED
#define PNG_iCCP_SUPPORTED
#define PNG_oFFs_SUPPORTED
#define PNG_pCAL_SUPPORTED
#define PNG_pHYs_SUPPORTED
#define PNG_sBIT_SUPPORTED
#define PNG_sCAL_SUPPORTED
#define PNG_sPLT_SUPPORTED
#define PNG_sRGB_SUPPORTED
#define PNG_tEXt_SUPPORTED
#define PNG_tIME_SUPPORTED
#define PNG_tRNS_SUPPORTED
#define PNG_zTXt_SUPPORTED
#define PNG_HEADER_VERSION_STRING	" libpng version 1.2.8 - December 3, 2004 (header)\n"
#define PNG_MMX_READ_FLAGS	 \
	( PNG_ASM_FLAG_MMX_READ_COMBINE_ROW | PNG_ASM_FLAG_MMX_READ_INTERLACE \
	| PNG_ASM_FLAG_MMX_READ_FILTER_SUB | PNG_ASM_FLAG_MMX_READ_FILTER_UP | \
	PNG_ASM_FLAG_MMX_READ_FILTER_AVG | PNG_ASM_FLAG_MMX_READ_FILTER_PAETH \
	)
#define PNG_MMX_FLAGS	 \
	( PNG_ASM_FLAG_MMX_SUPPORT_COMPILED | PNG_ASM_FLAG_MMX_SUPPORT_IN_CPU \
	| PNG_MMX_READ_FLAGS | PNG_MMX_WRITE_FLAGS )
#define PNG_COLOR_TYPE_RGB_ALPHA	 \
	(PNG_COLOR_MASK_COLOR | PNG_COLOR_MASK_ALPHA)
#define PNG_COLOR_TYPE_PALETTE	 \
	(PNG_COLOR_MASK_COLOR | PNG_COLOR_MASK_PALETTE)
#define PNG_ALL_FILTERS	 \
	(PNG_FILTER_NONE | PNG_FILTER_SUB | PNG_FILTER_UP | PNG_FILTER_AVG | \
	PNG_FILTER_PAETH)
#define png_info_init(info_ptr)	 \
	png_info_init_3(&amp;info_ptr, png_sizeof(png_info));
#define png_composite(composite,fg,alpha,bg)	 \
	{ png_uint_16 temp = (png_uint_16)((png_uint_16)(fg) * \
	(png_uint_16)(alpha) + (png_uint_16)(bg)*(png_uint_16)(255 - \
	(png_uint_16)(alpha)) + (png_uint_16)128); (composite) = \
	(png_byte)((temp + (temp >> 8)) >> 8); }
#define png_composite_16(composite,fg,alpha,bg)	 \
	{ png_uint_32 temp = (png_uint_32)((png_uint_32)(fg) * \
	(png_uint_32)(alpha) + (png_uint_32)(bg)*(png_uint_32)(65535L - \
	(png_uint_32)(alpha)) + (png_uint_32)32768L); (composite) = \
	(png_uint_16)((temp + (temp >> 16)) >> 16); }
#define PNG_MMX_WRITE_FLAGS	( 0 )
#define PNG_SIZE_MAX	((png_size_t)(-1))
#define PNG_UINT_32_MAX	((png_uint_32)(-1))
#define PNG_UINT_31_MAX	((png_uint_32)0x7fffffffL)
#define int_p_NULL	(int *)NULL
#define png_bytep_NULL	(png_bytep)NULL
#define png_bytepp_NULL	(png_bytepp)NULL
#define PNG_COLOR_TYPE_GRAY_ALPHA	(PNG_COLOR_MASK_ALPHA)
#define PNG_COLOR_TYPE_RGB	(PNG_COLOR_MASK_COLOR)
#define png_doublep_NULL	(png_doublep)NULL
#define png_error_ptr_NULL	(png_error_ptr)NULL
#define png_flush_ptr_NULL	(png_flush_ptr)NULL
#define png_infopp_NULL	(png_infopp)NULL
#define png_rw_ptr_NULL	(png_rw_ptr)NULL
#define png_structp_NULL	(png_structp)NULL
#define png_uint_16p_NULL	(png_uint_16p)NULL
#define png_voidp_NULL	(png_voidp)NULL
#define CVT_PTR(ptr)	(ptr)
#define CVT_PTR_NOCHECK(ptr)	(ptr)
#define PNG_TEXT_COMPRESSION_NONE	-1
#define PNG_TEXT_COMPRESSION_zTXt_WR	-2
#define PNG_TEXT_COMPRESSION_NONE_WR	-3
#define PNG_BACKGROUND_GAMMA_UNKNOWN	0
#define PNG_COLOR_TYPE_GRAY	0
#define PNG_COMPRESSION_TYPE_BASE	0
#define PNG_CRC_DEFAULT	0
#define PNG_EQUATION_LINEAR	0
#define PNG_FILLER_BEFORE	0
#define PNG_FILTER_HEURISTIC_DEFAULT	0
#define PNG_FILTER_TYPE_BASE	0
#define PNG_FILTER_VALUE_NONE	0
#define PNG_HANDLE_CHUNK_AS_DEFAULT	0
#define PNG_INTERLACE_NONE	0
#define PNG_LIBPNG_VER_BUILD	0
#define PNG_LIBPNG_VER_SONUM	0
#define PNG_OFFSET_PIXEL	0
#define PNG_RESOLUTION_UNKNOWN	0
#define PNG_SCALE_UNKNOWN	0
#define PNG_TEXT_COMPRESSION_zTXt	0
#define PNG_sRGB_INTENT_PERCEPTUAL	0
#define PNG_NO_FILTERS	0x00
#define PNG_TRANSFORM_IDENTITY	0x0000
#define PNG_INFO_gAMA	0x0001
#define PNG_TRANSFORM_STRIP_16	0x0001
#define PNG_INFO_sBIT	0x0002
#define PNG_TRANSFORM_STRIP_ALPHA	0x0002
#define PNG_INFO_cHRM	0x0004
#define PNG_TRANSFORM_PACKING	0x0004
#define PNG_FREE_HIST	0x0008
#define PNG_INFO_PLTE	0x0008
#define PNG_TRANSFORM_PACKSWAP	0x0008
#define PNG_FREE_ICCP	0x0010
#define PNG_INFO_tRNS	0x0010
#define PNG_TRANSFORM_EXPAND	0x0010
#define PNG_FREE_SPLT	0x0020
#define PNG_INFO_bKGD	0x0020
#define PNG_TRANSFORM_INVERT_MONO	0x0020
#define PNG_FREE_ROWS	0x0040
#define PNG_INFO_hIST	0x0040
#define PNG_TRANSFORM_SHIFT	0x0040
#define PNG_FREE_PCAL	0x0080
#define PNG_INFO_pHYs	0x0080
#define PNG_TRANSFORM_BGR	0x0080
#define PNG_ASM_FLAG_MMX_SUPPORT_COMPILED	0x01
#define PNG_FLAG_MNG_EMPTY_PLTE	0x01
#define PNG_FREE_SCAL	0x0100
#define PNG_INFO_oFFs	0x0100
#define PNG_TRANSFORM_SWAP_ALPHA	0x0100
#define PNG_ASM_FLAG_MMX_SUPPORT_IN_CPU	0x02
#define PNG_FREE_UNKN	0x0200
#define PNG_INFO_tIME	0x0200
#define PNG_TRANSFORM_SWAP_ENDIAN	0x0200
#define PNG_ASM_FLAG_MMX_READ_COMBINE_ROW	0x04
#define PNG_FLAG_MNG_FILTER_64	0x04
#define PNG_FREE_LIST	0x0400
#define PNG_INFO_pCAL	0x0400
#define PNG_TRANSFORM_INVERT_ALPHA	0x0400
#define PNG_ALL_MNG_FEATURES	0x05
#define PNG_ASM_FLAG_MMX_READ_INTERLACE	0x08
#define PNG_FILTER_NONE	0x08
#define PNG_INFO_sRGB	0x0800
#define PNG_TRANSFORM_STRIP_FILLER	0x0800
#define PNG_ASM_FLAG_MMX_READ_FILTER_SUB	0x10
#define PNG_FILTER_SUB	0x10
#define PNG_FREE_PLTE	0x1000
#define PNG_INFO_iCCP	0x1000
#define PNG_ASM_FLAG_MMX_READ_FILTER_UP	0x20
#define PNG_FILTER_UP	0x20
#define PNG_FREE_TRNS	0x2000
#define PNG_INFO_sPLT	0x2000
#define PNG_ASM_FLAG_MMX_READ_FILTER_AVG	0x40
#define PNG_FILTER_AVG	0x40
#define PNG_FREE_TEXT	0x4000
#define PNG_INFO_sCAL	0x4000
#define PNG_FREE_MUL	0x4220
#define PNG_FREE_ALL	0x7fff
#define PNG_ASM_FLAG_MMX_READ_FILTER_PAETH	0x80
#define PNG_FILTER_PAETH	0x80
#define PNG_ASM_FLAGS_INITIALIZED	0x80000000
#define PNG_INFO_IDAT	0x8000L
#define PNG_BACKGROUND_GAMMA_SCREEN	1
#define PNG_COLOR_MASK_PALETTE	1
#define PNG_CRC_ERROR_QUIT	1
#define PNG_DESTROY_WILL_FREE_DATA	1
#define PNG_EQUATION_BASE_E	1
#define PNG_FILLER_AFTER	1
#define PNG_FILTER_HEURISTIC_UNWEIGHTED	1
#define PNG_FILTER_VALUE_SUB	1
#define PNG_HANDLE_CHUNK_NEVER	1
#define PNG_INTERLACE_ADAM7	1
#define PNG_ITXT_COMPRESSION_NONE	1
#define PNG_LIBPNG_BUILD_ALPHA	1
#define PNG_LIBPNG_VER_MAJOR	1
#define PNG_OFFSET_MICROMETER	1
#define PNG_RESOLUTION_METER	1
#define PNG_SCALE_METER	1
#define PNG_SELECT_READ	1
#define PNG_SET_WILL_FREE_DATA	1
#define PNG_sRGB_INTENT_RELATIVE	1
#define PNG_LIBPNG_VER_STRING	"1.2.8"
#define PNG_USER_HEIGHT_MAX	1000000L
#define PNG_USER_WIDTH_MAX	1000000L
#define PNG_LIBPNG_VER	10208
#define PNG_LIBPNG_VER_DLLNUM	13
#define PNG_LIBPNG_BUILD_PRIVATE	16
#define PNG_BACKGROUND_GAMMA_FILE	2
#define PNG_COLOR_MASK_COLOR	2
#define PNG_CRC_WARN_DISCARD	2
#define PNG_EQUATION_ARBITRARY	2
#define PNG_FILTER_HEURISTIC_WEIGHTED	2
#define PNG_FILTER_VALUE_UP	2
#define PNG_HANDLE_CHUNK_IF_SAFE	2
#define PNG_INTERLACE_LAST	2
#define PNG_ITXT_COMPRESSION_zTXt	2
#define PNG_LIBPNG_BUILD_BETA	2
#define PNG_LIBPNG_VER_MINOR	2
#define PNG_OFFSET_LAST	2
#define PNG_RESOLUTION_LAST	2
#define PNG_SCALE_RADIAN	2
#define PNG_SELECT_WRITE	2
#define PNG_USER_WILL_FREE_DATA	2
#define PNG_sRGB_INTENT_SATURATION	2
#define PNG_MAX_PALETTE_LENGTH	256
#define PNG_BACKGROUND_GAMMA_UNIQUE	3
#define PNG_CRC_WARN_USE	3
#define PNG_EQUATION_HYPERBOLIC	3
#define PNG_FILTER_HEURISTIC_LAST	3
#define PNG_FILTER_VALUE_AVG	3
#define PNG_HANDLE_CHUNK_ALWAYS	3
#define PNG_LIBPNG_BUILD_RC	3
#define PNG_SCALE_LAST	3
#define PNG_TEXT_COMPRESSION_LAST	3
#define PNG_sRGB_INTENT_ABSOLUTE	3
#define PNG_LIBPNG_BUILD_SPECIAL	32
#define PNG_COLOR_MASK_ALPHA	4
#define PNG_CRC_QUIET_USE	4
#define PNG_EQUATION_LAST	4
#define PNG_FILTER_VALUE_PAETH	4
#define PNG_LIBPNG_BUILD_STABLE	4
#define PNG_sRGB_INTENT_LAST	4
#define PNG_CRC_NO_CHANGE	5
#define PNG_FILTER_VALUE_LAST	5
#define PNG_INTRAPIXEL_DIFFERENCING	64
#define PNG_LIBPNG_BUILD_RELEASE_STATUS_MASK	7
#define PNG_KEYWORD_MAX_LENGTH	79
#define PNG_LIBPNG_BUILD_PATCH	8
#define PNG_LIBPNG_VER_RELEASE	8
#define PNG_ZBUF_SIZE	8192
#define PNG_ABORT()	abort()
#define PNG_CONST	const
#define PNG_EXPORT_VAR(type)	extern PNG_IMPEXP type
#define png_memcmp	memcmp
#define png_memcpy	memcpy
#define png_memset	memset
#define PNGARG(arglist)	OF(arglist)
#define PNG_COLOR_TYPE_GA	PNG_COLOR_TYPE_GRAY_ALPHA
#define PNG_COLOR_TYPE_RGBA	PNG_COLOR_TYPE_RGB_ALPHA
#define PNG_COMPRESSION_TYPE_DEFAULT	PNG_COMPRESSION_TYPE_BASE
#define PNG_FILTER_TYPE_DEFAULT	PNG_FILTER_TYPE_BASE
#define PNG_EXPORT(type,symbol)	PNG_IMPEXP type PNGAPI symbol
#define PNG_LIBPNG_BUILD_TYPE	PNG_LIBPNG_BUILD_BASE_TYPE
#define PNG_LIBPNG_BUILD_BASE_TYPE	PNG_LIBPNG_BUILD_STABLE
#define PNG_MAX_UINT	PNG_UINT_31_MAX
#define png_sizeof(x)	sizeof (x)
#define png_strcpy	strcpy
#define png_strlen	strlen
#define png_strncpy	strncpy

typedef struct png_struct_def png_struct;
typedef png_struct *png_structp;
typedef struct png_info_struct png_info;
typedef png_info *png_infop;
typedef void *png_voidp;
typedef void (*png_progressive_info_ptr) (png_structp, png_infop);
typedef unsigned char png_byte;
typedef png_byte *png_bytep;
typedef unsigned long int png_uint_32;
typedef void (*png_progressive_row_ptr) (png_structp, png_bytep,
					 png_uint_32, int);
typedef void (*png_progressive_end_ptr) (png_structp, png_infop);
typedef struct png_color_8_struct {
    png_byte red;
    png_byte green;
    png_byte blue;
    png_byte gray;
    png_byte alpha;
} png_color_8;
typedef png_color_8 *png_color_8p;
typedef long int png_int_32;
typedef char *png_charp;
typedef size_t png_size_t;
typedef struct png_text_struct {
    int compression;
    png_charp key;
    png_charp text;
    png_size_t text_length;
} png_text;
typedef png_text *png_textp;
typedef png_byte **png_bytepp;
typedef unsigned short png_uint_16;
typedef struct png_color_16_struct {
    png_byte index;
    png_uint_16 red;
    png_uint_16 green;
    png_uint_16 blue;
    png_uint_16 gray;
} png_color_16;
typedef png_color_16 *png_color_16p;
typedef struct png_color_struct {
    png_byte red;
    png_byte green;
    png_byte blue;
} png_color;
typedef png_color *png_colorp;
typedef const char *png_const_charp;
typedef void (*png_error_ptr) (png_structp, png_const_charp);
typedef void (*png_rw_ptr) (png_structp, png_bytep, png_size_t);
typedef struct png_time_struct {
    png_uint_16 year;
    png_byte month;
    png_byte day;
    png_byte hour;
    png_byte minute;
    png_byte second;
} png_time;
typedef png_time *png_timep;
typedef png_uint_16 *png_uint_16p;
typedef void (*png_flush_ptr) (png_structp);
typedef char **png_charpp;
typedef png_struct **png_structpp;
typedef png_info **png_infopp;
typedef FILE *png_FILE_p;
typedef struct png_row_info_struct {
    png_uint_32 width;
    png_uint_32 rowbytes;
    png_byte color_type;
    png_byte bit_depth;
    png_byte channels;
    png_byte pixel_depth;
} png_row_info;
typedef png_row_info *png_row_infop;
typedef png_structp version_1_2_8;
typedef png_uint_32 *png_uint_32p;
typedef png_uint_16 **png_uint_16pp;
typedef png_int_32 png_fixed_point;
typedef double *png_doublep;
typedef charf *png_zcharp;
typedef png_fixed_point *png_fixed_point_p;
typedef png_int_32 *png_int_32p;
typedef z_stream *png_zstreamp;
typedef short png_int_16;
typedef png_int_16 *png_int_16p;
typedef png_int_16 **png_int_16pp;
typedef png_int_32 **png_int_32pp;
typedef png_uint_32 **png_uint_32pp;
typedef charf **png_zcharpp;
typedef char ***png_charppp;
typedef const char **png_const_charpp;
typedef double **png_doublepp;
typedef png_colorp *png_colorpp;
typedef png_color_16p *png_color_16pp;
typedef png_color_8p *png_color_8pp;
typedef png_fixed_point **png_fixed_point_pp;
typedef png_row_info **png_row_infopp;
typedef png_textp *png_textpp;
typedef png_timep *png_timepp;
extern void png_set_gAMA(png_structp, png_infop, double);
extern void png_set_progressive_read_fn(png_structp, png_voidp,
					png_progressive_info_ptr,
					png_progressive_row_ptr,
					png_progressive_end_ptr);
extern void png_set_shift(png_structp, png_color_8p);
extern png_byte png_get_interlace_type(png_structp, png_infop);
extern void png_read_info(png_structp, png_infop);
extern png_uint_32 png_get_image_height(png_structp, png_infop);
extern png_int_32 png_get_y_offset_pixels(png_structp, png_infop);
extern png_charp png_get_libpng_ver(png_structp);
extern void png_set_packswap(png_structp);
extern png_uint_32 png_get_sBIT(png_structp, png_infop, png_color_8p *);
extern void png_process_data(png_structp, png_infop, png_bytep,
			     png_size_t);
extern png_uint_32 png_get_text(png_structp, png_infop, png_textp *,
				int *);
extern void png_write_rows(png_structp, png_bytepp, png_uint_32);
extern const char png_libpng_ver[];
extern png_uint_32 png_access_version_number(void);
extern png_voidp png_get_progressive_ptr(png_structp);
extern png_uint_32 png_get_rowbytes(png_structp, png_infop);
extern void png_write_flush(png_structp);
extern void png_set_tRNS(png_structp, png_infop, png_bytep, int,
			 png_color_16p);
extern png_uint_32 png_get_x_pixels_per_meter(png_structp, png_infop);
extern png_int_32 png_get_x_offset_pixels(png_structp, png_infop);
extern png_uint_32 png_get_sRGB(png_structp, png_infop, int *);
extern png_byte png_get_color_type(png_structp, png_infop);
extern png_uint_32 png_get_IHDR(png_structp, png_infop, png_uint_32 *,
				png_uint_32 *, int *, int *, int *, int *,
				int *);
extern png_uint_32 png_get_PLTE(png_structp, png_infop, png_colorp *,
				int *);
extern void png_set_filter(png_structp, int, int);
extern png_uint_32 png_get_pHYs(png_structp, png_infop, png_uint_32 *,
				png_uint_32 *, int *);
extern png_uint_32 png_get_image_width(png_structp, png_infop);
extern void png_set_strip_16(png_structp);
extern void png_set_bKGD(png_structp, png_infop, png_color_16p);
extern png_uint_32 png_get_y_pixels_per_meter(png_structp, png_infop);
extern void png_write_png(png_structp, png_infop, int, voidp);
extern void png_set_error_fn(png_structp, png_voidp, png_error_ptr,
			     png_error_ptr);
extern void png_set_sBIT(png_structp, png_infop, png_color_8p);
extern void png_error(png_structp, png_const_charp);
extern void png_set_read_fn(png_structp, png_voidp, png_rw_ptr);
extern int png_sig_cmp(png_bytep, png_size_t, png_size_t);
extern png_uint_32 png_get_tIME(png_structp, png_infop, png_timep *);
extern void png_set_pHYs(png_structp, png_infop, png_uint_32, png_uint_32,
			 int);
extern png_byte png_get_bit_depth(png_structp, png_infop);
extern void png_free(png_structp, png_voidp);
extern void png_set_rgb_to_gray(png_structp, int, double, double);
extern void png_set_hIST(png_structp, png_infop, png_uint_16p);
extern png_uint_32 png_get_cHRM(png_structp, png_infop, double *, double *,
				double *, double *, double *, double *,
				double *, double *);
extern void png_set_filler(png_structp, png_uint_32, int);
extern void png_set_text(png_structp, png_infop, png_textp, int);
extern void png_set_cHRM(png_structp, png_infop, double, double, double,
			 double, double, double, double, double);
extern void png_set_gray_to_rgb(png_structp);
extern png_uint_32 png_get_bKGD(png_structp, png_infop, png_color_16p *);
extern void png_read_end(png_structp, png_infop);
extern png_byte png_get_channels(png_structp, png_infop);
extern void png_warning(png_structp, png_const_charp);
extern void png_set_write_fn(png_structp, png_voidp, png_rw_ptr,
			     png_flush_ptr);
extern void png_set_tIME(png_structp, png_infop, png_timep);
extern png_structp png_create_read_struct(png_const_charp, png_voidp,
					  png_error_ptr, png_error_ptr);
extern void png_read_update_info(png_structp, png_infop);
extern png_infop png_create_info_struct(png_structp);
extern png_uint_32 png_get_hIST(png_structp, png_infop, png_uint_16p *);
extern void png_set_sRGB(png_structp, png_infop, int);
extern png_uint_32 png_get_iCCP(png_structp, png_infop, png_charpp, int *,
				png_charpp, png_uint_32 *);
extern png_uint_32 png_get_gAMA(png_structp, png_infop, double *);
extern png_uint_32 png_get_valid(png_structp, png_infop, png_uint_32);
extern void png_set_compression_level(png_structp, int);
extern void png_set_packing(png_structp);
extern void png_write_image(png_structp, png_bytepp);
extern void png_write_end(png_structp, png_infop);
extern int png_set_interlace_handling(png_structp);
extern png_bytepp png_get_rows(png_structp, png_infop);
extern void png_progressive_combine_row(png_structp, png_bytep, png_bytep);
extern void png_set_bgr(png_structp);
extern void png_set_dither(png_structp, png_colorp, int, int, png_uint_16p,
			   int);
extern void png_set_rows(png_structp, png_infop, png_bytepp);
extern png_voidp png_malloc(png_structp, png_uint_32);
extern void png_write_row(png_structp, png_bytep);
extern void png_set_sig_bytes(png_structp, int);
extern png_uint_32 png_get_tRNS(png_structp, png_infop, png_bytep *, int *,
				png_color_16p *);
extern void png_write_chunk(png_structp, png_bytep, png_bytep, png_size_t);
extern void png_write_info(png_structp, png_infop);
extern void png_set_IHDR(png_structp, png_infop, png_uint_32, png_uint_32,
			 int, int, int, int, int);
extern void png_set_invert_mono(png_structp);
extern png_structp png_create_write_struct(png_const_charp, png_voidp,
					   png_error_ptr, png_error_ptr);
extern void png_read_png(png_structp, png_infop, int, voidp);
extern void png_read_rows(png_structp, png_bytepp, png_bytepp,
			  png_uint_32);
extern void png_read_row(png_structp, png_bytep, png_bytep);
extern void png_destroy_write_struct(png_structpp, png_infopp);
extern void png_set_swap_alpha(png_structp);
extern void png_destroy_read_struct(png_structpp, png_infopp, png_infopp);
extern png_voidp png_get_io_ptr(png_structp);
extern png_uint_32 png_get_oFFs(png_structp, png_infop, png_int_32 *,
				png_int_32 *, int *);
extern void png_set_strip_alpha(png_structp);
extern void png_set_background(png_structp, png_color_16p, int, int,
			       double);
extern void png_set_iCCP(png_structp, png_infop, png_charp, int, png_charp,
			 png_uint_32);
extern void png_init_io(png_structp, png_FILE_p);
extern void png_set_PLTE(png_structp, png_infop, png_colorp, int);
extern png_voidp png_get_error_ptr(png_structp);
extern void png_set_gamma(png_structp, double, double);
extern void png_set_swap(png_structp);
extern void png_read_image(png_structp, png_bytepp);
extern void png_set_expand(png_structp);
extern void png_set_oFFs(png_structp, png_infop, png_int_32, png_int_32,
			 int);
extern void png_set_tRNS_to_alpha(png_structp);
</SCREEN>
</SECT2>
</SECT1>
<SECT1 ID=libpng12man>
<TITLE>Interface Definitions for libpng12</TITLE>
<PARA>
The interfaces defined on the following pages are included in libpng12 and are defined
by this specification.
Unless otherwise noted, these interfaces shall be included
in the source standard.
</PARA>
<PARA>
Other interfaces listed in <XREF LINKEND=libpng12> shall behave as described
in the referenced base document.
</PARA>
<refentry id="libpng12.png.access.version.number.1">
<refmeta>
<refentrytitle>png_access_version_number</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_access_version_number</refname>
<refpurpose>return version of the run-time library</refpurpose>
<indexterm id="ix.libpng12.png.access.version.number.1">	<primary>png_access_version_number</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_uint_32
<function>png_access_version_number</function>
</funcdef>
<void>
</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_access_version_number() returns version of the libpng12 library available at
run-time.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
png_access_version_number() returns integer constructed from the major version,
minor version with leading zero and leading number with leading zero. For
example, the version number for version 1.2.8 is 10208.
</para>
</refsect1>
</refentry>

<refentry id="libpng12.png.create.info.struct.1">
<refmeta>
<refentrytitle>png_create_info_struct</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_create_info_struct</refname>
<refpurpose>allocate and initialize a png_info structure</refpurpose>
<indexterm id="ix.libpng12.png.create.info.struct.1">	<primary>png_create_info_struct</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_infop
<function>png_create_info_struct</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_create_info_struct() shall allocate and initialize a png_info structure.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
Returns the pointer to png_info structure. Returns NULL if it fails to create the structure.
</para>
</refsect1>
<refsect1>
<title>Errors</title>
<para>
png_create_info_struct() shall return NULL if the allocation fails. The
application should check for the return value.
</para>
</refsect1>
</refentry>

<refentry id="libpng12.png.create.read.struct.1">
<refmeta>
<refentrytitle>png_create_read_struct</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_create_read_struct</refname>
<refpurpose>allocate and initialize a png_struct structure for reading PNG file</refpurpose>
<indexterm id="ix.libpng12.png.create.read.struct.1">	<primary>png_create_read_struct</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_structp
<function>png_create_read_struct</function>
</funcdef>
<paramdef>png_const_charp
<parameter>user_png_ver</parameter>
</paramdef>
<paramdef>png_voidp
<parameter>error_ptr</parameter>
</paramdef>
<paramdef>png_error_ptr
<parameter>error_fn</parameter>
</paramdef>
<paramdef>png_error_ptr
<parameter>warn_fn</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_create_read_struct() shall allocate and initialize a png_struct
structure. The function shall return NULL if the allocation fails. The
application should check for the return value.
For handling errors and warnings, the application can pass desired error
handling routines as arguments to png_create_read_struct(). Otherwise, the
default error handling uses stderr and longjmp.  The error handling routine
must NOT return to the calling routine.

<variablelist>
<varlistentry>
<term><parameter>user_png_ver</parameter></term>
<listitem><para> version string of the library. Must be
PNG_LIBPNG_VER_STRING</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>error_ptr</parameter></term>
<listitem><para>user defined struct for error functions.</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>error_fn</parameter></term> 
<listitem><para>user defined function for printing errors and aborting.</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>warn_fn</parameter></term> 
<listitem><para>user defined function for warnings.</para></listitem>
</varlistentry>
</variablelist>
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
Returns the pointer to png_struct structure. Returns NULL if it fails to create
the structure.
</para>
</refsect1>
<refsect1>
<title>Errors</title>
<para>
png_create_read_struct() shall return NULL if the allocation fails. The
application should check for the return value.
</para>
</refsect1>
</refentry>

<refentry id="libpng12.png.create.write.struct.1">
<refmeta>
<refentrytitle>png_create_write_struct</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_create_write_struct</refname>
<refpurpose>allocate and initialize a png_struct structure for writing PNG file</refpurpose>
<indexterm id="ix.libpng12.png.create.write.struct.1">	<primary>png_create_write_struct</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_structp
<function>png_create_write_struct</function>
</funcdef>
<paramdef>png_const_charp
<parameter>user_png_ver</parameter>
</paramdef>
<paramdef>png_voidp
<parameter>error_ptr</parameter>
</paramdef>
<paramdef>png_error_ptr
<parameter>error_fn</parameter>
</paramdef>
<paramdef>png_error_ptr
<parameter>warn_fn</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_create_write_struct() shall allocate and initialize a png_struct
structure. The function shall return NULL if the allocation fails. The
application should check for the return value.
<variablelist>
<varlistentry>
<term><parameter>user_png_ver</parameter></term>
<listitem><para> version string of the library. Must be
PNG_LIBPNG_VER_STRING</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>error_ptr</parameter></term>
<listitem><para>user defined struct for error functions.</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>error_fn</parameter></term> 
<listitem><para>user defined function for printing errors and aborting.</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>warn_fn</parameter></term> 
<listitem><para>user defined function for warnings.</para></listitem>
</varlistentry>
</variablelist>

</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
Returns the pointer to png_struct structure. Returns NULL if it fails to create the structure.
</para>
</refsect1>
</refentry>

<refentry id="libpng12.png.destroy.read.struct.1">
<refmeta>
<refentrytitle>png_destroy_read_struct</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_destroy_read_struct</refname>
<refpurpose>free the memory associated with read png_struct</refpurpose>
<indexterm id="ix.libpng12.png.destroy.read.struct.1">	<primary>png_destroy_read_struct</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_destroy_read_struct</function>
</funcdef>
<paramdef>png_structpp
<parameter>png_ptr_ptr</parameter>
</paramdef>
<paramdef>png_infopp
<parameter>info_ptr_ptr</parameter>
</paramdef>
<paramdef>png_infopp
<parameter>end_info_ptr_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_destroy_read_struct() frees the memory associated with the read png_struct
struct that holds information from the given PNG file,
the associated png_info struct for holding the image information and
png_info struct for holding the information at end of the given PNG file.
</para>
</refsect1>
</refentry>

<refentry id="libpng12.png.destroy.write.struct.1">
<refmeta>
<refentrytitle>png_destroy_write_struct</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_destroy_write_struct</refname>
<refpurpose>free the memory associated with write png_struct</refpurpose>
<indexterm id="ix.libpng12.png.destroy.write.struct.1">	<primary>png_destroy_write_struct</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_destroy_write_struct</function>
</funcdef>
<paramdef>png_structpp
<parameter>png_ptr_ptr</parameter>
</paramdef>
<paramdef>png_infopp
<parameter>info_ptr_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_destroy_write_struct() frees the memory associated with the write png_struct
struct that holds information for writing the PNG file and
the associated png_info struct for holding the image information.
</para>
</refsect1>
</refentry>

<refentry id="libpng12.png.error.1">
<refmeta>
<refentrytitle>png_error</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_error</refname>
<refpurpose>default function to handle fatal errors</refpurpose>
<indexterm id="ix.libpng12.png.error.1">	<primary>png_error</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_error</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_const_charp
<parameter>error_message</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_error() is the default error handling function for fatal errors. The
default error handling functionality may be changed by using png_set_error_fn()
to replace the error function at run-time.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
</para>
</refsect1>
<refsect1>
<title>Errors</title>
<para>
</para>
</refsect1>
</refentry>

<refentry id="libpng12.png.free.1">
<refmeta>
<refentrytitle>png_free</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_free</refname>
<refpurpose>free a pointer allocated by png_malloc()</refpurpose>
<indexterm id="ix.libpng12.png.free.1">	<primary>png_free</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_free</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_voidp
<parameter>ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_free() shall free memory pointed to by "ptr" previously allocated by
png_malloc().
</para>
</refsect1>
</refentry>

<refentry id="libpng12.png.get.IHDR.1">
<refmeta>
<refentrytitle>png_get_IHDR</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_get_IHDR</refname>
<refpurpose>get PNG_IHDR chunk information from png_info structure</refpurpose>
<indexterm id="ix.libpng12.png.get.IHDR.1">	<primary>png_get_IHDR</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_uint_32
<function>png_get_IHDR</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>png_uint_32 *
<parameter>width</parameter>
</paramdef>
<paramdef>png_uint_32 *
<parameter>height</parameter>
</paramdef>
<paramdef>int *
<parameter>bit_depth</parameter>
</paramdef>
<paramdef>int *
<parameter>color_type</parameter>
</paramdef>
<paramdef>int *
<parameter>interlace_method</parameter>
</paramdef>
<paramdef>int *
<parameter>compression_method</parameter>
</paramdef>
<paramdef>int *
<parameter>filter_method</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_get_IHDR() gets PNG_IHDR chunk type information from png_info structure.
<variablelist>
<varlistentry>
<term><parameter>width</parameter></term>
<listitem><para>holds the width of the image in pixels up to
2^31.</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>height</parameter></term>
<listitem><para>holds the height of the image in pixels up to
2^31.</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>bit_depth</parameter></term>
<listitem><para>holds the bit depth of one of the image channels. Valid values
are 1, 2, 4, 8, 16 and also depend on the color_type.</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>color_type</parameter></term>
<listitem><para>describes which color/alpha channels are present.
Supported color types shall include:
<simplelist>
<member>PNG_COLOR_TYPE_GRAY  (bit depths 1, 2, 4, 8, 16) </member>
<member>PNG_COLOR_TYPE_GRAY_ALPHA (bit depths 8, 16) </member>
<member>PNG_COLOR_TYPE_PALETTE (bit depths 1, 2, 4, 8) </member>
<member>PNG_COLOR_TYPE_RGB (bit_depths 8, 16) </member>
<member>PNG_COLOR_TYPE_RGB_ALPHA (bit_depths 8, 16) </member>
<member>PNG_COLOR_MASK_PALETTE </member>
<member>PNG_COLOR_MASK_COLOR </member>
<member>PNG_COLOR_MASK_ALPHA </member>
</simplelist>
</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>filter_method</parameter></term>
<listitem><para>holds the filter method. If this argument is NULL, the
filter method will not be retrieved. Valid values after retrieval are
<simplelist>
<member>PNG_FILTER_TYPE_BASE </member>
<member>PNG_INTRAPIXEL_DIFFERENCING</member>
</simplelist>
</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>compression_method</parameter></term>
<listitem><para>holds the compression method. If this argument is NULL, the
compression method will not be retrieved. Valid values after retrieval are
PNG_COMPRESSION_TYPE_BASE</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>interlace_method</parameter></term>
<listitem><para>holds the interlace method. If this argument is NULL, the
interlacing method will not be retrieved. Valid values after retrieval are
<simplelist>
<member>PNG_INTERLACE_NONE</member>
<member>PNG_INTERLACE_ADAM7</member>
</simplelist>
</para></listitem>
</varlistentry>
</variablelist>
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
On success, <function>png_get_HDR</function> shall return 1. Otherwise,
<function>png_get_IHDR</function> shall return 0.
</para>
</refsect1>
</refentry>

<refentry id="libpng12.png.get.PLTE.1">
<refmeta>
<refentrytitle>png_get_PLTE</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_get_PLTE</refname>
<refpurpose>get image palette information from png_info structure</refpurpose>
<indexterm id="ix.libpng12.png.get.PLTE.1">	<primary>png_get_PLTE</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_uint_32
<function>png_get_PLTE</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>png_colorp *
<parameter>palette</parameter>
</paramdef>
<paramdef>int *
<parameter>num_palette</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_get_PLTE() gets palette information from png_info structure. "palette" 
holds an array of color values with "num_palette" entries.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
On successful retrieval of palette information, png_get_PLTE() shall return
PNG_INFO_PLTE. Otherwise, png_get_PLTE() shall return 0.
</para>
</refsect1>
</refentry>

<refentry id="libpng12.png.get.bKGD.1">
<refmeta>
<refentrytitle>png_get_bKGD</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_get_bKGD</refname>
<refpurpose>get background color for given image</refpurpose>
<indexterm id="ix.libpng12.png.get.bKGD.1">	<primary>png_get_bKGD</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_uint_32
<function>png_get_bKGD</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>png_color_16p *
<parameter>background</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_get_bKGD() shall return the background color to "background" if the validity
flag for background is set.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
On success, png_get_bKGD() shall return PNG_INFO_bKGD. Otherwise, png_get_bKGD()
shall return 0.
</para>
</refsect1>
</refentry>

<refentry id="libpng12.png.get.bit.depth.1">
<refmeta>
<refentrytitle>png_get_bit_depth</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_get_bit_depth</refname>
<refpurpose>return image bit_depth</refpurpose>
<indexterm id="ix.libpng12.png.get.bit.depth.1">	<primary>png_get_bit_depth</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_byte
<function>png_get_bit_depth</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Returns the image bit_depth.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
Returns 0 if png_ptr or info_ptr is NULL, bit_depth otherwise.
</para>
</refsect1>

</refentry>

<refentry id="libpng12.png.get.cHRM.1">
<refmeta>
<refentrytitle>png_get_cHRM</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_get_cHRM</refname>
<refpurpose>get CIE chromacities and referenced white point for given image</refpurpose>
<indexterm id="ix.libpng12.png.get.cHRM.1">	<primary>png_get_cHRM</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_uint_32
<function>png_get_cHRM</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>double *
<parameter>white_x</parameter>
</paramdef>
<paramdef>double *
<parameter>white_y</parameter>
</paramdef>
<paramdef>double *
<parameter>red_x</parameter>
</paramdef>
<paramdef>double *
<parameter>red_y</parameter>
</paramdef>
<paramdef>double *
<parameter>green_x</parameter>
</paramdef>
<paramdef>double *
<parameter>green_y</parameter>
</paramdef>
<paramdef>double *
<parameter>blue_x</parameter>
</paramdef>
<paramdef>double *
<parameter>blue_y</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_get_cHRM() shall return the CIE x,y chromaticities of the red, green and
blue display primaries used in the image and the referenced white point from the
cHRM chunk in the image.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
On success, png_get_cHRM() shall return PNG_INFO_cHRM. Otherwise, the function
shall return 0.
</para>
</refsect1>
</refentry>

<refentry id="libpng12.png.get.channels.1">
<refmeta>
<refentrytitle>png_get_channels</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_get_channels</refname>
<refpurpose>get number of color channels in image</refpurpose>
<indexterm id="ix.libpng12.png.get.channels.1">	<primary>png_get_channels</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_byte
<function>png_get_channels</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_get_channels() shall return the number of data channels per pixel for the
color type of the image. The number of channels shall range from 1-4 depending
on the color type as given below.
<simplelist>
<member>1 - PNG_COLOR_TYPE_GRAY or PNG_COLOR_TYPE_PALETTE </member>
<member>2 - PNG_COLOR_TYPE_GRAY_ALPHA </member>
<member>3 - PNG_COLOR_TYPE_RGB </member>
<member>4 - PNG_COLOR_TYPE_RGB_ALPHA or PNG_COLOR_TYPE_RGB+filler byte </member>
</simplelist>
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
On success, png_get_channels() shall return the number of channels ranging from
1-4. Otherwise, png_get_channels shall return 0.
</para>
</refsect1>
</refentry>

<refentry id="libpng12.png.get.color.type.1">
<refmeta>
<refentrytitle>png_get_color_type</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_get_color_type</refname>
<refpurpose>return image color type</refpurpose>
<indexterm id="ix.libpng12.png.get.color.type.1">	<primary>png_get_color_type</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_byte
<function>png_get_color_type</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Returns the image color type.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
Returns 0 if png_ptr or info_ptr is NULL, color_type otherwise.
</para>
</refsect1>
</refentry>

<refentry id="libpng12.png.get.error.ptr.1">
<refmeta>
<refentrytitle>png_get_error_ptr</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_get_error_ptr</refname>
<refpurpose>return error_ptr for user-defined functions</refpurpose>
<indexterm id="ix.libpng12.png.get.error.ptr.1">	<primary>png_get_error_ptr</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_voidp
<function>png_get_error_ptr</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_get_error_ptr() returns the error_ptr associated with user-defined
functions. 
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
Returns error_ptr
</para>
</refsect1>

</refentry>

<refentry id="libpng12.png.get.gAMA.1">
<refmeta>
<refentrytitle>png_get_gAMA</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_get_gAMA</refname>
<refpurpose>get the gamma value for given image</refpurpose>
<indexterm id="ix.libpng12.png.get.gAMA.1">	<primary>png_get_gAMA</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_uint_32
<function>png_get_gAMA</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>double *
<parameter>file_gamma</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Returns the gamma value of an image to "file_gamma" if the gAMA chunk
information is valid for the image.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
PNG_INFO_gAMA - if png_ptr, info_ptr, file_gamma are not NULL and gAMA chunk
information is valid
0 - otherwise.
</para>
</refsect1>
</refentry>

<refentry id="libpng12.png.get.hIST.1">
<refmeta>
<refentrytitle>png_get_hIST</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_get_hIST</refname>
<refpurpose>get the histogram for given image</refpurpose>
<indexterm id="ix.libpng12.png.get.hIST.1">	<primary>png_get_hIST</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_uint_32
<function>png_get_hIST</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>png_uint_16p *
<parameter>hist</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Returns the histogram of an image to *hist if the hIST chunk information is valid
for the image.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
PNG_INFO_hIST - if png_ptr, info_ptr, hist are not NULL and hIST chunk
information is valid
0 - otherwise.
</para>
</refsect1>
</refentry>

<refentry id="libpng12.png.get.iCCP.1">
<refmeta>
<refentrytitle>png_get_iCCP</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_get_iCCP</refname>
<refpurpose>get the embedded ICC profile data for given image</refpurpose>
<indexterm id="ix.libpng12.png.get.iCCP.1">	<primary>png_get_iCCP</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_uint_32
<function>png_get_iCCP</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>png_charpp 
<parameter>name</parameter>
</paramdef>
<paramdef>int * 
<parameter>compression_type</parameter>
</paramdef>
<paramdef>png_charpp 
<parameter>profile</parameter>
</paramdef>
<paramdef>png_uint_32 * 
<parameter>proflen</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_get_iCCP() shall return the embedded ICC profile data in iCCP chunk.
"name" shall contain the profile name, *compression_type shall contain the 
compression type, profile shall contain teh International Color Consortium color 
profile data and *proflen shall contain the length of the profile data in bytes.
*compression_type must always be set to PNG_COMPRESSION_TYPE_BASE.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
On success, png_get_iCCP() shall return PNG_INFO_iCCP. Otherwise, the function
shall return 0.
</para>
</refsect1>
</refentry>

<refentry id="libpng12.png.get.image.height.1">
<refmeta>
<refentrytitle>png_get_image_height</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_get_image_height</refname>
<refpurpose>return image height</refpurpose>
<indexterm id="ix.libpng12.png.get.image.height.1">	<primary>png_get_image_height</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_uint_32
<function>png_get_image_height</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_get_image_height() returns the image height in pixels.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
Returns 0 if png_ptr or info_ptr is NULL, image_height otherwise.
</para>
</refsect1>

</refentry>

<refentry id="libpng12.png.get.image.width.1">
<refmeta>
<refentrytitle>png_get_image_width</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_get_image_width</refname>
<refpurpose>return image width</refpurpose>
<indexterm id="ix.libpng12.png.get.image.width.1">	<primary>png_get_image_width</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_uint_32
<function>png_get_image_width</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_get_image_width() returns the image width in pixels.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
Returns 0 if png_ptr or info_ptr is NULL, image_width otherwise.
</para>
</refsect1>

</refentry>

<refentry id="libpng12.png.get.interlace.type.1">
<refmeta>
<refentrytitle>png_get_interlace_type</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_get_interlace_type</refname>
<refpurpose>returns interlace method</refpurpose>
<indexterm id="ix.libpng12.png.get.interlace.type.1">	<primary>png_get_interlace_type</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_byte
<function>png_get_interlace_type</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_get_interlace_type() returns the interlace method used for the image.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
Valid values are PNG_INTERLACE_NONE, PNG_INTERLACE_ADAM7. 
Returns 0 if png_ptr or info_ptr is NULL.
</para>
</refsect1>

</refentry>

<refentry id="libpng12.png.get.io.ptr.1">
<refmeta>
<refentrytitle>png_get_io_ptr</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_get_io_ptr</refname>
<refpurpose>return pointer for user-defined I/O</refpurpose>
<indexterm id="ix.libpng12.png.get.io.ptr.1">	<primary>png_get_io_ptr</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_voidp
<function>png_get_io_ptr</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Returns the pointer associated with user-defined input-output functions.
</para>
</refsect1>


</refentry>

<refentry id="libpng12.png.get.libpng.ver.1">
<refmeta>
<refentrytitle>png_get_libpng_ver</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_get_libpng_ver</refname>
<refpurpose>get the library version string</refpurpose>
<indexterm id="ix.libpng12.png.get.libpng.ver.1">	<primary>png_get_libpng_ver</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_charp
<function>png_get_libpng_ver</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_get_libpng_ver() shall return the library version as a short string in the
format "1.0.0" through "99.99.99zz".
</para>
</refsect1>
</refentry>

<refentry id="libpng12.png.get.oFFs.1">
<refmeta>
<refentrytitle>png_get_oFFs</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_get_oFFs</refname>
<refpurpose>get screen offsets for the given image</refpurpose>
<indexterm id="ix.libpng12.png.get.oFFs.1">	<primary>png_get_oFFs</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_uint_32
<function>png_get_oFFs</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>png_int_32 *
<parameter>x_offset</parameter>
</paramdef>
<paramdef>png_int_32 *
<parameter>y_offset</parameter>
</paramdef>
<paramdef>int *
<parameter>unit_type</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_get_oFFs() shall read the positive offset from the left edge of the screen
from info_ptr to x_offset and the positive offset from the top edge of the
screen to y_offset. The unit type shall be returned in unit_type, which can take
the following values
<simplelist>
<member> PNG_OFFSET_PIXEL </member>
<member> PNG_OFFSET_MICROMETER </member>
</simplelist>
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
On success, png_get_oFFs() shall return PNG_INFO_oFFs. Otherwise, png_get_oFFs()
shall return 0.
</para>
</refsect1>
</refentry>

<refentry id="libpng12.png.get.pHYs.1">
<refmeta>
<refentrytitle>png_get_pHYs</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_get_pHYs</refname>
<refpurpose>get the physical resolution for given image</refpurpose>
<indexterm id="ix.libpng12.png.get.pHYs.1">	<primary>png_get_pHYs</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_uint_32
<function>png_get_pHYs</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>png_uint_32 *
<parameter>res_x</parameter>
</paramdef>
<paramdef>png_uint_32 *
<parameter>res_y</parameter>
</paramdef>
<paramdef>int *
<parameter>unit_type</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_get_pHYs() shall return the physical pixel resolution of the image and the
unit of resolution. Upon success, *res_x shall contain the horizontal resolution
and *res_y shall contain the vertical resolution in pixels per unit. *unit_type
will be set to PNG_RESOLUTION_METER if the resolution is expressed in pixels per
meter. Otherwise *unit_type will be PNG_RESOLUTION_UNKNOWN.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
PNG_INFO_pHYs - on success
0 - otherwise.
</para>
</refsect1>
</refentry>

<refentry id="libpng12.png.get.progressive.ptr.1">
<refmeta>
<refentrytitle>png_get_progressive_ptr</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_get_progressive_ptr</refname>
<refpurpose>return pointer to user-defined push read functions</refpurpose>
<indexterm id="ix.libpng12.png.get.progressive.ptr.1">	<primary>png_get_progressive_ptr</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_voidp
<function>png_get_progressive_ptr</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Returns the pointer to user-defined structure containing information about the
callback functions.
</para>
</refsect1>
</refentry>

<refentry id="libpng12.png.get.rowbytes.1">
<refmeta>
<refentrytitle>png_get_rowbytes</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_get_rowbytes</refname>
<refpurpose>Return number of bytes for a row</refpurpose>
<indexterm id="ix.libpng12.png.get.rowbytes.1">	<primary>png_get_rowbytes</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_uint_32
<function>png_get_rowbytes</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_get_rowbytes() returns the number of bytes needed to hold a transformed row
of an image.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
Returns 0 if png_ptr or info_ptr is NULL, number of bytes otherwise.
</para>
</refsect1>

</refentry>

<refentry id="libpng12.png.get.rows.1">
<refmeta>
<refentrytitle>png_get_rows</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_get_rows</refname>
<refpurpose>retrieve image data from png_info structure</refpurpose>
<indexterm id="ix.libpng12.png.get.rows.1">	<primary>png_get_rows</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_bytepp
<function>png_get_rows</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_get_rows() shall retrieve rows of image data from the info_ptr structure
in an array of pointers to the pixel data for each row.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
On success, png_get_rows() shall return an array of pointers to the pixel data
for each row of the image.
</para>
</refsect1>
</refentry>

<refentry id="libpng12.png.get.sBIT.1">
<refmeta>
<refentrytitle>png_get_sBIT</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_get_sBIT</refname>
<refpurpose>get number of significant bits for each color channel</refpurpose>
<indexterm id="ix.libpng12.png.get.sBIT.1">	<primary>png_get_sBIT</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_uint_32
<function>png_get_sBIT</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>png_color_8p *
<parameter>sig_bit</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_get_sBIT() shall return the number of significant bit for each of the gray,
red, blue and green color channels.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
On success, png_get_sBIT() shall return PNG_INFO_sBIT. Otherwise, png_get_sBIT()
shall return 0.
</para>
</refsect1>
</refentry>

<refentry id="libpng12.png.get.sRGB.1">
<refmeta>
<refentrytitle>png_get_sRGB</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_get_sRGB</refname>
<refpurpose>get the rendering intent for given image</refpurpose>
<indexterm id="ix.libpng12.png.get.sRGB.1">	<primary>png_get_sRGB</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_uint_32
<function>png_get_sRGB</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>int *
<parameter>srgb_intent</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_get_sRGB() shall return the rendering intent of an image to
*srgb_intent if the sRGB chunk information is valid for the image. 
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
PNG_INFO_sRGB - if png_ptr, info_ptr, srgb_intent are not NULL and sRGB chunk
information is valid
0 - otherwise.
</para>
</refsect1>
</refentry>

<refentry id="libpng12.png.get.tIME.1">
<refmeta>
<refentrytitle>png_get_tIME</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_get_tIME</refname>
<refpurpose>get last modification time for the image</refpurpose>
<indexterm id="ix.libpng12.png.get.tIME.1">	<primary>png_get_tIME</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_uint_32
<function>png_get_tIME</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>png_timep *
<parameter>mod_time</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_get_sBIT() shall return the time of last modification of the image if the
tIME information is valid for the image.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
PNG_INFO_tIME - if png_ptr, info_ptr, mod_time are not NULL and tIME
information is valid
0 - otherwise.
</para>
</refsect1>
</refentry>

<refentry id="libpng12.png.get.tRNS.1">
<refmeta>
<refentrytitle>png_get_tRNS</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_get_tRNS</refname>
<refpurpose>get transparency data for images</refpurpose>
<indexterm id="ix.libpng12.png.get.tRNS.1">	<primary>png_get_tRNS</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_uint_32
<function>png_get_tRNS</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>png_bytep *
<parameter>trans</parameter>
</paramdef>
<paramdef>int *
<parameter>num_trans</parameter>
</paramdef>
<paramdef>png_color_16p *
<parameter>trans_values</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_get_tRNS() shall obtain the transparency data for paletted images and
image types that don't need a full alpha channel from info_ptr. 
For a paletted image, the function retrieves the transparency values 
stored in the same order as the palette colors, starting from index 0.
For non-paletted images, the function retrieves the single color value
which is treated as fully transparent. If the transparency information is
valid, i.e. PNG_INFO_tRNS bit is set for info_ptr->valid:
*trans shall be set to the transparency values for a paletted image. Values for
the data shall be in range [0,255], ranging from fully transparent to fully
opaque, respectively.
*num_trans shall be set to the number of transparency values
*trans_values shall be set to the single color value specified for non-paletted
images.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
Returns PNG_INFO_tRNS on successful return, 0 otherwise.

</para>
</refsect1>
</refentry>

<refentry id="libpng12.png.get.text.1">
<refmeta>
<refentrytitle>png_get_text</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_get_text</refname>
<refpurpose>get comments information from png_info structure</refpurpose>
<indexterm id="ix.libpng12.png.get.text.1">	<primary>png_get_text</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_uint_32
<function>png_get_text</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>png_textp *
<parameter>text_ptr</parameter>
</paramdef>
<paramdef>int *
<parameter>num_text</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_get_text() returns the text chunk information from the PNG stream in the
array pointed to by text_ptr. It also returns the number of text chunks in
num_text. text_ptr is an array of structure png_text whose members include:
<variablelist>
<varlistentry>
<term><parameter>text_ptr[i].compression</parameter></term>
<listitem><para>type of compression used on text. Valid values are:
<simplelist>
<member>PNG_TEXT_COMPRESSION_NONE</member>
<member>PNG_TEXT_COMPRESSION_zTXt</member>
<member>PNG_ITXT_COMPRESSION_NONE</member>
<member>PNG_ITXT_COMPRESSION_zTXt</member>
</simplelist>
</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>text_ptr[i].key</parameter></term>
<listitem><para>keyword for comment. Must contain 1-79 characters.
</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>text_ptr[i].text</parameter></term>
<listitem><para>text comment for current keyword. Maybe empty.
</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>text_ptr[i].text_length</parameter></term>
<listitem><para>length of text string after decompression. 0 for iTXt.
</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>text_ptr[i].itxt_length</parameter></term>
<listitem><para>length of iTXt string after decompression. 0 for tEXt/zTXt.
</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>text_ptr[i].lang</parameter></term>
<listitem><para>language of comment. Empty string if language is unknown.
</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>text_ptr[i].lang_key</parameter></term>
<listitem><para>keyword in UTF-8. Empty string if language is unknown.
</para></listitem>
</varlistentry>
</variablelist>
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
Returns 0 if png_ptr or info_ptr is NULL, returns number of text chunks
otherwise.
</para>
</refsect1>
</refentry>

<refentry id="libpng12.png.get.valid.1">
<refmeta>
<refentrytitle>png_get_valid</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_get_valid</refname>
<refpurpose>determine if given chunk data is valid</refpurpose>
<indexterm id="ix.libpng12.png.get.valid.1">	<primary>png_get_valid</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_uint_32
<function>png_get_valid</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>png_uint_32
<parameter>flag</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_get_valid() shall obtain the validity of chunk data specified by the bits
set in "flag". The following bits may be set in flag:
PNG_INFO_gAMA
PNG_INFO_sBIT
PNG_INFO_cHRM
PNG_INFO_PLTE
PNG_INFO_tRNS
PNG_INFO_bKGD
PNG_INFO_hIST
PNG_INFO_pHYs
PNG_INFO_oFFs
PNG_INFO_tIME
PNG_INFO_pCAL
PNG_INFO_sRGB
PNG_INFO_iCCP
PNG_INFO_sPLT
PNG_INFO_sCAL
PNG_INFO_IDAT

</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
On success, png_get_valid() shall return "flag" with the chunk bits set.
Otherwise, png_get_valid() shall return 0.
</para>
</refsect1>

</refentry>

<refentry id="libpng12.png.get.x.offset.pixels.1">
<refmeta>
<refentrytitle>png_get_x_offset_pixels</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_get_x_offset_pixels</refname>
<refpurpose>return x offset in pixels from oFFs chunk</refpurpose>
<indexterm id="ix.libpng12.png.get.x.offset.pixels.1">	<primary>png_get_x_offset_pixels</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_int_32
<function>png_get_x_offset_pixels</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_get_x_offset_pixels() shall obtain x offset in pixels for the
image from its PNG_oFFs chunk data stored in info_ptr, if the unit for offset is
pixels.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
On success, png_get_x_offset_pixels() shall return x offset in pixels.
Otherwise png_get_x_offset_pixels() shall return 0.
</para>
</refsect1>

</refentry>

<refentry id="libpng12.png.get.x.pixels.per.meter.1">
<refmeta>
<refentrytitle>png_get_x_pixels_per_meter</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_get_x_pixels_per_meter</refname>
<refpurpose>return horizontal pixel density per meter</refpurpose>
<indexterm id="ix.libpng12.png.get.x.pixels.per.meter.1">	<primary>png_get_x_pixels_per_meter</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_uint_32
<function>png_get_x_pixels_per_meter</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_get_x_pixels_per_meter() shall obtain the horizontal pixel density in pixels
per meter from its PNG_pHYs chunk data stored in info_ptr, if the unit for
resolution is pixels per meter.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
On success, png_get_x_pixels_per_meter() shall return horizontal pixel density
in pixels per meter.
Otherwise png_get_x_pixels_per_meter() shall return 0.
</para>
</refsect1>

</refentry>

<refentry id="libpng12.png.get.y.offset.pixels.1">
<refmeta>
<refentrytitle>png_get_y_offset_pixels</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_get_y_offset_pixels</refname>
<refpurpose>return y offset in pixels from oFFs chunk</refpurpose>
<indexterm id="ix.libpng12.png.get.y.offset.pixels.1">	<primary>png_get_y_offset_pixels</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_int_32
<function>png_get_y_offset_pixels</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_get_y_offset_pixels() shall obtain y offset in pixels for the
image from its PNG_oFFs chunk data stored in info_ptr, if the unit for offset is
pixels.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
On success, png_get_y_offset_pixels() shall return y offset in pixels.
Otherwise png_get_y_offset_pixels() shall return 0.
</para>
</refsect1>

</refentry>

<refentry id="libpng12.png.get.y.pixels.per.meter.1">
<refmeta>
<refentrytitle>png_get_y_pixels_per_meter</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_get_y_pixels_per_meter</refname>
<refpurpose>return vertical pixel density per meter</refpurpose>
<indexterm id="ix.libpng12.png.get.y.pixels.per.meter.1">	<primary>png_get_y_pixels_per_meter</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_uint_32
<function>png_get_y_pixels_per_meter</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_get_y_pixels_per_meter() shall obtain the vertical pixel density in pixels
per meter from its PNG_pHYs chunk data stored in info_ptr, if the unit for
resolution is pixels per meter.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
On success, png_get_y_pixels_per_meter() shall return vertical pixel density
in pixels per meter.
Otherwise png_get_y_pixels_per_meter() shall return 0.
</para>
</refsect1>

</refentry>

<refentry id="libpng12.png.init.io.1">
<refmeta>
<refentrytitle>png_init_io</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_init_io</refname>
<refpurpose>initialize input/output for the PNG file</refpurpose>
<indexterm id="ix.libpng12.png.init.io.1">	<primary>png_init_io</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_init_io</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_FILE_p
<parameter>fp</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Initialize the default input/output functions for the PNG file to standard C
streams. To replace the default read and write functions, use png_set_read_fn()
and png_set_write_fn() respectively.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
</para>
</refsect1>
<refsect1>
<title>Errors</title>
<para>
</para>
</refsect1>
</refentry>

<!-- MISSING DEFINITION FOR png_libpng_ver -->
<!-- Lets just hope nobody notices -->
<refentry id="libpng12.png.malloc.1">
<refmeta>
<refentrytitle>png_malloc</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_malloc</refname>
<refpurpose>allocate memory</refpurpose>
<indexterm id="ix.libpng12.png.malloc.1">	<primary>png_malloc</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>png_voidp
<function>png_malloc</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_uint_32
<parameter>size</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_malloc() shall return a pointer to allocated memory of the specified size.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
Pointer to the block of memory allocated.
</para>
</refsect1>
<refsect1>
<title>Errors</title>
<para>
Invokes error handling function if the system is out of memory and sets
PNG_FLAG_MALLOC_NULL_MEM_OK in member flags of png_struct.
</para>
</refsect1>
</refentry>

<refentry id="libpng12.png.process.data.1">
<refmeta>
<refentrytitle>png_process_data</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_process_data</refname>
<refpurpose>read PNG file progressively</refpurpose>
<indexterm id="ix.libpng12.png.process.data.1">	<primary>png_process_data</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_process_data</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>png_bytep
<parameter>buffer</parameter>
</paramdef>
<paramdef>png_size_t
<parameter>length</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_process_data() shall process data progressively from the PNG stream using
callback functions set within png_set_progressive_read_fn(). The data is passed
in "buffer" and length of data to be processed is specified by "length".
</para>
</refsect1>
</refentry>

<refentry id="libpng12.png.progressive.combine.row.1">
<refmeta>
<refentrytitle>png_progressive_combine_row</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_progressive_combine_row</refname>
<refpurpose>combines current row data with processed row</refpurpose>
<indexterm id="ix.libpng12.png.progressive.combine.row.1">	<primary>png_progressive_combine_row</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_progressive_combine_row</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_bytep
<parameter>old_row</parameter>
</paramdef>
<paramdef>png_bytep
<parameter>new_row</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
For non-NULL rows of interlaced images during progressive read,
png_progressive_combine_row() shall combine the data for the current row
with the previously processed row data.
png_progressive_combine_row() shall return for NULL rows of interlaced images
and memcpy rows for non-interlaced images.
</para>
</refsect1>
</refentry>

<refentry id="libpng12.png.read.end.1">
<refmeta>
<refentrytitle>png_read_end</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_read_end</refname>
<refpurpose>read the end of PNG file</refpurpose>
<indexterm id="ix.libpng12.png.read.end.1">	<primary>png_read_end</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_read_end</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_read_end() reads the end of a PNG file after reading the image data,
including any comments or time information at the end of the file. The
function shall not read past the end of the file.
</para>
</refsect1>


</refentry>

<refentry id="libpng12.png.read.image.1">
<refmeta>
<refentrytitle>png_read_image</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_read_image</refname>
<refpurpose>read the entire image into memory</refpurpose>
<indexterm id="ix.libpng12.png.read.image.1">	<primary>png_read_image</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_read_image</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_bytepp
<parameter>image</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_read_image() reads the entire image into memory at once. For each pass of an
interlaced image, use png_read_rows() instead.
</para>
</refsect1>


</refentry>

<refentry id="libpng12.png.read.info.1">
<refmeta>
<refentrytitle>png_read_info</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_read_info</refname>
<refpurpose>read the PNG image information</refpurpose>
<indexterm id="ix.libpng12.png.read.info.1">	<primary>png_read_info</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_read_info</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Reads the information before the actual image data from the PNG file. The
function allows reading a file that already has the PNG signature bytes read
from the stream.
</para>
</refsect1>


</refentry>

<refentry id="libpng12.png.read.png.1">
<refmeta>
<refentrytitle>png_read_png</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_read_png</refname>
<refpurpose>read the entire PNG file</refpurpose>
<indexterm id="ix.libpng12.png.read.png.1">	<primary>png_read_png</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_read_png</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>int
<parameter>transforms</parameter>
</paramdef>
<paramdef>png_voidp
<parameter>params</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_read_png() shall provide the high-level read operation. The function shall
read the entire image into memory. The integer "transforms" shall contain the
logical OR of a set of the following transformation flags:
<variablelist>
<varlistentry>
<term><parameter>PNG_TRANSFORM_IDENTITY</parameter></term>
<listitem><para>No transformation</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>PNG_TRANSFORM_STRIP_16</parameter></term>
<listitem><para>Strip 16-bit samples to 8 bits</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>PNG_TRANSFORM_STRIP_ALPHA</parameter></term>
<listitem><para>Discard the alpha channel</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>PNG_TRANSFORM_PACKING</parameter></term>
<listitem><para>Expand 1, 2 and 4-bit samples to bytes</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>PNG_TRANSFORM_PACKSWAP</parameter></term>
<listitem><para>Change order of packed pixels to LSB first</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>PNG_TRANSFORM_EXPAND</parameter></term>
<listitem><para>Expand paletted images to RGB, grayscale to 8-bit images and
tRNS chunks to alpha channels</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>PNG_TRANSFORM_INVERT_MONO</parameter></term>
<listitem><para>Invert monochrome images</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>PNG_TRANSFORM_SHIFT</parameter></term>
<listitem><para>Normalize pixels to the sBIT depth</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>PNG_TRANSFORM_BGR</parameter></term>
<listitem><para>Flip RGB to BGR, RGBA to BGRA</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>PNG_TRANSFORM_SWAP_ALPHA</parameter></term>
<listitem><para>Flip RGBA to ARGB or GA to AG</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>PNG_TRANSFORM_INVERT_ALPHA</parameter></term>
<listitem><para>Change alpha from opacity to transparency</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>PNG_TRANSFORM_SWAP_ENDIAN</parameter></term>
<listitem><para>Byte-swap 16-bit samples</para></listitem>
</varlistentry>
</variablelist>

"params" is unused and must be set to NULL.
</para>
</refsect1>
</refentry>

<refentry id="libpng12.png.read.row.1">
<refmeta>
<refentrytitle>png_read_row</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_read_row</refname>
<refpurpose>read a row of image data</refpurpose>
<indexterm id="ix.libpng12.png.read.row.1">	<primary>png_read_row</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_read_row</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_bytep
<parameter>row</parameter>
</paramdef>
<paramdef>png_bytep
<parameter>display_row</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_read_row() reads a row of actual image data. "row" holds the image pixels as
they are processed.  If the image is displayed after each pass,  "display_row"
is used to display a blurred progressive image. "display_row" can be NULL if the
progressive image is not required.
</para>
</refsect1>


</refentry>

<refentry id="libpng12.png.read.rows.1">
<refmeta>
<refentrytitle>png_read_rows</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_read_rows</refname>
<refpurpose>read multiple rows of image data</refpurpose>
<indexterm id="ix.libpng12.png.read.rows.1">	<primary>png_read_rows</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_read_rows</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_bytepp
<parameter>row</parameter>
</paramdef>
<paramdef>png_bytepp
<parameter>display_row</parameter>
</paramdef>
<paramdef>png_uint_32
<parameter>num_rows</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Read "num_rows" rows of image data starting from "row". If the image is
interlaced, the rows must contain the contents of the rows from the previous
pass. If the image is displayed after each pass,  "display_row" is used
to display a blurred progressive image. "display_row" can be NULL if the
progressive image is not required.
</para>
</refsect1>


</refentry>

<refentry id="libpng12.png.read.update.info.1">
<refmeta>
<refentrytitle>png_read_update_info</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_read_update_info</refname>
<refpurpose>update png_info structure</refpurpose>
<indexterm id="ix.libpng12.png.read.update.info.1">	<primary>png_read_update_info</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_read_update_info</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_read_update_info() updates the structure pointed to by info_ptr to reflect
any transformations that have been requested. For example, rowbytes will be
updated to handle expansion of an interlaced image with png_read_update_info().
</para>
</refsect1>


</refentry>

<refentry id="libpng12.png.set.IHDR.1">
<refmeta>
<refentrytitle>png_set_IHDR</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_IHDR</refname>
<refpurpose>set the PNG_IHDR chunk information</refpurpose>
<indexterm id="ix.libpng12.png.set.IHDR.1">	<primary>png_set_IHDR</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_IHDR</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>png_uint_32
<parameter>width</parameter>
</paramdef>
<paramdef>png_uint_32
<parameter>height</parameter>
</paramdef>
<paramdef>int
<parameter>bit_depth</parameter>
</paramdef>
<paramdef>int
<parameter>color_type</parameter>
</paramdef>
<paramdef>int
<parameter>interlace_type</parameter>
</paramdef>
<paramdef>int
<parameter>compression_type</parameter>
</paramdef>
<paramdef>int
<parameter>filter_type</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_IHDR() shall set image header information in info_ptr.
width is the image width in pixels.
height is the image height in pixels.
bit_depth is the bit depth of the image. Valid values shall include 1, 2, 4, 8,
16 and shall also depend on the color type.
color_type is the type of image. Supported color types shall include:
	PNG_COLOR_TYPE_GRAY         (bit depths 1, 2, 4, 8, 16)
	PNG_COLOR_TYPE_GRAY_ALPHA   (bit depths 8, 16)
	PNG_COLOR_TYPE_PALETTE      (bit depths 1, 2, 4, 8)
	PNG_COLOR_TYPE_RGB          (bit depths 8, 16)
	PNG_COLOR_TYPE_RGB_ALPHA    (bit depths 8, 16)
	PNG_COLOR_MASK_PALETTE
	PNG_COLOR_MASK_COLOR
	PNG_COLOR_MASK_ALPHA

interlace_type is the image interlace method. Supported values shall include:
    PNG_INTERLACE_NONE or
	PNG_INTERLACE_ADAM7
compression_type is the method used for image compression. The value must be
PNG_COMPRESSION_TYPE_DEFAULT.
filter_type is the method used for image filtering. The value must be
PNG_FILTER_TYPE_DEFAULT.

</para>
</refsect1>

<refsect1>
<title>Errors</title>
<para>
png_set_IHDR() shall invoke error function if any of the arguments has an
invalid value.
</para>
</refsect1>
</refentry>

<refentry id="libpng12.png.set.PLTE.1">
<refmeta>
<refentrytitle>png_set_PLTE</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_PLTE</refname>
<refpurpose>set color values for the palette</refpurpose>
<indexterm id="ix.libpng12.png.set.PLTE.1">	<primary>png_set_PLTE</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_PLTE</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>png_colorp
<parameter>palette</parameter>
</paramdef>
<paramdef>int
<parameter>num_palette</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_PLTE() shall set the array of color values used as palette for image to
"palette".  The palette shall include "num_palette" entries.
</para>
</refsect1>


</refentry>

<refentry id="libpng12.png.set.bKGD.1">
<refmeta>
<refentrytitle>png_set_bKGD</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_bKGD</refname>
<refpurpose>set the background color for given image</refpurpose>
<indexterm id="ix.libpng12.png.set.bKGD.1">	<primary>png_set_bKGD</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_bKGD</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>png_color_16p
<parameter>background</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_bKGD() shall set the background color of an image to "background" and 
sets bKGD chunk information to valid for the image.
</para>
</refsect1>
</refentry>

<refentry id="libpng12.png.set.background.1">
<refmeta>
<refentrytitle>png_set_background</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_background</refname>
<refpurpose>set the background for given image</refpurpose>
<indexterm id="ix.libpng12.png.set.background.1">	<primary>png_set_background</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_background</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_color_16p
<parameter>background_color</parameter>
</paramdef>
<paramdef>int
<parameter>background_gamma_code</parameter>
</paramdef>
<paramdef>int
<parameter>need_expand</parameter>
</paramdef>
<paramdef>double
<parameter>background_gamma</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_background() shall set the background of an image with alpha channel or
simple transparency with the specified background color. If background_gamma_code
is set to PNG_BACKGROUND_GAMMA_SCREEN, it indicates that the supplied background 
color is in the gamma space of the display, else if it is set to
PNG_BACKGROUND_GAMMA_FILE, the color is in the gamma space of the file. If the
background color is supplied at the original bit-depth for a grayscale image that
is expanded to truecolor or to a higher bit-depth, need_expand must be set to 1,
but if the background color is supplied at the expanded bit-depth, need_expand
must be set to 0. Similarly for paletted images, if background color is supplied
as a palette index, need_expand must be set to 1, else if background color is
supplied as an RGB triplet, need_expand must be set to 0.
</para>
</refsect1>
</refentry>

<refentry id="libpng12.png.set.bgr.1">
<refmeta>
<refentrytitle>png_set_bgr</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_bgr</refname>
<refpurpose>set pixel order to blue, green, red</refpurpose>
<indexterm id="ix.libpng12.png.set.bgr.1">	<primary>png_set_bgr</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_bgr</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_bgr() shall set the pixel order to blue, green, red.
</para>
</refsect1>


</refentry>

<refentry id="libpng12.png.set.cHRM.1">
<refmeta>
<refentrytitle>png_set_cHRM</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_cHRM</refname>
<refpurpose>set CIE chromacities and referenced white point for given image</refpurpose>
<indexterm id="ix.libpng12.png.set.cHRM.1">	<primary>png_set_cHRM</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_cHRM</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>double
<parameter>white_x</parameter>
</paramdef>
<paramdef>double
<parameter>white_y</parameter>
</paramdef>
<paramdef>double
<parameter>red_x</parameter>
</paramdef>
<paramdef>double
<parameter>red_y</parameter>
</paramdef>
<paramdef>double
<parameter>green_x</parameter>
</paramdef>
<paramdef>double
<parameter>green_y</parameter>
</paramdef>
<paramdef>double
<parameter>blue_x</parameter>
</paramdef>
<paramdef>double
<parameter>blue_y</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_cHRM() shall set the CIE x,y chromaticities of the red, green and
blue display primaries for the image and the referenced white point. The values
must range from 0 to 21474.83 both inclusive.
</para>
</refsect1>
<refsect1>
<title>Errors</title>
<para>
png_set_cHRM() shall report a non-fatal error and exit if any of the chormacity
values lies outside the range 0 to 21474.83.
</para>
</refsect1>
</refentry>

<refentry id="libpng12.png.set.compression.level.1">
<refmeta>
<refentrytitle>png_set_compression_level</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_compression_level</refname>
<refpurpose>set image compression level</refpurpose>
<indexterm id="ix.libpng12.png.set.compression.level.1">	<primary>png_set_compression_level</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_compression_level</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>int
<parameter>level</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_compression_level() shall set the compression level to "level". The
valid values for "level" range from [0,9], corresponding directly to compression
levels for zlib. The value 0 implies no compression and 9 implies maximal
compression.
Note: Tests have shown that zlib compression levels 3-6 usually perform as well 
as level 9 for PNG images, and do considerably fewer caclulations.
</para>
</refsect1>


</refentry>

<refentry id="libpng12.png.set.dither.1">
<refmeta>
<refentrytitle>png_set_dither</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_dither</refname>
<refpurpose>turn on dithering to 8-bit</refpurpose>
<indexterm id="ix.libpng12.png.set.dither.1">	<primary>png_set_dither</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_dither</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_colorp
<parameter>palette</parameter>
</paramdef>
<paramdef>int
<parameter>num_palette</parameter>
</paramdef>
<paramdef>int
<parameter>maximum_colors</parameter>
</paramdef>
<paramdef>png_uint_16p
<parameter>histogram</parameter>
</paramdef>
<paramdef>int
<parameter>full_dither</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_dither() shall set transformation to dither file to 8-bit. For the given
palette with num_palette number of colors, the number of colors in the palette 
shall be reduced to fit in "maximum_colors" if the palette is larger than
maximum_colors. If supplied, the histogram is used to get better results of the
reduced palette.
For reducing the number of colors in palette, full_dither must be set to 0. If
full_dither is set to 1, dithering cube shall be setup for RGB images to reduce
the RGB file to a paletted file.
</para>
</refsect1>
</refentry>

<refentry id="libpng12.png.set.error.fn.1">
<refmeta>
<refentrytitle>png_set_error_fn</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_error_fn</refname>
<refpurpose>set user defined functions for error handling</refpurpose>
<indexterm id="ix.libpng12.png.set.error.fn.1">	<primary>png_set_error_fn</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_error_fn</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_voidp
<parameter>error_ptr</parameter>
</paramdef>
<paramdef>png_error_ptr
<parameter>error_fn</parameter>
</paramdef>
<paramdef>png_error_ptr
<parameter>warning_fn</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_error_fn() shall replace the default error handling and warning
functions with user defined function error_fn for handling fatal errors and 
function warning_fn for handling non-fatal errors. The replacement functions
must do a longjmp to the last setjmp location if setjmp/longjmp method of error
handling is used.  If error_fn or warning_fn is NULL, the default functions for
error handling shall be used.
</para>
</refsect1>


</refentry>

<refentry id="libpng12.png.set.expand.1">
<refmeta>
<refentrytitle>png_set_expand</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_expand</refname>
<refpurpose>set expansion transformation</refpurpose>
<indexterm id="ix.libpng12.png.set.expand.1">	<primary>png_set_expand</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_expand</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_expand() shall set transformation in png_ptr such that paletted 
images are expanded to RGB, grayscale images of bit-depth less than 8 are 
expanded to 8-bit images and tRNS chunks are expanded to alpha channels.
</para>
</refsect1>


</refentry>

<refentry id="libpng12.png.set.filler.1">
<refmeta>
<refentrytitle>png_set_filler</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_filler</refname>
<refpurpose>add a filler byte to given image</refpurpose>
<indexterm id="ix.libpng12.png.set.filler.1">	<primary>png_set_filler</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_filler</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_uint_32
<parameter>filler</parameter>
</paramdef>
<paramdef>int
<parameter>flags</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_filler() shall set transformations in png_ptr such that a filler byte is
added when an 8-bit grayscale image or 24-bit RGB image is read and a filler
byte is deleted when an 8-bit grayscale image or 24-bit RGB image is written.
</para>
</refsect1>


</refentry>

<refentry id="libpng12.png.set.filter.1">
<refmeta>
<refentrytitle>png_set_filter</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_filter</refname>
<refpurpose>set filtering method</refpurpose>
<indexterm id="ix.libpng12.png.set.filter.1">	<primary>png_set_filter</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_filter</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>int
<parameter>method</parameter>
</paramdef>
<paramdef>int
<parameter>filters</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_filter() shall set the filtering method used for scan-line filtering.
The only valid value for "method" is 0. "filters" is a bitmap for which the
following bits may be set.
PNG_NO_FILTERS
PNG_FILTER_NONE
PNG_FILTER_SUB
PNG_FILTER_UP
PNG_FILTER_AVG
PNG_FILTER_PAETH
PNG_ALL_FILTERS
</para>
</refsect1>


</refentry>

<refentry id="libpng12.png.set.gAMA.1">
<refmeta>
<refentrytitle>png_set_gAMA</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_gAMA</refname>
<refpurpose>set the gamma value for given image</refpurpose>
<indexterm id="ix.libpng12.png.set.gAMA.1">	<primary>png_set_gAMA</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_gAMA</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>double
<parameter>file_gamma</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Sets the gamma value of an image to "file_gamma" and sets gAMA chunk
information to valid for the image.
</para>
</refsect1>

<refsect1>
<title>Errors</title>
<para>
png_set_gAMA() shall generate warning if file_gamma > 21474.83 or file_gamma = 0
</para>
</refsect1>
</refentry>

<refentry id="libpng12.png.set.gamma.1">
<refmeta>
<refentrytitle>png_set_gamma</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_gamma</refname>
<refpurpose>transform the image from file gamma to screen gamma</refpurpose>
<indexterm id="ix.libpng12.png.set.gamma.1">	<primary>png_set_gamma</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_gamma</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>double
<parameter>screen_gamma</parameter>
</paramdef>
<paramdef>double
<parameter>file_gamma</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_gama() shall set the transformation for gamma correction of the PNG file
based on the screen gamma i.e. the display exponent.
The gamma transformation may be turned off later if no semitransparent entries
are present in the tRNS array for palette images.
</para>
</refsect1>


</refentry>

<refentry id="libpng12.png.set.gray.to.rgb.1">
<refmeta>
<refentrytitle>png_set_gray_to_rgb</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_gray_to_rgb</refname>
<refpurpose>expand the grayscale image to 24-bit RGB</refpurpose>
<indexterm id="ix.libpng12.png.set.gray.to.rgb.1">	<primary>png_set_gray_to_rgb</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_gray_to_rgb</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_gray_to_rgb() shall set transformations such that the grayscale
image is converted to 24-bit RGB.
</para>
</refsect1>


</refentry>

<refentry id="libpng12.png.set.hIST.1">
<refmeta>
<refentrytitle>png_set_hIST</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_hIST</refname>
<refpurpose>set the histogram of color palette</refpurpose>
<indexterm id="ix.libpng12.png.set.hIST.1">	<primary>png_set_hIST</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_hIST</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>png_uint_16p
<parameter>hist</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_hIST() shall set the histogram of palette to "hist".
</para>
</refsect1>
</refentry>

<refentry id="libpng12.png.set.iCCP.1">
<refmeta>
<refentrytitle>png_set_iCCP</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_iCCP</refname>
<refpurpose>set ICC component</refpurpose>
<indexterm id="ix.libpng12.png.set.iCCP.1">	<primary>png_set_iCCP</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_iCCP</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>png_charp
<parameter>name</parameter>
</paramdef>
<paramdef>int
<parameter>compression_type</parameter>
</paramdef>
<paramdef>png_charp
<parameter>profile</parameter>
</paramdef>
<paramdef>png_uint_32
<parameter>proflen</parameter>
</paramdef>
</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_iCCP() shall set the ICC component information to info_ptr. The
arguments used to describe the ICC profile information have been described
below:
<variablelist>
<varlistentry>
<term><parameter>name</parameter> </term>
<listitem><para>ICC profile name</para></listitem> 
</varlistentry>
<varlistentry>
<term><parameter>compression_type</parameter> </term>
<listitem><para>compression type used must be 0</para></listitem> 
</varlistentry>
<varlistentry>
<term><parameter>profile</parameter> </term>
<listitem><para>profile data</para></listitem> 
</varlistentry>
<varlistentry>
<term><parameter>proflen</parameter> </term>
<listitem><para>length of profile data</para></listitem> 
</varlistentry>
</variablelist>
</para>
</refsect1>
</refentry>

<refentry id="libpng12.png.set.interlace.handling.1">
<refmeta>
<refentrytitle>png_set_interlace_handling</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_interlace_handling</refname>
<refpurpose>get the number of passes for image interlacing</refpurpose>
<indexterm id="ix.libpng12.png.set.interlace.handling.1">	<primary>png_set_interlace_handling</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>int
<function>png_set_interlace_handling</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_interlace_handling() shall set the scheme to interlacing for writing an
image and return the number of sub-images required to write the image.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
png_set_interlace_handling() shall return 7 if the image is interlaced,
otherwise png_set_interlace_handling() shall return 1.
</para>
</refsect1>

</refentry>

<refentry id="libpng12.png.set.invert.mono.1">
<refmeta>
<refentrytitle>png_set_invert_mono</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_invert_mono</refname>
<refpurpose>reverse values for monochromicity</refpurpose>
<indexterm id="ix.libpng12.png.set.invert.mono.1">	<primary>png_set_invert_mono</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_invert_mono</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_invert_mono() shall set monochromicity value 0 to white and value 1 to
black.
</para>
</refsect1>


</refentry>

<refentry id="libpng12.png.set.oFFs.1">
<refmeta>
<refentrytitle>png_set_oFFs</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_oFFs</refname>
<refpurpose>set screen offsets for given image</refpurpose>
<indexterm id="ix.libpng12.png.set.oFFs.1">	<primary>png_set_oFFs</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_oFFs</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>png_int_32
<parameter>offset_x</parameter>
</paramdef>
<paramdef>png_int_32
<parameter>offset_y</parameter>
</paramdef>
<paramdef>int
<parameter>unit_type</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_oFFs() shall set the positive offset from the left edge of the screen to
offset_x and the positive offset from the left edge of the screen to offset_y.
The unit_type must be PNG_OFFSET_PIXEL if the offset is defined in pixels or
PNG_OFFSET_MICROMETER if the offset is defined in microns.
</para>
</refsect1>


</refentry>

<refentry id="libpng12.png.set.pHYs.1">
<refmeta>
<refentrytitle>png_set_pHYs</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_pHYs</refname>
<refpurpose>set physical resolution</refpurpose>
<indexterm id="ix.libpng12.png.set.pHYs.1">	<primary>png_set_pHYs</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_pHYs</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>png_uint_32
<parameter>res_x</parameter>
</paramdef>
<paramdef>png_uint_32
<parameter>res_y</parameter>
</paramdef>
<paramdef>int
<parameter>unit_type</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_pHYs() sets the physical resolution for the image in pixels per unit.
The physical resolution in x direction is set to res_x and that in y direction
is set to res_y. unit_type must be set to PNG_RESOLUTION_METER is the unit for
resolution is pixels per unit, otherwise unit_type must be set to
PNG_RESOLUTION_UNKNOWN.
</para>
</refsect1>


</refentry>

<refentry id="libpng12.png.set.packing.1">
<refmeta>
<refentrytitle>png_set_packing</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_packing</refname>
<refpurpose>expand image to 1 pixel per byte for bit-depths 1,2 and 4</refpurpose>
<indexterm id="ix.libpng12.png.set.packing.1">	<primary>png_set_packing</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_packing</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_packing() shall expand image to 1 pixel per byte for bit-depths 1, 2 and
4 without changing the order of the pixels.
If png_set_packing() is not called, PNG files pack pixels of bit_depths 1, 2
and 4 into bytes as small as possible, for example, 8 pixels per byte for 1-bit
files.
</para>
</refsect1>


</refentry>

<refentry id="libpng12.png.set.packswap.1">
<refmeta>
<refentrytitle>png_set_packswap</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_packswap</refname>
<refpurpose>swap the order of pixels for packed-pixel image</refpurpose>
<indexterm id="ix.libpng12.png.set.packswap.1">	<primary>png_set_packswap</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_packswap</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_swap() shall change the pixel packing order for each byte for
packed-pixel images with bit-depths 1, 2 or 4.
</para>
</refsect1>


</refentry>

<refentry id="libpng12.png.set.progressive.read.fn.1">
<refmeta>
<refentrytitle>png_set_progressive_read_fn</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_progressive_read_fn</refname>
<refpurpose>set progressive read callback functions</refpurpose>
<indexterm id="ix.libpng12.png.set.progressive.read.fn.1">	<primary>png_set_progressive_read_fn</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_progressive_read_fn</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_voidp
<parameter>user_ptr</parameter>
</paramdef>
<paramdef>png_progressive_info_ptr
<parameter>info_callback</parameter>
</paramdef>
<paramdef>png_progressive_row_ptr
<parameter>row_callback</parameter>
</paramdef>
<paramdef>png_progressive_end_ptr
<parameter>end_callback</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_progressive_read_fn() shall provide function callbacks for which shall
be called for processing image data by png_process_data(). "info_callback" shall
be called to process header information, "row_callback" shall be called when
each row is completed and "end_callback" shall be called to process end of image
information. png_set_progressive_read_fn() must be called even if all callback
functions are NULL. The user-defined structure pointed to by "user_ptr" may be
retrieved from inside the callbacks using function get_progressive_ptr().
</para>
</refsect1>
</refentry>

<refentry id="libpng12.png.set.read.fn.1">
<refmeta>
<refentrytitle>png_set_read_fn</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_read_fn</refname>
<refpurpose>set user-defined function for reading a PNG stream</refpurpose>
<indexterm id="ix.libpng12.png.set.read.fn.1">	<primary>png_set_read_fn</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_read_fn</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_voidp
<parameter>io_ptr</parameter>
</paramdef>
<paramdef>png_rw_ptr
<parameter>read_data_fn</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_read_fn() sets the read_data_fn as the input function for reading PNG
files instead of using standard C I/O stream functions.
png_ptr      - pointer to input data structure png_struct
io_ptr       - pointer to user-defined structure containing information about the
               input functions. This value may be NULL.
read_data_fn - pointer to new input function that shall take the following
               arguments:
               - a pointer to a png_struct 
			   - a pointer to a structure where input data can be stored
			   - 32-bit unsigned int to indicate number of bytes to read
			   The input function should invoke png_error() to handle any fatal
			   errors and png_warning() to handle non-fatal errors.
</para>
</refsect1>


</refentry>

<refentry id="libpng12.png.set.rgb.to.gray.1">
<refmeta>
<refentrytitle>png_set_rgb_to_gray</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_rgb_to_gray</refname>
<refpurpose>reduce 24-bit RGB to grayscale image</refpurpose>
<indexterm id="ix.libpng12.png.set.rgb.to.gray.1">	<primary>png_set_rgb_to_gray</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_rgb_to_gray</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_rgb_to_gray() shall set transformations such that the 24-bit RGB
image is converted to grayscale.
</para>
</refsect1>
</refentry>

<refentry id="libpng12.png.set.rows.1">
<refmeta>
<refentrytitle>png_set_rows</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_rows</refname>
<refpurpose>put image data in png_info structure</refpurpose>
<indexterm id="ix.libpng12.png.set.rows.1">	<primary>png_set_rows</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_rows</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>png_bytepp
<parameter>row_pointers</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_rows() shall put rows of image data into the info_ptr structure, where
row_pointers is an array of pointers to the pixel data for each row.
</para>
</refsect1>
</refentry>

<refentry id="libpng12.png.set.sBIT.1">
<refmeta>
<refentrytitle>png_set_sBIT</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_sBIT</refname>
<refpurpose>set number of significant bits for each channel</refpurpose>
<indexterm id="ix.libpng12.png.set.sBIT.1">	<primary>png_set_sBIT</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_sBIT</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>png_color_8p
<parameter>sig_bit</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_sBIT shall set the number of significant bits for each of gray, red,
green and blue channels, whichever are appropriate for the given
color type.
</para>
</refsect1>


</refentry>

<refentry id="libpng12.png.set.sRGB.1">
<refmeta>
<refentrytitle>png_set_sRGB</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_sRGB</refname>
<refpurpose>set the rendering intent for given image</refpurpose>
<indexterm id="ix.libpng12.png.set.sRGB.1">	<primary>png_set_sRGB</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_sRGB</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>int
<parameter>srgb_intent</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_sRGB() shall set the rendering intent of an image as specified by
srgb_intent and shall set the sRGB chunk information to valid for the image. The
presence of sRGB chunk implies that the pixel data is in the sRGB color space.
srgb_intent can take one of the following values
<simplelist>
<member>PNG_sRGB_INTENT_SATURATION</member>
<member>PNG_sRGB_INTENT_PERCEPTUAL</member>
<member>PNG_sRGB_INTENT_ABSOLUTE</member>
<member>PNG_sRGB_INTENT_RELATIVE</member>
</simplelist>
</para>
</refsect1>
</refentry>

<refentry id="libpng12.png.set.shift.1">
<refmeta>
<refentrytitle>png_set_shift</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_shift</refname>
<refpurpose>shift pixel values to valid bit-depth</refpurpose>
<indexterm id="ix.libpng12.png.set.shift.1">	<primary>png_set_shift</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_shift</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_color_8p
<parameter>true_bits</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
If image data in a row buffer is stored in a bit depth other than those
supported by PNG, png_set_shift() shall scale the values to a valid bit-depth
defined by PNG format.
For example, 3-bit data in range 0-7 is scaled to 4-bit PNG.
</para>
</refsect1>


</refentry>

<refentry id="libpng12.png.set.sig.bytes.1">
<refmeta>
<refentrytitle>png_set_sig_bytes</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_sig_bytes</refname>
<refpurpose>number of bytes read from PNG file</refpurpose>
<indexterm id="ix.libpng12.png.set.sig.bytes.1">	<primary>png_set_sig_bytes</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_sig_bytes</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>int
<parameter>num_bytes</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_sig_bytes() shall store the number of bytes of the PNG file signature
that have been read from the PNG stream.
</para>
</refsect1>

<refsect1>
<title>Errors</title>
<para>
png_set_sig_bytes() shall invoke error function if num_bytes > 8.
</para>
</refsect1>
</refentry>

<refentry id="libpng12.png.set.strip.16.1">
<refmeta>
<refentrytitle>png_set_strip_16</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_strip_16</refname>
<refpurpose>strip 16 bit PNG file to 8 bit depth</refpurpose>
<indexterm id="ix.libpng12.png.set.strip.16.1">	<primary>png_set_strip_16</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_strip_16</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_strip_16() shall strip the pixels of a PNG stream with 16 bits per 
channel to 8 bits per channel.
</para>
</refsect1>


</refentry>

<refentry id="libpng12.png.set.strip.alpha.1">
<refmeta>
<refentrytitle>png_set_strip_alpha</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_strip_alpha</refname>
<refpurpose>remove alpha channel on the given image</refpurpose>
<indexterm id="ix.libpng12.png.set.strip.alpha.1">	<primary>png_set_strip_alpha</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_strip_alpha</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_strip_alpha() shall set transformation on the image to remove the alpha
channel.
</para>
</refsect1>


</refentry>

<refentry id="libpng12.png.set.swap.1">
<refmeta>
<refentrytitle>png_set_swap</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_swap</refname>
<refpurpose>swap byte-order for 16 bit depth files</refpurpose>
<indexterm id="ix.libpng12.png.set.swap.1">	<primary>png_set_swap</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_swap</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
PNG files store 16-bit pixels in network byte order (big-endian, ie most
significant bytes first). png_set_swap() shall switch the byte-order to
little-endian (ie, least significant bits first).
</para>
</refsect1>


</refentry>

<refentry id="libpng12.png.set.swap.alpha.1">
<refmeta>
<refentrytitle>png_set_swap_alpha</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_swap_alpha</refname>
<refpurpose>swap image data from RGBA to ARGB format</refpurpose>
<indexterm id="ix.libpng12.png.set.swap.alpha.1">	<primary>png_set_swap_alpha</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_swap_alpha</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_swap_alpha() shall swap data for an image with an alpha channel from
RGBA format to ARGB format.
</para>
</refsect1>
</refentry>

<refentry id="libpng12.png.set.tIME.1">
<refmeta>
<refentrytitle>png_set_tIME</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_tIME</refname>
<refpurpose>set last modification time for the image</refpurpose>
<indexterm id="ix.libpng12.png.set.tIME.1">	<primary>png_set_tIME</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_tIME</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>png_timep
<parameter>mod_time</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_sBIT shall set the time of last modification of the image in info_ptr as
specified by mod_time.
</para>
</refsect1>


</refentry>

<refentry id="libpng12.png.set.tRNS.1">
<refmeta>
<refentrytitle>png_set_tRNS</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_tRNS</refname>
<refpurpose>set transparency values for images</refpurpose>
<indexterm id="ix.libpng12.png.set.tRNS.1">	<primary>png_set_tRNS</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_tRNS</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>png_bytep
<parameter>trans</parameter>
</paramdef>
<paramdef>int
<parameter>num_trans</parameter>
</paramdef>
<paramdef>png_color_16p
<parameter>trans_values</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_tRNS() shall set the transparency data for paletted images and
image types that don't need a full alpha channel. 
For a paletted image, png_set_tRNS() shall set the array of transparency values 
for the palette colors to "trans". The number of transparency entries is given
by "num_trans".
For non-paletted images, png_set_tRNS() shall set the single color value or
graylevel to "trans_values"
</para>
</refsect1>


</refentry>

<!-- MISSING DEFINITION FOR png_set_tRNS_to_alpha -->
<!-- Lets just hope nobody notices -->
<refentry id="libpng12.png.set.text.1">
<refmeta>
<refentrytitle>png_set_text</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_text</refname>
<refpurpose>stores information for image comments</refpurpose>
<indexterm id="ix.libpng12.png.set.text.1">	<primary>png_set_text</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_text</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>png_textp
<parameter>text_ptr</parameter>
</paramdef>
<paramdef>int
<parameter>num_text</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_text() shall store information for image comments given in text_ptr to
info_ptr. text_ptr is an array of size "num_text" of png_text structure whose
member fields include:
compression - type of compression used on text. Supported values are:
              PNG_TEXT_COMPRESSION_NONE
              PNG_TEXT_COMPRESSION_zTXt
              PNG_ITXT_COMPRESSION_NONE
              PNG_ITXT_COMPRESSION_zTXt
key         - keyword for comment. Must contain 1-79 characters.
text        - text comments for current keyword. Maybe NULL or empty.
text_length - length of text string after decompression. Must be 0 for iTXt
itxt_length - length of itxt string after decompression. Must be 0 for tEXt/zTXt
lang        - language of comment. May be NULL or empty if language is unknown.
lang_key    - translated keyword in UTF-8 coding. Maybe NULL or empty.
</para>
</refsect1>
</refentry>

<refentry id="libpng12.png.set.write.fn.1">
<refmeta>
<refentrytitle>png_set_write_fn</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_set_write_fn</refname>
<refpurpose>set user-defined function for writing a PNG stream</refpurpose>
<indexterm id="ix.libpng12.png.set.write.fn.1">	<primary>png_set_write_fn</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_set_write_fn</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_voidp
<parameter>io_ptr</parameter>
</paramdef>
<paramdef>png_rw_ptr
<parameter>write_data_fn</parameter>
</paramdef>
<paramdef>png_flush_ptr
<parameter>output_flush_fn</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_set_write_fn() sets the write_data_fn as the output function for writing PNG
files instead of using standard C I/O stream functions.
png_ptr       - pointer to output data structure png_struct
io_ptr        - pointer to user-defined structure containing information about 
                the output functions. This value may be NULL.
write_data_fn - pointer to new output function that shall take the following
                arguments:
                - a pointer to a png_struct 
			    - a pointer to a structure where output data can be stored
			    - 32-bit unsigned int to indicate number of bytes to write
			    The output function should invoke png_error() to handle any fatal
			    errors and png_warning() to handle non-fatal errors.
flush_data_fn - pointer to a new flush function that shall take a pointer to
                a png_struct as argument. This function shall flush any
				remaining data in buffers used by the output function. If the
				output function does not buffer output, a function prototype
				must still be supplied.
</para>
</refsect1>


</refentry>

<refentry id="libpng12.png.sig.cmp.1">
<refmeta>
<refentrytitle>png_sig_cmp</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_sig_cmp</refname>
<refpurpose>match the PNG signature</refpurpose>
<indexterm id="ix.libpng12.png.sig.cmp.1">	<primary>png_sig_cmp</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>int
<function>png_sig_cmp</function>
</funcdef>
<paramdef>png_bytep
<parameter>sig</parameter>
</paramdef>
<paramdef>png_size_t
<parameter>start</parameter>
</paramdef>
<paramdef>png_size_t
<parameter>num_to_check</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_sig_cmp() checks whether the given number of bytes match the PNG signature
starting from the start position. The function shall return non-zero if 
num_to_check == 0 or start > 7.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
Zero - the given number of bytes starting from start position match the
respective bytes of the PNG signature.
Non-zero - the given number of bytes starting from start position do not match
the respective bytes of the PNG signature or num_to_check == 0 or start > 7.
</para>
</refsect1>
</refentry>

<refentry id="libpng12.png.warning.1">
<refmeta>
<refentrytitle>png_warning</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_warning</refname>
<refpurpose>default function to handle non-fatal errors</refpurpose>
<indexterm id="ix.libpng12.png.warning.1">	<primary>png_warning</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_warning</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_const_charp
<parameter>warning_message</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_warning() is the default function for handling non-fatal errors. The
default function to handle warnings may be changed by using png_set_error_fn()
to replace the warning function at run-time.
</para>
</refsect1>


</refentry>

<refentry id="libpng12.png.write.chunk.1">
<refmeta>
<refentrytitle>png_write_chunk</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_write_chunk</refname>
<refpurpose>write a PNG chunk</refpurpose>
<indexterm id="ix.libpng12.png.write.chunk.1">	<primary>png_write_chunk</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_write_chunk</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_bytep
<parameter>chunk_name</parameter>
</paramdef>
<paramdef>png_bytep
<parameter>data</parameter>
</paramdef>
<paramdef>png_size_t
<parameter>length</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_write_chunk() writes the start of a PNG chunk, the chunk data and the end of
the chunk all at once. 
</para>
</refsect1>


</refentry>

<refentry id="libpng12.png.write.end.1">
<refmeta>
<refentrytitle>png_write_end</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_write_end</refname>
<refpurpose>write the end of a PNG file</refpurpose>
<indexterm id="ix.libpng12.png.write.end.1">	<primary>png_write_end</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_write_end</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_write_end() writes the end of a PNG file to which the image data has already
been written. The user may write time information or comments at the end of the
PNG file.
</para>
</refsect1>


</refentry>

<refentry id="libpng12.png.write.flush.1">
<refmeta>
<refentrytitle>png_write_flush</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_write_flush</refname>
<refpurpose>flush the current output buffers</refpurpose>
<indexterm id="ix.libpng12.png.write.flush.1">	<primary>png_write_flush</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_write_flush</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_write_flush() shall the current output buffers for any pending data.
</para>
</refsect1>
</refentry>

<refentry id="libpng12.png.write.image.1">
<refmeta>
<refentrytitle>png_write_image</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_write_image</refname>
<refpurpose>write the given image data</refpurpose>
<indexterm id="ix.libpng12.png.write.image.1">	<primary>png_write_image</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_write_image</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_bytepp
<parameter>image</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Write the rows of given image data. If the image is not interlaced, the image
shall be written in a single pass.
</para>
</refsect1>


</refentry>

<refentry id="libpng12.png.write.info.1">
<refmeta>
<refentrytitle>png_write_info</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_write_info</refname>
<refpurpose>write PNG information to file</refpurpose>
<indexterm id="ix.libpng12.png.write.info.1">	<primary>png_write_info</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_write_info</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_write_info() writes the PNG information in info_ptr to file.
</para>
</refsect1>


</refentry>

<refentry id="libpng12.png.write.png.1">
<refmeta>
<refentrytitle>png_write_png</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_write_png</refname>
<refpurpose>write the entire PNG file</refpurpose>
<indexterm id="ix.libpng12.png.write.png.1">	<primary>png_write_png</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_write_png</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_infop
<parameter>info_ptr</parameter>
</paramdef>
<paramdef>int
<parameter>transforms</parameter>
</paramdef>
<paramdef>png_voidp
<parameter>params</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
png_write_png() shall provide the high-level write operation. The function 
shall write the PNG stream if the entire image information is available in
png_ptr. The integer "transforms" shall contain the
logical OR of a set of the following transformation flags:
<variablelist>
<varlistentry>
<term><parameter>PNG_TRANSFORM_IDENTITY</parameter></term>
<listitem><para>No transformation</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>PNG_TRANSFORM_PACKING</parameter></term>
<listitem><para>Expand 1, 2 and 4-bit samples to bytes</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>PNG_TRANSFORM_PACKSWAP</parameter></term>
<listitem><para>Change order of packed pixels to LSB first</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>PNG_TRANSFORM_INVERT_MONO</parameter></term>
<listitem><para>Invert monochrome images</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>PNG_TRANSFORM_SHIFT</parameter></term>
<listitem><para>Normalize pixels to the sBIT depth</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>PNG_TRANSFORM_BGR</parameter></term>
<listitem><para>Flip RGB to BGR, RGBA to BGRA</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>PNG_TRANSFORM_SWAP_ALPHA</parameter></term>
<listitem><para>Flip RGBA to ARGB or GA to AG</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>PNG_TRANSFORM_INVERT_ALPHA</parameter></term>
<listitem><para>Change alpha from opacity to transparency</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>PNG_TRANSFORM_SWAP_ENDIAN</parameter></term>
<listitem><para>Byte-swap 16-bit samples</para></listitem>
</varlistentry>
<varlistentry>
<term><parameter>PNG_TRANSFORM_STRIP_FILLER</parameter></term>
<listitem><para>Strip off filler bytes</para></listitem>
</varlistentry>
</variablelist>

"params" is unused and must be set to NULL.
</para>
</refsect1>
</refentry>

<refentry id="libpng12.png.write.row.1">
<refmeta>
<refentrytitle>png_write_row</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_write_row</refname>
<refpurpose>write a row of image data</refpurpose>
<indexterm id="ix.libpng12.png.write.row.1">	<primary>png_write_row</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_write_row</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_bytep
<parameter>row</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Process and write a row of image data. The header information must have been
written before the image data can be written.
</para>
</refsect1>


</refentry>

<refentry id="libpng12.png.write.rows.1">
<refmeta>
<refentrytitle>png_write_rows</refentrytitle>
<refmiscinfo>libpng12</refmiscinfo>
</refmeta>

<refnamediv>
<refname>png_write_rows</refname>
<refpurpose>write multiple rows of image data</refpurpose>
<indexterm id="ix.libpng12.png.write.rows.1">	<primary>png_write_rows</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;png.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>void
<function>png_write_rows</function>
</funcdef>
<paramdef>png_structp
<parameter>png_ptr</parameter>
</paramdef>
<paramdef>png_bytepp
<parameter>row</parameter>
</paramdef>
<paramdef>png_uint_32
<parameter>num_rows</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Process and write "num_rows" rows of image data starting from "row".
</para>
</refsect1>


</refentry>

</SECT1>
<!-- End of text generated from database -->
<!--    by $Header: mklibspec 1.82 2006/03/29 19:10:18 mats Exp 0 -->


</CHAPTER>

</PART>
