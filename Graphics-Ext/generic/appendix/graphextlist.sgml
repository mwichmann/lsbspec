<!-- Start of generated text - do not edit! -->
<!-- generated from the LSB specification database by mklibapnd -->
<SECT1 ID=app-libXft>
<TITLE>libXft</TITLE>
<PARA>
</PARA>
<PARA>
The behavior of the interfaces in this library is specified by the following Standards.<SIMPLELIST COLUMNS=1>
<MEMBER>
<XREF LINKEND="STD.LSB"> [LSB]
</MEMBER>
</SIMPLELIST>
</PARA>
<TABLE>
<TITLE>libXft Function Interfaces</TITLE>
<TGROUP COLS=3>
<TBODY>
<ROW><ENTRY>XftCharExists<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XftDrawSetClipRectangles<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XftGlyphFontSpecRender<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>XftCharFontSpecRender<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XftDrawSetSubwindowMode<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XftGlyphRender<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>XftCharIndex<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XftDrawSrcPicture<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XftGlyphSpecRender<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>XftCharSpecRender<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XftDrawString16<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XftInit<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>XftColorAllocName<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XftDrawString32<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XftInitFtLibrary<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>XftColorAllocValue<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XftDrawString8<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XftListFonts<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>XftColorFree<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XftDrawStringUtf16<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XftLockFace<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>XftDefaultHasRender<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XftDrawStringUtf8<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XftNameParse<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>XftDefaultSet<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XftDrawVisual<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XftTextExtents16<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>XftDefaultSubstitute<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XftFontCheckGlyph<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XftTextExtents32<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>XftDrawChange<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XftFontClose<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XftTextExtents8<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>XftDrawCharFontSpec<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XftFontCopy<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XftTextExtentsUtf16<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>XftDrawCharSpec<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XftFontInfoCreate<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XftTextExtentsUtf8<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>XftDrawColormap<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XftFontInfoDestroy<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XftTextRender16<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>XftDrawCreate<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XftFontInfoEqual<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XftTextRender16BE<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>XftDrawCreateAlpha<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XftFontInfoHash<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XftTextRender16LE<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>XftDrawCreateBitmap<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XftFontLoadGlyphs<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XftTextRender32<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>XftDrawDestroy<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XftFontMatch<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XftTextRender32BE<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>XftDrawDisplay<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XftFontOpen<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XftTextRender32LE<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>XftDrawDrawable<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XftFontOpenInfo<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XftTextRender8<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>XftDrawGlyphFontSpec<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XftFontOpenName<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XftTextRenderUtf16<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>XftDrawGlyphSpec<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XftFontOpenPattern<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XftTextRenderUtf8<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>XftDrawGlyphs<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XftFontOpenXlfd<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XftUnlockFace<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>XftDrawPicture<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XftFontUnloadGlyphs<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XftXlfdParse<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>XftDrawRect<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XftGetVersion<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>XftDrawSetClip<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XftGlyphExtents<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT1>
<SECT1 ID=app-libXrender>
<TITLE>libXrender</TITLE>
<PARA>
</PARA>
<PARA>
The behavior of the interfaces in this library is specified by the following Standards.<SIMPLELIST COLUMNS=1>
<MEMBER>
<XREF LINKEND="STD.LSB"> [LSB]
</MEMBER>
</SIMPLELIST>
</PARA>
<TABLE>
<TITLE>libXrender Function Interfaces</TITLE>
<TGROUP COLS=3>
<TBODY>
<ROW><ENTRY>XRenderAddGlyphs<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XRenderCreateAnimCursor<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XRenderFreePicture<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>XRenderAddTraps<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XRenderCreateConicalGradient<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XRenderParseColor<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>XRenderChangePicture<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XRenderCreateCursor<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XRenderQueryExtension<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>XRenderComposite<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XRenderCreateGlyphSet<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XRenderQueryFilters<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>XRenderCompositeDoublePoly<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XRenderCreateLinearGradient<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XRenderQueryFormats<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>XRenderCompositeString16<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XRenderCreatePicture<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XRenderQueryPictIndexValues<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>XRenderCompositeString32<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XRenderCreateRadialGradient<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XRenderQuerySubpixelOrder<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>XRenderCompositeString8<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XRenderCreateSolidFill<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XRenderQueryVersion<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>XRenderCompositeText16<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XRenderFillRectangle<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XRenderReferenceGlyphSet<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>XRenderCompositeText32<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XRenderFillRectangles<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XRenderSetPictureClipRectangles<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>XRenderCompositeText8<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XRenderFindFormat<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XRenderSetPictureClipRegion<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>XRenderCompositeTrapezoids<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XRenderFindStandardFormat<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XRenderSetPictureFilter<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>XRenderCompositeTriFan<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XRenderFindVisualFormat<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XRenderSetPictureTransform<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>XRenderCompositeTriStrip<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XRenderFreeGlyphSet<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XRenderSetSubpixelOrder<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>XRenderCompositeTriangles<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>XRenderFreeGlyphs<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT1>
<SECT1 ID=app-libcairo>
<TITLE>libcairo</TITLE>
<PARA>
</PARA>
<PARA>
The behavior of the interfaces in this library is specified by the following Standards.<SIMPLELIST COLUMNS=1>
<MEMBER>
<XREF LINKEND="STD.Cairo"> [Cairo 1.2.0]
</MEMBER>
</SIMPLELIST>
</PARA>
<TABLE>
<TITLE>libcairo Function Interfaces</TITLE>
<TGROUP COLS=3>
<TBODY>
<ROW><ENTRY>cairo_append_path<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_in_stroke<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_scaled_font_text_extents<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_arc<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_line_to<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_select_font_face<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_arc_negative<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_mask<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_set_antialias<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_clip<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_mask_surface<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_set_dash<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_clip_preserve<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_matrix_init<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_set_fill_rule<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_close_path<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_matrix_init_identity<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_set_font_face<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_copy_page<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_matrix_init_rotate<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_set_font_matrix<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_copy_path<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_matrix_init_scale<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_set_font_options<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_copy_path_flat<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_matrix_init_translate<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_set_font_size<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_create<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_matrix_invert<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_set_line_cap<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_curve_to<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_matrix_multiply<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_set_line_join<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_destroy<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_matrix_rotate<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_set_line_width<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_device_to_user<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_matrix_scale<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_set_matrix<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_device_to_user_distance<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_matrix_transform_distance<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_set_miter_limit<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_fill<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_matrix_transform_point<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_set_operator<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_fill_extents<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_matrix_translate<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_set_scaled_font<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_fill_preserve<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_move_to<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_set_source<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_font_extents<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_new_path<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_set_source_rgb<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_font_face_destroy<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_new_sub_path<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_set_source_rgba<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_font_face_get_type<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_paint<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_set_source_surface<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_font_face_get_user_data<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_paint_with_alpha<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_set_tolerance<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_font_face_reference<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_path_destroy<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_show_glyphs<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_font_face_set_user_data<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_pattern_add_color_stop_rgb<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_show_page<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_font_face_status<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_pattern_add_color_stop_rgba<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_show_text<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_font_options_copy<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_pattern_create_for_surface<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_status<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_font_options_create<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_pattern_create_linear<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_status_to_string<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_font_options_destroy<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_pattern_create_radial<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_stroke<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_font_options_equal<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_pattern_create_rgb<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_stroke_extents<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_font_options_get_antialias<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_pattern_create_rgba<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_stroke_preserve<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_font_options_get_hint_metrics<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_pattern_destroy<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_surface_create_similar<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_font_options_get_hint_style<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_pattern_get_extend<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_surface_destroy<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_font_options_get_subpixel_order<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_pattern_get_filter<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_surface_finish<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_font_options_hash<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_pattern_get_matrix<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_surface_flush<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_font_options_merge<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_pattern_get_type<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_surface_get_content<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_font_options_set_antialias<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_pattern_reference<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_surface_get_device_offset<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_font_options_set_hint_metrics<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_pattern_set_extend<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_surface_get_font_options<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_font_options_set_hint_style<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_pattern_set_filter<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_surface_get_type<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_font_options_set_subpixel_order<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_pattern_set_matrix<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_surface_get_user_data<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_font_options_status<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_pattern_status<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_surface_mark_dirty<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_ft_font_face_create_for_ft_face<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_pdf_surface_create<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_surface_mark_dirty_rectangle<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_ft_font_face_create_for_pattern<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_pdf_surface_create_for_stream<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_surface_reference<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_ft_font_options_substitute<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_pdf_surface_set_size<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_surface_set_device_offset<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_ft_scaled_font_lock_face<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_pop_group<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_surface_set_fallback_resolution<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_ft_scaled_font_unlock_face<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_pop_group_to_source<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_surface_set_user_data<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_get_antialias<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_ps_surface_create<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_surface_status<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_get_current_point<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_ps_surface_create_for_stream<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_surface_write_to_png<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_get_fill_rule<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_ps_surface_dsc_begin_page_setup<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_surface_write_to_png_stream<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_get_font_face<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_ps_surface_dsc_begin_setup<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_svg_get_versions<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_get_font_matrix<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_ps_surface_dsc_comment<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_svg_surface_create<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_get_font_options<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_ps_surface_set_size<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_svg_surface_create_for_stream<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_get_group_target<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_push_group<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_svg_surface_restrict_to_version<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_get_line_cap<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_push_group_with_content<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_svg_version_to_string<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_get_line_join<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_rectangle<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_text_extents<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_get_line_width<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_reference<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_text_path<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_get_matrix<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_rel_curve_to<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_transform<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_get_miter_limit<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_rel_line_to<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_translate<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_get_operator<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_rel_move_to<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_user_to_device<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_get_source<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_reset_clip<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_user_to_device_distance<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_get_target<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_restore<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_version<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_get_tolerance<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_rotate<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_version_string<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_glyph_extents<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_save<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_xlib_surface_create<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_glyph_path<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_scale<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_xlib_surface_create_for_bitmap<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_identity_matrix<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_scaled_font_create<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_xlib_surface_create_with_xrender_format<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_image_surface_create<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_scaled_font_destroy<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_xlib_surface_get_depth<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_image_surface_create_for_data<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_scaled_font_extents<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_xlib_surface_get_display<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_image_surface_create_from_png<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_scaled_font_get_ctm<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_xlib_surface_get_drawable<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_image_surface_create_from_png_stream<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_scaled_font_get_font_face<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_xlib_surface_get_height<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_image_surface_get_data<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_scaled_font_get_font_matrix<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_xlib_surface_get_screen<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_image_surface_get_format<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_scaled_font_get_font_options<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_xlib_surface_get_visual<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_image_surface_get_height<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_scaled_font_get_type<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_xlib_surface_get_width<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_image_surface_get_stride<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_scaled_font_glyph_extents<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_xlib_surface_set_drawable<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_image_surface_get_width<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_scaled_font_reference<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_xlib_surface_set_size<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY></ROW>
<ROW><ENTRY>cairo_in_fill<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY>cairo_scaled_font_status<LINK LINKEND="std.Cairo">[Cairo 1.2.0]</LINK></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT1>
<SECT1 ID=app-libfontconfig>
<TITLE>libfontconfig</TITLE>
<PARA>
</PARA>
<PARA>
The behavior of the interfaces in this library is specified by the following Standards.<SIMPLELIST COLUMNS=1>
<MEMBER>
<XREF LINKEND="STD.fontconfig"> [fontconfig]
</MEMBER>
</SIMPLELIST>
</PARA>
<TABLE>
<TITLE>libfontconfig Function Interfaces</TITLE>
<TGROUP COLS=3>
<TBODY>
<ROW><ENTRY>FcAtomicCreate<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcFini<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcPatternAddCharSet<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY></ROW>
<ROW><ENTRY>FcAtomicDeleteNew<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcFontList<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcPatternAddDouble<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY></ROW>
<ROW><ENTRY>FcAtomicDestroy<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcFontMatch<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcPatternAddFTFace<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY></ROW>
<ROW><ENTRY>FcAtomicLock<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcFontRenderPrepare<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcPatternAddInteger<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY></ROW>
<ROW><ENTRY>FcAtomicNewFile<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcFontSetAdd<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcPatternAddLangSet<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY></ROW>
<ROW><ENTRY>FcAtomicOrigFile<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcFontSetCreate<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcPatternAddMatrix<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY></ROW>
<ROW><ENTRY>FcAtomicReplaceOrig<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcFontSetDestroy<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcPatternAddString<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY></ROW>
<ROW><ENTRY>FcAtomicUnlock<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcFontSetList<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcPatternAddWeak<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY></ROW>
<ROW><ENTRY>FcBlanksAdd<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcFontSetMatch<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcPatternBuild<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY></ROW>
<ROW><ENTRY>FcBlanksCreate<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcFontSetPrint<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcPatternCreate<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY></ROW>
<ROW><ENTRY>FcBlanksDestroy<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcFontSetSort<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcPatternDel<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY></ROW>
<ROW><ENTRY>FcBlanksIsMember<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcFontSetSortDestroy<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcPatternDestroy<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY></ROW>
<ROW><ENTRY>FcCharSetAddChar<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcFontSort<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcPatternDuplicate<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY></ROW>
<ROW><ENTRY>FcCharSetCopy<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcFreeTypeCharIndex<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcPatternEqual<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY></ROW>
<ROW><ENTRY>FcCharSetCount<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcFreeTypeCharSet<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcPatternEqualSubset<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY></ROW>
<ROW><ENTRY>FcCharSetCreate<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcFreeTypeCharSetAndSpacing<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcPatternGet<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY></ROW>
<ROW><ENTRY>FcCharSetDestroy<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcFreeTypeQuery<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcPatternGetBool<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY></ROW>
<ROW><ENTRY>FcCharSetEqual<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcGetVersion<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcPatternGetCharSet<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY></ROW>
<ROW><ENTRY>FcCharSetFirstPage<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcInit<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcPatternGetDouble<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY></ROW>
<ROW><ENTRY>FcCharSetHasChar<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcInitBringUptoDate<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcPatternGetFTFace<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY></ROW>
<ROW><ENTRY>FcCharSetIntersect<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcInitLoadConfig<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcPatternGetInteger<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY></ROW>
<ROW><ENTRY>FcCharSetIntersectCount<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcInitLoadConfigAndFonts<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcPatternGetLangSet<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY></ROW>
<ROW><ENTRY>FcCharSetIsSubset<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcInitReinitialize<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcPatternGetMatrix<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY></ROW>
<ROW><ENTRY>FcCharSetNextPage<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcLangSetAdd<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcPatternGetString<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY></ROW>
<ROW><ENTRY>FcCharSetSubtract<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcLangSetCompare<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcPatternHash<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY></ROW>
<ROW><ENTRY>FcCharSetSubtractCount<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcLangSetContains<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcPatternPrint<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY></ROW>
<ROW><ENTRY>FcCharSetUnion<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcLangSetCopy<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcPatternReference<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY></ROW>
<ROW><ENTRY>FcConfigAppFontAddDir<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcLangSetCreate<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcPatternVaBuild<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY></ROW>
<ROW><ENTRY>FcConfigAppFontAddFile<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcLangSetDestroy<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcStrBasename<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY></ROW>
<ROW><ENTRY>FcConfigAppFontClear<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcLangSetEqual<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcStrCmp<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY></ROW>
<ROW><ENTRY>FcConfigBuildFonts<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcLangSetHasLang<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcStrCmpIgnoreCase<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY></ROW>
<ROW><ENTRY>FcConfigDestroy<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcLangSetHash<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcStrCopy<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY></ROW>
<ROW><ENTRY>FcConfigEnableHome<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcMatrixCopy<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcStrCopyFilename<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY></ROW>
<ROW><ENTRY>FcConfigFilename<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcMatrixEqual<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcStrDirname<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY></ROW>
<ROW><ENTRY>FcConfigGetBlanks<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcMatrixMultiply<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcStrListCreate<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY></ROW>
<ROW><ENTRY>FcConfigGetCache<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcMatrixRotate<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcStrListDone<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY></ROW>
<ROW><ENTRY>FcConfigGetConfigDirs<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcMatrixScale<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcStrListNext<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY></ROW>
<ROW><ENTRY>FcConfigGetConfigFiles<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcMatrixShear<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcStrSetAdd<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY></ROW>
<ROW><ENTRY>FcConfigGetCurrent<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcNameConstant<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcStrSetAddFilename<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY></ROW>
<ROW><ENTRY>FcConfigGetFontDirs<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcNameGetConstant<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcStrSetCreate<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY></ROW>
<ROW><ENTRY>FcConfigGetFonts<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcNameGetObjectType<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcStrSetDel<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY></ROW>
<ROW><ENTRY>FcConfigGetRescanInverval<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcNameParse<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcStrSetDestroy<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY></ROW>
<ROW><ENTRY>FcConfigHome<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcNameRegisterConstants<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcStrSetEqual<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY></ROW>
<ROW><ENTRY>FcConfigParseAndLoad<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcNameRegisterObjectTypes<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcStrSetMember<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY></ROW>
<ROW><ENTRY>FcConfigSetCurrent<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcNameUnparse<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcUcs4ToUtf8<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY></ROW>
<ROW><ENTRY>FcConfigSetRescanInverval<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcNameUnregisterConstants<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcUtf16Len<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY></ROW>
<ROW><ENTRY>FcConfigSubstitute<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcNameUnregisterObjectTypes<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcUtf16ToUcs4<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY></ROW>
<ROW><ENTRY>FcConfigSubstituteWithPat<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcObjectSetAdd<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcUtf8Len<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY></ROW>
<ROW><ENTRY>FcConfigUptoDate<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcObjectSetBuild<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcUtf8ToUcs4<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY></ROW>
<ROW><ENTRY>FcDefaultSubstitute<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcObjectSetCreate<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcValueDestroy<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY></ROW>
<ROW><ENTRY>FcDirCacheValid<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcObjectSetDestroy<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcValueEqual<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY></ROW>
<ROW><ENTRY>FcDirSave<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcObjectSetVaBuild<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcValuePrint<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY></ROW>
<ROW><ENTRY>FcDirScan<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcPatternAdd<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcValueSave<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY></ROW>
<ROW><ENTRY>FcFileScan<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY>FcPatternAddBool<LINK LINKEND="std.fontconfig">[fontconfig]</LINK></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT1>
<SECT1 ID=app-libfreetype>
<TITLE>libfreetype</TITLE>
<PARA>
</PARA>
<PARA>
The behavior of the interfaces in this library is specified by the following Standards.<SIMPLELIST COLUMNS=1>
<MEMBER>
<XREF LINKEND="STD.freetype"> [freetype 2.2]
</MEMBER>
<MEMBER>
<XREF LINKEND="STD.LSB"> [LSB]
</MEMBER>
</SIMPLELIST>
</PARA>
<TABLE>
<TITLE>libfreetype Function Interfaces</TITLE>
<TGROUP COLS=3>
<TBODY>
<ROW><ENTRY>FT_Activate_Size<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_Get_Sfnt_Name_Count<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_Outline_Render<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY></ROW>
<ROW><ENTRY>FT_Add_Default_Modules<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_Get_Sfnt_Table<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_Outline_Reverse<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY></ROW>
<ROW><ENTRY>FT_Add_Module<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_Get_X11_Font_Format<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>FT_Outline_Transform<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY></ROW>
<ROW><ENTRY>FT_Angle_Diff<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_Glyph_Copy<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_Outline_Translate<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY></ROW>
<ROW><ENTRY>FT_Atan2<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_Glyph_Get_CBox<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_Remove_Module<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY></ROW>
<ROW><ENTRY>FT_Attach_File<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_Glyph_Stroke<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_Render_Glyph<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY></ROW>
<ROW><ENTRY>FT_Attach_Stream<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_Glyph_StrokeBorder<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_RoundFix<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY></ROW>
<ROW><ENTRY>FT_Bitmap_Convert<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_Glyph_To_Bitmap<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_Select_Charmap<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY></ROW>
<ROW><ENTRY>FT_Bitmap_Copy<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_Glyph_Transform<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_Set_Char_Size<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY></ROW>
<ROW><ENTRY>FT_Bitmap_Done<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_Has_PS_Glyph_Names<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_Set_Charmap<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY></ROW>
<ROW><ENTRY>FT_Bitmap_Embolden<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_Init_FreeType<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_Set_Debug_Hook<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY></ROW>
<ROW><ENTRY>FT_Bitmap_New<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_Library_Version<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_Set_MM_Blend_Coordinates<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY></ROW>
<ROW><ENTRY>FT_CeilFix<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_List_Add<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_Set_MM_Design_Coordinates<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY></ROW>
<ROW><ENTRY>FT_Cos<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_List_Finalize<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_Set_Pixel_Sizes<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY></ROW>
<ROW><ENTRY>FT_DivFix<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_List_Find<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_Set_Renderer<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY></ROW>
<ROW><ENTRY>FT_Done_Face<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_List_Insert<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_Set_Transform<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY></ROW>
<ROW><ENTRY>FT_Done_FreeType<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_List_Iterate<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_Set_Var_Blend_Coordinates<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY></ROW>
<ROW><ENTRY>FT_Done_Glyph<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_List_Remove<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_Set_Var_Design_Coordinates<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY></ROW>
<ROW><ENTRY>FT_Done_Library<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_List_Up<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_Sfnt_Table_Info<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY></ROW>
<ROW><ENTRY>FT_Done_Size<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_Load_Char<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_Sin<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY></ROW>
<ROW><ENTRY>FT_FloorFix<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_Load_Glyph<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_Stroker_BeginSubPath<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY></ROW>
<ROW><ENTRY>FT_Get_BDF_Charset_ID<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_Load_Sfnt_Table<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_Stroker_ConicTo<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY></ROW>
<ROW><ENTRY>FT_Get_BDF_Property<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_Matrix_Invert<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_Stroker_CubicTo<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY></ROW>
<ROW><ENTRY>FT_Get_CMap_Language_ID<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_Matrix_Multiply<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_Stroker_Done<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY></ROW>
<ROW><ENTRY>FT_Get_Char_Index<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_MulDiv<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_Stroker_EndSubPath<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY></ROW>
<ROW><ENTRY>FT_Get_Charmap_Index<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_MulFix<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_Stroker_Export<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY></ROW>
<ROW><ENTRY>FT_Get_First_Char<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_New_Face<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_Stroker_ExportBorder<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY></ROW>
<ROW><ENTRY>FT_Get_Glyph<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_New_Library<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_Stroker_GetBorderCounts<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY></ROW>
<ROW><ENTRY>FT_Get_Glyph_Name<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_New_Memory_Face<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_Stroker_GetCounts<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY></ROW>
<ROW><ENTRY>FT_Get_Kerning<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_New_Size<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_Stroker_LineTo<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY></ROW>
<ROW><ENTRY>FT_Get_MM_Var<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_OpenType_Validate<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_Stroker_New<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY></ROW>
<ROW><ENTRY>FT_Get_Module<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_Open_Face<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_Stroker_ParseOutline<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY></ROW>
<ROW><ENTRY>FT_Get_Multi_Master<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_Outline_Check<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_Stroker_Rewind<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY></ROW>
<ROW><ENTRY>FT_Get_Name_Index<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_Outline_Copy<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_Stroker_Set<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY></ROW>
<ROW><ENTRY>FT_Get_Next_Char<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_Outline_Decompose<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_Tan<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY></ROW>
<ROW><ENTRY>FT_Get_PFR_Advance<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_Outline_Done<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_Vector_From_Polar<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY></ROW>
<ROW><ENTRY>FT_Get_PFR_Kerning<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_Outline_GetInsideBorder<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_Vector_Length<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY></ROW>
<ROW><ENTRY>FT_Get_PFR_Metrics<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_Outline_GetOutsideBorder<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_Vector_Polarize<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY></ROW>
<ROW><ENTRY>FT_Get_PS_Font_Info<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_Outline_Get_BBox<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_Vector_Rotate<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY></ROW>
<ROW><ENTRY>FT_Get_PS_Font_Private<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_Outline_Get_Bitmap<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_Vector_Transform<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY></ROW>
<ROW><ENTRY>FT_Get_Postscript_Name<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_Outline_Get_CBox<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_Vector_Unit<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY></ROW>
<ROW><ENTRY>FT_Get_Renderer<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_Outline_Get_Orientation<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>FT_Get_Sfnt_Name<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY>FT_Outline_New<LINK LINKEND="std.freetype">[freetype 2.2]</LINK></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT1>
<SECT1 ID=app-libjpeg>
<TITLE>libjpeg</TITLE>
<PARA>
</PARA>
<PARA>
The behavior of the interfaces in this library is specified by the following Standards.<SIMPLELIST COLUMNS=1>
<MEMBER>
<XREF LINKEND="STD.LSB"> [LSB]
</MEMBER>
</SIMPLELIST>
</PARA>
<TABLE>
<TITLE>libjpeg Function Interfaces</TITLE>
<TGROUP COLS=3>
<TBODY>
<ROW><ENTRY>jpeg_CreateCompress<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>jpeg_finish_decompress<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>jpeg_set_quality<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>jpeg_CreateDecompress<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>jpeg_finish_output<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>jpeg_simple_progression<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>jpeg_abort<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>jpeg_has_multiple_scans<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>jpeg_start_compress<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>jpeg_abort_compress<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>jpeg_input_complete<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>jpeg_start_decompress<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>jpeg_abort_decompress<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>jpeg_new_colormap<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>jpeg_start_output<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>jpeg_add_quant_table<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>jpeg_quality_scaling<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>jpeg_std_error<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>jpeg_alloc_huff_table<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>jpeg_read_coefficients<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>jpeg_stdio_dest<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>jpeg_alloc_quant_table<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>jpeg_read_header<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>jpeg_stdio_src<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>jpeg_calc_output_dimensions<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>jpeg_read_raw_data<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>jpeg_suppress_tables<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>jpeg_consume_input<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>jpeg_read_scanlines<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>jpeg_write_coefficients<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>jpeg_copy_critical_parameters<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>jpeg_resync_to_restart<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>jpeg_write_m_byte<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>jpeg_default_colorspace<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>jpeg_save_markers<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>jpeg_write_m_header<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>jpeg_destroy<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>jpeg_set_colorspace<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>jpeg_write_marker<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>jpeg_destroy_compress<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>jpeg_set_defaults<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>jpeg_write_raw_data<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>jpeg_destroy_decompress<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>jpeg_set_linear_quality<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>jpeg_write_scanlines<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>jpeg_finish_compress<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>jpeg_set_marker_processor<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>jpeg_write_tables<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT1>
<SECT1 ID=app-libpng12>
<TITLE>libpng12</TITLE>
<PARA>
</PARA>
<PARA>
The behavior of the interfaces in this library is specified by the following Standards.<SIMPLELIST COLUMNS=1>
<MEMBER>
<XREF LINKEND="STD.LSB"> [LSB]
</MEMBER>
</SIMPLELIST>
</PARA>
<TABLE>
<TITLE>libpng12 Function Interfaces</TITLE>
<TGROUP COLS=3>
<TBODY>
<ROW><ENTRY>png_access_version_number(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_get_user_chunk_ptr(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_set_invert_mono(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>png_check_sig(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_get_valid(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_set_keep_unknown_chunks(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>png_convert_from_struct_tm(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_get_x_offset_pixels(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_set_mem_fn(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>png_convert_from_time_t(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_get_x_pixels_per_meter(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_set_oFFs(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>png_create_info_struct(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_get_y_offset_pixels(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_set_pHYs(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>png_create_read_struct(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_get_y_pixels_per_meter(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_set_packing(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>png_create_read_struct_2(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_info_init_3(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_set_packswap(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>png_create_write_struct(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_init_io(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_set_palette_to_rgb(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>png_create_write_struct_2(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_malloc(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_set_progressive_read_fn(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>png_data_freer(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_permit_mng_features(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_set_read_fn(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>png_destroy_info_struct(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_process_data(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_set_read_user_chunk_fn(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>png_destroy_read_struct(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_progressive_combine_row(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_set_read_user_transform_fn(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>png_destroy_write_struct(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_read_end(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_set_rgb_to_gray(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>png_error(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_read_image(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_set_rows(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>png_free(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_read_info(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_set_sBIT(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>png_free_data(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_read_png(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_set_sRGB(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>png_get_IHDR(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_read_row(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_set_sRGB_gAMA_and_cHRM(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>png_get_PLTE(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_read_rows(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_set_shift(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>png_get_bKGD(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_read_update_info(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_set_sig_bytes(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>png_get_bit_depth(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_set_IHDR(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_set_strip_16(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>png_get_cHRM(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_set_PLTE(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_set_strip_alpha(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>png_get_channels(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_set_bKGD(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_set_swap(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>png_get_color_type(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_set_background(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_set_swap_alpha(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>png_get_error_ptr(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_set_bgr(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_set_tIME(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>png_get_gAMA(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_set_cHRM(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_set_tRNS(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>png_get_hIST(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_set_compression_buffer_size(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_set_tRNS_to_alpha(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>png_get_header_ver(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_set_compression_level(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_set_text(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>png_get_iCCP(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_set_compression_mem_level(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_set_unknown_chunk_location(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>png_get_image_height(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_set_compression_method(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_set_unknown_chunks(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>png_get_image_width(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_set_compression_strategy(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_set_write_fn(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>png_get_interlace_type(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_set_compression_window_bits(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_set_write_status_fn(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>png_get_io_ptr(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_set_dither(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_set_write_user_transform_fn(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>png_get_libpng_ver(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_set_error_fn(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_sig_cmp(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>png_get_oFFs(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_set_expand(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_start_read_image(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>png_get_pHYs(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_set_filler(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_warning(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>png_get_progressive_ptr(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_set_filter(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_write_chunk(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>png_get_rowbytes(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_set_gAMA(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_write_end(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>png_get_rows(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_set_gamma(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_write_flush(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>png_get_sBIT(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_set_gray_1_2_4_to_8(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_write_image(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>png_get_sRGB(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_set_gray_to_rgb(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_write_info(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>png_get_tIME(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_set_hIST(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_write_png(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>png_get_tRNS(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_set_iCCP(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_write_row(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>png_get_text(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_set_interlace_handling(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_write_rows(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY></ROW>
<ROW><ENTRY>png_get_unknown_chunks(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY>png_set_invert_alpha(PNG12_0)<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
<TABLE>
<TITLE>libpng12 Data Interfaces</TITLE>
<TGROUP COLS=3>
<TBODY>
<ROW><ENTRY>png_libpng_ver<LINK LINKEND="std.LSB">[LSB]</LINK></ENTRY><ENTRY></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT1>
<!-- End of text generated from database -->
