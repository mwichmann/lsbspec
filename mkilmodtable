#!/usr/bin/perl
#
# generate table of modules for an interpreted language
#

use DBI;
use Getopt::Long;
use Env qw(LSBUSER LSBDBPASSWD LSBDB LSBDBHOST);

local %references;
local %standards;

sub usage() {
    print STDERR "mkilmodtable -v <lsbversion> [-b] -l <language>\n";
    die;
}

# Uncomment to trace SQL statments
#$trace=1;

sub makeid($) {
    my ($name) = @_;
    $name =~ s/\s+/./g;
    $name =~ s/[^A-Za-z0-9.]+/./g;

    # finally, remove any repeated '.' (might be result of other cleanup)
    $name =~ s/\.\.+/./g;
    return $name;
}

GetOptions(
    "l=s" => \$language,
    "v=s" => \$lsbversion
);
if ( !$language ) { usage(); }
if ( !$lsbversion ) { usage(); }

$dbh = DBI->connect( "DBI:mysql:$LSBDB:$LSBDBHOST", $LSBUSER, $LSBDBPASSWD );
die unless $dbh;

$sth = $dbh->prepare("SHOW TABLES");
$sth->execute;

my $status, $title, $tbl, $MainTitle;
$status    = 'Included';
$title     = $language.' modules';
$tbl       = "tbl-$language-mods";
$MainTitle = "$language Modules";

$select  = "SELECT * FROM InterpretedLanguageModule ";
$select .= "LEFT JOIN InterpretedLanguage ON ILMlanguage=ILid ";
$select .= "LEFT JOIN Standard ON Sid=ILstandard ";
$select .= "WHERE ILname = '$language' ";
$select .= "AND ILappearedin <= '$lsbversion' AND ILappearedin <>'' ";
$select .= "AND (ILwithdrawnin IS NULL OR ILwithdrawnin > '$lsbversion') ";
$select .= "AND ILMappearedin <= '$lsbversion' AND ILMappearedin <>'' ";
$select .= "AND (ILMwithdrawnin IS NULL OR ILMwithdrawnin > '$lsbversion') ";
$select .= "ORDER BY ILMname";
print STDERR $select, "\n" if $trace;

$sth = $dbh->prepare($select);
$sth->execute;

printf("<!-- Start of generated text - do not edit! -->\n");
printf("<!-- generated from the LSB specification database by mkilmodtable -->\n");
printf("<PARA>\n");
printf("An LSB conforming implementation shall provide the\n");
printf("%s as described in <XREF LINKEND=\"%s\">\n", $title, $tbl );
printf("with at least the behavior described as mandatory\n");
printf("in the referenced underlying specification\n");
printf("</PARA>\n");

if ( $sth->rows < 1 ) {
    printf("<PARA>No $language modules found!</PARA>\n");
} else {

    printf("<TABLE id=\"$tbl\">\n");
    printf("<TITLE>$MainTitle</TITLE>\n");
    printf("<TGROUP COLS=5>\n");
    printf("<TBODY>\n");
    printf("<ROW>\n");

    my $col       = 0;                               #column count
    my $row       = 0;
    my $totalrows = int( ( $sth->rows + 4 ) / 5 );

    my $mods = $sth->fetchall_arrayref( {} );

    while ( $row < $totalrows ) {

	#
	# fixed width table ... 5 columns
	#
	if ( $col == 5 ) {
	    last if ( ++$row >= $totalrows );
	    printf("</ROW><ROW>\n");
	    $col = 0;
	}
	my $idx = ( $row + ( $col++ * $totalrows ) );
	$field = $mods->[ ($idx) ];

	#
	# Shouldn't need this, but we've seen this script
	# go into an infinite loop before, so this is a safeguard.
	#
	die "OVERFLOW!!! $idx > " . $totalrows * 5
	  unless ( $idx <= $totalrows * 5 );

	$ref = $permutation{ $field->{'ILMstandard'} };

	#$ftid = sprintf("std-fn-%s-%s",
	#	$field[1], $permutation{$field[1]});

	printf( "<ENTRY>%s\n", $field->{'ILMname'} );

	# figure out a reference
	# each table is followed by a list of references
	#
	# this is a little complex:
	# %references is a hash, using keys of the form "std-%d-%d"
	#   with values being the names of the standards
	# @ref is an array; each element is a key in %ref
	# $refno is the current index into that array
	if ( $field->{'Sid'} ) {

	    my $refstr = sprintf "std-mod-%d", $field->{'Sid'};
	    $references{$refstr} = $field->{'Sname'};
	    $refno = 0;
	    for $r ( 0 .. $#ref ) {
		$refno = $r;
		last if ( $ref[$r] eq $refstr );
	    }
	    if ( $ref[$refno] ne $refstr ) {
		push( @ref, $refstr );
		$refno = $#ref;
	    }

	    printf( "<LINK LINKEND=\"%s\"> [%d]</LINK>\n",
		$refstr, $refno + 1 );
	}
	printf("</ENTRY>\n");

    }

    printf("</ROW>\n");
    printf("</TBODY>\n");
    printf("</TGROUP>\n");
    printf("</TABLE>\n");

    #
    # now print out the referenced standards list
    #
    if ( $#ref >= 0 ) {
	print
	  "<PARA><EMPHASIS>Referenced Specification(s)</EMPHASIS></PARA>\n";
	for $r ( 0 .. $#ref ) {
	    $refstr = $ref[$r];
	    $references{$refstr} = "This specification"
	      if ( $references{$refstr} eq "Linux Standard Base" );
	    printf
"<FORMALPARA><TITLE id=\"%s\">[%d]</TITLE><para><XREF LINKEND=std.%s></para></FORMALPARA>\n",
	      $refstr, $r + 1, makeid( $references{$refstr} );
	}
    }
}
$sth->finish;

printf("<!-- End of text generated from database -->\n");

$sth = $dbh->prepare("SHOW TABLES");
$sth->execute;
$sth->finish;
$dbh->disconnect;
exit;
