<!-- Start of text generated from database -->
<!-- generated from the LSB specification database -->
<!--    by $Header: /cvsroot/lsb/spec/mklibspec,v 1.20 2001/04/25 17:38:13 anderson Exp 0 -->
<!--    at Wed Apr 25 15:55:13 2001 -->
<SECT1 ID=libc>
<TITLE>libc</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Library:</ENTRY>
<ENTRY>libc</ENTRY>
</ROW>
<ROW>
<ENTRY>Runtime Path:</ENTRY>
<ENTRY>libc.so.6</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The behaviour of the interfaces in this library is specified by the following Standards.<SIMPLELIST COLUMNS=1>
<MEMBER>
Linux Standard Base<FOOTNOTE ID="std-131-10">
<PARA>
Linux Standard Base</PARA>
</FOOTNOTE>
</MEMBER>
</SIMPLELIST>
</PARA>
<SECT2>
<TITLE>Standard Library</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>ioperm(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>iopl(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY></ENTRY><ENTRY></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>ELF Magic</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>__divdi3(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY></ENTRY><ENTRY></ENTRY><ENTRY></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
</SECT1>
<SECT1 ID=libc-ddefs>
<TITLE> Data Definitions for libc</TITLE>
<PARA>
</PARA>
<SECT2>
<TITLE>assert.h</TITLE>
<PARA>
</PARA>
<SCREEN>

void __assert_fail(char *, char *, unsigned int, char *);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>ctype.h</TITLE>
<PARA>
</PARA>
<SCREEN>

unsigned short *__ctype_b;
__int32_t *__ctype_tolower;
__int32_t *__ctype_toupper;
int _tolower(int);
int _toupper(int);
int isalnum(int);
int isalpha(int);
int isascii(int);
int iscntrl(int);
int isdigit(int);
int isgraph(int);
int islower(int);
int isprint(int);
int ispunct(int);
int isspace(int);
int isupper(int);
int isxdigit(int);
int toascii(int);
int tolower(int);
int toupper(int);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>dirent.h</TITLE>
<PARA>
</PARA>
<SCREEN>

void rewinddir(DIR *);
void seekdir(DIR *, long);
long telldir(DIR *);
int closedir(DIR *);
DIR *opendir(char *);
dirent *readdir(DIR *);
dirent64 *readdir64(DIR *);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>fcntl.h</TITLE>
<PARA>
</PARA>
<SCREEN>

int creat(char *, __mode_t);
int creat64(char *, __mode_t);
int fcntl(int, int, ...);
int open(char *, int, ...);
int open64(char *, int, ...);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>fnmatch.h</TITLE>
<PARA>
</PARA>
<SCREEN>

int fnmatch(char *, char *, int);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>ftw.h</TITLE>
<PARA>
</PARA>
<SCREEN>
typedef int __ftw_func_t;

typedef int __ftw64_func_t;

typedef int __nftw_func_t;

typedef int __nftw64_func_t;


int ftw(char *, __ftw_func_t, int);
int ftw64(char *, __ftw64_func_t, int);
int nftw(char *, __nftw_func_t, int, int);
int nftw64(char *, __nftw64_func_t, int, int);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>glob.h</TITLE>
<PARA>
</PARA>
<SCREEN>

int glob(char *, int, int, glob_t *);
int glob64(char *, int, int, glob64_t *);
void globfree(glob_t *);
void globfree64(glob64_t *);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>grp.h</TITLE>
<PARA>
</PARA>
<SCREEN>

void endgrent(void);
group *getgrent(void);
group *getgrgid(__gid_t);
group *getgrnam(char *);
void setgrent(void);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>iconv.h</TITLE>
<PARA>
</PARA>
<SCREEN>
typedef *void void *iconv_t;


size_t iconv(iconv_t, char **, size_t *, char **, size_t *);
int iconv_close(iconv_t);
iconv_t iconv_open(char *, char *);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>inttypes.h</TITLE>
<PARA>
</PARA>
<SCREEN>
typedef typedef struct {

    long quot;
    long rem;
} lldiv_t;

imaxdiv_t;


intmax_t strtoimax(char *, char **, int);
uintmax_t strtoumax(char *, char **, int);
intmax_t wcstoimax(wchar_t *, wchar_t * *, int);
uintmax_t wcstoumax(wchar_t *, wchar_t * *, int);
intmax_t imaxabs(intmax_t);
imaxdiv_t imaxdiv(intmax_t, intmax_t);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>langinfo.h</TITLE>
<PARA>
</PARA>
<SCREEN>

char *nl_langinfo();
</SCREEN>
</SECT2>
<SECT2>
<TITLE>locale.h</TITLE>
<PARA>
</PARA>
<SCREEN>

lconv *localeconv(void);
char *setlocale(int, char *);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>monetary.h</TITLE>
<PARA>
</PARA>
<SCREEN>
</SCREEN>
</SECT2>
<SECT2>
<TITLE>nl_types.h</TITLE>
<PARA>
</PARA>
<SCREEN>
typedef *void void *nl_catd;


int catclose(nl_catd);
char *catgets(nl_catd, int, int, char *);
nl_catd catopen(char *, int);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>pwd.h</TITLE>
<PARA>
</PARA>
<SCREEN>

void endpwent(void);
passwd *getpwent(void);
passwd *getpwnam(char *);
passwd *getpwuid(__uid_t);
void setpwent(void);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>regex.h</TITLE>
<PARA>
</PARA>
<SCREEN>
typedef struct {

    regoff_t rm_so;
    regoff_t rm_eo;
} regmatch_t;


int regcomp(regex_t *, char *, int);
size_t regerror(int, regex_t *, char *, size_t);
int regexec(regex_t *, char *, size_t, regmatch_t, int);
void regfree(regex_t *);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>regexp.h</TITLE>
<PARA>
</PARA>
<SCREEN>

char *loc1;
char *loc2;
char *locs;
int advance(char *, char *);
int step(char *, char *);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>sched.h</TITLE>
<PARA>
</PARA>
<SCREEN>

int sched_get_priority_max(int);
int sched_get_priority_min(int);
int sched_getparam(__pid_t, sched_param *);
int sched_getscheduler(__pid_t);
int sched_rr_get_interval(__pid_t, timespec *);
int sched_setparam(__pid_t, sched_param *);
int sched_setscheduler(__pid_t, int, sched_param *);
int sched_yield(void);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>search.h</TITLE>
<PARA>
</PARA>
<SCREEN>
typedef Unknown Type:"" unknown ACTION;

typedef struct entry {

    char *key;
    void *data;
} ENTRY;

typedef void __action_fn_t;


int hcreate(size_t);
ENTRY *hsearch(ENTRY, ACTION);
void insque(void *, void *);
void *lfind(void *, void *, size_t *, size_t);
void *lsearch(void *, void *, size_t *, size_t);
void remque(void *);
void hdestroy(void);
void *tfind(void *, void **);
void *tsearch(void *, void **);
void twalk(void *, __action_fn_t);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>setjmp.h</TITLE>
<PARA>
</PARA>
<SCREEN>
typedef struct __jmp_buf_tag {

    Unknown Type:"" unknown __jmpbuf;
    int __mask_was_saved;
    Unknown Type:"" unknown __saved_mask;
} jmp_buf;

typedef typedef struct __jmp_buf_tag {

    Unknown Type:"" unknown __jmpbuf;
    int __mask_was_saved;
    Unknown Type:"" unknown __saved_mask;
} jmp_buf;

sigjmp_buf;


int __sigsetjmp(jmp_buf, int);
void longjmp(jmp_buf, int);
void siglongjmp(sigjmp_buf, int);
void _longjmp(jmp_buf, int);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>signal.h</TITLE>
<PARA>
</PARA>
<SCREEN>
typedef void __sighandler_t;


int __libc_current_sigrtmax(void);
int __libc_current_sigrtmin(void);
int __sigpause(int, int);
__sighandler_t __sysv_signal(int, __sighandler_t);
int killpg(__pid_t, int);
int raise(int);
int sigaddset(sigset_t *, int);
int sigdelset(sigset_t *, int);
int sigemptyset(sigset_t *);
int sigfillset(sigset_t *);
int sighold(int);
int sigignore(int);
int siginterrupt(int, int);
int sigismember(sigset_t *, int);
int sigpending(sigset_t *);
int sigrelse(int);
__sighandler_t sigset(int, __sighandler_t);
int sigstack(sigstack *, sigstack *);
int sigaction(int, sigaction *, sigaction *);
int sigwait(sigset_t *, int *);
int kill(__pid_t, int);
int sigaltstack(sigaltstack *, sigaltstack *);
__sighandler_t signal(int, __sighandler_t);
int sigprocmask(int, sigset_t *, sigset_t *);
int sigsuspend(sigset_t *);
int sigqueue(__pid_t, int,, enum sigval);
int sigwaitinfo(sigset_t *, siginfo_t *);
int sigtimedwait(sigset_t *, siginfo_t *, timespec *);
__sighandler_t bsd_signal(int, __sighandler_t);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>stdio.h</TITLE>
<PARA>
</PARA>
<SCREEN>

void clearerr(FILE *);
int fclose(FILE *);
FILE *fdopen(int, char *);
int fileno(FILE *);
FILE *fopen(char *, char *);
int fprintf(FILE *, char *, ...);
int fputc(int, FILE *);
FILE *freopen(char *, char *, FILE *);
FILE *freopen64(char *, char *, FILE *);
int fscanf(FILE *, char *, ...);
int fseek(FILE *, long, int);
int fseeko(FILE *, __off_t, int);
int fseeko64(FILE *, __off64_t, int);
__off_t ftello(FILE *);
__off64_t ftello64(FILE *);
int getchar(void);
int getchar_unlocked(void);
int getw(FILE *);
int pclose(FILE *);
void perror(char *);
FILE *popen(char *, char *);
int printf(char *, ...);
int putc_unlocked(int, FILE *);
int putchar(int);
int putchar_unlocked(int);
int putw(int, FILE *);
int remove(char *);
void rewind(FILE *);
int scanf(char *, ...);
void setbuf(FILE *, char *);
int sprintf(char *, char *, ...);
int sscanf(char *, char *, ...);
FILE *stderr;
FILE *stdin;
FILE *stdout;
char *tempnam(char *, char *);
FILE *tmpfile64(void);
FILE *tmpfile(void);
char *tmpnam(char *);
int vfprintf(FILE *, char *, __gnuc_va_list);
int vprintf(char *, __gnuc_va_list);
int feof(FILE *);
int ferror(FILE *);
int fflush(FILE *);
int fgetc(FILE *);
int fgetpos(FILE *, fpos_t *);
char *fgets(char *, int, FILE *);
int fputs(char *, FILE *);
size_t fread(void *, size_t, size_t, FILE *);
int fsetpos(FILE *, fpos_t *);
long ftell(FILE *);
size_t fwrite(void *, size_t, size_t, FILE *);
int getc(FILE *);
char *gets(char *);
int putc(int, FILE *);
int puts(char *);
int setvbuf(FILE *, char *, int, size_t);
int snprintf(char *, size_t, char *, ...);
int ungetc(int, FILE *);
int vsnprintf(char *, size_t, char *, __gnuc_va_list);
int vsprintf(char *, char *, __gnuc_va_list);
void flockfile(FILE *);
int fgetpos64(FILE *, fpos64_t *);
FILE *fopen64(char *, char *);
int fsetpos64(FILE *, fpos64_t *);
int ftrylockfile(FILE *);
void funlockfile(FILE *);
int getc_unlocked(FILE *);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>stdlib.h</TITLE>
<PARA>
</PARA>
<SCREEN>
typedef struct {

    long quot;
    long rem;
} lldiv_t;

typedef struct {

    int quot;
    int rem;
} div_t;

typedef struct {

    long quot;
    long rem;
} ldiv_t;

typedef int __compar_fn_t;


char *__secure_getenv(char *);
double __strtod_internal(char *, char **, int);
float __strtof_internal(char *, char **, int);
long __strtol_internal(char *, char **, int, int);
long double __strtold_internal(char *, char **, int);
long long __strtoll_internal(char *, char **, int, int);
unsigned long __strtoul_internal(char *, char **, int, int);
unsigned long long __strtoull_internal(char *, char **, int, int);
long a64l(char *);
void abort(void);
int abs(int);
int atexit(void);
double atof(char *);
int atoi(char *);
long atol(char *);
void *bsearch(void *, void *, size_t, size_t, __compar_fn_t);
div_t div(int, int);
double drand48(void);
char *ecvt(double, int, int *, int *);
double erand48(unsigned short);
void exit(int);
char *fcvt(double, int, int *, int *);
char *gcvt(double, int, char *);
char *getenv(char *);
int getsubopt(char **, char **, char **);
int grantpt(int);
long jrand48(unsigned short);
char *l64a(long);
long labs(long);
ldiv_t ldiv(long, long);
long long llabs(long long);
lldiv_t lldiv(long long, long long);
long lrand48(void);
int mblen(char *, size_t);
size_t mbstowcs(wchar_t *, char *, size_t);
int mbtowc(wchar_t *, char *, size_t);
int mkstemp(char *);
char *mktemp(char *);
long mrand48(void);
long nrand48(unsigned short);
char *ptsname(int);
int putenv(char *);
void qsort(void *, size_t, size_t, __compar_fn_t);
int rand(void);
unsigned short *seed48(unsigned short);
void srand48(long);
int unlockpt(int);
size_t wcstombs(char *, wchar_t *, size_t);
int wctomb(char *, wchar_t);
int system(char *);
void *calloc(size_t, size_t);
void free(void *);
void *initstate(unsigned int, void *, size_t);
void *malloc(size_t);
void *realloc(void *, size_t);
void *setstate(void *);
void srand(unsigned int);
void srandom(unsigned int);
double strtod(char *, char **);
float strtof(char *, char **);
long strtol(char *, char **, int);
long double strtold(char *, char **);
long long strtoll(char *, char **, int);
unsigned long strtoul(char *, char **, int);
unsigned long long strtoull(char *, char **, int);
void _Exit(int);
size_t __ctype_get_mb_cur_max(void);
char *realpath(char *, char *);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>string.h</TITLE>
<PARA>
</PARA>
<SCREEN>

void __bzero(void *, size_t);
char *__strdup(char *);
char *__strtok_r(char *, char *, char **);
void bcopy(void *, void *, size_t);
void *memchr(void *, int, size_t);
int memcmp(void *, void *, size_t);
void *memcpy(void *, void *, size_t);
void *memmove(void *, void *, size_t);
void *memset(void *, int, size_t);
char *strcat(char *, char *);
char *strchr(char *, int);
int strcmp(char *, char *);
int strcoll(char *, char *);
char *strcpy(char *, char *);
size_t strcspn(char *, char *);
char *strerror(int);
size_t strlen(char *);
char *strncat(char *, char *, size_t);
int strncmp(char *, char *, size_t);
char *strncpy(char *, char *, size_t);
char *strpbrk(char *, char *);
char *strrchr(char *, int);
size_t strspn(char *, char *);
char *strstr(char *, char *);
char *strtok(char *, char *);
size_t strxfrm(char *, char *, size_t);
int bcmp(void *, void *, size_t);
void bzero(void *, size_t);
int ffs(int);
char *-1;
void *memccpy(void *, void *, int, size_t);
char *rindex(char *, int);
int strcasecmp(char *, char *);
char *strdup(char *);
int strncasecmp(char *, char *, size_t);
char *strtok_r(char *, char *, char **);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>sys/ipc.h</TITLE>
<PARA>
</PARA>
<SCREEN>
</SCREEN>
</SECT2>
<SECT2>
<TITLE>sys/mman.h</TITLE>
<PARA>
</PARA>
<SCREEN>

int msync(void *, size_t, int);
int mlock(void *, size_t);
int mlockall(int);
void *mmap(void *, size_t, int, int, int, __off_t);
int mprotect(void *, size_t, int);
int munlock(void *, size_t);
int munlockall(void);
int munmap(void *, size_t);
void *mmap64(void *, size_t, int, int, int, __off64_t);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>sys/msg.h</TITLE>
<PARA>
</PARA>
<SCREEN>

int msgctl(int, int, msqid_ds *);
int msgget(int);
int msgrcv(int, void *, size_t, long, int);
int msgsnd(int, void *, size_t, int);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>sys/resource.h</TITLE>
<PARA>
</PARA>
<SCREEN>

int getpriority(enum, enum __priority_which, int);
int getrlimit64(enum, enum __rlimit_resource, rlimit64 *);
int setpriority(enum, enum __priority_which, int, int);
int setrlimit(enum, enum __rlimit_resource, rlimit *);
int getrlimit(enum, enum __rlimit_resource, rlimit *);
int getrusage(enum, enum __rusage_who, rusage *);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>sys/sem.h</TITLE>
<PARA>
</PARA>
<SCREEN>

int semctl(int, int, int, ...);
int semget(int, int);
int semop(int, sembuf *, unsigned int);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>sys/shm.h</TITLE>
<PARA>
</PARA>
<SCREEN>

void *shmat(int, void *, int);
int shmctl(int, int, shmid_ds *);
int shmdt(void *);
int shmget(size_t, int);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>sys/socket.h</TITLE>
<PARA>
</PARA>
<SCREEN>
typedef union {

    sockaddr *__sockaddr__;
    sockaddr_at *__sockaddr_at__;
    sockaddr_ax25 *__sockaddr_ax25__;
    sockaddr_dl *__sockaddr_dl__;
    sockaddr_eon *__sockaddr_eon__;
    sockaddr_in *__sockaddr_in__;
    sockaddr_in6 *__sockaddr_in6__;
    sockaddr_inarp *__sockaddr_inarp__;
    sockaddr_ipx *__sockaddr_ipx__;
    sockaddr_iso *__sockaddr_iso__;
    sockaddr_ns *__sockaddr_ns__;
    sockaddr_un *__sockaddr_un__;
    sockaddr_x25 *__sockaddr_x25__;
} __SOCKADDR_ARG;

typedef union {

    sockaddr *__sockaddr__;
    sockaddr_at *__sockaddr_at__;
    sockaddr_ax25 *__sockaddr_ax25__;
    sockaddr_dl *__sockaddr_dl__;
    sockaddr_eon *__sockaddr_eon__;
    sockaddr_in *__sockaddr_in__;
    sockaddr_in6 *__sockaddr_in6__;
    sockaddr_inarp *__sockaddr_inarp__;
    sockaddr_ipx *__sockaddr_ipx__;
    sockaddr_iso *__sockaddr_iso__;
    sockaddr_ns *__sockaddr_ns__;
    sockaddr_un *__sockaddr_un__;
    sockaddr_x25 *__sockaddr_x25__;
} __CONST_SOCKADDR_ARG;


int bind(int, __CONST_SOCKADDR_ARG, socklen_t);
int getsockname(int, __SOCKADDR_ARG, socklen_t *);
int listen(int, unsigned int);
int setsockopt(int, int, int, void *, socklen_t);
int accept(int, __SOCKADDR_ARG, socklen_t *);
int connect(int, __CONST_SOCKADDR_ARG, socklen_t);
int recv(int, void *, size_t, int);
int recvfrom(int, void *, size_t, int, __SOCKADDR_ARG, socklen_t *);
int recvmsg(int, msghdr *, int);
int send(int, void *, size_t, int);
int sendmsg(int, msghdr *, int);
int sendto(int, void *, size_t, int, __CONST_SOCKADDR_ARG, socklen_t);
int getpeername(int, __SOCKADDR_ARG, socklen_t *);
int getsockopt(int, int, int, void *, socklen_t *);
int shutdown(int, int);
int socket(int, int, int);
int socketpair(int, int, int, int);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>sys/stat.h</TITLE>
<PARA>
</PARA>
<SCREEN>

int __fxstat(int, int, stat *);
int __fxstat64(int, int, stat64 *);
int __lxstat(int, char *, stat *);
int __lxstat64(int, char *, stat64 *);
int __xmknod(int, char *, __mode_t, __dev_t *);
int __xstat(int, char *, stat *);
int __xstat64(int, char *, stat64 *);
int mkfifo(char *, __mode_t);
int chmod(char *, __mode_t);
int fchmod(int, __mode_t);
int mkdir(char *, __mode_t);
__mode_t umask(__mode_t);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>sys/times.h</TITLE>
<PARA>
</PARA>
<SCREEN>
</SCREEN>
</SECT2>
<SECT2>
<TITLE>sys/utsname.h</TITLE>
<PARA>
</PARA>
<SCREEN>

int uname(utsname *);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>sys/wait.h</TITLE>
<PARA>
</PARA>
<SCREEN>
typedef Unknown Type:"" unknown idtype_t;


int waitid(idtype_t, __id_t, siginfo_t *, int);
__pid_t wait(int *);
__pid_t waitpid(__pid_t, int *, int);
__pid_t wait3(int *, int, rusage *);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>termios.h</TITLE>
<PARA>
</PARA>
<SCREEN>

speed_t cfgetispeed(termios *);
speed_t cfgetospeed(termios *);
int cfsetispeed(termios *, speed_t);
int cfsetospeed(termios *, speed_t);
int tcflow(int, int);
int tcflush(int, int);
__pid_t tcgetsid(int);
int tcsendbreak(int, int);
int tcsetattr(int, int, termios *);
int tcdrain(int);
int tcgetattr(int, termios *);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>time.h</TITLE>
<PARA>
</PARA>
<SCREEN>
typedef Unknown Type:"" unknown clock_t;

typedef Unknown Type:"" unknown time_t;


char *asctime(tm *);
clock_t clock(void);
char *ctime(time_t *);
double difftime(time_t, time_t);
tm *getdate(char *);
int getdate_err;
tm *gmtime(time_t *);
tm *localtime(time_t *);
time_t mktime(tm *);
size_t strftime(char *, size_t, char *, tm *);
char *strptime(char *, char *, tm *);
time_t time(time_t *);
int nanosleep(timespec *, timespec *);
int daylight();
long timezone;
char *tzname();
void tzset(void);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>ulimit.h</TITLE>
<PARA>
</PARA>
<SCREEN>

long ulimit(int, ...);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>unistd.h</TITLE>
<PARA>
</PARA>
<SCREEN>
typedef Unknown Type:"" unknown ssize_t;


char **__environ;
__pid_t __getpgid(__pid_t);
void _exit(int);
int acct(char *);
unsigned int alarm(unsigned int);
int chown(char *, __uid_t, __gid_t);
int chroot(char *);
size_t confstr(int, char *, size_t);
char *ctermid(char *);
char *cuserid(char *);
int daemon(int, int);
int execl(char *, char *, ...);
int execle(char *, char *, ...);
int execlp(char *, char *, ...);
int execv(char *, char *);
int execvp(char *, char *);
int fdatasync(int);
int ftruncate64(int, __off64_t);
long gethostid(void);
char *getlogin(void);
__pid_t getpgrp(void);
__pid_t getsid(__pid_t);
char *getwd(char *);
int lockf(int, int, __off_t);
int lockf64(int, int, __off64_t);
int nice(int);
int rename(char *, char *);
int sethostid(long);
int sethostname(char *, size_t);
int setpgrp(void);
void swab(void *, void *, ssize_t);
int sync(void);
__pid_t tcgetpgrp(int);
int tcsetpgrp(int, __pid_t);
int truncate(char *, __off_t);
int truncate64(char *, __off64_t);
char *ttyname(int);
unsigned int ualarm(unsigned int, unsigned int);
void usleep(unsigned int);
int close(int);
int fsync(int);
__off_t lseek(int, __off_t, int);
int pause(void);
ssize_t read(int, void *, size_t);
ssize_t write(int, void *, size_t);
char *crypt(char *, char *);
void encrypt(char *, int);
void setkey(char *);
int access(char *, int);
int brk(void *);
int chdir(char *);
int dup(int);
int dup2(int, int);
int execve(char *, char *, char *);
int fchdir(int);
int fchown(int, __uid_t, __gid_t);
__pid_t fork(void);
__gid_t getegid(void);
__uid_t geteuid(void);
__gid_t getgid(void);
int getgroups(int, __gid_t);
int gethostname(char *, size_t);
__pid_t getpgid(__pid_t);
__pid_t getpid(void);
__uid_t getuid(void);
int lchown(char *, __uid_t, __gid_t);
int link(char *, char *);
long pathconf(char *, int);
int pipe(int);
int readlink(char *, char *, size_t);
int rmdir(char *);
void *sbrk(ptrdiff_t);
int setgid(__gid_t);
int setpgid(__pid_t, __pid_t);
int setregid(__gid_t, __gid_t);
int setreuid(__uid_t, __uid_t);
__pid_t setsid(void);
int setuid(__uid_t);
unsigned int sleep(unsigned int);
int symlink(char *, char *);
long sysconf(int);
int unlink(char *);
__pid_t vfork(void);
ssize_t pread(int, void *, size_t, __off_t);
ssize_t pwrite(int, void *, size_t, __off_t);
long fpathconf(int, int);
int ftruncate(int, __off_t);
char *getcwd(char *, size_t);
int getpagesize(void);
__pid_t getppid(void);
int isatty(int);
__off64_t lseek64(int, __off64_t, int);
ssize_t pwrite64(int, void *, size_t, __off64_t);
int ttyname_r(int, char *, size_t);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>utime.h</TITLE>
<PARA>
</PARA>
<SCREEN>

int utime(char *, utimbuf *);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>wctype.h</TITLE>
<PARA>
</PARA>
<SCREEN>
typedef unsigned long wctype_t;

typedef *Unknown Type:"" unknown __int32_t * wctrans_t;


wint_t towlower(wint_t);
wint_t towupper(wint_t);
wctrans_t wctrans(char *);
int iswalnum(wint_t);
int iswalpha(wint_t);
int iswcntrl(wint_t);
int iswctype(wint_t, wctype_t);
int iswdigit(wint_t);
int iswgraph(wint_t);
int iswlower(wint_t);
int iswprint(wint_t);
int iswpunct(wint_t);
int iswspace(wint_t);
int iswupper(wint_t);
int iswxdigit(wint_t);
wctype_t wctype(char *);
wint_t towctrans(wint_t, wctrans_t);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>wordexp.h</TITLE>
<PARA>
</PARA>
<SCREEN>

int wordexp(char *, wordexp_t *, int);
void wordfree(wordexp_t *);
</SCREEN>
</SECT2>
</SECT1>
<!-- End of text generated from database -->
<!--    by $Header: /cvsroot/lsb/spec/mklibspec,v 1.20 2001/04/25 17:38:13 anderson Exp 0 -->
