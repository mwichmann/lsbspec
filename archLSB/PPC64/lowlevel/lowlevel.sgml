<PART ID="lowlevel">
<TITLE>Low Level System Information</TITLE>

<CHAPTER id=machineinterface>
<TITLE>Machine Interface</TITLE>

<SECT1 ID="processorarch">
<TITLE>Processor Architecture</TITLE>
<PARA>

The PowerPC Architecture is specified by the following documents:

<ITEMIZEDLIST MARK=bullet>
<LISTITEM><PARA>
<XREF LINKEND="std.PPC64.ABI">
</PARA></LISTITEM>
<LISTITEM><PARA>
<XREF LINKEND="std.PPC64.Arch">
</PARA></LISTITEM>
<LISTITEM><PARA>
<XREF LINKEND="std.PPC64.Arch.Chg1">
</PARA></LISTITEM>
<LISTITEM><PARA>
<XREF LINKEND="std.PPC64.Arch.Chg2">
</PARA></LISTITEM>
<LISTITEM><PARA>
<XREF LINKEND="std.PPC64.Arch.Chg3">
</PARA></LISTITEM>
</ITEMIZEDLIST>
</PARA>
<PARA>

Only the features of the PowerPC processor instruction set may be assumed
to be present. An application is responsible for determining
if any additional instruction set features are available before
using those additional features. If a feature is not present, then the
application may not use it.

</PARA>
<PARA>
An implementation must support the 64-bit computation mode as
described in <XREF LINKEND="std.PPC64.Arch">. Conforming applications
shall not use instructions provided only for the 32-bit mode.
</PARA>
<PARA>
Applications conforming to this specification must provide feedback to the
user if a feature that is required for correct execution of the application
is not present. Applications conforming to this specification should attempt
to execute in a diminished capacity if a required feature is not present.
</PARA>
<PARA>
This specification does not provide any performance guarantees of a conforming
system. A system conforming to this specification may be implemented in either
hardware or software.
</PARA>

</SECT1>

<SECT1 ID="datarepresentation">
<TITLE>Data Representation</TITLE>
<PARA>

LSB-conforming applications shall use the data representation as
defined in Chapter 3 of the <XREF LINKEND="std.PPC64.ABI">.

</PARA>

<SECT2 ID="byteordering">
<TITLE>Byte Ordering</TITLE>
<PARA>
LSB-conforming applications shall use big-endian byte ordering.
LSB-conforming implementations may also support little-endian applications.
</PARA>
</SECT2>
<SECT2 ID="fundamentaltyes">
<TITLE>Fundamental Types</TITLE>
<PARA>

</PARA>

<PARA>
LSB-conforming applications shall not use the long double fundamental
type.
</PARA>


</SECT2>
<SECT2 ID="aggregatesandunions">
<TITLE>Aggregates and Unions</TITLE>
<PARA></PARA>
</SECT2>

<SECT2 ID="bitfields">
<TITLE>Bit Fields</TITLE>
<PARA></PARA>
</SECT2>
</SECT1>

</CHAPTER>

<CHAPTER id=callingsequence>
<TITLE>Function Calling Sequence</TITLE>
<PARA>
LSB-conforming applications shall use the function calling sequence as defined
in Chapter 3 of the <XREF LINKEND="std.PPC64.ABI">.
</PARA>

<SECT1 ID="cpuregisters">
<TITLE>CPU Registers</TITLE>
<PARA>
</PARA>
</SECT1>

<SECT1 ID="fpuregisters">
<TITLE>Floating Point Registers</TITLE>
<PARA>
</PARA>
</SECT1>

<SECT1 ID="stackframe">
<TITLE>Stack Frame</TITLE>
<PARA>
</PARA>
</SECT1>

<SECT1 ID="arguments">
<TITLE>Arguments</TITLE>
<PARA>
</PARA>

</SECT1>

<SECT1 ID="returnvalues">
<TITLE>Return Values</TITLE>
<PARA>
</PARA>
</SECT1>

</CHAPTER>

<CHAPTER id=osinterface>
<TITLE>Operating System Interface</TITLE>
<PARA>
LSB-conforming applications shall use the Operating System Interfaces
as defined in Chapter 3 of the <XREF LINKEND="std.PPC64.ABI">.
</PARA>

<SECT1 ID="processorexecutionmode">
<TITLE>Processor Execution Mode</TITLE>
<PARA>
</PARA>
</SECT1>

<SECT1 ID="exceptioninterface">
<TITLE>Exception Interface</TITLE>
<PARA>
</PARA>
<SECT2 ID="hardwareexceptiontypes">
<TITLE>Hardware Exception Types</TITLE>
<PARA>
</PARA>
</SECT2>
<SECT2 ID="softwaretraptypes">
<TITLE>Software Trap Types</TITLE>
<PARA>
</PARA>
</SECT2>
<SECT2 ID="debuggingsupport">
<TITLE>Debugging Support</TITLE>
<PARA>
</PARA>
</SECT2>
<SECT2 ID="processstartup">
<TITLE>Process Startup</TITLE>
<PARA>
</PARA>
</SECT2>
</SECT1>

<SECT1 ID="signaldelivery">
<TITLE>Signal Delivery</TITLE>
<PARA>
</PARA>
<SECT2 ID="signalhandlerinterface">
<TITLE>Signal Handler Interface</TITLE>
<PARA>
</PARA>
</SECT2>
</SECT1>

</CHAPTER>

<CHAPTER id=processinitialization>
<TITLE>Process Initialization</TITLE>
<PARA>
LSB-conforming applications shall use the Operating System Interfaces
as defined in Chapter 3 of the <XREF LINKEND="std.PPC64.ABI">.
</PARA>

<SECT1 ID="specialregisters">
<TITLE>Special Registers</TITLE>
<PARA>

Contrary to what is stated in the Registers part of Chapter 3 of the
<XREF LINKEND="std.PPC64.ABI"> there are no values set in registers
r3, r4, r5, r6 and r7. Instead the values specified to appear in all
of those registers except r7 are placed on the stack. The value to be
placed into register r7, the termination function pointer is not
passed to the process.

</PARA>

</SECT1>

<SECT1 ID="processstack">
<TITLE>Process Stack (on entry)</TITLE>
<PARA>

</PARA>
</SECT1>

<SECT1 ID="auxiliaryvector">
<TITLE>Auxiliary Vector</TITLE>

<PARA>
In addition to the types defined in Chapter 3 of the <XREF
LINKEND="std.PPC64.ABI"> the following are also supported:

<TABLE>
<TITLE>Extra Auxiliary Types</TITLE>
<TGROUP COLS=3>
<THEAD>
  <ROW>
    <ENTRY>Name</ENTRY>
    <ENTRY>Value</ENTRY>
    <ENTRY>Comment</ENTRY>
  </ROW>
</THEAD>
<TBODY>
  <ROW>
  <ENTRY>AT_NOTELF</ENTRY>
  <ENTRY>10</ENTRY>
  <ENTRY>Program is not ELF</ENTRY>
  </ROW>

  <ROW>
  <ENTRY>AT_UID</ENTRY>
  <ENTRY>11</ENTRY>
  <ENTRY>Real uid</ENTRY>
  </ROW>

  <ROW>
  <ENTRY>AT_EUID</ENTRY>
  <ENTRY>12</ENTRY>
  <ENTRY>Effective uid</ENTRY>
  </ROW>

  <ROW>
  <ENTRY>AT_GID</ENTRY>
  <ENTRY>13</ENTRY>
  <ENTRY>Real gid</ENTRY>
  </ROW>

  <ROW>
  <ENTRY>AT_EGID</ENTRY>
  <ENTRY>14</ENTRY>
  <ENTRY>Effective gid</ENTRY>
  </ROW>

  <ROW>
  <ENTRY>AT_PLATFORM</ENTRY>
  <ENTRY>15</ENTRY>
  <ENTRY>String identifying CPU for optimizations</ENTRY>
  </ROW>

  <ROW>
  <ENTRY>AT_HWCAP</ENTRY>
  <ENTRY>16</ENTRY>
  <ENTRY>Arch dependent hints at CPU capabilities</ENTRY>
  </ROW>

  <ROW>
  <ENTRY>AT_CLKTCK</ENTRY>
  <ENTRY>17</ENTRY>
  <ENTRY>Frequency at which times() increments</ENTRY>
  </ROW>

  <ROW>
  <ENTRY>AT_DCACHEBSIZE</ENTRY>
  <ENTRY>19</ENTRY>
  <ENTRY>The a_val member of this entry gives the data cache block
  size for processors on the system on which this program is
  running. If the processors have unified caches, AT_DCACHEBSIZE is
  the same as AT_UCACHEBSIZE
  </ENTRY>
  </ROW>

  <ROW>
  <ENTRY>AT_ICACHEBSIZE</ENTRY>
  <ENTRY>20</ENTRY>
  <ENTRY>The a_val member of this entyr gives the instruction cache
  block size for processors on the system on which this program is
  running. If the processors have unified caches, AT_DCACHEBSIZE is
  the same as AT_UCACHEBSIZE.</ENTRY>
  </ROW>

  <ROW>
  <ENTRY>AT_UCACHEBSIZE</ENTRY>
  <ENTRY>21</ENTRY>
  <ENTRY>The a_val member of this entry is zero if the processors on
  the system on which this program is running do not have a unified
  instruction and data cache. Otherwise it gives the cache block
  size.</ENTRY>
  </ROW>

  <ROW>
  <ENTRY>AT_IGNOREPPC</ENTRY>
  <ENTRY>22</ENTRY>
  <ENTRY>All entries of this type should be ignored.</ENTRY>
  </ROW>


</TBODY>
</TGROUP>
</TABLE>
</PARA>

<PARA>
The last three entries in the table above override the values
specified in <XREF LINKEND="std.PPC64.ABI">.

</PARA>
</SECT1>

<SECT1 ID="environment">
<TITLE>Environment</TITLE>
<PARA>
</PARA>
</SECT1>

</CHAPTER>

<CHAPTER id=codingexamples>
<TITLE>Coding Examples</TITLE>

<PARA>
LSB-conforming applications may implement fundamental operations using the
Coding Examples as defined in Chapter 3 of the <XREF LINKEND="std.PPC64.ABI">.
</PARA>

<SECT1 ID="codemodeloverview">
<TITLE>Code Model Overview/Architecture Constraints</TITLE>
<PARA>
</PARA>
</SECT1>

<SECT1 ID="picprologue">
<TITLE>Position-Independent Function Prologue</TITLE>
<PARA>
</PARA>
</SECT1>

<SECT1 ID="dataobjects">
<TITLE>Data Objects</TITLE>
<PARA>
</PARA>
<SECT2 ID="dataobjectsabsload">
<TITLE>Absolute Load & Store</TITLE>
<PARA>
</PARA>
</SECT2>
<SECT2 ID="dataobjectsrelload">
<TITLE>Position Relative Load & Store</TITLE>
<PARA>
</PARA>
</SECT2>
</SECT1>

<SECT1 ID="functioncalls">
<TITLE>Function Calls</TITLE>
<PARA>
</PARA>
<SECT2 ID="funccalldirect">
<TITLE>Absolute Direct Function Call</TITLE>
<PARA>
</PARA>
</SECT2>
<SECT2 ID="funccallindirect">
<TITLE>Absolute Indirect Function Call</TITLE>
<PARA>
</PARA>
</SECT2>
<SECT2 ID="funccallpicdirect">
<TITLE>Position-Independent Direct Function Call</TITLE>
<PARA>
</PARA>
</SECT2>
<SECT2 ID="funccallpicindirect">
<TITLE>Position-Independent Indirect Function Call</TITLE>
<PARA>
</PARA>
</SECT2>
</SECT1>

<SECT1 ID="branching">
<TITLE>Branching</TITLE>
<PARA>
</PARA>
<SECT2 ID="branchinstruction">
<TITLE>Branch Instruction</TITLE>
<PARA>
</PARA>
</SECT2>
<SECT2 ID="absoluteswitchcode">
<TITLE>Absolute switch() code</TITLE>
<PARA>
</PARA>
</SECT2>
<SECT2 ID="picswitchcode">
<TITLE>Position-Independent switch() code</TITLE>
<PARA>
</PARA>
</SECT2>
</SECT1>

</CHAPTER>

<CHAPTER id=cstackframe>
<TITLE>C Stack Frame</TITLE>

<SECT1 ID="variablearglist">
<TITLE>Variable Argument List</TITLE>
<PARA>
</PARA>
</SECT1>

<SECT1 ID="dynamicstackalloc">
<TITLE>Dynamic Allocation of Stack Space</TITLE>
<PARA>
</PARA>
</SECT1>

</CHAPTER>

<CHAPTER id=debuginfo>
<TITLE>Debug Information</TITLE>

<PARA>
The LSB does not currently specify the format of Debug information.
</PARA>

</CHAPTER>

</PART>
