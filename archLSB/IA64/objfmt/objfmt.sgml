<PART ID="tocobjformat">
<TITLE>Object Format</TITLE>
<PARTINTRO>
<PARA>
LSB-conforming implementations shall support an object file , called
Executable and Linking Format (ELF) as defined by the 
<XREF LINKEND="std.gABI.41">,
<XREF LINKEND="std.IA64.ABI">
and as supplemented by the Linux Standard
Base Specification and this document.
</PARA>
</PARTINTRO>

<CHAPTER ID=elfheader>
<TITLE>ELF Header</TITLE>
<SECT1 ID="machineinfo">
<TITLE>Machine Information</TITLE>
<PARA>
LSB-conforming applications shall use the Machine Information as defined in
<XREF LINKEND="std.IA64.ABI">,
Chapter 4.
Implementations shall support the LP64 model. It is unspecified whether or
not the ILP32 model shall also be supported.
</PARA>
<SECT2 ID="mifileclass">
<TITLE>File Class</TITLE>
<PARA>
For LP64 relocatable objects, the file class value in
<literal>e_ident[EI_CLASS]</literal> may be either
<SystemItem class="Constant">ELFCLASS32</SystemItem> or 
<SystemItem class="Constant">ELFCLASS64</SystemItem>,
and a conforming linker must be able to process
either or both classes.
</PARA>
</SECT2>
<SECT2 ID="midataencoding">
<TITLE>Data Encoding</TITLE>
<PARA>
Implementations shall support 2's complement, little endian data encoding.
The data encoding value in
<literal>e_ident[EI_DATA]</literal> shall contain the value
<SystemItem class="Constant">ELFDATA2LSB</SystemItem>.
</PARA>
</SECT2>
<SECT2 ID="miosidentification">
<TITLE>OS Identification</TITLE>
<PARA>
The OS Identification field 
<literal>e_ident[EI_OSABI]</literal> shall contain the value 
<SystemItem class="Constant">ELFOSABI_LINUX</SystemItem>.
</PARA>
</SECT2>
<SECT2 ID="miprocessorident">
<TITLE>Processor Identification</TITLE>
<PARA>
The processor identification value held in <literal>e_machine</literal>
shall contain the value 
<SystemItem class="Constant">EM_IA_64</SystemItem>.
</PARA>
</SECT2>
<SECT2 ID="miprocessorspecialflags">
<TITLE>Processor Specific Flags</TITLE>
<PARA>
The flags field <literal>e_flags</literal> shall be
as described in
<XREF LINKEND="std.IA64.ABI">,
Chapter 4.1.1.6.
</PARA>
<PARA>
The following additional processor-specific flags are defined:
</PARA>
<TABLE>
<TITLE>Additional Processor-Specific Flags</TITLE>
<TGROUP COLS=2>
<THEAD>
<ROW>
<ENTRY ALIGN=center>Name</ENTRY>
<ENTRY ALIGN=center>Value</ENTRY>
</ROW>
</THEAD>
<TBODY>
<ROW>
<ENTRY>EF_IA_64_LINUX_EXECUTABLE_STACK</ENTRY>
<ENTRY>0x00000001</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<VARIABLELIST>
<VARLISTENTRY>
<TERM>EF_IA_64_LINUX_EXECUTABLE_STACK</TERM>
<LISTITEM><PARA>
The stack and heap sections are executable.  If this flag
is not set, code can not be executed from the stack or heap.</PARA>
</LISTITEM>
</VARLISTENTRY>
</VARIABLELIST>
</SECT2>
</SECT1>
</CHAPTER>

<CHAPTER ID=sections>
<TITLE>Sections</TITLE>
<PARA>
The &itanium; architecture defines two processor-specific
section types, as described in
<XREF LINKEND="std.IA64.ABI">,
Chapter 4.
</PARA>
<SECT1 ID="specialsections">
<TITLE>Special Sections</TITLE>
<PARA>
The following sections are defined in the 
<XREF LINKEND="std.IA64.ABI">.
<!-- Start of text generated from database -->
<!-- generated from the LSB specification database -->
<!--    by $Header: /cvsroot/lsb/lsbspec/mksectiontable,v 1.10 2002/06/20 20:35:42 anderson Exp 0 -->
<!--    at Tue Aug 12 12:06:35 2003 -->
<TABLE>
<TITLE>ELF Special Sections</TITLE>
<TGROUP COLS=3>
<THEAD>
<ROW>
<ENTRY ALIGN=center>Name</ENTRY><ENTRY ALIGN=center>Type</ENTRY><ENTRY ALIGN=center>Attributes</ENTRY></ROW>
</THEAD>
<TBODY>
<ROW><ENTRY>.got</ENTRY><ENTRY>SHT_PROGBITS</ENTRY><ENTRY>SHF_ALLOC+SHF_WRITE+SHF_IA_64_SHORT</ENTRY></ROW>
<ROW><ENTRY>.IA_64.archext</ENTRY><ENTRY>SHT_IA_64_EXT</ENTRY><ENTRY>0</ENTRY></ROW>
<ROW><ENTRY>.IA_64.pltoff</ENTRY><ENTRY>SHT_PROGBITS</ENTRY><ENTRY>SHF_ALLOC+SHF_WRITE+SHF_IA_64_SHORT</ENTRY></ROW>
<ROW><ENTRY>.IA_64.unwind</ENTRY><ENTRY>SHT_IA_64_UNWIND</ENTRY><ENTRY>SHF_ALLOC+SHF_LINK_ORDER</ENTRY></ROW>
<ROW><ENTRY>.IA_64.unwind_info</ENTRY><ENTRY>SHT_PROGBITS</ENTRY><ENTRY>SHF_ALLOC</ENTRY></ROW>
<ROW><ENTRY>.plt</ENTRY><ENTRY>SHT_PROGBITS</ENTRY><ENTRY>SHF_ALLOC+SHF_EXECINSTR</ENTRY></ROW>
<ROW><ENTRY>.sbss</ENTRY><ENTRY>SHT_NOBITS</ENTRY><ENTRY>SHF_ALLOC+SHF_WRITE+SHF_IA_64_SHORT</ENTRY></ROW>
<ROW><ENTRY>.sdata</ENTRY><ENTRY>SHT_PROGBITS</ENTRY><ENTRY>SHF_ALLOC+SHF_WRITE+SHF_IA_64_SHORT</ENTRY></ROW>
<ROW><ENTRY>.sdata1</ENTRY><ENTRY>SHT_PROGBITS</ENTRY><ENTRY>SHF_ALLOC+SHF_WRITE+SHF_IA_64_SHORT</ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
<VARIABLELIST>
<VARLISTENTRY><TERM>.got</TERM><LISTITEM><PARA>This section holds the Global Offset Table. See `Coding Examples' in Chapter 3, `Special Sections' in Chapter 4, and `Global Offset Table' in Chapter 5 of the processor supplement for more information.</PARA></LISTITEM></VARLISTENTRY>
<VARLISTENTRY><TERM>.IA_64.archext</TERM><LISTITEM><PARA>This section holds product-specific extension bits. The link editor will perform a logical "or" of the extension bits of each object when creating an executable so that it creates only a single .IA_64.archext section in the
executable.</PARA></LISTITEM></VARLISTENTRY>
<VARLISTENTRY><TERM>.IA_64.pltoff</TERM><LISTITEM><PARA>This section holds local function descriptor entries.</PARA></LISTITEM></VARLISTENTRY>
<VARLISTENTRY><TERM>.IA_64.unwind</TERM><LISTITEM><PARA>This section holds the unwind function table. The contents are described in the Intel (r) Itanium (tm) Processor Specific ABI.</PARA></LISTITEM></VARLISTENTRY>
<VARLISTENTRY><TERM>.IA_64.unwind_info</TERM><LISTITEM><PARA>This section holds stack unwind and and exception handling information. The exception handling information is programming language specific, and is unspecified.</PARA></LISTITEM></VARLISTENTRY>
<VARLISTENTRY><TERM>.plt</TERM><LISTITEM><PARA>This section holds the Procedure Linkage Table.</PARA></LISTITEM></VARLISTENTRY>
<VARLISTENTRY><TERM>.sbss</TERM><LISTITEM><PARA>This section holds uninitialized data that contribute to the program''s memory image. Data objects contained in this section are recommended to be eight bytes or less in size. The system initializes the data with zeroes when the program begins to run. The section occupies no file space, as indicated by the section type SHT_NOBITS. The .sbss section is placed so it may be accessed using short direct addressing (22 bit offset from gp).</PARA></LISTITEM></VARLISTENTRY>
<VARLISTENTRY><TERM>.sdata</TERM><LISTITEM><PARA>This section and the .sdata1 section hold initialized data that contribute to the program''s memory image. Data objects contained in this section are recommended to be eight bytes or less in size. The .sdata and .sdata1 sections are placed so they may be accessed using short direct addressing (22 bit offset from gp).</PARA></LISTITEM></VARLISTENTRY>
<VARLISTENTRY><TERM>.sdata1</TERM><LISTITEM><PARA>See .sdata.</PARA></LISTITEM></VARLISTENTRY>
</VARIABLELIST>
<!-- End of text generated from database -->
<!--    by $Header: /cvsroot/lsb/lsbspec/mksectiontable,v 1.10 2002/06/20 20:35:42 anderson Exp 0 -->

</PARA>
</SECT1>
<SECT1 ID="linuxspecial">
<TITLE>Linux Special Sections</TITLE>
<PARA>
The following Linux IA-64 specific sections are defined here.
<!-- Start of text generated from database -->
<!-- generated from the LSB specification database -->
<!--    by $Header: /cvsroot/lsb/lsbspec/mksectiontable,v 1.10 2002/06/20 20:35:42 anderson Exp 0 -->
<!--    at Tue Aug 12 12:06:35 2003 -->
<TABLE>
<TITLE>Additional Special Sections</TITLE>
<TGROUP COLS=3>
<THEAD>
<ROW>
<ENTRY ALIGN=center>Name</ENTRY><ENTRY ALIGN=center>Type</ENTRY><ENTRY ALIGN=center>Attributes</ENTRY></ROW>
</THEAD>
<TBODY>
<ROW><ENTRY>.opd</ENTRY><ENTRY>SHT_PROGBITS</ENTRY><ENTRY>SHF_ALLOC+SHF_WRITE</ENTRY></ROW>
<ROW><ENTRY>.rela.dyn</ENTRY><ENTRY>SHT_RELA</ENTRY><ENTRY>SHF_ALLOC</ENTRY></ROW>
<ROW><ENTRY>.rela.IA_64.pltoff</ENTRY><ENTRY>SHT_RELA</ENTRY><ENTRY>SHF_ALLOC</ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
<VARIABLELIST>
<VARLISTENTRY><TERM>.opd</TERM><LISTITEM><PARA>This section holds function descriptors</PARA></LISTITEM></VARLISTENTRY>
<VARLISTENTRY><TERM>.rela.dyn</TERM><LISTITEM><PARA>This section holds relocation information, as described in `Relocation'. These relocations are applied to the .dyn section.</PARA></LISTITEM></VARLISTENTRY>
<VARLISTENTRY><TERM>.rela.IA_64.pltoff</TERM><LISTITEM><PARA>This section holds relocation information, as described in `Relocation'. These relocations are applied to the .IA_64.pltoff section.</PARA></LISTITEM></VARLISTENTRY>
</VARIABLELIST>
<!-- End of text generated from database -->
<!--    by $Header: /cvsroot/lsb/lsbspec/mksectiontable,v 1.10 2002/06/20 20:35:42 anderson Exp 0 -->

</PARA>
</SECT1>

<SECT1 ID="sectiontypes">
<TITLE>Section Types</TITLE>
<PARA>
Section Types are described in the 
<XREF LINKEND="std.IA64.ABI">,
Chapter 4.2.
LSB conforming implementations are not
required to use any sections in the range from
<SystemItem class="Constant">SHT_IA_64_LOPSREG</SystemItem> to
<SystemItem class="Constant">SHT_IA_64_HIPSREG</SystemItem>.
Additionally, LSB conforming implementations are not required
to support the
<SystemItem class="Constant">SHT_IA_64_PRIORITY_INIT</SystemItem>
section, beyond the gABI requirements for the handling of
unrecognized section types, linking them into a contiguous section
in the object file created by the static linker.
</PARA>
</SECT1>

<SECT1 ID="sectionattribflags">
<TITLE>Section Attribute Flags</TITLE>
<PARA>
See
<XREF LINKEND="std.IA64.ABI">,
Chapter 4.2.2.
</PARA>
</SECT1>

<SECT1 ID="specialsectiontypes">
<TITLE>Special Section Types</TITLE>
<PARA>
See
<XREF LINKEND="std.IA64.ABI">,
Chapter 4.2.3.
</PARA>
</SECT1>

</CHAPTER>

<CHAPTER ID=symboltable>
<TITLE>Symbol Table</TITLE>

<PARA>
If an executable file contains a reference to a function defined in
one of its associated shared objects, the symbol table section for
that file shall contain an entry for that symbol.  The 
<SystemItem class="Constant">st_shndx</SystemItem> member of that
symbol table
entry contains <SystemItem class="Constant">SHN_UNDEF</SystemItem>.
This signals to the dynamic linker that the symbol definition for that
function is not contained in the executable file itself.  If that symbol
has been allocated a procedure linkage table entry in the executable file,
and the <SystemItem class="Constant">st_value</SystemItem> member for
that symbol table entry is non-zero, the value shall contain the virtual
address of the first instruction of that procedure linkage table entry.
Otherwise, the <SystemItem class="Constant"> st_value</SystemItem> member
contains zero.  This procedure linkage table entry address is used by
the dynamic linker in resolving references to the address of the function.
<NOTE>
<PARA>
Need to add something here about st_info and st_other ...
</PARA>
</NOTE>
</PARA>

</CHAPTER>

<CHAPTER ID=relocation>
<TITLE>Relocation</TITLE>

<PARA>
LSB-conforming applications shall use Relocations as defined in
<XREF LINKEND="std.IA64.ABI">,
Chapter 4.3.
</PARA>

<SECT1 ID="relocationtypes">
<TITLE>Relocation Types</TITLE>
<PARA>
See
<XREF LINKEND="std.IA64.ABI">,
Chapter 4.3.
</PARA>
</SECT1>

</CHAPTER>

</PART>
