<APPENDIX ID=app-B>
<TITLE>Build Environment</TITLE>

<SECT1 ID="buildenvintro">
<TITLE>Introduction</TITLE>
<PARA>
This section is <emphasis>informative,</emphasis> and carries no
<emphasis>normative</emphasis> requirements on the IA64 Application
Binary Interface.  The interfaces described here should be available in
an IA64 LSB Build Environment.  An LSB Build Environment is a platform
on which LSB conforming applications can be built from source code.
Platforms providing an LSB Build Environment need not provide an LSB
Runtime Environment.
</PARA>
</SECT1>

<SECT1 ID="devenv">
<TITLE>Build Environment</TITLE>
<PARA>
A conforming LSB Build Environment should provide a compiler
capable of producing objects that conform to this standard.
</PARA>
<PARA>
Such a compiler
should provide the following predefined symbols, pre-processor
assertions, and compiler pragmas.
</PARA>
<SECT2 ID=predefinedsymbols>
<TITLE>Pre-Defined Preprocessor Symbols</TITLE>
<PARA>
<TABLE Frame=all>
<TITLE>Pre-Defined Preprocessor Symbols</TITLE>
<TGROUP COLS=2 align=left>
<COLSPEC Colname=Symbol Colwidth=1in>
<COLSPEC Colname=Desc Colwidth=5in>
<THEAD>
 <ROW>
  <ENTRY>Symbol</ENTRY>
  <ENTRY>Description</ENTRY>
 </ROW>
</THEAD>
<TBODY>
 <ROW>
  <ENTRY><CONSTANT>__ia64</CONSTANT></ENTRY>
  <ENTRY>This symbol should be used when testing for the target
  architecture at compile time. The initial value shall be 1. Further
  information on the architecture can be determined from the ELF header
  flags.</ENTRY>
 </ROW>
 <ROW>
  <ENTRY><CONSTANT>_LP64</CONSTANT></ENTRY>
  <ENTRY>Value is defined as 1.
  The architecture supports 64 bit longs, long longs, and pointers.
  Integers are 32 bit.</ENTRY>
 </ROW>
</TBODY>
</TGROUP>
</TABLE>
</PARA>
<NOTE>
<PARA>
The <command>gcc</command> compiler currently pre-defines
the symbol <CONSTANT>__LP64__</CONSTANT>, but not the symbol
<CONSTANT>_LP64</CONSTANT>. The gcc team are aware of this deficiency.
</PARA>
</NOTE>
</SECT2>
<SECT2 ID=predefinedassertions>
<TITLE>Pre-Defined Preprocessor Assertions</TITLE>
<PARA>
Preprocessor assertions are deprecated, and conforming applications should not
require any preprocessor assertion support.
LSB Conforming Build Environments are not required to provide any predefined
preprocessor assertions.
</PARA>
<NOTE>
<PARA>
The 
<XREF LINKEND="std.IA64.ABI">
requires preprocessor assertion support. However, this feature
is deprecated in some compilers (most notably <command>gcc</command>),
and applications should not use it.
</PARA>
</NOTE>
</SECT2>
<SECT2 ID="compilerpragmas">
<TITLE>Compiler Pragmas</TITLE>
<PARA>
The <XREF LINKEND="std.IA64.ABI">, chapter 7.2.3, defines a number
of compiler pragmas specific to the Intel IA64 compiler. These pragmas
are not required to be supported by other compilers.
</PARA>
</SECT2>
</SECT1>

<SECT1 ID="ILP32ABI">
<TITLE>ILP32 ABI</TITLE>
<PARA>
Support for the IA32/ILP32 ABI is optional. See
<XREF LINKEND="std.IA64.ABI"> Chapter 7.3.
</PARA>
</SECT1>

<SECT1 ID="synchronizationprims">
<TITLE>Synchronization Primitives</TITLE>
<PARA>
The synchronization primitives listed below should be available
to applications in the LSB Build Environment for IA64.
These intrinsic functions need not be provided in any system library,
and the compiler may treat these as inline functions in all cases.
See <XREF LINKEND="std.IA64.ABI">, Chapter 7.4 for details.

<TABLE frame=all>
<TITLE>Intrinsic Functions</TITLE>
<TGROUP COLS=2 align=left>
<COLSPEC Colname=Symbol Colwidth=1in>
<COLSPEC Colname=Desc Colwidth=5in>
<THEAD>
 <ROW>
  <ENTRY>Symbol</ENTRY>
  <ENTRY>Description</ENTRY>
 </ROW>
</THEAD>
<TBODY>
 <ROW>

   <ENTRY><CONSTANT>__sync_fetch_and_add</CONSTANT></ENTRY>
   <ENTRY>Atomically add a value to a referenced location and return the previous value</ENTRY>
 </ROW>
 <ROW>
   <ENTRY><CONSTANT>__sync_fetch_and_sub</CONSTANT></ENTRY>
   <ENTRY>Atomically subtract a value from a referenced location and return the previous value</ENTRY>
 </ROW>
 <ROW>
   <ENTRY><CONSTANT>__sync_fetch_and_or</CONSTANT></ENTRY>
   <ENTRY>Atomically bitwise or a value with a referenced location and return the previous value</ENTRY>
 </ROW>
 <ROW>
   <ENTRY><CONSTANT>__sync_fetch_and_and</CONSTANT></ENTRY>
   <ENTRY>Atomically bitwise and a value with a referenced location and return the previous value</ENTRY>
 </ROW>
 <ROW>
   <ENTRY><CONSTANT>__sync_fetch_and_xor</CONSTANT></ENTRY>
   <ENTRY>Atomically bitwise exclusive or a value with a referenced location and return the previous value</ENTRY>
 </ROW>
 <ROW>
   <ENTRY><CONSTANT>__sync_fetch_and_nand</CONSTANT></ENTRY>
   <ENTRY>Atomically bitwise not-and a value with a referenced location and return the previous value</ENTRY>
 </ROW>
 <ROW>
   <ENTRY><CONSTANT>__sync_add_and_fetch</CONSTANT></ENTRY>
   <ENTRY>Atomically add a value to a referenced location and return the new value</ENTRY>
 </ROW>
 <ROW>
   <ENTRY><CONSTANT>__sync_sub_and_fetch</CONSTANT></ENTRY>
   <ENTRY>Atomically subtract a value from a referenced location and return the new value</ENTRY>
 </ROW>
 <ROW>
   <ENTRY><CONSTANT>__sync_or_and_fetch</CONSTANT></ENTRY>
   <ENTRY>Atomically bitwise or a value with a referenced location and return the new value</ENTRY>
 </ROW>
 <ROW>
   <ENTRY><CONSTANT>__sync_and_and_fetch</CONSTANT></ENTRY>
   <ENTRY>Atomically bitwise and a value with a referenced location and return the new value</ENTRY>
 </ROW>
 <ROW>
   <ENTRY><CONSTANT>__sync_xor_and_fetch</CONSTANT></ENTRY>
   <ENTRY>Atomically bitwise exclusive or a value with a referenced location and return the new value</ENTRY>
 </ROW>
 <ROW>
   <ENTRY><CONSTANT>__sync_nand_and_fetch</CONSTANT></ENTRY>
   <ENTRY>Atomically bitwise not-and a value with a referenced location and return the new value</ENTRY>
 </ROW>
 <ROW>
   <ENTRY><CONSTANT>__sync_bool_compare_and_swap</CONSTANT></ENTRY>
   <ENTRY>Atomically compare a referenced location with a given value. If equal, replace the contents of the location with a new value, and return 1 (true), otherwise return 0 (false).</ENTRY>
 </ROW>
 <ROW>
   <ENTRY><CONSTANT>__sync_val_compare_and_swap</CONSTANT></ENTRY>
   <ENTRY>Atomically compare a referenced location with a given value. If equal, replace the contents of the location with a new value. Return the resulting value.</ENTRY>
 </ROW>
 <ROW>
   <ENTRY><CONSTANT>__sync_synchronize</CONSTANT></ENTRY>
   <ENTRY>A synchronization point.</ENTRY>
 </ROW>
 <ROW>
   <ENTRY><CONSTANT>__sync_lock_test_and_set</CONSTANT></ENTRY>
   <ENTRY>Atomically set a referenced location to a value and return the old value. Acquire a lock on the referenced location.</ENTRY>
 </ROW>
 <ROW>
   <ENTRY><CONSTANT>__sync_lock_release</CONSTANT></ENTRY>
   <ENTRY>Release a lock acquired previously.</ENTRY>
 </ROW>
 </TBODY>
</TGROUP>
</TABLE>


</PARA>
</SECT1>

<SECT1 ID="threadlocalstorage">
<TITLE>Thread-Local Storage</TITLE>
<PARA>
See <XREF LINKEND="std.IA64.ABI"> Chapter 7.4.
</PARA>
</SECT1>

</APPENDIX>
