<!-- Start of text generated from database -->
<!-- generated from the LSB specification database -->
<!--    by $Header: /cvsroot/lsb/lsbspec/mksecttypestable,v 1.9 2004/09/16 00:14:03 nick Exp 0 -->
<!--    at Tue Sep 28 23:01:06 2004 -->
<TABLE ID=tbl.ABIUpdate>
<TITLE>ELF Section Types</TITLE>
<TGROUP COLS=3>
<THEAD>
<ROW>
<ENTRY ALIGN=center>Name</ENTRY><ENTRY ALIGN=center>Value</ENTRY><ENTRY ALIGN=center>Description</ENTRY></ROW>
</THEAD>
<TBODY>
<ROW><ENTRY>SHT_DYNAMIC</ENTRY><ENTRY>0x6</ENTRY><ENTRY>The section holds information for dynamic linking. Currently, an object file shall have only one dynamic section, but this restriction may be relaxed in the future. See ``Dynamic Section'' in Chapter 5 for details.</ENTRY></ROW>
<ROW><ENTRY>SHT_DYNSYM</ENTRY><ENTRY>0xb</ENTRY><ENTRY>This section holds a minimal set of symbols adequate for dynamic linking. See 
also SHT_SYMTAB. Currently, an object file may have either a section of 
SHT_SYMTAB type or a section of SHT_DYNSYM type, but not both. This restriction 
may be relaxed in the future.</ENTRY></ROW>
<ROW><ENTRY>SHT_FINI_ARRAY</ENTRY><ENTRY>0xf</ENTRY><ENTRY>This section contains an array of pointers to termination functions, as described in ``Initialization and Termination Functions'' in Chapter 5. Each pointer in the array is taken as a parameterless procedure with a void return.</ENTRY></ROW>
<ROW><ENTRY>SHT_HASH</ENTRY><ENTRY>0x5</ENTRY><ENTRY>The section holds a symbol hash table. Currently, an object file shall have only one hash table, but this restriction may be relaxed in the future. See ``Hash Table'' in the Chapter 5 for details.</ENTRY></ROW>
<ROW><ENTRY>SHT_HIPROC</ENTRY><ENTRY>0x7fffffff</ENTRY><ENTRY>Values in this inclusive range are reserved for processor-specific semantics.</ENTRY></ROW>
<ROW><ENTRY>SHT_HIUSER</ENTRY><ENTRY>0xffffffff</ENTRY><ENTRY>This value specifies the upper bound of the range of indexes reserved for application programs. Section types between SHT_LOUSER and SHT_HIUSER can be used by the application, without conflicting with current or future system-defined section types.</ENTRY></ROW>
<ROW><ENTRY>SHT_INIT_ARRAY</ENTRY><ENTRY>0xe</ENTRY><ENTRY>This section contains an array of pointers to initialization functions, as described in ``Initialization and Termination Functions'' in Chapter 5. Each pointer in the array is taken as a parameterless procedure with a void return.</ENTRY></ROW>
<ROW><ENTRY>SHT_LOPROC</ENTRY><ENTRY>0x70000000</ENTRY><ENTRY>Values in this inclusive range are reserved for processor-specific semantics.</ENTRY></ROW>
<ROW><ENTRY>SHT_LOUSER</ENTRY><ENTRY>0x80000000</ENTRY><ENTRY>This value specifies the lower bound of the range of indexes reserved for application programs.</ENTRY></ROW>
<ROW><ENTRY>SHT_NOBITS</ENTRY><ENTRY>0x8</ENTRY><ENTRY>A section of this type occupies no space in the file but otherwise resembles SHT_PROGBITS. Although this section contains no bytes, the sh_offset member contains the conceptual file offset.</ENTRY></ROW>
<ROW><ENTRY>SHT_NOTE</ENTRY><ENTRY>0x7</ENTRY><ENTRY>The section holds information that marks the file in some way. See ``Note Section'' in Chapter 5 for details.</ENTRY></ROW>
<ROW><ENTRY>SHT_NULL</ENTRY><ENTRY>0x0</ENTRY><ENTRY>This value marks the section header as inactive; it does not have an associated section. Other members of the section header have undefined values.</ENTRY></ROW>
<ROW><ENTRY>SHT_PREINIT_ARRAY</ENTRY><ENTRY>0x10</ENTRY><ENTRY>This section contains an array of pointers to functions that are invoked before all other initialization functions, as described in ``Initialization and Termination Functions'' in Chapter 5. Each pointer in the array is taken as a parameterless proceure with a void return.</ENTRY></ROW>
<ROW><ENTRY>SHT_PROGBITS</ENTRY><ENTRY>0x1</ENTRY><ENTRY>The section holds information defined by the program, whose format and meaning are determined solely by the program.</ENTRY></ROW>
<ROW><ENTRY>SHT_REL</ENTRY><ENTRY>0x9</ENTRY><ENTRY>The section holds relocation entries without explicit addends, such as type Elf32_Rel for the 32-bit class of object files or type Elf64_Rel for the 64-bit class of object files. An object file may have multiple relocation sections. See "Relocation"</ENTRY></ROW>
<ROW><ENTRY>SHT_RELA</ENTRY><ENTRY>0x4</ENTRY><ENTRY>The section holds relocation entries with explicit addends, such as type Elf32_Rela for the 32-bit class of object files or type Elf64_Rela for the 64-bit class of object files. An object file may have multiple relocation sections. ``Relocation'' b</ENTRY></ROW>
<ROW><ENTRY>SHT_SHLIB</ENTRY><ENTRY>0xa</ENTRY><ENTRY>This section type is reserved but has unspecified semantics.</ENTRY></ROW>
<ROW><ENTRY>SHT_STRTAB</ENTRY><ENTRY>0x3</ENTRY><ENTRY>The section holds a string table. An object file may have multiple string table sections. See ``String Table'' below for details.</ENTRY></ROW>
<ROW><ENTRY>SHT_SYMTAB</ENTRY><ENTRY>0x2</ENTRY><ENTRY>This section holds a symbol table. Currently, an object file may have either a 
section of SHT_SYMTAB type or a section of SHT_DYNSYM type, but not both. This 
restriction may be relaxed in the future. Typically, SHT_SYMTAB provides 
symbols for link editing, though it may also be used for dynamic linking. As a 
complete symbol table, it may contain many symbols unnecessary for dynamic 
linking.</ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
<!-- End of text generated from database -->
<!--    by $Header: /cvsroot/lsb/lsbspec/mksecttypestable,v 1.9 2004/09/16 00:14:03 nick Exp 0 -->
