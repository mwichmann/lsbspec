<PART ID="tocdynlnk">
<TITLE>Dynamic Linking</TITLE>

<CHAPTER ID=dynlnk>
<TITLE>Program Loading and Dynamic Linking</TITLE>

<PARA>
LSB-conforming implementations shall support the object file information and
system actions that create running programs as specified in the
<XREF LINKEND="std.gABI41">
and
<XREF LINKEND="std.ABIUpdate">
and as supplemented by this document and an architecture-specific LSB specification.
</PARA>

<PARA>
Any shared object that is loaded shall contain sufficient DT_NEEDED records to
satisfy the symbols on the shared library.
</PARA>
</CHAPTER>

<CHAPTER ID=progheader>
<TITLE>Program Header</TITLE>

<PARA>
In addition to the Segment Types defined in the
<XREF LINKEND="std.gABI41">
and
<XREF LINKEND="std.ABIUpdate">
the following Segment Types shall also be supported.
</PARA>

<TABLE>
<TITLE>Linux Segment Types</TITLE>
<TGROUP COLS=2>
<THEAD>
<ROW>
<ENTRY ALIGN=center>Name</ENTRY><ENTRY ALIGN=center>Value</ENTRY></ROW>
</THEAD>
<TBODY>
<ROW><ENTRY>PT_GNU_EH_FRAME</ENTRY><ENTRY>0x6474e550</ENTRY></ROW>
<ROW><ENTRY>PT_GNU_STACK</ENTRY><ENTRY>0x6474e551</ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>


<VARIABLELIST>
<VARLISTENTRY>
<TERM>PT_GNU_EH_FRAME</TERM>
<LISTITEM>
<PARA>
The array element specifies the location and size of the exception handling
information as defined by the .eh_frame_hdr section.
</PARA>
</LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>PT_GNU_STACK</TERM>
<LISTITEM>
<PARA>
The p_flags member specifies the permissions on the segment containing the stack
and is used to indicate wether the stack should be executable. The absense of
this header indicates indicates that the stack will be executable.
</PARA>
</LISTITEM>
</VARLISTENTRY>
</VARIABLELIST>

</CHAPTER>

<CHAPTER ID=DynamicSection>
<TITLE>Dynamic Entries</TITLE>
<PARA>
A dynamic entry's <STRUCTFIELD>d_tag</STRUCTFIELD> member controls
the interpretation of <STRUCTFIELD>d_un</STRUCTFIELD>.
</PARA>
<SECT1 ID=dynsectent>
<TITLE>Dynamic Entries</TITLE>
<PARA>
</PARA>
<SECT2>
<TITLE>ELF Dynamic Entries</TITLE>
<PARA>
The following dynamic entries are defined in the 
<XREF LINKEND="std.gABI41">
and
<XREF LINKEND="std.ABIUpdate">.
<!-- Start of text generated from database -->
<!-- generated from the LSB specification database -->
<!--    by $Header: /cvsroot/lsb/lsbspec/mkdyntagtable,v 1.6 2002/11/26 03:12:51 anderson Exp 0 -->
<!--    at Fri Nov  5 12:45:52 2004 -->
<VARIABLELIST>
<VARLISTENTRY>
<TERM>DT_BIND_NOW</TERM>
<LISTITEM><PARA>Process relocations of object</PARA></LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>DT_DEBUG</TERM>
<LISTITEM><PARA>For debugging; unspecified</PARA></LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>DT_FINI</TERM>
<LISTITEM><PARA>Address of termination function</PARA></LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>DT_HASH</TERM>
<LISTITEM><PARA>Address of symbol hash table</PARA></LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>DT_HIPROC</TERM>
<LISTITEM><PARA>End of processor-specific</PARA></LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>DT_INIT</TERM>
<LISTITEM><PARA>Address of init function</PARA></LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>DT_JMPREL</TERM>
<LISTITEM><PARA>Address of PLT relocs</PARA></LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>DT_LOPROC</TERM>
<LISTITEM><PARA>Start of processor-specific</PARA></LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>DT_NEEDED</TERM>
<LISTITEM><PARA>Name of needed library</PARA></LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>DT_NULL</TERM>
<LISTITEM><PARA>Marks end of dynamic section</PARA></LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>DT_PLTREL</TERM>
<LISTITEM><PARA>Type of reloc in PLT</PARA></LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>DT_PLTRELSZ</TERM>
<LISTITEM><PARA>Size in bytes of PLT relocs</PARA></LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>DT_REL</TERM>
<LISTITEM><PARA>Address of Rel relocs</PARA></LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>DT_RELA</TERM>
<LISTITEM><PARA>Address of Rela relocs</PARA></LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>DT_RELAENT</TERM>
<LISTITEM><PARA>Size of one Rela reloc</PARA></LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>DT_RELASZ</TERM>
<LISTITEM><PARA>Total size of Rela relocs</PARA></LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>DT_RELENT</TERM>
<LISTITEM><PARA>Size of one Rel reloc</PARA></LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>DT_RELSZ</TERM>
<LISTITEM><PARA>Total size of Rel relocs</PARA></LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>DT_RPATH</TERM>
<LISTITEM><PARA>Library search path</PARA></LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>DT_SONAME</TERM>
<LISTITEM><PARA>Name of shared object</PARA></LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>DT_STRSZ</TERM>
<LISTITEM><PARA>Size of string table</PARA></LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>DT_STRTAB</TERM>
<LISTITEM><PARA>Address of string table</PARA></LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>DT_SYMBOLIC</TERM>
<LISTITEM><PARA>Start symbol search here</PARA></LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>DT_SYMENT</TERM>
<LISTITEM><PARA>Size of one symbol table entry</PARA></LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>DT_SYMTAB</TERM>
<LISTITEM><PARA>Address of symbol table</PARA></LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>DT_TEXTREL</TERM>
<LISTITEM><PARA>Reloc might modify .text</PARA></LISTITEM>
</VARLISTENTRY>
</VARIABLELIST>
<!-- End of text generated from database -->
<!--    by $Header: /cvsroot/lsb/lsbspec/mkdyntagtable,v 1.6 2002/11/26 03:12:51 anderson Exp 0 -->

</PARA>
</SECT2>
<SECT2>
<TITLE>Additional Dynamic Entries</TITLE>
<PARA>
An LSB conforming object may also use the following additional Dynamic Entry
types.
<!-- Start of text generated from database -->
<!-- generated from the LSB specification database -->
<!--    by $Header: /cvsroot/lsb/lsbspec/mkdyntagtable,v 1.6 2002/11/26 03:12:51 anderson Exp 0 -->
<!--    at Fri Nov  5 12:45:52 2004 -->
<VARIABLELIST>
<VARLISTENTRY>
<TERM>DT_ADDRRNGHI</TERM>
<LISTITEM><PARA>Values from DT_ADDRRNGLO through DT_ADDRRNGHI are reserved for definition by an archLSB.</PARA></LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>DT_ADDRRNGLO</TERM>
<LISTITEM><PARA>Values from DT_ADDRRNGLO through DT_ADDRRNGHI are reserved for definition by an archLSB.</PARA></LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>DT_AUXILIARY</TERM>
<LISTITEM><PARA>Shared object to load before self</PARA></LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>DT_FILTER</TERM>
<LISTITEM><PARA>Shared object to get values from</PARA></LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>DT_FINI_ARRAY</TERM>
<LISTITEM><PARA>The address of an array of pointers to termination functions.</PARA></LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>DT_FINI_ARRAYSZ</TERM>
<LISTITEM><PARA>Size in bytes of DT_FINI_ARRAY</PARA></LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>DT_HIOS</TERM>
<LISTITEM><PARA>Values from DT_LOOS through DT_HIOS are reserved for definition by specific operating systems.</PARA></LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>DT_INIT_ARRAY</TERM>
<LISTITEM><PARA>The address of an array of pointers to initialization functions.</PARA></LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>DT_INIT_ARRAYSZ</TERM>
<LISTITEM><PARA>Size in bytes of DT_INIT_ARRAY</PARA></LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>DT_LOOS</TERM>
<LISTITEM><PARA>Values from DT_LOOS through DT_HIOS are reserved for definition by specific operating systems.</PARA></LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>DT_NUM</TERM>
<LISTITEM><PARA>Number of dynamic entry tags defined (excepting reserved ranges).</PARA></LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>DT_POSFLAG_1</TERM>
<LISTITEM><PARA>Flags for DT_* entries, effecting the following DT_* entry</PARA></LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>DT_RELCOUNT</TERM>
<LISTITEM><PARA>All Elf32_Rel R_*_RELATIVE relocations have been placed into a single block and this entry specifies the number of entries in that block. This permits ld.so.1 to streamline the processing of RELATIVE relocations.</PARA></LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>DT_SYMINENT</TERM>
<LISTITEM><PARA>Entry size of syminfo</PARA></LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>DT_SYMINFO</TERM>
<LISTITEM><PARA>Address of the Syminfo table.</PARA></LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>DT_SYMINSZ</TERM>
<LISTITEM><PARA>Size of syminfo table (in bytes)</PARA></LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>DT_VALRNGHI</TERM>
<LISTITEM><PARA>Entries which fall between DT_VALRNGHI & DT_VALRNGLO use the Dyn.d_un.d_val field of the Elf*_Dyn structure.</PARA></LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>DT_VALRNGLO</TERM>
<LISTITEM><PARA>Entries which fall between DT_VALRNGHI & DT_VALRNGLO use the Dyn.d_un.d_val field of the Elf*_Dyn structure.</PARA></LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>DT_VERDEF</TERM>
<LISTITEM><PARA>Address of version definition table</PARA></LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>DT_VERDEFNUM</TERM>
<LISTITEM><PARA>Number of version definitions</PARA></LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>DT_VERNEED</TERM>
<LISTITEM><PARA>Address of table with needed versions</PARA></LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>DT_VERNEEDNUM</TERM>
<LISTITEM><PARA>Number of needed versions</PARA></LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>DT_VERSYM</TERM>
<LISTITEM><PARA>Address of the table provided by the .gnu.version section.</PARA></LISTITEM>
</VARLISTENTRY>
</VARIABLELIST>
<!-- End of text generated from database -->
<!--    by $Header: /cvsroot/lsb/lsbspec/mkdyntagtable,v 1.6 2002/11/26 03:12:51 anderson Exp 0 -->

</PARA>
</SECT2>
</SECT1>
</CHAPTER>

</PART>
