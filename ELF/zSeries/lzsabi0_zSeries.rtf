{\rtf1\ansi\deff0
{\fonttbl{\f2\fnil\fcharset0 Helvetica;}
{\f3\fnil\fcharset0 Arial;}
{\f1\fnil\fcharset0 Palatino;}
{\f0\fnil\fcharset0 Times New Roman;}
}
{\colortbl;}{\stylesheet{\s1 Heading 1;}{\s2 Heading 2;}{\s3 Heading 3;}{\s4 Heading 4;}{\s5 Heading 5;}{\s6 Heading 6;}{\s7 Heading 7;}{\s8 Heading 8;}{\s9 Heading 9;}}
\deflang1024\notabind\facingp\hyphauto1\widowctrl
\sectd\plain\pgwsxn12240\pghsxn15840\marglsxn1920\margrsxn1920\margtsxn1440\margbsxn1200\headery0\footery0\pgndec{\headerl\pard\sl-240\sb770\sa430\plain\tqc\tx4200\tqr\tx8400 {}\tab {}\tab {}\par}{\footerl\pard\sl-240\sb50\sa910\plain\tqc\tx4200\tqr\tx8400 {}\tab {}\tab {}\par}{\headerr\pard\sl-240\sb770\sa430\plain\tqc\tx4200\tqr\tx8400 {}\tab {}\tab {}\par}{\footerr\pard\sl-240\sb50\sa910\plain\tqc\tx4200\tqr\tx8400 {}\tab {}\tab {}\par}\pard\sl20 \fs20\f1 \hyphpar0\par\pard\sb242\s1\sl354\qc \b\fs32\f2 zSeries ELF Application Binary Interface Supplement\hyphpar0\par\page\pard\sl20 \b0\fs20\f1 \hyphpar0\par\pard\sl-240 \b\f2 zSeries ELF Application Binary Interface Supplement\hyphpar0\par\sect\sectd\plain\pgwsxn12240\pghsxn15840\marglsxn1920\margrsxn1920\margtsxn1440\margbsxn1200\headery0\footery0\pgnlcrm\titlepg{\headerf\pard\sl-240\sb770\sa430\plain\tqc\tx4200\tqr\tx8400 {}\tab {}\tab {}\par}{\footerf\pard\sl-240\sb50\sa910\plain\tqc\tx4200\tqr\tx8400 {}\tab {}\tab {\i\fs20\f1 \chpgn }\par}{\headerl\pard\sl-240\sb770\sa430\plain\tqc\tx4200\tqr\tx8400 {}\tab {}\tab {}\par}{\footerl\pard\sl-240\sb50\sa910\plain\tqc\tx4200\tqr\tx8400 {\i\fs20\f1 \chpgn }\tab {}\tab {}\par}{\headerr\pard\sl-240\sb770\sa430\plain\tqc\tx4200\tqr\tx8400 {}\tab {}\tab {}\par}{\footerr\pard\sl-240\sb50\sa910\plain\tqc\tx4200\tqr\tx8400 {}\tab {}\tab {\i\fs20\f1 \chpgn }\par}\pard\sb220\s1\sl322 \b\fs29\f2 Table of Contents\keepn\hyphpar0\par\pard\sb146\li1440\sl220\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _3 }{\fldrslt \fs20\f1 1. Low-level system information}}\fs20\f1 \tqr\tldot\tx8400\tab {\field{\*\fldinst   HYPERLINK  \\l _3 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _3}{\fldrslt 000}}}}\keepn\hyphpar0\par\pard\sb48\li1920\sl220\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _5 }{\fldrslt \b0 Machine interface}}\b0 \tqr\tldot\tx8400\tab {\field{\*\fldinst   HYPERLINK  \\l _5 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _5}{\fldrslt 000}}}}\hyphpar0\par\pard\li2400\sl220\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _8 }{\fldrslt Processor architecture}}\tqr\tldot\tx8400\tab {\field{\*\fldinst   HYPERLINK  \\l _8 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _8}{\fldrslt 000}}}}\hyphpar0\par\pard\li2400\sl220\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _18 }{\fldrslt Data representation}}\tqr\tldot\tx8400\tab {\field{\*\fldinst   HYPERLINK  \\l _18 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _18}{\fldrslt 000}}}}\hyphpar0\par\pard\li1920\sl220\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _391 }{\fldrslt Function calling sequence}}\tqr\tldot\tx8400\tab {\field{\*\fldinst   HYPERLINK  \\l _391 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _391}{\fldrslt 000}}}}\hyphpar0\par\pard\li2400\sl220\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _394 }{\fldrslt Registers}}\tqr\tldot\tx8400\tab {\field{\*\fldinst   HYPERLINK  \\l _394 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _394}{\fldrslt 000}}}}\hyphpar0\par\pard\li2400\sl220\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _588 }{\fldrslt The stack frame}}\tqr\tldot\tx8400\tab {\field{\*\fldinst   HYPERLINK  \\l _588 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _588}{\fldrslt 000}}}}\hyphpar0\par\pard\li2400\sl220\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_PARAMETERPASSING}{\fldrslt Parameter passing}}\tqr\tldot\tx8400\tab {\field{\*\fldinst   HYPERLINK  \\l ID_PARAMETERPASSING}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_PARAMETERPASSING}{\fldrslt 000}}}}\hyphpar0\par\pard\li2400\sl220\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _737 }{\fldrslt Variable argument lists}}\tqr\tldot\tx8400\tab {\field{\*\fldinst   HYPERLINK  \\l _737 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _737}{\fldrslt 000}}}}\hyphpar0\par\pard\li2400\sl220\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _740 }{\fldrslt Return values}}\tqr\tldot\tx8400\tab {\field{\*\fldinst   HYPERLINK  \\l _740 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _740}{\fldrslt 000}}}}\hyphpar0\par\pard\li1920\sl220\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _769 }{\fldrslt Operating system interface}}\tqr\tldot\tx8400\tab {\field{\*\fldinst   HYPERLINK  \\l _769 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _769}{\fldrslt 000}}}}\hyphpar0\par\pard\li2400\sl220\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _771 }{\fldrslt Virtual address space}}\tqr\tldot\tx8400\tab {\field{\*\fldinst   HYPERLINK  \\l _771 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _771}{\fldrslt 000}}}}\hyphpar0\par\pard\li2400\sl220\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _776 }{\fldrslt Page size}}\tqr\tldot\tx8400\tab {\field{\*\fldinst   HYPERLINK  \\l _776 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _776}{\fldrslt 000}}}}\hyphpar0\par\pard\li2400\sl220\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _780 }{\fldrslt Virtual address assignments}}\tqr\tldot\tx8400\tab {\field{\*\fldinst   HYPERLINK  \\l _780 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _780}{\fldrslt 000}}}}\hyphpar0\par\pard\li2400\sl220\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _796 }{\fldrslt Managing the process stack}}\tqr\tldot\tx8400\tab {\field{\*\fldinst   HYPERLINK  \\l _796 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _796}{\fldrslt 000}}}}\hyphpar0\par\pard\li2400\sl220\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _801 }{\fldrslt Coding guidelines}}\tqr\tldot\tx8400\tab {\field{\*\fldinst   HYPERLINK  \\l _801 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _801}{\fldrslt 000}}}}\hyphpar0\par\pard\li2400\sl220\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _806 }{\fldrslt Processor execution modes}}\tqr\tldot\tx8400\tab {\field{\*\fldinst   HYPERLINK  \\l _806 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _806}{\fldrslt 000}}}}\hyphpar0\par\pard\li1920\sl220\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_EXCEPTIONINT}{\fldrslt Exception interface}}\tqr\tldot\tx8400\tab {\field{\*\fldinst   HYPERLINK  \\l ID_EXCEPTIONINT}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_EXCEPTIONINT}{\fldrslt 000}}}}\hyphpar0\par\pard\li1920\sl220\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_PROCINIT}{\fldrslt Process initialization}}\tqr\tldot\tx8400\tab {\field{\*\fldinst   HYPERLINK  \\l ID_PROCINIT}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_PROCINIT}{\fldrslt 000}}}}\hyphpar0\par\pard\li2400\sl220\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _883 }{\fldrslt Registers}}\tqr\tldot\tx8400\tab {\field{\*\fldinst   HYPERLINK  \\l _883 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _883}{\fldrslt 000}}}}\hyphpar0\par\pard\li2400\sl220\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_PROCESSSTACK}{\fldrslt Process stack}}\tqr\tldot\tx8400\tab {\field{\*\fldinst   HYPERLINK  \\l ID_PROCESSSTACK}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_PROCESSSTACK}{\fldrslt 000}}}}\hyphpar0\par\pard\li1920\sl220\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_CODINGEXAMPLES}{\fldrslt Coding examples}}\tqr\tldot\tx8400\tab {\field{\*\fldinst   HYPERLINK  \\l ID_CODINGEXAMPLES}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_CODINGEXAMPLES}{\fldrslt 000}}}}\hyphpar0\par\pard\li2400\sl220\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _1121 }{\fldrslt Code model overview}}\tqr\tldot\tx8400\tab {\field{\*\fldinst   HYPERLINK  \\l _1121 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _1121}{\fldrslt 000}}}}\hyphpar0\par\pard\li2400\sl220\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _1133 }{\fldrslt Function prolog and epilog}}\tqr\tldot\tx8400\tab {\field{\*\fldinst   HYPERLINK  \\l _1133 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _1133}{\fldrslt 000}}}}\hyphpar0\par\pard\li2400\sl220\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _1163 }{\fldrslt Profiling}}\tqr\tldot\tx8400\tab {\field{\*\fldinst   HYPERLINK  \\l _1163 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _1163}{\fldrslt 000}}}}\hyphpar0\par\pard\li2400\sl220\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _1173 }{\fldrslt Data objects}}\tqr\tldot\tx8400\tab {\field{\*\fldinst   HYPERLINK  \\l _1173 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _1173}{\fldrslt 000}}}}\hyphpar0\par\pard\li2400\sl220\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _1254 }{\fldrslt Function calls}}\tqr\tldot\tx8400\tab {\field{\*\fldinst   HYPERLINK  \\l _1254 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _1254}{\fldrslt 000}}}}\hyphpar0\par\pard\li2400\sl220\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _1333 }{\fldrslt Branching}}\tqr\tldot\tx8400\tab {\field{\*\fldinst   HYPERLINK  \\l _1333 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _1333}{\fldrslt 000}}}}\hyphpar0\par\pard\li2400\sl220\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_DYNAMICSTACK}{\fldrslt Dynamic stack space allocation}}\tqr\tldot\tx8400\tab {\field{\*\fldinst   HYPERLINK  \\l ID_DYNAMICSTACK}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_DYNAMICSTACK}{\fldrslt 000}}}}\hyphpar0\par\pard\li1920\sl220\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _1450 }{\fldrslt DWARF definition}}\tqr\tldot\tx8400\tab {\field{\*\fldinst   HYPERLINK  \\l _1450 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _1450}{\fldrslt 000}}}}\hyphpar0\par\pard\sb48\li1440\sl220\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_CHOBJFILES}{\fldrslt \b 2. Object files}}\b \tqr\tldot\tx8400\tab {\field{\*\fldinst   HYPERLINK  \\l ID_CHOBJFILES}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_CHOBJFILES}{\fldrslt 000}}}}\keepn\hyphpar0\par\pard\sb48\li1920\sl220\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _1575 }{\fldrslt \b0 ELF Header}}\b0 \tqr\tldot\tx8400\tab {\field{\*\fldinst   HYPERLINK  \\l _1575 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _1575}{\fldrslt 000}}}}\hyphpar0\par\pard\li2400\sl220\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _1577 }{\fldrslt Machine Information}}\tqr\tldot\tx8400\tab {\field{\*\fldinst   HYPERLINK  \\l _1577 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _1577}{\fldrslt 000}}}}\hyphpar0\par\pard\li1920\sl220\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _1611 }{\fldrslt Sections}}\tqr\tldot\tx8400\tab {\field{\*\fldinst   HYPERLINK  \\l _1611 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _1611}{\fldrslt 000}}}}\hyphpar0\par\pard\li2400\sl220\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _1613 }{\fldrslt Special Sections}}\tqr\tldot\tx8400\tab {\field{\*\fldinst   HYPERLINK  \\l _1613 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _1613}{\fldrslt 000}}}}\hyphpar0\par\pard\li2400\sl220\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _1671 }{\fldrslt Symbol Table}}\tqr\tldot\tx8400\tab {\field{\*\fldinst   HYPERLINK  \\l _1671 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _1671}{\fldrslt 000}}}}\hyphpar0\par\pard\li2400\sl220\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _1677 }{\fldrslt Relocation}}\tqr\tldot\tx8400\tab {\field{\*\fldinst   HYPERLINK  \\l _1677 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _1677}{\fldrslt 000}}}}\hyphpar0\par\pard\sb48\li1440\sl220\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_CHPROGLOAD}{\fldrslt \b 3. Program loading and dynamic linking}}\b \tqr\tldot\tx8400\tab {\field{\*\fldinst   HYPERLINK  \\l ID_CHPROGLOAD}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_CHPROGLOAD}{\fldrslt 000}}}}\keepn\hyphpar0\par\pard\sb48\li1920\sl220\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _2064 }{\fldrslt \b0 Program Loading}}\b0 \tqr\tldot\tx8400\tab {\field{\*\fldinst   HYPERLINK  \\l _2064 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _2064}{\fldrslt 000}}}}\hyphpar0\par\pard\li1920\sl220\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_DYNAMICLINKING}{\fldrslt Dynamic Linking}}\tqr\tldot\tx8400\tab {\field{\*\fldinst   HYPERLINK  \\l ID_DYNAMICLINKING}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_DYNAMICLINKING}{\fldrslt 000}}}}\hyphpar0\par\pard\li2400\sl220\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _2231 }{\fldrslt Dynamic Section}}\tqr\tldot\tx8400\tab {\field{\*\fldinst   HYPERLINK  \\l _2231 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _2231}{\fldrslt 000}}}}\hyphpar0\par\pard\li2400\sl220\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_GLOBALOFFSETTABLE}{\fldrslt Global Offset Table}}\tqr\tldot\tx8400\tab {\field{\*\fldinst   HYPERLINK  \\l ID_GLOBALOFFSETTABLE}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_GLOBALOFFSETTABLE}{\fldrslt 000}}}}\hyphpar0\par\pard\li2400\sl220\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_FUNCTIONADDRESSES}{\fldrslt Function Addresses}}\tqr\tldot\tx8400\tab {\field{\*\fldinst   HYPERLINK  \\l ID_FUNCTIONADDRESSES}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_FUNCTIONADDRESSES}{\fldrslt 000}}}}\hyphpar0\par\pard\li2400\sl220\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_PROCEDURELINKAGETABLE}{\fldrslt Procedure Linkage Table}}\tqr\tldot\tx8400\tab {\field{\*\fldinst   HYPERLINK  \\l ID_PROCEDURELINKAGETABLE}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_PROCEDURELINKAGETABLE}{\fldrslt 000}}}}\hyphpar0\par\pard\sb48\li1440\sl220\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _2308 }{\fldrslt \b A. }}\b \tqr\tldot\tx8400\tab {\field{\*\fldinst   HYPERLINK  \\l _2308 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _2308}{\fldrslt 000}}}}\keepn\hyphpar0\par\pard\sb48\li1920\sl220\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _2310 }{\fldrslt \b0 GNU Free Documentation License}}\b0 \tqr\tldot\tx8400\tab {\field{\*\fldinst   HYPERLINK  \\l _2310 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _2310}{\fldrslt 000}}}}\hyphpar0\par\pard\li2400\sl220\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _2317 }{\fldrslt PREAMBLE}}\tqr\tldot\tx8400\tab {\field{\*\fldinst   HYPERLINK  \\l _2317 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _2317}{\fldrslt 000}}}}\hyphpar0\par\pard\li2400\sl220\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _2320 }{\fldrslt APPLICABILITY AND DEFINITIONS}}\tqr\tldot\tx8400\tab {\field{\*\fldinst   HYPERLINK  \\l _2320 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _2320}{\fldrslt 000}}}}\hyphpar0\par\pard\li2400\sl220\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _2330 }{\fldrslt VERBATIM COPYING}}\tqr\tldot\tx8400\tab {\field{\*\fldinst   HYPERLINK  \\l _2330 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _2330}{\fldrslt 000}}}}\hyphpar0\par\pard\li2400\sl220\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _2334 }{\fldrslt COPYING IN QUANTITY}}\tqr\tldot\tx8400\tab {\field{\*\fldinst   HYPERLINK  \\l _2334 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _2334}{\fldrslt 000}}}}\hyphpar0\par\pard\li2400\sl220\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _2340 }{\fldrslt MODIFICATIONS}}\tqr\tldot\tx8400\tab {\field{\*\fldinst   HYPERLINK  \\l _2340 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _2340}{\fldrslt 000}}}}\hyphpar0\par\pard\li2400\sl220\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _2376 }{\fldrslt COMBINING DOCUMENTS}}\tqr\tldot\tx8400\tab {\field{\*\fldinst   HYPERLINK  \\l _2376 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _2376}{\fldrslt 000}}}}\hyphpar0\par\pard\li2400\sl220\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _2381 }{\fldrslt COLLECTIONS OF DOCUMENTS}}\tqr\tldot\tx8400\tab {\field{\*\fldinst   HYPERLINK  \\l _2381 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _2381}{\fldrslt 000}}}}\hyphpar0\par\pard\li2400\sl220\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _2385 }{\fldrslt AGGREGATION WITH INDEPENDENT WORKS}}\tqr\tldot\tx8400\tab {\field{\*\fldinst   HYPERLINK  \\l _2385 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _2385}{\fldrslt 000}}}}\hyphpar0\par\pard\li2400\sl220\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _2389 }{\fldrslt TRANSLATION}}\tqr\tldot\tx8400\tab {\field{\*\fldinst   HYPERLINK  \\l _2389 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _2389}{\fldrslt 000}}}}\hyphpar0\par\pard\li2400\sl220\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _2392 }{\fldrslt TERMINATION}}\tqr\tldot\tx8400\tab {\field{\*\fldinst   HYPERLINK  \\l _2392 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _2392}{\fldrslt 000}}}}\hyphpar0\par\pard\li2400\sl220\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _2395 }{\fldrslt FUTURE REVISIONS OF THIS LICENSE}}\tqr\tldot\tx8400\tab {\field{\*\fldinst   HYPERLINK  \\l _2395 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _2395}{\fldrslt 000}}}}\hyphpar0\par\pard\li2400\sl220\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _2399 }{\fldrslt How to use this License for your documents}}\tqr\tldot\tx8400\tab {\field{\*\fldinst   HYPERLINK  \\l _2399 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _2399}{\fldrslt 000}}}}\hyphpar0\par\pard\sb48\li1440\sl220\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_NOTICES}{\fldrslt \b 4. Notices}}\b \tqr\tldot\tx8400\tab {\field{\*\fldinst   HYPERLINK  \\l ID_NOTICES}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_NOTICES}{\fldrslt 000}}}}\keepn\hyphpar0\par\pard\sb48\li1920\sl220\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _2421 }{\fldrslt \b0 Programming interface information}}\b0 \tqr\tldot\tx8400\tab {\field{\*\fldinst   HYPERLINK  \\l _2421 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _2421}{\fldrslt 000}}}}\hyphpar0\par\pard\li1920\sl220\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_TRADEMARKS}{\fldrslt Trademarks}}\tqr\tldot\tx8400\tab {\field{\*\fldinst   HYPERLINK  \\l ID_TRADEMARKS}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_TRADEMARKS}{\fldrslt 000}}}}\hyphpar0\par\pard\sb48\li1440\sl220\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _2450 }{\fldrslt \b B. }}\b \tqr\tldot\tx8400\tab {\field{\*\fldinst   HYPERLINK  \\l _2450 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _2450}{\fldrslt 000}}}}\keepn\hyphpar0\par\pard\sb48\li1440\sl220\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _2462 }{\fldrslt Index}}\tqr\tldot\tx8400\tab {\field{\*\fldinst   HYPERLINK  \\l _2462 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _2462}{\fldrslt 000}}}}\hyphpar0\par\sect\sectd\plain\pgwsxn12240\pghsxn15840\marglsxn1920\margrsxn1920\margtsxn1440\margbsxn1200\headery0\footery0\pgndec\pgnrestart\titlepg{\headerf\pard\sl-240\sb770\sa430\plain\tqc\tx4200\tqr\tx8400 {}\tab {}\tab {}\par}{\footerf\pard\sl-240\sb50\sa910\plain\tqc\tx4200\tqr\tx8400 {}\tab {}\tab {\i\fs20\f1 \chpgn }\par}{\headerl\pard\sl-240\sb770\sa430\plain\tqc\tx4200\tqr\tx8400 {\i\fs20\f1 Chapter 1. Low-level system information}\tab {}\tab {}\par}{\footerl\pard\sl-240\sb50\sa910\plain\tqc\tx4200\tqr\tx8400 {\i\fs20\f1 \chpgn }\tab {}\tab {}\par}{\headerr\pard\sl-240\sb770\sa430\plain\tqc\tx4200\tqr\tx8400 {}\tab {}\tab {\i\fs20\f1 Chapter 1. Low-level system information}\par}{\footerr\pard\sl-240\sb50\sa910\plain\tqc\tx4200\tqr\tx8400 {}\tab {}\tab {\i\fs20\f1 \chpgn }\par}\pard\sb220\s1\sl322 {\*\bkmkstart _3}{\*\bkmkend _3}\b\fs29\f2 Chapter 1. Low-level system information\keepn\hyphpar0\par\pard\sb200\s2\sl266 {\*\bkmkstart _5}{\*\bkmkend _5}\fs24 Machine interface\keepn\hyphpar0\par\pard\sb121\li960\sl220\qj \b0\fs20\lang1033\f1 This section describes the processor-specific information for the zSeries processors.\hyphpar0\par\pard\sb200\s3\li960\sl242 {\*\bkmkstart _8}{\*\bkmkend _8}\b\fs22\lang1024\f2 Processor architecture\keepn\hyphpar0\par\pard\sb110\li960\sl220\qj \b0\fs20\lang1033\f1 [\i z/Architecture Principles of Operation\i0 ] (SA22\'967832) defines the zSeries architecture.\hyphpar0\par\pard\sb100\li960\sl220\qj Programs intended to execute directly on the processor use the zSeries instruction set, and the instruction encoding and semantics of the architecture. \hyphpar0\par\pard\sb100\li960\sl220\qj An application program can assume that all instructions defined by the architecture that are neither privileged nor optional exist and work as documented. \hyphpar0\par\pard\sb100\li960\sl220\qj To be ABI-conforming the processor must implement the instructions of the architecture, perform the specified operations, and produce the expected results. The ABI neither places performance constraints on systems nor specifies what instructions must be implemented in hardware. A software emulation of the architecture could conform to the ABI.\hyphpar0\par\pard\sb100\li960\sl220\qj In z/Architecture a processor runs in big-endian mode. (See {\field{\*\fldinst   HYPERLINK  \\l ID_BYTEORDERING}{\fldrslt the Section called \i Byte ordering}}.) \hyphpar0\par\pard\sb200\s3\li960\sl242 {\*\bkmkstart _18}{\*\bkmkend _18}\b\fs22\lang1024\f2 Data representation\keepn\hyphpar0\par\pard\sb200\s4\li960\sl220 {\*\bkmkstart ID_BYTEORDERING}{\*\bkmkend ID_BYTEORDERING}\fs20 Byte ordering\keepn\hyphpar0\par\pard\sb100\li960\sl220\qj \b0\lang1033\f1 The architecture defines an 8-bit byte, a 16-bit halfword, a 32-bit word, a 64-bit doubleword and a 128-bit quadword. Byte ordering defines how the bytes that make up halfwords, words, doublewords and quadwords are ordered in memory. Most significant byte (MSB) ordering, or "Big-Endian" as it is sometimes called, means that the most significant byte of a structure is located in the lowest addressed byte position in a storage unit (byte 0).\hyphpar0\par\pard\sb100\li960\sl220\qj {\field{\*\fldinst   HYPERLINK  \\l ID_HALFWORD}{\fldrslt Figure 1-1}} to {\field{\*\fldinst   HYPERLINK  \\l ID_QUADWORDS}{\fldrslt Figure 1-4}} illustrate the conventions for bit and byte numbering within storage units of various widths. These conventions apply to both integer data and floating-point data, where the most significant byte of a floating-point value holds the sign and the exponent (or at least the start of the exponent). The figures show big-endian byte numbers in the upper left corners and bit numbers in the lower corners. \hyphpar0\par\pard\sb200\li960{\*\bkmkstart ID_HALFWORD}{\*\bkmkend ID_HALFWORD}{\field\flddirty{\*\fldinst INCLUDEPICTURE "pics/halfwrd.png" }{\fldrslt }}\keepn\par\pard\sb100\li960\sl220\qj \b\lang1024 Figure 1-1. Bit and byte numbering in halfwords\hyphpar0\par\pard\sb200\li960{\*\bkmkstart ID_WORDS}{\*\bkmkend ID_WORDS}{\field\flddirty{\*\fldinst INCLUDEPICTURE "pics/word.png" }{\fldrslt }}\keepn\par\pard\sb100\li960\sl220\qj Figure 1-2. Bit and byte numbering in words\hyphpar0\par\pard\sb200\li960{\*\bkmkstart ID_DOUBLEWORDS}{\*\bkmkend ID_DOUBLEWORDS}{\field\flddirty{\*\fldinst INCLUDEPICTURE "pics/dblword.png" }{\fldrslt }}\keepn\par\pard\sb100\li960\sl220\qj Figure 1-3. Bit and byte numbering in doublewords\hyphpar0\par\pard\sb200\li960{\*\bkmkstart ID_QUADWORDS}{\*\bkmkend ID_QUADWORDS}{\field\flddirty{\*\fldinst INCLUDEPICTURE "pics/quadword.png" }{\fldrslt }}\keepn\par\pard\sb100\li960\sl220\qj Figure 1-4. Bit and byte numbering in quadwords\hyphpar0\par\pard\sb200\s4\li960\sl220 \f2 Fundamental types\keepn\hyphpar0\par\pard\sb100\li960\sl220\qj {\field{\*\fldinst   HYPERLINK  \\l ID_SCALAR}{\fldrslt \b0\lang1033\f1 Table 1-1}}\b0\lang1033\f1  shows how ANSI C scalar types correspond to those of the zSeries processor. For all types a NULL pointer has the value zero (binary).\hyphpar0\par\pard\sb200\li960\sl220\qj {\*\bkmkstart ID_SCALAR}{\*\bkmkend ID_SCALAR}\b\lang1024 Table 1-1. Scalar types\sa100\keepn\par\trowd\trleft960\trhdr \clvertalc\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx2369\clvertalc\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx4189\clvertalc\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5402\clvertalc\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx6674\clvertalc\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8396 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \b\fs20\lang1033\f2 Type\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \b\fs20\lang1033\f2 ANSI C\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \b\fs20\lang1033\f2 sizeof (bytes)\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \b\fs20\lang1033\f2  Alignment\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \b\fs20\lang1033\f2 type (zSeries) \sa160\cell \row \trowd\trleft960 \clvertalc\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx2369\clvertalc\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx4189\clvertalc\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5402\clvertalc\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx6674\clvertalc\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8396 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Character\sa160\cell \plain \pard\intbl\sb200\li40\ri100\sl220\qj \fs20\lang1033\f1 signed char\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
char\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
unsigned char\sa260\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 1\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 1\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 byte\sa160\cell \row \trowd\trleft960 \clvertalc\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx2369\clvertalc\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx4189\clvertalc\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5402\clvertalc\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx6674\clvertalc\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8396 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Short\sa160\cell \plain \pard\intbl\sb200\li40\ri100\sl220\qj \fs20\lang1033\f1 signed short\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
short\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
unsigned short\sa260\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 2\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 2\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 halfword\sa160\cell \row \trowd\trleft960 \clvertalc\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx2369\clvertalc\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx4189\clvertalc\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5402\clvertalc\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx6674\clvertalc\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8396 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Integer\sa160\cell \plain \pard\intbl\sb200\li40\ri100\sl220\qj \fs20\lang1033\f1 signed int\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
int\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
unsigned int\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
enum\sa260\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 4\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 4\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 word\sa160\cell \row \trowd\trleft960 \clvertalc\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx2369\clvertalc\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx4189\clvertalc\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5402\clvertalc\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx6674\clvertalc\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8396 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Long\hyphpar0\par\pard\intbl\sb100\li40\ri100\sl220\qj  Long long\sa160\cell \plain \pard\intbl\sb200\li40\ri100\sl220\qj \fs20\lang1033\f1 signed long\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
long\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
unsigned long\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
signed long long\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
long long\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
unsigned long long\sa260\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 8\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 8\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 doubleword\sa160\cell \row \trowd\trleft960 \clvertalc\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx2369\clvertalc\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx4189\clvertalc\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5402\clvertalc\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx6674\clvertalc\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8396 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Pointer\sa160\cell \plain \pard\intbl\sb200\li40\ri100\sl220\qj \fs20\lang1033\f1 any-type *\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
any-type (*) ()\sa260\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 8\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 8\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 unsigned doubleword\sa160\cell \row \trowd\trleft960 \clvmgf\clvertalc\clbrdrt\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx2369\clvertalc\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx4189\clvertalc\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5402\clvertalc\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx6674\clvertalc\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8396 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Floating point\sa160\cell \plain \pard\intbl\sb200\li40\ri100\sl220\qj \fs20\lang1033\f1 float\sa260\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 4\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 4\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 single precision (IEEE)\sa160\cell \row \trowd\trleft960 \clvmrg\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx2369\clvertalc\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx4189\clvertalc\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5402\clvertalc\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx6674\clvertalc\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8396 \intbl\cell \plain \pard\intbl\sb200\li40\ri100\sl220\qj \fs20\lang1033\f1 double\sa260\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 8\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 8\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 double precision (IEEE)\sa160\cell \row \trowd\trleft960 \clvmrg\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx2369\clvertalc\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx4189\clvertalc\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5402\clvertalc\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx6674\clvertalc\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8396 \intbl\cell \plain \pard\intbl\sb200\li40\ri100\sl220\qj \fs20\lang1033\f1 long\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
double\'b9\sa260\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 16\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 16\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 extended precision (IEEE)\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8396 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 \'b9Compilers and systems may implement the long double data type in some other way, for performance reasons, using a compiler option. Examples of such formats could be two successive doubles or even a single double. Such usage does not conform to this ABI however, and runs the risk of passing a wrongly formatted floating-point number to another function as an argument. Programs using other formats should transform long double floating-point numbers to a conforming format before passing them. \sa160\cell \row \pard\plain\sl-1\hyphpar0\par\pard\sb200\s4\li960\sl220 \b\fs20\f2 Aggregates and unions\keepn\hyphpar0\par\pard\sb100\li960\sl220\qj \b0\lang1033\f1 Aggregates (structures and arrays) and unions assume the alignment of their most strictly aligned component, that is, the component with the largest alignment. The size of any object, including aggregates and unions, is always a multiple of the alignment of the object. An array uses the same alignment as its elements. Structure and union objects may require padding to meet size and alignment constraints:\hyphpar0\par\pard\sb100\li1160\sl220\fi-200\qj \tx1160 \fs16\lang1024 \'95\tab \fs20 An entire structure or union object is aligned on the same boundary as its most strictly aligned member.\hyphpar0\par\pard\sb100\li1160\sl220\fi-200\qj \tx1160 \fs16 \'95\tab \fs20 Each member is assigned to the lowest available offset with the appropriate alignment. This may require internal padding, depending on the previous member.\hyphpar0\par\pard\sb100\li1160\sl220\fi-200\qj \tx1160 \fs16 \'95\tab \fs20 If necessary, a structure's size is increased to make it a multiple of the structure's alignment. This may require tail padding if the last member does not end on the appropriate boundary.\hyphpar0\par\pard\sb100\li960\sl220\qj \lang1033 In the following examples ({\field{\*\fldinst   HYPERLINK  \\l ID_STRUCT1}{\fldrslt Figure 1-5}} to {\field{\*\fldinst   HYPERLINK  \\l ID_STRUCT5}{\fldrslt Figure 1-9}}), member byte offsets (for the big-endian implementation) appear in the upper left corners.\hyphpar0\par\pard\sb200\li1160\ri200\sl198\qj {\*\bkmkstart ID_STRUCT1}{\*\bkmkend ID_STRUCT1}\b\fs18\lang1024 Table 1-2. \sa100\keepn\par\trowd\trleft1160 \clvertalt\cellx4182\clvertalt\cellx8199 \plain \pard\intbl\sb200\li240\ri100\sl198\qj \fs18\lang1033\f1 struct \{\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
         char c;\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\};\sa260\cell \plain \pard\intbl\sb100\li240\ri100{\field\flddirty{\*\fldinst INCLUDEPICTURE "pics/strctsmall.png" }{\fldrslt }}\pard\intbl\sl-160\par\cell \row \pard\plain\sl-1\keepn\hyphpar0\par\pard\sb200\li960\sl220\qj \b\fs20\f1 Figure 1-5. Structure smaller than a word\hyphpar0\par\pard\sb200\li1160\ri200\sl198\qj {\*\bkmkstart ID_STRUCT2}{\*\bkmkend ID_STRUCT2}\fs18 Table 1-3. \sa100\keepn\par\trowd\trleft1160 \clvertalt\cellx3400\clvertalt\cellx8200 \plain \pard\intbl\sb200\li240\ri100\sl198\qj \fs18\lang1033\f1 struct \{\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
         char c;\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
         char d;\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
         short s;\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
         int n;\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\};\sa260\cell \plain \pard\intbl\sb100\li240\ri100{\field\flddirty{\*\fldinst INCLUDEPICTURE "pics/strct8nop.png" }{\fldrslt }}\pard\intbl\sl-160\par\cell \row \pard\plain\sl-1\keepn\hyphpar0\par\pard\sb200\li960\sl220\qj \b\fs20\f1 Figure 1-6. No padding\hyphpar0\par\pard\sb200\li1160\ri200\sl198\qj {\*\bkmkstart ID_STRUCT3}{\*\bkmkend ID_STRUCT3}\fs18 Table 1-4. \sa100\keepn\par\trowd\trleft1160 \clvertalt\cellx3400\clvertalt\cellx8200 \plain \pard\intbl\sb200\li240\ri100\sl198\qj \fs18\lang1033\f1 struct \{\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
         char c;\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
         short s;\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\};\sa260\cell \plain \pard\intbl\sb100\li240\ri100{\field\flddirty{\*\fldinst INCLUDEPICTURE "pics/strct4pad.png" }{\fldrslt }}\pard\intbl\sl-160\par\cell \row \pard\plain\sl-1\keepn\hyphpar0\par\pard\sb200\li960\sl220\qj \b\fs20\f1 Figure 1-7. Internal padding\hyphpar0\par\pard\sb200\li1160\ri200\sl198\qj {\*\bkmkstart ID_STRUCT4}{\*\bkmkend ID_STRUCT4}\fs18 Table 1-5. \sa100\keepn\par\trowd\trleft1160 \clvertalt\cellx3530\clvertalt\cellx8199 \plain \pard\intbl\sb200\li240\ri100\sl198\qj \fs18\lang1033\f1 struct \{\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
         char c;\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
         double d;\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
         short s;\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\};\sa260\cell \plain \pard\intbl\sb100\li240\ri100{\field\flddirty{\*\fldinst INCLUDEPICTURE "pics/strct24pad.png" }{\fldrslt }}\pard\intbl\sl-160\par\cell \row \pard\plain\sl-1\keepn\hyphpar0\par\pard\sb200\li960\sl220\qj \b\fs20\f1 Figure 1-8. Internal and tail padding\hyphpar0\par\pard\sb200\li1160\ri200\sl198\qj {\*\bkmkstart ID_STRUCT5}{\*\bkmkend ID_STRUCT5}\fs18 Table 1-6. \sa100\keepn\par\trowd\trleft1160 \clvertalt\cellx3530\clvertalt\cellx8199 \plain \pard\intbl\sb200\li240\ri100\sl198\qj \fs18\lang1033\f1 union  \{\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
         char c;\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
         short s;\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
         int   j;\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\};\sa260\cell \plain \pard\intbl\sb100\li240\ri100{\field\flddirty{\*\fldinst INCLUDEPICTURE "pics/strctunion.png" }{\fldrslt }}\pard\intbl\sl-160\par\cell \row \pard\plain\sl-1\keepn\hyphpar0\par\pard\sb200\li960\sl220\qj \b\fs20\f1 Figure 1-9. Union padding\hyphpar0\par\pard\sb200\s4\li960\sl220 \f2 Bit-fields\keepn\hyphpar0\par\pard\sb100\li960\sl220\qj \b0\lang1033\f1 C struct and union definitions may have "bit-fields," defining integral objects with a specified number of bits (see {\field{\*\fldinst   HYPERLINK  \\l ID_BITFIELDTABLE}{\fldrslt Table 1-7}}). \hyphpar0\par\pard\sb200\li960\sl220\qj {\*\bkmkstart ID_BITFIELDTABLE}{\*\bkmkend ID_BITFIELDTABLE}\b\lang1024 Table 1-7. Bit fields\sa100\keepn\par\trowd\trleft960\trhdr \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3304\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5571\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8399 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \b\fs20\lang1033\f2 Bit-field type\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \b\fs20\lang1033\f2 Width n\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \b\fs20\lang1033\f2 Range\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3304\clvertalc\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5571\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8399 \plain \pard\intbl\sb200\li40\ri100\sl220\qj \fs20\lang1033\f1 signed char\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
char\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
unsigned char\sa260\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 1 to 8\sa160\cell \plain \pard\intbl\sb200\li40\ri100\sl220\qj \fs20\lang1033\f1 -2\u-3\'3f\u-3\'3f\'b9 to\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
2\u-3\'3f\u-3\'3f\'b9 - 1\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
0 to 2\u-3\'3f - 1\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
0 to 2\u-3\'3f - 1\sa260\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3304\clvertalc\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5571\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8399 \plain \pard\intbl\sb200\li40\ri100\sl220\qj \fs20\lang1033\f1 signed short\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
short\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
unsigned short\sa260\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 1 to 16\sa160\cell \plain \pard\intbl\sb200\li40\ri100\sl220\qj \fs20\lang1033\f1 -2\u-3\'3f\u-3\'3f\'b9 to\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
2\u-3\'3f\u-3\'3f\'b9 - 1\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
0 to 2\u-3\'3f - 1\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
0 to 2\u-3\'3f - 1\sa260\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3304\clvertalc\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5571\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8399 \plain \pard\intbl\sb200\li40\ri100\sl220\qj \fs20\lang1033\f1 signed int\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
int\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
unsigned int\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
enum\sa260\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 1 to 32\sa160\cell \plain \pard\intbl\sb200\li40\ri100\sl220\qj \fs20\lang1033\f1 -2\u-3\'3f\u-3\'3f\'b9 to\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
2\u-3\'3f\u-3\'3f\'b9 - 1\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
0 to 2\u-3\'3f - 1\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
0 to 2\u-3\'3f - 1\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
0 to 2\u-3\'3f - 1\sa260\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3304\clvertalc\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5571\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8399 \plain \pard\intbl\sb200\li40\ri100\sl220\qj \fs20\lang1033\f1 signed long\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
long\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
unsigned long\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
signed long long\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
long long\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
unsigned long long\sa260\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 1 to 64\sa160\cell \plain \pard\intbl\sb200\li40\ri100\sl220\qj \fs20\lang1033\f1 -2\u-3\'3f\u-3\'3f\'b9 to\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
2\u-3\'3f\u-3\'3f\'b9 - 1\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
0 to 2\u-3\'3f - 1\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
0 to 2\u-3\'3f - 1\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
-2\u-3\'3f\u-3\'3f\'b9 to 2\u-3\'3f\u-3\'3f\'b9 - 1\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
0 to 2\u-3\'3f - 1\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
0 to 2\u-3\'3f -\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
1\sa260\cell \row \pard\plain\sl-1\hyphpar0\par\pard\sb200\li960\sl220\qj \fs20\lang1033\f1 "Plain" bit-fields (that is, those neither signed nor unsigned) always have non-negative values. Although they may have type short, int or long (which can have negative values), bit-fields of these types have the same range as bit-fields of the same size with the corresponding unsigned type. Bit-fields obey the same size and alignment rules as other structure and union members, with the following additions:\hyphpar0\par\pard\sb100\li1160\sl220\fi-200\qj \tx1160 \fs16\lang1024 \'95\tab \fs20 Bit-fields are allocated from left to right (most to least significant).\hyphpar0\par\pard\sb100\li1160\sl220\fi-200\qj \tx1160 \fs16 \'95\tab \fs20 A bit-field must entirely reside in a storage unit appropriate for its declared type. Thus, a bit-field never crosses its unit boundary. \hyphpar0\par\pard\sb100\li1160\sl220\fi-200\qj \tx1160 \fs16 \'95\tab \fs20 Bit-fields must share a storage unit with other structure and union members (either bit-field or non-bit-field) if and only if there is sufficient space within the storage unit.\hyphpar0\par\pard\sb100\li1160\sl220\fi-200\qj \tx1160 \fs16 \'95\tab \fs20 Unnamed bit-fields' types do not affect the alignment of a structure or union, although an individual bit-field's member offsets obey the alignment constraints. An unnamed, zero-width bit-field shall prevent any further member, bit-field or other, from residing in the storage unit corresponding to the type of the zero-width bit-field.\hyphpar0\par\pard\sb100\li960\sl220\qj \lang1033 The following examples ({\field{\*\fldinst   HYPERLINK  \\l ID_FIGBITNUM}{\fldrslt Figure 1-10}} through {\field{\*\fldinst   HYPERLINK  \\l ID_FIGUNNBITF}{\fldrslt Figure 1-15}}) show structure and union member byte offsets in the upper left corners. Bit numbers appear in the lower corners.\hyphpar0\par\pard\sb200\li960{\*\bkmkstart ID_FIGBITNUM}{\*\bkmkend ID_FIGBITNUM}{\field\flddirty{\*\fldinst INCLUDEPICTURE "pics/bitnum.png" }{\fldrslt }}\keepn\par\pard\sb100\li960\sl220\qj \b\lang1024 Figure 1-10. Bit numbering\hyphpar0\par\pard\sb200\li960{\*\bkmkstart ID_FIGLRALLOC}{\*\bkmkend ID_FIGLRALLOC}{\field\flddirty{\*\fldinst INCLUDEPICTURE "pics/lralloc.png" }{\fldrslt }}\keepn\par\pard\sb100\li960\sl220\qj Figure 1-11. Left-to-right allocation\hyphpar0\par\pard\sb200\li960{\*\bkmkstart ID_FIGBALIGN}{\*\bkmkend ID_FIGBALIGN}{\field\flddirty{\*\fldinst INCLUDEPICTURE "pics/balign.png" }{\fldrslt }}\keepn\par\pard\sb100\li960\sl220\qj Figure 1-12. Boundary alignment\hyphpar0\par\pard\sb200\li960{\*\bkmkstart ID_FIGSUSHAR}{\*\bkmkend ID_FIGSUSHAR}{\field\flddirty{\*\fldinst INCLUDEPICTURE "pics/sushar.png" }{\fldrslt }}\keepn\par\pard\sb100\li960\sl220\qj Figure 1-13. Storage unit sharing\hyphpar0\par\pard\sb200\li960{\*\bkmkstart ID_FIGUNALLOC}{\*\bkmkend ID_FIGUNALLOC}{\field\flddirty{\*\fldinst INCLUDEPICTURE "pics/unalloc.png" }{\fldrslt }}\keepn\par\pard\sb100\li960\sl220\qj Figure 1-14. Union allocation\hyphpar0\par\pard\sb200\li960{\*\bkmkstart ID_FIGUNNBITF}{\*\bkmkend ID_FIGUNNBITF}{\field\flddirty{\*\fldinst INCLUDEPICTURE "pics/unnbitf.png" }{\fldrslt }}\keepn\par\pard\sb100\li960\sl220\qj Figure 1-15. Unnamed bit fields\hyphpar0\par\pard\sb200\s2\sl266 {\*\bkmkstart _391}{\*\bkmkend _391}\fs24\f2 Function calling sequence\keepn\hyphpar0\par\pard\sb121\li960\sl220\qj \b0\fs20\lang1033\f1 This section discusses the standard function calling sequence, including stack frame layout, register usage, and parameter passing.\hyphpar0\par\pard\sb200\s3\li960\sl242 {\*\bkmkstart _394}{\*\bkmkend _394}\b\fs22\lang1024\f2 Registers\keepn\hyphpar0\par\pard\sb110\li960\sl220\qj \b0\fs20\lang1033\f1 The ABI makes the assumption that the processor has 16 general purpose registers and 16 IEEE floating point registers. zSeries processors have these registers; each register is 64 bits wide. The use of the registers is described in the table below.\hyphpar0\par\pard\sb200\li960\sl220\qj \b\lang1024 Table 1-8. \sa100\keepn\par\trowd\trleft960\trhdr \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\cellx4604\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\cellx6729\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\cellx8399 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \b\fs20\lang1033\f2 Register name\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \b\fs20\lang1033\f2 Usage\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \b\fs20\lang1033\f2 Call effect\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\cellx4604\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\cellx6729\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\cellx8399 \plain \pard\intbl\sb200\li40\ri100\sl220\qj \fs20\lang1033\f1 r0,\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
r1\sa260\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 General purpose\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Volatile\'b9\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\cellx4604\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\cellx6729\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\cellx8399 \plain \pard\intbl\sb200\li40\ri100\sl220\qj \fs20\lang1033\f1 r2\sa260\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Parameter passing and return values\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Volatile\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\cellx4604\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\cellx6729\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\cellx8399 \plain \pard\intbl\sb200\li40\ri100\sl220\qj \fs20\lang1033\f1 r3, r4,\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
r5\sa260\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Parameter passing\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Volatile\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\cellx4604\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\cellx6729\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\cellx8399 \plain \pard\intbl\sb200\li40\ri100\sl220\qj \fs20\lang1033\f1 r6\sa260\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Parameter passing\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Saved\'b2\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\cellx4604\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\cellx6729\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\cellx8399 \plain \pard\intbl\sb200\li40\ri100\sl220\qj \fs20\lang1033\f1 r7 -\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
r11\sa260\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Local variables\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Saved\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\cellx4604\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\cellx6729\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\cellx8399 \plain \pard\intbl\sb200\li40\ri100\sl220\qj \fs20\lang1033\f1 r12\sa260\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Local variable, commonly used as GOT pointer\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Saved\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\cellx4604\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\cellx6729\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\cellx8399 \plain \pard\intbl\sb200\li40\ri100\sl220\qj \fs20\lang1033\f1 r13\sa260\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Local variable, commonly used as Literal Pool pointer\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Saved\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\cellx4604\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\cellx6729\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\cellx8399 \plain \pard\intbl\sb200\li40\ri100\sl220\qj \fs20\lang1033\f1 r14\sa260\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Return address\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Volatile\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\cellx4604\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\cellx6729\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\cellx8399 \plain \pard\intbl\sb200\li40\ri100\sl220\qj \fs20\lang1033\f1 r15\sa260\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Stack pointer\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Saved\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\cellx4604\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\cellx6729\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\cellx8399 \plain \pard\intbl\sb200\li40\ri100\sl220\qj \fs20\lang1033\f1 f0, f2, f4,\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
f6\sa260\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Parameter passing and return values\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Volatile\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\cellx4604\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\cellx6729\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\cellx8399 \plain \pard\intbl\sb200\li40\ri100\sl220\qj \fs20\lang1033\f1 f1, f3, f5,\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
f7\sa260\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 General purpose\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Volatile\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\cellx4604\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\cellx6729\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\cellx8399 \plain \pard\intbl\sb200\li40\ri100\sl220\qj \fs20\lang1033\f1 f8 \'96\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
f15\sa260\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 General purpose\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Saved\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\cellx4604\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\cellx6729\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\cellx8399 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Access registers 0, 1\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Reserved for system use\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Volatile\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\cellx4604\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\cellx6729\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\cellx8399 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Access registers 2-15\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 General purpose\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Volatile\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrb\brdrs\brdrw20\cellx8399 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 \'b9Volatile: These registers are not preserved across function calls.\hyphpar0\par\pard\intbl\sb100\li40\ri100\sl220\qj \'b2Saved: These registers belong to the calling function. A called function shall save these registers' values before it changes them, restoring their values before it returns.\sa160\cell \row \pard\plain\sl-1\hyphpar0\par\pard\sb200\li1160\sl220\fi-200\qj \tx1160 \fs16\lang1033\f1 \'95\tab \fs20 Registers r6 through r13, r15, f1, f3, f5 and f7 are nonvolatile; that is, they "belong" to the calling function. A called function shall save these registers' values before it changes them, restoring their values before it returns.\hyphpar0\par\pard\sb100\li1160\sl220\fi-200\qj \tx1160 \fs16 \'95\tab \fs20 Registers r0, r1, r2, r3, r4, r5, r14, f0, f2, f4, f6, f8 through f15 are volatile; that is, they are not preserved across function calls.\hyphpar0\par\pard\sb100\li1160\sl220\fi-200\qj \tx1160 \fs16 \'95\tab \fs20 Furthermore the values in registers r0 and r1 may be altered by the interface code in cross-module calls, so a function cannot depend on the values in these registers having the same values that were placed in them by the caller.\hyphpar0\par\pard\sb100\li960\sl220\qj The following registers have assigned roles in the standard calling sequence:\hyphpar0\par\pard\sb200\li960\sl220\qj \b\lang1024 Table 1-9. \sa100\keepn\par\trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3289\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8399 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 r12\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Global Offset Table pointer. If a position-independent module uses cross-linking the compiler must point r12 to the GOT as described in {\field{\*\fldinst   HYPERLINK  \\l ID_DYNAMICLINKING}{\fldrslt the Section called \i Dynamic Linking\i0  in Chapter 3}}. If not this register may be used locally. \sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3289\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8399 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 r13\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Commonly used as the Literal Pool pointer. If the Literal Pool is not required this register may be used locally.\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3289\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8399 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 r14\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 This register will contain the address to which a called function will normally return. r14 is volatile across function calls. \sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3289\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8399 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 r15\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 The stack pointer (stored in r15) will maintain an 8-byte alignment. It will always point to the lowest allocated valid stack frame, and will grow towards low addresses. The contents of the word addressed by this register may point to the previously allocated stack frame. If required it can be decremented by the called function \'96 see {\field{\*\fldinst   HYPERLINK  \\l ID_DYNAMICSTACK}{\fldrslt the Section called \i Dynamic stack space allocation}}. \sa160\cell \row \pard\plain\sl-1\hyphpar0\par\pard\sb200\li960\sl220\qj \fs20\lang1033\f1 Signals can interrupt processes. Functions called during signal handling have no unusual restrictions on their use of registers. Moreover, if a signal handling function returns, the process will resume its original execution path with all registers restored to their original values. Thus programs and compilers may freely use all registers listed above, except those reserved for system use, without the danger of signal handlers inadvertently changing their values.\hyphpar0\par\pard\sb200\s4\li960\sl220 \b\lang1024\f2 Register usage\keepn\hyphpar0\par\pard\sb100\li960\sl220\qj \b0\lang1033\f1 With these calling conventions the following usage of the registers for inline assemblies is recommended: \hyphpar0\par\pard\sb100\li1160\sl220\fi-200\qj \tx1160 \fs16 \'95\tab \fs20 General registers r0 and r1 should be used internally whenever possible\hyphpar0\par\pard\sb100\li1160\sl220\fi-200\qj \tx1160 \fs16 \'95\tab \fs20 General registers r2 to r5 should be second choice\hyphpar0\par\pard\sb100\li1160\sl220\fi-200\qj \tx1160 \fs16 \'95\tab \fs20 General registers r12 to r15 should only be used for their standard function.\hyphpar0\par\pard\sb200\s3\li960\sl242 {\*\bkmkstart _588}{\*\bkmkend _588}\b\fs22\lang1024\f2 The stack frame\keepn\hyphpar0\par\pard\sb110\li960\sl220\qj \b0\fs20\lang1033\f1 A function will be passed a frame on the runtime stack by the function which called it, and may allocate a new stack frame. A new stack frame is required if the called function will in turn call further functions (which must be passed the address of the new frame). This stack grows downwards from high addresses. {\field{\*\fldinst   HYPERLINK  \\l ID_STACKFRAME}{\fldrslt Figure 1-16}} shows the stack frame organization. SP in the figure denotes the stack pointer (general purpose register r15) passed to the called function on entry. Maintenance of the back chain pointers is not a requirement of the ABI, but the storage area for these pointers must be allocated whether used or not.\hyphpar0\par\pard\sb200\li960{\*\bkmkstart ID_STACKFRAME}{\*\bkmkend ID_STACKFRAME}{\field\flddirty{\*\fldinst INCLUDEPICTURE "pics/ststfr64.png" }{\fldrslt }}\keepn\par\pard\sb100\li960\sl220\qj \b\lang1024 Figure 1-16. Standard stack frame\hyphpar0\par\pard\sb200\li960\sl220\qj \b0\lang1033 The format of the register save area created by the gcc compiler is: \hyphpar0\par\pard\sb200\li960{\*\bkmkstart ID_REGSAVE}{\*\bkmkend ID_REGSAVE}{\field\flddirty{\*\fldinst INCLUDEPICTURE "pics/regsav64.png" }{\fldrslt }}\keepn\par\pard\sb100\li960\sl220\qj \b\lang1024 Figure 1-17. Register save area\hyphpar0\par\pard\sb200\li960\sl220\qj \b0\lang1033 The following requirements apply to the stack frame:\hyphpar0\par\pard\sb100\li1160\sl220\fi-200\qj \tx1160 \fs16\lang1024 \'95\tab \fs20 The stack pointer shall maintain 8-byte alignment.\hyphpar0\par\pard\sb100\li1160\sl220\fi-200\qj \tx1160 \fs16 \'95\tab \fs20 The stack pointer points to the first word of the lowest allocated stack frame. If the "back chain" is implemented this word will point to the previously allocated stack frame (towards higher addresses), except for the first stack frame, which shall have a back chain of zero (NULL). The stack shall grow downwards, in other words towards lower addresses.\hyphpar0\par\pard\sb100\li1160\sl220\fi-200\qj \tx1160 \fs16 \'95\tab \fs20 The called function may create a new stack frame by decrementing the stack pointer by the size of the new frame. This is required if this function calls further functions. The stack pointer must be restored prior to return. \hyphpar0\par\pard\sb100\li1160\sl220\fi-200\qj \tx1160 \fs16 \'95\tab \fs20 The parameter list area shall be allocated by the caller and shall be large enough to contain the arguments that the caller stores in it. Its contents are not preserved across calls.\hyphpar0\par\pard\sb100\li1160\sl220\fi-200\qj \tx1160 \fs16 \'95\tab \fs20 Other areas depend on the compiler and the code being compiled. The standard calling sequence does not define a maximum stack frame size. \hyphpar0\par\pard\sb100\li960\sl220\qj \lang1033 The stack space for the register save area and back chain must be allocated by the caller. The size of these is 160 bytes.\hyphpar0\par\pard\sb100\li960\sl220\qj Except for the stack frame header and any padding necessary to make the entire frame a multiple of 8 bytes in length, a function need not allocate space for the areas that it does not use. If a function does not call any other functions and does not require any of the other parts of the stack frame, it need not establish a stack frame. Any padding of the frame as a whole shall be within the local variable area; the parameter list area shall immediately follow the stack frame header, and the register save areas shall contain no padding.\hyphpar0\par\pard\sb200\s3\li960\sl242 {\*\bkmkstart ID_PARAMETERPASSING}{\*\bkmkend ID_PARAMETERPASSING}\b\fs22\lang1024\f2 Parameter passing\keepn\hyphpar0\par\pard\sb110\li960\sl220\qj \b0\fs20\lang1033\f1 Arguments to called functions are passed in registers. Since all computations must be performed in registers, memory traffic can be eliminated if the caller can compute arguments into registers and pass them in the same registers to the called function, where the called function can then use these arguments for further computation in the same registers. The number of registers implemented in a processor architecture naturally limits the number of arguments that can be passed in this manner.\hyphpar0\par\pard\sb100\li960\sl220\qj For Linux for zSeries, the following applies: \hyphpar0\par\pard\sb100\li1160\sl220\fi-200\qj \tx1160 \fs16 \'95\tab \fs20 General registers r2 to r6 are used for integer values.\hyphpar0\par\pard\sb100\li1160\sl220\fi-200\qj \tx1160 \fs16 \'95\tab \fs20 Floating point registers f0, f2, f4 and f6 are used for floating point values.\hyphpar0\par\pard\sb100\li960\sl220\qj If there are more than five integral values or four floating point values, the rest of the arguments are passed on the stack 160 bytes above the initial stack pointer.\hyphpar0\par\pard\sb100\li960\sl220\qj Beside these general rules the following rules apply: \hyphpar0\par\pard\sb100\li1160\sl220\fi-200\qj \tx1160 \fs16 \'95\tab \fs20 char, short, int, long and long long are passed in general registers.\hyphpar0\par\pard\sb100\li1160\sl220\fi-200\qj \tx1160 \fs16 \'95\tab \fs20 Structures with a size of 1, 2, 4, or 8 bytes are passed as integral values.\hyphpar0\par\pard\sb100\li1160\sl220\fi-200\qj \tx1160 \fs16 \'95\tab \fs20 All other structures are passed by reference. If needed, the called function makes a copy of the value.\hyphpar0\par\pard\sb100\li1160\sl220\fi-200\qj \tx1160 \fs16 \'95\tab \fs20 Complex numbers are passed as structures.\hyphpar0\par\pard\sb200\li960{\*\bkmkstart ID_PRMLISTAR}{\*\bkmkend ID_PRMLISTAR}{\field\flddirty{\*\fldinst INCLUDEPICTURE "pics/parla64.png" }{\fldrslt }}\keepn\par\pard\sb100\li960\sl220\qj \b\lang1024 Figure 1-18. Parameter list area\hyphpar0\par\pard\sb200\li960\sl220\qj \b0\lang1033 The following algorithm specifies where argument data is passed for the C language. For this purpose, consider the arguments as ordered from left (first argument) to right, although the order of evaluation of the arguments is unspecified. In this algorithm fr contains the number of the next available floating-point register, gr contains the number of the next available general purpose register, and starg is the address of the next available stack argument word.\hyphpar0\par\pard\sb200\sl220\qj \lang1024 INITIALIZE\keepn\hyphpar0\par\pard\sb100\li1360\sl220\fi-400\qj \tx1360 \~\tab Set fr=0, gr=2, and starg to the address of parameter word 1.\hyphpar0\par\pard\sb200\sl220\qj SCAN\keepn\hyphpar0\par\pard\sb100\li1360\sl220\fi-400\qj \tx1360 \~\tab If there are no more arguments, terminate. Otherwise, select one of the following depending on the type of the next argument: \hyphpar0\par\pard\sb200\sl220\qj DOUBLE_OR_FLOAT:\keepn\hyphpar0\par\pard\sb100\li1760\sl220\fi-400\qj \tx1760 \~\tab A DOUBLE_OR_FLOAT is one of the following: \hyphpar0\par\pard\sb100\li1960\sl220\fi-200\qj \tx1960 \fs16 \'95\tab \fs20 A single length floating point type,\hyphpar0\par\pard\sb100\li1960\sl220\fi-200\qj \tx1960 \fs16 \'95\tab \fs20 A double length floating point type.\hyphpar0\par\pard\sb100\li1760\sl220\qj If fr>6, that is, if there are no more available floating-point registers, go to OTHER. Otherwise, load the argument value into floating-point register fr, set fr to fr+2, and go to SCAN.\hyphpar0\par\pard\sb200\sl220\qj SIMPLE_ARG\keepn\hyphpar0\par\pard\sb100\li1760\sl220\fi-400\qj \tx1760 \~\tab A SIMPLE_ARG is one of the following: \hyphpar0\par\pard\sb100\li1960\sl220\fi-200\qj \tx1960 \fs16 \'95\tab \fs20 One of the simple integer types no more than 64 bits wide (char, short, int, long, long long, enum).\hyphpar0\par\pard\sb100\li1960\sl220\fi-200\qj \tx1960 \fs16 \'95\tab \fs20 A pointer to an object of any type.\hyphpar0\par\pard\sb100\li1960\sl220\fi-200\qj \tx1960 \fs16 \'95\tab \fs20 A struct or a union of 1, 2, 4 or 8 bytes.\hyphpar0\par\pard\sb100\li1960\sl220\fi-200\qj \tx1960 \fs16 \'95\tab \fs20 A struct or union of another size, or a long double, any of which shall be passed as a pointer to the object, or to a copy of the object where necessary to enforce call-by-value semantics. Only if the caller can ascertain that the object is "constant" can it pass a pointer to the object itself.\hyphpar0\par\pard\sb100\li1760\sl220\qj \lang1033 If gr>6, go to OTHER. Otherwise load the argument value into general register gr, set gr to gr+1, and go to SCAN. Values shorter than 64 bits are sign- or zero-extended (as appropriate) to 64 bits.\hyphpar0\par\pard\sb200\sl220\qj \lang1024 OTHER\keepn\hyphpar0\par\pard\sb100\li1360\sl220\fi-400\qj \tx1360 \~\tab Arguments not otherwise handled above are passed in the parameter words of the caller's stack frame. SIMPLE_ARGs, as defined above, are considered to have 8-byte size, with simple integer types shorter than 64 bits sign- or zero-extended (as appropriate) to 64 bits. float and double arguments are considered to have 8-byte size. Pad the stack by increasing starg to satisfy the alignment requirements of the argument, and copy the argument byte for byte to the new stack position. Update starg to point to the next byte after this copy, then go to SCAN.\hyphpar0\par\pard\sb100\li960\sl220\qj \lang1033 The contents of registers and words which are skipped by the above algorithm for alignment purposes (padding) are undefined.\hyphpar0\par\pard\sb100\li960\sl220\qj As an example, assume the declarations and the function call shown in {\field{\*\fldinst   HYPERLINK  \\l ID_PRMPASS}{\fldrslt Figure 1-19}}. The corresponding register allocation and storage would be as shown in {\field{\*\fldinst   HYPERLINK  \\l ID_TABPRMPASS}{\fldrslt Table 1-10}}.\hyphpar0\par\pard\sb200\li960\sl220\qj {\*\bkmkstart ID_PRMPASS}{\*\bkmkend ID_PRMPASS}\lang1024 int i, j, k, l;\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
long long ll;\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
double f, g, h;\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
int m;\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
x = func(i, j, g, k, l, ll, f, h,\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
m);\keepn\hyphpar0\par\pard\sb200\li960\sl220\qj \b Figure 1-19. Parameter passing example\hyphpar0\par\pard\sb200\li960\sl220\qj {\*\bkmkstart ID_TABPRMPASS}{\*\bkmkend ID_TABPRMPASS}Table 1-10. Parameter passing example: Register allocation\sa100\keepn\par\trowd\trleft960\trhdr \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3440\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5920\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8400 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \b\fs20\lang1033\f2 General purpose registers \sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \b\fs20\lang1033\f2 Floating-point registers \sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \b\fs20\lang1033\f2 Stack frame offset \sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3440\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5920\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8400 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 r2: i\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 f0: g\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 160: m\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3440\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5920\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8400 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 r3: j\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 f2: f\sa160\cell \plain \pard\intbl\sl-160\par\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3440\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5920\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8400 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 r4: k\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 f4: h\sa160\cell \plain \pard\intbl\sl-160\par\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3440\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5920\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8400 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 r5: l\sa160\cell \plain \pard\intbl\sl-160\par\cell \plain \pard\intbl\sl-160\par\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3440\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5920\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8400 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 r6: ll\sa160\cell \plain \pard\intbl\sl-160\par\cell \plain \pard\intbl\sl-160\par\cell \row \pard\plain\sl-1\hyphpar0\par\pard\sb200\s3\li960\sl242 {\*\bkmkstart _737}{\*\bkmkend _737}\b\fs22\f2 Variable argument lists\keepn\hyphpar0\par\pard\sb110\li960\sl220\qj \b0\fs20\lang1033\f1 Some otherwise portable C programs depend on the argument passing scheme, implicitly assuming that 1) all arguments are passed on the stack, and 2) arguments appear in increasing order on the stack. Programs that make these assumptions have never been portable, but they have worked on many implementations. However, they do not work on z/Architecture because some arguments are passed in registers. Portable C programs use the header files <stdarg.h> or <varargs.h> to deal with variable argument lists on zSeries and other machines as well.\hyphpar0\par\pard\sb200\s3\li960\sl242 {\*\bkmkstart _740}{\*\bkmkend _740}\b\fs22\lang1024\f2 Return values\keepn\hyphpar0\par\pard\sb110\li960\sl220\qj \b0\fs20\lang1033\f1 In general, arguments are returned in registers, as described in {\field{\*\fldinst   HYPERLINK  \\l ID_RETREG}{\fldrslt Table 1-11}}.\hyphpar0\par\pard\sb200\li960\sl220\qj {\*\bkmkstart ID_RETREG}{\*\bkmkend ID_RETREG}\b\lang1024 Table 1-11. Registers for return values\sa100\keepn\par\trowd\trleft960\trhdr \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\cellx4283\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\cellx8399 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \b\fs20\lang1033\f2 Type\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \b\fs20\lang1033\f2 Returned in register:\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\cellx4283\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\cellx8399 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 char, short, int, long and long long\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 general register 2 (r2)\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\cellx4283\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\cellx8399 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 double and float\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 floating point register 0 (f0)\sa160\cell \row \pard\plain\sl-1\hyphpar0\par\pard\sb200\li960\sl220\qj \fs20\lang1033\f1 Structures are returned on the stack, in the segment allocated by the caller. The pointer to the stack is passed as an invisible first argument in register 2.\hyphpar0\par\pard\sb100\li960\sl220\qj Functions shall return float or double values in f0, with float values rounded to single precision. Functions shall return values of type int, long, long long, enum, short and char, or a pointer to any type as unsigned or signed integers as appropriate, zero- or sign-extended to 64 bits if necessary, in r2. A structure or union whose size is 1, 2, 4 or 8 bytes shall be returned in r2 as if it were first stored in an 8-byte aligned memory area and then loaded into r2. Bits beyond the last member of the structure or union are not defined.\hyphpar0\par\pard\sb100\li960\sl220\qj Values of type long double and structures or unions that do not meet the requirements for being returned in registers are returned in a storage buffer allocated by the caller. The address of this buffer is passed as a hidden argument in r2 as if it were the first argument, causing gr in the argument passing algorithm above to be initialized to 3 instead of 2.\hyphpar0\par\pard\sb200\s2\sl266 {\*\bkmkstart _769}{\*\bkmkend _769}\b\fs24\lang1024\f2 Operating system interface\keepn\hyphpar0\par\pard\sb200\s3\li960\sl242 {\*\bkmkstart _771}{\*\bkmkend _771}\fs22 Virtual address space\keepn\hyphpar0\par\pard\sb110\li960\sl220\qj \b0\fs20\lang1033\f1 Processes execute in a 64-bit virtual address space. Memory management translates virtual addresses to physical addresses, hiding physical addressing and letting a process run anywhere in the system's real memory. Processes typically begin with three logical segments, commonly called "text", "data" and "stack". An object file may contain more segments (for example, for debugger use), and a process can also create additional segments for itself with system services.\hyphpar0\par\pard\sb200\li1360\sl198\qj \b\fs18\lang1024\f2 Note: \b0\f3 The term "virtual address" as used in this document refers to a 64-bit address generated by a program, as contrasted with the physical address to which it is mapped.\hyphpar0\par\pard\sb200\s3\li960\sl242 {\*\bkmkstart _776}{\*\bkmkend _776}\b\fs22\f2 Page size\keepn\hyphpar0\par\pard\sb110\li960\sl220\qj \b0\fs20\lang1033\f1 Memory is organized into pages, which are the system's smallest units of memory allocation. The hardware page size for z/Architecture is 4096 bytes. \hyphpar0\par\pard\sb200\s3\li960\sl242 {\*\bkmkstart _780}{\*\bkmkend _780}\b\fs22\lang1024\f2 Virtual address assignments\keepn\hyphpar0\par\pard\sb110\li960\sl220\qj \b0\fs20\lang1033\f1 Processes have a 42, 53 or 64-bit address space available to them, depending on the Linux kernel level.\hyphpar0\par\pard\sb100\li960\sl220\qj {\field{\*\fldinst   HYPERLINK  \\l ID_FIGVAC}{\fldrslt Figure 1-20}} shows the virtual address configuration on the zSeries architecture. The segments with different properties are typically grouped in different areas of the address space. The loadable segments may begin at zero (0); the exact addresses depend on the executable file format (see {\field{\*\fldinst   HYPERLINK  \\l ID_CHOBJFILES}{\fldrslt Chapter 2}} and {\field{\*\fldinst   HYPERLINK  \\l ID_CHPROGLOAD}{\fldrslt Chapter 3}}). The process' stack resides at the end of the virtual memory and grows downwards. Processes can control the amount of virtual memory allotted for stack space, as described below.\hyphpar0\par\pard\sb200\li960{\*\bkmkstart ID_FIGVAC}{\*\bkmkend ID_FIGVAC}{\field\flddirty{\*\fldinst INCLUDEPICTURE "pics/viradc64.png" }{\fldrslt }}\keepn\par\pard\sb100\li960\sl220\qj \b\lang1024 Figure 1-20. 42\'96bit virtual address configuration\hyphpar0\par\pard\sb200\li1360\sl198\qj \fs18\f2 Note: \b0\f3 Although application programs may begin at virtual address 0, they conventionally begin above 0x1000 (4 Kbytes), leaving the initial 4 Kbytes with an invalid address mapping. Processes that reference this invalid memory (for example by de-referencing a null pointer) generate an translation exception as described in {\field{\*\fldinst   HYPERLINK  \\l ID_EXCEPTIONINT}{\fldrslt the Section called \i Exception interface}}.\hyphpar0\par\pard\sb200\li960\sl220\qj \fs20\lang1033\f1 Although applications may control their memory assignments, the typical arrangement follows the diagram above. When applications let the system choose addresses for dynamic segments (including shared object segments), the system will prefer addresses in the upper half of the address space (for a 42\'96bit address space this means addresses above 1 TByte).\hyphpar0\par\pard\sb200\s3\li960\sl242 {\*\bkmkstart _796}{\*\bkmkend _796}\b\fs22\lang1024\f2 Managing the process stack\keepn\hyphpar0\par\pard\sb110\li960\sl220\qj \b0\fs20\lang1033\f1 The section {\field{\*\fldinst   HYPERLINK  \\l ID_PROCINIT}{\fldrslt the Section called \i Process initialization}} describes the initial stack contents. Stack addresses can change from one system to the next \'96 even from one process execution to the next on a single system. A program, therefore, should not depend on finding its stack at a particular virtual address.\hyphpar0\par\pard\sb100\li960\sl220\qj A tunable configuration parameter controls the system maximum stack size. A process can also use setrlimit to set its own maximum stack size, up to the system limit. The stack segment is both readable and writable.\hyphpar0\par\pard\sb200\s3\li960\sl242 {\*\bkmkstart _801}{\*\bkmkend _801}\b\fs22\lang1024\f2 Coding guidelines\keepn\hyphpar0\par\pard\sb110\li960\sl220\qj \b0\fs20\lang1033\f1 Operating system facilities, such as mmap, allow a process to establish address mappings in two ways. Firstly, the program can let the system choose an address. Secondly, the program can request the system to use an address the program supplies. The second alternative can cause application portability problems because the requested address might not always be available. Differences in virtual address space can be particularly troublesome between different architectures, but the same problems can arise within a single architecture. \hyphpar0\par\pard\sb100\li960\sl220\qj Processes' address spaces typically have three segments that can change size from one execution to the next: the stack (through setrlimit); the data segment (through malloc); and the dynamic segment area (through mmap). Changes in one area may affect the virtual addresses available for another. Consequently an address that is available in one process execution might not be available in the next. Thus a program that used mmap to request a mapping at a specific address could appear to work in some environments and fail in others. For this reason programs that want to establish a mapping in their address space should let the system choose the address.\hyphpar0\par\pard\sb100\li960\sl220\qj Despite these warnings about requesting specific addresses the facility can be used properly. For example, a multiprocess application might map several files into the address space of each process and build relative pointers among the files' data. This could be done by having each process ask for a certain amount of memory at an address chosen by the system. After each process receives its own private address from the system it would map the desired files into memory at specific addresses within the original area. This collection of mappings could be at different addresses in each process but their relative positions would be fixed. Without the ability to ask for specific addresses, the application could not build shared data structures because the relative positions for files in each process would be unpredictable.\hyphpar0\par\pard\sb200\s3\li960\sl242 {\*\bkmkstart _806}{\*\bkmkend _806}\b\fs22\lang1024\f2 Processor execution modes\keepn\hyphpar0\par\pard\sb110\li960\sl220\qj \b0\fs20\lang1033\f1 Two execution modes exist in z/Architecture: problem (user) state and supervisor state. Processes run in problem state (the less privileged). The operating system kernel runs in supervisor state. A program executes an supervisor call (svc) instruction to change execution modes.\hyphpar0\par\pard\sb100\li960\sl220\qj Note that the ABI does not define the implementation of individual system calls. Instead programs shall use the system libraries. Programs with embedded system call or trap instructions do not conform to the ABI.\hyphpar0\par\pard\sb200\s2\sl266 {\*\bkmkstart ID_EXCEPTIONINT}{\*\bkmkend ID_EXCEPTIONINT}\b\fs24\lang1024\f2 Exception interface\keepn\hyphpar0\par\pard\sb121\li960\sl220\qj \b0\fs20\lang1033\f1 The z/Architecture exception mechanism allows the processor to change to supervisor state as a result of six different causes: system calls, I/O interrupts, external interrupts, machine checks, restart interruptions or program checks (unusual conditions arising in the execution of instructions). \hyphpar0\par\pard\sb100\li960\sl220\qj When exceptions occur: \hyphpar0\par\pard\sb100\li1440\sl220\fi-480\qj \tqr\tx1390\tx1440\tab 1.\tab information (such as the address of the next instruction to  be executed after control is returned to the original program) is saved,\hyphpar0\par\pard\sb100\li1440\sl220\fi-480\qj \tqr\tx1390\tx1440\tab 2.\tab program control passes from user to supervisor level, and \hyphpar0\par\pard\sb100\li1440\sl220\fi-480\qj \tqr\tx1390\tx1440\tab 3.\tab software continues execution at an address (the exception  vector) predetermined for each exception.\hyphpar0\par\pard\sb100\li960\sl220\qj Exceptions may be synchronous or asynchronous. Synchronous exceptions, being caused by instruction execution, can be explicitly generated by a process. The operating system handles an exception either by completing the faulting operation in a manner transparent to the application or by delivering a signal to the application. The correspondence between exceptions and signals is shown in {\field{\*\fldinst   HYPERLINK  \\l ID_EXCEPTIONS}{\fldrslt Table 1-12}}.\hyphpar0\par\pard\sb200\li960\sl220\qj {\*\bkmkstart ID_EXCEPTIONS}{\*\bkmkend ID_EXCEPTIONS}\b\lang1024 Table 1-12. Exceptions and Signals\sa100\keepn\par\trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx2813\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3955\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8398 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Exception Name\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Signal\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Examples\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx2813\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3955\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8398 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Illegal instruction\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 SIGILL\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Illegal or privileged instruction, Invalid instruction form, Optional, unimplemented instruction\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx2813\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3955\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8398 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Storage access\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 SIGSEGV\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Unmapped instruction or data location access, Storage protection violation\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx2813\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3955\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8398 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Alignment\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 SIGBUS\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Invalid data item alignment, Invalid memory access \sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx2813\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3955\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8398 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Breakpoint\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 SIGTRAP\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Breakpoint program check\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx2813\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3955\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8398 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Floating exception\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 SIGFPE\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Floating point overflow or underflow, Floating point divide by zero, Floating point conversion overflow, Other enabled floating point exceptions\sa160\cell \row \pard\plain\sl-1\hyphpar0\par\pard\sb200\li960\sl220\qj \fs20\lang1033\f1 The signals that an exception may give rise to are SIGILL, SIGSEGV, SIGBUS, SIGTRAP, and SIGFPE. If one of these signals is generated due to an exception when the signal is blocked, the behavior is undefined.\hyphpar0\par\pard\sb200\s2\sl266 {\*\bkmkstart ID_PROCINIT}{\*\bkmkend ID_PROCINIT}\b\fs24\lang1024\f2 Process initialization\keepn\hyphpar0\par\pard\sb121\li960\sl220\qj \b0\fs20\lang1033\f1 This section describes the machine state that exec creates for "infant" processes, including argument passing, register usage, and stack frame layout. Programming language systems use this initial program state to establish a standard environment for their application programs. For example, a C program begins executing at a function named main, conventionally declared in the way described in {\field{\*\fldinst   HYPERLINK  \\l ID_DECLMAIN}{\fldrslt Figure 1-21}}:\hyphpar0\par\pard\sb200\li960\sl220\qj {\*\bkmkstart ID_DECLMAIN}{\*\bkmkend ID_DECLMAIN}\lang1024    extern int main (int argc, char\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
*argv[ ], char *envp[ ]);\keepn\hyphpar0\par\pard\sb200\li960\sl220\qj \b Figure 1-21. Declaration for main\hyphpar0\par\pard\sb200\li960\sl220\qj \b0\lang1033 Briefly, argc is a non-negative argument count; argv is an array of argument strings, with argv[argc] == 0, and envp is an array of environment strings, also terminated by a NULL pointer.\hyphpar0\par\pard\sb100\li960\sl220\qj Although this section does not describe C program initialization, it gives the information necessary to implement the call to main or to the entry point for a program in any other language.\hyphpar0\par\pard\sb200\s3\li960\sl242 {\*\bkmkstart _883}{\*\bkmkend _883}\b\fs22\lang1024\f2 Registers\keepn\hyphpar0\par\pard\sb110\li960\sl220\qj \b0\fs20\lang1033\f1 When a process is first entered (from an exec system call), the contents of registers other than those listed below are unspecified. Consequently, a program that requires registers to have specific values must set them explicitly during process initialization. It should not rely on the operating system to set all registers to 0. Following are the registers whose contents are specified:\hyphpar0\par\pard\sb200\li960\sl220\qj \b\lang1024 Table 1-13. \sa100\keepn\par\trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx1979\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8399 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 r15\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 The initial stack pointer, aligned to a 8-byte boundary and pointing to a stack location that contains the argument count (see {\field{\*\fldinst   HYPERLINK  \\l ID_PROCESSSTACK}{\fldrslt the Section called \i Process stack}} for further information about the initial stack layout)\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx1979\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8399 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 fpc\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 The floating point control register contains 0, specifying "round to nearest" mode and the disabling of floating-point exceptions \sa160\cell \row \pard\plain\sl-1\hyphpar0\par\pard\sb200\s3\li960\sl242 {\*\bkmkstart ID_PROCESSSTACK}{\*\bkmkend ID_PROCESSSTACK}\b\fs22\f2 Process stack\keepn\hyphpar0\par\pard\sb110\li960\sl220\qj \b0\fs20\lang1033\f1 Every process has a stack, but the system defines no fixed stack address. Furthermore, a program's stack address can change from one system to another \'96 even from one process invocation to another. Thus the process initialization code must use the stack address in general purpose register r15. Data in the stack segment at addresses below the stack pointer contain undefined values.\hyphpar0\par\pard\sb100\li960\sl220\qj Whereas the argument and environment vectors transmit information from one application program to another, the auxiliary vector conveys information from the operating system to the program. This vector is an array of structures, which are defined in {\field{\*\fldinst   HYPERLINK  \\l ID_AUXSTRUCT}{\fldrslt Figure 1-22}}.\hyphpar0\par\pard\sb200\li960\sl220\qj {\*\bkmkstart ID_AUXSTRUCT}{\*\bkmkend ID_AUXSTRUCT}\lang1024 typedef struct \{\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
                long a_type;\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
                union \{\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
                       long a_val;\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
                       void *a_ptr;\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
                       void (*a_fcn)();\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
               \} a_un;\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\} auxv_t;\keepn\hyphpar0\par\pard\sb200\li960\sl220\qj \b Figure 1-22. Auxiliary vector structure\hyphpar0\par\pard\sb200\li960\sl220\qj \b0\lang1033 The structures are interpreted according to the a_type member, as shown in {\field{\*\fldinst   HYPERLINK  \\l ID_AUXTYPES}{\fldrslt Table 1-14}}.\hyphpar0\par\pard\sb200\li960\sl220\qj {\*\bkmkstart ID_AUXTYPES}{\*\bkmkend ID_AUXTYPES}\b\lang1024 Table 1-14. Auxiliary Vector Types, a_type\sa100\keepn\par\trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3775\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5810\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8398 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Name\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Value\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 a_un\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3775\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5810\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8398 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 AT_NULL\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 0\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 ignored\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3775\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5810\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8398 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 AT_IGNORE\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 1\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 ignored\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3775\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5810\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8398 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 AT_EXECFD\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 2\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 a_val\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3775\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5810\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8398 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 AT_PHDR\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 3\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 a_ptr\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3775\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5810\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8398 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 AT_PHENT\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 4\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 a_val\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3775\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5810\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8398 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 AT_PHNUM\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 5\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 a_val\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3775\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5810\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8398 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 AT_PAGESZ\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 6\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 a_val\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3775\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5810\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8398 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 AT_BASE\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 7\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 a_ptr\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3775\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5810\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8398 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 AT_FLAGS\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 8\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 a_val\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3775\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5810\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8398 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 AT_ENTRY\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 9\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 a_ptr\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3775\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5810\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8398 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 AT_NOTELF\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 10\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 a_val\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3775\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5810\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8398 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 AT_UID\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 11\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 a_val\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3775\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5810\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8398 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 AT_EUID\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 12\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 a_val\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3775\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5810\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8398 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 AT_GID\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 13\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 a_val\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3775\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5810\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8398 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 AT_EGID\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 14\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 a_val\sa160\cell \row \pard\plain\sl-1\hyphpar0\par\pard\sb200\li960\sl220\qj \fs20\lang1033\f1 a_type auxiliary vector types are described in 'Auxiliary Vector Types Description' below.\hyphpar0\par\pard\sb165\s4\li960\sl242 {\*\bkmkstart ID_AUXTYPESDESC}{\*\bkmkend ID_AUXTYPESDESC}\b\fs22\lang1024\f2 Auxiliary Vector Types Description\keepn\hyphpar0\par\pard\sb200\sl220\qj \b0\fs20\f1  AT_NULL\keepn\hyphpar0\par\pard\sb100\li1360\sl220\fi-400\qj \tx1360 \~\tab The auxiliary vector has no fixed length; so an entry of this type is used to denote the end of the vector. The corresponding value of a_un is undefined. \hyphpar0\par\pard\sb200\sl220\qj AT_IGNORE\keepn\hyphpar0\par\pard\sb100\li1360\sl220\fi-400\qj \tx1360 \~\tab This type indicates the entry has no meaning. The corresponding value of a_un is undefined.\hyphpar0\par\pard\sb200\sl220\qj AT_EXECFD\keepn\hyphpar0\par\pard\sb100\li1360\sl220\fi-400\qj \tx1360 \~\tab exec may pass control to an interpreter program. When this happens, the system places either an entry of type AT_EXECFD or one of type AT_PHDR in the auxiliary vector. The a_val field in the AT_EXECFD entry contains a file descriptor for the application program's object file.\hyphpar0\par\pard\sb200\sl220\qj AT_PHDR\keepn\hyphpar0\par\pard\sb100\li1360\sl220\fi-400\qj \tx1360 \~\tab Under some conditions, the system creates the memory image of the application program before passing control to an interpreter program. When this happens, the a_ptr field of the AT_PHDR entry tells the interpreter where to find the program header table in the memory image. If the AT_PHDR entry is present, entries of types AT_PHENT, AT_PHNUM and AT_ENTRY must also be present. See the section {\field{\*\fldinst   HYPERLINK  \\l ID_CHPROGLOAD}{\fldrslt Chapter 3}} for more information about the program header table.\hyphpar0\par\pard\sb200\sl220\qj AT_PHENT\keepn\hyphpar0\par\pard\sb100\li1360\sl220\fi-400\qj \tx1360 \~\tab The a_val field of this entry holds the size, in bytes, of one entry in the program header table at which the AT_PHDR entry points.\hyphpar0\par\pard\sb200\sl220\qj AT_PHNUM\keepn\hyphpar0\par\pard\sb100\li1360\sl220\fi-400\qj \tx1360 \~\tab The a_val field of this entry holds the number of entries in the program header table at which the AT_PHDR entry points.\hyphpar0\par\pard\sb200\sl220\qj AT_PAGESZ\keepn\hyphpar0\par\pard\sb100\li1360\sl220\fi-400\qj \tx1360 \~\tab If present this entry's a_val field gives the system page size in bytes. The same information is also available through sysconf.\hyphpar0\par\pard\sb200\sl220\qj AT_BASE\keepn\hyphpar0\par\pard\sb100\li1360\sl220\fi-400\qj \tx1360 \~\tab The a_ptr member of this entry holds the base address at which the interpreter program was loaded into memory.\hyphpar0\par\pard\sb200\sl220\qj AT_FLAGS\keepn\hyphpar0\par\pard\sb100\li1360\sl220\fi-400\qj \tx1360 \~\tab If present, the a_val field of this entry holds 1-bit flags. Undefined bits are set to zero.\hyphpar0\par\pard\sb200\sl220\qj AT_ENTRY\keepn\hyphpar0\par\pard\sb100\li1360\sl220\fi-400\qj \tx1360 \~\tab The a_ptr field of this entry holds the entry point of the application program to which the interpreter program should transfer control.\hyphpar0\par\pard\sb200\sl220\qj AT_NOTELF\keepn\hyphpar0\par\pard\sb100\li1360\sl220\fi-400\qj \tx1360 \~\tab The a_val field of this entry is non-zero if the program is in another format than ELF, for example in the old COFF format.\hyphpar0\par\pard\sb200\sl220\qj AT_UID\keepn\hyphpar0\par\pard\sb100\li1360\sl220\fi-400\qj \tx1360 \~\tab The a_ptr field of this entry holds the real user id of the process. \hyphpar0\par\pard\sb200\sl220\qj AT_EUID\keepn\hyphpar0\par\pard\sb100\li1360\sl220\fi-400\qj \tx1360 \~\tab The a_ptr field of this entry holds the effective user id of the process. \hyphpar0\par\pard\sb200\sl220\qj AT_GID\keepn\hyphpar0\par\pard\sb100\li1360\sl220\fi-400\qj \tx1360 \~\tab The a_ptr field of this entry holds the real group id of the process. \hyphpar0\par\pard\sb200\sl220\qj AT_EGID\keepn\hyphpar0\par\pard\sb100\li1360\sl220\fi-400\qj \tx1360 \~\tab The a_ptr field of this entry holds the effective group id of the process. \hyphpar0\par\pard\sb100\li960\sl220\qj \lang1033 Other auxiliary vector types are reserved. No flags are currently defined for AT_FLAGS on the zSeries architecture.\hyphpar0\par\pard\sb100\li960\sl220\qj When a process receives control, its stack holds the arguments, environment, and auxiliary vector from exec. Argument strings, environment strings, and the auxiliary information appear in no specific order within the information block; the system makes no guarantees about their relative arrangement. The system may also leave an unspecified amount of memory between the null auxiliary vector entry and the beginning of the information block. A sample initial stack is shown in {\field{\*\fldinst   HYPERLINK  \\l ID_INISTACK}{\fldrslt Figure 1-23}}.\hyphpar0\par\pard\sb200\li960{\*\bkmkstart ID_INISTACK}{\*\bkmkend ID_INISTACK}{\field\flddirty{\*\fldinst INCLUDEPICTURE "pics/inipst64.png" }{\fldrslt }}\keepn\par\pard\sb100\li960\sl220\qj \b\lang1024 Figure 1-23. Initial Process Stack\hyphpar0\par\pard\sb200\s2\sl266 {\*\bkmkstart ID_CODINGEXAMPLES}{\*\bkmkend ID_CODINGEXAMPLES}\fs24\f2 Coding examples\keepn\hyphpar0\par\pard\sb121\li960\sl220\qj \b0\fs20\lang1033\f1 This section describes example code sequences for fundamental operations such as calling functions, accessing static objects, and transferring control from one part of a program to another. Previous sections discussed how a program may use the machine or the operating system, and they specified what a program may and may not assume about the execution environment. Unlike previous material, the information in this section illustrates how operations may be done, not how they must be done.\hyphpar0\par\pard\sb100\li960\sl220\qj As before, examples use the ANSI C language. Other programming languages may use the same conventions displayed below, but failure to do so does not prevent a program from conforming to the ABI. Two main object code models are available:\hyphpar0\par\pard\sb200\sl220\qj \lang1024 Absolute code\keepn\hyphpar0\par\pard\sb100\li1360\sl220\fi-400\qj \tx1360 \~\tab Instructions can hold absolute addresses under this model. To execute properly, the program must be loaded at a specific virtual address, making the program's absolute addresses coincide with the process' virtual addresses. \hyphpar0\par\pard\sb200\sl220\qj Position-independent code\keepn\hyphpar0\par\pard\sb100\li1360\sl220\fi-400\qj \tx1360 \~\tab Instructions under this model hold relative addresses, not absolute addresses. Consequently, the code is not tied to a specific load address, allowing it to execute properly at various positions in virtual memory.\hyphpar0\par\pard\sb100\li960\sl220\qj \lang1033 The following sections describe the differences between these models. When different, code sequences for the models appear together for easier comparison. \hyphpar0\par\pard\sb200\li1360\sl198\qj \b\fs18\lang1024\f2 Note: \b0\f3 The examples below show code fragments with various simplifications. They are intended to explain addressing modes, not to show optimal code sequences or to reproduce compiler output.\hyphpar0\par\pard\sb200\s3\li960\sl242 {\*\bkmkstart _1121}{\*\bkmkend _1121}\b\fs22\f2 Code model overview\keepn\hyphpar0\par\pard\sb110\li960\sl220\qj \b0\fs20\lang1033\f1 When the system creates a process image, the executable file portion of the process has fixed addresses and the system chooses shared object library virtual addresses to avoid conflicts with other segments in the process. To maximize text sharing, shared objects conventionally use position-independent code, in which instructions contain no absolute addresses. Shared object text segments can be loaded at various virtual addresses without having to change the segment images. Thus multiple processes can share a single shared object text segment, even if the segment resides at a different virtual address in each process.\hyphpar0\par\pard\sb100\li960\sl220\qj Position-independent code relies on two techniques:\hyphpar0\par\pard\sb100\li1160\sl220\fi-200\qj \tx1160 \fs16\lang1024 \'95\tab \fs20 Control transfer instructions hold addresses relative to the Current Instruction Address (CIA), or use registers that hold the transfer address. A CIA-relative branch computes its destination address in terms of the CIA, not relative to any absolute address.\hyphpar0\par\pard\sb100\li1160\sl220\fi-200\qj \tx1160 \fs16 \'95\tab \fs20 When the program requires an absolute address, it computes the desired value. Instead of embedding absolute addresses in instructions (in the text segment), the compiler generates code to calculate an absolute address (in a register or in the stack or data segment) during execution. \hyphpar0\par\pard\sb100\li960\sl220\qj \lang1033 Because z/Architecture provides CIA-relative branch instructions and also branch instructions using registers that hold the transfer address, compilers can satisfy the first condition easily.\hyphpar0\par\pard\sb100\li960\sl220\qj A Global Offset Table (GOT), provides information for address calculation. Position-independent object files (executable and shared object files) have a table in their data segment that holds addresses. When the system creates the memory image for an object file, the table entries are relocated to reflect the absolute virtual address as assigned for an individual process. Because data segments are private for each process, the table entries can change \'96 unlike text segments, which multiple processes share.\hyphpar0\par\pard\sb100\li960\sl220\qj Two position-independent models give programs a choice between more efficient code with some size restrictions and less efficient code without those restrictions. Because of the processor architecture, a GOT with no more than 512 entries (4096 bytes) is more efficient than a larger one. Programs that need more entries must use the larger, more general code. In the following sections, the term "small model position-independent code" is used to refer to code that assumes the smaller GOT, and "large model position-independent code" is used to refer to the general code.\hyphpar0\par\pard\sb200\s3\li960\sl242 {\*\bkmkstart _1133}{\*\bkmkend _1133}\b\fs22\lang1024\f2 Function prolog and epilog\keepn\hyphpar0\par\pard\sb110\li960\sl220\qj \b0\fs20\lang1033\f1 This section describes the prolog and epilog code of functions . A function's prolog establishes a stack frame, if necessary, and may save any nonvolatile registers it uses. A function's epilog generally restores registers that were saved in the prolog code, restores the previous stack frame, and returns to the caller.\hyphpar0\par\pard\sb200\s4\li960\sl220 \b\lang1024\f2 Prolog\keepn\hyphpar0\par\pard\sb100\li960\sl220\qj \b0\lang1033\f1 The prolog of a function has to save the state of the calling function and set up the base register for the code of the function body. The following is in general done by the function prolog: \hyphpar0\par\pard\sb100\li1160\sl220\fi-200\qj \tx1160 \fs16 \'95\tab \fs20 Save all registers used within the function which the calling function assumes to be non-volatile.\hyphpar0\par\pard\sb100\li1160\sl220\fi-200\qj \tx1160 \fs16 \'95\tab \fs20 Set up the base register for the literal pool.\hyphpar0\par\pard\sb100\li1160\sl220\fi-200\qj \tx1160 \fs16 \'95\tab \fs20 Allocate stack space by decrementing the stack pointer.\hyphpar0\par\pard\sb100\li1160\sl220\fi-200\qj \tx1160 \fs16 \'95\tab \fs20 Set up the dynamic chain by storing the old stack pointer value at stack location zero if the "back chain" is implemented.\hyphpar0\par\pard\sb100\li1160\sl220\fi-200\qj \tx1160 \fs16 \'95\tab \fs20 Set up the GOT pointer if the compiler is generating position independent code. \hyphpar0\par\pard\sb100\li1160\sl220\qj (A function that is position independent will probably want to load a pointer to the GOT into a nonvolatile register. This may be omitted if the function makes no external data references. If external data references are only made within conditional code, loading the GOT pointer may be deferred until it is known to be needed.)\hyphpar0\par\pard\sb100\li1160\sl220\fi-200\qj \tx1160 \fs16 \'95\tab \fs20 Set up the frame pointer if the function allocates stack space dynamically (with alloca).\hyphpar0\par\pard\sb100\li960\sl220\qj The compiler tries to do as little as possible of the above; the ideal case is to do nothing at all (for a leaf function without symbolic references). \hyphpar0\par\pard\sb200\s4\li960\sl220 \b\lang1024\f2 Epilog\keepn\hyphpar0\par\pard\sb100\li960\sl220\qj \b0\lang1033\f1 The epilog of a function restores the registers saved in the prolog (which include the stack pointer) and branches to the return address.\hyphpar0\par\pard\sb200\s4\li960\sl220 \b\lang1024\f2 Prolog and epilog example\keepn\hyphpar0\par\pard\sb200\li960\sl220\qj {\*\bkmkstart ID_PROLCODE}{\*\bkmkend ID_PROLCODE}\b0\f1 .section  .rodata\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
          .align 2\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
.LC0:\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
          .string "hello, world\\n"\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
.text\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
          .align 4\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
.globl    main\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
          .type  main,@function\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
main:\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
                                       # Prolog\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
          STMG   11,15,88(15)          # Save callers registers\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
          LARL   13,.LT0_0             # Load literal pool pointer\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
.section  .rodata                      # Switch for literal pool\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
          .align 2                     #  to read-only data section\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
.LT0_0:\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
.LC2:\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
          .quad  65536\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
.LTN0_0:\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
.text                                  # Back to text section\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
          LGR    1,15                  # Load stack pointer in GPR 1\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
          AGHI   15,-160               # Allocate stack space\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
          STG    1,0(15)               # Store backchain\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
                                       # Prolog end\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
          LARL   2,.LC0\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
          LG     3,.LC2-.LT0_0(13)\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
          BRASL  14,printf\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
          LGHI   2,0\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
                                       # Epilog\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
          LG     4,272(15)             # Load return address\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
          LMG    11,15,248(15)         # Restore registers\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
          BR     4                     # Branch back to caller\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
                                       # Epilog end\keepn\hyphpar0\par\pard\sb200\li960\sl220\qj \b Figure 1-24. Prolog and epilog example\hyphpar0\par\pard\sb200\s3\li960\sl242 {\*\bkmkstart _1163}{\*\bkmkend _1163}\fs22\f2 Profiling\keepn\hyphpar0\par\pard\sb110\li960\sl220\qj \b0\fs20\lang1033\f1 This section shows a way of providing profiling (entry counting) on zSeries systems. An ABI-conforming system is not required to provide profiling; however if it does this is one possible (not required) implementation.\hyphpar0\par\pard\sb100\li960\sl220\qj If a function is to be profiled it has to call the _mcount routine after the function prolog. This routine has a special linkage. It gets an address in register 1 and returns without having changed any register. The address is a pointer to a word-aligned one-word static data area, initialized to zero, in which the _mcount routine is to maintain a count of the number of times the function is called.\hyphpar0\par\pard\sb100\li960\sl220\qj For example {\field{\*\fldinst   HYPERLINK  \\l ID_PROFCODE}{\fldrslt Figure 1-25}} shows how the code after the function prolog may look.\hyphpar0\par\pard\sb200\li960\sl220\qj {\*\bkmkstart ID_PROFCODE}{\*\bkmkend ID_PROFCODE}\lang1024           STMG    7,15,56(15)          #\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
Save callers registers\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
          LGR     1,15                 # Stack pointer\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
          AGHI    15,-160              # Allocate new\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
          STG     1,0(15)              # Save backchain\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
          LGR     11,15                # Local stack pointer\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
          .data\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
          .align 4\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
.LP0:     .quad   0                    # Profile counter\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
          .text\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
                                       # Function profiler\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
          STG   14,8(15)               # Preserve r14\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
          LARL  1,.LPO                 # Load address of profile counter\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
          BRASL 14,_mcount             # Branch to _mcount\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
          LG    14,8(15)               # Restore r14\keepn\hyphpar0\par\pard\sb200\li960\sl220\qj \b Figure 1-25. Code for profiling\hyphpar0\par\pard\sb200\s3\li960\sl242 {\*\bkmkstart _1173}{\*\bkmkend _1173}\fs22\f2 Data objects\keepn\hyphpar0\par\pard\sb110\li960\sl220\qj \b0\fs20\lang1033\f1 This section describes only objects with static storage duration. It excludes stack-resident objects because programs always compute their virtual addresses relative to the stack or frame pointers.\hyphpar0\par\pard\sb100\li960\sl220\qj Because zSeries instructions cannot hold 64-bit addresses directly, a program has to build an address in a register and access memory through that register. In order to do so a function normally has a literal pool that holds the addresses of data objects used by the function. Register 13 is set up in the function prolog to point to the start of this literal pool.\hyphpar0\par\pard\sb100\li960\sl220\qj Position-independent code cannot contain absolute addresses. In order to access a local symbol the literal pool contains the (signed) offset of the symbol relative to the start of the pool. Combining the offset loaded from the literal pool with the address in register 13 gives the absolute address of the local symbol. In the case of a global symbol the address of the symbol has to be loaded from the Global Offset Table. The offset in the GOT can either be contained in the instruction itself or in the literal pool. See {\field{\*\fldinst   HYPERLINK  \\l ID_ADDRESSES}{\fldrslt Figure 1-26}} for an example.\hyphpar0\par\pard\sb100\li960\sl220\qj {\field{\*\fldinst   HYPERLINK  \\l ID_ADDRESSES}{\fldrslt Figure 1-26}} through {\field{\*\fldinst   HYPERLINK  \\l ID_LARGEGOT}{\fldrslt Figure 1-28}} show sample assembly language equivalents to C language code for absolute and position-independent compilations. It is assumed that all shared objects are compiled as position-independent and only executable modules may have absolute addresses. The code in the figures contains many redundant operations as it is only intended to show how each C statement could have been compiled independently of its context. The function prolog is not shown, and it is assumed that it has loaded the address of the literal pool in register 13.\hyphpar0\par\pard\sb200\li1160\ri200\sl198\qj {\*\bkmkstart ID_ADDRESSES}{\*\bkmkend ID_ADDRESSES}\b\fs18\lang1024 Table 1-15. \sa100\keepn\par\trowd\trleft1160\trhdr \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3786\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8199 \plain \pard\intbl\sb100\li240\ri100\sl198\qj \b\fs18\lang1033\f2 C\sa160\cell \plain \pard\intbl\sb100\li240\ri100\sl198\qj \b\fs18\lang1033\f2 zSeries machine instructions (Assembler) \sa160\cell \row \trowd\trleft1160 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3786\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8199 \plain \pard\intbl\sb200\li240\ri100\sl198\qj \fs18\lang1033\f1 extern int src;\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
extern int dst;\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
extern int *ptr;\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
dst = src;\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
ptr = &dst;\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
*ptr = src;\sa260\cell \plain \pard\intbl\sb200\li240\ri100\sl198\qj \fs18\lang1033\f1 \sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           LARL  1,dst\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           LARL  2,src\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           MVC   0(4,1),0(2)\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           LARL  1,ptr\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           LARL  2,dst\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           STG   2,0(1)\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           LARL  2,ptr\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           LG    1,0(2)\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           LARL  2,src\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           MVC  \sa0\par\fi0\sb0
\sa0\par\fi0\sb0
0(4,1),0(2)\sa260\cell \row \pard\plain\sl-1\keepn\hyphpar0\par\pard\sb200\li960\sl220\qj \b\fs20\f1 Figure 1-26. Absolute addressing\hyphpar0\par\pard\sb200\li1160\ri200\sl198\qj {\*\bkmkstart ID_SMALLGOT}{\*\bkmkend ID_SMALLGOT}\fs18 Table 1-16. \sa100\keepn\par\trowd\trleft1160\trhdr \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3795\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8199 \plain \pard\intbl\sb100\li240\ri100\sl198\qj \b\fs18\lang1033\f2 C\sa160\cell \plain \pard\intbl\sb100\li240\ri100\sl198\qj \b\fs18\lang1033\f2 zSeries machine instructions (Assembler) \sa160\cell \row \trowd\trleft1160 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3795\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8199 \plain \pard\intbl\sb200\li240\ri100\sl198\qj \fs18\lang1033\f1 extern int src;\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
extern int dst;\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
extern int *ptr;\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
dst = src;\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
ptr = &dst;\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
*ptr = src;\sa260\cell \plain \pard\intbl\sb200\li240\ri100\sl198\qj \fs18\lang1033\f1 \sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           LARL  12,_GLOBAL_OFFSET_TABLE_\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           LG    1,dst@GOT12(12)\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           LG    2,src@GOT12(12)\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           LGF   3,0(2)\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           ST    3,0(1)\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           LARL  12,_GLOBAL_OFFSET_TABLE_\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           LG    1,ptr@GOT12(12)\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           LG    2,dst@GOT12(12)\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           STG   2,0(1)\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           LARL  12,_GLOBAL_OFFSET_TABLE_\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           LG    2,ptr@GOT12(12)\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           LG    1,0(2)\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           LG    2,src@GOT12(12)\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           LGF   3,0(2)\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           ST   \sa0\par\fi0\sb0
\sa0\par\fi0\sb0
3,0(1)\sa260\cell \row \pard\plain\sl-1\keepn\hyphpar0\par\pard\sb200\li960\sl220\qj \b\fs20\f1 Figure 1-27. Small model position-independent addressing\hyphpar0\par\pard\sb200\li1160\ri200\sl198\qj {\*\bkmkstart ID_LARGEGOT}{\*\bkmkend ID_LARGEGOT}\fs18 Table 1-17. \sa100\keepn\par\trowd\trleft1160\trhdr \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3795\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8199 \plain \pard\intbl\sb100\li240\ri100\sl198\qj \b\fs18\lang1033\f2 C\sa160\cell \plain \pard\intbl\sb100\li240\ri100\sl198\qj \b\fs18\lang1033\f2 zSeries Assembler\sa160\cell \row \trowd\trleft1160 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3795\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8199 \plain \pard\intbl\sb200\li240\ri100\sl198\qj \fs18\lang1033\f1 extern int src;\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
extern int dst;\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
extern int *ptr;\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
dst = src;\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
ptr = &dst;\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
*ptr = src;\sa260\cell \plain \pard\intbl\sb200\li240\ri100\sl198\qj \fs18\lang1033\f1 \sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           LARL  2,dst@GOT\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           LG    2,0(2)\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           LARL  3,src@GOT\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           LG    3,0(3)\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           MVC   0(4,2),0(3)\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           LARL  2,ptr@GOT\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           LG    2,0(2)\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           LARL  3,dst@GOT\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           LG    3,0(3)\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           STG   3,0(2)\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           LARL  2,ptr@GOT\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           LG    2,0(2)\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           LG    1,0(2)\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           LARL  3,src@GOT\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           LG    3,0(3)\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           MVC  \sa0\par\fi0\sb0
\sa0\par\fi0\sb0
0(4,1),0(3)\sa260\cell \row \pard\plain\sl-1\keepn\hyphpar0\par\pard\sb200\li960\sl220\qj \b\fs20\f1 Figure 1-28. Large model position-independent addressing\hyphpar0\par\pard\sb200\s3\li960\sl242 {\*\bkmkstart _1254}{\*\bkmkend _1254}\fs22\f2 Function calls\keepn\hyphpar0\par\pard\sb110\li960\sl220\qj \b0\fs20\lang1033\f1 Programs can use the z/Architecture BRASL instruction to make direct function calls. A BRASL instruction has a self-relative branch displacement that can reach 4 GBytes in either direction. To call functions beyond this limit (inter-module calls) load the address in a register and use the BASR instruction for the call. Register 14 is used as the first operand of BASR to hold the return address as shown in {\field{\*\fldinst   HYPERLINK  \\l ID_FNCALLDIRECT}{\fldrslt Figure 1-29}}.\hyphpar0\par\pard\sb100\li960\sl220\qj The called function may be in the same module (executable or shared object) as the caller, or it may be in a different module. In the former case, if the called function is not in a shared object, the linkage editor resolves the symbol. In all other cases the linkage editor cannot directly resolve the symbol. Instead the linkage editor generates "glue" code and resolves the symbol to point to the glue code. The dynamic linker will provide the real address of the function in the Global Offset Table. The glue code loads this address and branches to the function itself. See {\field{\*\fldinst   HYPERLINK  \\l ID_PROCEDURELINKAGETABLE}{\fldrslt the Section called \i Procedure Linkage Table\i0  in Chapter 3}} for more details.\hyphpar0\par\pard\sb200\li1160\ri200\sl198\qj {\*\bkmkstart ID_FNCALLDIRECT}{\*\bkmkend ID_FNCALLDIRECT}\b\fs18\lang1024 Table 1-18. \sa100\keepn\par\trowd\trleft1160\trhdr \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3826\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8199 \plain \pard\intbl\sb100\li240\ri100\sl198\qj \b\fs18\lang1033\f2 C\sa160\cell \plain \pard\intbl\sb100\li240\ri100\sl198\qj \b\fs18\lang1033\f2 zSeries machine instructions (Assembler) \sa160\cell \row \trowd\trleft1160 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3826\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8199 \plain \pard\intbl\sb200\li240\ri100\sl198\qj \fs18\lang1033\f1 extern void func();\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
extern void (*ptr)();\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
ptr = func;\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
func();\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
(*ptr) ();\sa260\cell \plain \pard\intbl\sb200\li240\ri100\sl198\qj \fs18\lang1033\f1 \sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           LARL  1,ptr\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           LARL  2,func\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           STG   2,0(1)\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           BRASL 14,func\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           LARL  1,ptr\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           LG    1,0(1)\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           BASR \sa0\par\fi0\sb0
\sa0\par\fi0\sb0
14,1\sa260\cell \row \pard\plain\sl-1\keepn\hyphpar0\par\pard\sb200\li960\sl220\qj \b\fs20\f1 Figure 1-29. Absolute function call\hyphpar0\par\pard\sb200\li1160\ri200\sl198\qj {\*\bkmkstart ID_FNSMALLDIRECT}{\*\bkmkend ID_FNSMALLDIRECT}\fs18 Table 1-19. \sa100\keepn\par\trowd\trleft1160\trhdr \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3791\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8199 \plain \pard\intbl\sb100\li240\ri100\sl198\qj \b\fs18\lang1033\f2 C\sa160\cell \plain \pard\intbl\sb100\li240\ri100\sl198\qj \b\fs18\lang1033\f2 zSeries machine instructions (Assembler) \sa160\cell \row \trowd\trleft1160 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3791\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8199 \plain \pard\intbl\sb200\li240\ri100\sl198\qj \fs18\lang1033\f1 extern void func();\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
extern void (*ptr)();\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
ptr = func;\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
func();\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
(*ptr) ();\sa260\cell \plain \pard\intbl\sb200\li240\ri100\sl198\qj \fs18\lang1033\f1 \sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           LARL  12,_GLOBAL_OFFSET_TABLE_\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           LG    1,ptr@GOT12(12)\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           LG    2,func@GOT12(12)\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           STG   2,0(1)\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           BRASL 14,func@PLT\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           LARL  12,_GLOBAL_OFFSET_TABLE_\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           LG    1,ptr@GOT12(12)\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           LG    1,0(1)\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           BASR \sa0\par\fi0\sb0
\sa0\par\fi0\sb0
14,1\sa260\cell \row \pard\plain\sl-1\keepn\hyphpar0\par\pard\sb200\li960\sl220\qj \b\fs20\f1 Figure 1-30. Small model position-independent function call\hyphpar0\par\pard\sb200\li1160\ri200\sl198\qj {\*\bkmkstart ID_FNLARGEDIRECT}{\*\bkmkend ID_FNLARGEDIRECT}\fs18 Table 1-20. \sa100\keepn\par\trowd\trleft1160\trhdr \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3746\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8199 \plain \pard\intbl\sb100\li240\ri100\sl198\qj \b\fs18\lang1033\f2 C\sa160\cell \plain \pard\intbl\sb100\li240\ri100\sl198\qj \b\fs18\lang1033\f2 zSeries machine instructions (Assembler) \sa160\cell \row \trowd\trleft1160 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3746\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8199 \plain \pard\intbl\sb200\li240\ri100\sl198\qj \fs18\lang1033\f1 extern void func();\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
extern void (*ptr)();\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
ptr = func;\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
func();\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
(*ptr) ();\sa260\cell \plain \pard\intbl\sb200\li240\ri100\sl198\qj \fs18\lang1033\f1 \sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           LARL  2,ptr@GOT\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           LG    2,0(2)\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           LARL  3,func@GOT\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           LG    3,0(3)\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           STG   3,0(2)\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           \sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           BRASL 14,func@PLT\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           LARL  2,ptr@GOT\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           LG    2,0(2)\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           LG    2,0(2)\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           BASR \sa0\par\fi0\sb0
\sa0\par\fi0\sb0
14,2\sa260\cell \row \pard\plain\sl-1\keepn\hyphpar0\par\pard\sb200\li960\sl220\qj \b\fs20\f1 Figure 1-31. Large model position-independent function call\hyphpar0\par\pard\sb200\s3\li960\sl242 {\*\bkmkstart _1333}{\*\bkmkend _1333}\fs22\f2 Branching\keepn\hyphpar0\par\pard\sb110\li960\sl220\qj \b0\fs20\lang1033\f1 Programs use branch instructions to control their execution flow. z/Architecture has a variety of branch instructions. The most commonly used of these performs a self-relative jump with a 128-Kbyte range (up to 64 Kbytes in either direction). For large functions another self-relative jump is available with a range of 4 Gbytes (up to 2 Gbytes in either direction).\hyphpar0\par\pard\sb200\li1160\ri200\sl198\qj {\*\bkmkstart ID_BRANCHINSN}{\*\bkmkend ID_BRANCHINSN}\b\fs18\lang1024 Table 1-21. \sa100\keepn\par\trowd\trleft1160\trhdr \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3791\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8199 \plain \pard\intbl\sb100\li240\ri100\sl198\qj \b\fs18\lang1033\f2 C\sa160\cell \plain \pard\intbl\sb100\li240\ri100\sl198\qj \b\fs18\lang1033\f2 zSeries machine instructions (Assembler) \sa160\cell \row \trowd\trleft1160 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3791\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8199 \plain \pard\intbl\sb200\li240\ri100\sl198\qj \fs18\lang1033\f1 label:\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
        ...\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
        goto label;\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
        ...\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
        ...\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
        ...\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
farlabel:\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
        ...\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
        ...\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
        ...\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
        goto farlabel;\sa260\cell \plain \pard\intbl\sb200\li240\ri100\sl198\qj \fs18\lang1033\f1 .L01:\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           ...\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           BRC 15,.L01\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           ...\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           ...\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           ...\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
.L02:\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           ...\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           ...\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           ...\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           BRCL\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
15,.L02\sa260\cell \row \pard\plain\sl-1\keepn\hyphpar0\par\pard\sb200\li960\sl220\qj \b\fs20\f1 Figure 1-32. Branch instruction\hyphpar0\par\pard\sb200\li960\sl220\qj \b0\lang1033 C language switch statements provide multi-way selection. When the case labels of a switch statement satisfy grouping constraints the compiler implements the selection with an address table. The following examples use several simplifying conventions to hide irrelevant details:\hyphpar0\par\pard\sb100\li1440\sl220\fi-480\qj \tqr\tx1390\tx1440\tab \lang1024 1.\tab The selection expression resides in register 2.\hyphpar0\par\pard\sb100\li1440\sl220\fi-480\qj \tqr\tx1390\tx1440\tab 2.\tab The case label constants begin at zero.\hyphpar0\par\pard\sb100\li1440\sl220\fi-480\qj \tqr\tx1390\tx1440\tab 3.\tab The case labels, the default, and the address table use assembly  names .Lcasei, .Ldef and .Ltab respectively.\hyphpar0\par\pard\sb200\li1160\ri200\sl198\qj {\*\bkmkstart ID_ABSSWITCH}{\*\bkmkend ID_ABSSWITCH}\b\fs18 Table 1-22. \sa100\keepn\par\trowd\trleft1160\trhdr \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3791\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8199 \plain \pard\intbl\sb100\li240\ri100\sl198\qj \b\fs18\lang1033\f2 C\sa160\cell \plain \pard\intbl\sb100\li240\ri100\sl198\qj \b\fs18\lang1033\f2 zSeries machine instructions (Assembler) \sa160\cell \row \trowd\trleft1160 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3791\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8199 \plain \pard\intbl\sb200\li240\ri100\sl198\qj \fs18\lang1033\f1 switch(j)\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\{\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
case 0:\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
        ...\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
case 1:\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
        ...\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
case 3:\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
        ...\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
default:\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\}\sa260\cell \plain \pard\intbl\sb200\li240\ri100\sl198\qj \fs18\lang1033\f1            LGHI  1,3\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           CLGR  2,1\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           BRC   2,.Ldef\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           SLLG  2,2,3\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           LARL  1,.Ltab\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           LG    3,0(1,2)\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           BR    3\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
.Ltab:     .quad .Lcase0\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           .quad .Lcase1\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           .quad .Ldef\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
           .quad\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
.Lcase3\sa260\cell \row \pard\plain\sl-1\keepn\hyphpar0\par\pard\sb200\li960\sl220\qj \b\fs20\f1 Figure 1-33. Absolute switch code\hyphpar0\par\pard\sb200\li1160\ri200\sl198\qj {\*\bkmkstart ID_INDSWITCH}{\*\bkmkend ID_INDSWITCH}\fs18 Table 1-23. \sa100\keepn\par\trowd\trleft1160\trhdr \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3723\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8199 \plain \pard\intbl\sb100\li240\ri100\sl198\qj \b\fs18\lang1033\f2 C\sa160\cell \plain \pard\intbl\sb100\li240\ri100\sl198\qj \b\fs18\lang1033\f2 zSeries machine instructions (Assembler) \sa160\cell \row \trowd\trleft1160 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3723\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8199 \plain \pard\intbl\sb200\li240\ri100\sl198\qj \fs18\lang1033\f1 switch(j)\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\{\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
case 0:\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
        ...\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
case 1:\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
        ...\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
case 3:\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
        ...\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
default:\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\}\sa260\cell \plain \pard\intbl\sb200\li240\ri100\sl198\qj \fs18\lang1033\f1                               # Literal\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
pool\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
.LT0:\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
                              # Code\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
            LGHI  1,3\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
            CLGR  2,1\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
            BRC   2,.Ldef\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
            SLLG  2,2,3\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
            LARL  1,.Ltab\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
            LG    3,0(1,2)\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
            AGR   3,13\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
            BR    3\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
.Ltab:      .quad .Lcase0-.LT0\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
            .quad .Lcase1-.LT0\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
            .quad .Ldef-.LT0\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
            .quad\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
.Lcase3-.LT0\sa260\cell \row \pard\plain\sl-1\keepn\hyphpar0\par\pard\sb200\li960\sl220\qj \b\fs20\f1 Figure 1-34. Position-independent switch code, all models\hyphpar0\par\pard\sb200\s3\li960\sl242 {\*\bkmkstart ID_DYNAMICSTACK}{\*\bkmkend ID_DYNAMICSTACK}\fs22\f2 Dynamic stack space allocation\keepn\hyphpar0\par\pard\sb110\li960\sl220\qj \b0\fs20\lang1033\f1 The GNU C compiler, and most recent compilers, support dynamic stack space allocation via alloca.\hyphpar0\par\pard\sb100\li960\sl220\qj {\field{\*\fldinst   HYPERLINK  \\l ID_DYNSTACKALLOC}{\fldrslt Figure 1-35}} shows the stack frame before and after dynamic stack allocation. The local variables area is used for storage of function data, such as local variables, whose sizes are known to the compiler. This area is allocated at function entry and does not change in size or position during the function's activation.\hyphpar0\par\pard\sb100\li960\sl220\qj The parameter list area holds "overflow" arguments passed in calls to other functions. (See the OTHER label in {\field{\*\fldinst   HYPERLINK  \\l ID_PARAMETERPASSING}{\fldrslt the Section called \i Parameter passing}}.) Its size is also known to the compiler and can be allocated along with the fixed frame area at function entry. However, the standard calling sequence requires that the parameter list area begin at a fixed offset (160) from the stack pointer, so this area must move when dynamic stack allocation occurs. \hyphpar0\par\pard\sb100\li960\sl220\qj Data in the parameter list area are naturally addressed at constant offsets from the stack pointer. However, in the presence of dynamic stack allocation, the offsets from the stack pointer to the data in the local variables area are not constant. To provide addressability a frame pointer is established to locate the local variables area consistently throughout the function's activation.\hyphpar0\par\pard\sb100\li960\sl220\qj Dynamic stack allocation is accomplished by "opening" the stack just above the parameter list area. The following steps show the process in detail: \hyphpar0\par\pard\sb100\li1440\sl220\fi-480\qj \tqr\tx1390\tx1440\tab \lang1024 1.\tab After a new stack frame is acquired, and before the first  dynamic space allocation, a new register, the frame pointer or FP, is set  to the value of the stack pointer. The frame pointer is used for references  to the function's local, non-static variables. The frame pointer does not  change during the execution of a function, even though the stack pointer may  change as a result of dynamic allocation.\hyphpar0\par\pard\sb100\li1440\sl220\fi-480\qj \tqr\tx1390\tx1440\tab 2.\tab The amount of dynamic space to be allocated is rounded up  to a multiple of 8 bytes, so that 8-byte stack alignment is maintained.\hyphpar0\par\pard\sb100\li1440\sl220\fi-480\qj \tqr\tx1390\tx1440\tab 3.\tab The stack pointer is decreased by the rounded byte count,  and the address of the previous stack frame (the back chain) may be stored  at the word addressed by the new stack pointer. The back chain is not necessary  to restore from this allocation at the end of the function since the frame  pointer can be used to restore the stack pointer.\hyphpar0\par\pard\sb100\li960\sl220\qj {\field{\*\fldinst   HYPERLINK  \\l ID_DYNSTACKALLOC}{\fldrslt \lang1033 Figure 1-35}}\lang1033  is a snapshot of the stack layout after the prolog code has dynamically extended the stack frame.\hyphpar0\par\pard\sb200\li960{\*\bkmkstart ID_DYNSTACKALLOC}{\*\bkmkend ID_DYNSTACKALLOC}{\field\flddirty{\*\fldinst INCLUDEPICTURE "pics/dynams64.png" }{\fldrslt }}\keepn\par\pard\sb100\li960\sl220\qj \b\lang1024 Figure 1-35. Dynamic Stack Space Allocation\hyphpar0\par\pard\sb200\li960\sl220\qj \b0\lang1033 The above process can be repeated as many times as desired within a single function activation. When it is time to return, the stack pointer is set to the value of the back chain, thereby removing all dynamically allocated stack space along with the rest of the stack frame. Naturally, a program must not reference the dynamically allocated stack area after it has been freed. \hyphpar0\par\pard\sb100\li960\sl220\qj Even in the presence of signals, the above dynamic allocation scheme is "safe." If a signal interrupts allocation, one of three things can happen: \hyphpar0\par\pard\sb100\li1160\sl220\fi-200\qj \tx1160 \fs16\lang1024 \'95\tab \fs20 The signal handler can return. The process then resumes the dynamic allocation from the point of interruption.\hyphpar0\par\pard\sb100\li1160\sl220\fi-200\qj \tx1160 \fs16 \'95\tab \fs20 The signal handler can execute a non-local goto or a jump. This resets the process to a new context in a previous stack frame, automatically discarding the dynamic allocation.\hyphpar0\par\pard\sb100\li1160\sl220\fi-200\qj \tx1160 \fs16 \'95\tab \fs20 The process can terminate.\hyphpar0\par\pard\sb100\li960\sl220\qj \lang1033 Regardless of when the signal arrives during dynamic allocation, the result is a consistent (though possibly dead) process.\hyphpar0\par\pard\sb200\s2\sl266 {\*\bkmkstart _1450}{\*\bkmkend _1450}\b\fs24\lang1024\f2 DWARF definition\keepn\hyphpar0\par\pard\sb121\li960\sl220\qj \b0\fs20\lang1033\f1 This section defines the "Debug with Arbitrary Record Format" (DWARF) debugging format for the zSeries processor family. The zSeries ABI does not define a debug format. However, all systems that do implement DWARF shall use the following definitions.\hyphpar0\par\pard\sb100\li960\sl220\qj DWARF is a specification developed for symbolic source-level debugging. The debugging information format does not favor the design of any compiler or debugger.\hyphpar0\par\pard\sb100\li960\sl220\qj The DWARF definition requires some machine-specific definitions. The register number mapping is specified for the zSeries processors in {\field{\*\fldinst   HYPERLINK  \\l ID_DWARFREG}{\fldrslt Table 1-24}}. \hyphpar0\par\pard\sb200\li960\sl220\qj {\*\bkmkstart ID_DWARFREG}{\*\bkmkend ID_DWARFREG}\b\lang1024 Table 1-24. DWARF register number mapping\sa100\keepn\par\trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx4680\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8400 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 DWARF number\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 zSeries register\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx4680\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8400 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 0-15\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 gpr0-gpr15\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx4680\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8400 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 16\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 fpr0\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx4680\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8400 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 17\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 fpr2\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx4680\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8400 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 18\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 fpr4\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx4680\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8400 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 19\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 fpr6\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx4680\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8400 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 20\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 fpr1\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx4680\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8400 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 21\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 fpr3\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx4680\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8400 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 22\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 fpr5\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx4680\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8400 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 23\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 fpr7\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx4680\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8400 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 24\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 fpr8\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx4680\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8400 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 25\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 fpr10\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx4680\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8400 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 26\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 fpr12\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx4680\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8400 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 27\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 fpr14\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx4680\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8400 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 28\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 fpr9\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx4680\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8400 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 29\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 fpr11\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx4680\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8400 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 30\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 fpr13\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx4680\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8400 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 31\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 fpr15\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx4680\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8400 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 32\'9647\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 cr0-cr15\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx4680\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8400 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 48\'9663\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 ar0-ar15\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx4680\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8400 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 64\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 PSW mask\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx4680\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8400 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 65\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 PSW address\sa160\cell \row \pard\plain\sl-1\hyphpar0\par\sect\sectd\plain\pgwsxn12240\pghsxn15840\marglsxn1920\margrsxn1920\margtsxn1440\margbsxn1200\headery0\footery0\pgndec\titlepg{\headerf\pard\sl-240\sb770\sa430\plain\tqc\tx4200\tqr\tx8400 {}\tab {}\tab {}\par}{\footerf\pard\sl-240\sb50\sa910\plain\tqc\tx4200\tqr\tx8400 {}\tab {}\tab {\i\fs20\f1 \chpgn }\par}{\headerl\pard\sl-240\sb770\sa430\plain\tqc\tx4200\tqr\tx8400 {\i\fs20\f1 Chapter 2. Object files}\tab {}\tab {}\par}{\footerl\pard\sl-240\sb50\sa910\plain\tqc\tx4200\tqr\tx8400 {\i\fs20\f1 \chpgn }\tab {}\tab {}\par}{\headerr\pard\sl-240\sb770\sa430\plain\tqc\tx4200\tqr\tx8400 {}\tab {}\tab {\i\fs20\f1 Chapter 2. Object files}\par}{\footerr\pard\sl-240\sb50\sa910\plain\tqc\tx4200\tqr\tx8400 {}\tab {}\tab {\i\fs20\f1 \chpgn }\par}\pard\sb220\s1\sl322 {\*\bkmkstart ID_CHOBJFILES}{\*\bkmkend ID_CHOBJFILES}\b\fs29\f2 Chapter 2. Object files\keepn\hyphpar0\par\pard\sb146\li960\sl220\qj \b0\fs20\lang1033\f1 This section describes the Executable and Linking Format (ELF).\hyphpar0\par\pard\sb200\s2\sl266 {\*\bkmkstart _1575}{\*\bkmkend _1575}\b\fs24\lang1024\f2 ELF Header\keepn\hyphpar0\par\pard\sb200\s3\li960\sl242 {\*\bkmkstart _1577}{\*\bkmkend _1577}\fs22 Machine Information\keepn\hyphpar0\par\pard\sb110\li960\sl220\qj \b0\fs20\lang1033\f1 For file identification in e_ident the zSeries processor family requires the values shown in {\field{\*\fldinst   HYPERLINK  \\l ID_EIDENT}{\fldrslt Table 2-1}}.\hyphpar0\par\pard\sb200\li960\sl220\qj {\*\bkmkstart ID_EIDENT}{\*\bkmkend ID_EIDENT}\b\lang1024 Table 2-1. Auxiliary Vector Types Description\sa100\keepn\par\trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3440\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5920\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8400 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Position\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Value\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Comments\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3440\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5920\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8400 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 e_ident[EI_CLASS]\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 ELFCLASS64\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 For all 64bit implementations\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3440\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5920\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8400 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 e_ident[EI_DATA]\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 ELFDATA64MSB\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 For all Big-Endian implementations\sa160\cell \row \pard\plain\sl-1\hyphpar0\par\pard\sb200\li960\sl220\qj \fs20\lang1033\f1 The ELF header's e_flags field holds bit flags associated with the file. Since the zSeries processor family defines no flags, this member contains zero.\hyphpar0\par\pard\sb100\li960\sl220\qj Processor identification resides in the ELF header's e_machine field and must have the value 22, defined as the name EM_S390.\hyphpar0\par\pard\sb200\s2\sl266 {\*\bkmkstart _1611}{\*\bkmkend _1611}\b\fs24\lang1024\f2 Sections\keepn\hyphpar0\par\pard\sb200\s3\li960\sl242 {\*\bkmkstart _1613}{\*\bkmkend _1613}\fs22 Special Sections\keepn\hyphpar0\par\pard\sb110\li960\sl220\qj \b0\fs20\lang1033\f1 Various sections hold program and control information. The sections listed in {\field{\*\fldinst   HYPERLINK  \\l ID_SECTIONS}{\fldrslt Table 2-2}} are used by the system and have the types and attributes shown.\hyphpar0\par\pard\sb200\li960\sl220\qj {\*\bkmkstart ID_SECTIONS}{\*\bkmkend ID_SECTIONS}\b\lang1024 Table 2-2. Special Sections\sa100\keepn\par\trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3440\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5920\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8400 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Name\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Type\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Attributes\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3440\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5920\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8400 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 .got\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 SHT_PROGBITS\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 SHF_ALLOC + SHF_WRITE\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3440\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5920\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8400 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 .plt\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 SHT_PROGBITS\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 SHF_ALLOC + SHF_WRITE + SHF_EXECINSTR\sa160\cell \row \pard\plain\sl-1\hyphpar0\par\pard\sb200\li960\sl220\qj \fs20\lang1033\f1 Special sections are described in {\field{\*\fldinst   HYPERLINK  \\l ID_SECDESC}{\fldrslt Table 2-3}}.\hyphpar0\par\pard\sb200\li960\sl220\qj {\*\bkmkstart ID_SECDESC}{\*\bkmkend ID_SECDESC}\b\lang1024 Table 2-3. Special Sections Description\sa100\keepn\par\trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx2530\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8399 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Name\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Description\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx2530\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8399 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 .got\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 This section holds the Global Offset Table, or GOT. See {\field{\*\fldinst   HYPERLINK  \\l ID_CODINGEXAMPLES}{\fldrslt the Section called \i Coding examples\i0  in Chapter 1}} and {\field{\*\fldinst   HYPERLINK  \\l ID_GLOBALOFFSETTABLE}{\fldrslt the Section called \i Global Offset Table\i0  in Chapter 3}} for more information.\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx2530\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8399 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 .plt\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 This section holds the Procedure Linkage Table, or PLT. See {\field{\*\fldinst   HYPERLINK  \\l ID_PROCEDURELINKAGETABLE}{\fldrslt the Section called \i Procedure Linkage Table\i0  in Chapter 3}} for more information.\sa160\cell \row \pard\plain\sl-1\hyphpar0\par\pard\sb200\s3\li960\sl242 {\*\bkmkstart _1671}{\*\bkmkend _1671}\b\fs22\f2 Symbol Table\keepn\hyphpar0\par\pard\sb200\s4\li960\sl220 {\*\bkmkstart ID_SYMBOLVALUES}{\*\bkmkend ID_SYMBOLVALUES}\fs20 Symbol Values\keepn\hyphpar0\par\pard\sb100\li960\sl220\qj \b0\lang1033\f1 If an executable file contains a reference to a function defined in one of its associated shared objects, the symbol table section for the file will contain an entry for that symbol. The st_shndx field of that symbol table entry contains SHN_UNDEF. This informs the dynamic linker that the symbol definition for that function is not contained in the executable file itself. If that symbol has been allocated a Procedure Linkage Table entry in the executable file, and the st_value field for that symbol table entry is nonzero, the value is the virtual address of the first instruction of that PLT entry. Otherwise the st_value field contains zero. This PLT entry address is used by the dynamic linker in resolving references to the address of the function. See {\field{\*\fldinst   HYPERLINK  \\l ID_FUNCTIONADDRESSES}{\fldrslt the Section called \i Function Addresses\i0  in Chapter 3}} for details.\hyphpar0\par\pard\sb200\s3\li960\sl242 {\*\bkmkstart _1677}{\*\bkmkend _1677}\b\fs22\lang1024\f2 Relocation\keepn\hyphpar0\par\pard\sb200\s4\li960\sl220 \fs20 Relocation Types\keepn\hyphpar0\par\pard\sb100\li960\sl220\qj \b0\lang1033\f1 Relocation entries describe how to alter the instruction and data relocation fields shown in {\field{\*\fldinst   HYPERLINK  \\l ID_RELOCFIELDS}{\fldrslt Figure 2-1}} (bit numbers appear in the lower box corners; byte numbers appear in the upper left box corners).\hyphpar0\par\pard\sb200\li960{\*\bkmkstart ID_RELOCFIELDS}{\*\bkmkend ID_RELOCFIELDS}{\field\flddirty{\*\fldinst INCLUDEPICTURE "pics/relocf64.png" }{\fldrslt }}\keepn\par\pard\sb100\li960\sl220\qj \b\lang1024 Figure 2-1. Relocation Fields\hyphpar0\par\pard\sb200\sl220\qj \b0 quad64\keepn\hyphpar0\par\pard\sb100\li1360\sl220\fi-400\qj \tx1360 \~\tab This specifies a 64-bit field occupying 8 bytes, the alignment of which is 4 bytes unless otherwise specified.\hyphpar0\par\pard\sb200\sl220\qj word32\keepn\hyphpar0\par\pard\sb100\li1360\sl220\fi-400\qj \tx1360 \~\tab This specifies a 32-bit field occupying 4 bytes, the alignment of which is 4 bytes unless otherwise specified.\hyphpar0\par\pard\sb200\sl220\qj pc32\keepn\hyphpar0\par\pard\sb100\li1360\sl220\fi-400\qj \tx1360 \~\tab This specifies a 32-bit field occupying 4 bytes with 2-byte alignment. The signed value in this field is shifted to the left by 1 before it is used as a program counter relative displacement (for example, the immediate field of a "Load Address Relative Long" instruction).\hyphpar0\par\pard\sb200\sl220\qj half16\keepn\hyphpar0\par\pard\sb100\li1360\sl220\fi-400\qj \tx1360 \~\tab This specifies a 16-bit field occupying 2 bytes with 2-byte alignment (for example, the immediate field of an "Add Halfword Immediate" instruction). \hyphpar0\par\pard\sb200\sl220\qj pc16\keepn\hyphpar0\par\pard\sb100\li1360\sl220\fi-400\qj \tx1360 \~\tab This specifies a 16-bit field occupying 2 bytes with 2-byte alignment. The signed value in this field is shifted to the left by 1 before it is used as a program counter relative displacement (for example, the immediate field of an "Branch Relative" instruction).\hyphpar0\par\pard\sb200\sl220\qj low12\keepn\hyphpar0\par\pard\sb100\li1360\sl220\fi-400\qj \tx1360 \~\tab This specifies a 12-bit field contained within a halfword with a 2-byte alignment. The 12 bit unsigned value is the displacement of a memory reference. \hyphpar0\par\pard\sb200\sl220\qj byte8\keepn\hyphpar0\par\pard\sb100\li1360\sl220\fi-400\qj \tx1360 \~\tab This specifies a 8-bit field with a 1-byte alignment.\hyphpar0\par\pard\sb100\li960\sl220\qj \lang1033 Calculations in {\field{\*\fldinst   HYPERLINK  \\l ID_RELOCATIONS}{\fldrslt Table 2-4}} assume the actions are transforming a relocatable file into either an executable or a shared object file. Conceptually, the linkage editor merges one or more relocatable files to form the output. It first determines how to combine and locate the input files, next it updates the symbol values, and then it performs relocations. \hyphpar0\par\pard\sb100\li960\sl220\qj Relocations applied to executable or shared object files are similar and accomplish the same result. The following notations are used in {\field{\*\fldinst   HYPERLINK  \\l ID_RELOCATIONS}{\fldrslt Table 2-4}}:\hyphpar0\par\pard\sb200\sl220\qj \lang1024 A\keepn\hyphpar0\par\pard\sb100\li1360\sl220\fi-400\qj \tx1360 \~\tab Represents the addend used to compute the value of the relocatable field. \hyphpar0\par\pard\sb200\sl220\qj B\keepn\hyphpar0\par\pard\sb100\li1360\sl220\fi-400\qj \tx1360 \~\tab Represents the base address at which a shared object has been loaded into memory during execution. Generally, a shared object file is built with a 0 base virtual address, but the execution address will be different.\hyphpar0\par\pard\sb200\sl220\qj G\keepn\hyphpar0\par\pard\sb100\li1360\sl220\fi-400\qj \tx1360 \~\tab Represents the section offset or address of the Global Offset Table. See {\field{\*\fldinst   HYPERLINK  \\l ID_CODINGEXAMPLES}{\fldrslt the Section called \i Coding examples\i0  in Chapter 1}} and {\field{\*\fldinst   HYPERLINK  \\l ID_GLOBALOFFSETTABLE}{\fldrslt the Section called \i Global Offset Table\i0  in Chapter 3}} for more information.\hyphpar0\par\pard\sb200\sl220\qj L\keepn\hyphpar0\par\pard\sb100\li1360\sl220\fi-400\qj \tx1360 \~\tab Represents the section offset or address of the Procedure Linkage Table entry for a symbol. A PLT entry redirects a function call to the proper destination. The linkage editor builds the initial PLT. See {\field{\*\fldinst   HYPERLINK  \\l ID_PROCEDURELINKAGETABLE}{\fldrslt the Section called \i Procedure Linkage Table\i0  in Chapter 3}} for more information.\hyphpar0\par\pard\sb200\sl220\qj O\keepn\hyphpar0\par\pard\sb100\li1360\sl220\fi-400\qj \tx1360 \~\tab Represents the offset into the GOT at which the address of the relocation entry's symbol will reside during execution. See {\field{\*\fldinst   HYPERLINK  \\l ID_CODINGEXAMPLES}{\fldrslt the Section called \i Coding examples\i0  in Chapter 1}} and {\field{\*\fldinst   HYPERLINK  \\l ID_GLOBALOFFSETTABLE}{\fldrslt the Section called \i Global Offset Table\i0  in Chapter 3}} for more information.\hyphpar0\par\pard\sb200\sl220\qj P\keepn\hyphpar0\par\pard\sb100\li1360\sl220\fi-400\qj \tx1360 \~\tab Represents the place (section offset or address) of the storage unit being relocated (computed using r_offset).\hyphpar0\par\pard\sb200\sl220\qj R\keepn\hyphpar0\par\pard\sb100\li1360\sl220\fi-400\qj \tx1360 \~\tab Represents the offset of the symbol within the section in which the symbol is defined (its section-relative address).\hyphpar0\par\pard\sb200\sl220\qj S\keepn\hyphpar0\par\pard\sb100\li1360\sl220\fi-400\qj \tx1360 \~\tab Represents the value of the symbol whose index resides in the relocation entry.\hyphpar0\par\pard\sb100\li960\sl220\qj \lang1033 Relocation entries apply to bytes, halfwords or words. In either case, the r_offset value designates the offset or virtual address of the first byte of the affected storage unit. The relocation type specifies which bits to change and how to calculate their values. The zSeries family uses only the Elf64_Rela relocation entries with explicit addends. For the relocation entries, the r_addend field serves as the relocation addend. In all cases, the offset, addend, and the computed result use the byte order specified in the ELF header. \hyphpar0\par\pard\sb100\li960\sl220\qj The following general rules apply to the interpretation of the relocation types in {\field{\*\fldinst   HYPERLINK  \\l ID_RELOCATIONS}{\fldrslt Table 2-4}}:\hyphpar0\par\pard\sb100\li1160\sl220\fi-200\qj \tx1160 \fs16\lang1024 \'95\tab \fs20 "+" and "-" denote 64-bit modulus addition and subtraction, respectively. ">>" denotes arithmetic right-shifting (shifting with sign copying) of the value of the left operand by the number of bits given by the right operand.\hyphpar0\par\pard\sb100\li1160\sl220\fi-200\qj \tx1160 \fs16 \'95\tab \fs20 For relocation type half16, the upper 48 bits of the value computed must be all ones or all zeroes. For relocation type pc16, the upper 47 bits of the value computed must be all ones or all zeroes and the lowest bit must be zero. For relocation type pc32, the upper 31 bits of the value computed must be all ones or all zeroes and the lowest bit must be zero. For relocation type low12, the upper 52 bits of the value computed must all be zero and for relocation type byte8, the upper 56 bits of the value computed must all be zero.\hyphpar0\par\pard\sb100\li1160\sl220\fi-200\qj \tx1160 \fs16 \'95\tab \fs20 Reference in a calculation to the value G or O implicitly creates a GOT entry for the indicated symbol and a reference to L implicitly creates a PLT entry.\hyphpar0\par\pard\sb200\li960\sl220\qj {\*\bkmkstart ID_RELOCATIONS}{\*\bkmkend ID_RELOCATIONS}\b Table 2-4. Relocation Types\sa100\keepn\par\trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3293\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx4364\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5989\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8398 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Name\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Value\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Field\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Calculation\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3293\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx4364\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5989\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8398 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 R_390_NONE\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 0\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 none\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 none\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3293\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx4364\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5989\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8398 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 R_390_8\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 1\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 byte8\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 S + A\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3293\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx4364\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5989\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8398 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 R_390_12\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 2\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 low12\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 S + A\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3293\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx4364\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5989\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8398 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 R_390_16\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 3\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 half16\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 S + A\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3293\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx4364\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5989\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8398 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 R_390_32\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 4\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 word32\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 S + A\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3293\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx4364\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5989\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8398 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 R_390_PC32\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 5\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 word32\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 S + A - P\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3293\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx4364\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5989\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8398 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 R_390_GOT12\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 6\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 low12\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 O + A\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3293\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx4364\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5989\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8398 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 R_390_GOT32\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 7\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 word32\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 O + A\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3293\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx4364\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5989\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8398 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 R_390_PLT32\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 8\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 word32\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 L + A\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3293\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx4364\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5989\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8398 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 R_390_COPY\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 9\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 none\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 (see below)\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3293\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx4364\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5989\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8398 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 R_390_GLOB_DAT\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 10\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 quad64\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 S + A (see below)\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3293\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx4364\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5989\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8398 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 R_390_JMP_SLOT\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 11\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 none\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 (see below)\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3293\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx4364\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5989\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8398 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 R_390_RELATIVE\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 12\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 quad64\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 B + A (see below)\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3293\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx4364\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5989\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8398 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 R_390_GOTOFF\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 13\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 quad64\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 S + A - G\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3293\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx4364\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5989\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8398 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 R_390_GOTPC\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 14\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 quad64\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 G + A - P\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3293\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx4364\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5989\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8398 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 R_390_GOT16\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 15\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 half16\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 O + A\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3293\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx4364\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5989\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8398 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 R_390_PC16\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 16\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 half16\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 S + A - P\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3293\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx4364\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5989\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8398 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 R_390_PC16DBL\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 17\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 pc16\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 (S + A - P) >> 1\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3293\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx4364\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5989\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8398 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 R_390_PLT16DBL\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 18\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 pc16\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 (L + A - P) >> 1\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3293\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx4364\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5989\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8398 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 R_390_PC32DBL\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 19\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 pc32\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 (S + A - P) >> 1\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3293\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx4364\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5989\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8398 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 R_390_PLT32DBL\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 20\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 pc32\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 (L + A - P) >> 1\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3293\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx4364\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5989\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8398 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 R_390_GOTPCDBL\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 21\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 pc32\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 (G + A - P) >> 1\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3293\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx4364\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5989\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8398 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 R_390_64\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 22\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 quad64\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 S + A\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3293\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx4364\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5989\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8398 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 R_390_PC64\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 23\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 quad64\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 S + A - P\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3293\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx4364\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5989\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8398 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 R_390_GOT64\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 24\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 quad64\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 O + A\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3293\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx4364\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5989\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8398 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 R_390_PLT64\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 25\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 quad64\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 L + A\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3293\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx4364\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5989\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8398 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 R_390_GOTENT\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 26\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 pc32\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 (G + O + A - P) >> 1\sa160\cell \row \pard\plain\sl-1\hyphpar0\par\pard\sb200\li960\sl220\qj \b\fs20\f1 Table 2-5. Relocation type descriptions\sa100\keepn\par\trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3145\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8399 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Name\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Description\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3145\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8399 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 R_390_COPY\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 The linkage editor creates this relocation type for dynamic linking. Its offset member refers to a location in a writable segment. The symbol table index specifies a symbol that should exist both in the current object file and in a shared object. During execution, the dynamic linker copies data associated with the shared object's symbol to the location specified by the offset.\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3145\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8399 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 R_390_GLOB_DAT\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 This relocation type resembles R_390_64, except that it sets a Global Offset Table entry to the address of the specified symbol. This special relocation type allows one to determine the correspondence between symbols and GOT entries.\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3145\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8399 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 R_390_JMP_SLOT\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 The linkage editor creates this relocation type for dynamic linking. Its offset member gives the location of a Procedure Linkage Table entry. The dynamic linker modifies the PLT entry to transfer control to the designated symbol's address (see {\field{\*\fldinst   HYPERLINK  \\l ID_PROCEDURELINKAGETABLE}{\fldrslt the Section called \i Procedure Linkage Table\i0  in Chapter 3}}). \sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3145\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8399 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 R_390_RELATIVE\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 The linkage editor creates this relocation type for dynamic linking. Its offset member gives a location within a shared object that contains a value representing a relative address. The dynamic linker computes the corresponding virtual address by adding the virtual address at which the shared object was loaded to the relative address. Relocation entries for this type must specify 0 for the symbol table index.\sa160\cell \row \pard\plain\sl-1\hyphpar0\par\sect\sectd\plain\pgwsxn12240\pghsxn15840\marglsxn1920\margrsxn1920\margtsxn1440\margbsxn1200\headery0\footery0\pgndec\titlepg{\headerf\pard\sl-240\sb770\sa430\plain\tqc\tx4200\tqr\tx8400 {}\tab {}\tab {}\par}{\footerf\pard\sl-240\sb50\sa910\plain\tqc\tx4200\tqr\tx8400 {}\tab {}\tab {\i\fs20\f1 \chpgn }\par}{\headerl\pard\sl-240\sb770\sa430\plain\tqc\tx4200\tqr\tx8400 {\i\fs20\f1 Chapter 3. Program loading and dynamic linking}\tab {}\tab {}\par}{\footerl\pard\sl-240\sb50\sa910\plain\tqc\tx4200\tqr\tx8400 {\i\fs20\f1 \chpgn }\tab {}\tab {}\par}{\headerr\pard\sl-240\sb770\sa430\plain\tqc\tx4200\tqr\tx8400 {}\tab {}\tab {\i\fs20\f1 Chapter 3. Program loading and dynamic linking}\par}{\footerr\pard\sl-240\sb50\sa910\plain\tqc\tx4200\tqr\tx8400 {}\tab {}\tab {\i\fs20\f1 \chpgn }\par}\pard\sb220\s1\sl322 {\*\bkmkstart ID_CHPROGLOAD}{\*\bkmkend ID_CHPROGLOAD}\b\fs29\f2 Chapter 3. Program loading and dynamic linking\keepn\hyphpar0\par\pard\sb146\li960\sl220\qj \b0\fs20\lang1033\f1 This section describes how the Executable and Linking Format (ELF) is used in the construction and execution of programs.\hyphpar0\par\pard\sb200\s2\sl266 {\*\bkmkstart _2064}{\*\bkmkend _2064}\b\fs24\lang1024\f2 Program Loading\keepn\hyphpar0\par\pard\sb121\li960\sl220\qj \b0\fs20\lang1033\f1 As the system creates or augments a process image, it logically copies a file's segment to a virtual memory segment. When \'96 and if \'96 the system physically reads the file depends on the program's execution behavior, on the system load, and so on. A process does not require a physical page until it references the logical page during execution, and processes commonly leave many pages unreferenced. Therefore, if physical reads can be delayed they can frequently be dispensed with, improving system performance. To obtain this efficiency in practice, executable and shared object files must have segment images of which the offsets and virtual addresses are congruent modulo the page size.\hyphpar0\par\pard\sb100\li960\sl220\qj Virtual addresses and file offsets for the zSeries processor family segments are congruent modulo the system page size. The value of the p_align field of each program header in a shared object file must be a multiple of the system page size. {\field{\*\fldinst   HYPERLINK  \\l ID_EXECFILE}{\fldrslt Figure 3-1}} is an example of an executable file assuming an executable program linked with a base address of 0x80000000 (2 Gbytes).\hyphpar0\par\pard\sb200\li960{\*\bkmkstart ID_EXECFILE}{\*\bkmkend ID_EXECFILE}{\field\flddirty{\*\fldinst INCLUDEPICTURE "pics/execfi64.png" }{\fldrslt }}\keepn\par\pard\sb100\li960\sl220\qj \b\lang1024 Figure 3-1. Executable File Example\hyphpar0\par\pard\sb200\li960\sl220\qj {\*\bkmkstart ID_PHDR}{\*\bkmkend ID_PHDR}Table 3-1. Program Header Segments\sa100\keepn\par\trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3440\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5920\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8400 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Member\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Text\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Data\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3440\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5920\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8400 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 p_type\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 PT_LOAD\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 PT_LOAD\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3440\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5920\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8400 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 p_offset\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 0x0\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 0x1bf58\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3440\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5920\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8400 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 p_vaddr\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 0x80000000\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 0x8001cf58\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3440\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5920\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8400 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 p_paddr\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 unspecified\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 unspecified\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3440\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5920\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8400 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 p_filesz\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 0x1bf58\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 0x17c4\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3440\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5920\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8400 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 p_memsz\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 0x1bf58\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 0x2578\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3440\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5920\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8400 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 p_flags\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 PF_R+PF_X\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 PF_R+PF_W\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx3440\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx5920\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8400 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 p_align\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 0x1000\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 0x1000\sa160\cell \row \pard\plain\sl-1\hyphpar0\par\pard\sb200\li960\sl220\qj \fs20\lang1033\f1 Although the file offsets and virtual addresses are congruent modulo 4 Kbytes for both text and data, up to four file pages can hold impure text or data (depending on page size and file system block size).\hyphpar0\par\pard\sb100\li1160\sl220\fi-200\qj \tx1160 \fs16\lang1024 \'95\tab \fs20 The first text page contains the ELF header, the program header table, and other information.\hyphpar0\par\pard\sb100\li1160\sl220\fi-200\qj \tx1160 \fs16 \'95\tab \fs20 The last text page may hold a copy of the beginning of data. \hyphpar0\par\pard\sb100\li1160\sl220\fi-200\qj \tx1160 \fs16 \'95\tab \fs20 The first data page may have a copy of the end of text.\hyphpar0\par\pard\sb100\li1160\sl220\fi-200\qj \tx1160 \fs16 \'95\tab \fs20 The last data page may contain file information not relevant to the running process.\hyphpar0\par\pard\sb100\li960\sl220\qj \lang1033 Logically, the system enforces memory permissions as if each segment were complete and separate; segment addresses are adjusted to ensure that each logical page in the address space has a single set of permissions. In the example in {\field{\*\fldinst   HYPERLINK  \\l ID_PHDR}{\fldrslt Table 3-1}} the file region holding the end of text and the beginning of data is mapped twice; at one virtual address for text and at a different virtual address for data.\hyphpar0\par\pard\sb100\li960\sl220\qj The end of the data segment requires special handling for uninitialized data, which the system defines to begin with zero values. Thus if the last data page of a file includes information beyond the logical memory page, the extraneous data must be set to zero by the loader, rather than to the unknown contents of the executable file. 'Impurities' in the other three segments are not logically part of the process image, and whether the system clears them is unspecified. The memory image for the program in {\field{\*\fldinst   HYPERLINK  \\l ID_PHDR}{\fldrslt Table 3-1}} is presented in {\field{\*\fldinst   HYPERLINK  \\l ID_PIMGSEG}{\fldrslt Figure 3-2}}.\hyphpar0\par\pard\sb200\li960{\*\bkmkstart ID_PIMGSEG}{\*\bkmkend ID_PIMGSEG}{\field\flddirty{\*\fldinst INCLUDEPICTURE "pics/procim64.png" }{\fldrslt }}\keepn\par\pard\sb100\li960\sl220\qj \b\lang1024 Figure 3-2. Process Image Segments\hyphpar0\par\pard\sb200\li960\sl220\qj \b0\lang1033 One aspect of segment loading differs between executable files and shared objects. Executable file segments may contain absolute code. For the process to execute correctly, the segments must reside at the virtual addresses assigned when building the executable file, with the system using the p_vaddr values unchanged as virtual addresses.\hyphpar0\par\pard\sb100\li960\sl220\qj On the other hand, shared object segments typically contain position-independent code. This allows a segment's virtual address to change from one process to another, without invalidating execution behavior. Though the system chooses virtual addresses for individual processes, it maintains the "relative positions" of the segments. Because position-independent code uses relative addressing between segments, the difference between virtual addresses in memory must match the difference between virtual addresses in the file. {\field{\*\fldinst   HYPERLINK  \\l ID_SOSEG}{\fldrslt Table 3-2}} shows possible shared object virtual address assignments for several processes, illustrating constant relative positioning. The table also illustrates the base address computations.\hyphpar0\par\pard\sb200\li960\sl220\qj {\*\bkmkstart ID_SOSEG}{\*\bkmkend ID_SOSEG}\b\lang1024 Table 3-2. Shared Object Segment Example for 42\'96bit address space\sa100\keepn\par\trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx2819\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx4678\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx6500\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8397 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Source\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Text\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Data\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Base Address\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx2819\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx4678\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx6500\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8397 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 File\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 0x00000000200\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 0x0000002a400\sa160\cell \plain \pard\intbl\sl-160\par\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx2819\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx4678\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx6500\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8397 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Process 1\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 0x20000000000\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 0x2000002a400\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 0x20000000000\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx2819\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx4678\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx6500\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8397 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Process 2\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 0x20000010000\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 0x2000003a400\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 0x20000010000\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx2819\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx4678\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx6500\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8397 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Process 3\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 0x20000020000\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 0x2000004a400\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 0x20000020000\sa160\cell \row \trowd\trleft960 \clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx2819\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx4678\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx6500\clvertalt\clbrdrt\brdrs\brdrw20\clbrdrb\brdrs\brdrw20\clbrdrl\brdrs\brdrw20\clbrdrr\brdrs\brdrw20\cellx8397 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 Process 4\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 0x20000030000\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 0x2000005a400\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 0x20000030000\sa160\cell \row \pard\plain\sl-1\hyphpar0\par\pard\sb200\s2\sl266 {\*\bkmkstart ID_DYNAMICLINKING}{\*\bkmkend ID_DYNAMICLINKING}\b\f2 Dynamic Linking\keepn\hyphpar0\par\pard\sb200\s3\li960\sl242 {\*\bkmkstart _2231}{\*\bkmkend _2231}\fs22 Dynamic Section\keepn\hyphpar0\par\pard\sb110\li960\sl220\qj \b0\fs20\lang1033\f1 Dynamic section entries give information to the dynamic linker. Some of this information is processor-specific, including the interpretation of some entries in the dynamic structure.\hyphpar0\par\pard\sb200\sl220\qj \lang1024 DT_PLTGOT\keepn\hyphpar0\par\pard\sb100\li1360\sl220\fi-400\qj \tx1360 \~\tab The d_ptr field of this entry gives the address of the first byte in the Procedure Linkage Table (.PLT in {\field{\*\fldinst   HYPERLINK  \\l ID_PROCEDURELINKAGETABLE}{\fldrslt the Section called \i Procedure Linkage Table}}). \hyphpar0\par\pard\sb200\sl220\qj DT_JMPREL\keepn\hyphpar0\par\pard\sb100\li1360\sl220\fi-400\qj \tx1360 \~\tab This entry is associated with a table of relocation entries for the PLT. For zSeries this entry is mandatory both for executable and shared object files. Moreover, the relocation table's entries must have a one-to-one correspondence with the PLT. The table of DT_JMPREL relocation entries is wholly contained within the DT_RELA referenced table. See {\field{\*\fldinst   HYPERLINK  \\l ID_PROCEDURELINKAGETABLE}{\fldrslt the Section called \i Procedure Linkage Table}} for more information.\hyphpar0\par\pard\sb200\s3\li960\sl242 {\*\bkmkstart ID_GLOBALOFFSETTABLE}{\*\bkmkend ID_GLOBALOFFSETTABLE}\b\fs22\f2 Global Offset Table\keepn\hyphpar0\par\pard\sb110\li960\sl220\qj \b0\fs20\lang1033\f1 Position-independent code cannot, in general, contain absolute virtual addresses. Global Offset Tables hold absolute addresses in private data, thus making the addresses available without compromising the position-independence and sharability of a program's text. A program references its GOT using position-independent addressing and extracts absolute values, thus redirecting position-independent references to absolute locations.\hyphpar0\par\pard\sb100\li960\sl220\qj When the dynamic linker creates memory segments for a loadable object file, it processes the relocation entries, some of which will be of type R_390_GLOB_DAT, referring to the GOT. The dynamic linker determines the associated symbol values, calculates their absolute addresses, and sets the GOT entries to the proper values. Although the absolute addresses are unknown when the linkage editor builds an object file, the dynamic linker knows the addresses of all memory segments and can thus calculate the absolute addresses of the symbols contained therein.\hyphpar0\par\pard\sb100\li960\sl220\qj A GOT entry provides direct access to the absolute address of a symbol without compromising position-independence and sharability. Because the executable file and shared objects have separate GOTs, a symbol may appear in several tables. The dynamic linker processes all the GOT relocations before giving control to any code in the process image, thus ensuring the absolute addresses are available during execution.\hyphpar0\par\pard\sb100\li960\sl220\qj The dynamic linker may choose different memory segment addresses for the same shared object in different programs; it may even choose different library addresses for different executions of the same program. Nevertheless, memory segments do not change addresses once the process image is established. As long as a process exists, its memory segments reside at fixed virtual addresses. \hyphpar0\par\pard\sb100\li960\sl220\qj The format and interpretation of the Global Offset Table is processor specific. For zSeries the symbol _GLOBAL_OFFSET_TABLE_ may be used to access the table. The symbol refers to the start of the .got section. Two words in the GOT are reserved:\hyphpar0\par\pard\sb100\li1160\sl220\fi-200\qj \tx1160 \fs16\lang1024 \'95\tab \fs20 The word at _GLOBAL_OFFSET_TABLE_[0] is set by the linkage editor to hold the address of the dynamic structure, referenced with the symbol _DYNAMIC. This allows a program, such as the dynamic linker, to find its own dynamic structure without having yet processed its relocation entries. This is especially important for the dynamic linker, because it must initialize itself without relying on other programs to relocate its memory image.\hyphpar0\par\pard\sb100\li1160\sl220\fi-200\qj \tx1160 \fs16 \'95\tab \fs20 The word at _GLOBAL_OFFSET_TABLE_[1] is reserved for future use.\hyphpar0\par\pard\sb100\li960\sl220\qj \lang1033 The Global Offset Table resides in the ELF .got section.\hyphpar0\par\pard\sb200\s3\li960\sl242 {\*\bkmkstart ID_FUNCTIONADDRESSES}{\*\bkmkend ID_FUNCTIONADDRESSES}\b\fs22\lang1024\f2 Function Addresses\keepn\hyphpar0\par\pard\sb110\li960\sl220\qj \b0\fs20\lang1033\f1 References to a function address from an executable file and from the shared objects associated with the file must resolve to the same value. References from within shared objects will normally be resolved (by the dynamic linker) to the virtual address of the function itself. References from within the executable file to a function defined in a shared object will normally be resolved (by the linkage editor) to the address of the Procedure Linkage Table entry for that function within the executable file.\hyphpar0\par\pard\sb100\li960\sl220\qj To allow comparisons of function addresses to work as expected, if an executable file references a function defined in a shared object, the linkage editor will place the address of the PLT entry for that function in its associated symbol table entry. See {\field{\*\fldinst   HYPERLINK  \\l ID_SYMBOLVALUES}{\fldrslt the Section called \i Symbol Values\i0  in Chapter 2}} for details. The dynamic linker treats such symbol table entries specially. If the dynamic linker is searching for a symbol and encounters a symbol table entry for that symbol in the executable file, it normally follows these rules:\hyphpar0\par\pard\sb100\li1160\sl220\fi-200\qj \tx1160 \fs16\lang1024 \'95\tab \fs20 If the st_shndx field of the symbol table entry is not SHN_UNDEF, the dynamic linker has found a definition for the symbol and uses its st_value field as the symbol's address.\hyphpar0\par\pard\sb100\li1160\sl220\fi-200\qj \tx1160 \fs16 \'95\tab \fs20 If the st_shndx field is SHN_UNDEF and the symbol is of type STT_FUNC and the st_value field is not zero, the dynamic linker recognizes this entry as special and uses the st_value field as the symbol's address. \hyphpar0\par\pard\sb100\li1160\sl220\fi-200\qj \tx1160 \fs16 \'95\tab \fs20 Otherwise, the dynamic linker considers the symbol to be undefined within the executable file and continues processing.\hyphpar0\par\pard\sb100\li960\sl220\qj \lang1033 Some relocations are associated with PLT entries. These entries are used for direct function calls rather than for references to function addresses. These relocations are not treated specially as described above because the dynamic linker must not redirect PLT entries to point to themselves.\hyphpar0\par\pard\sb200\s3\li960\sl242 {\*\bkmkstart ID_PROCEDURELINKAGETABLE}{\*\bkmkend ID_PROCEDURELINKAGETABLE}\b\fs22\lang1024\f2 Procedure Linkage Table\keepn\hyphpar0\par\pard\sb110\li960\sl220\qj \b0\fs20\lang1033\f1 Much as the Global Offset Table redirects position-independent address calculations to absolute locations, the Procedure Linkage Table redirects position-independent function calls to absolute locations. The linkage editor cannot resolve execution transfers (such as function calls) from one executable or shared object to another, so instead it arranges for the program to transfer control to entries in the PLT. The dynamic linker determines the absolute addresses of the destinations and stores them in the GOT, from which they are loaded by the PLT entry. The dynamic linker can thus redirect the entries without compromising the position-independence and sharability of the program text. Executable files and shared object files have separate PLTs.\hyphpar0\par\pard\sb100\li960\sl220\qj As mentioned above, a relocation table is associated with the PLT. The DT_JMPREL entry in the _DYNAMIC array gives the location of the first relocation entry. The relocation table entries match the PLT entries in a one-to-one correspondence (relocation table entry 1 applies to PLT entry 1 and so on). The relocation type for each entry shall be R_390_JMP_SLOT. The relocation offset shall specify the address of the GOT entry containing the address of the function and the symbol table index shall reference the appropriate symbol. \hyphpar0\par\pard\sb100\li960\sl220\qj To illustrate Procedure Linkage Tables, {\field{\*\fldinst   HYPERLINK  \\l ID_PLTEX}{\fldrslt Figure 3-3}} shows how the linkage editor might initialize the PLT when linking a shared executable or shared object.\hyphpar0\par\pard\sb200\li960\sl220\qj {\*\bkmkstart ID_PLTEX}{\*\bkmkend ID_PLTEX}\lang1024 *                                  # PLT\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
for executables (not position independent)\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
PLT1      BASR  1,0                # Establish base\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
BASE1     L     1,AGOTENT-BASE1(1) # Load address of the GOT entry\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
          L     1,0(0,1)           # Load function address from the GOT\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
to r1\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
          BCR   15,1               # Jump to address\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
RET1      BASR  1,0                # Return from GOT first time (lazy\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
binding)\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
BASE2     L     1,ASYMOFF-BASE2(1) # Load offset in symbol table to r1\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
          BRC   15,-x              # Jump to start of PLT\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
          .word 0                  # Filler\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
AGOTENT   .long ?                  # Address of the GOT entry\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
ASYMOFF   .long ?                  # Offset into the symbol table\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
*                                  # PLT for shared objects (position\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
independent)\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
PLT1      LARL  1,<fn>@GOTENT      # Load address of GOT entry in\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
r1\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
          LG    1,0(1)             # Load function address from the GOT\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
to r1\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
          BCR   15,1               # Jump to address\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
RET1      BASR  1,0                # Return from GOT first time (lazy\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
binding)\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
BASE2     LGF   1,ASYMOFF-BASE2(1) # Load offset in symbol table to r1\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
          BRCL  15,-x              # Jump to start of PLT\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
ASYMOFF   .long ?                  # Offset into symbol\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
table\keepn\hyphpar0\par\pard\sb200\li960\sl220\qj \b Figure 3-3. Procedure Linkage Table Example\hyphpar0\par\pard\sb200\li960\sl220\qj \b0\lang1033 As described below the dynamic linker and the program cooperate to resolve symbolic references through the PLT. Again, the details described below are for explanation only. The precise execution-time behavior of the dynamic linker is not specified.\hyphpar0\par\pard\sb100\li1440\sl220\fi-480\qj \tqr\tx1390\tx1440\tab \lang1024 1.\tab The caller of a function in a different shared object transfers  control to the start of the PLT entry associated with the function.\hyphpar0\par\pard\sb100\li1440\sl220\fi-480\qj \tqr\tx1390\tx1440\tab 2.\tab The first part of the PLT entry loads the address from the  GOT entry associated with the function to be called. The control is transferred  to the code referenced by the address. If the function has already been called  at least once, or lazy binding is not used, then the address found in the  GOT is the address of the function.\hyphpar0\par\pard\sb100\li1440\sl220\fi-480\qj \tqr\tx1390\tx1440\tab 3.\tab If a function has never been called and lazy binding is used  then the address in the GOT points to the second half of the PLT. The second  half loads the offset in the symbol table associated with the called function.  Control is then transferred to the special first entry of the PLT.\hyphpar0\par\pard\sb100\li1440\sl220\fi-480\qj \tqr\tx1390\tx1440\tab 4.\tab This first entry of the PLT entry ({\field{\*\fldinst   HYPERLINK  \\l ID_PLT0EX}{\fldrslt Figure 3-4}})  calls the dynamic linker giving it the offset into the symbol table and the  address of a structure that identifies the location of the caller.\hyphpar0\par\pard\sb100\li1440\sl220\fi-480\qj \tqr\tx1390\tx1440\tab 5.\tab The dynamic linker finds the real address of the symbol. It  will store this address in the GOT entry of the function in the object code  of the caller and it will then transfer control to the function.\hyphpar0\par\pard\sb100\li1440\sl220\fi-480\qj \tqr\tx1390\tx1440\tab 6.\tab Subsequent calls to the function from this object will find  the resolved address in the first half of the PLT entry and will transfer  control directly without invoking the dynamic linker.\hyphpar0\par\pard\sb200\li960\sl220\qj {\*\bkmkstart ID_PLT0EX}{\*\bkmkend ID_PLT0EX}*                               # PLT0\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
for static object (not position-independent)\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
PLT0      ST    1,28(15)        # R1 has offset into symbol table\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
          BASR  1,0             # Establish base\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
BASE1     L     1,AGOT-BASE1(1) # Get address of GOT\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
          MVC   24(4,15),4(1)   # Move loader info to stack\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
          L     1,8(1)          # Get address of loader\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
          BR    1               # Jump to loader\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
          .word 0               # Filler\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
AGOT      .long got             # Address of GOT\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
                                # PLT0 for shared object\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
(position-independent)\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
PLT0      STG   1,56(15)        # R1 has offset into symbol table\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
          LARL  1,_GLOBAL_OFFSET_TABLE_\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
          MVC   48(8,15),8(1)   # move loader info (object struct\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
address) to stack\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
          LG    1,16(12)        # Entry address of loader in R1\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
          BCR   15,1            # Jump to\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
loader\keepn\hyphpar0\par\pard\sb200\li960\sl220\qj \b Figure 3-4. Special first entry in Procedure Linkage Table\hyphpar0\par\pard\sb200\li960\sl220\qj \b0\lang1033 The LD_BIND_NOW environment variable can change dynamic linking behavior. If its value is not null the dynamic linker resolves the function call binding at load time, before transferring control to the program. In other words the dynamic linker processes relocation entries of type R_390_JMP_SLOT during process initialization. If LD_BIND_NOW is null the dynamic linker evaluates PLT entries lazily, delaying symbol resolution and relocation until the first execution of a table entry.\hyphpar0\par\pard\sb200\li1360\sl198\qj \b\fs18\lang1024\f2 Note: \b0\f3 Lazy binding generally improves overall application performance because unused symbols do not incur the overhead of dynamic linking. Nevertheless, two situations make lazy binding undesirable for some applications: \hyphpar0\par\pard\sb100\li1840\sl198\fi-480\qj \tqr\tx1795\tx1840\tab 1.\tab The initial reference to a shared object function takes longer  than subsequent calls because the dynamic linker intercepts the call to resolve  the symbol, and some applications cannot tolerate this unpredictability.\hyphpar0\par\pard\sb100\li1840\sl198\fi-480\qj \tqr\tx1795\tx1840\tab 2.\tab If an error occurs and the dynamic linker cannot resolve the  symbol, the dynamic linker will terminate the program. Under lazy binding,  this might occur at arbitrary times. Once again, some applications cannot  tolerate this unpredictability. By turning off lazy binding, the dynamic linker  forces the failure to occur during process initialization, before the application  receives control.\hyphpar0\par\sect\sectd\plain\pgwsxn12240\pghsxn15840\marglsxn1920\margrsxn1920\margtsxn1440\margbsxn1200\headery0\footery0\pgndec\titlepg{\headerf\pard\sl-240\sb770\sa430\plain\tqc\tx4200\tqr\tx8400 {}\tab {}\tab {}\par}{\footerf\pard\sl-240\sb50\sa910\plain\tqc\tx4200\tqr\tx8400 {}\tab {}\tab {\i\fs20\f1 \chpgn }\par}{\headerl\pard\sl-240\sb770\sa430\plain\tqc\tx4200\tqr\tx8400 {\i\fs20\f1 Appendix A. }\tab {}\tab {}\par}{\footerl\pard\sl-240\sb50\sa910\plain\tqc\tx4200\tqr\tx8400 {\i\fs20\f1 \chpgn }\tab {}\tab {}\par}{\headerr\pard\sl-240\sb770\sa430\plain\tqc\tx4200\tqr\tx8400 {}\tab {}\tab {\i\fs20\f1 Appendix A. }\par}{\footerr\pard\sl-240\sb50\sa910\plain\tqc\tx4200\tqr\tx8400 {}\tab {}\tab {\i\fs20\f1 \chpgn }\par}\pard\sb220\s1\sl322 {\*\bkmkstart _2308}{\*\bkmkend _2308}\b\fs29\f2 Appendix A. \keepn\hyphpar0\par\pard\sb200\s2\sl266 {\*\bkmkstart _2310}{\*\bkmkend _2310}\fs24 GNU Free Documentation License\keepn\hyphpar0\par\pard\sb121\li960\sl220\qj \b0\fs20\lang1033\f1 A current copy of the license can be found at:\hyphpar0\par\pard\sb100\li960\sl220\qj http://www.linuxbase.org/spec/refspecs/LSB_1.2.0/gLSB/gfdl.html\hyphpar0\par\pard\sb100\li960\sl220\qj Version 1.1, March 2000\hyphpar0\par\pard\sb100\li960\sl220\qj Copyright (C) 2000 Free Software Foundation, Inc. 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. \hyphpar0\par\pard\sb200\s3\li960\sl242 {\*\bkmkstart _2317}{\*\bkmkend _2317}\b\fs22\lang1024\f2 PREAMBLE\keepn\hyphpar0\par\pard\sb110\li960\sl220\qj \b0\fs20\lang1033\f1 The purpose of this License is to make a manual, textbook, or other written document "free" in the sense of freedom: to assure everyone the effective freedom to copy and redistribute it, with or without modifying it, either commercially or noncommercially. Secondarily, this License preserves for the author and publisher a way to get credit for their work, while not being considered responsible for modifications made by others. This License is a kind of "copyleft", which means that derivative works of the document must themselves be free in the same sense. It complements the GNU General Public License, which is a copyleft license designed for free software. We have designed this License in order to use it for manuals for free software, because free software needs free documentation: a free program should come with manuals providing the same freedoms that the software does. But this License is not limited to software manuals; it can be used for any textual work, regardless of subject matter or whether it is published as a printed book. We recommend this License principally for works whose purpose is instruction or reference.\hyphpar0\par\pard\sb200\s3\li960\sl242 {\*\bkmkstart _2320}{\*\bkmkend _2320}\b\fs22\lang1024\f2 APPLICABILITY AND DEFINITIONS\keepn\hyphpar0\par\pard\sb110\li960\sl220\qj \b0\fs20\lang1033\f1 This License applies to any manual or other work that contains a notice placed by the copyright holder saying it can be distributed under the terms of this License. The "Document", below, refers to any such manual or work. Any member of the public is a licensee, and is addressed as "you".\hyphpar0\par\pard\sb100\li960\sl220\qj A "Modified Version" of the Document means any work containing the Document or a portion of it, either copied verbatim, or with modifications and/or translated into another language.\hyphpar0\par\pard\sb100\li960\sl220\qj A "Secondary Section" is a named appendix or a front-matter section of the Document that deals exclusively with the relationship of the publishers or authors of the Document to the Document's overall subject (or to related matters) and contains nothing that could fall directly within that overall subject. (For example, if the Document is in part a textbook of mathematics, a Secondary Section may not explain any mathematics.) The relationship could be a matter of historical connection with the subject or with related matters, or of legal, commercial, philosophical, ethical or political position regarding them.\hyphpar0\par\pard\sb100\li960\sl220\qj The "Invariant Sections" are certain Secondary Sections whose titles are designated, as being those of Invariant Sections, in the notice that says that the Document is released under this License.\hyphpar0\par\pard\sb100\li960\sl220\qj The "Cover Texts" are certain short passages of text that are listed, as Front-Cover Texts or Back-Cover Texts, in the notice that says that the Document is released under this License.\hyphpar0\par\pard\sb100\li960\sl220\qj A "Transparent" copy of the Document means a machine-readable copy, represented in a format whose specification is available to the general public, whose contents can be viewed and edited directly and straightforwardly with generic text editors or (for images composed of pixels) generic paint programs or (for drawings) some widely available drawing editor, and that is suitable for input to text formatters or for automatic translation to a variety of formats suitable for input to text formatters. A copy made in an otherwise Transparent file format whose markup has been designed to thwart or discourage subsequent modification by readers is not Transparent. A copy that is not "Transparent" is called "Opaque".\hyphpar0\par\pard\sb100\li960\sl220\qj Examples of suitable formats for Transparent copies include plain ASCII without markup, Texinfo input format, LaTeX input format, SGML or XML using a publicly available DTD, and standard-conforming simple HTML designed for human modification. Opaque formats include PostScript, PDF, proprietary formats that can be read and edited only by proprietary word processors, SGML or XML for which the DTD and/or processing tools are not generally available, and the machine-generated HTML produced by some word processors for output purposes only.\hyphpar0\par\pard\sb100\li960\sl220\qj The "Title Page" means, for a printed book, the title page itself, plus such following pages as are needed to hold, legibly, the material this License requires to appear in the title page. For works in formats which do not have any title page as such, "Title Page" means the text near the most prominent appearance of the work's title, preceding the beginning of the body of the text.\hyphpar0\par\pard\sb200\s3\li960\sl242 {\*\bkmkstart _2330}{\*\bkmkend _2330}\b\fs22\lang1024\f2 VERBATIM COPYING\keepn\hyphpar0\par\pard\sb110\li960\sl220\qj \b0\fs20\lang1033\f1 You may copy and distribute the Document in any medium, either commercially or noncommercially, provided that this License, the copyright notices, and the license notice saying this License applies to the Document are reproduced in all copies, and that you add no other conditions whatsoever to those of this License. You may not use technical measures to obstruct or control the reading or further copying of the copies you make or distribute. However, you may accept compensation in exchange for copies. If you distribute a large enough number of copies you must also follow the conditions in section 3.\hyphpar0\par\pard\sb100\li960\sl220\qj You may also lend copies, under the same conditions stated above, and you may publicly display copies.\hyphpar0\par\pard\sb200\s3\li960\sl242 {\*\bkmkstart _2334}{\*\bkmkend _2334}\b\fs22\lang1024\f2 COPYING IN QUANTITY\keepn\hyphpar0\par\pard\sb110\li960\sl220\qj \b0\fs20\lang1033\f1 If you publish printed copies of the Document numbering more than 100, and the Document's license notice requires Cover Texts, you must enclose the copies in covers that carry, clearly and legibly, all these Cover Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on the back cover. Both covers must also clearly and legibly identify you as the publisher of these copies. The front cover must present the full title with all words of the title equally prominent and visible. You may add other material on the covers in addition. Copying with changes limited to the covers, as long as they preserve the title of the Document and satisfy these conditions, can be treated as verbatim copying in other respects.\hyphpar0\par\pard\sb100\li960\sl220\qj If the required texts for either cover are too voluminous to fit legibly, you should put the first ones listed (as many as fit reasonably) on the actual cover, and continue the rest onto adjacent pages.\hyphpar0\par\pard\sb100\li960\sl220\qj If you publish or distribute Opaque copies of the Document numbering more than 100, you must either include a machine-readable Transparent copy along with each Opaque copy, or state in or with each Opaque copy a publicly-accessible computer-network location containing a complete Transparent copy of the Document, free of added material, which the general network-using public has access to download anonymously at no charge using public-standard network protocols. If you use the latter option, you must take reasonably prudent steps, when you begin distribution of Opaque copies in quantity, to ensure that this Transparent copy will remain thus accessible at the stated location until at least one year after the last time you distribute an Opaque copy (directly or through your agents or retailers) of that edition to the public.\hyphpar0\par\pard\sb100\li960\sl220\qj It is requested, but not required, that you contact the authors of the Document well before redistributing any large number of copies, to give them a chance to provide you with an updated version of the Document.\hyphpar0\par\pard\sb200\s3\li960\sl242 {\*\bkmkstart _2340}{\*\bkmkend _2340}\b\fs22\lang1024\f2 MODIFICATIONS\keepn\hyphpar0\par\pard\sb110\li960\sl220\qj \b0\fs20\lang1033\f1 You may copy and distribute a Modified Version of the Document under the conditions of sections 2 and 3 above, provided that you release the Modified Version under precisely this License, with the Modified Version filling the role of the Document, thus licensing distribution and modification of the Modified Version to whoever possesses a copy of it. In addition, you must do these things in the Modified Version:\hyphpar0\par\pard\sb100\li1160\sl220\fi-200\qj \tx1160 \fs16\lang1024 \'95\tab \fs20 Use in the Title Page (and on the covers, if any) a title distinct from that of the Document, and from those of previous versions (which should, if there were any, be listed in the History section of the Document). You may use the same title as a previous version if the original publisher of that version gives permission.\hyphpar0\par\pard\sb100\li1160\sl220\fi-200\qj \tx1160 \fs16 \'95\tab \fs20 List on the Title Page, as authors, one or more persons or entities responsible for authorship of the modifications in the Modified Version, together with at least five of the principal authors of the Document (all of its principal authors, if it has less than five).\hyphpar0\par\pard\sb100\li1160\sl220\fi-200\qj \tx1160 \fs16 \'95\tab \fs20 State on the Title page the name of the publisher of the Modified Version, as the publisher.\hyphpar0\par\pard\sb100\li1160\sl220\fi-200\qj \tx1160 \fs16 \'95\tab \fs20 Preserve all the copyright notices of the Document.\hyphpar0\par\pard\sb100\li1160\sl220\fi-200\qj \tx1160 \fs16 \'95\tab \fs20 Add an appropriate copyright notice for your modifications adjacent to the other copyright notices.\hyphpar0\par\pard\sb100\li1160\sl220\fi-200\qj \tx1160 \fs16 \'95\tab \fs20 Include, immediately after the copyright notices, a license notice giving the public permission to use the Modified Version under the terms of this License, in the form shown in the Addendum below.\hyphpar0\par\pard\sb100\li1160\sl220\fi-200\qj \tx1160 \fs16 \'95\tab \fs20 Preserve in that license notice the full lists of Invariant Sections and required Cover Texts given in the Document's license notice. \hyphpar0\par\pard\sb100\li1160\sl220\fi-200\qj \tx1160 \fs16 \'95\tab \fs20 Include an unaltered copy of this License.\hyphpar0\par\pard\sb100\li1160\sl220\fi-200\qj \tx1160 \fs16 \'95\tab \fs20 Preserve the section entitled "History", and its title, and add to it an item stating at least the title, year, new authors, and publisher of the Modified Version as given on the Title Page. If there is no section entitled "History" in the Document, create one stating the title, year, authors, and publisher of the Document as given on its Title Page, then add an item describing the Modified Version as stated in the previous sentence.\hyphpar0\par\pard\sb100\li1160\sl220\fi-200\qj \tx1160 \fs16 \'95\tab \fs20  Preserve the network location, if any, given in the Document for public access to a Transparent copy of the Document, and likewise the network locations given in the Document for previous versions it was based on. These may be placed in the "History" section. You may omit a network location for a work that was published at least four years before the Document itself, or if the original publisher of the version it refers to gives permission.\hyphpar0\par\pard\sb100\li1160\sl220\fi-200\qj \tx1160 \fs16 \'95\tab \fs20 In any section entitled "Acknowledgements" or "Dedications", preserve the section's title, and preserve in the section all the substance and tone of each of the contributor acknowledgements and/or dedications given therein.\hyphpar0\par\pard\sb100\li1160\sl220\fi-200\qj \tx1160 \fs16 \'95\tab \fs20 Preserve all the Invariant Sections of the Document, unaltered in their text and in their titles. Section numbers or the equivalent are not considered part of the section titles.\hyphpar0\par\pard\sb100\li1160\sl220\fi-200\qj \tx1160 \fs16 \'95\tab \fs20 Delete any section entitled "Endorsements". Such a section may not be included in the Modified Version.\hyphpar0\par\pard\sb100\li1160\sl220\fi-200\qj \tx1160 \fs16 \'95\tab \fs20 Do not retitle any existing section as "Endorsements" or to conflict in title with any Invariant Section.\hyphpar0\par\pard\sb100\li960\sl220\qj \lang1033 If the Modified Version includes new front-matter sections or appendices that qualify as Secondary Sections and contain no material copied from the Document, you may at your option designate some or all of these sections as invariant. To do this, add their titles to the list of Invariant Sections in the Modified Version's license notice. These titles must be distinct from any other section titles.\hyphpar0\par\pard\sb100\li960\sl220\qj You may add a section entitled "Endorsements", provided it contains nothing but endorsements of your Modified Version by various parties--for example, statements of peer review or that the text has been approved by an organization as the authoritative definition of a standard.\hyphpar0\par\pard\sb100\li960\sl220\qj You may add a passage of up to five words as a Front-Cover Text, and a passage of up to 25 words as a Back-Cover Text, to the end of the list of Cover Texts in the Modified Version. Only one passage of Front-Cover Text and one of Back-Cover Text may be added by (or through arrangements made by) any one entity. If the Document already includes a cover text for the same cover, previously added by you or by arrangement made by the same entity you are acting on behalf of, you may not add another; but you may replace the old one, on explicit permission from the previous publisher that added the old one.\hyphpar0\par\pard\sb100\li960\sl220\qj The author(s) and publisher(s) of the Document do not by this License give permission to use their names for publicity for or to assert or imply endorsement of any Modified Version.\hyphpar0\par\pard\sb200\s3\li960\sl242 {\*\bkmkstart _2376}{\*\bkmkend _2376}\b\fs22\lang1024\f2 COMBINING DOCUMENTS\keepn\hyphpar0\par\pard\sb110\li960\sl220\qj \b0\fs20\lang1033\f1 You may combine the Document with other documents released under this License, under the terms defined in section 4 above for modified versions, provided that you include in the combination all of the Invariant Sections of all of the original documents, unmodified, and list them all as Invariant Sections of your combined work in its license notice.\hyphpar0\par\pard\sb100\li960\sl220\qj The combined work need only contain one copy of this License, and multiple identical Invariant Sections may be replaced with a single copy. If there are multiple Invariant Sections with the same name but different contents, make the title of each such section unique by adding at the end of it, in parentheses, the name of the original author or publisher of that section if known, or else a unique number. Make the same adjustment to the section titles in the list of Invariant Sections in the license notice of the combined work.\hyphpar0\par\pard\sb100\li960\sl220\qj In the combination, you must combine any sections entitled "History" in the various original documents, forming one section entitled "History"; likewise combine any sections entitled "Acknowledgements", and any sections entitled "Dedications". You must delete all sections entitled "Endorsements." \hyphpar0\par\pard\sb200\s3\li960\sl242 {\*\bkmkstart _2381}{\*\bkmkend _2381}\b\fs22\lang1024\f2 COLLECTIONS OF DOCUMENTS\keepn\hyphpar0\par\pard\sb110\li960\sl220\qj \b0\fs20\lang1033\f1 You may make a collection consisting of the Document and other documents released under this License, and replace the individual copies of this License in the various documents with a single copy that is included in the collection, provided that you follow the rules of this License for verbatim copying of each of the documents in all other respects.\hyphpar0\par\pard\sb100\li960\sl220\qj You may extract a single document from such a collection, and distribute it individually under this License, provided you insert a copy of this License into the extracted document, and follow this License in all other respects regarding verbatim copying of that document.\hyphpar0\par\pard\sb200\s3\li960\sl242 {\*\bkmkstart _2385}{\*\bkmkend _2385}\b\fs22\lang1024\f2 AGGREGATION WITH INDEPENDENT WORKS\keepn\hyphpar0\par\pard\sb110\li960\sl220\qj \b0\fs20\lang1033\f1 A compilation of the Document or its derivatives with other separate and independent documents or works, in or on a volume of a storage or distribution medium, does not as a whole count as a Modified Version of the Document, provided no compilation copyright is claimed for the compilation. Such a compilation is called an "aggregate", and this License does not apply to the other self-contained works thus compiled with the Document, on account of their being thus compiled, if they are not themselves derivative works of the Document.\hyphpar0\par\pard\sb100\li960\sl220\qj If the Cover Text requirement of section 3 is applicable to these copies of the Document, then if the Document is less than one quarter of the entire aggregate, the Document's Cover Texts may be placed on covers that surround only the Document within the aggregate. Otherwise they must appear on covers around the whole aggregate.\hyphpar0\par\pard\sb200\s3\li960\sl242 {\*\bkmkstart _2389}{\*\bkmkend _2389}\b\fs22\lang1024\f2 TRANSLATION\keepn\hyphpar0\par\pard\sb110\li960\sl220\qj \b0\fs20\lang1033\f1 Translation is considered a kind of modification, so you may distribute translations of the Document under the terms of section 4. Replacing Invariant Sections with translations requires special permission from their copyright holders, but you may include translations of some or all Invariant Sections in addition to the original versions of these Invariant Sections. You may include a translation of this License provided that you also include the original English version of this License. In case of a disagreement between the translation and the original English version of this License, the original English version will prevail.\hyphpar0\par\pard\sb200\s3\li960\sl242 {\*\bkmkstart _2392}{\*\bkmkend _2392}\b\fs22\lang1024\f2 TERMINATION\keepn\hyphpar0\par\pard\sb110\li960\sl220\qj \b0\fs20\lang1033\f1 You may not copy, modify, sublicense, or distribute the Document except as expressly provided for under this License. Any other attempt to copy, modify, sublicense or distribute the Document is void, and will automatically terminate your rights under this License. However, parties who have received copies, or rights, from you under this License will not have their licenses terminated so long as such parties remain in full compliance.\hyphpar0\par\pard\sb200\s3\li960\sl242 {\*\bkmkstart _2395}{\*\bkmkend _2395}\b\fs22\lang1024\f2 FUTURE REVISIONS OF THIS LICENSE\keepn\hyphpar0\par\pard\sb110\li960\sl220\qj \b0\fs20\lang1033\f1 The Free Software Foundation may publish new, revised versions of the GNU Free Documentation License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. See http://www.gnu.org/copyleft/.\hyphpar0\par\pard\sb100\li960\sl220\qj Each version of the License is given a distinguishing version number. If the Document specifies that a particular numbered version of this License "or any later version" applies to it, you have the option of following the terms and conditions either of that specified version or of any later version that has been published (not as a draft) by the Free Software Foundation. If the Document does not specify a version number of this License, you may choose any version ever published (not as a draft) by the Free Software Foundation. \hyphpar0\par\pard\sb200\s3\li960\sl242 {\*\bkmkstart _2399}{\*\bkmkend _2399}\b\fs22\lang1024\f2 How to use this License for your documents\keepn\hyphpar0\par\pard\sb110\li960\sl220\qj \b0\fs20\lang1033\f1 To use this License in a document you have written, include a copy of the License in the document and put the following copyright and license notices just after the title page:\hyphpar0\par\pard\sb200\li960\sl220\qj \lang1024      Copyright (c) YEAR YOUR NAME.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
Permission is granted to copy, distribute \sa0\par\fi0\sb0
\sa0\par\fi0\sb0
        and/or modify this document under the terms of the GNU Free\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
Documentation \sa0\par\fi0\sb0
\sa0\par\fi0\sb0
        License, Version 1.1 or any later version published by the Free\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
Software Foundation; \sa0\par\fi0\sb0
\sa0\par\fi0\sb0
        with the Invariant Sections being LIST THEIR TITLES, with the\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
Front-Cover \sa0\par\fi0\sb0
\sa0\par\fi0\sb0
        Texts being LIST, and with the Back-Cover Texts         being LIST. \sa0\par\fi0\sb0
\sa0\par\fi0\sb0
        A copy of the license is included in the section entitled\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
     "GNU Free Documentation License".\hyphpar0\par\pard\sb200\li960\sl220\qj \lang1033 If you have no Invariant Sections, write "with no Invariant Sections" instead of saying which ones are invariant. If you have no Front-Cover Texts, write "no Front-Cover Texts" instead of "Front-Cover Texts being LIST"; likewise for Back-Cover Texts.\hyphpar0\par\pard\sb100\li960\sl220\qj If your document contains nontrivial examples of program code, we recommend releasing these examples in parallel under your choice of free software license, such as the GNU General Public License, to permit their use in free software. \hyphpar0\par\sect\sectd\plain\pgwsxn12240\pghsxn15840\marglsxn1920\margrsxn1920\margtsxn1440\margbsxn1200\headery0\footery0\pgndec\titlepg{\headerf\pard\sl-240\sb770\sa430\plain\tqc\tx4200\tqr\tx8400 {}\tab {}\tab {}\par}{\footerf\pard\sl-240\sb50\sa910\plain\tqc\tx4200\tqr\tx8400 {}\tab {}\tab {\i\fs20\f1 \chpgn }\par}{\headerl\pard\sl-240\sb770\sa430\plain\tqc\tx4200\tqr\tx8400 {\i\fs20\f1 Chapter 4. Notices}\tab {}\tab {}\par}{\footerl\pard\sl-240\sb50\sa910\plain\tqc\tx4200\tqr\tx8400 {\i\fs20\f1 \chpgn }\tab {}\tab {}\par}{\headerr\pard\sl-240\sb770\sa430\plain\tqc\tx4200\tqr\tx8400 {}\tab {}\tab {\i\fs20\f1 Chapter 4. Notices}\par}{\footerr\pard\sl-240\sb50\sa910\plain\tqc\tx4200\tqr\tx8400 {}\tab {}\tab {\i\fs20\f1 \chpgn }\par}\pard\sb220\s1\sl322 {\*\bkmkstart ID_NOTICES}{\*\bkmkend ID_NOTICES}\b\fs29\f2 Chapter 4. Notices\keepn\hyphpar0\par\pard\sb146\li960\sl220\qj \b0\fs20\lang1033\f1 This information was developed for products and services offered in the U.S.A. IBM may not offer the products, services, or features discussed in this document in other countries. Consult your local IBM representative for information about the products and services currently available in your area. Any reference to an IBM product, program, or service is not intended to state or imply that only that IBM product, program, or service may be used. Any functionally equivalent product, program, or service that does not infringe any IBM intellectual property right may be used instead. However, it is the user's responsibility to evaluate and verify the operation of any non-IBM product, program, or service.\hyphpar0\par\pard\sb100\li960\sl220\qj IBM may have patents or pending patent applications covering subject matter described in this document. The furnishing of this document does not give you any license to these patents. You can send license inquiries, in writing, to: \hyphpar0\par\pard\sb200\li960\sl220\qj IBM Director of Licensing\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
IBM Corporation\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
North Castle Drive\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
Armonk, NY  10504-1785\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
U.S.A.\hyphpar0\par\pard\sb200\li960\sl220\qj For license inquiries regarding double-byte (DBCS) information, contact the IBM Intellectual Property Department in your country or send inquiries, in writing, to: \hyphpar0\par\pard\sb200\li960\sl220\qj IBM World Trade Asia Corporation\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
Licensing\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
2-31 Roppongi 3-chome, Minato-ku\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
Tokyo 106-0032, Japan\hyphpar0\par\pard\sb200\li960\sl220\qj The following paragraph does not apply to the United Kingdom or any other country where such provisions are inconsistent with local law: INTERNATIONAL BUSINESS MACHINES CORPORATION PROVIDES THIS PUBLICATION \'93AS IS\'94 WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Some states do not allow disclaimer of express or implied warranties in certain transactions, therefore, this statement may not apply to you.\hyphpar0\par\pard\sb100\li960\sl220\qj This information could include technical inaccuracies or typographical errors. Changes are periodically made to the information herein; these changes will be incorporated in new editions of the publication. IBM may make improvements and/or changes in the product(s) and/or the program(s) described in this publication at any time without notice.\hyphpar0\par\pard\sb100\li960\sl220\qj Any references in this information to non-IBM Web sites are provided for convenience only and do not in any manner serve as an endorsement of those Web sites. The materials at those Web sites are not part of the materials for this IBM product and use of those Web sites is at your own risk.\hyphpar0\par\pard\sb100\li960\sl220\qj IBM may use or distribute any of the information you supply in any way it believes appropriate without incurring any obligation to you.\hyphpar0\par\pard\sb100\li960\sl220\qj Information concerning non-IBM products was obtained from the suppliers of those products, their published announcements or other publicly available sources. IBM has not tested those products and cannot confirm the accuracy of performance, compatibility or any other claims related to non-IBM products. Questions on the capabilities of non-IBM products should be addressed to the suppliers of those products.\hyphpar0\par\pard\sb100\li960\sl220\qj COPYRIGHT LICENSE:\hyphpar0\par\pard\sb100\li960\sl220\qj This information contains sample application programs in source language, which illustrate programming techniques on various operating platforms. You may copy, modify, and distribute these sample programs in any form without payment to IBM, for the purposes of developing, using, marketing or distributing application programs conforming to the application programming interface for the operating platform for which the sample programs are written. These examples have not been thoroughly tested under all conditions. IBM, therefore, cannot guarantee or imply reliability, serviceability, or function of these programs. You may copy, modify, and distribute these sample programs in any form without payment to IBM for the purposes of developing, using, marketing, or distributing application programs conforming to IBM's application programming interfaces. \hyphpar0\par\pard\sb200\s2\sl266 {\*\bkmkstart _2421}{\*\bkmkend _2421}\b\fs24\lang1024\f2 Programming interface information\keepn\hyphpar0\par\pard\sb121\li960\sl220\qj \b0\fs20\lang1033\f1 This book contains information and examples which are not intended to be used as a programming interface of Linux for zSeries.\hyphpar0\par\pard\sb200\s2\sl266 {\*\bkmkstart ID_TRADEMARKS}{\*\bkmkend ID_TRADEMARKS}\b\fs24\lang1024\f2 Trademarks\keepn\hyphpar0\par\pard\sb121\li960\sl220\qj \b0\fs20\lang1033\f1 The following terms are trademarks of International Business Machines Corporation in the United States, other countries, or both:\hyphpar0\par\pard\sb200\li960\sl220\qj \b\lang1024 Table 4-1. \sa100\keepn\par\trowd\trleft960 \clvertalt\cellx4680\clvertalt\cellx8400 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 IBM\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 ESA/390\sa160\cell \row \trowd\trleft960 \clvertalt\cellx4680\clvertalt\cellx8400 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 S/390\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 System/390\sa160\cell \row \trowd\trleft960 \clvertalt\cellx4680\clvertalt\cellx8400 \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 zSeries\sa160\cell \plain \pard\intbl\sb100\li40\ri100\sl220\qj \fs20\lang1033\f1 z/Architecture\sa160\cell \row \pard\plain\sl-1\hyphpar0\par\pard\sb200\li960\sl220\qj \fs20\lang1033\f1 Linux is a registered trademark of Linus Torvalds and others.\hyphpar0\par\pard\sb100\li960\sl220\qj Other company, product, and service names may be trademarks or service marks of others.\hyphpar0\par\sect\sectd\plain\pgwsxn12240\pghsxn15840\marglsxn1920\margrsxn1920\margtsxn1440\margbsxn1200\headery0\footery0\pgndec\titlepg{\headerf\pard\sl-240\sb770\sa430\plain\tqc\tx4200\tqr\tx8400 {}\tab {}\tab {}\par}{\footerf\pard\sl-240\sb50\sa910\plain\tqc\tx4200\tqr\tx8400 {}\tab {}\tab {\i\fs20\f1 \chpgn }\par}{\headerl\pard\sl-240\sb770\sa430\plain\tqc\tx4200\tqr\tx8400 {\i\fs20\f1 Appendix B. }\tab {}\tab {}\par}{\footerl\pard\sl-240\sb50\sa910\plain\tqc\tx4200\tqr\tx8400 {\i\fs20\f1 \chpgn }\tab {}\tab {}\par}{\headerr\pard\sl-240\sb770\sa430\plain\tqc\tx4200\tqr\tx8400 {}\tab {}\tab {\i\fs20\f1 Appendix B. }\par}{\footerr\pard\sl-240\sb50\sa910\plain\tqc\tx4200\tqr\tx8400 {}\tab {}\tab {\i\fs20\f1 \chpgn }\par}\pard\sb220\s1\sl322 {\*\bkmkstart _2450}{\*\bkmkend _2450}\b\fs29\f2 Appendix B. \keepn\hyphpar0\par\pard\sb146\li960\sl220\qj \b0\fs20\lang1033\f1 Related publications: \hyphpar0\par\pard\sb100\li1160\sl220\fi-200\qj \tx1160 \fs16 \'95\tab \fs20 [\i z/Architecture Principles of Operation \i0 ]: SA22\'967832\hyphpar0\par\pard\sb100\li1160\sl220\fi-200\qj \tx1160 \fs16 \'95\tab \fs20 [\i System V Application Binary Interface \i0 ]\hyphpar0\par\sect\sectd\plain\pgwsxn12240\pghsxn15840\marglsxn1920\margrsxn1920\margtsxn1440\margbsxn1200\headery0\footery0\pgndec\titlepg{\headerf\pard\sl-240\sb770\sa430\plain\tqc\tx4200\tqr\tx8400 {}\tab {}\tab {}\par}{\footerf\pard\sl-240\sb50\sa910\plain\tqc\tx4200\tqr\tx8400 {}\tab {}\tab {\i\fs20\f1 \chpgn }\par}{\headerl\pard\sl-240\sb770\sa430\plain\tqc\tx4200\tqr\tx8400 {}\tab {}\tab {}\par}{\footerl\pard\sl-240\sb50\sa910\plain\tqc\tx4200\tqr\tx8400 {\i\fs20\f1 \chpgn }\tab {}\tab {}\par}{\headerr\pard\sl-240\sb770\sa430\plain\tqc\tx4200\tqr\tx8400 {}\tab {}\tab {}\par}{\footerr\pard\sl-240\sb50\sa910\plain\tqc\tx4200\tqr\tx8400 {}\tab {}\tab {\i\fs20\f1 \chpgn }\par}\cols2\colsx288\pard\sb220\s1\sl322 {\*\bkmkstart _2462}{\*\bkmkend _2462}\b\fs29\f2 Index\hyphpar0\par}
