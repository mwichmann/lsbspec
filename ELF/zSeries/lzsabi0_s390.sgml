<!DOCTYPE BOOK PUBLIC "-//OASIS//DTD DocBook V4.1//EN">
<!--ArborText, Inc., 1988-2001, v.4002-->
<?Pub Inc>
<book>
<title>ELF Application Binary Interface Supplement</title>
<titleabbrev>Linux for S/390: ELF ABI Supplement</titleabbrev>
<toc>
<tocchap></tocchap><?Pub Caret1></toc>
<chapter>
<title>Low-level system information</title>
<sect1>
<title>Machine interface</title>
<para>This section describes the processor-specific information for the S/390
processors.</para>
<sect2>
<title>Processor architecture</title>
<para><citation><citetitle>ESA/390 Principles of Operation</citetitle></citation> (SA22&ndash;7201)
defines the ESA/390 architecture.</para>
<para>Programs intended to execute directly on the processor use the ESA/390
instruction set, and the instruction encoding and semantics of the architecture.
</para>
<para>An application program can assume that all instructions defined by the
architecture that are neither privileged nor optional exist and work as documented.
</para>
<para>To be ABI-conforming the processor must implement the instructions of
the architecture, perform the specified operations, and produce the expected
results. The ABI neither places performance constraints on systems nor specifies
what instructions must be implemented in hardware. A software emulation of
the architecture could conform to the ABI.</para>
<para>There are some instructions in the ESA/390 architecture which are described
as 'optional'. Linux for S/390 requires some of these to be available; in
particular:</para>
<itemizedlist>
<listitem><para>additional floating point facilities,</para>
</listitem>
<listitem><para>compare and move extended,</para>
</listitem>
<listitem><para>immediate and relative instructions,</para>
</listitem>
<listitem><para>string instructions.</para>
</listitem>
</itemizedlist>
<para>The ABI guarantees that these instructions are present. In order to
comply with the ABI the operating system must emulate these instructions on
machines which do not support them in the hardware. Other instructions are
not available in some current models; programs using these instructions do
not conform to the S/390 ABI and executing them on machines without the extra
capabilities will result in undefined behavior.</para>
<para>In the ESA/390 architecture a processor runs in big-endian mode. (See <xref
linkend="BYTEORDERING">.)</para>
</sect2>
<sect2>
<title>Data representation</title>
<sect3 id="BYTEORDERING">
<title>Byte ordering</title>
<para>The architecture defines an 8-bit byte, a 16-bit halfword, a 32-bit
word and a 64-bit doubleword. Byte ordering defines how the bytes that make
up halfwords, words and doublewords are ordered in memory. Most significant
byte (MSB) ordering, or "Big-Endian" as it is sometimes called, means that
the most significant byte of a structure is located in the lowest addressed
byte position in a storage unit (byte 0).</para>
<para><xref linkend="HALFWORD"> to <xref linkend="DOUBLEWORDS"> illustrate
the conventions for bit and byte numbering within storage units of various
widths. These conventions apply to both integer data and floating-point data,
where the most significant byte of a floating-point value holds the sign and
the exponent (or at least the start of the exponent). The figures show big-endian
byte numbers in the upper left corners and bit numbers in the lower corners.
</para>
<figure id="HALFWORD">
<title>Bit and byte numbering in halfwords</title>
<graphic entityref="halfwrd" fileref="halfwrd.eps"></graphic>
</figure>
<figure id="WORDS">
<title>Bit and byte numbering in words</title>
<graphic entityref="word" fileref="word.eps"></graphic>
</figure>
<figure id="DOUBLEWORDS">
<title>Bit and byte numbering in doublewords</title>
<graphic entityref="dblword" fileref="dblword.eps"></graphic>
</figure>
</sect3>
<sect3>
<title>Fundamental types</title>
<para><xref linkend="SCALAR"> shows how ANSI C scalar types correspond to
those of the S/390 processor. For all types a NULL pointer has the value zero
(binary).</para>
<table id="SCALAR">
<title>Scalar types</title>
<tgroup cols="5"><colspec colname="COL1" colwidth="66*"><colspec colname="COL2"
colwidth="94*"><colspec colname="COL3" colwidth="59*"><colspec colname="COL4"
colwidth="64*"><colspec colname="COL5" colwidth="84*">
<thead><row><entry colname="COL1" valign="MIDDLE"><para>Type</para></entry>
<entry colname="COL2" valign="MIDDLE"><para>ANSI C</para></entry><entry colname="COL3"
valign="MIDDLE"><para>sizeof (bytes)</para></entry><entry colname="COL4" valign="MIDDLE"><para>
Alignment</para></entry><entry colname="COL5" valign="MIDDLE"><para>type (S/390)
</para></entry></row></thead>
<tfoot><row>
<entry namest="COL1" nameend="COL5" valign="TOP"><para>&sup1;Compilers and
systems may implement the long double data type in some other way, for performance
reasons, using a compiler option. Examples of such formats could be two successive
doubles or even a single double. Such usage does not conform to this ABI however,
and runs the risk of passing a wrongly formatted floating-point number to
another function as an argument. Programs using other formats should transform
long double floating-point numbers to a conforming format before passing them.
</para></entry>
</row></tfoot><tbody><row>
<entry colname="COL1" valign="MIDDLE"><para>Character</para></entry>
<entry colname="COL2" valign="MIDDLE"><para><informalexample>
<literallayout>signed char
char
unsigned char</literallayout>
</informalexample></para></entry>
<entry colname="COL3" valign="MIDDLE"><para>1</para></entry>
<entry colname="COL4" valign="MIDDLE"><para>1</para></entry>
<entry colname="COL5" valign="MIDDLE"><para>byte</para></entry>
</row><row>
<entry colname="COL1" valign="MIDDLE"><para>Short</para></entry>
<entry colname="COL2" valign="MIDDLE"><para><informalexample>
<literallayout>signed short
short
unsigned short</literallayout>
</informalexample></para></entry>
<entry colname="COL3" valign="MIDDLE"><para>2</para></entry>
<entry colname="COL4" valign="MIDDLE"><para>2</para></entry>
<entry colname="COL5" valign="MIDDLE"><para>halfword</para></entry>
</row><row>
<entry colname="COL1" valign="MIDDLE"><para>Integer</para></entry>
<entry colname="COL2" valign="MIDDLE"><para><informalexample>
<literallayout>signed int
int
unsigned int
enum
signed long
long
unsigned long</literallayout>
</informalexample></para></entry>
<entry colname="COL3" valign="MIDDLE"><para>4</para></entry>
<entry colname="COL4" valign="MIDDLE"><para>4</para></entry>
<entry colname="COL5" valign="MIDDLE"><para>word</para></entry>
</row><row>
<entry colname="COL1" valign="MIDDLE"><para>Long long</para></entry>
<entry colname="COL2" valign="MIDDLE"><para><informalexample>
<literallayout>signed long long
long long
unsigned long long</literallayout>
</informalexample></para></entry>
<entry colname="COL3" valign="MIDDLE"><para>8</para></entry>
<entry colname="COL4" valign="MIDDLE"><para>8</para></entry>
<entry colname="COL5" valign="MIDDLE"><para>doubleword</para></entry>
</row><row>
<entry colname="COL1" valign="MIDDLE"><para>Pointer</para></entry>
<entry colname="COL2" valign="MIDDLE"><para><informalexample>
<literallayout>any-type *
any-type (*) ()</literallayout>
</informalexample></para></entry>
<entry colname="COL3" valign="MIDDLE"><para>4</para></entry>
<entry colname="COL4" valign="MIDDLE"><para>4</para></entry>
<entry colname="COL5" valign="MIDDLE"><para>unsigned word</para></entry>
</row><row>
<entry colname="COL1" morerows="2" valign="MIDDLE"><para>Floating point</para></entry>
<entry colname="COL2" valign="MIDDLE"><para><informalexample>
<literallayout>float</literallayout>
</informalexample></para></entry>
<entry colname="COL3" valign="MIDDLE"><para>4</para></entry>
<entry colname="COL4" valign="MIDDLE"><para>4</para></entry>
<entry colname="COL5" valign="MIDDLE"><para>single precision (IEEE)</para></entry>
</row><row>
<entry colname="COL2" valign="MIDDLE"><para><informalexample>
<literallayout>double</literallayout>
</informalexample></para></entry>
<entry colname="COL3" valign="MIDDLE"><para>8</para></entry>
<entry colname="COL4" valign="MIDDLE"><para>8</para></entry>
<entry colname="COL5" valign="MIDDLE"><para>double precision (IEEE)</para></entry>
</row><row>
<entry colname="COL2" valign="MIDDLE"><para><informalexample>
<literallayout>long
double&sup1;</literallayout>
</informalexample></para></entry>
<entry colname="COL3" valign="MIDDLE"><para>16</para></entry>
<entry colname="COL4" valign="MIDDLE"><para>16</para></entry>
<entry colname="COL5" valign="MIDDLE"><para>extended precision (IEEE)</para></entry>
</row></tbody></tgroup></table>
</sect3>
<sect3>
<title>Aggregates and unions</title>
<para>Aggregates (structures and arrays) and unions assume the alignment of
their most strictly aligned component, that is, the component with the largest
alignment. The size of any object, including aggregates and unions, is always
a multiple of the alignment of the object. An array uses the same alignment
as its elements. Structure and union objects may require padding to meet size
and alignment constraints:</para>
<itemizedlist>
<listitem><para>An entire structure or union object is aligned on the same
boundary as its most strictly aligned member.</para>
</listitem>
<listitem><para>Each member is assigned to the lowest available offset with
the appropriate alignment. This may require internal padding, depending on
the previous member.</para>
</listitem>
<listitem><para>If necessary, a structure's size is increased to make it a
multiple of the structure's alignment. This may require tail padding if the
last member does not end on the appropriate boundary.</para>
</listitem>
</itemizedlist>
<para>In the following examples (<xref linkend="STRUCT1"> to <xref linkend="STRUCT5">),
member byte offsets (for the big-endian implementation) appear in the upper
left corners.</para>
<figure id="STRUCT1">
<title>Structure smaller than a word</title>
<para><table frame="NONE" colsep="0" rowsep="0">
<title></title>
<tgroup cols="2"><colspec colname="COL1" colwidth="85*"><colspec colname="COL2"
colwidth="113*"><tbody><row>
<entry colname="COL1"><para><informalexample>
<literallayout>struct &lbrace;
         char c;
&rbrace;;</literallayout>
</informalexample></para></entry>
<entry colname="COL2"><para><graphic entityref="strctsmall" fileref="strctsmall.eps"></graphic></para></entry>
</row></tbody></tgroup></table></para>
</figure>
<figure id="STRUCT2">
<title>No padding</title>
<para><table frame="NONE" colsep="0" rowsep="0">
<title></title>
<tgroup cols="2"><colspec colnum="1" colname="COL1" colwidth="63*"><colspec
colnum="2" colname="COL2" colwidth="135*" align="LEFT" char="" charoff="50">
<tbody><row>
<entry colname="COL1"><para><informalexample>
<literallayout>struct &lbrace;
         char c;
         char d;
         short s;
         long n;
&rbrace;;</literallayout>
</informalexample></para></entry>
<entry colname="COL2"><para><graphic entityref="strct8nop" fileref="strct8nop.eps"></graphic></para></entry>
</row></tbody></tgroup></table></para>
</figure>
<figure id="STRUCT3">
<title>Internal padding</title>
<para><table frame="NONE" colsep="0" rowsep="0">
<title></title>
<tgroup cols="2"><colspec colnum="1" colname="COL1" colwidth="63*"><colspec
colnum="2" colname="COL2" colwidth="135*" align="LEFT" char="" charoff="50">
<tbody><row>
<entry colname="COL1"><para><informalexample>
<literallayout>struct &lbrace;
         char c;
         short s;
&rbrace;;</literallayout>
</informalexample></para></entry>
<entry colname="COL2"><para><graphic entityref="strct4pad" fileref="strct4pad.eps"></graphic></para></entry>
</row></tbody></tgroup></table></para>
</figure>
<figure id="STRUCT4">
<title>Internal and tail padding</title>
<para><table frame="NONE" colsep="0" rowsep="0">
<title></title>
<tgroup cols="2"><colspec colnum="1" colname="COL1" colwidth="67*"><colspec
colnum="2" colname="COL2" colwidth="132*" align="LEFT" char="" charoff="50">
<tbody><row>
<entry colname="COL1"><para><informalexample>
<literallayout>struct &lbrace;
         char c;
         double d;
         short s;
&rbrace;;</literallayout>
</informalexample></para></entry>
<entry colname="COL2"><para><graphic entityref="strct24pad" fileref="strct24pad.eps"></graphic></para></entry>
</row></tbody></tgroup></table></para>
</figure>
<figure id="STRUCT5">
<title>Union padding</title>
<para><table frame="NONE" colsep="0" rowsep="0">
<title></title>
<tgroup cols="2"><colspec colnum="1" colname="COL1" colwidth="67*"><colspec
colnum="2" colname="COL2" colwidth="132*" align="LEFT" char="" charoff="50">
<tbody><row>
<entry colname="COL1"><para><informalexample>
<literallayout>union  &lbrace;
         char c;
         short s;
         int   j;
&rbrace;;</literallayout>
</informalexample></para></entry>
<entry colname="COL2"><para><graphic entityref="strctunion" fileref="strctunion.eps"></graphic></para></entry>
</row></tbody></tgroup></table></para>
</figure>
</sect3>
<sect3>
<title>Bit-fields</title>
<para>C struct and union definitions may have "bit-fields," defining integral
objects with a specified number of bits (see <xref linkend="BITFIELDTABLE">).
</para>
<table id="BITFIELDTABLE">
<title>Bit fields</title>
<tgroup cols="3"><colspec colname="COL1" colwidth="92*"><colspec colname="COL2"
colwidth="89*"><colspec colname="COL3" colwidth="111*">
<thead><row><entry colname="COL1" valign="TOP"><para>Bit-field type</para></entry>
<entry colname="COL2" valign="TOP"><para>Width n</para></entry><entry colname="COL3"
valign="TOP"><para>Range</para></entry></row></thead>
<tbody><row>
<entry colname="COL1"><para><informalexample>
<literallayout>signed char

char

unsigned char</literallayout>
</informalexample></para></entry>
<entry colname="COL2" align="CENTER" valign="MIDDLE"><para>1 to 8</para></entry>
<entry colname="COL3"><para><informalexample>
<literallayout>-2&supn;&supminus;&sup1; to
2&supn;&supminus;&sup1; - 1

0 to 2&supn; - 1

0 to 2&supn; - 1</literallayout>
</informalexample></para></entry>
</row><row>
<entry colname="COL1"><para><informalexample>
<literallayout>signed short

short

unsigned short</literallayout>
</informalexample></para></entry>
<entry colname="COL2" align="CENTER" valign="MIDDLE"><para>1 to 16</para></entry>
<entry colname="COL3"><para><informalexample>
<literallayout>-2&supn;&supminus;&sup1; to
2&supn;&supminus;&sup1; - 1

0 to 2&supn; - 1

0 to 2&supn; - 1</literallayout>
</informalexample></para></entry>
</row><row>
<entry colname="COL1"><para><informalexample>
<literallayout>signed int

int

unsigned int

enum

signed long

long

unsigned long</literallayout>
</informalexample></para></entry>
<entry colname="COL2" align="CENTER" valign="MIDDLE"><para>1 to 32</para></entry>
<entry colname="COL3"><para><informalexample>
<literallayout>-2&supn;&supminus;&sup1; to
2&supn;&supminus;&sup1; - 1

0 to 2&supn; - 1

0 to 2&supn; - 1

0 to 2&supn; - 1

-2&supn;&supminus;&sup1; to 2&supn;&supminus;&sup1; - 1

0 to 2&supn; - 1

0 to 2&supn; - 1</literallayout>
</informalexample></para></entry>
</row><row>
<entry colname="COL1"><para><informalexample>
<literallayout>signed long long

long long

unsigned long long</literallayout>
</informalexample></para></entry>
<entry colname="COL2" align="CENTER" valign="MIDDLE"><para>1 to 64</para></entry>
<entry colname="COL3"><para><informalexample>
<literallayout>-2&supn;&supminus;&sup1; to
2&supn;&supminus;&sup1; - 1

0 to 2&supn; - 1

0 to 2&supn; -
1</literallayout>
</informalexample></para></entry>
</row></tbody></tgroup></table>
<para>"Plain" bit-fields (that is, those neither signed nor unsigned) always
have non-negative values. Although they may have type short, int or long (which
can have negative values), bit-fields of these types have the same range as
bit-fields of the same size with the corresponding unsigned type. Bit-fields
obey the same size and alignment rules as other structure and union members,
with the following additions:</para>
<itemizedlist>
<listitem><para>Bit-fields are allocated from left to right (most to least
significant).</para>
</listitem>
<listitem><para>A bit-field must entirely reside in a storage unit appropriate
for its declared type. Thus, a bit-field never crosses its unit boundary.
</para>
</listitem>
<listitem><para>Bit-fields must share a storage unit with other structure
and union members (either bit-field or non-bit-field) if and only if there
is sufficient space within the storage unit.</para>
</listitem>
<listitem><para>Unnamed bit-fields' types do not affect the alignment of a
structure or union, although an individual bit-field's member offsets obey
the alignment constraints. An unnamed, zero-width bit-field shall prevent
any further member, bit-field or other, from residing in the storage unit
corresponding to the type of the zero-width bit-field.</para>
</listitem>
</itemizedlist>
<para>The following examples (<xref linkend="FIGBITNUM"> through <xref linkend="FIGUNNBITF">)
show structure and union member byte offsets in the upper left corners. Bit
numbers appear in the lower corners.</para>
<figure id="FIGBITNUM">
<title>Bit numbering</title>
<graphic entityref="bitnum" fileref="bitnum.eps"></graphic>
</figure>
<figure id="FIGLRALLOC">
<title>Left-to-right allocation</title>
<graphic entityref="lralloc" fileref="lralloc.eps"></graphic>
</figure>
<figure id="FIGBALIGN">
<title>Boundary alignment</title>
<graphic entityref="balign" fileref="balign.eps"></graphic>
</figure>
<figure id="FIGSUSHAR">
<title>Storage unit sharing</title>
<graphic entityref="sushar" fileref="sushar.eps"></graphic>
</figure>
<figure id="FIGUNALLOC">
<title>Union allocation</title>
<graphic entityref="unalloc" fileref="unalloc.eps"></graphic>
</figure>
<figure id="FIGUNNBITF">
<title>Unnamed bit fields</title>
<graphic entityref="unnbitf" fileref="unnbitf.eps"></graphic>
</figure>
</sect3></sect2></sect1>
<sect1>
<title>Function calling sequence</title>
<para>This section discusses the standard function calling sequence, including
stack frame layout, register usage, and parameter passing.</para>
<sect2>
<title>Registers</title>
<para>The ABI makes the assumption that the processor has 16 general purpose
registers and 16 IEEE floating point registers. S/390 processors have 16 general
purpose registers; newer models have 16 IEEE floating point registers but
older systems have only four non-IEEE floating point registers. On these older
machines Linux for S/390 emulates 16 IEEE registers within the kernel. The
width of the general purpose registers is 32 bits, and the width of the floating
point registers is 64 bits. The use of the registers is described in the table below.
</para>
<table frame="TOPBOT" colsep="0" rowsep="1">
<title></title>
<tgroup cols="3"><colspec colname="COL1" colwidth="144*"><colspec colname="COL2"
colwidth="84*"><colspec colname="COL3" colwidth="66*">
<thead><row><entry colname="COL1" valign="TOP"><para>Register name</para></entry>
<entry colname="COL2" valign="TOP"><para>Usage</para></entry><entry colname="COL3"
valign="TOP"><para>Call effect</para></entry></row></thead>
<tfoot><row>
<entry namest="COL1" nameend="COL3" valign="TOP"><para></para><para>&sup1;Volatile:
These registers are not preserved across function calls.</para><para>&sup2;Saved:
These registers belong to the calling function. A called function shall save
these registers' values before it changes them, restoring their values before
it returns.</para></entry>
</row></tfoot><tbody><row>
<entry colname="COL1"><para><informalexample>
<literallayout>r0,
r1</literallayout>
</informalexample></para></entry>
<entry colname="COL2"><para>General purpose</para></entry>
<entry colname="COL3"><para>Volatile&sup1;</para></entry>
</row><row>
<entry colname="COL1"><para><informalexample>
<literallayout>r2,
r3</literallayout>
</informalexample></para></entry>
<entry colname="COL2"><para>Parameter passing and return values</para></entry>
<entry colname="COL3"><para>Volatile</para></entry>
</row><row>
<entry colname="COL1"><para><informalexample>
<literallayout>r4,
r5</literallayout>
</informalexample></para></entry>
<entry colname="COL2"><para>Parameter passing</para></entry>
<entry colname="COL3"><para>Volatile</para></entry>
</row><row>
<entry colname="COL1"><para><informalexample>
<literallayout>r6</literallayout>
</informalexample></para></entry>
<entry colname="COL2"><para>Parameter passing</para></entry>
<entry colname="COL3"><para>Saved&sup2;</para></entry>
</row><row>
<entry colname="COL1"><para><informalexample>
<literallayout>r7 -
r11</literallayout>
</informalexample></para></entry>
<entry colname="COL2"><para>Local variables</para></entry>
<entry colname="COL3"><para>Saved</para></entry>
</row><row>
<entry colname="COL1"><para><informalexample>
<literallayout>r12</literallayout>
</informalexample></para></entry>
<entry colname="COL2"><para>Local variable, commonly used as GOT pointer</para></entry>
<entry colname="COL3"><para>Saved</para></entry>
</row><row>
<entry colname="COL1"><para><informalexample>
<literallayout>r13</literallayout>
</informalexample></para></entry>
<entry colname="COL2"><para>Local variable, commonly used as Literal Pool
pointer</para></entry>
<entry colname="COL3"><para>Saved</para></entry>
</row><row>
<entry colname="COL1"><para><informalexample>
<literallayout>r14</literallayout>
</informalexample></para></entry>
<entry colname="COL2"><para>Return address</para></entry>
<entry colname="COL3"><para>Volatile</para></entry>
</row><row>
<entry colname="COL1"><para><informalexample>
<literallayout>r15</literallayout>
</informalexample></para></entry>
<entry colname="COL2"><para>Stack pointer</para></entry>
<entry colname="COL3"><para>Saved</para></entry>
</row><row>
<entry colname="COL1"><para><informalexample>
<literallayout>f0,
f2</literallayout>
</informalexample></para></entry>
<entry colname="COL2"><para>Parameter passing and return values</para></entry>
<entry colname="COL3"><para>Volatile</para></entry>
</row><row>
<entry colname="COL1"><para><informalexample>
<literallayout>f4,
f6</literallayout>
</informalexample></para></entry>
<entry colname="COL2"><para>General purpose</para></entry>
<entry colname="COL3"><para>Saved</para></entry>
</row><row>
<entry colname="COL1"><para><informalexample>
<literallayout>f1, f3, f5, f7 &ndash;
f15</literallayout>
</informalexample></para></entry>
<entry colname="COL2"><para>General purpose</para></entry>
<entry colname="COL3"><para>Volatile</para></entry>
</row><row>
<entry colname="COL1"><para>Access register 0</para></entry>
<entry colname="COL2"><para>Reserved for system use</para></entry>
<entry colname="COL3"><para>Volatile</para></entry>
</row><row>
<entry colname="COL1"><para>Access registers 1-15</para></entry>
<entry colname="COL2"><para>General purpose</para></entry>
<entry colname="COL3"><para>Volatile</para></entry>
</row></tbody></tgroup></table>
<para><itemizedlist>
<listitem><para>Registers r6 through r13, r15, f4 and f6 are nonvolatile;
that is, they "belong" to the calling function. A called function shall save
these registers' values before it changes them, restoring their values before
it returns.</para>
</listitem>
<listitem><para>Registers r0, r1, r2, r3, r4, r5, r14, f0,  f1, f2, f3, f5,
f6 through f15 are volatile; that is, they are not preserved across function
calls.</para>
</listitem>
<listitem><para>Furthermore the values in registers r0 and r1 may be altered
by the interface code in cross-module calls, so a function cannot depend on
the values in these registers having the same values that were placed in them
by the caller.</para>
</listitem>
</itemizedlist></para>
<para>The following registers have assigned roles in the standard calling
sequence:</para>
<table>
<title></title>
<tgroup cols="2"><colspec colname="COL1" colwidth="62*"><colspec colname="COL2"
colwidth="136*"><tbody><row>
<entry colname="COL1"><para>r12</para></entry>
<entry colname="COL2"><para>Global Offset Table pointer. If a position-independent
module uses cross-linking the compiler must point r12 to the GOT as described
in <xref linkend="DYNAMICLINKING">. If not this register may be used locally.
</para></entry>
</row><row>
<entry colname="COL1"><para>r13</para></entry>
<entry colname="COL2"><para>Commonly used as the Literal Pool pointer. If
the Literal Pool is not required this register may be used locally.</para></entry>
</row><row>
<entry colname="COL1"><para>r14</para></entry>
<entry colname="COL2"><para>This register will contain the address to which
a called function will normally return. r14 is volatile across function calls.
</para></entry>
</row><row>
<entry colname="COL1"><para>r15</para></entry>
<entry colname="COL2"><para>The stack pointer (stored in r15) will maintain
an 8-byte alignment. It will always point to the lowest allocated valid stack
frame, and will grow towards low addresses. The contents of the word addressed
by this register may point to the previously allocated stack frame. If required
it can be decremented by the called function &ndash; see <xref linkend="DYNAMICSTACK">.
</para></entry>
</row></tbody></tgroup></table>
<para>Signals can interrupt processes. Functions called during signal handling
have no unusual restrictions on their use of registers. Moreover, if a signal
handling function returns, the process will resume its original execution
path with all registers restored to their original values. Thus programs and
compilers may freely use all registers listed above, except those reserved
for system use, without the danger of signal handlers inadvertently changing
their values.</para>
<sect3>
<title>Register usage</title>
<para>With these calling conventions the following usage of the registers
for inline assemblies is recommended:  <itemizedlist>
<listitem><para>General registers r0 and r1 should be used internally whenever
possible</para>
</listitem>
<listitem><para>General registers r2 to r5 should be second choice</para>
</listitem>
<listitem><para>General registers r12 to r15 should only be used for their
standard function.</para>
</listitem>
</itemizedlist></para>
</sect3></sect2>
<sect2>
<title>The stack frame</title>
<para>A function will be passed a frame on the runtime stack by the function
which called it, and may allocate a new stack frame. A new stack frame is
required if the called function will in turn call further functions (which
must be passed the address of the new frame). This stack grows downwards from
high addresses. <xref linkend="STACKFRAME"> shows the stack frame organization.
SP in the figure denotes the stack pointer (general purpose register r15)
passed to the called function on entry. Maintenance of the back chain pointers
is not a requirement of the ABI, but the storage area for these pointers must
be allocated whether used or not.</para>
<figure id="STACKFRAME">
<title>Standard stack frame</title>
<graphic entityref="ststfr32" fileref="ststfr32.eps"></graphic>
</figure>
<para>The format of the register save area created by the gcc compiler is:
</para>
<figure id="REGSAVE">
<title>Register save area</title>
<graphic entityref="regsav32" fileref="regsav32.eps"></graphic>
</figure>
<para>The following requirements apply to the stack frame:</para>
<itemizedlist>
<listitem><para>The stack pointer shall maintain 8-byte alignment.</para>
</listitem>
<listitem><para>The stack pointer points to the first word of the lowest allocated
stack frame. If the "back chain" is implemented this word will point to the
previously allocated stack frame (towards higher addresses), except for the
first stack frame, which shall have a back chain of zero (NULL). The stack
shall grow downwards, in other words towards lower addresses.</para>
</listitem>
<listitem><para>The called function may create a new stack frame by decrementing
the stack pointer by the size of the new frame. This is required if this function
calls further functions. The stack pointer must be restored prior to return.
</para>
</listitem>
<listitem><para>The parameter list area shall be allocated by the caller and
shall be large enough to contain the arguments that the caller stores in it.
Its contents are not preserved across calls.</para>
</listitem>
<listitem><para>Other areas depend on the compiler and the code being compiled.
The standard calling sequence does not define a maximum stack frame size.
</para>
</listitem>
</itemizedlist>
<para>The stack space for the register save area and back chain must be allocated
by the caller. The size of these is 96 bytes.</para>
<para>Except for the stack frame header and any padding necessary to make
the entire frame a multiple of 8 bytes in length, a function need not allocate
space for the areas that it does not use. If a function does not call any
other functions and does not require any of the other parts of the stack frame,
it need not establish a stack frame. Any padding of the frame as a whole shall
be within the local variable area; the parameter list area shall immediately
follow the stack frame header, and the register save areas shall contain no
padding.</para>
</sect2>
<sect2 id="PARAMETERPASSING">
<title>Parameter passing</title>
<para>Arguments to called functions are passed in registers. Since all computations
must be performed in registers, memory traffic can be eliminated if the caller
can compute arguments into registers and pass them in the same registers to
the called function, where the called function can then use these arguments
for further computation in the same registers. The number of registers implemented
in a processor architecture naturally limits the number of arguments that
can be passed in this manner.</para>
<para>For Linux for S/390, the following applies: <itemizedlist>
<listitem><para>General registers r2 to r6 are used for integer values.</para>
</listitem>
<listitem><para>Floating point registers f0 and f2 are used for floating point
values.</para>
</listitem>
</itemizedlist>If there are more than five integral values or two floating
point values, the rest of the arguments are passed on the stack 96 bytes above
the initial stack pointer.</para>
<para>Beside these general rules the following rules apply: <itemizedlist>
<listitem><para>char, short and int are passed in general registers.</para>
</listitem>
<listitem><para>long long are passed in two consecutive general registers
if the next available register is smaller than 6. If the upper 32 bits would
end in general register 6 then this register is skipped and the whole 64 bit
value is passed on the stack.</para>
</listitem>
<listitem><para>Structures with a size of 1, 2 or 4 bytes are passed as integral
values.</para>
</listitem>
<listitem><para>Structures with a size of 8 bytes are passed as an integral
value in two registers.</para>
</listitem>
<listitem><para>All other structures are passed by reference. If needed, the
called function makes a copy of the value.</para>
</listitem>
<listitem><para>Complex numbers are passed as structures.</para>
</listitem>
</itemizedlist></para>
<figure id="PRMLISTAR">
<title>Parameter list area</title>
<graphic entityref="parla32" fileref="parla32.eps"></graphic>
</figure>
<para>The following algorithm specifies where argument data is passed for
the C language. For this purpose, consider the arguments as ordered from left
(first argument) to right, although the order of evaluation of the arguments
is unspecified. In this algorithm fr contains the number of the next available
floating-point register, gr contains the number of the next available general
purpose register, and starg is the address of the next available stack argument
word.</para>
<variablelist>
<varlistentry><term>INITIALIZE</term>
<listitem>
<para>Set fr=0, gr=2, and starg to the address of parameter word 1.</para>
</listitem>
</varlistentry>
<varlistentry><term>SCAN</term>
<listitem>
<para>If there are no more arguments, terminate. Otherwise, select one of
the following depending on the type of the next argument: <variablelist>
<varlistentry><term>DOUBLE_OR_FLOAT:</term>
<listitem>
<para>A DOUBLE_OR_FLOAT is one of the following: <itemizedlist>
<listitem><para>A single length floating point type,</para>
</listitem>
<listitem><para>A double length floating point type.</para>
</listitem>
</itemizedlist>If fr>2, that is, if there are no more available floating-point
registers, go to OTHER. Otherwise, load the argument value into floating-point
register fr, set fr to fr+2, and go to SCAN.</para>
</listitem>
</varlistentry>
<varlistentry><term>SIMPLE_ARG</term>
<listitem>
<para>A SIMPLE_ARG is one of the following: <itemizedlist>
<listitem><para>One of the simple integer types no more than 32 bits wide
(char, short, int, long, enum).</para>
</listitem>
<listitem><para>A pointer to an object of any type.</para>
</listitem>
<listitem><para>A struct or a union of 1, 2 or 4 bytes.</para>
</listitem>
<listitem><para>A struct or union of another size, or a long double, any of
which shall be passed as a pointer to the object, or to a copy of the object
where necessary to enforce call-by-value semantics. Only if the caller can
ascertain that the object is "constant" can it pass a pointer to the object
itself.</para>
</listitem>
</itemizedlist></para>
<para>If gr>6, go to OTHER. Otherwise load the argument value into general
register gr, set gr to gr+1, and go to SCAN. Values shorter than 32 bits are
sign- or zero-extended (as appropriate) to 32 bits.</para>
</listitem>
</varlistentry>
<varlistentry><term>DOUBLE_ARG</term>
<listitem>
<para>A DOUBLE_ARG is one of type long long, or is a struct or a union of
size 8 bytes.</para>
<para>If gr>5 set gr to 7 and go to OTHER. Load the lower-addressed word of
the long long into gr and the higher-addressed word into gr+1, set gr to gr+2,
and go to SCAN.</para>
</listitem>
</varlistentry>
</variablelist></para>
</listitem>
</varlistentry>
<varlistentry><term>OTHER</term>
<listitem>
<para>Arguments not otherwise handled above are passed in the parameter words
of the caller's stack frame. SIMPLE_ARGs, as defined above, are considered
to have 4-byte size, with simple integer types shorter than 32 bits sign-
or zero-extended (as appropriate) to 32 bits. float arguments are considered
to have 4-byte size; long long and double arguments are considered to have
8-byte size. Pad the stack by increasing starg  to satisfy the alignment requirements
of the argument, and copy the argument byte for byte to the new stack position.
Update starg to point to the next byte after this copy, then go to SCAN.</para>
</listitem>
</varlistentry>
</variablelist>
<para>The contents of registers and words which are skipped by the above algorithm
for alignment purposes (padding) are undefined.</para>
<para>As an example, assume the declarations and the function call shown in <xref
linkend="PRMPASS">. The corresponding register allocation and storage would
be as shown in <xref linkend="TABPRMPASS">.</para>
<figure id="PRMPASS">
<title>Parameter passing example</title>
<informalexample>
<literallayout>int i, j, k, l;
long long ll;
double f, g, h;
int m;

x = func(i, j, g, k, l, ll, f, h,
m);</literallayout>
</informalexample>
</figure>
<table id="TABPRMPASS">
<title>Parameter passing example: Register allocation</title>
<tgroup cols="3"><colspec colname="COL1"><colspec colname="COL2"><colspec
colname="COL3">
<thead><row><entry colname="COL1" valign="TOP"><para>General purpose registers
</para></entry><entry colname="COL2" valign="TOP"><para>Floating-point registers
</para></entry><entry colname="COL3" valign="TOP"><para>Stack frame offset
</para></entry></row></thead>
<tbody><row>
<entry colname="COL1"><para>r2: i</para></entry>
<entry colname="COL2"><para>f0: g</para></entry>
<entry colname="COL3"><para> 96: ll</para></entry>
</row><row>
<entry colname="COL1"><para>r3: j</para></entry>
<entry colname="COL2"><para>f2: f</para></entry>
<entry colname="COL3"><para>104: h</para></entry>
</row><row>
<entry colname="COL1"><para>r4: k</para></entry>
<entry colname="COL2"><para></para></entry>
<entry colname="COL3"><para>112: m</para></entry>
</row><row>
<entry colname="COL1"><para>r5: l</para></entry>
<entry colname="COL2"><para></para></entry>
<entry colname="COL3"><para></para></entry>
</row><row>
<entry colname="COL1"><para>r6: -</para></entry>
<entry colname="COL2"><para></para></entry>
<entry colname="COL3"><para></para></entry>
</row></tbody></tgroup></table>
<para>In this example r6 is unused as the long long variable ll will not fit
into a single register.</para>
</sect2>
<sect2>
<title>Variable argument lists</title>
<para>Some otherwise portable C programs depend on the argument passing scheme,
implicitly assuming that 1) all arguments are passed on the stack, and 2)
arguments appear in increasing order on the stack. Programs that make these
assumptions  have never been portable, but they have worked on many implementations.
However, they do not work on the ESA/390 architecture because some arguments
are passed in registers. Portable C programs use the header files &lt;stdarg.h&gt; or &lt;varargs.h&gt; to
deal with variable argument lists on S/390 and other machines as well.</para>
</sect2>
<sect2>
<title>Return values</title>
<para>In general, arguments are returned in registers, as described in <xref
linkend="RETREG">.</para>
<table frame="TOPBOT" colsep="0" rowsep="1" id="RETREG">
<title>Registers for return values</title>
<tgroup cols="2"><colspec colname="COL1" colwidth="88*"><colspec colname="COL2"
colwidth="109*">
<thead><row><entry colname="COL1" valign="TOP"><para>Type</para></entry><entry
colname="COL2" valign="TOP"><para>Returned in register:</para></entry></row>
</thead>
<tbody><row>
<entry colname="COL1"><para>char, short, int and long</para></entry>
<entry colname="COL2"><para>general register 2 (r2)</para></entry>
</row><row>
<entry colname="COL1"><para>long long</para></entry>
<entry colname="COL2"><para>general registers 2 and 3 (r2, r3)</para></entry>
</row><row>
<entry colname="COL1"><para>double and float</para></entry>
<entry colname="COL2"><para>floating point register 0 (f0)</para></entry>
</row></tbody></tgroup></table>
<para>Structures are returned on the stack, in the segment allocated by the
caller. The pointer to the stack is passed as an invisible first argument
in register 2.</para>
<para>Functions shall return float or double values in f0, with float values
rounded to single precision. Functions shall return values of type int, long,
enum, short and char, or a pointer to any type as unsigned or signed integers
as appropriate, zero- or sign-extended to 32 bits if necessary, in r2. A structure
or union whose size is 1, 2, 4 or 8 bytes shall be returned in r2 and r3 as
if it were first stored in an 8-byte aligned memory area and then the lower
addressed half were  loaded into r2 and the higher into r3. Bits beyond the
last member of the structure or union are not defined.</para>
<para>Values of type long long and unsigned long long shall be returned with
the lower addressed half in r2 and the higher in r3.</para>
<para>Values of type long double and structures or unions that do not meet
the requirements for being returned in registers are returned in a storage
buffer allocated by the caller. The address of this buffer is passed as a
hidden argument in r2 as if it were the first argument, causing gr in the
argument passing algorithm above to be initialized to 3 instead of 2.</para>
</sect2></sect1>
<sect1>
<title>Operating system interface</title>
<sect2>
<title>Virtual address space</title>
<para>Processes execute in a 31-bit virtual address space. Memory management
translates virtual addresses to physical addresses, hiding physical addressing
and letting a process run anywhere in the system's real memory. Processes
typically begin with three logical segments, commonly called "text", "data"
and "stack". An object file may contain more segments (for example, for debugger
use), and a process can also create additional segments for itself with system
services.</para>
<note>
<para>The term "virtual address" as used in this document refers to a 31-bit
address generated by a program, as contrasted with the physical address to
which it is mapped.</para>
</note>
</sect2>
<sect2>
<title>Page size</title>
<para>Memory is organized into pages, which are the system's smallest units
of memory allocation. The hardware page size for the ESA/390 architecture
is 4096 bytes.</para>
</sect2>
<sect2>
<title>Virtual address assignments</title>
<para>Processes have the full 31-bit address space available to them.</para>
<para><xref linkend="FIGVAC"> shows the virtual address configuration on the
S/390 architecture. The segments with different properties are typically grouped
in different areas of the address space. The loadable segments may begin at
zero (0); the exact addresses depend on the executable file format (see <xref
linkend="CHOBJFILES"> and <xref linkend="CHPROGLOAD">). The process' stack
resides at the end of the virtual memory and grows downwards. Processes can
control the amount of virtual memory allotted for stack space, as described
below.</para>
<figure id="FIGVAC">
<title>Virtual address configuration</title>
<graphic entityref="viradc32" fileref="viradc32.eps"></graphic>
</figure>
<note>
<para>Although application programs may begin at virtual address 0, they conventionally
begin above 0x1000 (4 Kbytes), leaving the initial 4 Kbytes with an invalid
address mapping. Processes that reference this invalid memory (for example
by de-referencing a null pointer) generate an translation exception as described
in <xref linkend="EXCEPTIONINT">.</para>
</note>
<para>Although applications may control their memory assignments, the typical
arrangement follows the diagram above. When applications let the system choose
addresses for dynamic segments (including shared object segments), the system
will prefer addresses in the upper half of the address space (above 1 Gbyte).
</para>
</sect2>
<sect2>
<title>Managing the process stack</title>
<para>The section <xref linkend="PROCINIT"> describes the initial stack contents.
Stack addresses can change from one system to the next &ndash; even from one
process execution to the next on a single system. A program, therefore, should
not depend on finding its stack at a particular virtual address.</para>
<para>A tunable configuration parameter controls the system maximum stack
size. A process can also use setrlimit to set its own maximum stack size,
up to the system limit. The stack segment is both readable and writable.</para>
</sect2>
<sect2>
<title>Coding guidelines</title>
<para>Operating system facilities, such as mmap, allow a process to establish
address mappings in two ways. Firstly, the program can let the system choose
an address. Secondly, the program can request the system to use an address
the program supplies. The second alternative can cause application portability
problems because the requested address might not always be available. Differences
in virtual address space can be particularly troublesome between different
architectures, but the same problems can arise within a single architecture.
</para>
<para>Processes' address spaces typically have three segments that can change
size from one execution to the next: the stack (through setrlimit); the data
segment (through malloc); and the dynamic segment area (through mmap).  Changes
in one area may affect the virtual addresses available for another. Consequently
an address that is available in one process execution might not be available
in the next. Thus a program that used mmap to request a mapping at a specific
address could appear to work in some environments and fail in others. For
this reason programs that want to establish a mapping in their address space
should let the system choose the address.</para>
<para>Despite these warnings about requesting specific addresses the facility
can be used properly.  For example, a multiprocess application might map several
files into the address space of each process and build relative pointers among
the files' data.  This could be done by having each process ask for a certain
amount of memory at an address chosen by the system.  After each process receives
its own private address from the system it would map the desired files into
memory at specific addresses within the original area.  This collection of
mappings could be at different addresses in each process but their relative
positions would be fixed.  Without the ability to ask for specific addresses,
the application could not build shared data structures because the relative
positions for files in each process would be unpredictable.</para>
</sect2>
<sect2>
<title>Processor execution modes</title>
<para>Two execution modes exist in the ESA/390 architecture: problem (user)
state and supervisor state. Processes run in problem state (the less privileged).
 The operating system kernel runs in supervisor state.  A program executes
an supervisor call (svc) instruction to change execution modes.</para>
<para>Note that the ABI does not define the implementation of individual system
calls. Instead programs shall use the system libraries. Programs with embedded
system call or trap instructions do not conform to the ABI.</para>
</sect2></sect1>
<sect1 id="EXCEPTIONINT">
<title>Exception interface</title>
<para>The ESA/390 exception mechanism allows the processor to change to supervisor
state as a result of six different causes: system calls, I/O interrupts, external
interrupts, machine checks, restart interruptions or program checks (unusual
conditions arising in the execution of instructions).</para>
<para>When exceptions occur: <orderedlist>
<listitem><para>information (such as the address of the next instruction to
be executed after control is returned to the original program) is saved,</para>
</listitem>
<listitem><para>program control passes from user to supervisor level, and
</para>
</listitem>
<listitem><para>software continues execution at an address (the exception
vector) predetermined for each exception.</para>
</listitem>
</orderedlist></para>
<para>Exceptions may be synchronous or asynchronous. Synchronous exceptions,
being caused by instruction execution, can be explicitly generated by a process.
The operating system handles an exception either by completing the faulting
operation in a manner transparent to the application or by delivering a signal
to the application. The correspondence between exceptions and signals is shown
in <xref linkend="EXCEPTIONS">.</para>
<table id="EXCEPTIONS">
<title>Exceptions and Signals</title>
<tgroup cols="3"><colspec colname="COL1" colwidth="73*"><colspec colname="COL2"
colwidth="45*"><colspec colname="COL3" colwidth="175*"><tbody><row>
<entry colname="COL1"><para>Exception Name</para></entry>
<entry colname="COL2"><para>Signal</para></entry>
<entry colname="COL3"><para>Examples</para></entry>
</row><row>
<entry colname="COL1"><para>Illegal instruction</para></entry>
<entry colname="COL2"><para>SIGILL</para></entry>
<entry colname="COL3"><para>Illegal or privileged instruction, Invalid instruction
form, Optional, unimplemented instruction</para></entry>
</row><row>
<entry colname="COL1"><para>Storage access</para></entry>
<entry colname="COL2"><para>SIGSEGV</para></entry>
<entry colname="COL3"><para>Unmapped instruction or data location access,
Storage protection violation</para></entry>
</row><row>
<entry colname="COL1"><para>Alignment</para></entry>
<entry colname="COL2"><para>SIGBUS</para></entry>
<entry colname="COL3"><para>Invalid data item alignment, Invalid memory access
</para></entry>
</row><row>
<entry colname="COL1"><para>Breakpoint</para></entry>
<entry colname="COL2"><para>SIGTRAP</para></entry>
<entry colname="COL3"><para>Breakpoint program check</para></entry>
</row><row>
<entry colname="COL1"><para>Floating exception</para></entry>
<entry colname="COL2"><para>SIGFPE</para></entry>
<entry colname="COL3"><para>Floating point overflow or underflow, Floating
point divide by zero, Floating point conversion overflow, Other enabled floating
point exceptions</para></entry>
</row></tbody></tgroup></table>
<para>The signals that an exception may give rise to are SIGILL, SIGSEGV,
SIGBUS, SIGTRAP, and SIGFPE.  If one of these signals is generated due to
an exception when the signal is blocked, the behavior is undefined.</para>
</sect1>
<sect1 id="PROCINIT">
<title>Process initialization</title>
<para>This section describes the machine state that exec creates for "infant"
processes, including argument passing, register usage, and stack frame layout.
Programming language systems use this initial program state to establish a
standard environment for their application programs. For example, a C program
begins executing at a function named main, conventionally declared in the
way described in <xref linkend="DECLMAIN">:</para>
<figure id="DECLMAIN">
<title>Declaration for main</title>
<informalexample>
<literallayout>   extern int main (int argc, char
*argv[ ], char *envp[ ]);</literallayout>
</informalexample>
</figure>
<para>Briefly, argc is a non-negative argument count; argv is an array of
argument strings, with argv[argc] == 0, and envp is an array of environment
strings, also terminated by a NULL pointer.</para>
<para>Although this section does not describe C program initialization, it
gives the information necessary to implement the call to main or to the entry
point for a program in any other language.</para>
<sect2>
<title>Registers</title>
<para>When a process is first entered (from an exec system call), the contents
of registers other than those listed below are unspecified. Consequently,
a program that requires registers to have specific values must set them explicitly
during process initialization.  It should not rely on the operating system
to set all registers to 0.  Following are the registers whose contents are
specified:</para>
<table>
<title></title>
<tgroup cols="2"><colspec colname="COL1" colwidth="27*"><colspec colname="COL2"
colwidth="170*"><tbody><row>
<entry colname="COL1"><para>r15</para></entry>
<entry colname="COL2"><para>The initial stack pointer, aligned to a 8-byte
boundary and pointing to a stack location that contains the argument count
(see <xref linkend="PROCESSSTACK"> for further information about the initial
stack layout)</para></entry>
</row><row>
<entry colname="COL1"><para>fpc</para></entry>
<entry colname="COL2"><para>The floating point control register contains 0,
specifying "round to nearest" mode and the disabling of floating-point exceptions
</para></entry>
</row></tbody></tgroup></table>
</sect2>
<sect2 id="PROCESSSTACK">
<title>Process stack</title>
<para>Every process has a stack, but the system defines no fixed stack address.
Furthermore, a program's stack address can change from one system to another &ndash; even
from one process invocation to another. Thus the process initialization code
must use the stack address in general purpose register r15. Data in the stack
segment at addresses below the stack pointer contain undefined values.</para>
<para>Whereas the argument and environment vectors transmit information from
one application program to another, the auxiliary vector conveys information
from the operating system to the program. This vector is an array of structures,
which are defined in <xref linkend="AUXSTRUCT">.</para>
<figure id="AUXSTRUCT">
<title>Auxiliary vector structure</title>
<informalexample>
<literallayout>typedef struct {
                int a_type;
                union {
                       long a_val;
                       void *a_ptr;
                       void (*a_fcn)();
               } a_un;
} auxv_t;</literallayout>
</informalexample>
</figure>
<para>The structures are interpreted according to the a_type member, as shown
in <xref linkend="AUXTYPES">.</para>
<table id="AUXTYPES">
<title>Auxiliary Vector Types, a_type</title>
<tgroup cols="3"><colspec colname="COL1" colwidth="112*"><colspec colname="COL2"
colwidth="81*"><colspec colname="COL3" colwidth="103*"><tbody><row>
<entry colname="COL1"><para>Name</para></entry>
<entry colname="COL2"><para>Value</para></entry>
<entry colname="COL3"><para>a_un</para></entry>
</row><row>
<entry colname="COL1"><para>AT_NULL</para></entry>
<entry colname="COL2"><para>0</para></entry>
<entry colname="COL3"><para>ignored</para></entry>
</row><row>
<entry colname="COL1"><para>AT_IGNORE</para></entry>
<entry colname="COL2"><para>1</para></entry>
<entry colname="COL3"><para>ignored</para></entry>
</row><row>
<entry colname="COL1"><para>AT_EXECFD</para></entry>
<entry colname="COL2"><para>2</para></entry>
<entry colname="COL3"><para>a_val</para></entry>
</row><row>
<entry colname="COL1"><para>AT_PHDR</para></entry>
<entry colname="COL2"><para>3</para></entry>
<entry colname="COL3"><para>a_ptr</para></entry>
</row><row>
<entry colname="COL1"><para>AT_PHENT</para></entry>
<entry colname="COL2"><para>4</para></entry>
<entry colname="COL3"><para>a_val</para></entry>
</row><row>
<entry colname="COL1"><para>AT_PHNUM</para></entry>
<entry colname="COL2"><para>5</para></entry>
<entry colname="COL3"><para>a_val</para></entry>
</row><row>
<entry colname="COL1"><para>AT_PAGESZ</para></entry>
<entry colname="COL2"><para>6</para></entry>
<entry colname="COL3"><para>a_val</para></entry>
</row><row>
<entry colname="COL1"><para>AT_BASE</para></entry>
<entry colname="COL2"><para>7</para></entry>
<entry colname="COL3"><para>a_ptr</para></entry>
</row><row>
<entry colname="COL1"><para>AT_FLAGS</para></entry>
<entry colname="COL2"><para>8</para></entry>
<entry colname="COL3"><para>a_val</para></entry>
</row><row>
<entry colname="COL1"><para>AT_ENTRY</para></entry>
<entry colname="COL2"><para>9</para></entry>
<entry colname="COL3"><para>a_ptr</para></entry>
</row><row>
<entry colname="COL1"><para>AT_NOTELF</para></entry>
<entry colname="COL2"><para>10</para></entry>
<entry colname="COL3"><para>a_val</para></entry>
</row><row>
<entry colname="COL1"><para>AT_UID</para></entry>
<entry colname="COL2"><para>11</para></entry>
<entry colname="COL3"><para>a_val</para></entry>
</row><row>
<entry colname="COL1"><para>AT_EUID</para></entry>
<entry colname="COL2"><para>12</para></entry>
<entry colname="COL3"><para>a_val</para></entry>
</row><row>
<entry colname="COL1"><para>AT_GID</para></entry>
<entry colname="COL2"><para>13</para></entry>
<entry colname="COL3"><para>a_val</para></entry>
</row><row>
<entry colname="COL1"><para>AT_EGID</para></entry>
<entry colname="COL2"><para>14</para></entry>
<entry colname="COL3"><para>a_val</para></entry>
</row></tbody></tgroup></table>
<para>a_type auxiliary vector types are described in 'Auxiliary Vector Types
Description' below.</para>
<variablelist id="AUXTYPESDESC">
<para><title>Auxiliary Vector Types Description</title> <varlistentry><term>
AT_NULL</term>
<listitem>
<para>The auxiliary vector has no fixed length; so an entry of this type is
used to denote the end of the vector. The corresponding value of a_un is undefined.
</para>
</listitem>
</varlistentry> <varlistentry><term>AT_IGNORE</term>
<listitem>
<para>This type indicates the entry has no meaning. The corresponding value
of a_un is undefined.</para>
</listitem>
</varlistentry> <varlistentry><term>AT_EXECFD</term>
<listitem>
<para>exec may pass control to an interpreter program. When this happens,
the system places either an entry of type AT_EXECFD or one of type AT_PHDR
in the auxiliary vector. The a_val field in the AT_EXECFD entry contains a
file descriptor for the application program's object file.</para>
</listitem>
</varlistentry> <varlistentry><term>AT_PHDR</term>
<listitem>
<para>Under some conditions, the system creates the memory image of the application
program before passing control to an interpreter program. When this happens,
the a_ptr field of the AT_PHDR entry tells the interpreter where to find the
program header table in the memory image. If the AT_PHDR entry is present,
entries of types AT_PHENT, AT_PHNUM and AT_ENTRY must also be present.  See
the section <xref linkend="CHPROGLOAD"> for more information about the program
header table.</para>
</listitem>
</varlistentry> <varlistentry><term>AT_PHENT</term>
<listitem>
<para>The a_val field of this entry holds the size, in bytes, of one entry
in the program header table at which the AT_PHDR entry points.</para>
</listitem>
</varlistentry> <varlistentry><term>AT_PHNUM</term>
<listitem>
<para>The a_val field of this entry holds the number of entries in the program
header table at which the AT_PHDR entry points.</para>
</listitem>
</varlistentry> <varlistentry><term>AT_PAGESZ</term>
<listitem>
<para>If present this entry's a_val field gives the system page size in bytes.
The same information is also available through sysconf.</para>
</listitem>
</varlistentry> <varlistentry><term>AT_BASE</term>
<listitem>
<para>The a_ptr member of this entry holds the base address at which the interpreter
program was loaded into memory.</para>
</listitem>
</varlistentry> <varlistentry><term>AT_FLAGS</term>
<listitem>
<para>If present, the a_val field of this entry holds 1-bit flags. Undefined
bits are set to zero.</para>
</listitem>
</varlistentry> <varlistentry><term>AT_ENTRY</term>
<listitem>
<para>The a_ptr field of this entry holds the entry point of the application
program to which the interpreter program should transfer control.</para>
</listitem>
</varlistentry> <varlistentry><term>AT_NOTELF</term>
<listitem>
<para>The a_val field of this entry is non-zero if the program is in another
format than ELF, for example in the old COFF format.</para>
</listitem>
</varlistentry> <varlistentry><term>AT_UID</term>
<listitem>
<para>The a_ptr field of this entry holds the real user id of the process.
</para>
</listitem>
</varlistentry> <varlistentry><term>AT_EUID</term>
<listitem>
<para>The a_ptr field of this entry holds the effective user id of the process.
</para>
</listitem>
</varlistentry> <varlistentry><term>AT_GID</term>
<listitem>
<para>The a_ptr field of this entry holds the real group id of the process.
</para>
</listitem>
</varlistentry> <varlistentry><term>AT_EGID</term>
<listitem>
<para>The a_ptr field of this entry holds the effective group id of the process.
</para>
</listitem>
</varlistentry></para>
</variablelist>
<para>Other auxiliary vector types are reserved. No flags are currently defined
for AT_FLAGS on the S/390 architecture.</para>
<para>When a process receives control, its stack holds the arguments, environment,
and auxiliary vector from exec.  Argument strings, environment strings, and
the auxiliary information appear in no specific order within the information
block; the system makes no guarantees about their relative arrangement.  The
system may also leave an unspecified amount of memory between the null auxiliary
vector entry and the beginning of the information block. A sample initial
stack is shown in <xref linkend="INISTACK">.</para>
<figure id="INISTACK">
<title>Initial Process Stack</title>
<graphic entityref="inipst32" fileref="inipst32.eps"></graphic>
</figure>
</sect2></sect1>
<sect1 id="CODINGEXAMPLES">
<title>Coding examples</title>
<para>This section describes example code sequences for fundamental operations
such as calling functions, accessing static objects, and transferring control
from one part of a program to another. Previous sections discussed how a program
may use the machine or the operating system, and they specified what a program
may and may not assume about the execution environment.  Unlike previous material,
the information in this section illustrates how operations may be done, not
how they must be done.</para>
<para>As before, examples use the ANSI C language.  Other programming languages
may use the same conventions displayed below, but failure to do so does not
prevent a program from conforming to the ABI.  Two main object code models
are available:</para>
<variablelist>
<varlistentry><term>Absolute code</term>
<listitem>
<para>Instructions can hold absolute addresses under this model. To execute
properly, the program must be loaded at a specific virtual address, making
the program's absolute addresses coincide with the process' virtual addresses.
</para>
</listitem>
</varlistentry>
<varlistentry><term>Position-independent code</term>
<listitem>
<para>Instructions under this model hold relative addresses, not absolute
addresses. Consequently, the code is not tied to a specific load address,
allowing it to execute properly at various positions in virtual memory.</para>
</listitem>
</varlistentry>
</variablelist>
<para>The following sections describe the differences between these models.
When different, code sequences for the models appear together for easier comparison.
</para>
<note>
<para>The examples below show code fragments with various simplifications.
They are intended to explain addressing modes, not to show optimal code sequences
or to reproduce compiler output.</para>
</note>
<sect2>
<title>Code model overview</title>
<para>When the system creates a process image, the executable file portion
of the process has fixed addresses and the system chooses shared object library
virtual addresses to avoid conflicts with other segments in the process. 
To maximize text sharing, shared objects conventionally use position-independent
code, in which instructions contain no absolute addresses.  Shared object
text segments can be loaded at various virtual addresses without having to
change the segment images. Thus multiple processes can share a single shared
object text segment, even if the segment resides at a different virtual address
in each process.</para>
<para>Position-independent code relies on two techniques:</para>
<itemizedlist>
<listitem><para>Control transfer instructions hold addresses relative to the
Current Instruction Address (CIA), or use registers that hold the transfer
address. A CIA-relative branch computes its destination address in terms of
the CIA, not relative to any absolute address.</para>
</listitem>
<listitem><para>When the program requires an absolute address, it computes
the desired value. Instead of embedding absolute addresses in instructions
(in the text segment),  the compiler generates code to calculate an absolute
address (in a register or in the stack or data segment) during execution.
</para>
</listitem>
</itemizedlist>
<para>Because the ESA/390 architecture provides CIA-relative branch instructions
and also branch instructions using registers that hold the transfer address,
compilers can satisfy the first condition easily.</para>
<para>A Global Offset Table (GOT), provides information for address calculation.
Position-independent object files (executable and shared object files) have
a table in their data segment that holds addresses. When the system creates
the memory image for an object file, the table entries are relocated to reflect
the absolute virtual address as assigned for an individual process.  Because
data segments are private for each process, the table entries can change &ndash; unlike
text segments, which multiple processes share.</para>
<para>Two position-independent models give programs a choice between more
efficient code with some size restrictions and less efficient code without
those restrictions.  Because of the processor architecture, a GOT with no
more than 1024 entries (4096 bytes) is more efficient than a larger one. Programs
that need more entries must use the larger, more general code. In the following
sections, the term "small model position-independent code" is used to refer
to code that assumes the smaller GOT, and "large model position-independent
code" is used to refer to the general code.</para>
</sect2>
<sect2>
<title>Function prolog and epilog</title>
<para>This section describes the prolog and epilog code of functions . A function's
prolog establishes a stack frame, if necessary, and may save any nonvolatile
registers it uses. A function's epilog generally restores registers that were
saved in the prolog code, restores the previous stack frame, and returns to
the caller.</para>
<sect3>
<title>Prolog</title>
<para>The prolog of a function has to save the state of the calling function
and set up the base register for the code of the function body. The following
is in general done by the function prolog: <itemizedlist>
<listitem><para>Save all registers used within the function which the calling
function assumes to be non-volatile.</para>
</listitem>
<listitem><para>Set up the base register for the literal pool.</para>
</listitem>
<listitem><para>Allocate stack space by decrementing the stack pointer.</para>
</listitem>
<listitem><para>Set up the dynamic chain by storing the old stack pointer
value at stack location zero if the "back chain" is implemented.</para>
</listitem>
<listitem><para>Set up the GOT pointer if the compiler is generating position
independent code. </para>
<para>(A function that is position independent will probably want to load
a pointer to the GOT into a nonvolatile register. This may be omitted if the
function makes no external data references. If external data references are
only made within conditional code, loading the GOT pointer may be deferred
until it is known to be needed.)</para>
</listitem>
<listitem><para>Set up the frame pointer if the function allocates stack space
dynamically (with alloca).</para>
</listitem>
</itemizedlist></para>
<para>The compiler tries to do as little as possible of the above; the ideal
case is to do nothing at all (for a leaf function without symbolic references).
</para>
</sect3>
<sect3>
<title>Epilog</title>
<para>The epilog of a function restores the registers saved in the prolog
(which include the stack pointer) and branches to the return address.</para>
</sect3>
<sect3>
<title>Prolog and epilog example</title>
<figure id="PROLCODE">
<title>Prolog and epilog example</title>
<informalexample>
<literallayout>.LC18:
          .string "hello, world\n"
          .align  4
          .globl  main
          .type   main,@function
main:
                                       # Prolog
          STM     11,15,44(15)         # Save callers registers
          BRAS    13,.LTN0_0           # Set up literal pool and branch
over
.LT0_0:
.LC21:
          .long   .LC18
.LC22:
          .long   printf
.LTN0_0:
          LR      1,15                 # Load stack pointer in GPR 1
          AHI     15,-96               # Allocate stack space
          ST      1,0(15)              # Save backchain
                                       # Prolog end
          L       2,.LC21-.LT0_0(13)
          L       1,.LC22-.LT0_0(13)
          BASR    14,1
          SLR     2,2

                                       # Epilog
          L       4,152(15)            # Load return address
          LM      11,15,140(15)        # Restore registers
          BR      4                    # Branch back to caller
                                       # Epilog end</literallayout>
</informalexample>
</figure>
</sect3></sect2>
<sect2>
<title>Profiling</title>
<para>This section shows a way of providing profiling (entry counting) on
S/390 systems. An ABI-conforming system is not required to provide profiling;
however if it does this is one possible (not required) implementation.</para>
<para>If a function is to be profiled it has to call the _mcount routine after
the function prolog. This routine has a special linkage. It gets an address
in register 1 and returns without having changed any register. The address
is a pointer to a word-aligned one-word static data area, initialized to zero,
in which the _mcount routine is to maintain a count of the number of times
the function is called.</para>
<para>For example <xref linkend="PROFCODE"> shows how the code after the function
prolog may look.</para>
<figure id="PROFCODE">
<title>Code for profiling</title>
<informalexample>
<literallayout>          STM     7,15,28(15)          #
Save callers registers
          BRAS    13,.LTN0_0           # Jump to function prolog
.LT0_0:
.LC3:     .long   _mcount              # Literal pool entry for _mcount
.LC4:     .long   .LP0                 # Literal pool entry for profile
counter
.LTN0_0:
          LR      1,15                 # Stack pointer
          AHI     15,-96               # Allocate new
          ST      1,0(15)              # Save backchain
          LR      11,15                # Local stack pointer
          .data
          .align 4
.LP0:     .long   0                    # Profile counter
          .text
                                       # Function profiler
          ST    14,4(15)               # Preserve r14
          L     14,.LC3-.LT0_0(13)     # Load address of _mcount
          L     1,.LC4-.LT0_0(13)      # Load address of profile counter
          BASR  14,14                  # Branch to _mcount
          L     14,4(15)               # Restore r14</literallayout>
</informalexample>
</figure>
</sect2>
<sect2>
<title>Data objects</title>
<para>This section describes only objects with static storage duration. It
excludes stack-resident objects because programs always compute their virtual
addresses relative to the stack or frame pointers.</para>
<para>Because S/390 instructions cannot hold 31-bit addresses directly, a
program has to build an address in a register and access memory through that
register. In order to do so a function normally has a literal pool that holds
the addresses of data objects used by the function. Register 13 is set up
in the function prolog to point to the start of this literal pool.</para>
<para>Position-independent code cannot contain absolute addresses. In order
to access a local symbol the literal pool contains the (signed) offset of
the symbol relative to the start of the pool. Combining the offset loaded
from the literal pool with the address in register 13 gives the absolute address
of the local symbol. In the case of a global symbol the address of the symbol
has to be loaded from the Global Offset Table. The offset in the GOT can either
be contained in the instruction itself or in the literal pool. See <xref linkend="ADDRESSES"> for
an example.</para>
<para><xref linkend="ADDRESSES"> through <xref linkend="LARGEGOT"> show sample
assembly language equivalents to C language code for absolute and position-independent
compilations. It is assumed that all shared objects are compiled as position-independent
and only executable modules may have absolute addresses. The code in the figures
contains many redundant operations as it is only intended to show how each
C statement could have been compiled independently of its context. The function
prolog is not shown, and it is assumed that it has loaded the address of the
literal pool in register 13.</para>
<figure id="ADDRESSES">
<title>Absolute addressing</title>
<para><table>
<title></title>
<tgroup cols="2"><colspec colnum="1" colname="COL1" colwidth="72*"><colspec
colnum="2" colname="COL2" colwidth="121*">
<thead><row><entry colname="COL1" valign="TOP"><para>C</para></entry><entry
colname="COL2" valign="TOP"><para>S/390 machine instructions (Assembler)</para></entry>
</row></thead>
<tbody><row>
<entry colname="COL1"><para><informalexample>
<literallayout>extern int src;
extern int dst;
extern int *ptr;

dst = src;








ptr = &amp;dst;







*ptr = src;</literallayout>
</informalexample></para></entry>
<entry colname="COL2"><para><informalexample>
<literallayout>



                              # Literal pool
.LT0:
.LC1:      .long dst
.LC2:      .long src
                              # Code
           L     2,.LC1-.LT0(13)
           L     1,.LC2-.LT0(13)
           MVC   0(4,2),0(1)

                              # Literal pool
.LT0:
.LC1:      .long ptr
.LC2:      .long dst
                              # Code
           L     1,.LC1-.LT0(13)
           MVC   0(4,1),.LC2-.LT0(13)

                              # Literal pool
.LT0:
.LC1:      .long ptr
.LC2:      .long src
                              # Code
           L     1,.LC1-.LT0(13)
           L     2,.LC2-.LT0(13)
           L     3,0(1)
           MVC  
0(4,3),0(2)</literallayout>
</informalexample></para></entry>
</row></tbody></tgroup></table></para>
</figure>
<figure id="SMALLGOT">
<title>Small model position-independent addressing</title>
<para><table>
<title></title>
<tgroup cols="2"><colspec colname="COL1" colwidth="73*"><colspec colname="COL2"
colwidth="122*">
<thead><row><entry colname="COL1" valign="TOP"><para>C</para></entry><entry
colname="COL2" valign="TOP"><para>S/390 machine instructions (Assembler)</para></entry>
</row></thead>
<tbody><row>
<entry colname="COL1"><para><informalexample>
<literallayout>extern int src;
extern int dst;
extern int *ptr;

dst = src;









ptr = &amp;dst;









*ptr = src;</literallayout>
</informalexample></para></entry>
<entry colname="COL2"><para><informalexample>
<literallayout>



                              # Literal pool
.LT0:
.LC1:      .long _GLOBAL_OFFSET_TABLE_-.LT0
                              # Code
           L     12,.LC1-.LT0(13)
           LA    12,0(12,13)
           L     2,dst@GOT(12)
           L     1,src@GOT(12)
           MVC   0(4,2),0(1)

                              # Literal pool
.LT0:
.LC1:      .long _GLOBAL_OFFSET_TABLE_-.LT0
                              # Code
           L     12,.LC1-.LT0(13)
           LA    12,0(12,13)
           L     1,ptr@GOT(12)
           L     2,dst@GOT(12)
           ST    2,0(1)

                              # Literal pool
.LT0:
.LC1:      .long _GLOBAL_OFFSET_TABLE_-.LT0
                              # Code
           L     12,.LC1-.LT0(13)
           LA    12,0(12,13)
           L     1,ptr@GOT(12)
           L     2,src@GOT(12)
           L     3,0(1)
           MVC  
0(4,3),0(2)</literallayout>
</informalexample></para></entry>
</row></tbody></tgroup></table></para>
</figure>
<figure id="LARGEGOT">
<title>Large model position-independent addressing</title>
<para><table>
<title></title>
<tgroup cols="2"><colspec colname="COL1" colwidth="73*"><colspec colname="COL2"
colwidth="122*">
<thead><row><entry colname="COL1" valign="TOP"><para>C</para></entry><entry
colname="COL2" valign="TOP"><para>S/390 Assembler</para></entry></row></thead>
<tbody><row>
<entry colname="COL1"><para><informalexample>
<literallayout>extern int src;
extern int dst;
extern int *ptr;

dst = src;













ptr = &amp;dst;













*ptr = src;</literallayout>
</informalexample></para></entry>
<entry colname="COL2"><para><informalexample>
<literallayout>



                              # Literal pool
.LT0:
.LC1:      .long dst@GOT
.LC2:      .long src@GOT
.LC3:      .long _GLOBAL_OFFSET_TABLE_-.LT0
                              # Code
           L     12,.LC3-.LT0(13)
           LA    12,0(12,13)
           L     2,.LC1-.LT0(13)
           L     1,.LC2-.LT0(13)
           L     2,0(2,12)
           L     1,0(1,12)
           MVC   0(4,2),0(1)

                              # Literal pool
.LT0:
.LC1:      .long ptr@GOT
.LC2:      .long dst@GOT
.LC3:      .long _GLOBAL_OFFSET_TABLE_-.LT0
                              # Code
           L     12,.LC3-.LT0(13)
           LA    12,0(12,13)
           L     2,.LC1-.LT0(13)
           L     1,.LC2-.LT0(13)
           L     2,0(2,12)
           L     1,0(1,12)
           ST    1,0(2)

                              # Literal pool
.LT0:
.LC1:      .long ptr@GOT
.LC2:      .long src@GOT
.LC3:      .long _GLOBAL_OFFSET_TABLE_-.LT0
                              # Code
           L   12,.LC1-.LT0(13)
           LA  12,0(12,13)
           L   1,.LC1-.LT0(13)
           L   2,.LC2-.LT0(13)
           L   1,0(1,12)
           L   2,0(2,12)
           L   3,0(1)
           MVC
0(4,3),0(2)</literallayout>
</informalexample></para></entry>
</row></tbody></tgroup></table></para>
</figure>
</sect2>
<sect2>
<title>Function calls</title>
<para>Programs can use the ESA/390 BRAS  instruction to make direct function
calls. A BRAS instruction has a self-relative branch displacement that can
reach 64 Kbytes in either direction. Hence the use of the BRAS instruction
is limited to very rare cases. The usual method of calling a function is to
load the address in a register and use the BASR instruction for the call.
Register 14 is used as the first operand of BASR to hold the return address
as shown in <xref linkend="FNCALLDIRECT">.</para>
<para>The called function may be in the same module (executable or shared
object) as the caller, or it may be in a different module. In the former case,
if the called function is not in a shared object, the linkage editor resolves
the symbol. In all other cases the linkage editor cannot directly resolve
the symbol. Instead the linkage editor generates "glue" code and resolves
the symbol to point to the glue code. The dynamic linker will provide the
real address of the function in the Global Offset Table. The glue code loads
this address and branches to the function itself. See <xref linkend="PROCEDURELINKAGETABLE"> for
more details.</para>
<figure id="FNCALLDIRECT">
<title>Absolute direct function call</title>
<para><table>
<title></title>
<tgroup cols="2"><colspec colname="COL1" colwidth="75*"><colspec colname="COL2"
colwidth="123*">
<thead><row><entry colname="COL1" valign="TOP"><para>C</para></entry><entry
colname="COL2" valign="TOP"><para>S/390 machine instructions (Assembler)</para></entry>
</row></thead>
<tbody><row>
<entry colname="COL1"><para><informalexample>
<literallayout>extern void func();
extern void (*ptr)();

ptr = func;








func();





(*ptr) ();</literallayout>
</informalexample></para></entry>
<entry colname="COL2"><para><informalexample>
<literallayout>


                              # Literal pool
.LT0:
.LC1:      .long ptr
.LC2:      .long func
                              # Code
           L     1,.LC1-.LT0(13)
           MVC   0(4,1),.LC2-.LT0(13)

                              # Literal pool
.LT0:
.LC1:      .long func
                              # Code
           L     1,.LC1-.LT0(13)
           BASR  14,1

                              # Literal pool
.LT0:
.LC1:      .long ptr
                              # Code
           L     1,.LC1-.LT0(13)
           L     1,0(1)
           BASR 
14,1</literallayout>
</informalexample></para></entry>
</row></tbody></tgroup></table></para>
</figure>
<figure id="FNSMALLDIRECT">
<title>Small model position-independent direct function call</title>
<para><table>
<title></title>
<tgroup cols="2"><colspec colname="COL1" colwidth="74*"><colspec colname="COL2"
colwidth="124*">
<thead><row><entry colname="COL1" valign="TOP"><para>C</para></entry><entry
colname="COL2" valign="TOP"><para>S/390 machine instructions (Assembler)</para></entry>
</row></thead>
<tbody><row>
<entry colname="COL1"><para><informalexample>
<literallayout>extern void func();
extern void (*ptr)();

ptr = func;









func();











(*ptr) ();</literallayout>
</informalexample></para></entry>
<entry colname="COL2"><para><informalexample>
<literallayout>


                              # Literal pool
.LT0:
.LC1:      .long _GLOBAL_OFFSET_TABLE_-.LT0
                              # Code
           L     12,.LC1-.LT0(13)
           LA    12,0(12,13)
           L     1,ptr@GOT(12)
           L     2,func@GOT(12)
           ST    2,0(1)

                              # Literal pool
.LT0:
.LC1:      .long _GLOBAL_OFFSET_TABLE_-.LT0
.LC2:      .long func@PLT-.LT0
                              # Code
           L     12,.LC1-.LT0(13)
           LA    12,0(12,13)
           L     1,.LC2-.LT0(13)
           BAS   14,0(1,13)

                              # Literal pool
.LT0:
.LC1:      .long _GLOBAL_OFFSET_TABLE_-.LT0
                              # Code
           L     12,.LC1-.LT0(13)
           LA    12,0(12,13)
           L     1,ptr@GOT(12)
           L     2,0(1)
           BASR 
14,2</literallayout>
</informalexample></para></entry>
</row></tbody></tgroup></table></para>
</figure>
<figure id="FNLARGEDIRECT">
<title>Large model position-independent direct function call</title>
<para><table>
<title></title>
<tgroup cols="2"><colspec colname="COL1" colwidth="72*"><colspec colname="COL2"
colwidth="124*">
<thead><row><entry colname="COL1" valign="TOP"><para>C</para></entry><entry
colname="COL2" valign="TOP"><para>S/390 machine instructions (Assembler)</para></entry>
</row></thead>
<tbody><row>
<entry colname="COL1"><para><informalexample>
<literallayout>extern void func();
extern void (*ptr)();

ptr = func;














func();








(*ptr) ();</literallayout>
</informalexample></para></entry>
<entry colname="COL2"><para><informalexample>
<literallayout>


                              # Literal pool
.LT0:
.LC1:      .long ptr@GOT
.LC2:      .long func@GOT
.LC3:      .long _GLOBAL_OFFSET_TABLE_-.LT0
                              # Code
           L     12,.LC3-.LT0(13)
           LA    12,0(12,13)
           L     2,.LC1-.LT0(13)
           L     1,.LC2-.LT0(13)
           L     2,0(2,12)
           L     1,0(1,12)
           ST    1,0(2)

                              # Literal pool
.LT0:
.LC1:      .long _GLOBAL_OFFSET_TABLE_-.LT0
.LC2:      .long func@PLT-.LT0
                              # Code
           L     12,.LC1-.LT0(13)
           LA    12,0(12,13)
           L     1,.LC2-.LT0(13)
           BAS   14,0(1,13)

                             # Literal pool
.LT0:
.LC1:      .long ptr@GOT
.LC2:      .long _GLOBAL_OFFSET_TABLE_-.LT0
                             # Code
           L     12,.LC2-.LT0(13)
           LA    12,0(12,13)
           L     1,.LC1-.LT0(13)
           L     1,0(1,12)
           L     2,0(1)
           BASR 
14,2</literallayout>
</informalexample></para></entry>
</row></tbody></tgroup></table></para>
</figure>
<para><figure id="FNCALL">
<title>Absolute indirect function call</title>
<para><table>
<title></title>
<tgroup cols="2"><colspec colname="COL1" colwidth="75*"><colspec colname="COL2"
colwidth="123*">
<thead><row><entry colname="COL1" valign="TOP"><para>C</para></entry><entry
colname="COL2" valign="TOP"><para>S/390 machine instructions (Assembler)</para></entry>
</row></thead>
<tbody><row>
<entry colname="COL1"><para><informalexample>
<literallayout>extern void func();
extern void (*ptr) ();

ptr = func;







(*ptr) ();</literallayout>
</informalexample></para></entry>
<entry colname="COL2"><para><informalexample>
<literallayout>


                             # Literal pool
.LT0:
.LC1:     .long ptr
.LC2:     .long func
                             # Code
          L     1,.LC1-.LT0(13)
          MVC   0(4,1),.LC2-.LT0(13)

                             # Literal pool
.LT0:
.LC1:     .long ptr
                             # Code
          L     1,.LC1-.LT0(13)
          L     1,0(1)
          BASR 
14,1</literallayout>
</informalexample></para></entry>
</row></tbody></tgroup></table></para>
</figure> <figure id="FNSMALLGOT">
<title>Small model position-independent indirect function call</title>
<para><table>
<title></title>
<tgroup cols="2"><colspec colname="COL1" colwidth="74*"><colspec colname="COL2"
colwidth="124*">
<thead><row><entry colname="COL1" valign="TOP"><para>C</para></entry><entry
colname="COL2" valign="TOP"><para>S/390 machine instructions (Assembler)</para></entry>
</row></thead>
<tbody><row>
<entry colname="COL1"><para><informalexample>
<literallayout>extern void func();
extern void (*ptr) ();

ptr = func;









(*ptr) ();</literallayout>
</informalexample></para></entry>
<entry colname="COL2"><para><informalexample>
<literallayout>


                              # Literal pool
.LT0:
.LC1:      .long _GLOBAL_OFFSET_TABLE_-.LT0
                              # Code
           L     12,.LC2-.LT0(13)
           LA    12,0(12,13)
           L     1,ptr@GOT(12)
           L     2,func@GOT(12)
           ST    2,0(1)

                              # Literal pool
.LT0:
.LC1:      .long _GLOBAL_OFFSET_TABLE_-.LT0
                              # Code
           L     12,.LC1-.LT0(13)
           LA    12,0(12,13)
           L     1,ptr@GOT(12)
           L     2,0(1)
           BASR 
14,2</literallayout>
</informalexample></para></entry>
</row></tbody></tgroup></table></para>
</figure> <figure id="FNLARGEGOT">
<title>Large model position-independent indirect function call</title>
<para><table>
<title></title>
<tgroup cols="2"><colspec colname="COL1" colwidth="72*"><colspec colname="COL2"
colwidth="124*">
<thead><row><entry colname="COL1" valign="TOP"><para>C</para></entry><entry
colname="COL2" valign="TOP"><para>S/390 machine instructions (Assembler)</para></entry>
</row></thead>
<tbody><row>
<entry colname="COL1"><para><informalexample>
<literallayout>extern void func();
extern void (*ptr) ();

ptr = func;













(*ptr) ();</literallayout>
</informalexample></para></entry>
<entry colname="COL2"><para><informalexample>
<literallayout>


                              # Literal pool
.LT0:
.LC1:      .long ptr@GOT
.LC2:      .long func@GOT
.LC3:      .long _GLOBAL_OFFSET_TABLE_-.LT0
                              # Code
           L     12,.LC3-.LT0(13)
           LA    12,0(12,13)
           L     2,.LC1-.LT0(13)
           L     1,.LC2-.LT0(13)
           L     2,0(2,12)
           L     1,0(1,12)
           ST    1,0(2)

                              # Literal pool
.LT0:
.LC1:      .long ptr@GOT
.LC2:      .long _GLOBAL_OFFSET_TABLE_-.LT0
                             # Code
           L     12,.LC2-.LT0(13)
           LA    12,0(12,13)
           L     1,.LC1-.LT0(13)
           L     1,0(1,12)
           L     2,0(1)
           BASR 
14,2</literallayout>
</informalexample></para></entry>
</row></tbody></tgroup></table></para>
</figure></para>
</sect2>
<sect2>
<title>Branching</title>
<para>Programs use branch instructions to control their execution flow. The
ESA/390 architecture has a variety of branch instructions. The most commonly
used of these performs a self-relative jump with a 128-Kbyte range (up to
64 Kbytes in either direction). </para>
<figure id="BRANCHINSN">
<title>Branch instruction</title>
<para><table>
<title></title>
<tgroup cols="2"><colspec colname="COL1" colwidth="74*"><colspec colname="COL2"
colwidth="124*">
<thead><row><entry colname="COL1" valign="TOP"><para>C</para></entry><entry
colname="COL2" valign="TOP"><para>S/390 machine instructions (Assembler)</para></entry>
</row></thead>
<tbody><row>
<entry colname="COL1"><para><informalexample>
<literallayout>label:
        ...
        goto label;</literallayout>
</informalexample></para></entry>
<entry colname="COL2"><para><informalexample>
<literallayout>.L01:
           ...
           BRC
15,.L01</literallayout>
</informalexample></para></entry>
</row></tbody></tgroup></table></para>
</figure>
<para></para>
<para>C language switch statements provide multi-way selection. When the case
labels of a switch statement satisfy grouping constraints the compiler implements
the selection with an address table. The following examples use several simplifying
conventions to hide irrelevant details:</para>
<orderedlist>
<listitem><para>The selection expression resides in register 2.</para>
</listitem>
<listitem><para>The case label constants begin at zero.</para>
</listitem>
<listitem><para>The case labels, the default, and the address table use assembly
names .Lcasei, .Ldef and .Ltab respectively.</para>
</listitem>
</orderedlist>
<figure id="ABSSWITCH">
<title>Absolute switch code</title>
<para><table>
<title></title>
<tgroup cols="2"><colspec colname="COL1" colwidth="74*"><colspec colname="COL2"
colwidth="124*">
<thead><row><entry colname="COL1" valign="TOP"><para>C</para></entry><entry
colname="COL2" valign="TOP"><para>S/390 machine instructions (Assembler)</para></entry>
</row></thead>
<tbody><row>
<entry colname="COL1"><para><informalexample>
<literallayout>switch(j)
{
case 0:
        ...
case 1:
        ...
case 3:
        ...
default:
}</literallayout>
</informalexample></para></entry>
<entry colname="COL2"><para><informalexample>
<literallayout>                              # Literal
pool
.LT0:
.LC1:      .long .Ltab
                              # Code
           LHI    1,3
           CLR    2,1
           BRC    2,.Ldef
           SLL    2,2
           A      2,.LC1-.LT0(13)
           L      1,0(2)
           BR     1
.Ltab:     .long .Lcase0
           .long .Lcase1
           .long .Ldef
           .long
.Lcase3</literallayout>
</informalexample></para></entry>
</row></tbody></tgroup></table></para>
</figure>
<figure id="INDSWITCH">
<title>Position-independent switch code, all models</title>
<para><table>
<title></title>
<tgroup cols="2"><colspec colname="COL1" colwidth="71*"><colspec colname="COL2"
colwidth="124*">
<thead><row><entry colname="COL1" valign="TOP"><para>C</para></entry><entry
colname="COL2" valign="TOP"><para>S/390 machine instructions (Assembler)</para></entry>
</row></thead>
<tbody><row>
<entry colname="COL1"><para><informalexample>
<literallayout>switch(j)
{
case 0:
        ...
case 1:
        ...
case 3:
        ...
default:
}</literallayout>
</informalexample></para></entry>
<entry colname="COL2"><para><informalexample>
<literallayout>                              # Literal
pool
.LT0:
.LC1:      .long .Ltab-.LT0
                              # Code
           LHI   1,3
           CLR   2,1
           BRC   2,.Ldef
           SLL   2,2
           L     1,.LC1-.LT0(13)
           LA    1,0(1,13)
           L     2,0(1,2)
           LA    2,0(2,13)
           BR    2
.Ltab:     .long .Lcase0-.LT0
           .long .Lcase1-.LT0
           .long .Ldef-.LT0
           .long
.Lcase3-.LT0</literallayout>
</informalexample></para></entry>
</row></tbody></tgroup></table></para>
</figure>
</sect2>
<sect2 id="DYNAMICSTACK">
<title>Dynamic stack space allocation</title>
<para>The GNU C compiler, and most recent compilers, support dynamic stack
space allocation via alloca.</para>
<para><xref linkend="DYNSTACKALLOC"> shows the stack frame before and after
dynamic stack allocation. The local variables area is used for storage of
function data, such as local variables, whose sizes are known to the compiler.
This area is allocated at function entry and does not change in size or position
during the function's activation.</para>
<para>The parameter list area holds "overflow" arguments passed in calls to
other functions. (See the OTHER label in <xref linkend="PARAMETERPASSING">.)
Its size is also known to the compiler and can be allocated along with the
fixed frame area at function entry. However, the standard calling sequence
requires that the parameter list area begin at a fixed offset (96) from the
stack pointer, so this area must move when dynamic stack allocation occurs.
</para>
<para>Data in the parameter list area are naturally addressed at constant
offsets from the stack pointer. However, in the presence of dynamic stack
allocation, the offsets from the stack pointer to the data in the local variables
area are not constant. To provide addressability a frame pointer is established
to locate the local variables area consistently throughout the function's
activation.</para>
<para>Dynamic stack allocation is accomplished by "opening" the stack just
above the parameter list area. The following steps show the process in detail:
</para>
<orderedlist>
<listitem><para>After a new stack frame is acquired, and before the first
dynamic space allocation, a new register, the frame pointer or FP, is set
to the value of the stack pointer. The frame pointer is used for references
to the function's local, non-static variables. The frame pointer does not
change during the execution of a function, even though the stack pointer may
change as a result of dynamic allocation.</para>
</listitem>
<listitem><para>The amount of dynamic space to be allocated is rounded up
to a multiple of 8 bytes, so that 8-byte stack alignment is maintained.</para>
</listitem>
<listitem><para>The stack pointer is decreased by the rounded byte count,
and the address of the previous stack frame (the back chain) may be stored
at the word addressed by the new stack pointer. The back chain is not necessary
to restore from this allocation at the end of the function since the frame
pointer can be used to restore the stack pointer.</para>
</listitem>
</orderedlist>
<para><xref linkend="DYNSTACKALLOC"> is a snapshot of the stack layout after
the prolog code has dynamically extended the stack frame.</para>
<figure id="DYNSTACKALLOC">
<title>Dynamic Stack Space Allocation</title>
<graphic entityref="dynams32" fileref="dynams32.eps"></graphic>
</figure>
<para>The above process can be repeated as many times as desired within a
single function activation. When it is time to return, the stack pointer is
set to the value of the back chain, thereby removing all dynamically allocated
stack space along with the rest of the stack frame. Naturally, a program must
not reference the dynamically allocated stack area after it has been freed.
</para>
<para>Even in the presence of signals, the above dynamic allocation scheme
is "safe." If a signal interrupts allocation, one of three things can happen:
</para>
<itemizedlist>
<listitem><para>The signal handler can return. The process then resumes the
dynamic allocation from the point of interruption.</para>
</listitem>
<listitem><para>The signal handler can execute a non-local goto or a jump.
This resets the process to a new context in a previous stack frame, automatically
discarding the dynamic allocation.</para>
</listitem>
<listitem><para>The process can terminate.</para>
</listitem>
</itemizedlist>
<para>Regardless of when the signal arrives during dynamic allocation, the
result is a consistent (though possibly dead) process.</para>
</sect2></sect1>
<sect1>
<title>DWARF definition</title>
<para>This section defines the "Debug with Arbitrary Record Format" (DWARF)
debugging format for the S/390 processor family. The S/390 ABI does not define
a debug format. However, all systems that do implement DWARF shall use the
following definitions.</para>
<para>DWARF is a specification developed for symbolic source-level debugging.
The debugging information format does not favor the design of any compiler
or debugger.</para>
<para>The DWARF definition requires some machine-specific definitions. The
register number mapping is specified for the S/390 processors in <xref linkend="DWARFREG">.
</para>
<table id="DWARFREG">
<title>DWARF register number mapping</title>
<tgroup cols="2"><colspec colname="COL1"><colspec colname="COL2"><tbody><row>
<entry colname="COL1"><para>DWARF number</para></entry>
<entry colname="COL2"><para>S/390 register</para></entry>
</row><row>
<entry colname="COL1"><para>0-15</para></entry>
<entry colname="COL2"><para>gpr0-gpr15</para></entry>
</row><row>
<entry colname="COL1"><para>16</para></entry>
<entry colname="COL2"><para>fpr0</para></entry>
</row><row>
<entry colname="COL1"><para>17</para></entry>
<entry colname="COL2"><para>fpr2</para></entry>
</row><row>
<entry colname="COL1"><para>18</para></entry>
<entry colname="COL2"><para>fpr4</para></entry>
</row><row>
<entry colname="COL1"><para>19</para></entry>
<entry colname="COL2"><para>fpr6</para></entry>
</row><row>
<entry colname="COL1"><para>20</para></entry>
<entry colname="COL2"><para>fpr1</para></entry>
</row><row>
<entry colname="COL1"><para>21</para></entry>
<entry colname="COL2"><para>fpr3</para></entry>
</row><row>
<entry colname="COL1"><para>22</para></entry>
<entry colname="COL2"><para>fpr5</para></entry>
</row><row>
<entry colname="COL1"><para>23</para></entry>
<entry colname="COL2"><para>fpr7</para></entry>
</row><row>
<entry colname="COL1"><para>24</para></entry>
<entry colname="COL2"><para>fpr8</para></entry>
</row><row>
<entry colname="COL1"><para>25</para></entry>
<entry colname="COL2"><para>fpr10</para></entry>
</row><row>
<entry colname="COL1"><para>26</para></entry>
<entry colname="COL2"><para>fpr12</para></entry>
</row><row>
<entry colname="COL1"><para>27</para></entry>
<entry colname="COL2"><para>fpr14</para></entry>
</row><row>
<entry colname="COL1"><para>28</para></entry>
<entry colname="COL2"><para>fpr9</para></entry>
</row><row>
<entry colname="COL1"><para>29</para></entry>
<entry colname="COL2"><para>fpr11</para></entry>
</row><row>
<entry colname="COL1"><para>30</para></entry>
<entry colname="COL2"><para>fpr13</para></entry>
</row><row>
<entry colname="COL1"><para>31</para></entry>
<entry colname="COL2"><para>fpr15</para></entry>
</row><row>
<entry colname="COL1"><para>32&ndash;47</para></entry>
<entry colname="COL2"><para>cr0-cr15</para></entry>
</row><row>
<entry colname="COL1"><para>48&ndash;63</para></entry>
<entry colname="COL2"><para>ar0-ar15</para></entry>
</row><row>
<entry colname="COL1"><para>64</para></entry>
<entry colname="COL2"><para>PSW mask</para></entry>
</row><row>
<entry colname="COL1"><para>65</para></entry>
<entry colname="COL2"><para>PSW address</para></entry>
</row></tbody></tgroup></table>
</sect1></chapter>
<chapter id="CHOBJFILES">
<title>Object files</title>
<para>This section describes the Executable and Linking Format (ELF).</para>
<sect1>
<title>ELF Header</title>
<sect2>
<title>Machine Information</title>
<para>For file identification in e_ident the S/390 processor family requires
the values shown in <xref linkend="EIDENT">.</para>
<table id="EIDENT">
<title>Auxiliary Vector Types Description</title>
<tgroup cols="3"><colspec colname="COL1"><colspec colname="COL2"><colspec
colname="COL3"><tbody><row>
<entry colname="COL1"><para>Position</para></entry>
<entry colname="COL2"><para>Value</para></entry>
<entry colname="COL3"><para>Comments</para></entry>
</row><row>
<entry colname="COL1"><para>e_ident[EI_CLASS]</para></entry>
<entry colname="COL2"><para>ELFCLASS32</para></entry>
<entry colname="COL3"><para>For all 32bit implementations</para></entry>
</row><row>
<entry colname="COL1"><para>e_ident[EI_DATA]</para></entry>
<entry colname="COL2"><para>ELFDATA32MSB</para></entry>
<entry colname="COL3"><para>For all Big-Endian implementations</para></entry>
</row></tbody></tgroup></table>
<para>The ELF header's e_flags field holds bit flags associated with the file.
Since the S/390 processor family defines no flags, this member contains zero.
</para>
<para>Processor identification resides in the ELF header's e_machine field
and must have the value 22, defined as the name EM_S390.</para>
</sect2></sect1>
<sect1>
<title>Sections</title>
<sect2>
<title>Special Sections</title>
<para>Various sections hold program and control information.  The sections
listed in <xref linkend="SECTIONS"> are used by the system and have the types
and attributes shown.</para>
<table id="SECTIONS">
<title>Special Sections</title>
<tgroup cols="3"><colspec colname="COL1"><colspec colname="COL2"><colspec
colname="COL3"><tbody><row>
<entry colname="COL1"><para>Name</para></entry>
<entry colname="COL2"><para>Type</para></entry>
<entry colname="COL3"><para>Attributes</para></entry>
</row><row>
<entry colname="COL1"><para>.got</para></entry>
<entry colname="COL2"><para>SHT_PROGBITS</para></entry>
<entry colname="COL3"><para>SHF_ALLOC + SHF_WRITE</para></entry>
</row><row>
<entry colname="COL1"><para>.plt</para></entry>
<entry colname="COL2"><para>SHT_PROGBITS</para></entry>
<entry colname="COL3"><para>SHF_ALLOC + SHF_WRITE + SHF_EXECINSTR</para></entry>
</row></tbody></tgroup></table>
<para>Special sections are described in <xref linkend="SECDESC">.</para>
<table id="SECDESC">
<title>Special Sections Description</title>
<tgroup cols="2"><colspec colname="COL1" colwidth="42*"><colspec colname="COL2"
colwidth="157*"><tbody><row>
<entry colname="COL1"><para>Name</para></entry>
<entry colname="COL2"><para>Description</para></entry>
</row><row>
<entry colname="COL1"><para>.got</para></entry>
<entry colname="COL2"><para>This section holds the Global Offset Table, or
GOT. See <xref linkend="CODINGEXAMPLES"> and <xref linkend="GLOBALOFFSETTABLE"> for
more information.</para></entry>
</row><row>
<entry colname="COL1"><para>.plt</para></entry>
<entry colname="COL2"><para>This section holds the Procedure Linkage Table,
or PLT. See <xref linkend="PROCEDURELINKAGETABLE"> for more information.</para></entry>
</row></tbody></tgroup></table>
</sect2>
<sect2>
<title>Symbol Table</title>
<sect3 id="SYMBOLVALUES">
<title>Symbol Values</title>
<para>If an executable file contains a reference to a function defined in
one of its associated shared objects, the symbol table section for the file
will contain an entry for that symbol.  The st_shndx field of that symbol
table entry contains SHN_UNDEF.  This informs the dynamic linker that the
symbol definition for that function is not contained in the executable file
itself. If that symbol has been allocated a Procedure Linkage Table entry
in the executable file, and the st_value field for that symbol table entry
is nonzero, the value is the virtual address of the first instruction of that
PLT entry. Otherwise the st_value field contains zero. This PLT entry address
is used by the dynamic linker in resolving references to the address of the
function.  See <xref linkend="FUNCTIONADDRESSES"> for details.</para>
</sect3></sect2>
<sect2>
<title>Relocation</title>
<sect3>
<title>Relocation Types</title>
<para>Relocation entries describe how to alter the instruction and data relocation
fields shown in <xref linkend="RELOCFIELDS"> (bit numbers appear in the lower
box corners; byte numbers appear in the upper left box corners).</para>
<figure id="RELOCFIELDS">
<title>Relocation Fields</title>
<graphic entityref="relocf32" fileref="relocf32.eps"></graphic>
</figure>
<variablelist>
<varlistentry><term>word32</term>
<listitem>
<para>This specifies a 32-bit field occupying 4 bytes, the alignment of which
is 4 bytes unless otherwise specified.</para>
</listitem>
</varlistentry>
<varlistentry><term>half16</term>
<listitem>
<para>This specifies a 16-bit field occupying 2 bytes with 2-byte alignment
(for example, the immediate field of an "Add Halfword Immediate" instruction).
</para>
</listitem>
</varlistentry>
<varlistentry><term>pc16</term>
<listitem>
<para>This specifies a 16-bit field occupying 2 bytes with 2-byte alignment.
The signed value in this field is shifted to the left by 1 before it is used
as a program counter relative displacement (for example, the immediate field
of an "Branch Relative" instruction).</para>
</listitem>
</varlistentry>
<varlistentry><term>low12</term>
<listitem>
<para>This specifies a 12-bit field contained within a halfword with a 2-byte
alignment. The 12 bit unsigned value is the displacement of a memory reference.
</para>
</listitem>
</varlistentry>
<varlistentry><term>byte8</term>
<listitem>
<para>This specifies a 8-bit field with a 1-byte alignment.</para>
</listitem>
</varlistentry>
</variablelist>
<para>Calculations in <xref linkend="RELOCATIONS"> assume the actions are
transforming a relocatable file into either an executable or a shared object
file. Conceptually, the linkage editor merges one or more relocatable files
to form the output. It first determines how to combine and locate the input
files, next it updates the symbol values, and then it performs relocations.
</para>
<para>Relocations applied to executable or shared object files are similar
and accomplish the same result. The following notations are used in <xref
linkend="RELOCATIONS">:</para>
<variablelist>
<varlistentry><term>A</term>
<listitem>
<para>Represents the addend used to compute the value of the relocatable field.
</para>
</listitem>
</varlistentry>
<varlistentry><term>B</term>
<listitem>
<para>Represents the base address at which a shared object has been loaded
into memory during execution. Generally, a shared object file is built with
a 0 base virtual address, but the execution address will be different.</para>
</listitem>
</varlistentry>
<varlistentry><term>G</term>
<listitem>
<para>Represents the section offset or address of the Global Offset Table.
 See <xref linkend="CODINGEXAMPLES"> and <xref linkend="GLOBALOFFSETTABLE"> for
more information.</para>
</listitem>
</varlistentry>
<varlistentry><term>L</term>
<listitem>
<para>Represents the section offset or address of the Procedure Linkage Table
entry for a symbol.  A PLT entry redirects a function call to the proper destination.
 The linkage editor builds the initial PLT.  See <xref linkend="PROCEDURELINKAGETABLE"> for
more information.</para>
</listitem>
</varlistentry>
<varlistentry><term>O</term>
<listitem>
<para>Represents the offset into the GOT at which the address of the relocation
entry's symbol will reside during execution.  See <xref linkend="CODINGEXAMPLES"> and <xref
linkend="GLOBALOFFSETTABLE"> for more information.</para>
</listitem>
</varlistentry>
<varlistentry><term>P</term>
<listitem>
<para>Represents the place (section offset or address) of the storage unit
being relocated (computed using r_offset).</para>
</listitem>
</varlistentry>
<varlistentry><term>R</term>
<listitem>
<para>Represents the offset of the symbol within the section in which the
symbol is defined (its section-relative address).</para>
</listitem>
</varlistentry>
<varlistentry><term>S</term>
<listitem>
<para>Represents the value of the symbol whose index resides in the relocation
entry.</para>
</listitem>
</varlistentry>
</variablelist>
<para>Relocation entries apply to bytes, halfwords or words. In either case,
the r_offset value designates the offset or virtual address of the first byte
of the affected storage unit.  The relocation type specifies which bits to
change and how to calculate their values.  The S/390 family uses only the
Elf32_Rela relocation entries with explicit addends.  For the relocation entries,
the r_addend field serves as the relocation addend.  In all cases, the offset,
addend, and the computed result use the byte order specified in the ELF header.
</para>
<para>The following general rules apply to the interpretation of the relocation
types in <xref linkend="RELOCATIONS">:</para>
<itemizedlist>
<listitem><para>"+" and "-" denote 32-bit modulus addition and subtraction,
respectively.  ">>" denotes arithmetic right-shifting (shifting with sign
copying) of the value of the left operand by the number of bits given by the
right operand.</para>
</listitem>
<listitem><para>For relocation type half16, the upper 16 bits of the value
computed must be all ones or all zeroes.  For relocation type pc16, the upper
15 bits of  the value computed must be all ones or all zeroes and the lowest
bit must be zero.  For relocation type low12, the upper 20 bits of the value
computed must all be zero and for relocation type byte8, the upper 24 bits
of the value computed must all be zero.</para>
</listitem>
<listitem><para>Reference in a calculation to the value G or O implicitly
creates a GOT entry for the indicated symbol and a reference to L implicitly
creates a PLT entry.</para>
</listitem>
</itemizedlist>
<table id="RELOCATIONS">
<title>Relocation Types</title>
<tgroup cols="4"><colspec colname="COL1" colwidth="122*"><colspec colname="COL2"
colwidth="56*"><colspec colname="COL3" colwidth="85*"><colspec colname="COL4"
colwidth="126*"><tbody><row>
<entry colname="COL1"><para>Name</para></entry>
<entry colname="COL2"><para>Value</para></entry>
<entry colname="COL3"><para>Field</para></entry>
<entry colname="COL4"><para>Calculation</para></entry>
</row><row>
<entry colname="COL1"><para>R_390_NONE</para></entry>
<entry colname="COL2"><para>0</para></entry>
<entry colname="COL3"><para>none</para></entry>
<entry colname="COL4"><para>none</para></entry>
</row><row>
<entry colname="COL1"><para>R_390_8</para></entry>
<entry colname="COL2"><para>1</para></entry>
<entry colname="COL3"><para>byte8</para></entry>
<entry colname="COL4"><para>S + A</para></entry>
</row><row>
<entry colname="COL1"><para>R_390_12</para></entry>
<entry colname="COL2"><para>2</para></entry>
<entry colname="COL3"><para>low12</para></entry>
<entry colname="COL4"><para>S + A</para></entry>
</row><row>
<entry colname="COL1"><para>R_390_16</para></entry>
<entry colname="COL2"><para>3</para></entry>
<entry colname="COL3"><para>half16</para></entry>
<entry colname="COL4"><para>S + A</para></entry>
</row><row>
<entry colname="COL1"><para>R_390_32</para></entry>
<entry colname="COL2"><para>4</para></entry>
<entry colname="COL3"><para>word32</para></entry>
<entry colname="COL4"><para>S + A</para></entry>
</row><row>
<entry colname="COL1"><para>R_390_PC32</para></entry>
<entry colname="COL2"><para>5</para></entry>
<entry colname="COL3"><para>word32</para></entry>
<entry colname="COL4"><para>S + A - P</para></entry>
</row><row>
<entry colname="COL1"><para>R_390_GOT12</para></entry>
<entry colname="COL2"><para>6</para></entry>
<entry colname="COL3"><para>low12</para></entry>
<entry colname="COL4"><para>O + A</para></entry>
</row><row>
<entry colname="COL1"><para>R_390_GOT32</para></entry>
<entry colname="COL2"><para>7</para></entry>
<entry colname="COL3"><para>word32</para></entry>
<entry colname="COL4"><para>O + A</para></entry>
</row><row>
<entry colname="COL1"><para>R_390_PLT32</para></entry>
<entry colname="COL2"><para>8</para></entry>
<entry colname="COL3"><para>word32</para></entry>
<entry colname="COL4"><para>L + A</para></entry>
</row><row>
<entry colname="COL1"><para>R_390_COPY</para></entry>
<entry colname="COL2"><para>9</para></entry>
<entry colname="COL3"><para>none</para></entry>
<entry colname="COL4"><para>(see below)</para></entry>
</row><row>
<entry colname="COL1"><para>R_390_GLOB_DAT</para></entry>
<entry colname="COL2"><para>10</para></entry>
<entry colname="COL3"><para>word32</para></entry>
<entry colname="COL4"><para>S + A (see below)</para></entry>
</row><row>
<entry colname="COL1"><para>R_390_JMP_SLOT</para></entry>
<entry colname="COL2"><para>11</para></entry>
<entry colname="COL3"><para>none</para></entry>
<entry colname="COL4"><para>(see below)</para></entry>
</row><row>
<entry colname="COL1"><para>R_390_RELATIVE</para></entry>
<entry colname="COL2"><para>12</para></entry>
<entry colname="COL3"><para>word32</para></entry>
<entry colname="COL4"><para>B + A (see below)</para></entry>
</row><row>
<entry colname="COL1"><para>R_390_GOTOFF</para></entry>
<entry colname="COL2"><para>13</para></entry>
<entry colname="COL3"><para>word32</para></entry>
<entry colname="COL4"><para>S + A - G</para></entry>
</row><row>
<entry colname="COL1"><para>R_390_GOTPC</para></entry>
<entry colname="COL2"><para>14</para></entry>
<entry colname="COL3"><para>word32</para></entry>
<entry colname="COL4"><para>G + A - P</para></entry>
</row><row>
<entry colname="COL1"><para>R_390_GOT16</para></entry>
<entry colname="COL2"><para>15</para></entry>
<entry colname="COL3"><para>half16</para></entry>
<entry colname="COL4"><para>O + A</para></entry>
</row><row>
<entry colname="COL1"><para>R_390_PC16</para></entry>
<entry colname="COL2"><para>16</para></entry>
<entry colname="COL3"><para>half16</para></entry>
<entry colname="COL4"><para>S + A - P</para></entry>
</row><row>
<entry colname="COL1"><para>R_390_PC16DBL</para></entry>
<entry colname="COL2"><para>17</para></entry>
<entry colname="COL3"><para>pc16</para></entry>
<entry colname="COL4"><para>(S + A - P) >> 1</para></entry>
</row><row>
<entry colname="COL1"><para>R_390_PLT16DBL</para></entry>
<entry colname="COL2"><para>18</para></entry>
<entry colname="COL3"><para>pc16</para></entry>
<entry colname="COL4"><para>(L + A - P) >> 1</para></entry>
</row></tbody></tgroup></table>
<table>
<title>Relocation type descriptions</title>
<tgroup cols="2"><colspec colname="COL1" colwidth="57*"><colspec colname="COL2"
colwidth="137*"><tbody><row>
<entry colname="COL1"><para>Name</para></entry>
<entry colname="COL2"><para>Description</para></entry>
</row><row>
<entry colname="COL1"><para>R_390_COPY</para></entry>
<entry colname="COL2"><para>The linkage editor creates this relocation type
for dynamic linking. Its offset member refers to a location in a writable
segment. The symbol table index specifies a symbol that should exist both
in the current object file and in a shared object. During execution, the dynamic
linker copies data associated with the shared object's symbol to the location
specified by the offset.</para></entry>
</row><row>
<entry colname="COL1"><para>R_390_GLOB_DAT</para></entry>
<entry colname="COL2"><para>This relocation type resembles R_390_32, except
that it sets a Global Offset Table entry to the address of the specified symbol.
 This special relocation type allows one to determine the correspondence between
symbols and GOT entries.</para></entry>
</row><row>
<entry colname="COL1"><para>R_390_JMP_SLOT</para></entry>
<entry colname="COL2"><para>The linkage editor creates this relocation type
for dynamic linking.  Its offset member gives the location of a Procedure
Linkage Table entry. The dynamic linker modifies the PLT entry to transfer
control to the designated symbol's address (see <xref linkend="PROCEDURELINKAGETABLE">).
</para></entry>
</row><row>
<entry colname="COL1"><para>R_390_RELATIVE</para></entry>
<entry colname="COL2"><para>The linkage editor creates this relocation type
for dynamic linking.  Its offset member gives a location within a shared object
that contains a value representing a relative address.  The dynamic linker
computes the corresponding virtual address by adding the virtual address at
which the shared object was loaded to the relative address. Relocation entries
for this type must specify 0 for the symbol table index.</para></entry>
</row></tbody></tgroup></table>
</sect3></sect2></sect1></chapter>
<chapter id="CHPROGLOAD">
<title>Program loading and dynamic linking</title>
<para>This section describes how the Executable and Linking Format (ELF) is
used in the construction and execution of programs.</para>
<sect1>
<title>Program Loading</title>
<para>As the system creates or augments a process image, it logically copies
a file's segment to a virtual memory segment.  When &ndash; and if &ndash; the
system physically reads the file depends on the program's execution behavior,
on the system load, and so on. A process does not require a physical page
until it references the logical page during execution, and processes commonly
leave many pages unreferenced. Therefore, if physical reads can be delayed
they can frequently be dispensed with, improving system performance. To obtain
this efficiency in practice, executable and shared object files must have
segment images of which the offsets and virtual addresses are congruent modulo
the page size.</para>
<para>Virtual addresses and file offsets for the S/390 processor family segments
are congruent modulo 4 Kbytes. The value of the p_align field of each program
header in a shared object file must be 0x1000 (4 Kbytes). <xref linkend="EXECFILE"> is
an example of an executable file assuming an executable program linked with
a base address of 0x00400000 (4 Mbytes).</para>
<figure id="EXECFILE">
<title>Executable File Example</title>
<graphic entityref="execfi32" fileref="execfi32.eps"></graphic>
</figure>
<table id="PHDR">
<title>Program Header Segments</title>
<tgroup cols="3"><colspec colname="COL1"><colspec colname="COL2"><colspec
colname="COL3"><tbody><row>
<entry colname="COL1"><para>Member</para></entry>
<entry colname="COL2"><para>Text</para></entry>
<entry colname="COL3"><para>Data</para></entry>
</row><row>
<entry colname="COL1"><para>p_type</para></entry>
<entry colname="COL2"><para>PT_LOAD</para></entry>
<entry colname="COL3"><para>PT_LOAD</para></entry>
</row><row>
<entry colname="COL1"><para>p_offset</para></entry>
<entry colname="COL2"><para>0x0</para></entry>
<entry colname="COL3"><para>0x1bf58</para></entry>
</row><row>
<entry colname="COL1"><para>p_vaddr</para></entry>
<entry colname="COL2"><para>0x400000</para></entry>
<entry colname="COL3"><para>0x41cf58</para></entry>
</row><row>
<entry colname="COL1"><para>p_paddr</para></entry>
<entry colname="COL2"><para>unspecified</para></entry>
<entry colname="COL3"><para>unspecified</para></entry>
</row><row>
<entry colname="COL1"><para>p_filesz</para></entry>
<entry colname="COL2"><para>0x1bf58</para></entry>
<entry colname="COL3"><para>0x17c4</para></entry>
</row><row>
<entry colname="COL1"><para>p_memsz</para></entry>
<entry colname="COL2"><para>0x1bf58</para></entry>
<entry colname="COL3"><para>0x2578</para></entry>
</row><row>
<entry colname="COL1"><para>p_flags</para></entry>
<entry colname="COL2"><para>PF_R+PF_X</para></entry>
<entry colname="COL3"><para>PF_R+PF_W</para></entry>
</row><row>
<entry colname="COL1"><para>p_align</para></entry>
<entry colname="COL2"><para>0x1000</para></entry>
<entry colname="COL3"><para>0x1000</para></entry>
</row></tbody></tgroup></table>
<para>Although the file offsets and virtual addresses are congruent modulo
4 Kbytes for both text and data, up to four file pages can hold impure text
or data (depending on page size and file system block size).</para>
<itemizedlist>
<listitem><para>The first text page contains the ELF header, the program header
table, and other information.</para>
</listitem>
<listitem><para>The last text page may hold a copy of the beginning of data.
</para>
</listitem>
<listitem><para>The first data page may have a copy of the end of text.</para>
</listitem>
<listitem><para>The last data page may contain file information not relevant
to the running process.</para>
</listitem>
</itemizedlist>
<para>Logically, the system enforces memory permissions as if each segment
were complete and separate; segment addresses are adjusted to ensure that
each logical page in the address space has a single set of permissions.  In
the example in <xref linkend="PHDR"> the file region holding the end of text
and the beginning of data is mapped twice; at one virtual address for text
and at a different virtual address for data.</para>
<para>The end of the data segment requires special handling for uninitialized
data, which the system defines to begin with zero values.  Thus if the last
data page of a file includes information beyond the logical memory page, the
extraneous data must be set to zero by the loader, rather than to the unknown
contents of the executable file.  'Impurities' in the other three segments
are not logically part of the process image, and whether the system clears
them is unspecified.  The memory image for the program in <xref linkend="PHDR"> is
presented in <xref linkend="PIMGSEG">.</para>
<figure id="PIMGSEG">
<title>Process Image Segments</title>
<graphic entityref="procim32" fileref="procim32.eps"></graphic>
</figure>
<para>One aspect of segment loading differs between executable files and shared
objects.  Executable file segments may contain absolute code.  For the process
to execute correctly, the segments must reside at the virtual addresses assigned
when building the executable file, with the system using the p_vaddr values
unchanged as virtual addresses.</para>
<para>On the other hand, shared object segments typically contain position-independent
code.  This allows a segment's virtual address to change from one process
to another, without invalidating execution behavior. Though the system chooses
virtual addresses for individual processes, it maintains the "relative positions"
of the segments. Because position-independent code uses relative addressing
between segments, the difference between virtual addresses in memory must
match the difference between virtual addresses in the file.  <xref linkend="SOSEG"> shows
possible shared object virtual address assignments for several processes,
illustrating constant relative positioning.  The table also illustrates the
base address computations.</para>
<table id="SOSEG">
<title>Shared Object Segment Example</title>
<tgroup cols="4"><colspec colname="COL1" colwidth="99*"><colspec colname="COL2"
colwidth="99*"><colspec colname="COL3" colwidth="86*"><colspec colname="COL4"
colwidth="113*"><tbody><row>
<entry colname="COL1"><para>Source</para></entry>
<entry colname="COL2"><para>Text</para></entry>
<entry colname="COL3"><para>Data</para></entry>
<entry colname="COL4"><para>Base Address</para></entry>
</row><row>
<entry colname="COL1"><para>File</para></entry>
<entry colname="COL2"><para>0x00000200</para></entry>
<entry colname="COL3"><para>0x0002a400</para></entry>
<entry colname="COL4"><para></para></entry>
</row><row>
<entry colname="COL1"><para>Process 1</para></entry>
<entry colname="COL2"><para>0x40000000</para></entry>
<entry colname="COL3"><para>0x4002a400</para></entry>
<entry colname="COL4"><para>0x40000000</para></entry>
</row><row>
<entry colname="COL1"><para>Process 2</para></entry>
<entry colname="COL2"><para>0x40010000</para></entry>
<entry colname="COL3"><para>0x4003a400</para></entry>
<entry colname="COL4"><para>0x40010000</para></entry>
</row><row>
<entry colname="COL1"><para>Process 3</para></entry>
<entry colname="COL2"><para>0x40020000</para></entry>
<entry colname="COL3"><para>0x4004a400</para></entry>
<entry colname="COL4"><para>0x40020000</para></entry>
</row><row>
<entry colname="COL1"><para>Process 4</para></entry>
<entry colname="COL2"><para>0x40030000</para></entry>
<entry colname="COL3"><para>0x4005a400</para></entry>
<entry colname="COL4"><para>0x40030000</para></entry>
</row></tbody></tgroup></table>
</sect1>
<sect1 id="DYNAMICLINKING">
<title>Dynamic Linking</title>
<sect2>
<title>Dynamic Section</title>
<para>Dynamic section entries give information to the dynamic linker.  Some
of this information is processor-specific, including the interpretation of
some entries in the dynamic structure.</para>
<variablelist>
<varlistentry><term>DT_PLTGOT</term>
<listitem>
<para>The d_ptr field of this entry gives the address of the first byte in
the Procedure Linkage Table (.PLT in <xref linkend="PROCEDURELINKAGETABLE">).
</para>
</listitem>
</varlistentry>
<varlistentry><term>DT_JMPREL</term>
<listitem>
<para>This entry is associated with a table of relocation entries for the
PLT.  For S/390 this entry is mandatory both for executable and shared object
files. Moreover, the relocation table's entries must have a one-to-one correspondence
with the PLT. The table of DT_JMPREL relocation entries is wholly contained
within the DT_RELA referenced table. See <xref linkend="PROCEDURELINKAGETABLE"> for
more information.</para>
</listitem>
</varlistentry>
</variablelist>
</sect2>
<sect2 id="GLOBALOFFSETTABLE">
<title>Global Offset Table</title>
<para>Position-independent code cannot, in general, contain absolute virtual
addresses.  Global Offset Tables hold absolute addresses in private data,
thus making the addresses available without compromising the position-independence
and sharability of a program's text.  A program references its GOT using position-independent
addressing and extracts absolute values, thus redirecting position-independent
references to absolute locations.</para>
<para>When the dynamic linker creates memory segments for a loadable object
file, it processes the relocation entries, some of which will be of type R_390_GLOB_DAT,
referring to the GOT.  The dynamic linker determines the associated symbol
values, calculates their absolute addresses, and sets the GOT entries to the
proper values. Although the absolute addresses are unknown when the linkage
editor builds an object file, the dynamic linker knows the addresses of all
memory segments and can thus calculate the absolute addresses of the symbols
contained therein.</para>
<para>A GOT entry provides direct access to the absolute address of a symbol
without compromising position-independence and sharability. Because the executable
file and shared objects have separate GOTs, a symbol may appear in several
tables.  The dynamic linker processes all the GOT relocations before giving
control to any code in the process image, thus ensuring the absolute addresses
are available during execution.</para>
<para>The dynamic linker may choose different memory segment addresses for
the same shared object in different programs; it may even choose different
library addresses for different executions of the same program.  Nevertheless,
memory segments do not change addresses once the process image is established.
As long as a process exists, its memory segments reside at fixed virtual addresses.
</para>
<para>The format and interpretation of the Global Offset Table is processor
specific. For S/390 the symbol _GLOBAL_OFFSET_TABLE_ may be used to access
the table.  The symbol refers to the start of the .got section. Two words
in the GOT are reserved:</para>
<itemizedlist>
<listitem><para>The word at _GLOBAL_OFFSET_TABLE_[0] is set by the linkage
editor to hold the address of the dynamic structure, referenced with the symbol
_DYNAMIC. This allows a program, such as the dynamic linker, to find its own
dynamic structure without having yet processed its relocation entries.  This
is especially important for the dynamic linker, because it must initialize
itself without relying on other programs to relocate its memory image.</para>
</listitem>
<listitem><para>The word at _GLOBAL_OFFSET_TABLE_[1] is reserved for future
use.</para>
</listitem>
</itemizedlist>
<para>The Global Offset Table resides in the ELF .got section.</para>
</sect2>
<sect2 id="FUNCTIONADDRESSES">
<title>Function Addresses</title>
<para>References to a function address from an executable file and from the
shared objects associated with the file must resolve to the same value. References
from within shared objects will normally be resolved (by the dynamic linker)
to the virtual address of the function itself.  References from within the
executable file to a function defined in a shared object will normally be
resolved (by the linkage editor) to the address of the Procedure Linkage Table
entry for that function within the executable file.</para>
<para>To allow comparisons of function addresses to work as expected, if an
executable file references a function defined in a shared object, the linkage
editor will place the address of the PLT entry for that function in its associated
symbol table entry.  See <xref linkend="SYMBOLVALUES"> for details. The dynamic
linker treats such symbol table entries specially.  If the dynamic linker
is searching for a symbol and encounters a symbol table entry for that symbol
in the executable file, it normally follows these rules:</para>
<itemizedlist>
<listitem><para>If the st_shndx field of the symbol table entry is not SHN_UNDEF,
the dynamic linker has found a definition for the symbol and uses its st_value
field as the symbol's address.</para>
</listitem>
<listitem><para>If the st_shndx field is SHN_UNDEF and the symbol is of type
STT_FUNC and the st_value field is not zero, the dynamic linker recognizes
this entry as special and uses the st_value field as the symbol's address.
</para>
</listitem>
<listitem><para>Otherwise, the dynamic linker considers the symbol to be undefined
within the executable file and continues processing.</para>
</listitem>
</itemizedlist>
<para>Some relocations are associated with PLT entries. These entries are
used for direct function calls rather than for references to function addresses.
These relocations are not treated specially as described above because the
dynamic linker must not redirect PLT entries to point to themselves.</para>
</sect2>
<sect2 id="PROCEDURELINKAGETABLE">
<title>Procedure Linkage Table</title>
<para>Much as the Global Offset Table redirects position-independent address
calculations to absolute locations, the Procedure Linkage Table redirects
position-independent function calls to absolute locations. The linkage editor
cannot resolve execution transfers (such as function calls) from one executable
or shared object to another, so instead it arranges for the program to transfer
control to entries in the PLT. The dynamic linker determines the absolute
addresses of the destinations and stores them in the GOT, from which they
are loaded by the PLT entry. The dynamic linker can thus redirect the entries
without compromising the position-independence and sharability of the program
text.  Executable files and shared object files have separate PLTs.</para>
<para>As mentioned above, a relocation table is associated with the PLT. The
DT_JMPREL entry in the _DYNAMIC array gives the location of the first relocation
entry.  The relocation table entries match the PLT entries in a one-to-one
correspondence (relocation table entry 1 applies to PLT entry 1 and so on).
 The relocation type for each entry shall be R_390_JMP_SLOT. The relocation
offset shall specify the address of the GOT entry containing the address of
the function and the symbol table index shall reference the appropriate symbol.
</para>
<para>To illustrate Procedure Linkage Tables, <xref linkend="PLTEX"> shows
how the linkage editor might initialize the PLT when linking a shared executable
or shared object.</para>
<figure id="PLTEX">
<title>Procedure Linkage Table Example</title>
<informalexample>
<literallayout>*                                  # PLT
for executables (not position independent)
PLT1      BASR  1,0                # Establish base
BASE1     L     1,AGOTENT-BASE1(1) # Load address of the GOT entry
          L     1,0(0,1)           # Load function address from the GOT
to r1
          BCR   15,1               # Jump to address
RET1      BASR  1,0                # Return from GOT first time (lazy
binding)
BASE2     L     1,ASYMOFF-BASE2(1) # Load offset in symbol table to r1
          BRC   15,-x              # Jump to start of PLT
          .word 0                  # Filler
AGOTENT   .long ?                  # Address of the GOT entry
ASYMOFF   .long ?                  # Offset into the symbol table

*                                  # PLT for shared objects (position
independent)
PLT1      BASR  1,0                # Establish base
BASE1     L     1,AGOTOFF-BASE1(1) # Load offset into the GOT to r1
          L     1,(1,12)           # Load address from the GOT to r1
          BCR   15,1               # Jump to address
RET1      BASR  1,0                # Return from GOT first time (lazy
binding)
BASE2     L     1,ASYMOFF-BASE2(1) # Load offset in symbol table to r1
          BRC   15,-x              # Jump to start of PLT
          .word 0                  # Filler
AGOTOFF   .long ?                  # Offset in the GOT
ASYMOFF   .long ?                  # Offset in the symbol
table</literallayout>
</informalexample>
</figure>
<para>As described below the dynamic linker and the program cooperate to resolve
symbolic references through the PLT. Again, the details described below are
for explanation only. The precise execution-time behavior of the dynamic linker
is not specified.</para>
<orderedlist>
<listitem><para>The caller of a function in a different shared object transfers
control to the start of the PLT entry associated with the function.</para>
</listitem>
<listitem><para>The first part of the PLT entry loads the address from the
GOT entry associated with the function to be called. The control is transferred
to the code referenced by the address. If the function has already been called
at least once, or lazy binding is not used, then the address found in the
GOT is the address of the function.</para>
</listitem>
<listitem><para>If a function has never been called and lazy binding is used
then the address in the GOT points to the second half of the PLT. The second
half loads the offset in the symbol table associated with the called function.
Control is then transferred to the special first entry of the PLT.</para>
</listitem>
<listitem><para>This first entry of the PLT entry (<xref linkend="PLT0EX">)
calls the dynamic linker giving it the offset into the symbol table and the
address of a structure that identifies the location of the caller.</para>
</listitem>
<listitem><para>The dynamic linker finds the real address of the symbol. It
will store this address in the GOT entry of the function in the object code
of the caller and it will then transfer control to the function.</para>
</listitem>
<listitem><para>Subsequent calls to the function from this object will find
the resolved address in the first half of the PLT entry and will transfer
control directly without invoking the dynamic linker.</para>
</listitem>
</orderedlist>
<figure id="PLT0EX">
<title>Special first entry in Procedure Linkage Table</title>
<informalexample>
<literallayout>*                               # PLT0
for static object (not position-independent)
PLT0      ST    1,28(15)        # R1 has offset into symbol table
          BASR  1,0             # Establish base
BASE1     L     1,AGOT-BASE1(1) # Get address of GOT
          MVC   24(4,15),4(1)   # Move loader info to stack
          L     1,8(1)          # Get address of loader
          BR    1               # Jump to loader
          .word 0               # Filler
AGOT      .long got             # Address of GOT

                                # PLT0 for shared object
(position-independent)
PLT0      ST    1,28(15)        # R1 has offset into symbol table
          L     1,4(12)         # Get loader info (object struct
address)
          ST    1,24(15)        # Store address
          L     1,8(12)         # Entry address of loader in R1
          BR    1               # Jump to
loader</literallayout>
</informalexample>
</figure>
<para>The LD_BIND_NOW environment variable can change dynamic linking behavior.
If its value is not null the dynamic linker resolves the function call binding
at load time, before transferring control to the program. In other words the
dynamic linker processes relocation entries of type R_390_JMP_SLOT during
process initialization.  If LD_BIND_NOW is null the dynamic linker evaluates
PLT entries lazily, delaying symbol resolution and relocation until the first
execution of a table entry.</para>
<note>
<para>Lazy binding generally improves overall application performance because
unused symbols do not incur the overhead of dynamic linking. Nevertheless,
two situations make lazy binding undesirable for some applications: <orderedlist>
<listitem><para>The initial reference to a shared object function takes longer
than subsequent calls because the dynamic linker intercepts the call to resolve
the symbol, and some applications cannot tolerate this unpredictability.</para>
</listitem>
<listitem><para>If an error occurs and the dynamic linker cannot resolve the
symbol, the dynamic linker will terminate the program. Under lazy binding,
this might occur at arbitrary times. Once again, some applications cannot
tolerate this unpredictability. By turning off lazy binding, the dynamic linker
forces the failure to occur during process initialization, before the application
receives control.</para>
</listitem>
</orderedlist></para>
</note>
</sect2></sect1></chapter>
<appendix>
<title></title>
<sect1>
<title>GNU Free Documentation License</title>
<toc></toc>
<para>A current copy of the license can be found at:</para>
<para>http://www.linuxbase.org/spec/refspecs/LSB_1.2.0/gLSB/gfdl.html</para>
<para>Version 1.1, March 2000</para>
<para>Copyright (C) 2000 Free Software Foundation, Inc. 59 Temple Place, Suite
330, Boston, MA 02111-1307 USA      Everyone is permitted to copy and distribute
verbatim copies of this license document, but changing it is not allowed.
</para>
<sect2>
<title>PREAMBLE</title>
<para>The purpose of this License is to make a manual, textbook, or other
written document "free" in the sense of freedom: to assure everyone the effective
freedom to copy and redistribute it, with or without modifying it, either
commercially or noncommercially. Secondarily, this License preserves for the
author and publisher a way to get credit for their work, while not being considered
responsible for modifications made by others.  This License is a kind of "copyleft",
which means that derivative works of the document must themselves be free
in the same sense. It complements the GNU General Public License, which is
a copyleft license designed for free software.  We have designed this License
in order to use it for manuals for free software, because free software needs
free documentation: a free program should come with manuals providing the
same freedoms that the software does. But this License is not limited to software
manuals; it can be used for any textual work, regardless of subject matter
or whether it is published as a printed book. We recommend this License principally for
works whose purpose is instruction or reference.</para>
</sect2>
<sect2>
<title>APPLICABILITY AND DEFINITIONS</title>
<para>This License applies to any manual or other work that contains a notice
placed by the copyright holder saying it can be distributed under the terms
of this License. The "Document", below, refers to any such manual or work.
Any member of the public is a licensee, and is addressed as "you".</para>
<para>A "Modified Version" of the Document means any work containing the Document
or a portion of it, either copied verbatim, or with modifications and/or translated
into another language.</para>
<para>A "Secondary Section" is a named appendix or a front-matter section
of the Document that deals exclusively with the relationship of the publishers
or authors of the Document to the Document's overall subject (or to related
matters) and contains nothing that could fall directly within that overall
subject. (For example, if the Document is in part a textbook of mathematics,
a Secondary Section may not explain any mathematics.) The relationship could
be a matter of historical connection with the subject or with related matters,
or of legal, commercial, philosophical, ethical or political position regarding
them.</para>
<para>The "Invariant Sections" are certain Secondary Sections whose titles
are designated, as being those of Invariant Sections, in the notice that says
that the Document is released under this License.</para>
<para>The "Cover Texts" are certain short passages of text that are listed,
as Front-Cover Texts or Back-Cover Texts, in the notice that says that the
Document is released under this License.</para>
<para>A "Transparent" copy of the Document means a machine-readable copy,
represented in a format whose specification is available to the general public,
whose contents can be viewed and edited directly and straightforwardly with
generic text editors or (for images composed of pixels) generic paint programs
or (for drawings) some widely available drawing editor, and that is suitable
for input to text formatters or for automatic translation to a variety of
formats suitable for input to text formatters. A copy made in an otherwise
Transparent file format whose markup has been designed to thwart or discourage
subsequent modification by readers is not Transparent. A copy that is not
"Transparent" is called "Opaque".</para>
<para>Examples of suitable formats for Transparent copies include plain ASCII
without markup, Texinfo input format, LaTeX input format, SGML or XML using
a publicly available DTD, and standard-conforming simple HTML designed for
human modification. Opaque formats include PostScript, PDF, proprietary formats
that can be read and edited only by proprietary word processors, SGML or XML
for which the DTD and/or processing tools are not generally available, and
the machine-generated HTML produced by some word processors for output purposes
only.</para>
<para>The "Title Page" means, for a printed book, the title page itself, plus
such following pages as are needed to hold, legibly, the material this License
requires to appear in the title page. For works in formats which do not have
any title page as such, "Title Page" means the text near the most prominent
appearance of the work's title, preceding the beginning of the body of the
text.</para>
</sect2>
<sect2>
<title>VERBATIM COPYING</title>
<para>You may copy and distribute the Document in any medium, either commercially
or noncommercially, provided that this License, the copyright notices, and
the license notice saying this License applies to the Document are reproduced
in all copies, and that you add no other conditions whatsoever to those of
this License. You may not use technical measures to obstruct or control the
reading or further copying of the copies you make or distribute. However,
you may accept compensation in exchange for copies. If you distribute a large enough
number of copies you must also follow the conditions in section 3.</para>
<para>You may also lend copies, under the same conditions stated above, and
you may publicly display copies.</para>
</sect2>
<sect2>
<title>COPYING IN QUANTITY</title>
<para>If you publish printed copies of the Document numbering more than 100,
and the Document's license notice requires Cover Texts, you must enclose the
copies in covers that carry, clearly and legibly, all these Cover Texts: Front-Cover
Texts on the front cover, and Back-Cover Texts on the back cover. Both covers
must also clearly and legibly identify you as the publisher of these copies.
The front cover must present the full title with all words of the title equally
prominent and visible. You may add other material on the covers in addition.
Copying with changes limited to the covers, as long as they preserve the title
of the Document and satisfy these conditions, can be treated as verbatim copying
in other respects.</para>
<para>If the required texts for either cover are too voluminous to fit legibly,
you should put the first ones listed (as many as fit reasonably) on the actual
cover, and continue the rest onto adjacent pages.</para>
<para>If you publish or distribute Opaque copies of the Document numbering
more than 100, you must either include a machine-readable Transparent copy
along with each Opaque copy, or state in or with each Opaque copy a publicly-accessible
computer-network location containing a complete Transparent copy of the Document,
free of added material, which the general network-using public has access
to download anonymously at no charge using public-standard network protocols.
If you use the latter option, you must take reasonably prudent steps, when
you begin distribution of Opaque copies in quantity, to ensure that this Transparent
copy will remain thus accessible at the stated location until at least one
year after the last time you distribute an Opaque copy (directly or through
your agents or retailers) of that edition to the public.</para>
<para>It is requested, but not required, that you contact the authors of the
Document well before redistributing any large number of copies, to give them
a chance to provide you with an updated version of the Document.</para>
</sect2>
<sect2>
<title>MODIFICATIONS</title>
<para>You may copy and distribute a Modified Version of the Document under
the conditions of sections 2 and 3 above, provided that you release the Modified
Version under precisely this License, with the Modified Version filling the
role of the Document, thus licensing distribution and modification of the
Modified Version to whoever possesses a copy of it. In addition, you must
do these things in the Modified Version:</para>
<itemizedlist>
<listitem><para>Use in the Title Page (and on the covers, if any) a title
distinct from that of the Document, and from those of previous versions (which
should, if there were      any, be listed in the History section of the Document).
You may use the same title as a previous version if the original publisher
of that version gives      permission.</para>
</listitem>
<listitem><para>List on the Title Page, as authors, one or more persons or
entities responsible for authorship of the modifications in the Modified Version,
together with at      least five of the principal authors of the Document
(all of its principal authors, if it has less than five).</para>
</listitem>
<listitem><para>State on the Title page the name of the publisher of the Modified
Version, as the publisher.</para>
</listitem>
<listitem><para>Preserve all the copyright notices of the Document.</para>
</listitem>
<listitem><para>Add an appropriate copyright notice for your modifications
adjacent to the other copyright notices.</para>
</listitem>
<listitem><para>Include, immediately after the copyright notices, a license
notice giving the public permission to use the Modified Version under the
terms of this License, in      the form shown in the Addendum below.</para>
</listitem>
<listitem><para>Preserve in that license notice the full lists of Invariant
Sections and required Cover Texts given in the Document's license notice.
</para>
</listitem>
<listitem><para>Include an unaltered copy of this License.</para>
</listitem>
<listitem><para>Preserve the section entitled "History", and its title, and
add to it an item stating at least the title, year, new authors, and publisher
of the Modified Version as      given on the Title Page. If there is no section
entitled "History" in the Document, create one stating the title, year, authors,
and publisher of the Document as      given on its Title Page, then add an
item describing the Modified Version as stated in the previous sentence.</para>
</listitem>
<listitem><para> Preserve the network location, if any, given in the Document
for public access to a Transparent copy of the Document, and likewise the
network locations      given in the Document for previous versions it was
based on. These may be placed in the "History" section. You may omit a network
location for a work that      was published at least four years before the
Document itself, or if the original publisher of the version it refers to
gives permission.</para>
</listitem>
<listitem><para>In any section entitled "Acknowledgements" or "Dedications",
preserve the section's title, and preserve in the section all the substance
and tone of each of the      contributor acknowledgements and/or dedications
given therein.</para>
</listitem>
<listitem><para>Preserve all the Invariant Sections of the Document, unaltered
in their text and in their titles. Section numbers or the equivalent are not
considered part of the      section titles.</para>
</listitem>
<listitem><para>Delete any section entitled "Endorsements". Such a section
may not be included in the Modified Version.</para>
</listitem>
<listitem><para>Do not retitle any existing section as "Endorsements" or to
conflict in title with any Invariant Section.</para>
</listitem>
</itemizedlist>
<para>If the Modified Version includes new front-matter sections or appendices
that qualify as Secondary Sections and contain no material copied from the
Document, you may at your option designate some or all of these sections as
invariant. To do this, add their titles to the list of Invariant Sections
in the Modified Version's license notice. These titles must be distinct from
any other section titles.</para>
<para>You may add a section entitled "Endorsements", provided it contains
nothing but endorsements of your Modified Version by various parties--for
example, statements of peer review or that the text has been approved by an
organization as the authoritative definition of a standard.</para>
<para>You may add a passage of up to five words as a Front-Cover Text, and
a passage of up to 25 words as a Back-Cover Text, to the end of the list of
Cover Texts in the Modified Version. Only one passage of Front-Cover Text
and one of Back-Cover Text may be added by (or through arrangements made by)
any one entity. If the Document already includes a cover text for the same
cover, previously added by you or by arrangement made by the same entity you
are acting on behalf of, you may not add another; but you may replace the
old one, on explicit permission from the previous publisher that added the
old one.</para>
<para>The author(s) and publisher(s) of the Document do not by this License
give permission to use their names for publicity for or to assert or imply
endorsement of any Modified Version.</para>
</sect2>
<sect2>
<title>COMBINING DOCUMENTS</title>
<para>You may combine the Document with other documents released under this
License, under the terms defined in section 4 above for modified versions,
provided that you include in the combination all of the Invariant Sections
of all of the original documents, unmodified, and list them all as Invariant
Sections of your combined work in its license notice.</para>
<para>The combined work need only contain one copy of this License, and multiple
identical Invariant Sections may be replaced with a single copy. If there
are multiple Invariant Sections with the same name but different contents,
make the title of each such section unique by adding at the end of it, in
parentheses, the name of the original author or publisher of that section
if known, or else a unique number. Make the same adjustment to the section
titles in the list of Invariant Sections in the license notice of the combined
work.</para>
<para>In the combination, you must combine any sections entitled "History"
in the various original documents, forming one section entitled "History";
likewise combine any sections entitled "Acknowledgements", and any sections
entitled "Dedications". You must delete all sections entitled "Endorsements."
</para>
</sect2>
<sect2>
<title>COLLECTIONS OF DOCUMENTS</title>
<para>You may make a collection consisting of the Document and other documents
released under this License, and replace the individual copies of this License
in the various documents with a single copy that is included in the collection,
provided that you follow the rules of this License for verbatim copying of
each of the documents in all other respects.</para>
<para>You may extract a single document from such a collection, and distribute
it individually under this License, provided you insert a copy of this License
into the extracted document, and follow this License in all other respects
regarding verbatim copying of that document.</para>
</sect2>
<sect2>
<title>AGGREGATION WITH INDEPENDENT WORKS</title>
<para>A compilation of the Document or its derivatives with other separate
and independent documents or works, in or on a volume of a storage or distribution
medium, does not as a whole count as a Modified Version of the Document, provided
no compilation copyright is claimed for the compilation. Such a compilation
is called an "aggregate", and this License does not apply to the other self-contained
works thus compiled with the Document, on account of their being thus compiled,
if they are not themselves derivative works of the Document.</para>
<para>If the Cover Text requirement of section 3 is applicable to these copies
of the Document, then if the Document is less than one quarter of the entire
aggregate, the Document's Cover Texts may be placed on covers that surround
only the Document within the aggregate. Otherwise they must appear on covers
around the whole aggregate.</para>
</sect2>
<sect2>
<title>TRANSLATION</title>
<para>Translation is considered a kind of modification, so you may distribute
translations of the Document under the terms of section 4. Replacing Invariant
Sections with translations requires special permission from their copyright
holders, but you may include translations of some or all Invariant Sections
in addition to the original versions of these Invariant Sections. You may
include a translation of this License provided that you also include the original
English version of this License. In case of a disagreement between the translation
and the original English version of this License, the original English version
will prevail.</para>
</sect2>
<sect2>
<title>TERMINATION</title>
<para>You may not copy, modify, sublicense, or distribute the Document except
as expressly provided for under this License. Any other attempt to copy, modify,
sublicense or distribute the Document is void, and will automatically terminate
your rights under this License. However, parties who have received copies,
or rights, from you under this License will not have their licenses terminated
so long as such parties remain in full compliance.</para>
</sect2>
<sect2>
<title>FUTURE REVISIONS OF THIS LICENSE</title>
<para>The Free Software Foundation may publish new, revised versions of the
GNU Free Documentation License from time to time. Such new versions will be
similar in spirit to the present version, but may differ in detail to address
new problems or concerns. See http://www.gnu.org/copyleft/.</para>
<para>Each version of the License is given a distinguishing version number.
If the Document specifies that a particular numbered version of this License
"or any later version" applies to it, you have the option of following the
terms and conditions either of that specified version or of any later version
that has been published (not as a draft) by the Free Software Foundation.
If the Document does not specify a version number of this License, you may
choose any version ever published (not as a draft) by the Free Software Foundation.
</para>
</sect2>
<sect2>
<title>How to use this License for your documents</title>
<para>To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license notices
just after the title page:</para>
<informalexample>
<literallayout>	Copyright (c) YEAR YOUR NAME.
Permission is granted to copy, distribute 
	and/or modify this document under the terms of the GNU Free
Documentation 
	License, Version 1.1 or any later version published by the Free
Software Foundation; 
	with the Invariant Sections being LIST THEIR TITLES, with the
Front-Cover 
	Texts being LIST, and with the Back-Cover Texts 	being LIST. 
	A copy of the license is included in the section entitled
     "GNU Free Documentation License".</literallayout>
</informalexample>
<para>If you have no Invariant Sections, write "with no Invariant Sections"
instead of saying which ones are invariant. If you have no Front-Cover Texts,
write "no Front-Cover Texts" instead of "Front-Cover Texts being LIST"; likewise
for Back-Cover Texts.</para>
<para>If your document contains nontrivial examples of program code, we recommend
releasing these examples in parallel under your choice of free software license,
such as the GNU General Public License, to permit their use in free software.
</para>
</sect2></sect1></appendix>
<chapter id="NOTICES">
<title>Notices</title>
<para>This information was developed for products and services offered in
the U.S.A. IBM may not offer the products, services, or features discussed
in this document in other countries. Consult your local IBM representative
for information about the products and services currently available in your
area. Any reference to an IBM product, program, or service is not intended
to state or imply that only that IBM product, program, or service may be used.
Any functionally equivalent product, program, or service that does not infringe
any IBM intellectual property right may be used instead. However, it is the
user's responsibility to evaluate and verify the operation of any non-IBM
product, program, or service.</para>
<para>IBM may have patents or pending patent applications covering subject
matter described in this document. The furnishing of this document does not
give you any license to these patents. You can send license inquiries, in
writing, to:  <address>IBM Director of Licensing
IBM Corporation
North Castle Drive
Armonk, NY  10504-1785
U.S.A.</address></para>
<para>For license inquiries regarding double-byte (DBCS) information, contact
the IBM Intellectual Property Department in your country or send inquiries,
in writing, to: <address>IBM World Trade Asia Corporation
Licensing
2-31 Roppongi 3-chome, Minato-ku
Tokyo 106-0032, Japan</address></para>
<para>The following paragraph does not apply to the United Kingdom or any
other country where such provisions are inconsistent with local law: INTERNATIONAL
BUSINESS MACHINES CORPORATION PROVIDES THIS PUBLICATION <quote>AS IS</quote> WITHOUT
WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED
TO, THE IMPLIED WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS
FOR A PARTICULAR PURPOSE. Some states do not allow disclaimer of express or
implied warranties in certain transactions, therefore, this statement may
not apply to you.</para>
<para>This information could include technical inaccuracies or typographical
errors. Changes are periodically made to the information herein; these changes
will be incorporated in new editions of the publication. IBM may make improvements
and/or changes in the product(s) and/or the program(s) described in this publication
at any time without notice.</para>
<para>Any references in this information to non-IBM Web sites are provided
for convenience only and do not in any manner serve as an endorsement of those
Web sites. The materials at those Web sites are not part of the materials
for this IBM product and use of those Web sites is at your own risk.</para>
<para>IBM may use or distribute any of the information you supply in any way
it believes appropriate without incurring any obligation to you.</para>
<para>Information concerning non-IBM products was obtained from the suppliers
of those products, their published announcements or other publicly available
sources. IBM has not tested those products and cannot confirm the accuracy
of performance, compatibility or any other claims related to non-IBM products.
Questions on the capabilities of non-IBM products should be addressed to the
suppliers of those products.</para>
<para>COPYRIGHT LICENSE:</para>
<para>This information contains sample application programs in source language,
which illustrate programming techniques on various operating platforms. You
may copy, modify, and distribute these sample programs in any form without
payment to IBM, for the purposes of developing, using, marketing or distributing
application programs conforming to the application programming interface for
the operating platform for which the sample programs are written. These examples
have not been thoroughly tested under all conditions. IBM, therefore, cannot
guarantee or imply reliability, serviceability, or function of these programs.
You may copy, modify, and distribute these sample programs in any form without
payment to IBM for the purposes of developing, using, marketing, or distributing
application programs conforming to IBM's application programming interfaces.
</para>
<sect1>
<title>Programming interface information</title>
<para>This book contains information and examples which are not intended to
be used as a programming interface of Linux for S/390.</para>
</sect1>
<sect1 id="TRADEMARKS">
<title>Trademarks</title>
<para>The following terms are trademarks of International Business Machines
Corporation in the United States, other countries, or both:</para>
<table frame="NONE" pgwide="0">
<title></title>
<tgroup cols="2" colsep="0" rowsep="0"><colspec colname="COLSPEC0" colwidth="270*">
<colspec colname="COLSPEC1" colwidth="270*"><tbody><row>
<entry align="LEFT" valign="TOP"><para>IBM</para></entry>
<entry align="LEFT" valign="TOP"><para>ESA/390</para></entry>
</row><row>
<entry align="LEFT" valign="TOP"><para>S/390</para></entry>
<entry align="LEFT" valign="TOP"><para>System/390</para></entry>
</row><row>
<entry colname="COLSPEC0"><para>zSeries</para></entry>
<entry colname="COLSPEC1"><para>z/Architecture</para></entry>
</row></tbody></tgroup></table>
<para>Linux is a registered trademark of Linus Torvalds and others.</para>
<para>Other company, product, and service names may be trademarks or service
marks of others.</para>
</sect1></chapter>
<appendix>
<title></title>
<para>Related publications: <itemizedlist>
<listitem><para><citation><citetitle>ESA/390 Principles of Operation</citetitle></citation>:
SA22&ndash;7201</para>
</listitem>
<listitem><para><citation><citetitle>System V Application Binary Interface
</citetitle></citation></para>
</listitem>
</itemizedlist></para>
</appendix>
<index></index></book>
