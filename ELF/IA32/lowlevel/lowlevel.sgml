<CHAPTER ID="lowlevel">
<TITLE>Low Level System Information</TITLE>

<SECT1 id=machineinterface>
<TITLE>Machine Interface</TITLE>

<SECT2 ID="processorarch">
<TITLE>Processor Architecture</TITLE>
<PARA>
The IA32 Architecture is specified by the following documents
<ITEMIZEDLIST MARK=bullet>
<LISTITEM><PARA><XREF LINKEND="std.IA32.SDM.Vol1">
</PARA></LISTITEM>
<LISTITEM><PARA><XREF LINKEND="std.IA32.SDM.Vol2">
</PARA></LISTITEM>
<LISTITEM><PARA><XREF LINKEND="std.IA32.SDM.Vol3">
</PARA></LISTITEM>
</ITEMIZEDLIST>
</PARA>
<PARA>
Only the features of the Intel486 processor instruction set may be assumed
to be present. An application should determine if any additional
instruction set features are available before using those additional features.
If a feature is not present, then the application may not use it.
</PARA>
<PARA>
Only instructions which do not require elevated privileges may be used
by an application.
</PARA>
<PARA>
Applications may not make system calls directly. The interfaces in the
implementation base libraries shall be used instead.
</PARA>
<PARA>
Applications conforming to this specification shall provide feedback to the
user if a feature that is required for correct execution of the application
is not present. Applications conforming to this specification should attempt
to execute in a diminished capacity if a required instruction set feature is
not present.
</PARA>
<PARA>
This specification does not provide any performance guarantees of a conforming
system. A system conforming to this specification may be implemented in either
hardware or software.
</PARA>
</SECT2>

<SECT2 ID="datarepresentation">
<TITLE>Data Representation</TITLE>
<PARA>
LSB-conforming applications shall use the data representation as defined in 
Chapter 3 of the <XREF LINKEND=STD.IA32.ABI.4>.
</PARA>
<PARA>
</PARA>
<SECT3 ID="byteordering">
<TITLE>Byte Ordering</TITLE>
<PARA>
LSB-conforming systems and applications shall use the bit and byte ordering
rules specified in Section 1.3.1 of the
<XREF LINKEND="std.IA32.SDM.Vol1">.
</PARA>
</SECT3>
<SECT3 ID="fundamentaltyes">
<TITLE>Fundamental Types</TITLE>
<PARA>
In addition to the fundamental types specified in Chapter 3 of the 
<XREF LINKEND=STD.IA32.ABI.4>, a 64 bit data type is
defined here.
<TABLE>
<TITLE>Scalar Types</TITLE>
<TGROUP COLS=5>
<THEAD>
  <ROW>
    <ENTRY>Type</ENTRY>
    <ENTRY>C</ENTRY>
    <ENTRY><COMPUTEROUTPUT>sizeof</COMPUTEROUTPUT></ENTRY>
    <ENTRY>Alignment (bytes)</ENTRY>
    <ENTRY>Intel386 Architecture</ENTRY>
  </ROW>
</THEAD>
<TBODY>
  <ROW>
    <ENTRY MOREROWS=2 VALIGN=middle>Integral</ENTRY>
    <ENTRY>long long</ENTRY>
    <ENTRY MOREROWS=1 VALIGN=middle><COMPUTEROUTPUT>8</COMPUTEROUTPUT></ENTRY>
    <ENTRY MOREROWS=1 VALIGN=middle>4</ENTRY>
    <ENTRY MOREROWS=1 VALIGN=middle>signed double word</ENTRY>
  </ROW>
  <ROW>
    <ENTRY>signed long long</ENTRY>
  </ROW>
  <ROW>
    <ENTRY>unsigned long long</ENTRY>
    <ENTRY><COMPUTEROUTPUT>8</COMPUTEROUTPUT></ENTRY>
    <ENTRY>4</ENTRY>
    <ENTRY>unsigned double word</ENTRY>
  </ROW>
</TBODY>
</TGROUP>
</TABLE>
</PARA>
</SECT3>
<SECT3 ID="aggregatesandunions">
<TITLE>Aggregates and Unions</TITLE>
<PARA>
LSB-conforming implementations shall support aggregates
and unions with alignment and padding as specified in
Chapter 3 of the <XREF LINKEND=STD.IA32.ABI.4>.
</PARA>
</SECT3>
<SECT3 ID="bitfields">
<TITLE>Bit Fields</TITLE>
<PARA>
LSB-conforming implementations shall support structure and union
definitions that include bit-fields as specified in
Chapter 3 of the <XREF LINKEND=STD.IA32.ABI.4>.
</PARA>
</SECT3>
</SECT2>

</SECT1>

<SECT1 id=callingsequence>
<TITLE>Function Calling Sequence</TITLE>
<PARA>
LSB-conforming applications shall use the function calling sequence as defined
in Chapter 3 of the 
<XREF LINKEND=STD.IA32.ABI.4>.
</PARA>

<SECT2 ID="cpuregisters">
<TITLE>Registers</TITLE>
<PARA>
LSB-conforming applications shall use the general registers provided by the architecture
in the manner described in 
Chapter 3 of the <XREF LINKEND=STD.IA32.ABI.4>.
</PARA>
</SECT2>

<SECT2 ID="fpuregisters">
<TITLE>Floating Point Registers</TITLE>
<PARA>
LSB-conforming applications shall use the floating point registers provided by the architecture
in the manner described in 
Chapter 3 of the <XREF LINKEND=STD.IA32.ABI.4>.
</PARA>
</SECT2>

<SECT2 ID="stackframe">
<TITLE>Stack Frame</TITLE>
<PARA>
LSB-conforming applications shall use the stack frame in the manner
specified in
Chapter 3 of the <XREF LINKEND=STD.IA32.ABI.4>.
</PARA>
</SECT2>

<SECT2 ID="arguments">
<TITLE>Arguments</TITLE>
<SECT3 ID="integralpointerarg">
<TITLE>Integral/Pointer</TITLE>
<PARA>
Integral and pointer arguments to functions shall be passed as specified in
Chapter 3 of the <XREF LINKEND=STD.IA32.ABI.4>.
</PARA>
</SECT3>
<SECT3 ID="floatingpointarg">
<TITLE>Floating Point</TITLE>
<PARA>
Floating point arguments to functions shall be passed as specified in
Chapter 3 of the <XREF LINKEND=STD.IA32.ABI.4>.
</PARA>
</SECT3>
<SECT3 ID="structunitonarg">
<TITLE>Struct and Union Arguments</TITLE>
<PARA>
Structure and union arguments to functions shall be passed as specified in
Chapter 3 of the <XREF LINKEND=STD.IA32.ABI.4>.
</PARA>
</SECT3>
<SECT3 ID="variableargs">
<TITLE>Variable Arguments</TITLE>
<PARA>
As described in 
Chapter 3 of the <XREF LINKEND=STD.IA32.ABI.4>,
LSB-conforming applications using variable argument lists
shall use the facilities defined in the
header file
<filename>&lt;stdarg.h&gt;</filename> 
to deal with variable argument lists.
<NOTE><PARA>This is a requirement of <XREF LINKEND="STD.ISO.C">
and <XREF LINKEND="STD.SUSv3"> as well as
<XREF LINKEND=STD.IA32.ABI.4>.
</PARA></NOTE>
</PARA>
</SECT3>
</SECT2>

<SECT2 ID="returnvalues">
<TITLE>Return Values</TITLE>
<SECT3 ID="voidret">
<TITLE>Void</TITLE>
<PARA>
As described in chapter 3 of
<XREF LINKEND=STD.IA32.ABI.4>,
functions returning no value need not set any register to any particular value.
</PARA>
</SECT3>
<SECT3 ID="integralpointerret">
<TITLE>Integral/Pointer</TITLE>
<PARA>
Functions return scalar values (integer or pointer), shall do so as specified
in Chapter 3 of the <XREF LINKEND=STD.IA32.ABI.4>.
</PARA>
</SECT3>
<SECT3 ID="floatingpointret">
<TITLE>Floating Point</TITLE>
<PARA>
Functions return floating point values shall do so as specified
in Chapter 3 of the <XREF LINKEND=STD.IA32.ABI.4>.
</PARA>
</SECT3>
<SECT3 ID="structunitonret">
<TITLE>Struct and Union</TITLE>
<PARA>
Functions that return a structure or union shall do so as specified
in Chapter 3 of the <XREF LINKEND=STD.IA32.ABI.4>.
</PARA>
</SECT3>
</SECT2>

</SECT1>

<SECT1 id=osinterface>
<TITLE>Operating System Interface</TITLE>
<PARA>
LSB-conforming applications shall use the following aspects of
the Operating System Interfaces as
defined in Chapter 3 of the 
<XREF LINKEND=STD.IA32.ABI.4>.
</PARA>

<SECT2 ID="virtualaddressspace">
<TITLE>Virtual Address Space</TITLE>
<PARA>
LSB-conforming implementations shall support the virtual address space
described in
Chapter 3 of the <XREF LINKEND=STD.IA32.ABI.4>.
</PARA>
<SECT3 ID="pagesize">
<TITLE>Page Size</TITLE>
<PARA>
LSB-conforming applications should call
<function>sysconf</function> to determine the current page size.
See also Chapter 3 of the <XREF LINKEND=STD.IA32.ABI.4>.
</PARA>
</SECT3>
<SECT3 ID="virtualaddressassignments">
<TITLE>Virtual Address Assignments</TITLE>
<PARA>
LSB-conforming systems shall provide the virtual address space 
configuration as described in
Chapter 3 of the <XREF LINKEND=STD.IA32.ABI.4> (Virtual Address Assignments).
</PARA>
</SECT3>
<SECT3 ID="managinprocesstack">
<TITLE>Managing the Process Stack</TITLE>
<PARA>
LSB-conforming systems shall manage the process stack as specified in
Chapter 3 of the <XREF LINKEND=STD.IA32.ABI.4>.
</PARA>
</SECT3>
<SECT3 ID="codingguidlines">
<TITLE>Coding Guidlines</TITLE>
<PARA>
LSB-conforming applications should follow the coding guidleines provided in
Chapter 3 of the <XREF LINKEND=STD.IA32.ABI.4>.
</PARA>
</SECT3>
</SECT2>

<SECT2 ID="processorexecutionmode">
<TITLE>Processor Execution Mode</TITLE>
<PARA>
LSB-conforming applications shall run in the user-mode ring
as described in 
Chapter 3 of the <XREF LINKEND=STD.IA32.ABI.4>.
</PARA>
</SECT2>

<SECT2 ID="exceptioninterface">
<TITLE>Exception Interface</TITLE>
<SECT3 ID="exceptionintro">
<TITLE>Introduction</TITLE>
<PARA>
LSB-conforming system shall provide the exception
interface described in
Chapter 3 of the <XREF LINKEND=STD.IA32.ABI.4>.
</PARA>
<SECT3 ID="hardwareexceptiontypes">
<TITLE>Hardware Exception Types</TITLE>
<PARA>
LSB-conforming systems shall map hardware exceptions to signals
as described in
Chapter 3 of the <XREF LINKEND=STD.IA32.ABI.4>.
</PARA>
</SECT3>
<SECT3 ID="softwaretraptypes">
<TITLE>Software Trap Types</TITLE>
<PARA>
Software generated traps are subject to the limitations described in
Chapter 3 of the <XREF LINKEND=STD.IA32.ABI.4>.
</PARA>
</SECT3>
</SECT2>

<SECT2 ID="signaldelivery">
<TITLE>Signal Delivery</TITLE>
<PARA>
There are no architecture specific requirements for signal delivery.
</PARA>
<SECT3 ID="signalhandlerinterface">
<TITLE>Signal Handler Interface</TITLE>
<PARA>
There are no architecture specific requirements for the signal handler
interface.
</PARA>
</SECT3>
</SECT2>

</SECT1>

<SECT1 id=processinitialization>
<TITLE>Process Initialization</TITLE>
<PARA>
An LSB-conforming implementation shall cause an application
to be initialized as described in the Process Initialization section of
Chapter 3 of the 
<XREF LINKEND=STD.IA32.ABI.4>, and as described below.
</PARA>

<SECT2 ID="specialregisters">
<TITLE>Special Registers</TITLE>
<PARA>
The special registers shall be initialized as described in
Chapter 3 of the <XREF LINKEND=STD.IA32.ABI.4>.
</PARA>
</SECT2>

<SECT2 ID="processstack">
<TITLE>Process Stack (on entry)</TITLE>
<PARA>
The process stack shall be initialized as described in
Chapter 3 of the <XREF LINKEND=STD.IA32.ABI.4>.
</PARA>
</SECT2>

<SECT2 ID="auxilliaryvectors">
<TITLE>Auxilliary Vector</TITLE>
<PARA>
The auxilliary vector shall be initialized as described in
Chapter 3 of the <XREF LINKEND=STD.IA32.ABI.4>.
</PARA>
</SECT2>

<SECT2 ID="environment">
<TITLE>Environment</TITLE>
<PARA>
There are no architecture specific requirements for environment initialization.
</PARA>
</SECT2>

</SECT1>

<SECT1 id=codingexamples>
<TITLE>Coding Examples</TITLE>
<SECT2 ID=codingexample-intro>
<TITLE>Introduction</TITLE>
<PARA>
LSB-conforming applications may follow the coding examples
provdied in chapter 3 of the 
<XREF LINKEND=STD.IA32.ABI.4>
in order to implement certain fundamental operations.
</PARA>
</SECT2>
<SECT2 ID="codemodeloverview">
<TITLE>Code Model Overview/Architecture Constraints</TITLE>
<PARA>
Chapter 3 of the <XREF LINKEND=STD.IA32.ABI.4> provides an overview of the code model.
</PARA>
</SECT2>

<SECT2 ID="picprologue">
<TITLE>Position-Independent Function Prologue</TITLE>
<PARA>
LSB-conforming applications using position independent
functions may use the techniques described in 
Chapter 3 of the <XREF LINKEND=STD.IA32.ABI.4>.
</PARA>
</SECT2>

<SECT2 ID="dataobjects">
<TITLE>Data Objects</TITLE>
<PARA>
LSB-conforming applications accessing non-stack resident data
objects may do so as described in
Chapter 3 of the <XREF LINKEND=STD.IA32.ABI.4>, including
both absolute and position independent data access techniques.
</PARA>
</SECT2>

<SECT2 ID="functioncalls">
<TITLE>Function Calls</TITLE>
<SECT3 ID="funccalldirect">
<TITLE>Absolute Direct Function Call</TITLE>
<PARA>
LSB-conforming applications using direct function
calls with absolute addressing may follow the examples
given in
Chapter 3 of the <XREF LINKEND=STD.IA32.ABI.4>.
</PARA>
</SECT3>
<SECT3 ID="funccallindirect">
<TITLE>Absolute Indirect Function Call</TITLE>
<PARA>
LSB-conforming applications using indirect function
calls with absolute addressing may follow the examples
given in
Chapter 3 of the <XREF LINKEND=STD.IA32.ABI.4>.
</PARA>
</SECT3>
<SECT3 ID="funccallpicdirect">
<TITLE>Position-Independent Direct Function Call</TITLE>
<PARA>
LSB-conforming applications using direct function
calls with position independent addressing may follow the examples
given in
Chapter 3 of the <XREF LINKEND=STD.IA32.ABI.4>.
</PARA>
</SECT3>
<SECT3 ID="funccallpicindirect">
<TITLE>Position-Independent Indirect Function Call</TITLE>
<PARA>
LSB-conforming applications using indirect function
calls with position independent addressing may follow the examples
given in
Chapter 3 of the <XREF LINKEND=STD.IA32.ABI.4>.
</PARA>
</SECT3>
</SECT2>

<SECT2 ID="branching">
<TITLE>Branching</TITLE>
<PARA>
LSB-conforming applications may follow the branching examples given in
Chapter 3 of the <XREF LINKEND=STD.IA32.ABI.4>.
</PARA>
</SECT2>

</SECT1>

<SECT1 id=cstackframe>
<TITLE>C Stack Frame</TITLE>

<SECT2 ID="variablearglist">
<TITLE>Variable Argument List</TITLE>
<PARA>
As described in 
Chapter 3 of the <XREF LINKEND=STD.IA32.ABI.4>,
LSB-conforming applications using variable argument lists
shall use the facilities defined in the
header file
<filename>&lt;stdarg.h&gt;</filename> 
to deal with variable argument lists.
<NOTE><PARA>This is a requirement of <XREF LINKEND="STD.ISO.C">
and <XREF LINKEND="STD.SUSv3"> as well as
<XREF LINKEND=STD.IA32.ABI.4>.
</PARA></NOTE>
</PARA>
</SECT2>

<SECT2 ID="dynamicstackalloc">
<TITLE>Dynamic Allocation of Stack Space</TITLE>
<PARA>
LSB-conforming applications may allocate space using
the stack following the examples given in 
Chapter 3 of the <XREF LINKEND=STD.IA32.ABI.4>.
</PARA>
</SECT2>

</SECT1>

<SECT1 id=debuginfo>
<TITLE>Debug Information</TITLE>

<PARA>
There are no architecture specific requirements for debugging information
for this architecture. LSB-conforming applications may utilize DWARF
sections as described in the generic specification.
</PARA>

</SECT1>

</CHAPTER>
