<CHAPTER ID="tocobjformat">
<TITLE>Object Format</TITLE>
<SECT1><TITLE>Introduction</TITLE>
<PARA>

LSB-conforming implementations shall support an object file ,
called Executable and Linking Format (ELF) as defined by the <XREF
LINKEND="std.PPC32.ABI"> and as supplemented by the Linux Standard
Base Specification and this document. LSB-conforming implementations
need not support tags related functionality. LSB-conforming applications
must not rely on tags related functionality.

</PARA>
</SECT1>

<SECT1 ID=elfheader>
<TITLE>ELF Header</TITLE>
<SECT2 ID="machineinfo">
<TITLE>Machine Information</TITLE>
<PARA>
LSB-conforming applications shall use the Machine Information as defined in
<XREF LINKEND="std.PPC32.ABI">, Chapter 4, Section "ELF Header" Subsection "Machine Information".
</PARA>
</SECT2>
</SECT1>

<SECT1 ID=sections>
<TITLE>Sections</TITLE>
<PARA>
</PARA>
<SECT2 ID="specialsections">
<TITLE>Special Sections</TITLE>
<PARA>
The following sections are defined in the <XREF LINKEND="std.PPC32.ABI"> Chapter 4, 
Section "Section", Subsection "Special Sections".
<!-- Start of text generated from database -->
<!-- generated from the LSB specification database -->
<!--    by $Header: mksectiontable 1.14 2006-02-14 02:07:22 nick Exp 0 -->
<!--    at Mon Apr 23 10:09:53 2007 -->
<TABLE>
<TITLE>ELF Special Sections</TITLE>
<TGROUP COLS=3>
<THEAD>
<ROW>
<ENTRY ALIGN=center>Name</ENTRY><ENTRY ALIGN=center>Type</ENTRY><ENTRY ALIGN=center>Attributes</ENTRY></ROW>
</THEAD>
<TBODY>
<ROW><ENTRY>.got</ENTRY><ENTRY>SHT_PROGBITS</ENTRY><ENTRY>SHF_ALLOC+SHF_WRITE+SHF_EXECINSTR</ENTRY></ROW>
<ROW><ENTRY>.plt</ENTRY><ENTRY>SHT_NOBITS</ENTRY><ENTRY>SHF_ALLOC+SHF_WRITE+SHF_EXECINSTR</ENTRY></ROW>
<ROW><ENTRY>.sdata</ENTRY><ENTRY>SHT_PROGBITS</ENTRY><ENTRY>SHF_ALLOC+SHF_WRITE</ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
<VARIABLELIST>
<VARLISTENTRY><TERM>.got</TERM><LISTITEM><PARA>This section holds the global offset table. See `Coding Examples' in Chapter 3, `Special Sections' in Chapter 4, and `Global Offset Table' in Chapter 5 of the processor supplement for more information.</PARA></LISTITEM></VARLISTENTRY>
<VARLISTENTRY><TERM>.plt</TERM><LISTITEM><PARA>This section holds the procedure linkage table.</PARA></LISTITEM></VARLISTENTRY>
<VARLISTENTRY><TERM>.sdata</TERM><LISTITEM><PARA>This section holds initialized small data that contribute to the program memory image</PARA></LISTITEM></VARLISTENTRY>
</VARIABLELIST>
<!-- End of text generated from database -->
<!--    by $Header: mksectiontable 1.14 2006-02-14 02:07:22 nick Exp 0 -->

Note that the <literal>.tags</>, <literal>.taglist</> and <literal>.tagsym</> sections described in 
Chapter 4, Section "Sections" <XREF LINKEND="std.PPC32.ABI"> are not supported.
</PARA>
</SECT2>
<SECT2 ID="linuxspecial">
<TITLE>Linux Special Sections</TITLE>
<PARA>
The following Linux PPC32 specific sections are defined here.
<!-- Start of text generated from database -->
<!-- generated from the LSB specification database -->
<!--    by $Header: mksectiontable 1.14 2006-02-14 02:07:22 nick Exp 0 -->
<!--    at Mon Apr 23 10:09:53 2007 -->
<TABLE>
<TITLE>Additional Special Sections</TITLE>
<TGROUP COLS=3>
<THEAD>
<ROW>
<ENTRY ALIGN=center>Name</ENTRY><ENTRY ALIGN=center>Type</ENTRY><ENTRY ALIGN=center>Attributes</ENTRY></ROW>
</THEAD>
<TBODY>
<ROW><ENTRY>.got2</ENTRY><ENTRY>SHT_PROGBITS</ENTRY><ENTRY>SHF_ALLOC+SHF_WRITE</ENTRY></ROW>
<ROW><ENTRY>.rela.bss</ENTRY><ENTRY>SHT_RELA</ENTRY><ENTRY>SHF_ALLOC</ENTRY></ROW>
<ROW><ENTRY>.rela.dyn</ENTRY><ENTRY>SHT_RELA</ENTRY><ENTRY>SHF_ALLOC</ENTRY></ROW>
<ROW><ENTRY>.rela.got</ENTRY><ENTRY>SHT_RELA</ENTRY><ENTRY>SHF_ALLOC</ENTRY></ROW>
<ROW><ENTRY>.rela.got2</ENTRY><ENTRY>SHT_RELA</ENTRY><ENTRY>SHF_ALLOC</ENTRY></ROW>
<ROW><ENTRY>.rela.plt</ENTRY><ENTRY>SHT_RELA</ENTRY><ENTRY>SHF_ALLOC</ENTRY></ROW>
<ROW><ENTRY>.rela.sbss</ENTRY><ENTRY>SHT_RELA</ENTRY><ENTRY>SHF_ALLOC</ENTRY></ROW>
<ROW><ENTRY>.sbss</ENTRY><ENTRY>SHT_NOBITS</ENTRY><ENTRY>SHF_ALLOC+SHF_WRITE</ENTRY></ROW>
<ROW><ENTRY>.sdata2</ENTRY><ENTRY>SHT_PROGBITS</ENTRY><ENTRY>SHF_ALLOC</ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
<VARIABLELIST>
<VARLISTENTRY><TERM>.got2</TERM><LISTITEM><PARA>This section holds the second level GOT</PARA></LISTITEM></VARLISTENTRY>
<VARLISTENTRY><TERM>.rela.bss</TERM><LISTITEM><PARA>This section holds RELA type relocation information for the BSS section of a shared library or dynamically linked application</PARA></LISTITEM></VARLISTENTRY>
<VARLISTENTRY><TERM>.rela.dyn</TERM><LISTITEM><PARA>This section holds RELA type relocation information for all sections of a shared library except the PLT.</PARA></LISTITEM></VARLISTENTRY>
<VARLISTENTRY><TERM>.rela.got</TERM><LISTITEM><PARA>This section holds RELA type relocation information for the GOT section of a shared library or dynamically linked application</PARA></LISTITEM></VARLISTENTRY>
<VARLISTENTRY><TERM>.rela.got2</TERM><LISTITEM><PARA>This section holds RELA type relocation information for the second level GOT section of a shared library or dynamically linked application</PARA></LISTITEM></VARLISTENTRY>
<VARLISTENTRY><TERM>.rela.plt</TERM><LISTITEM><PARA>This section holds RELA type relocation information for the PLT section of a shared library or dynamically linked application</PARA></LISTITEM></VARLISTENTRY>
<VARLISTENTRY><TERM>.rela.sbss</TERM><LISTITEM><PARA>This section holds RELA type relocation information for the SBSS section of a shared library or dynamically linked application</PARA></LISTITEM></VARLISTENTRY>
<VARLISTENTRY><TERM>.sbss</TERM><LISTITEM><PARA>This section holds uninitialized data that contribute to the program's memory image. The system initializes the data with zeroes when the program begins to run.</PARA></LISTITEM></VARLISTENTRY>
<VARLISTENTRY><TERM>.sdata2</TERM><LISTITEM><PARA>This section holds the second level of initialised small data</PARA></LISTITEM></VARLISTENTRY>
</VARIABLELIST>
<!-- End of text generated from database -->
<!--    by $Header: mksectiontable 1.14 2006-02-14 02:07:22 nick Exp 0 -->

</PARA>
</SECT2>

</SECT1>

<SECT1 ID=symboltable>
<TITLE>Symbol Table</TITLE>

<PARA>
LSB-conforming applications shall use the Symbol Table as defined in
Chapter 4, Section "Symbol Table" of the <XREF LINKEND="std.PPC32.ABI">.

</PARA>

</SECT1>

<SECT1 ID=relocation>
<TITLE>Relocation</TITLE>

<PARA>
LSB-conforming applications shall use Relocations as defined in
Chapter 4, Section "Relocation" of the <XREF LINKEND="std.PPC32.ABI">.
</PARA>

<SECT2 ID="relocationtypes">
<TITLE>Relocation Types</TITLE>
<PARA>
LSB-conforming applications shall support the relocation types 
as defined in the Chapter 4, Section "Relocation" Subsection "Relocation Typles"
except for the relocation type <literal>R_PPC_ADDR30</> as specified in Table 4-8 of
<XREF LINKEND="std.PPC32.ABI">.
</PARA>
</SECT2>

</SECT1>

</CHAPTER>
