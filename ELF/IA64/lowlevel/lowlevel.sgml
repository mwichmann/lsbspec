<PART ID="lowlevel">
<TITLE>Low Level System Information</TITLE>

<CHAPTER id=machineinterface>
<TITLE>Machine Interface</TITLE>

<SECT1 ID="processorarch">
<TITLE>Processor Architecture</TITLE>
<PARA>
The &itanium; Architecture is specified by the following documents
<ITEMIZEDLIST MARK=bullet>
<LISTITEM><PARA>
<XREF LINKEND="std.IA64.SDM.Vol1">
</PARA></LISTITEM>
<LISTITEM><PARA>
<XREF LINKEND="std.IA64.SDM.Vol2">
</PARA></LISTITEM>
<LISTITEM><PARA>
<XREF LINKEND="std.IA64.SDM.Vol3">
</PARA></LISTITEM>
<LISTITEM><PARA>
<XREF LINKEND="std.IA64.SDM.Vol4">
</PARA></LISTITEM>
<LISTITEM><PARA>
<XREF LINKEND="std.IA64.Conventions">
</PARA></LISTITEM>
<LISTITEM><PARA>
<XREF LINKEND="std.IA64.ABI">
</PARA></LISTITEM>
</ITEMIZEDLIST>
</PARA>
<PARA>
Only the features of the &itanium; processor instruction set may be assumed
to be present. An application is responsible for determining
if any additional instruction set features are available before
using those additional features. If a feature is not present, then the
application may not use it.
</PARA>
<PARA>
Only instructions which do not require elevated privileges may be used.
</PARA>
<PARA>
Applications may not make system calls directly. The interfaces in the
C library must be used instead.
</PARA>
<PARA>
There are some features of the &itanium; processor architecture that need not
be supported by a conforming implementation. These are described in this
chapter. A conforming application shall not rely on these features.
</PARA>
<PARA>
Applications conforming to this specification must provide feedback to the
user if a feature that is required for correct execution of the application
is not present. Applications conforming to this specification should attempt
to execute in a diminished capacity if a required feature is
not present.
</PARA>
<PARA>
This specfication does not provide any performance guarantees of a conforming
system. A system conforming to this specification may be implemented in either
hardware or software.
</PARA>
<PARA>
This specification describes only LP64 (i.e. 32-bit integers, 64-bit longs and pointers)
based implementations. Implementations may also provide ILP32 (32-bit integers, 
longs, and pointers), but conforming applications shall not rely on support
for ILP32. See section 1.2 of the 
<XREF LINKEND="std.IA64.ABI"> for further
information.
</PARA>
</SECT1>

<SECT1 ID="datarepresentation">
<TITLE>Data Representation</TITLE>
<PARA>
See 
<XREF LINKEND="std.IA64.Conventions">
Chapter 4.
</PARA>
<PARA>
Within this specification, the term <literal>byte</literal> refers to
an 8-bit object, the term <literal>halfword</literal> refers to a
16-bit object, the term <literal>word</literal> refers to a 32-bit
object, the term <literal>doubleword</literal> refers to a 64-bit
object, and the term <literal>quadword</literal> refers to a 
128-bit object. Although the &itanium; architecture also supports 120-bit 
addressable objects, this specification does not require LSB-conforming
implementations to provide support for these objects.
</PARA>
<PARA>
</PARA>
<SECT2 ID="byteordering">
<TITLE>Byte Ordering</TITLE>
<PARA>
LSB-conforming applications shall use little-endian byte ordering.
LSB-conforming implementations may support big-endian applications.
</PARA>
</SECT2>
<SECT2 ID="fundamentaltyes">
<TITLE>Fundamental Types</TITLE>
<PARA>
Table 2-1 describes how fundemental C language data types shall be represented:
<TABLE FRAME='All'>
<TITLE>Scalar Types</TITLE>
<TGROUP COLS=5>
<THEAD>
<ROW>
  <ENTRY>Type</ENTRY>
  <ENTRY>C</ENTRY>
  <ENTRY><COMPUTEROUTPUT>sizeof</COMPUTEROUTPUT></ENTRY>
  <ENTRY>Alignment (bytes)</ENTRY>
  <ENTRY>Notes</ENTRY>
</ROW>
</THEAD>
<TBODY>
  <ROW>
    <ENTRY morerows=14 valign=middle>Integral</ENTRY>
    <ENTRY>char</ENTRY>
    <ENTRY morerows=2 valign=middle>1</ENTRY>
    <ENTRY morerows=2 valign=middle>1</ENTRY>
    <ENTRY morerows=2 valign=middle></ENTRY>
  </ROW>
  <ROW>
    <ENTRY>signed char</ENTRY>
  </ROW>
  <ROW>
    <ENTRY>unsigned char</ENTRY>
  </ROW>
  <ROW>
    <ENTRY>short</ENTRY>
    <ENTRY morerows=2 valign=middle>2</ENTRY>
    <ENTRY morerows=2 valign=middle>2</ENTRY>
    <ENTRY morerows=2 valign=middle></ENTRY>
  </ROW>
  <ROW>
    <ENTRY>signed short</ENTRY>
  </ROW>
  <ROW>
    <ENTRY>unsigned short</ENTRY>
  </ROW>
  <ROW>
    <ENTRY>int</ENTRY>
    <ENTRY morerows=2 valign=middle>4</ENTRY>
    <ENTRY morerows=2 valign=middle>4</ENTRY>
    <ENTRY morerows=2 valign=middle></ENTRY>
  </ROW>
  <ROW>
    <ENTRY>signed int</ENTRY>
  </ROW>
  <ROW>
    <ENTRY>unsigned int</ENTRY>
  </ROW>
  <ROW>
    <ENTRY>long</ENTRY>
    <ENTRY morerows=2 valign=middle>8</ENTRY>
    <ENTRY morerows=2 valign=middle>8</ENTRY>
    <ENTRY morerows=2 valign=middle></ENTRY>
  </ROW>
  <ROW>
    <ENTRY>signed long</ENTRY>
  </ROW>
  <ROW>
    <ENTRY>unsigned long</ENTRY>
  </ROW>
  <ROW>
    <ENTRY>long long</ENTRY>
    <ENTRY morerows=2 valign=middle>8</ENTRY>
    <ENTRY morerows=2 valign=middle>8</ENTRY>
    <ENTRY morerows=2 valign=middle>See Note Below</ENTRY>
  </ROW>
  <ROW>
    <ENTRY>signed long long</ENTRY>
  </ROW>
  <ROW>
    <ENTRY>unsigned long long</ENTRY>
  </ROW>
  <ROW>
    <ENTRY morerows=1>Pointer</ENTRY>
    <ENTRY><replaceable>any-type</replaceable> *</ENTRY>
    <ENTRY morerows=1 valign=middle>8</ENTRY>
    <ENTRY morerows=1 valign=middle>8</ENTRY>
    <ENTRY morerows=1 valign=middle></ENTRY>
  </ROW>
  <ROW>
    <ENTRY><replaceable>any-type (*)()</replaceable></ENTRY>
  </ROW>
  <ROW>
    <ENTRY morerows=2 valign=middle>Floating-Point</ENTRY>
    <ENTRY>float</ENTRY>
    <ENTRY>4</ENTRY>
    <ENTRY>4</ENTRY>
    <ENTRY></ENTRY>
  </ROW>
  <ROW>
    <ENTRY>double</ENTRY>
    <ENTRY>8</ENTRY>
    <ENTRY>8</ENTRY>
    <ENTRY></ENTRY>
  </ROW>
  <ROW>
    <ENTRY>long double</ENTRY>
    <ENTRY>16</ENTRY>
    <ENTRY>16</ENTRY>
    <ENTRY></ENTRY>
  </ROW>
</TBODY>
</TGROUP>
</TABLE>
</PARA>
<NOTE>
<PARA>
Support for the <literal>long long</literal> 
data type is dependent on
support for ISO9899:1999 C language. This standard is not required
for LSB-conformance, but this data type is important when developing
applications for the &itanium; architecture.  The GNU Compiler Collection
(gcc) includes support for <literal>long long</literal> of ISO9899:1999.
</PARA>
</NOTE>
<PARA>
A null pointer (for all types) shall have the value zero.
</PARA>
</SECT2>
<SECT2 ID="aggregatesandunions">
<TITLE>Aggregates and Unions</TITLE>
<PARA>
Aggregates (structures and arrays) and unions assume the alignment of their
most strictly aligned component. The size of any object, including aggregates
and unions, shall always be a multiple of the object's alignment.
An array uses the same alignment as its elements. Structure and union objects
may require padding to meet size and element constraints. The contents of such padding is
undefined.
<ITEMIZEDLIST mark='bullet'>
  <LISTITEM><PARA>
  An entire structure or union object shall be aligned on the same boundary as its
  most strictly aligned member.
  </PARA></LISTITEM>
  <LISTITEM><PARA>
  Each member shall be assigned to the lowest available offset with the appropriate
  alignment. This may require <emphasis>internal padding</emphasis>, depending
  on the previous member.
  </PARA></LISTITEM>
  <LISTITEM><PARA>
  A structure's size shall be increased, if necessary, to make it a multiple of the
  alignment.  This may require <emphasis>tail padding</emphasis>, depending on the last
  member.
  </PARA></LISTITEM>
</ITEMIZEDLIST>
</PARA>
<PARA>
A conforming application shall not read padding.
</PARA>
<PARA>
<FIGURE pgwide=1>
<TITLE>Structure Smaller Than A Word</TITLE>
<INFORMALTABLE FRAME='all'>
 <TGROUP COLS=1>
  <COLSPEC COLWIDTH=5in COLNAME=CODE align='center'>
  <TBODY>
  <ROW valign='middle'>
   <ENTRY align=left><PROGRAMLISTING>
    struct {
        char c;
    }
   </PROGRAMLISTING></ENTRY>
  </ROW>
  <ROW>
   <ENTRY valign='bottom'> Byte aligned, <literal>sizeof</literal> is 1 </ENTRY>
  </ROW>
  </TBODY>
 </TGROUP>
 <TGROUP COLS=2 TGROUPSTYLE='border'>
    <COLSPEC COLWIDTH=1in colname=Offset align='right'>
    <COLSPEC COLWIDTH=1in colname=b1 align='center'>
     <THEAD>
       <ROW>
       <ENTRY>Offset</ENTRY>
       <ENTRY>Byte 0</ENTRY>
       </ROW>
     </THEAD>
     <TBODY>
      <ROW>
       <ENTRY>0</ENTRY>
       <ENTRY>c<superscript>0</superscript></ENTRY>
      </ROW>
     </TBODY>
 </TGROUP>
</INFORMALTABLE>
</FIGURE>
<FIGURE PGWIDE=1>
<TITLE>No Padding</TITLE>
<INFORMALTABLE FRAME='all'>
 <TGROUP COLS=1>
  <COLSPEC COLWIDTH=5in COLNAME=CODE align='center'>
  <TBODY>
  <ROW valign='middle'>
   <ENTRY align='left'><PROGRAMLISTING>
    struct {
        char  c;
        char  d;
        short s;
        int   i;
        long  l;
    }
   </PROGRAMLISTING></ENTRY>
  </ROW>
  <ROW>
   <ENTRY>Doubleword Aligned, <literal>sizeof</literal> is 16</ENTRY>
  </ROW>
  </TBODY>
 </TGROUP>
 <TGROUP COLS=5 TGROUPSTYLE='border'>
    <COLSPEC COLWIDTH=1in colname=Offset align='right'>
    <COLSPEC COLWIDTH=1in colname=b3 align='center'>
    <COLSPEC COLWIDTH=1in colname=b2 align='center'>
    <COLSPEC COLWIDTH=1in colname=b1 align='center'>
    <COLSPEC COLWIDTH=1in colname=b0 align='center'>
    <SPANSPEC spanname=halfwordleft namest=b3 nameend=b2 rowsep=1 colsep=1>
    <SPANSPEC spanname=halfwordright namest=b1 nameend=b0 rowsep=1 colsep=1>
    <SPANSPEC spanname=word namest=b3 nameend=b0 rowsep=1 colsep=1>
    <SPANSPEC spanname=wordnb namest=b0 nameend=b0 rowsep=0 colsep=1>
   <THEAD>
    <ROW>
      <ENTRY>Offset</ENTRY>
      <ENTRY>Byte 3</ENTRY>
      <ENTRY>Byte 2</ENTRY>
      <ENTRY>Byte 1</ENTRY>
      <ENTRY>Byte 0</ENTRY>
    </ROW>
   </THEAD>
   <TBODY>
   <ROW>
      <ENTRY>0</ENTRY>
      <ENTRY spanname=halfwordleft>s<superscript>2</superscript></ENTRY>
      <ENTRY>d<superscript>1</superscript></ENTRY>
      <ENTRY>c<superscript>0</superscript></ENTRY>
   </ROW>
   <ROW>
      <ENTRY>4</ENTRY>
      <ENTRY spanname=word>i<superscript>0</superscript></ENTRY>
   </ROW>
   <ROW>
      <ENTRY>8</ENTRY>
      <ENTRY morerows=1 spanname=word valign='middle'>l<superscript>0</superscript></ENTRY>
   </ROW>
   <ROW>
      <ENTRY>12</ENTRY>
      <ENTRY spanname=word></ENTRY>
   </ROW>
 </TBODY>
 </TGROUP>
</INFORMALTABLE>
</FIGURE>
<FIGURE>
<TITLE>Internal and Tail Padding</TITLE>
<INFORMALTABLE FRAME='all'>
 <TGROUP COLS=1>
  <COLSPEC COLWIDTH=5in COLNAME=CODE align='center'>
  <TBODY>
  <ROW valign='middle'>
   <ENTRY align='left'><PROGRAMLISTING>
    struct {
        char  c;
        long  l;
        int   i;
        short s;
    }
   </PROGRAMLISTING></ENTRY>
  </ROW>
  <ROW>
   <ENTRY>Doubleword Aligned, <literal>sizeof</literal> is 24</ENTRY>
  </ROW>
  </TBODY>
 </TGROUP>
 <TGROUP COLS=5 TGROUPSTYLE='border'>
    <COLSPEC COLWIDTH=1in colname=Offset align='right'>
    <COLSPEC COLWIDTH=1in colname=b3 align='center'>
    <COLSPEC COLWIDTH=1in colname=b2 align='center'>
    <COLSPEC COLWIDTH=1in colname=b1 align='center'>
    <COLSPEC COLWIDTH=1in colname=b0 align='center'>
    <SPANSPEC spanname=halfwordleft namest=b3 nameend=b2>
    <SPANSPEC spanname=halfwordright namest=b1 nameend=b0>
    <SPANSPEC spanname=threebytes namest=b3 nameend=b1>
    <SPANSPEC spanname=word namest=b3 nameend=b0>
    <THEAD>
     <ROW>
      <ENTRY>Offset</ENTRY>
      <ENTRY>Byte 3</ENTRY>
      <ENTRY>Byte 2</ENTRY>
      <ENTRY>Byte 1</ENTRY>
      <ENTRY>Byte 0</ENTRY>
     </ROW>
    </THEAD>
    <TBODY>
     <ROW>
      <ENTRY>0</ENTRY>
      <ENTRY spanname=threebytes>pad<superscript>1</superscript></ENTRY>
      <ENTRY>c<superscript>0</superscript></ENTRY>
     </ROW>
     <ROW>
      <ENTRY>4</ENTRY>
      <ENTRY spanname=word>pad<superscript>1</superscript></ENTRY>
     </ROW>
     <ROW>
      <ENTRY>8</ENTRY>
      <ENTRY morerows=1 spanname=word valign='middle'>l<superscript>0</superscript></ENTRY>
     </ROW>
     <ROW>
      <ENTRY>12</ENTRY>
      <ENTRY spanname=word></ENTRY>
     </ROW>
     <ROW>
      <ENTRY>16</ENTRY>
      <ENTRY spanname=word>i<superscript>0</superscript></ENTRY>
     </ROW>
     <ROW>
      <ENTRY>20</ENTRY>
      <ENTRY spanname=halfwordleft valign='middle'>pad<superscript>2</superscript></ENTRY>
      <ENTRY spanname=halfwordright valign='middle'>s<superscript>0</superscript></ENTRY>
     </ROW>
    </TBODY>
 </TGROUP>
</INFORMALTABLE>
</FIGURE>
</PARA>
</SECT2>
<SECT2 ID="bitfields">
<TITLE>Bit Fields</TITLE>
<PARA>
C <literal>struct</literal> and <literal>union</literal>
definitions may have <emphasis>bit-fields</emphasis>, which define integral
objects with a specified number of bits.
</PARA>
<PARA>
Bit fields that are declared with neither <literal>signed</literal> nor
<literal>unsigned</literal> specifier shall always be treated as
<literal>unsigned</literal>. Bit fields obey the same size and alignment rules
as other structure and union members, with the following additional properties:
<ITEMIZEDLIST mark=bullet>
<LISTITEM><PARA>
Bit-fields are allocated from right to left (least to most significant).
</PARA></LISTITEM>
<LISTITEM><PARA>
A bit-field must entirely reside in a storage unit for its appropriate type. A bit field
shall never cross its unit boundary.
</PARA></LISTITEM>
<LISTITEM><PARA>
Bit-fields may share a storage unit with other <literal>struct/union</literal>
members, including members that are not bit fields. Such other <literal>struct/union</literal>
members shall occupy different parts of the storage unit.
</PARA></LISTITEM>
<LISTITEM><PARA>
The type of unnamed bit-fields shall not affect the alignment of a structure
or union, although individual bit-field member offsets shall obey the alignment
constraints.
</PARA></LISTITEM>
</ITEMIZEDLIST>
</PARA>
<PARA>
<FIGURE>
 <TITLE>Bit-Field Ranges</TITLE>
 <INFORMALTABLE>
  <TGROUP COLS=3>
   <COLSPEC COLWIDTH=1.5in ALIGN='left'>
   <COLSPEC COLWIDTH=1.5in ALIGN='left'>
   <COLSPEC COLWIDTH=1.5in ALIGN='left'>
   <THEAD>
    <ROW>
     <ENTRY align='center'>Bit-field Type</ENTRY>
     <ENTRY align='center'>Width &w;</ENTRY>
     <ENTRY align='center'>Range</ENTRY>
    </ROW>
   </THEAD>
   <TBODY>
    <ROW>
     <ENTRY><programlisting>
signed char
char
unsigned char
     </programlisting></ENTRY>
     <ENTRY valign='middle'>1 to 8</ENTRY>
     <ENTRY><programlisting>
-2<superscript>&w;-1</superscript> to 2<superscript>&w;-1</superscript>-1
0 to 2<superscript>&w;</superscript>-1
0 to 2<superscript>&w;</superscript>-1
     </programlisting></ENTRY>
    </ROW>
    <ROW>
     <ENTRY><programlisting>
signed short
short
unsigned short
     </programlisting></ENTRY>
     <ENTRY valign='middle'>1 to 16</ENTRY>
     <ENTRY><programlisting>
-2<superscript>&w;-1</superscript> to 2<superscript>&w;-1</superscript>-1
0 to 2<superscript>&w;</superscript>-1
0 to 2<superscript>&w;</superscript>-1
     </programlisting></ENTRY>
    </ROW>
    <ROW>
     <ENTRY><programlisting>
signed int
int
unsigned int
     </programlisting></ENTRY>
     <ENTRY valign='middle'>1 to 32</ENTRY>
     <ENTRY><programlisting>
-2<superscript>&w;-1</superscript> to 2<superscript>&w;-1</superscript>-1
0 to 2<superscript>&w;</superscript>-1
0 to 2<superscript>&w;</superscript>-1
     </programlisting></ENTRY>
    </ROW>
    <ROW>
     <ENTRY><programlisting>
signed long
long
unsigned long
     </programlisting></ENTRY>
     <ENTRY valign='middle'>1 to 64</ENTRY>
     <ENTRY><programlisting>
-2<superscript>&w;-1</superscript> to 2<superscript>&w;-1</superscript>-1
0 to 2<superscript>&w;</superscript>-1
0 to 2<superscript>&w;</superscript>-1
     </programlisting></ENTRY>
    </ROW>
   </TBODY>
  </TGROUP>
 </INFORMALTABLE>
</FIGURE>
</PARA>
</SECT2>
</SECT1>

</CHAPTER>

<CHAPTER id=callingsequence>
<TITLE>Function Calling Sequence</TITLE>
<PARA>
LSB-conforming applications shall use the procedure linkage
and function calling sequence as defined
in Chapter 8.4 of the 
<XREF LINKEND="std.IA64.Conventions">.
</PARA>

<SECT1 ID="cpuregisters">
<TITLE>CPU Registers</TITLE>
<PARA>
The CPU general and other registers are as defined in the 
<XREF LINKEND="std.IA64.SDM.Vol1">
Section 3.1.
</PARA>
</SECT1>

<SECT1 ID="fpuregisters">
<TITLE>Floating Point Registers</TITLE>
<PARA>
The floating point registers are as defined in the
<XREF LINKEND="std.IA64.SDM.Vol1">
Section 3.1.
</PARA>
</SECT1>

<SECT1 ID="stackframe">
<TITLE>Stack Frame</TITLE>
<PARA>
The stackframe layout is as described in the
<XREF LINKEND="std.IA64.Conventions">
Chapter 8.4.
</PARA>
</SECT1>

<SECT1 ID="arguments">
<TITLE>Arguments</TITLE>
<PARA>
The procedure argument passing mechanism is as described in the
<XREF LINKEND="std.IA64.Conventions">
Chapter 8.5.
</PARA>
<SECT2 ID="integralpointerarg">
<TITLE>Integral/Pointer</TITLE>
<PARA>
See 
<XREF LINKEND="std.IA64.Conventions">
Chapter 8.5.
</PARA>
</SECT2>
<SECT2 ID="floatingpointarg">
<TITLE>Floating Point</TITLE>
<PARA>
See 
<XREF LINKEND="std.IA64.Conventions">
Chapter 8.5.
</PARA>
</SECT2>
<SECT2 ID="structunitonarg">
<TITLE>Struct and Union Point</TITLE>
<PARA>
See 
<XREF LINKEND="std.IA64.Conventions">
Chapter 8.5.
</PARA>
</SECT2>
<SECT2 ID="variableargs">
<TITLE>Variable Arguments</TITLE>
<PARA>
See 
<XREF LINKEND="std.IA64.Conventions">
Chapter 8.5.4.
</PARA>
</SECT2>
</SECT1>

<SECT1 ID="returnvalues">
<TITLE>Return Values</TITLE>
<PARA>
See 
<XREF LINKEND="std.IA64.Conventions">
Chapter 8.6.
</PARA>
<SECT2 ID="voidret">
<TITLE>Void</TITLE>
<PARA>
Functions that return no value (<literal>void</literal> functions)
are not required to put any particular value in any general register.
</PARA>
</SECT2>
<SECT2 ID="integralpointerret">
<TITLE>Integral/Pointer</TITLE>
<PARA>
See 
<XREF LINKEND="std.IA64.Conventions">
Chapter 8.6.
</PARA>
</SECT2>
<SECT2 ID="floatingpointret">
<TITLE>Floating Point</TITLE>
<PARA>
See 
<XREF LINKEND="std.IA64.Conventions">
Chapter 8.6.
</PARA>
</SECT2>
<SECT2 ID="structunitonret">
<TITLE>Struct and Union</TITLE>
<PARA>
See 
<XREF LINKEND="std.IA64.Conventions">
Chapter 8.6 (aggregate return values).
Depending on the size (including any padding), aggregate data types
may be passed in one or more general registers, or in memory.
</PARA>
</SECT2>
</SECT1>

</CHAPTER>

<CHAPTER id=osinterface>
<TITLE>Operating System Interface</TITLE>
<PARA>
LSB-conforming applications shall use the Operating System Interfaces as
defined in Chapter 3 of the 
<XREF LINKEND="std.IA64.ABI">.
</PARA>

<SECT1 ID="processorexecutionmode">
<TITLE>Processor Execution Mode</TITLE>
<PARA>
Applications must assume that they will execute in the least
privileged user mode (i.e. level 3). Other privilege levels
are reserved for the Operating System.
</PARA>
</SECT1>

<SECT1 ID="exceptioninterface">
<TITLE>Exception Interface</TITLE>
<PARA>
See 
<XREF LINKEND="std.IA64.ABI">, section 3.3.1.
</PARA>
<SECT2 ID="hardwareexceptiontypes">
<TITLE>Hardware Exception Types</TITLE>
<PARA>
See 
<XREF LINKEND="std.IA64.ABI">, section 3.3.1.
</PARA>
</SECT2>
<SECT2 ID="softwaretraptypes">
<TITLE>Software Trap Types</TITLE>
<PARA>
See 
<XREF LINKEND="std.IA64.ABI">, section 3.3.1.
</PARA>
</SECT2>
<SECT2 ID="debuggingsupport">
<TITLE>Debugging Support</TITLE>
<PARA>
See 
<XREF LINKEND="std.IA64.ABI">, section 3.3.4.
</PARA>
</SECT2>
<SECT2 ID="processstartup">
<TITLE>Process Startup</TITLE>
<PARA>
See 
<XREF LINKEND="std.IA64.ABI">, section 3.3.5.
</PARA>
</SECT2>
</SECT1>

<SECT1 ID="signaldelivery">
<TITLE>Signal Delivery</TITLE>
<PARA>
See 
<XREF LINKEND="std.IA64.ABI">, section 3.3.2.
</PARA>
<SECT2 ID="signalhandlerinterface">
<TITLE>Signal Handler Interface</TITLE>
<PARA>
See 
<XREF LINKEND="std.IA64.ABI">, section 3.3.3.
</PARA>
</SECT2>
</SECT1>

</CHAPTER>

<CHAPTER id=processinitialization>
<TITLE>Process Initialization</TITLE>
<PARA>
LSB-conforming applications shall use the Process Startup as
defined in Section 3.3.5 of the 
<XREF LINKEND="std.IA64.ABI">.
</PARA>

<SECT1 ID="specialregisters">
<TITLE>Special Registers</TITLE>
<PARA>
<XREF LINKEND="std.IA64.ABI">, section 3.3.5, defines required register initializations
for process startup.
</PARA>
</SECT1>

<SECT1 ID="processstack">
<TITLE>Process Stack (on entry)</TITLE>
<PARA>
As defined in
<XREF LINKEND="std.IA64.ABI">, section 3.3.5, the return pointer register (rp) shall
contain a valid return address, such that if the application
program returns from the main entry routine, the implementation
shall cause the application to exit normally, using the returned 
value as the exit status. Further, the unwind information for this
&quot;bottom of stack&quot; routine in the implementation shall
provide a mechanism for recognizing the bottom of the stack during
a stack unwind.
</PARA>
</SECT1>

<SECT1 ID="auxiliaryvector">
<TITLE>Auxiliary Vector</TITLE>
<PARA>
The auxiliary vector conveys information from the operating system
to the application. Only the terminating null
auxiliary vector entry is required, but if any other entries are
present, they shall be interpreted as follows.
This vector is an array of the following structures.
</PARA>
<PROGRAMLISTING>
typedef struct
{
  long int a_type;              /* Entry type */
  union
    {
      long int a_val;           /* Integer value */
      void *a_ptr;              /* Pointer value */
      void (*a_fcn) (void);     /* Function pointer value */
    } a_un;
} auxv_t;
</PROGRAMLISTING>
<PARA>
The application shall interpret the <literal>a_un</literal> value according
to the <literal>a_type</literal>. Other auxiliary vector types are reserved.
</PARA>
<PARA>
The <literal>a_type</literal> field shall contain one of the following values:
<VARIABLELIST>
<VARLISTENTRY><TERM>AT_NULL</TERM>
<LISTITEM>
<PARA>
The last entry in the array has type <literal>AT_NULL</literal>. 
The value in <literal>a_un</literal> is undefined.
</PARA>
</LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY><TERM>AT_IGNORE</TERM>
<LISTITEM>
<PARA>
The value in <literal>a_un</literal> is undefined, and should be ignored.
</PARA>
</LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY><TERM>AT_EXECFD</TERM>
<LISTITEM>
<PARA>
File descriptor of program
</PARA>
</LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY><TERM>AT_PHDR</TERM>
<LISTITEM>
<PARA>
Program headers for program
</PARA>
</LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY><TERM>AT_PHENT</TERM>
<LISTITEM>
<PARA>
Size of program header entry
</PARA>
</LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY><TERM>AT_PHNUM</TERM>
<LISTITEM>
<PARA>
Number of program headers
</PARA>
</LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY><TERM>AT_PAGESZ</TERM>
<LISTITEM>
<PARA>
System page size
</PARA>
</LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY><TERM>AT_BASE</TERM>
<LISTITEM>
<PARA>
Base address of interpreter
</PARA>
</LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY><TERM>AT_FLAGS</TERM>
<LISTITEM>
<PARA>
Flags
</PARA>
</LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY><TERM>AT_ENTRY</TERM>
<LISTITEM>
<PARA>
Entry point of program
</PARA>
</LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY><TERM>AT_NOTELF</TERM>
<LISTITEM>
<PARA>
Program is not ELF
</PARA>
</LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY><TERM>AT_UID</TERM>
<LISTITEM>
<PARA>
Real uid
</PARA>
</LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY><TERM>AT_EUID</TERM>
<LISTITEM>
<PARA>
Effective uid
</PARA>
</LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY><TERM>AT_GID</TERM>
<LISTITEM>
<PARA>
Real gid
</PARA>
</LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY><TERM>AT_EGID</TERM>
<LISTITEM>
<PARA>
Effective gid
</PARA>
</LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY><TERM>AT_CLKTCK</TERM>
<LISTITEM>
<PARA>
Frequency of times()
</PARA>
</LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY><TERM>AT_PLATFORM</TERM>
<LISTITEM>
<PARA>
String identifying platform. 
</PARA>
</LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY><TERM>AT_HWCAP</TERM>
<LISTITEM>
<PARA>
Machine dependent hints about
processor capabilities. 
</PARA>
</LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY><TERM>AT_FPUCW</TERM>
<LISTITEM>
<PARA>
Used FPU control word
</PARA>
</LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY><TERM>AT_DCACHEBSIZE</TERM>
<LISTITEM>
<PARA>
Data cache block size
</PARA>
</LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY><TERM>AT_ICACHEBSIZE</TERM>
<LISTITEM>
<PARA>
Instruction cache block size
</PARA>
</LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY><TERM>AT_UCACHEBSIZE</TERM>
<LISTITEM>
<PARA>
Unified cache block size
</PARA>
</LISTITEM>
</VARLISTENTRY>
</VARIABLELIST>
</PARA>
<NOTE>
<PARA>
The auxiliary vector is intended for passing information
from the operating system to the program interpreter.
</PARA>
</NOTE>
</SECT1>

<SECT1 ID="environment">
<TITLE>Environment</TITLE>
<PARA>
Although a pointer to the environment vector should be available as a
third argument to the <function>main</function> entry point, conforming
applications
should use <function>getenv</function> to access the environment.
(See
<XREF LINKEND="std.SUSv3">, Section <function>exec</function>).
</PARA>
</SECT1>

</CHAPTER>

<CHAPTER id=codingexamples>
<TITLE>Coding Examples</TITLE>
<PARA>
LSB-conforming applications may implement fundamental operations using the
Coding Examples as shown below.
</PARA>
<PARA>
Sample code sequences and coding conventions can be found in
<XREF LINKEND="std.IA64.Conventions">, Chapter 9.
</PARA>

<SECT1 ID="codemodeloverview">
<TITLE>Code Model Overview/Architecture Constraints</TITLE>
<PARA>
As defined in 
<XREF LINKEND="std.IA64.ABI">,
relocatable files, executable files, and shared object files 
that are supplied as part of an application must use
Position Independent Code, as described in
<XREF LINKEND="std.IA64.Conventions">, Chapter 12.
</PARA>
</SECT1>

<SECT1 ID="picprologue">
<TITLE>Position-Independent Function Prologue</TITLE>
<PARA>
See
<XREF LINKEND="std.IA64.Conventions">, Chapter 8.4.
</PARA>
</SECT1>

<SECT1 ID="dataobjects">
<TITLE>Data Objects</TITLE>
<PARA>
See
<XREF LINKEND="std.IA64.ABI">, Chapter 5.3.4, and
<XREF LINKEND="std.IA64.Conventions">, Chapter 12.3.
</PARA>
<SECT2 ID="dataobjectsabsload">
<TITLE>Absolute Load & Store</TITLE>
<PARA>
Conforming applications shall not use absolute addressing.
</PARA>
</SECT2>
<SECT2 ID="dataobjectsrelload">
<TITLE>Position Relative Load & Store</TITLE>
<PARA>
See 
<XREF LINKEND="std.IA64.ABI">, Chapter 5.3.4.
</PARA>
</SECT2>
</SECT1>

<SECT1 ID="functioncalls">
<TITLE>Function Calls</TITLE>
<PARA>
See
<XREF LINKEND="std.IA64.Conventions">, Chapter 8.4.
</PARA>
<PARA>
Four types of procedure call are defined in 
<XREF LINKEND="std.IA64.Conventions">, Chapter 8.3.
Although special calling conventions
are permitted, provided that the compiler and runtime library
agree on these conventions, none are defined for this standard.
Consequently, no application shall depend on a type of procedure call
other than Direct Calls, Direct Dynamically Linked Calls, or Indirect Calls,
as defined in
<XREF LINKEND="std.IA64.Conventions">, Chapter 8.3.
</PARA>
<SECT2 ID="funccalldirect">
<TITLE>Absolute Direct Function Call</TITLE>
<PARA>
Conforming applications shall not use absolute addressing.
</PARA>
</SECT2>
<SECT2 ID="funccallindirect">
<TITLE>Absolute Indirect Function Call</TITLE>
<PARA>
Conforming applications shall not use absolute addressing.
</PARA>
</SECT2>
<SECT2 ID="funccallpicdirect">
<TITLE>Position-Independent Direct Function Call</TITLE>
<PARA>
See
<XREF LINKEND="std.IA64.Conventions">, Chapter 8.4.1.
</PARA>
</SECT2>
<SECT2 ID="funccallpicindirect">
<TITLE>Position-Independent Indirect Function Call</TITLE>
<PARA>
See
<XREF LINKEND="std.IA64.Conventions">, Chapter 8.4.2.
</PARA>
</SECT2>
</SECT1>

<SECT1 ID="branching">
<TITLE>Branching</TITLE>
<PARA>
Branching is described in
<XREF LINKEND="std.IA64.SDM.Vol4">, Chapter 4.5.
</PARA>
<SECT2 ID="branchinstruction">
<TITLE>Branch Instruction</TITLE>
<PARA>
See
<XREF LINKEND="std.IA64.SDM.Vol4">, Chapter 4.5.
</PARA>
</SECT2>
<SECT2 ID="absoluteswitchcode">
<TITLE>Absolute switch() code</TITLE>
<PARA>
Conforming applications shall not use absolute addressing.
</PARA>
</SECT2>
<SECT2 ID="picswitchcode">
<TITLE>Position-Independent switch() code</TITLE>
<PARA>
Where there are several possible targets for a branch,
the compiler may use a number of different code generation strategies.
See
<XREF LINKEND="std.IA64.Conventions">, Chapter 9.1.7.
</PARA>
</SECT2>
</SECT1>

</CHAPTER>

<CHAPTER id=cstackframe>
<TITLE>C Stack Frame</TITLE>

<SECT1 ID="variablearglist">
<TITLE>Variable Argument List</TITLE>
<PARA>
See
<XREF LINKEND="std.IA64.Conventions">, Chapter 8.5.2, and 8.5.4.
</PARA>
</SECT1>

<SECT1 ID="dynamicstackalloc">
<TITLE>Dynamic Allocation of Stack Space</TITLE>
<PARA>
The C library <function>alloca</function> function should be
used to dynamically allocate stack space.
</PARA>
</SECT1>

</CHAPTER>

<CHAPTER id=debuginfo>
<TITLE>Debug Information</TITLE>

<PARA>
The LSB does not currently specify the format of Debug information.
</PARA>

</CHAPTER>

</PART>
