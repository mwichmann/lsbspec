<!-- Start of text generated from database -->
<!-- generated from the LSB specification database -->
<!--    by $Header: /cvsroot/lsb/lsbspec/mksectiontable,v 1.10 2002/06/20 20:35:42 anderson Exp 0 -->
<!--    at Thu Feb 24 14:23:43 2005 -->
<TABLE>
<TITLE>ELF Special Sections</TITLE>
<TGROUP COLS=3>
<THEAD>
<ROW>
<ENTRY ALIGN=center>Name</ENTRY><ENTRY ALIGN=center>Type</ENTRY><ENTRY ALIGN=center>Attributes</ENTRY></ROW>
</THEAD>
<TBODY>
<ROW><ENTRY>.got</ENTRY><ENTRY>SHT_PROGBITS</ENTRY><ENTRY>SHF_ALLOC+SHF_WRITE+SHF_IA_64_SHORT</ENTRY></ROW>
<ROW><ENTRY>.IA_64.archext</ENTRY><ENTRY>SHT_IA_64_EXT</ENTRY><ENTRY>0</ENTRY></ROW>
<ROW><ENTRY>.IA_64.pltoff</ENTRY><ENTRY>SHT_PROGBITS</ENTRY><ENTRY>SHF_ALLOC+SHF_WRITE+SHF_IA_64_SHORT</ENTRY></ROW>
<ROW><ENTRY>.IA_64.unwind</ENTRY><ENTRY>SHT_IA_64_UNWIND</ENTRY><ENTRY>SHF_ALLOC+SHF_LINK_ORDER</ENTRY></ROW>
<ROW><ENTRY>.IA_64.unwind_info</ENTRY><ENTRY>SHT_PROGBITS</ENTRY><ENTRY>SHF_ALLOC</ENTRY></ROW>
<ROW><ENTRY>.plt</ENTRY><ENTRY>SHT_PROGBITS</ENTRY><ENTRY>SHF_ALLOC+SHF_EXECINSTR</ENTRY></ROW>
<ROW><ENTRY>.sbss</ENTRY><ENTRY>SHT_NOBITS</ENTRY><ENTRY>SHF_ALLOC+SHF_WRITE</ENTRY></ROW>
<ROW><ENTRY>.sdata</ENTRY><ENTRY>SHT_PROGBITS</ENTRY><ENTRY>SHF_ALLOC+SHF_WRITE+SHF_IA_64_SHORT</ENTRY></ROW>
<ROW><ENTRY>.sdata1</ENTRY><ENTRY>SHT_PROGBITS</ENTRY><ENTRY>SHF_ALLOC+SHF_WRITE+SHF_IA_64_SHORT</ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
<VARIABLELIST>
<VARLISTENTRY><TERM>.got</TERM><LISTITEM><PARA>This section holds the Global Offset Table. See ``Coding Examples'' in Chapter 3, ``Special Sections'' in Chapter 4, and ``Global Offset Table'' in Chapter 5 of the processor supplement for more information.</PARA></LISTITEM></VARLISTENTRY>
<VARLISTENTRY><TERM>.IA_64.archext</TERM><LISTITEM><PARA>This section holds product-specific extension bits. The link editor will perform a logical "or" of the extension bits of each object when creating an executable so that it creates only a single .IA_64.archext section in the
executable.</PARA></LISTITEM></VARLISTENTRY>
<VARLISTENTRY><TERM>.IA_64.pltoff</TERM><LISTITEM><PARA>This section holds local function descriptor entries.</PARA></LISTITEM></VARLISTENTRY>
<VARLISTENTRY><TERM>.IA_64.unwind</TERM><LISTITEM><PARA>This section holds the unwind function table. The contents are described in the Intel (r) Itanium (tm) Processor Specific ABI.</PARA></LISTITEM></VARLISTENTRY>
<VARLISTENTRY><TERM>.IA_64.unwind_info</TERM><LISTITEM><PARA>This section holds stack unwind and and exception handling information. The exception handling information is programming language specific, and is unspecified.</PARA></LISTITEM></VARLISTENTRY>
<VARLISTENTRY><TERM>.plt</TERM><LISTITEM><PARA>This section holds the Procedure Linkage Table.</PARA></LISTITEM></VARLISTENTRY>
<VARLISTENTRY><TERM>.sbss</TERM><LISTITEM><PARA>This section holds uninitialized data that contribute to the program''s memory image. Data objects contained in this section are recommended to be eight bytes or less in size. The system initializes the data with zeroes when the program begins to run. The section occupies no file space, as indicated by the section type SHT_NOBITS. The .sbss section is placed so it may be accessed using short direct addressing (22 bit offset from gp).</PARA></LISTITEM></VARLISTENTRY>
<VARLISTENTRY><TERM>.sdata</TERM><LISTITEM><PARA>This section and the .sdata1 section hold initialized data that contribute to the program''s memory image. Data objects contained in this section are recommended to be eight bytes or less in size. The .sdata and .sdata1 sections are placed so they may be accessed using short direct addressing (22 bit offset from gp).</PARA></LISTITEM></VARLISTENTRY>
<VARLISTENTRY><TERM>.sdata1</TERM><LISTITEM><PARA>See .sdata.</PARA></LISTITEM></VARLISTENTRY>
</VARIABLELIST>
<!-- End of text generated from database -->
<!--    by $Header: /cvsroot/lsb/lsbspec/mksectiontable,v 1.10 2002/06/20 20:35:42 anderson Exp 0 -->
