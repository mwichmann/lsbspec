{\rtf1\ansi\deff0
{\fonttbl{\f2\fnil\fcharset0 Courier New;}
{\f1\fnil\fcharset0 Arial;}
{\f0\fnil\fcharset0 Times New Roman;}
}
{\colortbl;}{\stylesheet{\s1 Heading 1;}{\s2 Heading 2;}{\s3 Heading 3;}{\s4 Heading 4;}{\s5 Heading 5;}{\s6 Heading 6;}{\s7 Heading 7;}{\s8 Heading 8;}{\s9 Heading 9;}}
\deflang1024\notabind\facingp\hyphauto1\widowctrl
\sectd\plain\pgwsxn11905\pghsxn16837\marglsxn1440\margrsxn1440\margtsxn1440\margbsxn1920\headery0\footery0\pgndec{\headerl\pard\sl-240\sb770\sa430\plain\tqc\tx4512\tqr\tx9025 {}\tab {}\tab {}\par}{\footerl\pard\sl-240\sb770\sa910\plain\tqc\tx4512\tqr\tx9025 {}\tab {}\tab {}\par}{\headerr\pard\sl-240\sb770\sa430\plain\tqc\tx4512\tqr\tx9025 {}\tab {}\tab {}\par}{\footerr\pard\sl-240\sb770\sa910\plain\tqc\tx4512\tqr\tx9025 {}\tab {}\tab {}\par}\pard\sl20 \fs20 \hyphpar0\par\pard\sb373\s1\sl647\qc \b\fs49 64-bit PowerPC ELF Application Binary Interface Supplement 1.7\keepn\hyphpar0\par\pard\sl260 \b0\fs20 \~\hyphpar0\par\pard\sb796\sl449\qc \b\fs34 Ian Lance Taylor\keepn\hyphpar0\par\pard\sl260\qc \fs24 Zembu Labs\hyphpar0\par\page\pard\sl20 \b0\fs20 \hyphpar0\par\pard\sl-240 \b 64-bit PowerPC ELF Application Binary Interface Supplement 1.7\hyphpar0\par\pard\sl260 \b0 by\~Ian Lance Taylor\hyphpar0\par\pard\sb260\sl260 1.7\~Edition \hyphpar0\par\pard\sl260 Published Sep 15, 2003\hyphpar0\par\pard\sl260 Copyright\~\'a9\~1999, 2004 IBM Corporation\hyphpar0\par\pard\sl260 Copyright\~\'a9\~2003, 2004 Free Standards Group\hyphpar0\par\pard\sb200\sl260 \fs16 Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.1; with no Invariant Sections, with no Front-Cover Texts, and with no Back-Cover Texts. A copy of the license is available from http://www.linuxbase.org/spec/refspecs/LSB_1.2.0/gLSB/gfdl.html.\hyphpar0\par\pard\sb200\sl260 The following terms are trademarks or registered trademarks of International Business Machines Corporation in the United States and/or other countires: AIX, PowerPC. A full list U.S. trademarks owned by IBM may be found at http://www.ibm.com/legal/copytrade.shtml.\hyphpar0\par\pard\sb259\sl260 \fs20 Revision History\sa90\par\trowd\trql \clvertalt\cellx3008\clvertalt\cellx6016\clvertalt\cellx9024 \plain \pard\intbl\sl260 \fs20 Revision 1.1\cell \plain \intbl\cell \plain \pard\intbl\sl260 \fs20 Revised by: David Edelsohn, IBM Research\cell \row \trowd\trql \clvertalt\cellx9024 \plain \intbl\cell \row \trowd\trql \clvertalt\cellx3008\clvertalt\cellx6016\clvertalt\cellx9024 \plain \pard\intbl\sl260 \fs20 Revision 1.2\cell \plain \intbl\cell \plain \pard\intbl\sl260 \fs20 Revised by: Torbjorn Granlund, Swox AB\cell \row \trowd\trql \clvertalt\cellx9024 \plain \intbl\cell \row \trowd\trql \clvertalt\cellx3008\clvertalt\cellx6016\clvertalt\cellx9024 \plain \pard\intbl\sl260 \fs20 Revision 1.3\cell \plain \intbl\cell \plain \pard\intbl\sl260 \fs20 Revised by: David Edelsohn and Mark Mendell, IBM\cell \row \trowd\trql \clvertalt\cellx9024 \plain \intbl\cell \row \trowd\trql \clvertalt\cellx3008\clvertalt\cellx6016\clvertalt\cellx9024 \plain \pard\intbl\sl260 \fs20 Revision 1.4\cell \plain \intbl\cell \plain \pard\intbl\sl260 \fs20 Revised by: Alan Modra, IBM\cell \row \trowd\trql \clvertalt\cellx9024 \plain \intbl\cell \row \trowd\trql \clvertalt\cellx3008\clvertalt\cellx6016\clvertalt\cellx9024 \plain \pard\intbl\sl260 \fs20 Revision 1.4.1\cell \plain \intbl\cell \plain \pard\intbl\sl260 \fs20 Revised by: Kristin Thomas, IBM\cell \row \trowd\trql \clvertalt\cellx9024 \plain \intbl\cell \row \trowd\trql \clvertalt\cellx3008\clvertalt\cellx6016\clvertalt\cellx9024 \plain \pard\intbl\sl260 \fs20 Revision 1.5\cell \plain \intbl\cell \plain \pard\intbl\sl260 \fs20 Revised by: Alan Modra, IBM\cell \row \trowd\trql \clvertalt\cellx9024 \plain \intbl\cell \row \trowd\trql \clvertalt\cellx3008\clvertalt\cellx6016\clvertalt\cellx9024 \plain \pard\intbl\sl260 \fs20 Revision 1.6\cell \plain \intbl\cell \plain \pard\intbl\sl260 \fs20 Revised by: Alan Modra, IBM\cell \row \trowd\trql \clvertalt\cellx9024 \plain \intbl\cell \row \trowd\trql \clvertalt\cellx3008\clvertalt\cellx6016\clvertalt\cellx9024 \plain \pard\intbl\sl260 \fs20 Revision 1.7\cell \plain \intbl\cell \plain \pard\intbl\sl260 \fs20 Revised by: Alan Modra, David Edelsohn and Steven Munroe, IBM\cell \row \trowd\trql \clvertalt\cellx9024 \plain \intbl\cell \row \pard\plain\sl-1\hyphpar0\par\sect\sectd\plain\pgwsxn11905\pghsxn16837\marglsxn1440\margrsxn1440\margtsxn1440\margbsxn1920\headery0\footery0\pgnlcrm{\headerl\pard\sl-240\sb770\sa430\plain\tqc\tx4512\tqr\tx9025 {}\tab {}\tab {}\par}{\footerl\pard\sl-240\sb770\sa910\plain\tqc\tx4512\tqr\tx9025 {}\tab {}\tab {\i\fs20 \chpgn }\par}{\headerr\pard\sl-240\sb770\sa430\plain\tqc\tx4512\tqr\tx9025 {}\tab {}\tab {}\par}{\footerr\pard\sl-240\sb770\sa910\plain\tqc\tx4512\tqr\tx9025 {}\tab {}\tab {\i\fs20 \chpgn }\par}\pard\sb311\s1\sl539 \b\fs41 Table of Contents\keepn\hyphpar0\par\pard\sb83\li480\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_TOCINTRO}{\fldrslt \fs20 1. Introduction}}\fs20 \tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_TOCINTRO}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_TOCINTRO}{\fldrslt 000}}}}\keepn\hyphpar0\par\pard\sb48\li960\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_HOWTO}{\fldrslt \b0 1.1. How to Use the 64-bit PowerPC ELF ABI Supplement}}\b0 \tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_HOWTO}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_HOWTO}{\fldrslt 000}}}}\hyphpar0\par\pard\sb48\li480\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_INSTALL}{\fldrslt \b 2. Software Installation}}\b \tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_INSTALL}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_INSTALL}{\fldrslt 000}}}}\keepn\hyphpar0\par\pard\sb48\li960\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _119 }{\fldrslt \b0 2.1. Physical Distribution Media and Formats}}\b0 \tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l _119 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _119}{\fldrslt 000}}}}\hyphpar0\par\pard\sb48\li480\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_LOW_45_LEVEL}{\fldrslt \b 3. Low Level System Information}}\b \tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_LOW_45_LEVEL}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_LOW_45_LEVEL}{\fldrslt 000}}}}\keepn\hyphpar0\par\pard\sb48\li960\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_MACHINE}{\fldrslt \b0 3.1. Machine Interface}}\b0 \tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_MACHINE}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_MACHINE}{\fldrslt 000}}}}\hyphpar0\par\pard\li1440\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_PROCESSOR}{\fldrslt 3.1.1. Processor Architecture}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_PROCESSOR}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_PROCESSOR}{\fldrslt 000}}}}\hyphpar0\par\pard\li1440\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_DATA_45_REP}{\fldrslt 3.1.2. Data Representation}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_DATA_45_REP}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_DATA_45_REP}{\fldrslt 000}}}}\hyphpar0\par\pard\li1440\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_BYTEORDER}{\fldrslt 3.1.3. Byte Ordering}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_BYTEORDER}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_BYTEORDER}{\fldrslt 000}}}}\hyphpar0\par\pard\li1440\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_FUND_45_TYPE}{\fldrslt 3.1.4. Fundamental Types}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_FUND_45_TYPE}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_FUND_45_TYPE}{\fldrslt 000}}}}\hyphpar0\par\pard\li1440\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_PREC}{\fldrslt 3.1.5. Extended Precision}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_PREC}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_PREC}{\fldrslt 000}}}}\hyphpar0\par\pard\li1440\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_AGG_45_UNION}{\fldrslt 3.1.6. Aggregates and Unions}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_AGG_45_UNION}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_AGG_45_UNION}{\fldrslt 000}}}}\hyphpar0\par\pard\li1440\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_BITFIELD}{\fldrslt 3.1.7. Bit-fields}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_BITFIELD}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_BITFIELD}{\fldrslt 000}}}}\hyphpar0\par\pard\li960\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_FUNC_45_CALL}{\fldrslt 3.2. Function Calling Sequence}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_FUNC_45_CALL}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_FUNC_45_CALL}{\fldrslt 000}}}}\hyphpar0\par\pard\li1440\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_REG}{\fldrslt 3.2.1. Registers}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_REG}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_REG}{\fldrslt 000}}}}\hyphpar0\par\pard\li1440\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_STACK}{\fldrslt 3.2.2. The Stack Frame}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_STACK}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_STACK}{\fldrslt 000}}}}\hyphpar0\par\pard\li1440\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_PARAM_45_PASS}{\fldrslt 3.2.3. Parameter Passing}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_PARAM_45_PASS}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_PARAM_45_PASS}{\fldrslt 000}}}}\hyphpar0\par\pard\li1440\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_RETURN_45_VAL}{\fldrslt 3.2.4. Return Values}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_RETURN_45_VAL}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_RETURN_45_VAL}{\fldrslt 000}}}}\hyphpar0\par\pard\li1440\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_FUNC_45_DES}{\fldrslt 3.2.5. Function Descriptors}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_FUNC_45_DES}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_FUNC_45_DES}{\fldrslt 000}}}}\hyphpar0\par\pard\li960\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_TRACEBACK}{\fldrslt 3.3. Traceback Tables}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_TRACEBACK}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_TRACEBACK}{\fldrslt 000}}}}\hyphpar0\par\pard\li1440\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_MAND_45_FIELD}{\fldrslt 3.3.1. Mandatory Fields}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_MAND_45_FIELD}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_MAND_45_FIELD}{\fldrslt 000}}}}\hyphpar0\par\pard\li1440\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_OPT_45_FIELD}{\fldrslt 3.3.2. Optional Fields}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_OPT_45_FIELD}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_OPT_45_FIELD}{\fldrslt 000}}}}\hyphpar0\par\pard\li960\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_PROC_45_INIT}{\fldrslt 3.4. Process Initialization}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_PROC_45_INIT}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_PROC_45_INIT}{\fldrslt 000}}}}\hyphpar0\par\pard\li1440\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_PROC_45_REG}{\fldrslt 3.4.1. Registers}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_PROC_45_REG}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_PROC_45_REG}{\fldrslt 000}}}}\hyphpar0\par\pard\li1440\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_PROC_45_STACK}{\fldrslt 3.4.2. Process Stack}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_PROC_45_STACK}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_PROC_45_STACK}{\fldrslt 000}}}}\hyphpar0\par\pard\li960\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_CODE_45_EX}{\fldrslt 3.5. Coding Examples}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_CODE_45_EX}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_CODE_45_EX}{\fldrslt 000}}}}\hyphpar0\par\pard\li1440\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_MOD_45_OVER}{\fldrslt 3.5.1. Code Model Overview}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_MOD_45_OVER}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_MOD_45_OVER}{\fldrslt 000}}}}\hyphpar0\par\pard\li1440\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_TOC_45_SEC}{\fldrslt 3.5.2. The TOC section}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_TOC_45_SEC}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_TOC_45_SEC}{\fldrslt 000}}}}\hyphpar0\par\pard\li1440\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_TOCALS}{\fldrslt 3.5.3. TOC Assembly Language Syntax}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_TOCALS}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_TOCALS}{\fldrslt 000}}}}\hyphpar0\par\pard\li1440\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_PRO_45_EP}{\fldrslt 3.5.4. Function Prologue and Epilogue}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_PRO_45_EP}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_PRO_45_EP}{\fldrslt 000}}}}\hyphpar0\par\pard\li1440\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_SAVE_45_RES}{\fldrslt 3.5.5. Register Saving and Restoring Functions}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_SAVE_45_RES}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_SAVE_45_RES}{\fldrslt 000}}}}\hyphpar0\par\pard\li1440\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_SAVEREG}{\fldrslt 3.5.6. Saving General Registers Only}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_SAVEREG}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_SAVEREG}{\fldrslt 000}}}}\hyphpar0\par\pard\li1440\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_SAVE_45_FLOAT}{\fldrslt 3.5.7. Saving General Registers and Floating Point Registers}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_SAVE_45_FLOAT}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_SAVE_45_FLOAT}{\fldrslt 000}}}}\hyphpar0\par\pard\li1440\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _662 }{\fldrslt 3.5.8. Saving Floating Point Registers Only}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l _662 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _662}{\fldrslt 000}}}}\hyphpar0\par\pard\li1440\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_SAVE_45_RESTORE}{\fldrslt 3.5.9. Save and Restore Services}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_SAVE_45_RESTORE}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_SAVE_45_RESTORE}{\fldrslt 000}}}}\hyphpar0\par\pard\li1440\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_DATA_45_OBJ}{\fldrslt 3.5.10. Data Objects}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_DATA_45_OBJ}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_DATA_45_OBJ}{\fldrslt 000}}}}\hyphpar0\par\pard\li1440\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_FUNC_45_CALLS}{\fldrslt 3.5.11. Function Calls}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_FUNC_45_CALLS}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_FUNC_45_CALLS}{\fldrslt 000}}}}\hyphpar0\par\pard\li1440\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_BRANCH}{\fldrslt 3.5.12. Branching}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_BRANCH}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_BRANCH}{\fldrslt 000}}}}\hyphpar0\par\pard\li1440\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_DYNAM_45_STACK}{\fldrslt 3.5.13. Dynamic Stack Space Allocation}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_DYNAM_45_STACK}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_DYNAM_45_STACK}{\fldrslt 000}}}}\hyphpar0\par\pard\li960\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_DW_45_DEF}{\fldrslt 3.6. DWARF Definition}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_DW_45_DEF}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_DW_45_DEF}{\fldrslt 000}}}}\hyphpar0\par\pard\li1440\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _766 }{\fldrslt 3.6.1. DWARF Release Number}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l _766 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _766}{\fldrslt 000}}}}\hyphpar0\par\pard\li1440\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_DW_45_REG}{\fldrslt 3.6.2. DWARF Register Number Mapping}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_DW_45_REG}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_DW_45_REG}{\fldrslt 000}}}}\hyphpar0\par\pard\sb48\li480\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_OBJ_45_FILES}{\fldrslt \b 4. Object Files}}\b \tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_OBJ_45_FILES}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_OBJ_45_FILES}{\fldrslt 000}}}}\keepn\hyphpar0\par\pard\sb48\li960\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_ELF_45_HEAD}{\fldrslt \b0 4.1. ELF Header}}\b0 \tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_ELF_45_HEAD}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_ELF_45_HEAD}{\fldrslt 000}}}}\hyphpar0\par\pard\li960\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_SPECIAL}{\fldrslt 4.2. Special Sections}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_SPECIAL}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_SPECIAL}{\fldrslt 000}}}}\hyphpar0\par\pard\li960\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_TOC}{\fldrslt 4.3. TOC}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_TOC}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_TOC}{\fldrslt 000}}}}\hyphpar0\par\pard\li960\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_SYM}{\fldrslt 4.4. Symbol Table}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_SYM}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_SYM}{\fldrslt 000}}}}\hyphpar0\par\pard\li1440\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_SYM_45_VAL}{\fldrslt 4.4.1. Symbol Values}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_SYM_45_VAL}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_SYM_45_VAL}{\fldrslt 000}}}}\hyphpar0\par\pard\li960\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_RELOC}{\fldrslt 4.5. Relocation}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_RELOC}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_RELOC}{\fldrslt 000}}}}\hyphpar0\par\pard\li1440\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_RELOC_45_TYPE}{\fldrslt 4.5.1. Relocation Types}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_RELOC_45_TYPE}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_RELOC_45_TYPE}{\fldrslt 000}}}}\hyphpar0\par\pard\sb48\li480\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_PROG_45_LOAD_45_DL}{\fldrslt \b 5. Program Loading and Dynamic Linking}}\b \tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_PROG_45_LOAD_45_DL}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_PROG_45_LOAD_45_DL}{\fldrslt 000}}}}\keepn\hyphpar0\par\pard\sb48\li960\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_PROG_45_DL}{\fldrslt \b0 5.1. Program Loading}}\b0 \tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_PROG_45_DL}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_PROG_45_DL}{\fldrslt 000}}}}\hyphpar0\par\pard\li1440\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_PROG_45_INT}{\fldrslt 5.1.1. Program Interpreter}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_PROG_45_INT}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_PROG_45_INT}{\fldrslt 000}}}}\hyphpar0\par\pard\li960\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_DYNAM_45_LINK}{\fldrslt 5.2. Dynamic Linking}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_DYNAM_45_LINK}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_DYNAM_45_LINK}{\fldrslt 000}}}}\hyphpar0\par\pard\li1440\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_DYNAM_45_SECT}{\fldrslt 5.2.1. Dynamic Section}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_DYNAM_45_SECT}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_DYNAM_45_SECT}{\fldrslt 000}}}}\hyphpar0\par\pard\li1440\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_GLOBAL}{\fldrslt 5.2.2. Global Offset Table}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_GLOBAL}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_GLOBAL}{\fldrslt 000}}}}\hyphpar0\par\pard\li1440\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_FUNC_45_ADDRESS}{\fldrslt 5.2.3. Function Addresses}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_FUNC_45_ADDRESS}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_FUNC_45_ADDRESS}{\fldrslt 000}}}}\hyphpar0\par\pard\li1440\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_PROC_45_LINK}{\fldrslt 5.2.4. Procedure Linkage Table}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_PROC_45_LINK}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_PROC_45_LINK}{\fldrslt 000}}}}\hyphpar0\par\pard\sb48\li480\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_LIB}{\fldrslt \b 6. Libraries}}\b \tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_LIB}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_LIB}{\fldrslt 000}}}}\keepn\hyphpar0\par\pard\sb48\li480\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_GFDL}{\fldrslt A. GNU Free Documentation License}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_GFDL}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_GFDL}{\fldrslt 000}}}}\keepn\hyphpar0\par\pard\sb48\li960\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_GFDL_45_0}{\fldrslt \b0 A.1. PREAMBLE}}\b0 \tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_GFDL_45_0}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_GFDL_45_0}{\fldrslt 000}}}}\hyphpar0\par\pard\li960\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_GFDL_45_1}{\fldrslt A.2. APPLICABILITY AND DEFINITIONS}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_GFDL_45_1}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_GFDL_45_1}{\fldrslt 000}}}}\hyphpar0\par\pard\li960\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_GFDL_45_2}{\fldrslt A.3. VERBATIM COPYING}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_GFDL_45_2}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_GFDL_45_2}{\fldrslt 000}}}}\hyphpar0\par\pard\li960\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_GFDL_45_3}{\fldrslt A.4. COPYING IN QUANTITY}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_GFDL_45_3}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_GFDL_45_3}{\fldrslt 000}}}}\hyphpar0\par\pard\li960\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_GFDL_45_4}{\fldrslt A.5. MODIFICATIONS}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_GFDL_45_4}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_GFDL_45_4}{\fldrslt 000}}}}\hyphpar0\par\pard\li960\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_GFDL_45_5}{\fldrslt A.6. COMBINING DOCUMENTS}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_GFDL_45_5}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_GFDL_45_5}{\fldrslt 000}}}}\hyphpar0\par\pard\li960\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_GFDL_45_6}{\fldrslt A.7. COLLECTIONS OF DOCUMENTS}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_GFDL_45_6}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_GFDL_45_6}{\fldrslt 000}}}}\hyphpar0\par\pard\li960\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_GFDL_45_7}{\fldrslt A.8. AGGREGATION WITH INDEPENDENT WORKS}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_GFDL_45_7}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_GFDL_45_7}{\fldrslt 000}}}}\hyphpar0\par\pard\li960\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_GFDL_45_8}{\fldrslt A.9. TRANSLATION}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_GFDL_45_8}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_GFDL_45_8}{\fldrslt 000}}}}\hyphpar0\par\pard\li960\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_GFDL_45_9}{\fldrslt A.10. TERMINATION}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_GFDL_45_9}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_GFDL_45_9}{\fldrslt 000}}}}\hyphpar0\par\pard\li960\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_GFDL_45_10}{\fldrslt A.11. FUTURE REVISIONS OF THIS LICENSE}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_GFDL_45_10}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_GFDL_45_10}{\fldrslt 000}}}}\hyphpar0\par\pard\li960\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_GFDL_45_11}{\fldrslt A.12. How to use this License for your documents}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l ID_GFDL_45_11}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_GFDL_45_11}{\fldrslt 000}}}}\hyphpar0\par\sect\sectd\plain\pgwsxn11905\pghsxn16837\marglsxn1440\margrsxn1440\margtsxn1440\margbsxn1920\headery0\footery0\pgnlcrm{\headerl\pard\sl-240\sb770\sa430\plain\tqc\tx4512\tqr\tx9025 {}\tab {}\tab {}\par}{\footerl\pard\sl-240\sb770\sa910\plain\tqc\tx4512\tqr\tx9025 {}\tab {}\tab {\i\fs20 \chpgn }\par}{\headerr\pard\sl-240\sb770\sa430\plain\tqc\tx4512\tqr\tx9025 {}\tab {}\tab {}\par}{\footerr\pard\sl-240\sb770\sa910\plain\tqc\tx4512\tqr\tx9025 {}\tab {}\tab {\i\fs20 \chpgn }\par}\pard\sb311\s1\sl539 \b\fs41 List of Figures\keepn\hyphpar0\par\pard\sb83\li480\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _145 }{\fldrslt \b0\fs20 3-1. Bit and Byte Numbering in Halfwords}}\b0\fs20 \tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l _145 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _145}{\fldrslt 000}}}}\hyphpar0\par\pard\li480\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _148 }{\fldrslt 3-2. Bit and Byte Numbering in Words}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l _148 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _148}{\fldrslt 000}}}}\hyphpar0\par\pard\li480\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _151 }{\fldrslt 3-3. Bit and Byte Numbering in Doublewords}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l _151 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _151}{\fldrslt 000}}}}\hyphpar0\par\pard\li480\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _154 }{\fldrslt 3-4. Bit and Byte Numbering in Quadwords}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l _154 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _154}{\fldrslt 000}}}}\hyphpar0\par\pard\li480\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _193 }{\fldrslt 3-5. Structure Smaller Than a Word}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l _193 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _193}{\fldrslt 000}}}}\hyphpar0\par\pard\li480\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _198 }{\fldrslt 3-6. No Padding}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l _198 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _198}{\fldrslt 000}}}}\hyphpar0\par\pard\li480\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _203 }{\fldrslt 3-7. Internal Padding}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l _203 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _203}{\fldrslt 000}}}}\hyphpar0\par\pard\li480\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _208 }{\fldrslt 3-8. Internal and Tail Padding}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l _208 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _208}{\fldrslt 000}}}}\hyphpar0\par\pard\li480\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _213 }{\fldrslt 3-9. Union Allocation}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l _213 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _213}{\fldrslt 000}}}}\hyphpar0\par\pard\li480\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _243 }{\fldrslt 3-10. Bit Numbering}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l _243 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _243}{\fldrslt 000}}}}\hyphpar0\par\pard\li480\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _246 }{\fldrslt 3-11. Bit-field Allocation}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l _246 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _246}{\fldrslt 000}}}}\hyphpar0\par\pard\li480\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _251 }{\fldrslt 3-12. Boundary Alignment}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l _251 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _251}{\fldrslt 000}}}}\hyphpar0\par\pard\li480\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _256 }{\fldrslt 3-13. Doubleword Boundary Alignment}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l _256 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _256}{\fldrslt 000}}}}\hyphpar0\par\pard\li480\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _261 }{\fldrslt 3-14. Storage Unit Sharing}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l _261 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _261}{\fldrslt 000}}}}\hyphpar0\par\pard\li480\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _266 }{\fldrslt 3-15. Union Allocation}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l _266 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _266}{\fldrslt 000}}}}\hyphpar0\par\pard\li480\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _271 }{\fldrslt 3-16. Unnamed bit-fields}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l _271 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _271}{\fldrslt 000}}}}\hyphpar0\par\pard\li480\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _324 }{\fldrslt 3-17. Stack Frame Organiztion}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l _324 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _324}{\fldrslt 000}}}}\hyphpar0\par\pard\li480\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _409 }{\fldrslt 3-18. Parameter Passing}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l _409 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _409}{\fldrslt 000}}}}\hyphpar0\par\pard\li480\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _873 }{\fldrslt 4-1. Relocation Table}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l _873 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _873}{\fldrslt 000}}}}\hyphpar0\par\pard\li480\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _940 }{\fldrslt 5-1. Virtual Address}}\tqr\tldot\tx9025\tab {\field{\*\fldinst   HYPERLINK  \\l _940 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _940}{\fldrslt 000}}}}\hyphpar0\par\sect\sectd\plain\pgwsxn11905\pghsxn16837\marglsxn1440\margrsxn1440\margtsxn1440\margbsxn1920\headery0\footery0\pgndec\pgnrestart\titlepg{\headerf\pard\sl-240\sb770\sa430\plain\tqc\tx4512\tqr\tx9025 {}\tab {}\tab {}\par}{\footerf\pard\sl-240\sb770\sa910\plain\tqc\tx4512\tqr\tx9025 {}\tab {}\tab {\i\fs20 \chpgn }\par}{\headerl\pard\sl-240\sb770\sa430\plain\tqc\tx4512\tqr\tx9025 {}\tab {}\tab {\i\fs20 Chapter 1. Introduction}\par}{\footerl\pard\sl-240\sb770\sa910\plain\tqc\tx4512\tqr\tx9025 {}\tab {}\tab {\i\fs20 \chpgn }\par}{\headerr\pard\sl-240\sb770\sa430\plain\tqc\tx4512\tqr\tx9025 {}\tab {}\tab {\i\fs20 Chapter 1. Introduction}\par}{\footerr\pard\sl-240\sb770\sa910\plain\tqc\tx4512\tqr\tx9025 {}\tab {}\tab {\i\fs20 \chpgn }\par}\pard\sb311\s1\sl539 {\*\bkmkstart ID_TOCINTRO}{\*\bkmkend ID_TOCINTRO}\b\fs41 Chapter 1. Introduction\keepn\hyphpar0\par\pard\sb400\sl260 \b0\fs20\lang1033 ELF defines a linking interface for compiled application programs. ELF is described in two parts. The first part is the generic System V ABI. The second part is a processor specific supplement. \hyphpar0\par\pard\sb400\sl260 This document is the processor specific supplement for use with ELF on 64-bit PowerPC\'ae processor systems. \hyphpar0\par\pard\sb400\sl260 This document is not a complete System V Application Binary Interface Supplement, because it does not define any library interfaces. \hyphpar0\par\pard\sb400\sl260 In the 64-bit PowerPC Architecture\'99, a processor can run in either of two modes: big-endian mode or little-endian mode. (See {\field{\*\fldinst   HYPERLINK  \\l ID_BYTEORDER}{\fldrslt Section 3.1.3}}.) Accordingly, this ABI specification really defines two binary interfaces, a big-endian ABI and a little-endian ABI. Programs and (in general) data produced by programs that run on an implementation of the big-endian interface are not portable to an implementation of the little-endian interface, and vice versa. The 64-bit PowerPC ELF ABI is not the same as the 32-bit PowerPC ELF ABI, nor is it a simple extension. A system which supports the 64-bit PowerPC ELF ABI may, but need not, support the 32-bit PowerPC ELF ABI. \hyphpar0\par\pard\sb400\sl260 The \i 64-bit PowerPC ELF ABI\i0  is intended to use the same structure layout and calling convention rules as the 64-bit PowerOpen ABI. \hyphpar0\par\pard\sb259\s2\sl449 {\*\bkmkstart ID_HOWTO}{\*\bkmkend ID_HOWTO}\b\fs34\lang1024 1.1. How to Use the 64-bit PowerPC ELF ABI Supplement\keepn\hyphpar0\par\pard\sb400\sl260 \b0\fs20\lang1033 While the generic \i System V ABI\i0  is the prime reference document, this document contains 64-bit PowerPC processor-specific implementation details, some of which supersedes information in the generic ABI. \hyphpar0\par\pard\sb400\sl260 As with the System V ABI, this document refers to other publicly available documents, especially the book titled \i IBM PowerPC User Instruction Set Architecture\i0 , all of which should be considered part of this \i 64-bit PowerPC Processor ABI Supplement\i0  and just as binding as the requirements and data it explicitly includes. \hyphpar0\par\pard\sb400\sl260 The following documents may be of interest to the reader of this specification: \hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16\lang1024 \'95\tab \i\fs20 System V Interface Definition\i0 , Issue 3.\hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \i\fs20 The PowerPC Architecture: A Specification for A New Family of RISC Processors\i0 . International Business Machines (IBM). San Francisco: Morgan Kaufmann, 1994.\hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \i\fs20 DWARF Debugging Information Format, Revision: Version 2.0.0 \i0 , July 27, 1993. UNIX International, Program Languages SIG.\hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \i\fs20 The [32-bit] PowerPC Processor Supplement\i0 , Sun Microsystems, 1995.\hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \i\fs20 The [32-bit] AltiVec Technology Programming Interface Manual\i0 , Motorola, 1999.\hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \i\fs20 The 64-bit AIX ABI\hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \i0\fs16 \'95\tab \i\fs20 The PowerOpen ABI\hyphpar0\par\sect\sectd\plain\pgwsxn11905\pghsxn16837\marglsxn1440\margrsxn1440\margtsxn1440\margbsxn1920\headery0\footery0\pgndec\titlepg{\headerf\pard\sl-240\sb770\sa430\plain\tqc\tx4512\tqr\tx9025 {}\tab {}\tab {}\par}{\footerf\pard\sl-240\sb770\sa910\plain\tqc\tx4512\tqr\tx9025 {}\tab {}\tab {\i\fs20 \chpgn }\par}{\headerl\pard\sl-240\sb770\sa430\plain\tqc\tx4512\tqr\tx9025 {}\tab {}\tab {\i\fs20 Chapter 2. Software Installation}\par}{\footerl\pard\sl-240\sb770\sa910\plain\tqc\tx4512\tqr\tx9025 {}\tab {}\tab {\i\fs20 \chpgn }\par}{\headerr\pard\sl-240\sb770\sa430\plain\tqc\tx4512\tqr\tx9025 {}\tab {}\tab {\i\fs20 Chapter 2. Software Installation}\par}{\footerr\pard\sl-240\sb770\sa910\plain\tqc\tx4512\tqr\tx9025 {}\tab {}\tab {\i\fs20 \chpgn }\par}\pard\sb311\s1\sl539 {\*\bkmkstart ID_INSTALL}{\*\bkmkend ID_INSTALL}\b\fs41 Chapter 2. Software Installation\keepn\hyphpar0\par\pard\sb259\s2\sl449 {\*\bkmkstart _119}{\*\bkmkend _119}\fs34 2.1. Physical Distribution Media and Formats\keepn\hyphpar0\par\pard\sb400\sl260 \b0\fs20\lang1033 This document does not specify any physical distribution media or formats. Any agreed upon distribution media may be used.\hyphpar0\par\sect\sectd\plain\pgwsxn11905\pghsxn16837\marglsxn1440\margrsxn1440\margtsxn1440\margbsxn1920\headery0\footery0\pgndec\titlepg{\headerf\pard\sl-240\sb770\sa430\plain\tqc\tx4512\tqr\tx9025 {}\tab {}\tab {}\par}{\footerf\pard\sl-240\sb770\sa910\plain\tqc\tx4512\tqr\tx9025 {}\tab {}\tab {\i\fs20 \chpgn }\par}{\headerl\pard\sl-240\sb770\sa430\plain\tqc\tx4512\tqr\tx9025 {}\tab {}\tab {\i\fs20 Chapter 3. Low Level System Information}\par}{\footerl\pard\sl-240\sb770\sa910\plain\tqc\tx4512\tqr\tx9025 {}\tab {}\tab {\i\fs20 \chpgn }\par}{\headerr\pard\sl-240\sb770\sa430\plain\tqc\tx4512\tqr\tx9025 {}\tab {}\tab {\i\fs20 Chapter 3. Low Level System Information}\par}{\footerr\pard\sl-240\sb770\sa910\plain\tqc\tx4512\tqr\tx9025 {}\tab {}\tab {\i\fs20 \chpgn }\par}\pard\sb311\s1\sl539 {\*\bkmkstart ID_LOW_45_LEVEL}{\*\bkmkend ID_LOW_45_LEVEL}\b\fs41 Chapter 3. Low Level System Information\keepn\hyphpar0\par\pard\sb400\s2\sl449 {\*\bkmkstart ID_MACHINE}{\*\bkmkend ID_MACHINE}\fs34 3.1. Machine Interface\keepn\hyphpar0\par\pard\sb400\s3\sl374 {\*\bkmkstart ID_PROCESSOR}{\*\bkmkend ID_PROCESSOR}\fs28 3.1.1. Processor Architecture\keepn\hyphpar0\par\pard\sb400\sl260 \b0\i\fs20\lang1033 The PowerPC Architecture: A Specification for A New Family of RISC Processors \i0 defines the 64-bit PowerPC Architecture. Programs intended to execute directly on the processor use the 64-bit PowerPC instruction set, and the instruction encodings and semantics of the architecture. \hyphpar0\par\pard\sb400\sl260 An application program can assume that all instructions defined by the architecture that are neither privileged nor optional exist and work as documented. However, the "Fixed-Point Move Assist" instructions are not available in little-endian implementations. In little-endian mode, these instructions always cause alignment exceptions in the 64-bit PowerPC Architecture; in big-endian mode they are usually slower than a sequence of other instructions that have the same effect. \hyphpar0\par\pard\sb400\sl260 To be ABI-conforming, the processor must implement the instructions of the architecture, perform the specified operations, and produce the expected results. The ABI neither places performance constraints on systems nor specifies what instructions must be implemented in hardware. A software emulation of the architecture could conform to the ABI. \hyphpar0\par\pard\sb400\sl260 Some processors might support the optional instructions in the 64-bit PowerPC Architecture, or additional non-64-bit-PowerPC instructions or capabilities. Programs that use those instructions or capabilities do not conform to the 64-bit PowerPC ABI; executing them on machines without the additional capabilities gives undefined behavior. \hyphpar0\par\pard\sb216\s3\sl374 {\*\bkmkstart ID_DATA_45_REP}{\*\bkmkend ID_DATA_45_REP}\b\fs28\lang1024 3.1.2. Data Representation\keepn\hyphpar0\par\pard\sb400\s3\sl374 {\*\bkmkstart ID_BYTEORDER}{\*\bkmkend ID_BYTEORDER}3.1.3. Byte Ordering\keepn\hyphpar0\par\pard\sb400\sl260 \b0\fs20\lang1033 The architecture defines an 8-bit byte, a 16-bit halfword, a 32-bit word, a 64-bit doubleword, and a 128-bit quadword. Byte ordering defines how the bytes that make up halfwords, words, doublewords, and quadwords are ordered in memory. Most significant byte (MSB) byte ordering, or "big-endian" as it is sometimes called, means that the most significant byte is located in the lowest addressed byte position in a storage unit (byte 0). Least significant byte (LSB) byte ordering, or "little-endian" as it is sometimes called, means that the least significant byte is located in the lowest addressed byte position in a storage unit (byte 0). \hyphpar0\par\pard\sb400\sl260 The 64-bit PowerPC processor family supports either big-endian or little-endian byte ordering. This specification defines two ABIs, one for each type of byte ordering. An implementation must state which type of byte ordering it supports. The following figures illustrate the conventions for bit and byte numbering within various width storage units. These conventions apply to both integer data and floating-point data, where the most significant byte of a floating-point value holds the sign and at least the start of the exponent. The figures show little-endian byte numbers in the upper right corners, big-endian byte numbers in the upper left corners, and bit numbers in the lower corners. \hyphpar0\par\pard\sb200\li400\sl234 \b\fs18\lang1024 Note: \b0\f1 In the 64-bit PowerPC Architecture documentation, the bits in a word are numbered from left to right (MSB to LSB), and figures usually show only the big-endian byte order.\hyphpar0\par\pard\sb200\sl260 {\*\bkmkstart _145}{\*\bkmkend _145}\b\fs20\f0 Figure 3-1. Bit and Byte Numbering in Halfwords\keepn\hyphpar0\par\pard\sb100\sl234 \b0\fs18\f2 +-------+-------+\sa0\par\fi0\sb0
|0     1|1     0|\sa0\par\fi0\sb0
|  msb  |  lsb  |\sa0\par\fi0\sb0
|0     7| 8   15|\sa0\par\fi0\sb0
+-------+-------+\hyphpar0\par\pard\sb200\sl260 {\*\bkmkstart _148}{\*\bkmkend _148}\b\fs20\f0 Figure 3-2. Bit and Byte Numbering in Words\keepn\hyphpar0\par\pard\sb100\sl234 \b0\fs18\f2 +-------+-------+-------+-------+\sa0\par\fi0\sb0
|0     3|1     2|2     1|3     0|\sa0\par\fi0\sb0
|  msb  |       |       |  lsb  |\sa0\par\fi0\sb0
|0     7|8    15|16   23|24   31|\sa0\par\fi0\sb0
+-------+-------+-------+-------+\hyphpar0\par\pard\sb200\sl260 {\*\bkmkstart _151}{\*\bkmkend _151}\b\fs20\f0 Figure 3-3. Bit and Byte Numbering in Doublewords\keepn\hyphpar0\par\pard\sb100\sl234 \b0\fs18\f2 +-------+-------+-------+-------+\sa0\par\fi0\sb0
|0     7|1     6|2     5|3     4|\sa0\par\fi0\sb0
|  msb  |       |       |       |\sa0\par\fi0\sb0
|0     7|8    15|16   23|24   31|\sa0\par\fi0\sb0
+-------+-------+-------+-------+\sa0\par\fi0\sb0
|4     3|5     2|6     1|7     0|\sa0\par\fi0\sb0
|       |       |       |  lsb  |\sa0\par\fi0\sb0
|32   39|40   47|48   55|56   63|\sa0\par\fi0\sb0
+-------+-------+-------+-------+\hyphpar0\par\pard\sb200\sl260 {\*\bkmkstart _154}{\*\bkmkend _154}\b\fs20\f0 Figure 3-4. Bit and Byte Numbering in Quadwords\keepn\hyphpar0\par\pard\sb100\sl234 \b0\fs18\f2 +-------+-------+-------+-------+\sa0\par\fi0\sb0
|0    15|1    14|2    13|3    12|\sa0\par\fi0\sb0
|  msb  |       |       |       |\sa0\par\fi0\sb0
|0     7|8    15|16   23|24   31|\sa0\par\fi0\sb0
+-------+-------+-------+-------+\sa0\par\fi0\sb0
|4    11|5    10|6     9|7     8|\sa0\par\fi0\sb0
|       |       |       |       |\sa0\par\fi0\sb0
|32   39|40   47|48   55|56   63|\sa0\par\fi0\sb0
+-------+-------+-------+-------+\sa0\par\fi0\sb0
|8     7|9     6|10    5|11    4|\sa0\par\fi0\sb0
|       |       |       |       |\sa0\par\fi0\sb0
|64   71|72   79|80   87|88   95|\sa0\par\fi0\sb0
+-------+-------+-------+-------+\sa0\par\fi0\sb0
|12    3|13    2|14    1|15    0|\sa0\par\fi0\sb0
|       |       |       |  lsb  |\sa0\par\fi0\sb0
|96  103|104 111|112 119|120 127|\sa0\par\fi0\sb0
+-------+-------+-------+-------+\hyphpar0\par\pard\sb216\s3\sl374 {\*\bkmkstart ID_FUND_45_TYPE}{\*\bkmkend ID_FUND_45_TYPE}\b\fs28\f0 3.1.4. Fundamental Types\keepn\hyphpar0\par\pard\sb400\sl260 \b0\fs20\lang1033 The following table shows how ANSI C scalar types correspond to those of the 64-bit PowerPC processor. For all types, a NULL pointer has the value zero. The alignment column specifies the required alignment of a field of the given type within a struct. Variables may be more strictly aligned than is shown in the table, but fields in a struct must follow the alignment specified in order to ensure consistent struct mapping. \hyphpar0\par\pard\sb200\sl234 \fs18\lang1024\f2 Type         ANSI C          sizeof    Alignment    PowerPC\sa0\par\fi0\sb0
-------------------------------------------------------------------------\sa0\par\fi0\sb0
boolean      _bool           1         byte         unsigned byte\sa0\par\fi0\sb0
-------------------------------------------------------------------------\sa0\par\fi0\sb0
Character    char            1         byte         unsigned byte\sa0\par\fi0\sb0
             unsigned char\sa0\par\fi0\sb0
             ------------------------------------------------------------\sa0\par\fi0\sb0
             signed char     1         byte         signed byte\sa0\par\fi0\sb0
             ------------------------------------------------------------\sa0\par\fi0\sb0
             short           2         halfword     signed halfword\sa0\par\fi0\sb0
             signed short\sa0\par\fi0\sb0
             ------------------------------------------------------------\sa0\par\fi0\sb0
             unsigned short  2         halfword     unsigned halfword\sa0\par\fi0\sb0
-------------------------------------------------------------------------\sa0\par\fi0\sb0
Integral     int             4         word         signed word\sa0\par\fi0\sb0
             signed int\sa0\par\fi0\sb0
             enum\sa0\par\fi0\sb0
             ------------------------------------------------------------\sa0\par\fi0\sb0
             unsigned int    4         word         unsigned word\sa0\par\fi0\sb0
             ------------------------------------------------------------\sa0\par\fi0\sb0
             long int        8         doubleword   signed doubleword\sa0\par\fi0\sb0
             signed long\sa0\par\fi0\sb0
             long long\sa0\par\fi0\sb0
             ------------------------------------------------------------\sa0\par\fi0\sb0
             unsigned long   8         doubleword   unsigned doubleword\sa0\par\fi0\sb0
             unsigned long long\sa0\par\fi0\sb0
             ------------------------------------------------------------\sa0\par\fi0\sb0
             __int128_t     16         quadword     signed quadword\sa0\par\fi0\sb0
             ------------------------------------------------------------\sa0\par\fi0\sb0
             __uint128_t    16         quadword     unsigned quadword\sa0\par\fi0\sb0
-------------------------------------------------------------------------\sa0\par\fi0\sb0
Pointer      any *           8         doubleword   unsigned doubleword\sa0\par\fi0\sb0
             any (*) ()\sa0\par\fi0\sb0
-------------------------------------------------------------------------\sa0\par\fi0\sb0
Floating     float           4         word         single precision\sa0\par\fi0\sb0
             ------------------------------------------------------------\sa0\par\fi0\sb0
             double          8         doubleword   double precision\sa0\par\fi0\sb0
             ------------------------------------------------------------\sa0\par\fi0\sb0
             long double     16        quadword     extended precision\sa0\par\fi0\sb0
-------------------------------------------------------------------------\sa0\par\fi0\sb0
vector       16*char         16        quadword     vector of signed bytes\sa0\par\fi0\sb0
             ------------------------------------------------------------\sa0\par\fi0\sb0
             16*unsigned     16        quadword     vector of unsigned\sa0\par\fi0\sb0
             char                                   bytes\sa0\par\fi0\sb0
             ------------------------------------------------------------\sa0\par\fi0\sb0
             8*short         16        quadword     vector of signed\sa0\par\fi0\sb0
                                                    halfwords\sa0\par\fi0\sb0
             ------------------------------------------------------------\sa0\par\fi0\sb0
             8*unsigned      16        quadword     vector of unsigned\sa0\par\fi0\sb0
             short                                  halfwords\sa0\par\fi0\sb0
             ------------------------------------------------------------\sa0\par\fi0\sb0
             4*int           16        quadword     vector of signed\sa0\par\fi0\sb0
                                                    words\sa0\par\fi0\sb0
             ------------------------------------------------------------\sa0\par\fi0\sb0
             4*unsigned int  16        quadword     vector of unsigned\sa0\par\fi0\sb0
                                                    words\sa0\par\fi0\sb0
             ------------------------------------------------------------\sa0\par\fi0\sb0
             4*float         16        quadword     vector of floats\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
                                \hyphpar0\par\pard\sb216\s3\sl374 {\*\bkmkstart ID_PREC}{\*\bkmkend ID_PREC}\b\fs28\f0 3.1.5. Extended Precision\keepn\hyphpar0\par\pard\sb400\sl260 \b0\fs20\lang1033 "Extended precision" is the IBM AIX\'ae 128-bit long double format composed of two double-precision numbers with different magnitudes that do not overlap. The high-order double-precision value (the one that comes first in storage) must have the larger magnitude. The value of the extended-precision number is the sum of the two double-precision values. \hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 Extended precision provides the same range of double precision (about 10**(-308) to 10**308) but more precision (a variable amount, about 31 decimal digits or more).\hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 As the absolute value of the magnitude decreases (near the denormal range), the precision available in the low-order double also decreases.\hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 When the value represented is in the denormal range, this representation provides no more precision than 64-bit (double) floating point.\hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 The actual number of bits of percision can vary. If the low-order part is much less then 1 ULP of the high-order part, significant bits (either all 0's or all 1's) are implied between the significands of high-order and low-order numbers. Some algorithms that rely on having a fixed number of bits in the significand can fail when using "Extended precision".\hyphpar0\par\pard\sb100\sl260  \hyphpar0\par\pard\sb400\sl260  This "Extended precision" differs from the IEEE 754 Standard in the following ways: \hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16\lang1024 \'95\tab \fs20 The software support is restricted to round-to-nearest mode. Programs that use extended precision must ensure that this rounding mode is in effect when extended-precision calculations are performed.\hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 Does not fully support the IEEE special numbers NaN and INF. These values are encoded in the high-order double value only. The low-order value is not significant.\hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 Does not support the IEEE status flags for overflow, underflow, and other conditions. These flag have no meaning in this format.\hyphpar0\par\pard\sb216\s3\sl374 {\*\bkmkstart ID_AGG_45_UNION}{\*\bkmkend ID_AGG_45_UNION}\b\fs28 3.1.6. Aggregates and Unions\keepn\hyphpar0\par\pard\sb400\sl260 \b0\fs20\lang1033 Aggregates (structures and arrays) and unions assume the alignment of their most strictly aligned component, that is, the component with the largest alignment. The size of any object, including aggregates and unions, is always a multiple of the alignment of the object. An array uses the same alignment as its elements. Structure and union objects may require padding to meet size and alignment constraints: \hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16\lang1024 \'95\tab \fs20 An entire structure or union object is aligned on the same boundary as its most strictly aligned member.\hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 Each member is assigned to the lowest available offset with the appropriate alignment. This may require internal padding, depending on the previous member.\hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 If necessary, a structure's size is increased to make it a multiple of the structure's alignment. This may require tail padding, depending on the last member.\hyphpar0\par\pard\sb400\sl260 \lang1033 In the following examples, members' byte offsets for little-endian implementations appear in the upper right corners; offsets for big-endian implementations in the upper left corners. \hyphpar0\par\pard\sb200\sl260 {\*\bkmkstart _193}{\*\bkmkend _193}\b\lang1024 Figure 3-5. Structure Smaller Than a Word\keepn\hyphpar0\par\pard\sb100\sl234 \b0\fs18\f2 struct \{\sa0\par\fi0\sb0
  char c;\sa0\par\fi0\sb0
\};\sa0\par\fi0\sb0
                                        \hyphpar0\par\pard\sl234 byte aligned, sizeof is 1\hyphpar0\par\pard\sl234 +-------+\sa0\par\fi0\sb0
|0     0|\sa0\par\fi0\sb0
|   c   |\sa0\par\fi0\sb0
+-------+\hyphpar0\par\pard\sb200\sl260 {\*\bkmkstart _198}{\*\bkmkend _198}\b\fs20\f0 Figure 3-6. No Padding\keepn\hyphpar0\par\pard\sb100\sl234 \b0\fs18\f2 struct \{\sa0\par\fi0\sb0
  char  c;\sa0\par\fi0\sb0
  char  d;\sa0\par\fi0\sb0
  short s;\sa0\par\fi0\sb0
  int   n;\sa0\par\fi0\sb0
\};\sa0\par\fi0\sb0
                                        \hyphpar0\par\pard\sl234 word aligned, sizeof is 8\hyphpar0\par\pard\sl234 little endian:\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
+-------+-------+-------+-------+\sa0\par\fi0\sb0
|              2|      1|      0|\sa0\par\fi0\sb0
|       s       |   d   |   c   |\sa0\par\fi0\sb0
+-------+-------+-------+-------+\sa0\par\fi0\sb0
|                              4|\sa0\par\fi0\sb0
|               n               |\sa0\par\fi0\sb0
+-------+-------+-------+-------+\sa0\par\fi0\sb0
                                        \sa0\par\fi0\sb0
big endian:\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
+-------+-------+-------+-------+\sa0\par\fi0\sb0
|0      |1      |2              |\sa0\par\fi0\sb0
|   c   |   d   |       s       |\sa0\par\fi0\sb0
+-------+-------+-------+-------+\sa0\par\fi0\sb0
|4                              |\sa0\par\fi0\sb0
|               n               |\sa0\par\fi0\sb0
+-------+-------+-------+-------+\sa0\par\fi0\sb0
                                        \hyphpar0\par\pard\sb200\sl260 {\*\bkmkstart _203}{\*\bkmkend _203}\b\fs20\f0 Figure 3-7. Internal Padding\keepn\hyphpar0\par\pard\sb100\sl234 \b0\fs18\f2 struct \{\sa0\par\fi0\sb0
  char  c;\sa0\par\fi0\sb0
  short s;\sa0\par\fi0\sb0
\};\hyphpar0\par\pard\sl234 halfword aligned, sizeof is 4\hyphpar0\par\pard\sl234 little endian:\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
+-------+-------+-------+-------+\sa0\par\fi0\sb0
|              2|      1|      0|\sa0\par\fi0\sb0
|       s       |  pad  |   c   |\sa0\par\fi0\sb0
+-------+-------+-------+-------+\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
big endian:\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
+-------+-------+-------+-------+\sa0\par\fi0\sb0
|0      |1      |2              |\sa0\par\fi0\sb0
|   c   |  pad  |       s       |\sa0\par\fi0\sb0
+-------+-------+-------+-------+\sa0\par\fi0\sb0
                                        \hyphpar0\par\pard\sb200\sl260 {\*\bkmkstart _208}{\*\bkmkend _208}\b\fs20\f0 Figure 3-8. Internal and Tail Padding\keepn\hyphpar0\par\pard\sb100\sl234 \b0\fs18\f2 struct \{\sa0\par\fi0\sb0
 char   c;\sa0\par\fi0\sb0
 double d;\sa0\par\fi0\sb0
 short  s;\sa0\par\fi0\sb0
\};\sa0\par\fi0\sb0
                                                \hyphpar0\par\pard\sl234 doubleword aligned, sizeof is 24\hyphpar0\par\pard\sl234 little endian:\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
+-------+-------+-------+-------+\sa0\par\fi0\sb0
|                      1|      0|\sa0\par\fi0\sb0
|          pad          |   c   |\sa0\par\fi0\sb0
+-------+-------+-------+-------+\sa0\par\fi0\sb0
|                              4|\sa0\par\fi0\sb0
|              pad              |\sa0\par\fi0\sb0
+-------+-------+-------+-------+\sa0\par\fi0\sb0
|                              8|\sa0\par\fi0\sb0
|               d               |\sa0\par\fi0\sb0
+-------+-------+-------+-------+\sa0\par\fi0\sb0
|                             12|\sa0\par\fi0\sb0
|               d               |\sa0\par\fi0\sb0
+-------+-------+-------+-------+\sa0\par\fi0\sb0
|             18|             16|\sa0\par\fi0\sb0
|      pad      |       s       |\sa0\par\fi0\sb0
+-------+-------+-------+-------+\sa0\par\fi0\sb0
|                             20|\sa0\par\fi0\sb0
|              pad              |\sa0\par\fi0\sb0
+-------+-------+-------+-------+\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
big endian:\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
+-------+-------+-------+-------+\sa0\par\fi0\sb0
|0      |1                      |\sa0\par\fi0\sb0
|   c   |          pad          |\sa0\par\fi0\sb0
+-------+-------+-------+-------+\sa0\par\fi0\sb0
|4                              |\sa0\par\fi0\sb0
|              pad              |\sa0\par\fi0\sb0
+-------+-------+-------+-------+\sa0\par\fi0\sb0
|8                              |\sa0\par\fi0\sb0
|               d               |\sa0\par\fi0\sb0
+-------+-------+-------+-------+\sa0\par\fi0\sb0
|12                             |\sa0\par\fi0\sb0
|               d               |\sa0\par\fi0\sb0
+-------+-------+-------+-------+\sa0\par\fi0\sb0
|16             |18             |\sa0\par\fi0\sb0
|       s       |      pad      |\sa0\par\fi0\sb0
+-------+-------+-------+-------+\sa0\par\fi0\sb0
|20                             |\sa0\par\fi0\sb0
|             pad               |\sa0\par\fi0\sb0
+-------+-------+-------+-------+\sa0\par\fi0\sb0
                                                \hyphpar0\par\pard\sb200\sl260 {\*\bkmkstart _213}{\*\bkmkend _213}\b\fs20\f0 Figure 3-9. Union Allocation\keepn\hyphpar0\par\pard\sb100\sl234 \b0\fs18\f2 union \{\sa0\par\fi0\sb0
  char  c;\sa0\par\fi0\sb0
  short s;\sa0\par\fi0\sb0
  int   j;\sa0\par\fi0\sb0
\};\hyphpar0\par\pard\sl234 word aligned, sizeof is 4\hyphpar0\par\pard\sl234 little endian:\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
+-------+-------+-------+-------+\sa0\par\fi0\sb0
|                      1|      0|\sa0\par\fi0\sb0
|          pad          |   c   |\sa0\par\fi0\sb0
+-------+-------+-------+-------+\sa0\par\fi0\sb0
|              2|              0|\sa0\par\fi0\sb0
|      pad      |       s       |\sa0\par\fi0\sb0
+-------+-------+-------+-------+\sa0\par\fi0\sb0
|                              0|\sa0\par\fi0\sb0
|               j               |\sa0\par\fi0\sb0
+-------+-------+-------+-------+\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
big endian:\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
+-------+-------+-------+-------+\sa0\par\fi0\sb0
|0      |1                      |\sa0\par\fi0\sb0
|   c   |          pad          |\sa0\par\fi0\sb0
+-------+-------+-------+-------+\sa0\par\fi0\sb0
|0              |2              |\sa0\par\fi0\sb0
|       s       |      pad      |\sa0\par\fi0\sb0
+-------+-------+-------+-------+\sa0\par\fi0\sb0
|0                              |\sa0\par\fi0\sb0
|               j               |\sa0\par\fi0\sb0
+-------+-------+-------+-------+\sa0\par\fi0\sb0
                                                \hyphpar0\par\pard\sb216\s3\sl374 {\*\bkmkstart ID_BITFIELD}{\*\bkmkend ID_BITFIELD}\b\fs28\f0 3.1.7. Bit-fields\keepn\hyphpar0\par\pard\sb400\sl260 \b0\fs20\lang1033 C struct and union definitions may have "bit-fields," defining integral objects with a specified number of bits. \hyphpar0\par\pard\sb400\sl260 In the following table, a signed range goes from - (2\up8\fs12 (w - 1)\up0\fs20 ) to (2\up8\fs12 (w - 1)\up0\fs20 ) - 1 and an unsigned range goes from 0 to (2\up8\fs12 w\up0\fs20 ) - 1.\hyphpar0\par\pard\sb200\sl234 \fs18\lang1024\f2 Bit-field type        Width (w)          Range\sa0\par\fi0\sb0
-------------------------------------------------\sa0\par\fi0\sb0
signed char           1 to 8             signed\sa0\par\fi0\sb0
char                                     unsigned\sa0\par\fi0\sb0
unsigned char                            unsigned\sa0\par\fi0\sb0
-------------------------------------------------\sa0\par\fi0\sb0
signed short          1 to 16            signed\sa0\par\fi0\sb0
short                                    signed\sa0\par\fi0\sb0
unsigned short                           unsigned\sa0\par\fi0\sb0
-------------------------------------------------\sa0\par\fi0\sb0
signed int            1 to 32            signed\sa0\par\fi0\sb0
int                                      signed\sa0\par\fi0\sb0
unsigned int                             unsigned\sa0\par\fi0\sb0
enum                                     unsigned\sa0\par\fi0\sb0
-------------------------------------------------\sa0\par\fi0\sb0
signed long           1 to 64            signed\sa0\par\fi0\sb0
long                                     signed\sa0\par\fi0\sb0
unsigned long                            unsigned\hyphpar0\par\pard\sb400\sl260 \fs20\lang1033\f0 "Plain" bit-fields (that is, those neither signed nor unsigned) may have either positive or negative values, except in the case of plain char, which is always positive. Bit-fields obey the same size and alignment rules as other structure and union members, with the following additions: \hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16\lang1024 \'95\tab \fs20 Bit-fields are allocated from right to left (least to most significant) on little-endian implementations and from left to right (most to least significant) on big-endian implementations.\hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 Bit-fields are limited to at most 64 bits. Adjacent bit-fields that cross a 64-bit boundary will start a new storage unit.\hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 The alignment of a bit-field is the same as the alignment of the base type of the bit-field. Thus, an int bit-field will have word alignment.\hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 Bit-fields must share a storage unit with other structure and union members (either bit-field or non-bit-field) if and only if there is sufficient space within the storage unit.\hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 Unnamed bit-fields' types do not affect the alignment of a structure or union, although an individual bit-field's member offsets obey the alignment constraints. An unnamed, zero-width bit-field shall prevent any further member, bit-field or other, from residing in the storage unit corresponding to the type of the zero-width bit-field.\hyphpar0\par\pard\sb200\li400\sl234 \b\fs18 Note: \b0\f1 The 64-bit PowerOpen ABI restricts bit-fields to be of type signed int, unsigned int, plain int, long, or unsigned long. This document does not have that restriction.\hyphpar0\par\pard\sb100\li400\sl234 The 32-bit PowerPC Processor Supplement specifies that a bit-field must entirely reside in a storage unit appropriate for its declared type. This document only restricts bit-fields to a 64-bit storage unit.\hyphpar0\par\pard\sb400\sl260 \fs20\lang1033\f0 The following examples show struct and union members' byte offsets in the upper right corners for little-endian implementations, and in the upper left corners for big-endian implementations. Bit numbers appear in the lower corners. \hyphpar0\par\pard\sb200\sl260 {\*\bkmkstart _243}{\*\bkmkend _243}\b\lang1024 Figure 3-10. Bit Numbering\keepn\hyphpar0\par\pard\sb100\sl234 \b0\fs18\f2 0x01020304\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
+-------+-------+-------+-------+\sa0\par\fi0\sb0
|0     3|1     2|2     1|3     0|\sa0\par\fi0\sb0
|  01   |  02   |  03   |  04   |\sa0\par\fi0\sb0
|0     7|8    15|16   23|24   31|\sa0\par\fi0\sb0
+-------+-------+-------+-------+\hyphpar0\par\pard\sb200\sl260 {\*\bkmkstart _246}{\*\bkmkend _246}\b\fs20\f0 Figure 3-11. Bit-field Allocation\keepn\hyphpar0\par\pard\sb100\sl234 \b0\fs18\f2 struct \{\sa0\par\fi0\sb0
  int j : 5;\sa0\par\fi0\sb0
  int k : 6;\sa0\par\fi0\sb0
  int m : 7;\sa0\par\fi0\sb0
\};\hyphpar0\par\pard\sl234 word aligned, sizeof is 4\hyphpar0\par\pard\sl234 little endian:\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
+----------+-------+------+-----+\sa0\par\fi0\sb0
|          |       |      |    0|\sa0\par\fi0\sb0
|    pad   |   m   |  k   |  j  |\sa0\par\fi0\sb0
|0       13|14   20|21  26|27 31|\sa0\par\fi0\sb0
+----------+-------+------+-----+\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
big endian:\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
+-----+------+-------+----------+\sa0\par\fi0\sb0
|0    |      |       |          |\sa0\par\fi0\sb0
|  j  |  k   |   m   |   pad    |\sa0\par\fi0\sb0
|0   4|5   10|11   17|18      31|\sa0\par\fi0\sb0
+-----+------+-------+----------+\hyphpar0\par\pard\sb200\sl260 {\*\bkmkstart _251}{\*\bkmkend _251}\b\fs20\f0 Figure 3-12. Boundary Alignment\keepn\hyphpar0\par\pard\sb100\sl234 \b0\fs18\f2 struct \{\sa0\par\fi0\sb0
  short s : 9;\sa0\par\fi0\sb0
  int   j : 9;\sa0\par\fi0\sb0
  char  c;\sa0\par\fi0\sb0
  short t : 9;\sa0\par\fi0\sb0
  short u : 9;\sa0\par\fi0\sb0
  char  d;\sa0\par\fi0\sb0
\};\hyphpar0\par\pard\sl234 word aligned, sizeof is 8\hyphpar0\par\pard\sl234 little endian:\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
+-------+-----+--------+--------+\sa0\par\fi0\sb0
|      3|     |        |       0|\sa0\par\fi0\sb0
|   c   | pad |   j    |   s    |\sa0\par\fi0\sb0
|0     7|8  13|14    22|23    31|\sa0\par\fi0\sb0
+-------+-----+--------+--------+\sa0\par\fi0\sb0
|      7|     |        |       4|\sa0\par\fi0\sb0
|   d   | pad |   u    |   t    |\sa0\par\fi0\sb0
|0     7|8  13|14    22|23    31|\sa0\par\fi0\sb0
+-------+-----+--------+--------+\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
big endian:\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
+--------+--------+-----+-------+\sa0\par\fi0\sb0
|0       |        |     |3      |\sa0\par\fi0\sb0
|   s    |   j    | pad |   c   |\sa0\par\fi0\sb0
|0      8|9     17|18 23|24   31|\sa0\par\fi0\sb0
+--------+--------+-----+-------+\sa0\par\fi0\sb0
|4       |        |     |7      |\sa0\par\fi0\sb0
|   t    |   u    | pad |   d   |\sa0\par\fi0\sb0
|0      8|9     17|18 23|24   31|\sa0\par\fi0\sb0
+--------+--------+-----+-------+\hyphpar0\par\pard\sb200\sl260 {\*\bkmkstart _256}{\*\bkmkend _256}\b\fs20\f0 Figure 3-13. Doubleword Boundary Alignment\keepn\hyphpar0\par\pard\sb100\sl234 \b0\fs18\f2 struct \{\sa0\par\fi0\sb0
  long i : 56;\sa0\par\fi0\sb0
  int  j : 9:\sa0\par\fi0\sb0
\};\hyphpar0\par\pard\sl234 doubleword aligned, sizeof is 16\hyphpar0\par\pard\sl234 little endian:\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
+-------------------------------+\sa0\par\fi0\sb0
|                              0|\sa0\par\fi0\sb0
|              i                |\sa0\par\fi0\sb0
|0                            31|\sa0\par\fi0\sb0
+-------+-----------------------+\sa0\par\fi0\sb0
|       |                      4|\sa0\par\fi0\sb0
|  pad  |         i             |\sa0\par\fi0\sb0
|32   39|40                   63|\sa0\par\fi0\sb0
+-------+--------------+--------+\sa0\par\fi0\sb0
|                      |       8|\sa0\par\fi0\sb0
|         pad          |   j    |\sa0\par\fi0\sb0
|0                   22|23    31|\sa0\par\fi0\sb0
+----------------------+--------+\sa0\par\fi0\sb0
|                             12|\sa0\par\fi0\sb0
|             pad               |\sa0\par\fi0\sb0
|0                            31|\sa0\par\fi0\sb0
+-------------------------------+\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
big endian:\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
+-------------------------------+\sa0\par\fi0\sb0
|0                              |\sa0\par\fi0\sb0
|              i                |\sa0\par\fi0\sb0
|0                            31|\sa0\par\fi0\sb0
+-----------------------+-------+\sa0\par\fi0\sb0
|4                      |       |\sa0\par\fi0\sb0
|           i           |  pad  |\sa0\par\fi0\sb0
|32                   55|56   63|\sa0\par\fi0\sb0
+--------+--------------+-------+\sa0\par\fi0\sb0
|8       |                      |\sa0\par\fi0\sb0
|   j    |        pad           |\sa0\par\fi0\sb0
|0      8|9                   31|\sa0\par\fi0\sb0
+----------------------+--------+\sa0\par\fi0\sb0
|12                             |\sa0\par\fi0\sb0
|             pad               |\sa0\par\fi0\sb0
|0                            31|\sa0\par\fi0\sb0
+-------------------------------+\hyphpar0\par\pard\sb200\sl260 {\*\bkmkstart _261}{\*\bkmkend _261}\b\fs20\f0 Figure 3-14. Storage Unit Sharing\keepn\hyphpar0\par\pard\sb100\sl234 \b0\fs18\f2 struct \{\sa0\par\fi0\sb0
  char  c;\sa0\par\fi0\sb0
  short s : 8;\sa0\par\fi0\sb0
\};\hyphpar0\par\pard\sl234 halfword aligned, sizeof is 2\hyphpar0\par\pard\sl234 little endian:\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
+-------+-------+\sa0\par\fi0\sb0
|      1|      0|\sa0\par\fi0\sb0
|   s   |   c   |\sa0\par\fi0\sb0
|0     7|8    15|\sa0\par\fi0\sb0
+-------+-------+\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
big endian:\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
+-------+-------+\sa0\par\fi0\sb0
|0      |1      |\sa0\par\fi0\sb0
|   c   |   s   |\sa0\par\fi0\sb0
|0     7|8    15|\sa0\par\fi0\sb0
+-------+-------+\hyphpar0\par\pard\sb200\sl260 {\*\bkmkstart _266}{\*\bkmkend _266}\b\fs20\f0 Figure 3-15. Union Allocation\keepn\hyphpar0\par\pard\sb100\sl234 \b0\fs18\f2 union \{\sa0\par\fi0\sb0
  char  c;\sa0\par\fi0\sb0
  short s : 8;\sa0\par\fi0\sb0
\};\hyphpar0\par\pard\sl234 halfword aligned, sizeof is 2\hyphpar0\par\pard\sl234 little endian:\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
+-------+-------+\sa0\par\fi0\sb0
|      1|      0|\sa0\par\fi0\sb0
|  pad  |   c   |\sa0\par\fi0\sb0
|0     7|8    15|\sa0\par\fi0\sb0
+-------+-------+\sa0\par\fi0\sb0
|      1|      0|\sa0\par\fi0\sb0
|  pad  |   s   |\sa0\par\fi0\sb0
|0     7|8    15|\sa0\par\fi0\sb0
+-------+-------+\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
big endian:\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
+-------+-------+\sa0\par\fi0\sb0
|0      |1      |\sa0\par\fi0\sb0
|   c   |  pad  |\sa0\par\fi0\sb0
|0     7|8    15|\sa0\par\fi0\sb0
+-------+-------+\sa0\par\fi0\sb0
|0      |1      |\sa0\par\fi0\sb0
|   s   |  pad  |\sa0\par\fi0\sb0
|0     7|8    15|\sa0\par\fi0\sb0
+-------+-------+\hyphpar0\par\pard\sb200\sl260 {\*\bkmkstart _271}{\*\bkmkend _271}\b\fs20\f0 Figure 3-16. Unnamed bit-fields\keepn\hyphpar0\par\pard\sb100\sl234 \b0\fs18\f2 struct \{\sa0\par\fi0\sb0
  char  c;\sa0\par\fi0\sb0
  int   : 0;\sa0\par\fi0\sb0
  char  d;\sa0\par\fi0\sb0
  short : 9;\sa0\par\fi0\sb0
  char  e;\sa0\par\fi0\sb0
\};\hyphpar0\par\pard\sl234 byte aligned, sizeof is 8\hyphpar0\par\pard\sl234 little endian:\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
+-----------------------+-------+\sa0\par\fi0\sb0
|                      1|      0|\sa0\par\fi0\sb0
|           :0          |   c   |\sa0\par\fi0\sb0
|0                    23|24   31|\sa0\par\fi0\sb0
+-------+------+--------+-------+\sa0\par\fi0\sb0
|      7|      |        |      4|\sa0\par\fi0\sb0
|   e   | pad  |   :9   |   d   |\sa0\par\fi0\sb0
|0     7|8   14|15    23|24   31|\sa0\par\fi0\sb0
+-------+------+--------+-------+\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
big endian:\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
+-------+-----------------------+\sa0\par\fi0\sb0
|0      |1                      |\sa0\par\fi0\sb0
|   c   |          :0           |\sa0\par\fi0\sb0
|0     7|8                    31|\sa0\par\fi0\sb0
+-------+--------+------+-------+\sa0\par\fi0\sb0
|4      |        |      |7      |\sa0\par\fi0\sb0
|   d   |   :9   | pad  |   e   |\sa0\par\fi0\sb0
|0     7|8     16|17  23|24   31|\sa0\par\fi0\sb0
+-------+--------+------+-------+\hyphpar0\par\pard\sb200\li400\sl234 \b\f0 Note: \b0\f1 In this example, the presence of the unnamed int and short fields does not affect the alignment of the structure. They align the named members relative to the beginning of the structure, but the named members may not be aligned in memory on suitable boundaries. For example, the d members in an array of these structures will not all be on an int (4-byte) boundary.\hyphpar0\par\pard\sb259\s2\sl449 {\*\bkmkstart ID_FUNC_45_CALL}{\*\bkmkend ID_FUNC_45_CALL}\b\fs34\f0 3.2. Function Calling Sequence\keepn\hyphpar0\par\pard\sb400\sl260 \b0\fs20\lang1033 This section discusses the standard function calling sequence, including stack frame layout, register usage, and parameter passing.\hyphpar0\par\pard\sb400\sl260 C programs follow the conventions given here. For specific information on the implementation of C, see {\field{\*\fldinst   HYPERLINK  \\l ID_CODE_45_EX}{\fldrslt Section 3.5}}.\hyphpar0\par\pard\sb200\li400\sl234 \b\fs18\lang1024 Note: \b0\f1 The standard calling sequence requirements apply only to global functions. Local functions that are not reachable from other compilation units may use different conventions as long as they provide traceback tables as described in {\field{\*\fldinst   HYPERLINK  \\l ID_TRACEBACK}{\fldrslt Section 3.3}}. Nonetheless, it is recommended that all functions use the standard calling sequences when possible.\hyphpar0\par\pard\sb216\s3\sl374 {\*\bkmkstart ID_REG}{\*\bkmkend ID_REG}\b\fs28\f0 3.2.1. Registers\keepn\hyphpar0\par\pard\sb400\sl260 \b0\fs20\lang1033 The 64-bit PowerPC Architecture provides 32 general purpose registers, each 64 bits wide. In addition, the architecture provides 32 floating-point registers, each 64 bits wide, and several special purpose registers. All of the integer, special purpose, and floating-point registers are global to all functions in a running program. The following table shows how the registers are used. \hyphpar0\par\pard\sb200\sl234 \fs18\lang1024\f2 r0        Volatile register used in function prologs\sa0\par\fi0\sb0
r1        Stack frame pointer\sa0\par\fi0\sb0
r2        TOC pointer\sa0\par\fi0\sb0
r3        Volatile parameter and return value register\sa0\par\fi0\sb0
r4-r10    Volatile registers used for function parameters\sa0\par\fi0\sb0
r11       Volatile register used in calls by pointer and as an\sa0\par\fi0\sb0
          environment pointer for languages which require one\sa0\par\fi0\sb0
r12       Volatile register used for exception handling and glink code\sa0\par\fi0\sb0
r13       Reserved for use as system thread ID\sa0\par\fi0\sb0
r14-r31   Nonvolatile registers used for local variables\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
f0        Volatile scratch register\sa0\par\fi0\sb0
f1-f4     Volatile floating point parameter and return value registers\sa0\par\fi0\sb0
f5-f13    Volatile floating point parameter registers\sa0\par\fi0\sb0
f14-f31   Nonvolatile registers\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
LR        Link register (volatile)\sa0\par\fi0\sb0
CTR       Loop counter register (volatile)\sa0\par\fi0\sb0
XER       Fixed point exception register (volatile)\sa0\par\fi0\sb0
FPSCR     Floating point status and control register (volatile)\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
CR0-CR1   Volatile condition code register fields\sa0\par\fi0\sb0
CR2-CR4   Nonvolatile condition code register fields\sa0\par\fi0\sb0
CR5-CR7   Volatile condition code register fields\hyphpar0\par\pard\sb400\sl260 \fs20\lang1033\f0 On processors with the VMS feature.\hyphpar0\par\pard\sb200\sl234 \fs18\lang1024\f2 v0-v1     Volatile scratch registers\sa0\par\fi0\sb0
v2-v13    Volatile vector parameters registers\sa0\par\fi0\sb0
v14-v19   Volatile scratch registers\sa0\par\fi0\sb0
v20-v31   Non-volatile registers\sa0\par\fi0\sb0
vrsave    Non-volatile 32-bit register\hyphpar0\par\pard\sb400\sl260 \fs20\lang1033\f0 The existence of the VMX feature will be indicated in the AT_HWCAP auxiliary vector entry.\hyphpar0\par\pard\sb400\sl260 Registers r1, r14 through r31, and f14 through f31 are nonvolatile, which means that they preserve their values across function calls. Functions which use those registers must save the value before changing it, restoring it before the function returns. Register r2 is technically nonvolatile, but it is handled specially during function calls as described below: in some cases the calling function must restore its value after a function call. \hyphpar0\par\pard\sb400\sl260 Registers r0, r3 through r12, f0 through f13, and the special purpose registers LR, CTR, XER, and FPSCR are volatile, which means that they are not preserved across function calls. Furthermore, registers r0, r2, r11, and r12 may be modified by cross-module calls, so a function can not assume that the values of one of these registers is that placed there by the calling function. \hyphpar0\par\pard\sb400\sl260 The condition code register fields CR0, CR1, CR5, CR6, and CR7 are volatile. The condition code register fields CR2, CR3, and CR4 are nonvolatile; a function which modifies them must save and restore at least those fields of the CR. Languages that require "environment pointers" shall use r11 for that purpose. \hyphpar0\par\pard\sb400\sl260 The following registers have assigned roles in the standard calling sequence: \hyphpar0\par\pard\sb200\sl260 \lang1024 r1\keepn\hyphpar0\par\pard\sb100\li400\sl260\fi-400 \tx400 \~\tab The stack pointer (stored in r1) shall maintain quadword alignment. It shall always point to the lowest allocated valid stack frame, and grow toward low addresses. The contents of the word at that address always point to the previously allocated stack frame. If required, it can be decremented by the called function. See {\field{\*\fldinst   HYPERLINK  \\l ID_DYNAM_45_STACK}{\fldrslt Section 3.5.13}} for additional infromation. As discussed later in this chapter, the lowest valid stack address is 288 bytes less than the value in the stack pointer. The stack pointer must be atomically updated by a single instruction, thus avoiding any timing window in which an interrupt can occur with a partially updated stack.\hyphpar0\par\pard\sb200\sl260 r2\keepn\hyphpar0\par\pard\sb100\li400\sl260\fi-400 \tx400 \~\tab This register holds the TOC base. See {\field{\*\fldinst   HYPERLINK  \\l ID_TOC_45_SEC}{\fldrslt Section 3.5.2}} for additional information.\hyphpar0\par\pard\sb200\sl260 r3 through r10 and f1 through f13\keepn\hyphpar0\par\pard\sb100\li400\sl260\fi-400 \tx400 \~\tab These sets of volatile registers may be modified across function invocations and shall therefore be presumed by the calling function to be destroyed. They are used for passing parameters to the called function. See {\field{\*\fldinst   HYPERLINK  \\l ID_PARAM_45_PASS}{\fldrslt Section 3.2.3}} for additional information. In addition, registers r3 and f1 through f4 are used to return values from the called function, as described in {\field{\*\fldinst   HYPERLINK  \\l ID_RETURN_45_VAL}{\fldrslt Section 3.2.4}}.\hyphpar0\par\pard\sb200\sl260 LR (Link Register)\keepn\hyphpar0\par\pard\sb100\li400\sl260\fi-400 \tx400 \~\tab This register shall contain the address to which a called function normally returns. LR is volatile across function calls.\hyphpar0\par\pard\sb400\sl260 \lang1033 Signals can interrupt processes (see signal (BA-OS) in the System V Interface Definition). Functions called during signal handling have no unusual restrictions on their use of registers. Moreover, if a signal handling function returns, the process resumes its original execution path with all registers restored to their original values. Thus, programs and compilers may freely use all registers above except those reserved for system use without the danger of signal handlers inadvertently changing their values. \hyphpar0\par\pard\sb216\s3\sl374 {\*\bkmkstart ID_STACK}{\*\bkmkend ID_STACK}\b\fs28\lang1024 3.2.2. The Stack Frame\keepn\hyphpar0\par\pard\sb400\sl260 \b0\fs20\lang1033 In addition to the registers, each function may have a stack frame on the runtime stack. This stack grows downward from high addresses. The following figure shows the stack frame organization. SP in the figure denotes the stack pointer (general purpose register r1) of the called function after it has executed code establishing its stack frame. \hyphpar0\par\pard\sb200\sl260 {\*\bkmkstart _324}{\*\bkmkend _324}\b\lang1024 Figure 3-17. Stack Frame Organiztion\keepn\hyphpar0\par\pard\sb100\sl234 \b0\fs18\f2 High Address\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
          +-> Back chain\sa0\par\fi0\sb0
          |   Floating point register save area\sa0\par\fi0\sb0
          |   General register save area\sa0\par\fi0\sb0
          |   VRSAVE save word (32-bits)\sa0\par\fi0\sb0
          |   Alignment padding (4 or 12 bytes)\sa0\par\fi0\sb0
          |   Vector register save area (quadword aligned)\sa0\par\fi0\sb0
          |   Local variable space\sa0\par\fi0\sb0
          |   Parameter save area    (SP + 48)\sa0\par\fi0\sb0
          |   TOC save area          (SP + 40)\sa0\par\fi0\sb0
          |   link editor doubleword (SP + 32)\sa0\par\fi0\sb0
          |   compiler doubleword    (SP + 24)\sa0\par\fi0\sb0
          |   LR save area           (SP + 16)\sa0\par\fi0\sb0
          |   CR save area           (SP + 8)\sa0\par\fi0\sb0
SP  --->  +-- Back chain             (SP + 0)\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
Low Address\hyphpar0\par\pard\sb400\sl260 \fs20\lang1033\f0 The following requirements apply to the stack frame: \hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16\lang1024 \'95\tab \fs20 The stack pointer shall maintain quadword alignment.\hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 The stack pointer shall point to the first word of the lowest allocated stack frame, the "back chain" word. The stack shall grow downward, that is, toward lower addresses. The first word of the stack frame shall always point to the previously allocated stack frame (toward higher addresses), except for the first stack frame, which shall have a back chain of 0 (NULL).\hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 The stack pointer shall be decremented by the called function in its prologue, if required, and restored prior to return.\hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 The stack pointer shall be decremented and the back chain updated atomically using one of the "Store Double Word with Update" instructions, so that the stack pointer always points to the beginning of a linked list of stack frames.\hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 The sizes of the floating-point and general register save areas may vary within a function and are as determined by the traceback table described below.\hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 Before a function changes the value in any nonvolatile floating-point register, frn, it shall save the value in frn in the double word in the floating-point register save area 8*(32-n) bytes before the back chain word of the previous frame. The floating-point register save area is always doubleword aligned. The size of the floating-point register save area depends upon the number of floating point registers which must be saved. It ranges from 0 bytes to a maximum of 144 bytes (18 * 8).\hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 Before a function changes the value in any nonvolatile general register, rn, it shall save the value in rn in the word in the general register save area 8*(32-n) bytes before the low addressed end of the floating-point register save area. The general register save area is always doubleword aligned. The size of the general register save area depends upon the number of general registers which must be saved. It ranges from 0 bytes to a maximum of 144 bytes (18 * 8).\hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 Functions must ensure that the appropriate bits in the vrsave register are set for any vector registers they use. A function that changes the value of the vrsave register shall save the original value of vrsave into the word below the low address end of the general register save area. Below the vrsave save area will be 4 or 12 bytes of alignment padding as needed to ensure that the vector register save area is quadword aligned.\hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 Before a function changes the value in any nonvolatile vector register, vrn, it shall save the value in vrn in the word in the vector register save area 16*(32-n) bytes before the low addressed end of the vrsave save area plus alignment padding. The vector register save area is always quadword aligned. The size of the vector register save area depends upon the number of vector registers which must be saved; it ranges from 0 bytes to a maximum of 192 bytes (12 * 16).\hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 The local variable space contains any local variable storage required by the function. If vector registers are saved the local variable space area will be padded so that the vector register save area is quadword aligned.\hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 The parameter save area shall be allocated by the caller. It shall be doubleword aligned, and shall be at least 8 doublewords in length. If a function needs to pass more than 8 doublewords of arguments, the parameter save area shall be large enough to contain the arguments that the caller stores in it. Its contents are not preserved across function calls.\hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 The TOC save area is used by global linkage code to save the TOC pointer register. See The TOC section later in the chapter.\hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 The link editor doubleword is reserved for use by code generated by the link editor. This ABI does not specify any usage; the AIX link editor uses this space under certain circumstances.\hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 The compiler doubleword is reserved for use by the compiler. This ABI does not specify any usage; the AIX compiler uses this space under certain circumstances.\hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 Before a function calls any other functions, it shall save the value in the LR register in the LR save area.\hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 Before a function changes the value in any nonvolatile field in the condition register, it shall save the values in all the nonvolatile fields of the condition register at the time of entry to the function in the CR save area.\hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 The 288 bytes below the stack pointer is available as volatile storage which is not preserved across function calls. Interrupt handlers and any other functions that might run without an explicit call must take care to preserve this region. If a function does not need more stack space than is available in this area, it does not need to have a stack frame.\hyphpar0\par\pard\sb400\sl260 \lang1033 The stack frame header consists of the back chain word, the CR save area, the LR save area, the compiler and link editor doublewords, and the TOC save area, for a total of 48 bytes. The back chain word always contains a pointer to the previously allocated stack frame. Before a function calls another function, it shall save the contents of the link register at the time the function was entered in the LR save area of its caller's stack frame and shall establish its own stack frame. \hyphpar0\par\pard\sb400\sl260 Except for the stack frame header and any padding necessary to make the entire frame a multiple of 16 bytes in length, a function need not allocate space for the areas that it does not use. If a function does not call any other functions and does not require any of the other parts of the stack frame, it need not establish a stack frame. Any padding of the frame as a whole shall be within the local variable area; the parameter save area shall immediately follow the stack frame header, and the register save areas shall contain no padding except as noted for VRSAVE. \hyphpar0\par\pard\sb216\s3\sl374 {\*\bkmkstart ID_PARAM_45_PASS}{\*\bkmkend ID_PARAM_45_PASS}\b\fs28\lang1024 3.2.3. Parameter Passing\keepn\hyphpar0\par\pard\sb400\sl260 \b0\fs20\lang1033 For a RISC machine such as 64-bit PowerPC, it is generally more efficient to pass arguments to called functions in registers (both general and floating-point registers) than to construct an argument list in storage or to push them onto a stack. Since all computations must be performed in registers anyway, memory traffic can be eliminated if the caller can compute arguments into registers and pass them in the same registers to the called function, where the called function can then use them for further computation in the same registers. The number of registers implemented in a processor architecture naturally limits the number of arguments that can be passed in this manner. \hyphpar0\par\pard\sb400\sl260  For the 64-bit PowerPC, up to eight doublewords are passed in general purpose registers, loaded sequentially into general purpose registers r3 through r10. Up to thirteen floating-point arguments can be passed in floating-point registers f1 through f13. If VMX is supported, up to twelve vector parameters can be passed in v2 through v13. If fewer (or no) arguments are passed, the unneeded registers are not loaded and will contain undefined values on entry to the called function. \hyphpar0\par\pard\sb400\sl260 The parameter save area, which is located at a fixed offset of 48 bytes from the stack pointer, is reserved in each stack frame for use as an argument list. A minimum of 8 doublewords is always reserved. The size of this area must be sufficient to hold the longest argument list being passed by the function which owns the stack frame. Although not all arguments for a particular call are located in storage, consider them to be forming a list in this area, with each argument occupying one or more doublewords. \hyphpar0\par\pard\sb400\sl260 If more arguments are passed than can be stored in registers, the remaining arguments are stored in the parameter save area. The values passed on the stack are identical to those that have been placed in registers; thus, the stack contains register images. \hyphpar0\par\pard\sb400\sl260  For variable argument lists, this ABI uses a va_list type which is a pointer to the memory location of the next parameter. Using a simple va_list type means that variable arguments must always be in the same location regardless of type, so that they can be found at runtime. This ABI defines the location to be general registers r3 through r10 for the first eight doublewords and the stack parameter save area thereafter. Alignment requirements such as those for vector types may require the va_list pointer to first be aligned before accessing a value. \hyphpar0\par\pard\sb400\sl260 The rules for parameter passing are as follows: \hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16\lang1024 \'95\tab \fs20 Each argument is mapped to as many doublewords of the parameter save area as are required to hold its value.\hyphpar0\par\pard\sb100\li400\sl260\fi-200 \tx400 \fs14 \'95\tab \fs20 Single precision floating point values are mapped to the first word in a single doubleword.\hyphpar0\par\pard\sb100\li400\sl260\fi-200 \tx400 \fs14 \'95\tab \fs20 Double precision floating point values are mapped to a single doubleword.\hyphpar0\par\pard\sb100\li400\sl260\fi-200 \tx400 \fs14 \'95\tab \fs20 Extended precision floating point values are mapped to two consecutive doublewords.\hyphpar0\par\pard\sb100\li400\sl260\fi-200 \tx400 \fs14 \'95\tab \fs20 Simple integer types (char, short, int, long, enum) are mapped to a single doubleword. Values shorter than a doubleword are sign or zero extended as necessary.\hyphpar0\par\pard\sb100\li400\sl260\fi-200 \tx400 \fs14 \'95\tab \fs20 Pointers are mapped to a single doubleword.\hyphpar0\par\pard\sb100\li400\sl260\fi-200 \tx400 \fs14 \'95\tab \fs20 Vectors are mapped to a single quadword, quadword aligned. This may result in skipped doublewords in the parameter save area.\hyphpar0\par\pard\sb100\li400\sl260\fi-200 \tx400 \fs14 \'95\tab \fs20 Fixed size aggregates and unions passed by value are mapped to as many doublewords of the parameter save area as the value uses in memory. Aggregrates and unions are aligned according to their alignment requirements. This may result in doublewords being skipped for alignment.\hyphpar0\par\pard\sb100\li400\sl260\fi-200 \tx400 \fs14 \'95\tab \fs20 An aggregate or union smaller than one doubleword in size is padded so that it appears in the least significant bits of the doubleword. All others are padded, if necessary, at their tail. Variable size aggregates or unions are passed by reference.\hyphpar0\par\pard\sb100\li400\sl260\fi-200 \tx400 \fs14 \'95\tab \fs20 Other scalar values, such as FORTRAN complex numbers, are mapped to the number of doublewords required by their size.\hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 If the callee has a known prototype, arguments are converted to the type of the corresponding parameter before being mapped into the parameter save area. For example, if a long is used as an argument to a float double parameter, the value is converted to double-precision and mapped to a doubleword in the parameter save area.\hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 Floating point registers f1 through f13 are used consecutively to pass up to 13 single, double and extended precision floating point values, and to pass the corresponding complex floating point values. A single precision value occupies one register as does a double precision value. Extended precision values occupy two consecutively numbered registers. The corresponding complex values occupy twice as many registers. If the number of floating point values passed is such that an argument cannot be passed fully in floating point registers, that argument and all following floating point arguments are passed in the parameter save area. Also, arguments corresponding to the variable argument part of a callee with a prototype containing an ellipsis are passed in the parameter save area.\hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 Vector registers v2 through v13 are used to consecutively pass up to 12 vector values, except for arguments corresponding to the variable argument part of a callee with a prototype containing an ellipsis.\hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 If there is no known function prototype for a callee, or if the function prototype for a callee contains an ellipsis and the argument value is not part of the fixed arguments described by the prototype, then floating point and vector values are passed according to the following rules for non-floating, non-vector types. In the case of no known prototype this may result in two copies of floating and vector argument values being passed.\hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 General registers are used to pass some values. The first eight doublewords are mapped to the parameter save area correspond to the registers r3 through r10. An argument other than floating point and vector values fully described by a prototype, that maps to this area either fully or partially, is passed in the corresponding general registers.\hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 All other arguments (or parts thereof) not already covered must be stored in the parameter save area following the first eight doublewords. The first eight doublewords mapped to the parameter save area are never stored in the parameter save area by the calling function.\hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 If the callee takes the address of any of its parameters, then values passed in registers are stored into the parameter save area by the callee. If the compilation unit for the caller contains a function prototype, but the callee has a mismatching definition, this may result in the wrong values being stored.\hyphpar0\par\pard\sb200\sl260 {\*\bkmkstart _409}{\*\bkmkend _409}\b Figure 3-18. Parameter Passing\keepn\hyphpar0\par\pard\sb100\sl234 \b0\fs18\f2 typedef struct \{\sa0\par\fi0\sb0
  int    a;\sa0\par\fi0\sb0
  double dd;\sa0\par\fi0\sb0
\} sparm;\sa0\par\fi0\sb0
sparm   s, t;\sa0\par\fi0\sb0
int     c, d, e;\sa0\par\fi0\sb0
long double ld;\sa0\par\fi0\sb0
double  ff, gg, hh;\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
x = func(c, ff, d, ld, s, gg, t, e, hh);\hyphpar0\par\pard\sl234 Parameter     Register     Offset in parameter save area\sa0\par\fi0\sb0
c             r3           0-7    (not stored in parameter save area)\sa0\par\fi0\sb0
ff            f1           8-15   (not stored)\sa0\par\fi0\sb0
d             r5           16-23  (not stored)\sa0\par\fi0\sb0
ld            f2,f3        24-39  (not stored)\sa0\par\fi0\sb0
s             r8,r9        40-55  (not stored)\sa0\par\fi0\sb0
gg            f4           56-63  (not stored)\sa0\par\fi0\sb0
t             (none)       64-79  (stored in parameter save area)\sa0\par\fi0\sb0
e             (none)       80-87  (stored)\sa0\par\fi0\sb0
hh            f5           88-95  (stored)\hyphpar0\par\pard\sb200\li400\sl234 \b\f0 Note: \b0\f1 Note: If a prototype is not in scope, then the floating point argument ff is also passed in r4, the long double argument ld is also passed in r6 and r7, the floating point argument gg is also passing in r10, and the floating point argument gg is also stored into the parameter save area. If a prototype containing an ellipsis describes any of these floating point arguments as being part of the variable argument part, then the general registers and parameter save area are used as when no prototype is in scope, and the floating point register(s) are not used.\hyphpar0\par\pard\sb216\s3\sl374 {\*\bkmkstart ID_RETURN_45_VAL}{\*\bkmkend ID_RETURN_45_VAL}\b\fs28\f0 3.2.4. Return Values\keepn\hyphpar0\par\pard\sb400\sl260 \b0\fs20\lang1033 Functions shall return float or double values in f1, with float values rounded to single precision. \hyphpar0\par\pard\sb400\sl260  When the VMX facility is supported, functions shall return vector data type values in v2. \hyphpar0\par\pard\sb400\sl260 Functions shall return values of type int, long, enum, short, and char, or a pointer to any type, as unsigned or signed integers as appropriate, zero- or sign-extended to 64 bits if necessary, in r3. Character arrays of length 8 bytes or less, or bit strings of length 64 bits or less, will be returned right justified in r3. Aggregates or unions of any length, and character strings of length longer than 8 bytes, will be returned in a storage buffer allocated by the caller. The caller will pass the address of this buffer as a hidden first argument in r3, causing the first explicit argument to be passed in r4. This hidden argument is treated as a normal formal parameter, and corresponds to the first doubleword of the parameter save area. \hyphpar0\par\pard\sb400\sl260 Functions shall return floating point scalar values of size 16 or 32 bytes in f1:f2 and f1:f4, respectively. \hyphpar0\par\pard\sb400\sl260 Functions shall return floating point complex values of size 16 (four or eight byte complex) in f1:f2 and floating point complex values of size 32 (16 byte complex) in f1:f4. \hyphpar0\par\pard\sb216\s3\sl374 {\*\bkmkstart ID_FUNC_45_DES}{\*\bkmkend ID_FUNC_45_DES}\b\fs28\lang1024 3.2.5. Function Descriptors\keepn\hyphpar0\par\pard\sb400\sl260 \b0\fs20\lang1033 A function descriptor is a three doubleword data structure that contains the following values: \hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16\lang1024 \'95\tab \fs20 The first doubleword contains the address of the entry point of the function.\hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 The second doubleword contains the TOC base address for the function (see {\field{\*\fldinst   HYPERLINK  \\l ID_TOC}{\fldrslt Section 4.3}} later in this chapter).\hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 The third doubleword contains the environment pointer for languages such as Pascal and PL/1.\hyphpar0\par\pard\sb400\sl260 \lang1033 For an externally visible function, the value of the symbol with the same name as the function is the address of the function descriptor. Symbol names with a dot (.) prefix are reserved for holding entry point addresses. The value of a symbol named ".FN" is the entry point of the function "FN". \hyphpar0\par\pard\sb400\sl260 The value of a function pointer in a language like C is the address of the function descriptor. Examples of calling a function through a pointer are provided in {\field{\*\fldinst   HYPERLINK  \\l ID_FUNC_45_CALLS}{\fldrslt Section 3.5.11}}. \hyphpar0\par\pard\sb400\sl260 When the link editor processes relocatable object files in order to produce an executable or shared object, it must treat direct function calls specially, as described below. \hyphpar0\par\pard\sb259\s2\sl449 {\*\bkmkstart ID_TRACEBACK}{\*\bkmkend ID_TRACEBACK}\b\fs34\lang1024 3.3. Traceback Tables\keepn\hyphpar0\par\pard\sb400\sl260 \b0\fs20\lang1033 To support debuggers and exception handlers, the 64-bit PowerPC ELF ABI defines traceback tables. Compilers must support generation of at least the mandatory part of traceback tables, and system libraries should contain the mandatory part. Compilers should provide an option to turn off traceback table generation to save space when the information is not needed. \hyphpar0\par\pard\sb400\sl260 Traceback tables are intended to be compatible with the 64-bit PowerOpen ABI. \hyphpar0\par\pard\sb400\sl260 Compilers should generate a traceback table following the end of the code for every function. Debuggers and exception handlers can locate the traceback tables by scanning forward from the instruction address at the point of interruption. The beginning of the traceback table is marked by a word of zeroes, which is an illegal instruction. If read-only constants are compiled into the same section as the function code, they must follow the traceback table. A word of zeroes as read-only data must not be the first word following the code for a function. A traceback table is word-aligned. \hyphpar0\par\pard\sb216\s3\sl374 {\*\bkmkstart ID_MAND_45_FIELD}{\*\bkmkend ID_MAND_45_FIELD}\b\fs28\lang1024 3.3.1. Mandatory Fields\keepn\hyphpar0\par\pard\sb400\sl260 \b0\fs20\lang1033 The following are the mandatory fields of a traceback table: \hyphpar0\par\pard\sb200\sl234 \fs18\lang1024\f2 version        Eight-bit field.  This defines the type code for the\sa0\par\fi0\sb0
               table.  The only currently defined value is zero.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
lang           Eight-bit field.  This defines the source language for\sa0\par\fi0\sb0
               the compiler that generated the code for which this\sa0\par\fi0\sb0
               traceback table applies.  The default values are as\sa0\par\fi0\sb0
               follows:\sa0\par\fi0\sb0
                  C             0\sa0\par\fi0\sb0
                  FORTRAN       1\sa0\par\fi0\sb0
                  Pascal        2\sa0\par\fi0\sb0
                  Ada           3\sa0\par\fi0\sb0
                  PL/1          4\sa0\par\fi0\sb0
                  Basic         5\sa0\par\fi0\sb0
                  LISP          6\sa0\par\fi0\sb0
                  COBOL         7\sa0\par\fi0\sb0
                  Modula2       8\sa0\par\fi0\sb0
                  C++           9\sa0\par\fi0\sb0
                  RPG           10\sa0\par\fi0\sb0
                  PL.8,PLIX     11\sa0\par\fi0\sb0
                  Assembly      12\sa0\par\fi0\sb0
                  Java          13\sa0\par\fi0\sb0
                  Objective C   14\sa0\par\fi0\sb0
               The codes 0xf to 0xfa are reserved.  The codes 0xfb to\sa0\par\fi0\sb0
               0xff are reserved for IBM.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
globalink      One-bit field.  This field is set to 1 if this routine\sa0\par\fi0\sb0
               is a special routine used to support the linkage\sa0\par\fi0\sb0
               convention: a linkage function or a ._ptrgl function.\sa0\par\fi0\sb0
               See the section Function Calls for more information.\sa0\par\fi0\sb0
               These routines have unusual register usage and stack\sa0\par\fi0\sb0
               format.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
is_eprol       One-bit field.  This field is set to 1 if this routine\sa0\par\fi0\sb0
               is an out-of-line prologue or epilogue function.  See\sa0\par\fi0\sb0
               the section Function Prologue and Epilogue for more\sa0\par\fi0\sb0
               information.  These routines have unusual register\sa0\par\fi0\sb0
               usage and stack format.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
has_tboff      One-bit field.  This field is set to 1 if the offset of\sa0\par\fi0\sb0
               the traceback table from the start of the function is\sa0\par\fi0\sb0
               stored in the tb_offset field.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
int_proc       One-bit field.  This field is set to 1 if this function\sa0\par\fi0\sb0
               is a stackless leaf function that does not have a\sa0\par\fi0\sb0
               separate stack frame.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
has_ctl        One-bit field.  This field is set to 1 if ctl_info is\sa0\par\fi0\sb0
               provided.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
tocless        One-bit field.  This field is set to 1 if this function\sa0\par\fi0\sb0
               does not have a TOC.  For example, a stackless leaf\sa0\par\fi0\sb0
               assembly language routine with no references to\sa0\par\fi0\sb0
               external objects.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
fp_present     One-bit field.  This field is set to 1 if  the function\sa0\par\fi0\sb0
               uses floating-point processor instructions.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
log_abort      One-bit field.  Reserved.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
int_handl      One-bit field.  Reserved.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
name_present   One-bit field.  This field is set to 1 if the name for\sa0\par\fi0\sb0
               the procedure is present following the traceback field,\sa0\par\fi0\sb0
               as determined by the name_len and name fields.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
uses_alloca    One-bit field.  This field is set to 1 if the procedure\sa0\par\fi0\sb0
               performs dynamic stack allocation.  To address their\sa0\par\fi0\sb0
               local variables, these procedures require a different\sa0\par\fi0\sb0
               register to hold the stack pointer value.  This\sa0\par\fi0\sb0
               register may be chosen by the compiler, and must be\sa0\par\fi0\sb0
               indicated by setting the value of the alloc_reg field.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
cl_dis_inv     Three-bit field.  Reserved.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
saves_cr       One-bit field.  This field is set to 1 if the function\sa0\par\fi0\sb0
               saves the CR in the CR save area.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
saves_lr       One-bit field.  This field is set to 1 if the function\sa0\par\fi0\sb0
               saves the LR in the LR save area.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
stores_bc      One-bit field.  This field is set to 1 if the function\sa0\par\fi0\sb0
               saves the back chain (the SP of its caller) in the\sa0\par\fi0\sb0
               stack frame header.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
fixup          One-bit field.  This field is set to 1 if the link\sa0\par\fi0\sb0
               editor replaced the original instruction by a branch\sa0\par\fi0\sb0
               instruction to a special fixup instruction sequence.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
fp_saved       Six-bit field.  This field is set to the number of\sa0\par\fi0\sb0
               non-volatile floating point registers that the function\sa0\par\fi0\sb0
               saves.  The last register saved is always f31, so, for\sa0\par\fi0\sb0
               example, a value of 2 in this field indicates that f30\sa0\par\fi0\sb0
               and f31 are saved.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
has_vec_info   One-bit field.  This field is set to 1 if the procedure\sa0\par\fi0\sb0
               saves non-volatile vector registers in the vector\sa0\par\fi0\sb0
               register save area, saves vrsave in the VRSAVE word,\sa0\par\fi0\sb0
               specifies the number of vector parameters, or uses VMX\sa0\par\fi0\sb0
               instructions.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
spare4         One-bit field.  Reserved.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
gpr_saved      Six-bit field.  This field is set to the number of\sa0\par\fi0\sb0
               non-volatile general registers that the function\sa0\par\fi0\sb0
               saves.  As with fp_saved, the last register saved is\sa0\par\fi0\sb0
               always r31.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
fixedparms     Eight-bit field.  This field is set to the number of\sa0\par\fi0\sb0
               fixed point parameters.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
floatparms     Seven-bit field.  This field is set to the number of\sa0\par\fi0\sb0
               floating point parameters.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
parmsonstk     One-bit field.  This field is set to 1 if all of the\sa0\par\fi0\sb0
               parameters are placed in the parameter save area.\hyphpar0\par\pard\sb200\li400\sl234 \b\f0 Note: \b0\f1 If either fixedparms or floatparms is set to a non-zero value, the parminfo field exists.\hyphpar0\par\pard\sb100\li400\sl234 A debugger can use the fixedparms, floatparms, and parmsonstk field to support displaying the parameters passed to a function. They specify the number of parameters passed in the general registers and the number passed in the floating point registers; they also specify whether the parameters are stored in the parameter save area. The parameters are stored in the parameter save area if the number of parameters is variable, or if the address of one of the parameters is taken, or if the compiler always stores the parameters at the optimization level of the compilation. If either the fixedparms or floatparms field is set to a non-zero value, then the next field, parminfo, can be used by a debugger to determine the relative order and types of the parameters.\hyphpar0\par\pard\sb216\s3\sl374 {\*\bkmkstart ID_OPT_45_FIELD}{\*\bkmkend ID_OPT_45_FIELD}\b\fs28\f0 3.3.2. Optional Fields\keepn\hyphpar0\par\pard\sb400\sl260 \b0\fs20\lang1033 The following are the optional fields of a traceback table: \hyphpar0\par\pard\sb200\sl234 \fs18\lang1024\f2 parminfo       Unsigned int.  This field is only present if either\sa0\par\fi0\sb0
               fixedparms or floatparms is set to a non-zero value.\sa0\par\fi0\sb0
               It can be used by a debugger to determine which\sa0\par\fi0\sb0
               registers were used to pass parameters to the routine\sa0\par\fi0\sb0
               and to determine the layout of the parameter save\sa0\par\fi0\sb0
               area.  This word is interpreted from left to right, as\sa0\par\fi0\sb0
               follows:\sa0\par\fi0\sb0
                  bit is 0: the corresponding parameter is a fixed\sa0\par\fi0\sb0
                     point parameter passed in a general register or a\sa0\par\fi0\sb0
                     single doubleword in the parameter save area.\sa0\par\fi0\sb0
                  bit is 1: the corresponding parameter is a floating\sa0\par\fi0\sb0
                     point parameter, and the following bit determines\sa0\par\fi0\sb0
                     whether the parameter is single precision (the\sa0\par\fi0\sb0
                     following bit is 0) or double precision  (the\sa0\par\fi0\sb0
                     following bit is 1).\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
               Note: Since this field is only 32 bits long, there is a\sa0\par\fi0\sb0
               limit to how many parameters can be described.  This\sa0\par\fi0\sb0
               limit is in the range of 16 to 32 parameters depending\sa0\par\fi0\sb0
               upon the type of the parameters.  Note that it takes\sa0\par\fi0\sb0
               two bits to describe a floating point parameter and one\sa0\par\fi0\sb0
               bit for each non floating point parameter.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
tb_offset      Unsigned int.  This word is only present if the\sa0\par\fi0\sb0
               has_tboff field is set to 1.  It holds the length of\sa0\par\fi0\sb0
               the function code.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
hand_mask      Int.  Reserved.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
ctl_info       Int.  This word is only present if the has_ctl field is\sa0\par\fi0\sb0
               set to 1.  It gives the number of controlled automatic\sa0\par\fi0\sb0
               anchor blocks defined for this procedure.  If an\sa0\par\fi0\sb0
               exception handler is unwinding the stack to restart\sa0\par\fi0\sb0
               some earlier function, the the controlled automatic\sa0\par\fi0\sb0
               storage must be released.  Controlled automatic storage\sa0\par\fi0\sb0
               is used by PL/1 and PL.8.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
ctl_info_disp  Int[*].  This field is only present if the has_ctl\sa0\par\fi0\sb0
               field is set to 1.  The ctl_info field indicates the\sa0\par\fi0\sb0
               number of words.  Each word is the displacement to the\sa0\par\fi0\sb0
               location of the information.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
name_len       Short.  This field is only present if the name_present\sa0\par\fi0\sb0
               field is set to 1.  It is the length of the function\sa0\par\fi0\sb0
               name that immediately follows this field.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
name           char[*].  This field is only present if the\sa0\par\fi0\sb0
               name_present field is set to 1.  The name_len field\sa0\par\fi0\sb0
               indicates the number of characters.  The name is in\sa0\par\fi0\sb0
               seven-bit ASCII, and is not delimited by a null\sa0\par\fi0\sb0
               character.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
alloca_reg     Char.  This field is only present if the uses_alloca\sa0\par\fi0\sb0
               bit is set to 1.  It holds the register number that is\sa0\par\fi0\sb0
               used as the base for variable accesses.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
vr_saved       Six-bit field.  This field is set to the number of\sa0\par\fi0\sb0
               non-volatile floating point registers that the function\sa0\par\fi0\sb0
               saves.  The last register saved is always vr31, so, for\sa0\par\fi0\sb0
               example, a value of 2 in this field indicates that vr30\sa0\par\fi0\sb0
               and vr31 are saved.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
saves_vrsave   One-bit field.  This field is set to 1 if the VRSAVE\sa0\par\fi0\sb0
               word in the register save area must be used to restore\sa0\par\fi0\sb0
               the prior value before returning from this procedure.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
has_varargs    One-bit field.  This field is set to 1 if this function\sa0\par\fi0\sb0
               has a variable argument list.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
vectorparms    Seven-bit field.  This field records the number of vector\sa0\par\fi0\sb0
               parameters.  This field must be non-zero for a procedure\sa0\par\fi0\sb0
               with vector parameters that does not have a variable\sa0\par\fi0\sb0
               argument list.  Otherwise parmsonstk must be set.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
vec_present    One-bit field.  This field is set to 1 if VMX\sa0\par\fi0\sb0
               instructions are performed within the procedure.\hyphpar0\par\pard\sb259\s2\sl449 {\*\bkmkstart ID_PROC_45_INIT}{\*\bkmkend ID_PROC_45_INIT}\b\fs34\f0 3.4. Process Initialization\keepn\hyphpar0\par\pard\sb400\sl260 \b0\fs20\lang1033 This section describes the machine state that exec creates for "infant" processes, including argument passing, register usage, and stack frame layout. Programming language systems use this initial program state to establish a standard environment for their application programs. For example, a C program begins executing at a function named main, conventionally declared as follows: \hyphpar0\par\pard\sb200\sl234 \fs18\lang1024\f2 extern int main (int argc, char *argv[], char *envp[]);\hyphpar0\par\pard\sb400\sl260 \fs20\lang1033\f0 Briefly, \i\f2 argc\i0\f0  is a non-negative argument count; \i\f2 argv\i0\f0  is an array of argument strings, with argv[argc] == 0; and envp is an array of environment strings, also terminated by a NULL pointer. \hyphpar0\par\pard\sb400\sl260 Although this section does not describe C program initialization, it gives the information necessary to implement the call to main or to the entry point for a program in any other language. \hyphpar0\par\pard\sb216\s3\sl374 {\*\bkmkstart ID_PROC_45_REG}{\*\bkmkend ID_PROC_45_REG}\b\fs28\lang1024 3.4.1. Registers\keepn\hyphpar0\par\pard\sb400\sl260 \b0\fs20\lang1033 When a process is first entered (from an exec(BA_OS) system call), the contents of registers other than those listed below are unspecified. Consequently, a program that requires registers to have specific values must set them explicitly during process initialization. It should not rely on the operating system to set all registers to 0. Following are the registers whose contents are specified: \hyphpar0\par\pard\sb200\sl260 \lang1024 r1\keepn\hyphpar0\par\pard\sb100\li400\sl260\fi-400 \tx400 \~\tab The initial stack pointer, aligned to a quadword boundary and pointing to a word containing a NULL pointer.\hyphpar0\par\pard\sb200\sl260 r2\keepn\hyphpar0\par\pard\sb100\li400\sl260\fi-400 \tx400 \~\tab The initial TOC pointer register value, obtained via the function descriptor pointed at by the e_entry field in the ELF header. For more information on function decscriptors, see {\field{\*\fldinst   HYPERLINK  \\l ID_FUNC_45_DES}{\fldrslt Section 3.2.5}}. For more information on the ELF Header, see {\field{\*\fldinst   HYPERLINK  \\l ID_ELF_45_HEAD}{\fldrslt Section 4.1}}.\hyphpar0\par\pard\sb200\sl260 r3\keepn\hyphpar0\par\pard\sb100\li400\sl260\fi-400 \tx400 \~\tab Contains argc, the number of arguments.\hyphpar0\par\pard\sb200\sl260 r4\keepn\hyphpar0\par\pard\sb100\li400\sl260\fi-400 \tx400 \~\tab Contains argv, a pointer to the array of argument pointers in the stack. The array is immediately followed by a NULL pointer. If there are no arguments, r4 points to a NULL pointer.\hyphpar0\par\pard\sb200\sl260 r5\keepn\hyphpar0\par\pard\sb100\li400\sl260\fi-400 \tx400 \~\tab Contains envp, a pointer to the array of environment pointers in the stack. The array is immediately followed by a NULL pointer. If no environment exists, r5 points to a NULL pointer .\hyphpar0\par\pard\sb200\sl260 r6\keepn\hyphpar0\par\pard\sb100\li400\sl260\fi-400 \tx400 \~\tab Contains a pointer to the auxiliary vector. The auxiliary vector shall have at least one member, a terminating entry with an a_type of AT_NULL (see below).\hyphpar0\par\pard\sb200\sl260 r7\keepn\hyphpar0\par\pard\sb100\li400\sl260\fi-400 \tx400 \~\tab Contains a termination function pointer. If r7 contains a nonzero value, the value represents a function pointer that the application should register with \fs18\f2 atexit(BA_OS)\fs20\f0 . If r7 contains zero, no action is required.\hyphpar0\par\pard\sb200\sl260 fpscr\keepn\hyphpar0\par\pard\sb100\li400\sl260\fi-400 \tx400 \~\tab Contains 0, specifying "round to nearest" mode, IEEE Mode, and the disabling of floating-point exceptions.\hyphpar0\par\pard\sb216\s3\sl374 {\*\bkmkstart ID_PROC_45_STACK}{\*\bkmkend ID_PROC_45_STACK}\b\fs28 3.4.2. Process Stack\keepn\hyphpar0\par\pard\sb400\sl260 \b0\fs20\lang1033 Every process has a stack, but the system defines no fixed stack address. Furthermore, a program's stack address can change from one system to another, and even from one process invocation to another. Thus the process initialization code must use the stack address in general purpose register r1. Data in the stack segment at addresses below the stack pointer contain undefined values. \hyphpar0\par\pard\sb400\sl260 Whereas the argument and environment vectors transmit information from one application program to another, the auxiliary vector conveys information from the operating system to the program. This vector is an array of structures, defined as follows: \hyphpar0\par\pard\sb200\sl234 \fs18\lang1024\f2 typedef struct\sa0\par\fi0\sb0
\{\sa0\par\fi0\sb0
  int     a_type;\sa0\par\fi0\sb0
  union\sa0\par\fi0\sb0
    \{\sa0\par\fi0\sb0
      long  a_val;\sa0\par\fi0\sb0
      void  *a_ptr;\sa0\par\fi0\sb0
      void  (*a_fcn)();\sa0\par\fi0\sb0
    \} a_un;\sa0\par\fi0\sb0
\} auxv_t;\hyphpar0\par\pard\sb200\sl234 Name                Value       a_un field\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
AT_NULL             0           ignored\sa0\par\fi0\sb0
AT_IGNORE           1           ignored\sa0\par\fi0\sb0
AT_EXECFD           2           a_val\sa0\par\fi0\sb0
AT_PHDR             3           a_ptr\sa0\par\fi0\sb0
AT_PHENT            4           a_val\sa0\par\fi0\sb0
AT_PHNUM            5           a_val\sa0\par\fi0\sb0
AT_PAGESZ           6           a_val\sa0\par\fi0\sb0
AT_BASE             7           a_ptr\sa0\par\fi0\sb0
AT_FLAGS            8           a_val\sa0\par\fi0\sb0
AT_ENTRY            9           a_ptr\sa0\par\fi0\sb0
AT_HWCAP            16          a_val\sa0\par\fi0\sb0
AT_DCACHEBSIZE      19          a_val\sa0\par\fi0\sb0
AT_ICACHEBSIZE      20          a_val\sa0\par\fi0\sb0
AT_UCACHEBSIZE      21          a_val\hyphpar0\par\pard\sb200\sl260 \fs20\f0 AT_NULL\keepn\hyphpar0\par\pard\sb100\li400\sl260\fi-400 \tx400 \~\tab The auxiliary vector has no fixed length; instead an entry of this type denotes the end of the vector. The corresponding value of a_un is undefined.\hyphpar0\par\pard\sb200\sl260 AT_IGNORE\keepn\hyphpar0\par\pard\sb100\li400\sl260\fi-400 \tx400 \~\tab This type indicates the entry has no meaning. The corresponding value of a_un is undefined.\hyphpar0\par\pard\sb200\sl260 AT_EXECFD\keepn\hyphpar0\par\pard\sb100\li400\sl260\fi-400 \tx400 \~\tab As Chapter 5 in the System V ABI describes, exec may pass control to an interpreter program. When this happens, the system places either an entry of type AT_EXECFD or one of type AT_PHDR in the auxiliary vector. The entry for type AT_EXECFD uses the a_val member to contain a file descriptor open to read the application program's object file.\hyphpar0\par\pard\sb200\sl260 AT_PHDR\keepn\hyphpar0\par\pard\sb100\li400\sl260\fi-400 \tx400 \~\tab Under some conditions, the system creates the memory image of the application program before passing control to an interpreter program. When this happens, the a_ptr member of the AT_PHDR entry tells the interpreter where to find the program header table in the memory image. If the AT_PHDR entry is present, entries of types AT_PHENT, AT_PHNUM, and AT_ENTRY must also be present. See the section Program Header in Chapter 5 of the System V ABI and {\field{\*\fldinst   HYPERLINK  \\l ID_PROG_45_LOAD_45_DL}{\fldrslt Chapter 5}} of this processor supplement for more information about the program header table.\hyphpar0\par\pard\sb200\sl260 AT_PHENT\keepn\hyphpar0\par\pard\sb100\li400\sl260\fi-400 \tx400 \~\tab The a_val member of this entry holds the size, in bytes, of one entry in the program header table to which the AT_PHDR entry points.\hyphpar0\par\pard\sb200\sl260 AT_PHNUM\keepn\hyphpar0\par\pard\sb100\li400\sl260\fi-400 \tx400 \~\tab The a_val member of this entry holds the number of entries in the program header table to which the AT_PHDR entry points.\hyphpar0\par\pard\sb200\sl260 AT_PAGESZ\keepn\hyphpar0\par\pard\sb100\li400\sl260\fi-400 \tx400 \~\tab If present, this entry's a_val member gives the system page size in bytes. The same information is also available through the sysconf system call.\hyphpar0\par\pard\sb200\sl260 AT_BASE\keepn\hyphpar0\par\pard\sb100\li400\sl260\fi-400 \tx400 \~\tab The a_ptr member of this entry holds the base address at which the interpreter program was loaded into memory. See the section Program Header in Chapter 5 of the System V ABI for more information about the base address.\hyphpar0\par\pard\sb200\sl260 AT_FLAGS\keepn\hyphpar0\par\pard\sb100\li400\sl260\fi-400 \tx400 \~\tab If present, the a_val member of this entry holds 1-bit flags. Bits with undefined semantics are set to zero.\hyphpar0\par\pard\sb200\sl260 AT_ENTRY\keepn\hyphpar0\par\pard\sb100\li400\sl260\fi-400 \tx400 \~\tab The a_ptr member of this entry holds the entry point of the application program to which the interpreter program should transfer control.\hyphpar0\par\pard\sb200\sl260 AT_DCACHEBSIZE\keepn\hyphpar0\par\pard\sb100\li400\sl260\fi-400 \tx400 \~\tab The a_val member of this entry gives the data cache block size for processors on the system on which this program is running. If the processors have unified caches, AT_DCACHEBSIZE is the same as AT_UCACHEBSIZE.\hyphpar0\par\pard\sb200\sl260 AT_ICACHEBSIZE\keepn\hyphpar0\par\pard\sb100\li400\sl260\fi-400 \tx400 \~\tab The a_val member of this entry gives the instruction cache block size for processors on the system on which this program is running. If the processors have unified caches, AT_DCACHEBSIZE is the same as AT_UCACHEBSIZE.\hyphpar0\par\pard\sb200\sl260 AT_UCACHEBSIZE\keepn\hyphpar0\par\pard\sb100\li400\sl260\fi-400 \tx400 \~\tab The a_val member of this entry is zero if the processors on the system on which this program is running do not have a unified instruction and data cache. Otherwise, it gives the cache block size.\hyphpar0\par\pard\sb200\sl260 AT_HWCAP\keepn\hyphpar0\par\pard\sb100\li400\sl260\fi-400 \tx400 \~\tab The a_val member of this entry is bit map of hardware capabilities. Some bit mask values include: \hyphpar0\par\pard\sb100\li400\sl234 \fs18\f2 PPC_FEATURE_32               0x80000000 /* Always set for powerpc64 */\sa0\par\fi0\sb0
PPC_FEATURE_64               0x40000000 /* Always set for powerpc64 */\sa0\par\fi0\sb0
PPC_FEATURE_HAS_ALTIVEC      0x10000000\sa0\par\fi0\sb0
PPC_FEATURE_HAS_FPU          0x08000000\sa0\par\fi0\sb0
PPC_FEATURE_HAS_MMU          0x04000000\sa0\par\fi0\sb0
PPC_FEATURE_UNIFIED_CACHE    0x01000000\hyphpar0\par\pard\sb400\sl260 \fs20\lang1033\f0 Other auxiliary vector types are reserved. No flags are currently defined for AT_FLAGS on the 64-bit PowerPC Architecture. \hyphpar0\par\pard\sb400\sl260 When a process receives control, its stack holds the arguments, environment, and auxiliary vector from exec. Argument strings, environment strings, and the auxiliary information appear in no specific order within the information block; the system makes no guarantees about their relative arrangement. The system may also leave an unspecified amount of memory between the null auxiliary vector entry and the beginning of the information block. The back chain word of the first stack frame contains a null pointer (0). \hyphpar0\par\pard\sb259\s2\sl449 {\*\bkmkstart ID_CODE_45_EX}{\*\bkmkend ID_CODE_45_EX}\b\fs34\lang1024 3.5. Coding Examples\keepn\hyphpar0\par\pard\sb400\sl260 \b0\fs20\lang1033 This section describes example code sequences for fundamental operations such as calling functions, accessing static objects, and transferring control from one part of a program to another. Previous sections discussed how a program may use the machine or the operating system, and they specified what a program may and may not assume about the execution environment. Unlike previous material, the information in this section illustrates how operations may be done, not how they must be done.\hyphpar0\par\pard\sb400\sl260 As before, examples use the ANSI C language. Other programming languages may use the same conventions displayed below, but failure to do so does not prevent a program from conforming to the ABI. \hyphpar0\par\pard\sb400\sl260 64-bit PowerPC code is normally position independent. That is, the code is not tied to a specific load address, and may be executed properly at various positions in virtual memory. Although it is possible to write position dependent code on the 64-bit PowerPC, these code examples only show position independent code. \hyphpar0\par\pard\sb200\li400\sl234 \b\fs18\lang1024 Note: \b0\f1 The examples below show code fragments with various simplifications. They are intended to explain addressing modes, not to show optimal code sequences or to reproduce compiler output.\hyphpar0\par\pard\sb216\s3\sl374 {\*\bkmkstart ID_MOD_45_OVER}{\*\bkmkend ID_MOD_45_OVER}\b\fs28\f0 3.5.1. Code Model Overview\keepn\hyphpar0\par\pard\sb400\sl260 \b0\fs20\lang1033 When the system creates a process image, the executable file portion of the process has fixed addresses and the system chooses shared object library virtual addresses to avoid conflicts with other segments in the process. To maximize text sharing, shared objects conventionally use position-independent code, in which instructions contain no absolute addresses. Shared object text segments can be loaded at various virtual addresses without having to change the segment images. Thus multiple processes can share a single shared object text segment, even if the segment resides at a different virtual address in each process.\hyphpar0\par\pard\sb400\sl260 Position-independent code relies on two techniques:\hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16\lang1024 \'95\tab \fs20 Control transfer instructions hold addresses relative to the effective address (EA) or use registers that hold the transfer address. An EA-relative branch computes its destination address in terms of the current EA, not relative to any absolute address.\hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 When the program requires an absolute address, it computes the desired value. Instead of embedding absolute addresses in instructions (in the text segment), the compiler generates code to calculate an absolute address (in a register or in the stack or data segment) during execution.\hyphpar0\par\pard\sb400\sl260 \lang1033 Because the 64-bit PowerPC Architecture provides EA-relative branch instructions and also branch instructions using registers that hold the transfer address, compilers can satisfy the first condition easily. \hyphpar0\par\pard\sb400\sl260 A "Global Offset Table," or GOT, provides information for address calculation. Position independent object files (executable and shared object files) have a table in their data segment that holds addresses. When the system creates the memory image for an object file, the table entries are relocated to reflect the absolute virtual address as assigned for an individual process. Because data segments are private for each process, the table entries can change--unlike text segments, which multiple processes share. \hyphpar0\par\pard\sb216\s3\sl374 {\*\bkmkstart ID_TOC_45_SEC}{\*\bkmkend ID_TOC_45_SEC}\b\fs28\lang1024 3.5.2. The TOC section\keepn\hyphpar0\par\pard\sb400\sl260 \b0\fs20\lang1033 ELF processor-specific supplements normally define a GOT ("Global Offset Table") section used to hold addresses for position independent code. Some ELF processor-specific supplements, including the 32-bit PowerPC Processor Supplement, define a small data section. The same register is sometimes used to address both the GOT and the small data section. \hyphpar0\par\pard\sb400\sl260 The 64-bit PowerOpen ABI defines a TOC ("Table of Contents") section. The TOC combines the functions of the GOT and the small data section. \hyphpar0\par\pard\sb400\sl260 This ABI uses the term TOC. The TOC section defined here is intended to be similar to that defined by the 64-bit PowerOpen ABI. The TOC section contains a conventional ELF GOT, and may optionally contain a small data area. The GOT and the small data area may be intermingled in the TOC section. \hyphpar0\par\pard\sb400\sl260 The TOC section is accessed via the dedicated TOC pointer register, r2. Accesses are normally made using the register indirect with immediate index mode supported by the 64-bit PowerPC processor, which limits a single TOC section to 65,536 bytes, enough for 8,192 GOT entries. \hyphpar0\par\pard\sb400\sl260 The value of the TOC pointer register is called the TOC base. The TOC base is typically the first address in the TOC plus 0x8000, thus permitting a full 64 Kbyte TOC. \hyphpar0\par\pard\sb400\sl260 A relocatable object file must have a single TOC section and a single TOC base. However, when the link editor combines relocatable object files to form a single executable or shared object, it may create multiple TOC sections. The link editor is responsible for deciding how to associate TOC sections with object files. Normally the link editor will only create multiple TOC sections if it has more than 65,536 bytes to store in a TOC. \hyphpar0\par\pard\sb400\sl260 All link editors which support this ABI must support a single TOC section, but support for multiple TOC sections is optional. \hyphpar0\par\pard\sb400\sl260 Each shared object will have a separate TOC or TOCs. \hyphpar0\par\pard\sb200\li400\sl234 \b\fs18\lang1024 Note: \b0\f1 This ABI does not actually restrict the size of a TOC section. It is permissible to use a larger TOC section, if code uses a different addressing mode to access it. The AIX link editor, in particular, does not support multiple TOC sections, but instead inserts call out code at link time to support larger TOC sections.\hyphpar0\par\pard\sb216\s3\sl374 {\*\bkmkstart ID_TOCALS}{\*\bkmkend ID_TOCALS}\b\fs28\f0 3.5.3. TOC Assembly Language Syntax\keepn\hyphpar0\par\pard\sb400\sl260 \b0\fs20\lang1033 Desire for compatibility with both ELF systems and PowerOpen systems suggests two different assembly language syntaxes to be used when referring to the TOC section. This syntax is not part of the official ABI. The description here is only for information purposes. Particular assemblers may support both syntaxes, only one, or neither. \hyphpar0\par\pard\sb400\sl260 The ELF syntax uses @got and @toc. The syntax SYMBOL@got refers to the offset in the TOC at which the value of SYMBOL (that is, the address of the variable whose name is SYMBOL) is stored, assuming the offset is no larger than 16 bits. For example, \hyphpar0\par\pard\sb200\sl234 \fs18\lang1024\f2 ld   r3,x@got(r2)\hyphpar0\par\pard\sb400\sl260 \fs20\lang1033\f0 SYMBOL@got will be an offset within the global offset table, which as noted above, forms part of the TOC section. \hyphpar0\par\pard\sb400\sl260 Ordinarily the link editor will avoid having a TOC, and hence a GOT, larger than 64 Kbytes, perhaps by support multiple TOC sections, or via some other technique. However, for flexibility, there is a syntax for 32 bit offsets to the GOT. The syntaxes SYMBOL@got@ha, SYMBOL@got@h, and SYMBOL@got@l refer to the high adjusted, high, and low parts of the GOT offset. (The meaning of ``high adjusted'' is explained in {\field{\*\fldinst   HYPERLINK  \\l ID_RELOC_45_TYPE}{\fldrslt Section 4.5.1}}). \hyphpar0\par\pard\sb400\sl260 The syntax SYMBOL@toc refers to the value (SYMBOL - base (TOC)), where base (TOC) represents the TOC base for the current object file. This provides the address of the variable whose name is SYMBOL, as an offset from the TOC base. This assumes that the variable may be found within the TOC, and that its offset is no larger than 16 bits. \hyphpar0\par\pard\sb400\sl260 As with the GOT, the syntaxes SYMBOL@toc@ha, SYMBOL@toc@h, and SYMBOL@toc@l refer to the high adjusted, high, and low parts of the TOC offset. \hyphpar0\par\pard\sb400\sl260 The syntax SYMBOL@got@plt may be used to refer to the offset in the TOC of a procedure linkage table entry stored in the global offset table. The corresponding syntaxes SYMBOL@got@plt@ha, SYMBOL@got@plt@h, and SYMBOL@got@plt@l are also defined. \hyphpar0\par\pard\sb200\li400\sl234 \b\fs18\lang1024 Note: \b0\f1 If X is a variable stored in the TOC, then X@got will be the offset within the TOC of a doubleword whose value is X@toc.\hyphpar0\par\pard\sb400\sl260 \fs20\lang1033\f0 The special symbol .TOC.@tocbase is used to represent the TOC base for the current object file. The following might appear in a function descriptor definition: \hyphpar0\par\pard\sb200\sl234 \fs18\lang1024\f2       .quad .TOC.@tocbase\hyphpar0\par\pard\sb400\sl260 \fs20\lang1033\f0 The PowerOpen syntax is more complex. It is derived from the different representation of the TOC section in XCOFF. \hyphpar0\par\pard\sb400\sl260 Assembly code first uses the .toc pseudo-op to enter the TOC section. It then uses a label to name a particular element. It then uses the .tc pseudo-op to indicate which GOT entry it wishes to name. Later in the code, the label is used with the TOC register to load the address. For example: \hyphpar0\par\pard\sb200\sl234 \fs18\lang1024\f2       .toc\sa0\par\fi0\sb0
  .L1:\sa0\par\fi0\sb0
      .tc  x[TC],x\sa0\par\fi0\sb0
      ...\sa0\par\fi0\sb0
      ld   r3,.L1(r2)\hyphpar0\par\pard\sb400\sl260 \fs20\lang1033\f0 This creates a GOT entry for the variable x, and names that entry .L1 for the remainder of the assembly. The effect is the same as the single ELF-style instruction above. \hyphpar0\par\pard\sb400\sl260 The special value TOC[tc0] is used to represent the TOC base for the current object file: \hyphpar0\par\pard\sb200\sl234 \fs18\lang1024\f2       .quad TOC[tc0]\hyphpar0\par\pard\sb400\sl260 \fs20\lang1033\f0 The PowerOpen syntax permits other data to be stored in the .toc section. The assembler will output this data in a .toc section, and convert references as though its address were specified with @toc rather than @got. \hyphpar0\par\pard\sb400\sl260 There is a significant difference in representation of the TOC in this ABI and in the 64-bit PowerOpen ABI. Relocatable object files created using the 64-bit PowerOpen ABI have a .toc section which contains real data. The link editor uses garbage collection to discard duplicate information including in particular TOC entries which refer to the same variable. In this ABI, relocatable object files do not contain .got sections holding real data. Instead, the GOT is created by the link editor based on relocations created by @got references. This ABI does not require the link editor to support garbage collection. This ABI does permit real data to exist in .toc sections, but this data will never be referred to directly by instructions which use @got references. @got references always refer to the GOT which is created by the link editor when creating an executable or a shared object. \hyphpar0\par\pard\sb216\s3\sl374 {\*\bkmkstart ID_PRO_45_EP}{\*\bkmkend ID_PRO_45_EP}\b\fs28\lang1024 3.5.4. Function Prologue and Epilogue\keepn\hyphpar0\par\pard\sb400\sl260 \b0\fs20\lang1033 This section describes functions' prologue and epilogue code. A function's prologue establishes a stack frame, if necessary, and may save any nonvolatile registers it uses. A function's epilogue generally restores registers that were saved in the prologue code, restores the previous stack frame, and returns to the caller. Except for the rules below, this ABI does not mandate predetermined code sequences for function prologues and epilogues. However, the following rules, which permit reliable call chain backtracing, shall be followed: \hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16\lang1024 \'95\tab \fs20 If the function uses any nonvolatile general registers, it shall save them in the general register save area. If the function does not require a stack frame, this may be done using negative stack offsets from the caller's stack pointer.\hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 If the function uses any nonvolatile floating point registers, it shall save them in the floating point register save area. If the function does not require a stack frame, this may be done using negative stack offsets from the caller's stack pointer.\hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 Before a function calls any other function, it shall establish its own stack frame, whose size shall be a multiple of 16 bytes, and shall save the link register at the time of entry in the LR save area of its caller's stack frame.\hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 If the function uses any nonvolatile fields in the CR, it shall save the CR in the CR save area of the caller's stack frame.\hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 If a function establishes a stack frame, it shall update the back chain word of the stack frame atomically with the stack pointer (r1) using one of the "Store Double Word with Update" instructions.\hyphpar0\par\pard\sb100\li400\sl260\fi-200 \tx400 \fs14 \'95\tab \fs20 For small (no larger than 32 Kbytes) stack frames, this may be accomplished with a "Store Double Word with Update" instruction with an appropriate negative displacement.\hyphpar0\par\pard\sb100\li400\sl260\fi-200 \tx400 \fs14 \'95\tab \fs20 For larger stack frames, the prologue shall load a volatile register with the two's complement of the size of the frame (computed with addis and addi or ori instructions) and issue a "Store Double Word with Update Indexed" instruction.\hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 When a function deallocates its stack frame, it must do so atomically, either by loading the stack pointer (r1) with the value in the back chain field or by incrementing the stack pointer by the same amount by which it has been decremented.\hyphpar0\par\pard\sb400\sl260 \lang1033 In-line code may be used to save or restore nonvolatile general or floating-point registers that the function uses. However, if there are many registers to be saved or restored, it may be more efficient to call one of the system subroutines described below.\hyphpar0\par\pard\sb216\s3\sl374 {\*\bkmkstart ID_SAVE_45_RES}{\*\bkmkend ID_SAVE_45_RES}\b\fs28\lang1024 3.5.5. Register Saving and Restoring Functions\keepn\hyphpar0\par\pard\sb400\sl260 \b0\fs20\lang1033 The register saving and restoring functions described in this section use nonstandard calling conventions which ordinarily require them to be statically linked into any executable or shared object modules in which they are used. Nevertheless, unlike 32-bit PowerPC ELF, these functions are considered part of the official ABI. In particular, the link editor is permitted to treat calls to these functions specially, such as by changing a call to one of these function into a call to an absolute address as in the PowerOpen ABI. \hyphpar0\par\pard\sb400\sl260 As shown in The Stack Frame section above, the general register save area is not at a fixed offset from either the caller's SP or the callee's SP. The floating point register save area starts at a fixed position from the caller's SP on entry to the callee, but the position of the general register save area depends upon the number of floating point registers to be saved. Thus it is impossible to write a general register saving routine which uses fixed offsets from the SP. \hyphpar0\par\pard\sb400\sl260 If the routine needs to save both general and floating point registers, code can use r12 as the pointer for saving and restoring the general purpose registers. (r12 is a volatile register but does not contain input parameters). This leads to the definition of multiple register save and restore routines, each of which saves or restores M floating point registers and N general registers. \hyphpar0\par\pard\sb216\s3\sl374 {\*\bkmkstart ID_SAVEREG}{\*\bkmkend ID_SAVEREG}\b\fs28\lang1024 3.5.6. Saving General Registers Only\keepn\hyphpar0\par\pard\sb400\sl260 \b0\fs20\lang1033 For a function that saves/restores N general registers and no floating point registers, the saving can be done using individual store/load instructions or by calling system provided routines as shown below. \hyphpar0\par\pard\sb400\sl260 In the following, the number of registers being saved is N, and <32-N> is the first register number to be saved/restored. All registers from <32-N> up to 31, inclusive, are saved/restored. \hyphpar0\par\pard\sb400\sl260 FRAME_SIZE is the size of the stack frame, here assumed to be less than 32 Kbytes. \hyphpar0\par\pard\sb200\sl234 \fs18\lang1024\f2     mflr  r0                    # Move LR into r0\sa0\par\fi0\sb0
    bl    _savegpr0_<32-N>      # Call routine to save general registers\sa0\par\fi0\sb0
    stdu  r1,(-FRAME_SIZE)(r1)  # Create stack frame\sa0\par\fi0\sb0
    ...\sa0\par\fi0\sb0
    (save CR if necessary)\sa0\par\fi0\sb0
    ...                         # Body of function\sa0\par\fi0\sb0
    ...\sa0\par\fi0\sb0
    (reload CR if necessary)\sa0\par\fi0\sb0
    ...\sa0\par\fi0\sb0
    (reload caller's SP into r1)\sa0\par\fi0\sb0
    b     _restgpr0_<32-N>      # Restore registers and return\hyphpar0\par\pard\sb216\s3\sl374 {\*\bkmkstart ID_SAVE_45_FLOAT}{\*\bkmkend ID_SAVE_45_FLOAT}\b\fs28\f0 3.5.7. Saving General Registers and Floating Point Registers\keepn\hyphpar0\par\pard\sb400\sl260 \b0\fs20\lang1033 For a function that saves/restores N general registers and M floating point registers, the saving can be done using individual store/load instructions or by calling system provided routines as shown below.\hyphpar0\par\pard\sb200\sl234 \fs18\lang1024\f2     mflr  r0                    # Move LR into r0\sa0\par\fi0\sb0
    subi  r12,r1,8*M            # Set r12 to general reg save area\sa0\par\fi0\sb0
    bl    _savegpr1_<32-N>      # Call routine to save general registers\sa0\par\fi0\sb0
    bl    _savefpr_<32-M>       # Call routine to save floating point regs\sa0\par\fi0\sb0
    stdu  r1,(-FRAME_SIZE)(r1)  # Create stack frame\sa0\par\fi0\sb0
    ...\sa0\par\fi0\sb0
    (save CR if necessary)\sa0\par\fi0\sb0
    ...                         # Body of function\sa0\par\fi0\sb0
    ...\sa0\par\fi0\sb0
    (reload CR if necessary)\sa0\par\fi0\sb0
    ...\sa0\par\fi0\sb0
    (reload caller's SP into r1)\sa0\par\fi0\sb0
    subi  r12,r1,8*M            # Set r12 to general reg save area\sa0\par\fi0\sb0
    bl    _restgpr1_<32-N>      # Restore general registers\sa0\par\fi0\sb0
    b     _restfpr_<32-M>       # Restore floating point regs and return\hyphpar0\par\pard\sb216\s3\sl374 {\*\bkmkstart _662}{\*\bkmkend _662}\b\fs28\f0 3.5.8. Saving Floating Point Registers Only\keepn\hyphpar0\par\pard\sb400\sl260 \b0\fs20\lang1033 For a function that saves/restores M floating point registers and no general registers, the saving can be done using individual store/load instructions or by calling system provided routines as shown below.\hyphpar0\par\pard\sb200\sl234 \fs18\lang1024\f2     mflr  r0                    # Move LR into r0\sa0\par\fi0\sb0
    bl    _savefpr_<32-M>       # Call routine to save general registers\sa0\par\fi0\sb0
    stdu  r1,(-FRAME_SIZE)(r1)  # Create stack frame\sa0\par\fi0\sb0
    ...\sa0\par\fi0\sb0
    (save CR if necessary)\sa0\par\fi0\sb0
    ...                         # Body of function\sa0\par\fi0\sb0
    ...\sa0\par\fi0\sb0
    (reload CR if necessary)\sa0\par\fi0\sb0
    ...\sa0\par\fi0\sb0
    (reload caller's SP into r1)\sa0\par\fi0\sb0
    b     _restgpr_<32-M>       # Restore registers and return\hyphpar0\par\pard\sb216\s3\sl374 {\*\bkmkstart ID_SAVE_45_RESTORE}{\*\bkmkend ID_SAVE_45_RESTORE}\b\fs28\f0 3.5.9. Save and Restore Services\keepn\hyphpar0\par\pard\sb400\sl260 \b0\fs20\lang1033 Systems must provide three sets of routines, which may be implemented as multiple entry point routines or as individual routines. They must adhere to the following rules.\hyphpar0\par\pard\sb400\sl260 Each _savegpr0_N routine saves the general registers from rN to r31, inclusive. Each routine also saves the LR. When the routine is called, r1 must point to the start of the general register save area, and r0 must contain the value of LR on function entry. \hyphpar0\par\pard\sb400\sl260 The _restgpr0_N routines restore the general registers from rN to r31, and then return to the caller. When the routine is called, r1 must point to the start of the general register save area. \hyphpar0\par\pard\sb400\sl260 Here is a sample implementation of _savegpr0_N and _restgpr0_N. \hyphpar0\par\pard\sb200\sl234 \fs18\lang1024\f2   _savegpr0_14:  std  r14,-144(r1)\sa0\par\fi0\sb0
  _savegpr0_15:  std  r15,-136(r1)\sa0\par\fi0\sb0
  _savegpr0_16:  std  r16,-128(r1)\sa0\par\fi0\sb0
  _savegpr0_17:  std  r17,-120(r1)\sa0\par\fi0\sb0
  _savegpr0_18:  std  r18,-112(r1)\sa0\par\fi0\sb0
  _savegpr0_19:  std  r19,-104(r1)\sa0\par\fi0\sb0
  _savegpr0_20:  std  r20,-96(r1)\sa0\par\fi0\sb0
  _savegpr0_21:  std  r21,-88(r1)\sa0\par\fi0\sb0
  _savegpr0_22:  std  r22,-80(r1)\sa0\par\fi0\sb0
  _savegpr0_23:  std  r23,-72(r1)\sa0\par\fi0\sb0
  _savegpr0_24:  std  r24,-64(r1)\sa0\par\fi0\sb0
  _savegpr0_25:  std  r25,-56(r1)\sa0\par\fi0\sb0
  _savegpr0_26:  std  r26,-48(r1)\sa0\par\fi0\sb0
  _savegpr0_27:  std  r27,-40(r1)\sa0\par\fi0\sb0
  _savegpr0_28:  std  r28,-32(r1)\sa0\par\fi0\sb0
  _savegpr0_29:  std  r29,-24(r1)\sa0\par\fi0\sb0
  _savegpr0_30:  std  r30,-16(r1)\sa0\par\fi0\sb0
  _savegpr0_31:  std  r31,-8(r1)\sa0\par\fi0\sb0
                 std  r0, 16(r1)\sa0\par\fi0\sb0
                 blr\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
  _restgpr0_14:  ld   r14,-144(r1)\sa0\par\fi0\sb0
  _restgpr0_15:  ld   r15,-136(r1)\sa0\par\fi0\sb0
  _restgpr0_16:  ld   r16,-128(r1)\sa0\par\fi0\sb0
  _restgpr0_17:  ld   r17,-120(r1)\sa0\par\fi0\sb0
  _restgpr0_18:  ld   r18,-112(r1)\sa0\par\fi0\sb0
  _restgpr0_19:  ld   r19,-104(r1)\sa0\par\fi0\sb0
  _restgpr0_20:  ld   r20,-96(r1)\sa0\par\fi0\sb0
  _restgpr0_21:  ld   r21,-88(r1)\sa0\par\fi0\sb0
  _restgpr0_22:  ld   r22,-80(r1)\sa0\par\fi0\sb0
  _restgpr0_23:  ld   r23,-72(r1)\sa0\par\fi0\sb0
  _restgpr0_24:  ld   r24,-64(r1)\sa0\par\fi0\sb0
  _restgpr0_25:  ld   r25,-56(r1)\sa0\par\fi0\sb0
  _restgpr0_26:  ld   r26,-48(r1)\sa0\par\fi0\sb0
  _restgpr0_27:  ld   r27,-40(r1)\sa0\par\fi0\sb0
  _restgpr0_28:  ld   r28,-32(r1)\sa0\par\fi0\sb0
  _restgpr0_29:  ld   r0, 16(r1)\sa0\par\fi0\sb0
                 ld   r29,-24(r1)\sa0\par\fi0\sb0
                 mtlr r0\sa0\par\fi0\sb0
                 ld   r30,-16(r1)\sa0\par\fi0\sb0
                 ld   r31,-8(r1)\sa0\par\fi0\sb0
                 blr\sa0\par\fi0\sb0
  _restgpr0_30:  ld   r30,-16(r1)\sa0\par\fi0\sb0
  _restgpr0_31:  ld   r0, 16(r1)\sa0\par\fi0\sb0
                 ld   r31,-8(r1)\sa0\par\fi0\sb0
                 mtlr r0\sa0\par\fi0\sb0
                 blr\hyphpar0\par\pard\sb400\sl260 \fs20\lang1033\f0 Each _savegpr1_N routine saves the general registers from rN to r31, inclusive. When the routine is called, r12 must point to the start of the general register save area. \hyphpar0\par\pard\sb400\sl260 The _restgpr1_N routines restore the general registers from rN to r31. When the routine is called, r12 must point to the start of the general register save area. \hyphpar0\par\pard\sb400\sl260 Here is a sample implementation of _savegpr1_N and _restgpr1_N. \hyphpar0\par\pard\sb200\sl234 \fs18\lang1024\f2   _savegpr1_14:  std  r14,-144(r12)\sa0\par\fi0\sb0
  _savegpr1_15:  std  r15,-136(r12)\sa0\par\fi0\sb0
  _savegpr1_16:  std  r16,-128(r12)\sa0\par\fi0\sb0
  _savegpr1_17:  std  r17,-120(r12)\sa0\par\fi0\sb0
  _savegpr1_18:  std  r18,-112(r12)\sa0\par\fi0\sb0
  _savegpr1_19:  std  r19,-104(r12)\sa0\par\fi0\sb0
  _savegpr1_20:  std  r20,-96(r12)\sa0\par\fi0\sb0
  _savegpr1_21:  std  r21,-88(r12)\sa0\par\fi0\sb0
  _savegpr1_22:  std  r22,-80(r12)\sa0\par\fi0\sb0
  _savegpr1_23:  std  r23,-72(r12)\sa0\par\fi0\sb0
  _savegpr1_24:  std  r24,-64(r12)\sa0\par\fi0\sb0
  _savegpr1_25:  std  r25,-56(r12)\sa0\par\fi0\sb0
  _savegpr1_26:  std  r26,-48(r12)\sa0\par\fi0\sb0
  _savegpr1_27:  std  r27,-40(r12)\sa0\par\fi0\sb0
  _savegpr1_28:  std  r28,-32(r12)\sa0\par\fi0\sb0
  _savegpr1_29:  std  r29,-24(r12)\sa0\par\fi0\sb0
  _savegpr1_30:  std  r30,-16(r12)\sa0\par\fi0\sb0
  _savegpr1_31:  std  r31,-8(r12)\sa0\par\fi0\sb0
                 blr\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
  _restgpr1_14:  ld   r14,-144(r12)\sa0\par\fi0\sb0
  _restgpr1_15:  ld   r15,-136(r12)\sa0\par\fi0\sb0
  _restgpr1_16:  ld   r16,-128(r12)\sa0\par\fi0\sb0
  _restgpr1_17:  ld   r17,-120(r12)\sa0\par\fi0\sb0
  _restgpr1_18:  ld   r18,-112(r12)\sa0\par\fi0\sb0
  _restgpr1_19:  ld   r19,-104(r12)\sa0\par\fi0\sb0
  _restgpr1_20:  ld   r20,-96(r12)\sa0\par\fi0\sb0
  _restgpr1_21:  ld   r21,-88(r12)\sa0\par\fi0\sb0
  _restgpr1_22:  ld   r22,-80(r12)\sa0\par\fi0\sb0
  _restgpr1_23:  ld   r23,-72(r12)\sa0\par\fi0\sb0
  _restgpr1_24:  ld   r24,-64(r12)\sa0\par\fi0\sb0
  _restgpr1_25:  ld   r25,-56(r12)\sa0\par\fi0\sb0
  _restgpr1_26:  ld   r26,-48(r12)\sa0\par\fi0\sb0
  _restgpr1_27:  ld   r27,-40(r12)\sa0\par\fi0\sb0
  _restgpr1_28:  ld   r28,-32(r12)\sa0\par\fi0\sb0
  _restgpr1_29:  ld   r29,-24(r12)\sa0\par\fi0\sb0
  _restgpr1_30:  ld   r30,-16(r12)\sa0\par\fi0\sb0
  _restgpr1_31:  ld   r31,-8(r12)\sa0\par\fi0\sb0
                 blr\hyphpar0\par\pard\sb400\sl260 \fs20\lang1033\f0 Each _savefpr_M routine saves the floating point registers from fM to f31, inclusive. When the routine is called, r1 must point to the start of the floating point register save area, and r0 must contain the value of LR on function entry. \hyphpar0\par\pard\sb400\sl260 The _restfpr_M routines restore the floating point registers from fM to f31. When the routine is called, r1 must point to the start of the floating point register save area. \hyphpar0\par\pard\sb400\sl260 Here is a sample implementation of _savepr_M and _restfpr_M. \hyphpar0\par\pard\sb200\sl234 \fs18\lang1024\f2   _savefpr_14:  stfd f14,-144(r1)\sa0\par\fi0\sb0
  _savefpr_15:  stfd f15,-136(r1)\sa0\par\fi0\sb0
  _savefpr_16:  stfd f16,-128(r1)\sa0\par\fi0\sb0
  _savefpr_17:  stfd f17,-120(r1)\sa0\par\fi0\sb0
  _savefpr_18:  stfd f18,-112(r1)\sa0\par\fi0\sb0
  _savefpr_19:  stfd f19,-104(r1)\sa0\par\fi0\sb0
  _savefpr_20:  stfd f20,-96(r1)\sa0\par\fi0\sb0
  _savefpr_21:  stfd f21,-88(r1)\sa0\par\fi0\sb0
  _savefpr_22:  stfd f22,-80(r1)\sa0\par\fi0\sb0
  _savefpr_23:  stfd f23,-72(r1)\sa0\par\fi0\sb0
  _savefpr_24:  stfd f24,-64(r1)\sa0\par\fi0\sb0
  _savefpr_25:  stfd f25,-56(r1)\sa0\par\fi0\sb0
  _savefpr_26:  stfd f26,-48(r1)\sa0\par\fi0\sb0
  _savefpr_27:  stfd f27,-40(r1)\sa0\par\fi0\sb0
  _savefpr_28:  stfd f28,-32(r1)\sa0\par\fi0\sb0
  _savefpr_29:  stfd f29,-24(r1)\sa0\par\fi0\sb0
  _savefpr_30:  stfd f30,-16(r1)\sa0\par\fi0\sb0
  _savefpr_31:  stfd f31,-8(r1)\sa0\par\fi0\sb0
                std  r0, 16(r1)\sa0\par\fi0\sb0
                blr\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
  _restfpr_14:  lfd  f14,-144(r1)\sa0\par\fi0\sb0
  _restfpr_15:  lfd  f15,-136(r1)\sa0\par\fi0\sb0
  _restfpr_16:  lfd  f16,-128(r1)\sa0\par\fi0\sb0
  _restfpr_17:  lfd  f17,-120(r1)\sa0\par\fi0\sb0
  _restfpr_18:  lfd  f18,-112(r1)\sa0\par\fi0\sb0
  _restfpr_19:  lfd  f19,-104(r1)\sa0\par\fi0\sb0
  _restfpr_20:  lfd  f20,-96(r1)\sa0\par\fi0\sb0
  _restfpr_21:  lfd  f21,-88(r1)\sa0\par\fi0\sb0
  _restfpr_22:  lfd  f22,-80(r1)\sa0\par\fi0\sb0
  _restfpr_23:  lfd  f23,-72(r1)\sa0\par\fi0\sb0
  _restfpr_24:  lfd  f24,-64(r1)\sa0\par\fi0\sb0
  _restfpr_25:  lfd  f25,-56(r1)\sa0\par\fi0\sb0
  _restfpr_26:  lfd  f26,-48(r1)\sa0\par\fi0\sb0
  _restfpr_27:  lfd  f27,-40(r1)\sa0\par\fi0\sb0
  _restfpr_28:  lfd  f28,-32(r1)\sa0\par\fi0\sb0
  _restfpr_29:  lfd  f29,-24(r1)\sa0\par\fi0\sb0
  _restfpr_29:  ld   r0, 16(r1)\sa0\par\fi0\sb0
                lfd  f29,-24(r1)\sa0\par\fi0\sb0
                mtlr r0\sa0\par\fi0\sb0
                lfd  f30,-16(r1)\sa0\par\fi0\sb0
                lfd  f31,-8(r1)\sa0\par\fi0\sb0
                blr\sa0\par\fi0\sb0
  _restfpr_30:  lfd  f30,-16(r1)\sa0\par\fi0\sb0
  _restfpr_31:  ld   r0, 16(r1)\sa0\par\fi0\sb0
                lfd  f31,-8(r1)\sa0\par\fi0\sb0
                mtlr r0\sa0\par\fi0\sb0
                blr\hyphpar0\par\pard\sb400\sl260 \fs20\lang1033\f0 Each _savevr_M routine saves the vector registers from vM to v31, inclusive. When the routine is called, r0 must point to the word just beyound the end of the vector register save area. On return the value of r0 is unchanged while r12 may be modified.\hyphpar0\par\pard\sb400\sl260 The _restvr_M routines restore the vector registers from vM to v31. When the routine is called, r0 must point to the word just beyound the end of the vector register save area. On return the value of r0 is unchanged while r12 may be modified.\hyphpar0\par\pard\sb400\sl260 Here is a sample implementation of _savevr_M and _restvr_M.\hyphpar0\par\pard\sb200\sl234 \fs18\lang1024\f2   _savevr_20:   addi r12,r0,-192\sa0\par\fi0\sb0
                stvx v20,r12,r0\sa0\par\fi0\sb0
  _savevr_21:   addi r12,r0,-176\sa0\par\fi0\sb0
                stvx v21,r12,r0\sa0\par\fi0\sb0
  _savevr_22:   addi r12,r0,-160\sa0\par\fi0\sb0
                stvx v22,r12,r0\sa0\par\fi0\sb0
  _savevr_23:   addi r12,r0,-144\sa0\par\fi0\sb0
                stvx v23,r12,r0\sa0\par\fi0\sb0
  _savevr_24:   addi r12,r0,-128\sa0\par\fi0\sb0
                stvx v24,r12,r0\sa0\par\fi0\sb0
  _savevr_25:   addi r12,r0,-112\sa0\par\fi0\sb0
                stvx v25,r12,r0\sa0\par\fi0\sb0
  _savevr_26:   addi r12,r0,-96\sa0\par\fi0\sb0
                stvx v26,r12,r0\sa0\par\fi0\sb0
  _savevr_27:   addi r12,r0,-80\sa0\par\fi0\sb0
                stvx v27,r12,r0\sa0\par\fi0\sb0
  _savevr_28:   addi r12,r0,-64\sa0\par\fi0\sb0
                stvx v28,r12,r0\sa0\par\fi0\sb0
  _savevr_29:   addi r12,r0,-48\sa0\par\fi0\sb0
                stvx v29,r12,r0\sa0\par\fi0\sb0
  _savevr_30:   addi r12,r0,-32\sa0\par\fi0\sb0
                stvx v30,r12,r0\sa0\par\fi0\sb0
  _savevr_31:   addi r12,r0,-16\sa0\par\fi0\sb0
                stvx v31,r12,r0\sa0\par\fi0\sb0
                blr\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
  _restvr_20:   addi r12,r0,-192\sa0\par\fi0\sb0
                lvx  v20,r12,r0\sa0\par\fi0\sb0
  _restvr_21:   addi r12,r0,-176\sa0\par\fi0\sb0
                lvx  v21,r12,r0\sa0\par\fi0\sb0
  _restvr_22:   addi r12,r0,-160\sa0\par\fi0\sb0
                lvx  v22,r12,r0\sa0\par\fi0\sb0
  _restvr_23:   addi r12,r0,-144\sa0\par\fi0\sb0
                lvx  v23,r12,r0\sa0\par\fi0\sb0
  _restvr_24:   addi r12,r0,-128\sa0\par\fi0\sb0
                lvx  v24,r12,r0\sa0\par\fi0\sb0
  _restvr_25:   addi r12,r0,-112\sa0\par\fi0\sb0
                lvx  v25,r12,r0\sa0\par\fi0\sb0
  _restvr_26:   addi r12,r0,-96\sa0\par\fi0\sb0
                lvx  v26,r12,r0\sa0\par\fi0\sb0
  _restvr_27:   addi r12,r0,-80\sa0\par\fi0\sb0
                lvx  v27,r12,r0\sa0\par\fi0\sb0
  _restvr_28:   addi r12,r0,-64\sa0\par\fi0\sb0
                lvx  v28,r12,r0\sa0\par\fi0\sb0
  _restvr_29:   addi r12,r0,-48\sa0\par\fi0\sb0
                lvx  v29,r12,r0\sa0\par\fi0\sb0
  _restvr_30:   addi r12,r0,-32\sa0\par\fi0\sb0
                lvx  v30,r12,r0\sa0\par\fi0\sb0
  _restvr_31:   addi r12,r0,-16\sa0\par\fi0\sb0
                lvx  v31,r12,r0\sa0\par\fi0\sb0
                blr\hyphpar0\par\pard\sb216\s3\sl374 {\*\bkmkstart ID_DATA_45_OBJ}{\*\bkmkend ID_DATA_45_OBJ}\b\fs28\f0 3.5.10. Data Objects\keepn\hyphpar0\par\pard\sb400\sl260 \b0\fs20\lang1033 This section describes only objects with static storage duration. It excludes stack-resident objects because programs always compute their virtual addresses relative to the stack or frame pointers. \hyphpar0\par\pard\sb400\sl260 In the 64-bit PowerPC Architecture, only load and store instructions access memory. Because 64-bit PowerPC instructions cannot hold 64-bit addresses directly, a program normally computes an address into a register and accesses memory through the register. \hyphpar0\par\pard\sb400\sl260 It is possible to build addresses using absolute code which puts symbol addresses into instructions. However, the difficulty of building a 64-bit address means that 64-bit PowerPC code normally loads an address out of a memory location in the TOC section. Combining the TOC offset of the symbol with the TOC address in register r2 gives the absolute address of the TOC entry holding the desired address. \hyphpar0\par\pard\sb400\sl260 The following figures show sample assembly language equivalents to C language code. The @got syntax is explained above, in the section TOC Assembly Language Syntax. \hyphpar0\par\pard\sb400\sl260 Load and Store; variables are not in TOC:\hyphpar0\par\pard\sb200\sl234 \fs18\lang1024\f2 C                             Assembly\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
extern int src;\sa0\par\fi0\sb0
extern int dst;\sa0\par\fi0\sb0
extern int *ptr;\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
dst = src;\sa0\par\fi0\sb0
                              ld  r6,src@got(r2)\sa0\par\fi0\sb0
                              ld  r7,dst@got(r2)\sa0\par\fi0\sb0
                              lwz r0,0(r6)\sa0\par\fi0\sb0
                              stw r0,0(r7)\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
ptr = &dst;\sa0\par\fi0\sb0
                              ld  r0,dst@got(r2)\sa0\par\fi0\sb0
                              ld  r7,ptr@got(r2)\sa0\par\fi0\sb0
                              std r0,0(r7)\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
*ptr = src;\sa0\par\fi0\sb0
                              ld  r6,src@got(r2)\sa0\par\fi0\sb0
                              ld  r7,ptr@got(r2)\sa0\par\fi0\sb0
                              lwz r0,0(r6)\sa0\par\fi0\sb0
                              ld  r7,0(r7)\sa0\par\fi0\sb0
                              stw r0,0(r7)\hyphpar0\par\pard\sb400\sl260 \fs20\lang1033\f0 The next example shows the same code assuming that the variables are all stored in the TOC. Shared objects normally can not assume that globally visible variables are stored in the TOC. If they did, it would be impossible for the variable references to be redirected to overriding variables in the main program. Therefore, shared objects should normally always use the type of code shown above. \hyphpar0\par\pard\sb400\sl260 Load and Store; variables in TOC: \hyphpar0\par\pard\sb200\sl234 \fs18\lang1024\f2 C                             Assembly\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
extern int src;\sa0\par\fi0\sb0
extern int dst;\sa0\par\fi0\sb0
extern int *ptr;\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
dst = src;\sa0\par\fi0\sb0
                              lwz r0,src@toc(r2)\sa0\par\fi0\sb0
                              stw r0,dst@toc(r2)\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
ptr = &dst;\sa0\par\fi0\sb0
                              la  r0,dst@toc(r2)\sa0\par\fi0\sb0
                              std r0,ptr@toc(r2)\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
*ptr = src;\sa0\par\fi0\sb0
                              lwz r0,src@toc(r2)\sa0\par\fi0\sb0
                              ld  r7,ptr@toc(r2)\sa0\par\fi0\sb0
                              stw r0,0(r7)\hyphpar0\par\pard\sb216\s3\sl374 {\*\bkmkstart ID_FUNC_45_CALLS}{\*\bkmkend ID_FUNC_45_CALLS}\b\fs28\f0 3.5.11. Function Calls\keepn\hyphpar0\par\pard\sb400\sl260 \b0\fs20\lang1033 Programs use the 64-bit PowerPC bl instruction to make direct function calls. The bl instruction must be followed by a nop instruction. For PowerOpen compatibility, the nop instruction must be: \hyphpar0\par\pard\sb200\sl234 \fs18\lang1024\f2     ori  r0,r0,0\hyphpar0\par\pard\sb400\sl260 \fs20\lang1033\f0 For PowerOpen compatibility, the link editor must also accept these instructions as valid nop instructions: \hyphpar0\par\pard\sb200\sl234 \fs18\lang1024\f2     cror 15,15,15\sa0\par\fi0\sb0
    cror 31,31,31\hyphpar0\par\pard\sb400\sl260 \fs20\lang1033\f0 In a relocatable object file, a direct function call should be made to the function entry point, which is a symbol beginning with dot (.). See {\field{\*\fldinst   HYPERLINK  \\l ID_FUNC_45_DES}{\fldrslt Section 3.2.5}} for more information. \hyphpar0\par\pard\sb400\sl260 When the link editor is creating an executable or shared object, and it sees a function call followed by a nop instruction, it determines whether the caller and the callee share the same TOC. If they do, it leaves the nop instruction unchanged. If they do not, the link editor constructs a linkage function. The linkage function loads the TOC register with the callee TOC and branches to the callee entry point. The link editor modifies the bl instruction to branch to the linkage function, and modifies the nop instruction to be \hyphpar0\par\pard\sb200\sl234 \fs18\lang1024\f2     ld   r2,40(r1)\hyphpar0\par\pard\sb400\sl260 \fs20\lang1033\f0 This will reload the TOC register from the TOC save area after the callee returns. \hyphpar0\par\pard\sb400\sl260 A bl instruction has a self-relative branch displacement that can reach 32 Mbytes in either direction. Hence, the use of a bl instruction to effect a call within an executable or shared object file limits the size of the executable or shared object file text segment. \hyphpar0\par\pard\sb400\sl260 If the callee is in a different shared object, a similar procedure of linkage code and a modified nop instruction is used. In this case, the dynamic linker must complete the link by filling in the function descriptor at run time. See {\field{\*\fldinst   HYPERLINK  \\l ID_PROC_45_LINK}{\fldrslt Section 5.2.4}} for more details. \hyphpar0\par\pard\sb400\sl260 Here is an example of the assembly code generated for a function call: \hyphpar0\par\pard\sb200\sl234 \fs18\lang1024\f2 C                             Assembly\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
extern void func (void);\sa0\par\fi0\sb0
func ();\sa0\par\fi0\sb0
                              bl   .func\sa0\par\fi0\sb0
                              ori  r0,r0,0\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
Here is an example of how the link editor transforms this code if the\sa0\par\fi0\sb0
callee has a different TOC than the caller:\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
C                             Assembly\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
extern void func (void);\sa0\par\fi0\sb0
func ();\sa0\par\fi0\sb0
                              bl   <linkage_for_func>\sa0\par\fi0\sb0
                              ld   r2,40(r1)\hyphpar0\par\pard\sb400\sl260 \fs20\lang1033\f0 Here is an example of the linkage code created by the link editor. Remember that func@got@plt contains the address of the procedure linkage entry for func, which is a function descriptor. The function descriptor holds the addresses of the function entry point and the function TOC base. \hyphpar0\par\pard\sb200\sl234 \fs18\lang1024\f2 <linkage_for_func>:\sa0\par\fi0\sb0
    ld    r12,func@got@plt(r2)\sa0\par\fi0\sb0
    std   r2,40(r1)\sa0\par\fi0\sb0
    ld    r0,0(r12)\sa0\par\fi0\sb0
    ld    r2,8(r12)\sa0\par\fi0\sb0
    mtctr r0\sa0\par\fi0\sb0
    bctr\hyphpar0\par\pard\sb400\sl260 \fs20\lang1033\f0 The value of a function pointer is the address of the function descriptor, not the address of the function entry point itself. \hyphpar0\par\pard\sb200\sl234 \fs18\lang1024\f2 C                             Assembly\sa0\par\fi0\sb0
extern void func (void);\sa0\par\fi0\sb0
extern void (*ptr) (void);\sa0\par\fi0\sb0
ptr = func;\sa0\par\fi0\sb0
                              ld    r6,func@got(r2)\sa0\par\fi0\sb0
                              ld    r7,ptr@got(r2)\sa0\par\fi0\sb0
                              std   r6,0(r7)\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
(*ptr) ();\sa0\par\fi0\sb0
                              ld    r6,ptr@got(r2)\sa0\par\fi0\sb0
                              ld    r6,0(r6)\sa0\par\fi0\sb0
                              ld    r0,0(r6)\sa0\par\fi0\sb0
                              std   r2,40(r1)\sa0\par\fi0\sb0
                              mtctr r0\sa0\par\fi0\sb0
                              ld    r2,8(r6)\sa0\par\fi0\sb0
                              bctrl\sa0\par\fi0\sb0
                              ld    r2,40(r1)\hyphpar0\par\pard\sb400\sl260 \fs20\lang1033\f0 Since most of the code sequence used for a call through a pointer is the same no matter what function pointer is being used, it is also possible to do it by calling a function with an unusual calling convention provided by a library. With this approach, efficiency requires that the function be linked in directly, and not come from a shared library. The PowerOpen ABI uses a function named ._ptrgl for this purpose, passing the function pointer value in r11, and it is recommended that this name and calling convention be used as well when using this approach under ELF. \hyphpar0\par\pard\sb216\s3\sl374 {\*\bkmkstart ID_BRANCH}{\*\bkmkend ID_BRANCH}\b\fs28\lang1024 3.5.12. Branching\keepn\hyphpar0\par\pard\sb400\sl260 \b0\fs20\lang1033 Programs use branch instructions to control their execution flow. As defined by the architecture, branch instructions hold a self-relative value with a 64-Mbyte range, allowing a jump to locations up to 32 Mbytes away in either direction. \hyphpar0\par\pard\sb200\sl234 \fs18\lang1024\f2 C                             Assembly\sa0\par\fi0\sb0
label:\sa0\par\fi0\sb0
                              .L01:\sa0\par\fi0\sb0
    ...\sa0\par\fi0\sb0
    goto label\sa0\par\fi0\sb0
                                  b .L01\hyphpar0\par\pard\sb400\sl260 \fs20\lang1033\f0 C switch statements provide multiway selection. When the case labels of a switch statement satisfy grouping constraints, the compiler implements the selection with an address table. The following example uses several simplifying conventions to hide irrelevant details: \hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16\lang1024 \'95\tab \fs20 The selection expression resides in r12, and is of type int.\hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 The case label constants begin at zero.\hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 The case labels, the default, and the address table use assembly names .Lcasei, .Ldef, and .Ltab, respectively.\hyphpar0\par\pard\sb200\sl234 \fs18\f2 C                             Assembly\sa0\par\fi0\sb0
switch (j)\sa0\par\fi0\sb0
  \{\sa0\par\fi0\sb0
  case 0:\sa0\par\fi0\sb0
    ...\sa0\par\fi0\sb0
  case 1:\sa0\par\fi0\sb0
    ...\sa0\par\fi0\sb0
  case 3:\sa0\par\fi0\sb0
    ...\sa0\par\fi0\sb0
  default:\sa0\par\fi0\sb0
    ...\sa0\par\fi0\sb0
  \}\sa0\par\fi0\sb0
                                  cmplwi  r12,4\sa0\par\fi0\sb0
                                  bge     .Ldef\sa0\par\fi0\sb0
                                  bl      .L1\sa0\par\fi0\sb0
                              .L1:\sa0\par\fi0\sb0
                                  slwi    r12,2\sa0\par\fi0\sb0
                                  mflr    r11\sa0\par\fi0\sb0
                                  addi    r12,r12,.Ltab-.L1\sa0\par\fi0\sb0
                                  add     r0,r12,r11\sa0\par\fi0\sb0
                                  mtctr   r0\sa0\par\fi0\sb0
                                  bctr\sa0\par\fi0\sb0
                              .Ltab:\sa0\par\fi0\sb0
                                  b       .Lcase0\sa0\par\fi0\sb0
                                  b       .Lcase1\sa0\par\fi0\sb0
                                  b       .Ldef\sa0\par\fi0\sb0
                                  b       .Lcase3\hyphpar0\par\pard\sb216\s3\sl374 {\*\bkmkstart ID_DYNAM_45_STACK}{\*\bkmkend ID_DYNAM_45_STACK}\b\fs28\f0 3.5.13. Dynamic Stack Space Allocation\keepn\hyphpar0\par\pard\sb400\sl260 \b0\fs20\lang1033 Unlike some other languages, C does not need dynamic stack allocation within a stack frame. Frames are allocated dynamically on the program stack, depending on program execution, but individual stack frames can have static sizes. Nonetheless, the architecture supports dynamic allocation for those languages that require it. The mechanism for allocating dynamic space is embedded completely within a function and does not affect the standard calling sequence. Thus languages that need dynamic stack frame sizes can call C functions, and vice versa. \hyphpar0\par\pard\sb400\sl260 Here is the stack frame before dynamic stack allocation:\hyphpar0\par\pard\sb200\sl234 \fs18\lang1024\f2 High address\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
          +-> Back chain\sa0\par\fi0\sb0
          |   Floating point register save area\sa0\par\fi0\sb0
          |   General register save area\sa0\par\fi0\sb0
          |   VRSAVE save word (32-bits)\sa0\par\fi0\sb0
          |   Alignment padding (4 or 12 bytes)\sa0\par\fi0\sb0
          |   Vector register save area (quadword aligned)\sa0\par\fi0\sb0
          |   Local variable space\sa0\par\fi0\sb0
          |   Parameter save area    (SP + 48)\sa0\par\fi0\sb0
          |   TOC save area          (SP + 40)  --+\sa0\par\fi0\sb0
          |   link editor doubleword (SP + 32)    |\sa0\par\fi0\sb0
          |   compiler doubleword    (SP + 24)    |--stack frame header\sa0\par\fi0\sb0
          |   LR save area           (SP + 16)    |\sa0\par\fi0\sb0
          |   CR save area           (SP + 8)     |\sa0\par\fi0\sb0
SP  --->  +-- Back chain             (SP + 0)   --+\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
Low address\hyphpar0\par\pard\sb400\sl260 \fs20\lang1033\f0 Here is the stack frame after dynamic stack allocation:\hyphpar0\par\pard\sb200\sl234 \fs18\lang1024\f2 High address\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
          +-> Back chain\sa0\par\fi0\sb0
          |   Floating point register save area\sa0\par\fi0\sb0
          |   General register save area\sa0\par\fi0\sb0
          |   VRSAVE save word (32-bits)\sa0\par\fi0\sb0
          |   Alignment padding (4 or 12 bytes)\sa0\par\fi0\sb0
          |   Vector register save area (quadword aligned)\sa0\par\fi0\sb0
          |   Local variable space\sa0\par\fi0\sb0
          |   -- Old parameter save area, now allocated space\sa0\par\fi0\sb0
          |   -- Old stack frame header, now allocated space\sa0\par\fi0\sb0
          |   -- More newly allocated space\sa0\par\fi0\sb0
          |   New parameter save area    (SP + 48)\sa0\par\fi0\sb0
          |   New TOC save area          (SP + 40)\sa0\par\fi0\sb0
          |   New link editor doubleword (SP + 32)\sa0\par\fi0\sb0
          |   New compiler doubleword    (SP + 24)\sa0\par\fi0\sb0
          |   New LR save area           (SP + 16)\sa0\par\fi0\sb0
          |   New CR save area           (SP + 8)\sa0\par\fi0\sb0
SP  --->  +-- New Back chain             (SP + 0)\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
Low address\hyphpar0\par\pard\sb400\sl260 \fs20\lang1033\f0 The local variables area is used for storage of function data, such as local variables, whose sizes are known to the compiler. This area is allocated at function entry and does not change in size or position during the function's activation. \hyphpar0\par\pard\sb400\sl260 The parameter save area is reserved for arguments passed in calls to other functions. See {\field{\*\fldinst   HYPERLINK  \\l ID_PARAM_45_PASS}{\fldrslt Section 3.2.3}} for more information. Its size is also known to the compiler and can be allocated along with the fixed frame area at function entry. However, the standard calling sequence requires that the parameter save area begin at a fixed offset (48) from the stack pointer, so this area must move when dynamic stack allocation occurs. \hyphpar0\par\pard\sb400\sl260 The stack frame header must also be at a fixed offset (0) from the stack pointer, so this area must also move when dynamic stack allocation occurs. \hyphpar0\par\pard\sb400\sl260 Data in the parameter save area are naturally addressed at constant offsets from the stack pointer. However, in the presence of dynamic stack allocation, the offsets from the stack pointer to the data in the local variables area are not constant. To provide addressability, a frame pointer is established to locate the local variables area consistently throughout the function's activation. \hyphpar0\par\pard\sb400\sl260 Dynamic stack allocation is accomplished by "opening" the stack just above the parameter save area. The following steps show the process in detail: \hyphpar0\par\pard\sb100\li360\sl260\fi-360 \tqr\tx310\tx360\tab \lang1024 1.\tab Sometime after a new stack frame is acquired and before the first  dynamic space allocation, a new register, the frame pointer, is set  to the value of the stack pointer. The frame pointer is used for  references to the function's local, non-static variables.\hyphpar0\par\pard\sb100\li360\sl260\fi-360 \tqr\tx310\tx360\tab 2.\tab The amount of dynamic space to be allocated is rounded up to a  multiple of 16 bytes, so that quadword stack alignment is  maintained.\hyphpar0\par\pard\sb100\li360\sl260\fi-360 \tqr\tx310\tx360\tab 3.\tab The stack pointer is decreased by the rounded byte count, and the  address of the previous stack frame (the back chain) is stored at  the word addressed by the new stack pointer. This shall be  accomplished atomically by using stdu rS,-length(r1) if the length  is less than 32768 bytes, or by using stdux rS,r1,rspace, where rS  is the contents of the back chain word and rspace contains the  (negative) rounded number of bytes to be allocated.\hyphpar0\par\pard\sb200\li400\sl234 \b\fs18 Note: \b0\f1 It is only strictly necessary to copy the back chain. The information in the parameter save area is recreated for each function call. The information in the stack frame header, other than the back chain, is only used by a called function. In some cases, a compiler may need to copy the TOC save area as well, depending upon precisely how it generates linkage code.\hyphpar0\par\pard\sb400\sl260 \fs20\lang1033\f0 The above process can be repeated as many times as desired within a single function activation. When it is time to return, the stack pointer is set to the value of the back chain, thereby removing all dynamically allocated stack space along with the rest of the stack frame. Naturally, a program must not reference the dynamically allocated stack area after it has been freed. \hyphpar0\par\pard\sb400\sl260 Even in the presence of signals, the above dynamic allocation scheme is "safe." If a signal interrupts allocation, one of three things can happen: \hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16\lang1024 \'95\tab \fs20 The signal handler can return. The process then resumes the dynamic allocation from the point of interruption.\hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 The signal handler can execute a non-local goto or a jump. This resets the process to a new context in a previous stack frame, automatically discarding the dynamic allocation.\hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 The process can terminate.\hyphpar0\par\pard\sb400\sl260 \lang1033 Regardless of when the signal arrives during dynamic allocation, the result is a consistent (though possibly dead) process. \hyphpar0\par\pard\sb259\s2\sl449 {\*\bkmkstart ID_DW_45_DEF}{\*\bkmkend ID_DW_45_DEF}\b\fs34\lang1024 3.6. DWARF Definition\keepn\hyphpar0\par\pard\sb400\s3\sl374 {\*\bkmkstart _766}{\*\bkmkend _766}\fs28 3.6.1. DWARF Release Number\keepn\hyphpar0\par\pard\sb400\sl260 \b0\fs20\lang1033 This section defines the Debug With Arbitrary Record Format (DWARF) debugging format for the 64-bit PowerPC processor family. The 64-bit PowerPC ABI does not define a debug format. However, all systems that do implement DWARF shall use the following definitions. \hyphpar0\par\pard\sb400\sl260 DWARF is a specification developed for symbolic, source-level debugging. The debugging information format does not favor the design of any compiler or debugger. For more information on DWARF, see the documents cited in {\field{\*\fldinst   HYPERLINK  \\l ID_TOCINTRO}{\fldrslt Chapter 1}}. \hyphpar0\par\pard\sb400\sl260 The DWARF definition requires some machine-specific definitions. The register number mapping needs to be specified for the 64-bit PowerPC registers. In addition, the DWARF Version 2 specification requires processor-specific address class codes to be defined. \hyphpar0\par\pard\sb216\s3\sl374 {\*\bkmkstart ID_DW_45_REG}{\*\bkmkend ID_DW_45_REG}\b\fs28\lang1024 3.6.2. DWARF Register Number Mapping\keepn\hyphpar0\par\pard\sb400\sl260 \b0\fs20\lang1033 This table outlines the register number mapping for the 64-bit PowerPC processor family. Note that for all special purpose registers, the number is simply 100 plus the SPR register number, as defined in the 64-bit PowerPC Architecture. Registers with an asterisk before their name are MPC601 chip-specific and are not part of the generic 64-bit PowerPC chip architecture. \hyphpar0\par\pard\sb200\sl234 \fs18\lang1024\f2 Register Name              Number        Abbreviation\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
General Register 0-31      0-31          r0-r31\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
Floating Register 0-31     32-63         f0-f31\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
Condition Register         64            CR\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
Floating-Point Status and  65            FPSCR\sa0\par\fi0\sb0
Control Register\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
* MQ Register              100           MQ or SPR0\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
Fixed-Point Exception      101           XER or SPR1\sa0\par\fi0\sb0
Register\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
* Real Time Clock          104           RTCU or SPR4\sa0\par\fi0\sb0
Upper Register\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
* Real Time Clock          105           RTCL or SPR5\sa0\par\fi0\sb0
Lower Register\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
Link Register              108           LR or SPR8\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
Count Register             109           CTR or SPR9\hyphpar0\par\pard\sb400\sl260 \fs20\lang1033\f0 For kernel debuggers, the mapping for all privileged registers is also defined in this table. \hyphpar0\par\pard\sb200\sl234 \fs18\lang1024\f2 Register Name              Number        Abbreviation\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
Machine State Register     66            MSR\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
Segment Register 0-15      70-85         SR0-SR15\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
Data Storage Interrupt     118           DSISR or SPR18\sa0\par\fi0\sb0
Status Register\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
Data Address Register      119           DAR or SPR19\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
Decrementer                122           DEC or SPR22\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
Storage Description        125           SDR1 or SPR25\sa0\par\fi0\sb0
Register 1\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
Machine Status             126           SRR0 or SPR26\sa0\par\fi0\sb0
Save/Restore Register 0\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
Machine Status             127           SRR1 or  SPR27\sa0\par\fi0\sb0
Save/Restore Register 1\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
Vector Save/Restore        356           VRSAVE or SPR256\sa0\par\fi0\sb0
Register\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
Software-use Special       372           SPRG0 or SPR272\sa0\par\fi0\sb0
Purpose Register 0\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
Software-use Special       373           SPRG1 or SPR273\sa0\par\fi0\sb0
Purpose Register 1\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
Software-use Special       374           SPRG2 or SPR274\sa0\par\fi0\sb0
Purpose Register 2\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
Software-use Special       375           SPRG3 or SPR275\sa0\par\fi0\sb0
Purpose Register 3\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
Address Space Register     380           ASR or SPR280\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
External Access Register   382           EAR or SPR282\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
Time Base                  384           TB or SPR284\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
Time Base Upper            385           TBU or SPR285\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
Processor Version Register 387           PVR or SPR287\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
Instruction BAT Register   628           IBAT0U or SPR528\sa0\par\fi0\sb0
0 Upper\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
Instruction BAT Register   629           IBAT0L or SPR529\sa0\par\fi0\sb0
0 Lower\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
Instruction BAT Register   630           IBAT1U or SPR530\sa0\par\fi0\sb0
1 Upper\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
Instruction BAT Register   631           IBAT1L or SPR531\sa0\par\fi0\sb0
1 Lower\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
Instruction BAT Register   632           IBAT2U or SPR532\sa0\par\fi0\sb0
2 Upper\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
Instruction BAT Register   633           IBAT2L or SPR533\sa0\par\fi0\sb0
2 Lower\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
Instruction BAT Register   634           IBAT3U or SPR534\sa0\par\fi0\sb0
3 Upper\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
Instruction BAT Register   635           IBAT3L or SPR535\sa0\par\fi0\sb0
3 Lower\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
Data BAT Register 0 Upper  636           DBAT0U or SPR536\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
Data BAT Register 0 Lower  637           DBAT0L or SPR537\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
Data BAT Register 1 Upper  638           DBAT1U or SPR538\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
Data BAT Register 1 Lower  639           DBAT1L or SPR539\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
Data BAT Register 2 Upper  640           DBAT2U or SPR540\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
Data BAT Register 2 Lower  641           DBAT2L or SPR541\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
Data BAT Register 3 Upper  642           DBAT3U or SPR542\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
Data BAT Register 3 Lower  643           DBAT3L or SPR543\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
* Hardware Implementation  1108          HID0 or SPR1008\sa0\par\fi0\sb0
Register 0\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
* Hardware Implementation  1109          HID1 or SPR1009\sa0\par\fi0\sb0
Register 1\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
* Hardware Implementation  1110          HID2 or IABR or SPR1010\sa0\par\fi0\sb0
Register 2\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
* Hardware Implementation  1113          HID5 or DABR or SPR1013\sa0\par\fi0\sb0
Register 5\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
* Hardware Implementation  1123          HID15 or PIR or SPR1023\sa0\par\fi0\sb0
Register 15\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
Vector Registers 0-31      1124-1155     vr0-vr31\hyphpar0\par\pard\sb400\sl260 \fs20\lang1033\f0 The 64-bit PowerPC processor family defines the address class codes described in the following table: \hyphpar0\par\pard\sb200\sl234 \fs18\lang1024\f2 Code                       Value         Meaning\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
ADDR_none                  0             No class specified\hyphpar0\par\sect\sectd\plain\pgwsxn11905\pghsxn16837\marglsxn1440\margrsxn1440\margtsxn1440\margbsxn1920\headery0\footery0\pgndec\titlepg{\headerf\pard\sl-240\sb770\sa430\plain\tqc\tx4512\tqr\tx9025 {}\tab {}\tab {}\par}{\footerf\pard\sl-240\sb770\sa910\plain\tqc\tx4512\tqr\tx9025 {}\tab {}\tab {\i\fs20 \chpgn }\par}{\headerl\pard\sl-240\sb770\sa430\plain\tqc\tx4512\tqr\tx9025 {}\tab {}\tab {\i\fs20 Chapter 4. Object Files}\par}{\footerl\pard\sl-240\sb770\sa910\plain\tqc\tx4512\tqr\tx9025 {}\tab {}\tab {\i\fs20 \chpgn }\par}{\headerr\pard\sl-240\sb770\sa430\plain\tqc\tx4512\tqr\tx9025 {}\tab {}\tab {\i\fs20 Chapter 4. Object Files}\par}{\footerr\pard\sl-240\sb770\sa910\plain\tqc\tx4512\tqr\tx9025 {}\tab {}\tab {\i\fs20 \chpgn }\par}\pard\sb311\s1\sl539 {\*\bkmkstart ID_OBJ_45_FILES}{\*\bkmkend ID_OBJ_45_FILES}\b\fs41 Chapter 4. Object Files\keepn\hyphpar0\par\pard\sb259\s2\sl449 {\*\bkmkstart ID_ELF_45_HEAD}{\*\bkmkend ID_ELF_45_HEAD}\fs34 4.1. ELF Header\keepn\hyphpar0\par\pard\sb400\sl260 \b0\fs20\lang1033 For file identification in e_ident, the 64-bit PowerPC processor family requires the values shown below: \hyphpar0\par\pard\sb200\sl234 \fs18\lang1024\f2 e_ident[EI_CLASS]   ELFCLASS64   For all 64-bit implementations.\sa0\par\fi0\sb0
e_ident[EI_DATA]    ELFDATA2MSB  For all big-endian implementations.\sa0\par\fi0\sb0
e_ident[EI_DATA]    ELFDATA2LSB  For all little-endian implementations.\hyphpar0\par\pard\sb400\sl260 \fs20\lang1033\f0 The ELF header's e_flags member holds bit flags associated with the file. Since the 64-bit PowerPC processor family defines no flags, this member contains zero. \hyphpar0\par\pard\sb400\sl260 Processor identification resides in the ELF header's e_machine member, and must have the value 21, defined as the name EM_PPC64. \hyphpar0\par\pard\sb400\sl260 The e_entry field in the ELF header holds the address of a function descriptor. See Function Descriptors in chapter 3. This function descriptor supplies both the address of the function entry point and the initial value of the TOC pointer register. \hyphpar0\par\pard\sb259\s2\sl449 {\*\bkmkstart ID_SPECIAL}{\*\bkmkend ID_SPECIAL}\b\fs34\lang1024 4.2. Special Sections\keepn\hyphpar0\par\pard\sb400\sl260 \b0\fs20\lang1033 Various sections hold program and control information. The sections listed in the following table are used by the system and have the types and attributes shown. \hyphpar0\par\pard\sb200\sl234 \fs18\lang1024\f2 Name          Type               Attributes\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
.glink        SHT_PROGBITS       SHF_ALLOC + SHF_EXECINSTR\sa0\par\fi0\sb0
.got          SHT_PROGBITS       SHF_ALLOC + SHF_WRITE\sa0\par\fi0\sb0
.toc          SHT_PROGBITS       SHF_ALLOC + SHF_WRITE\sa0\par\fi0\sb0
.tocbss       SHT_NOBITS         SHF_ALLOC + SHF_WRITE\sa0\par\fi0\sb0
.plt          SHT_NOBITS         SHF_ALLOC + SHF_WRITE\hyphpar0\par\pard\sb200\li400\sl234 \b\f0 Note: \b0\f1 The .plt section on the 64-bit PowerPC is of type SHT_NOBITS, not SHT_PROGBITS as on most other processors.\hyphpar0\par\pard\sb400\sl260 \fs20\lang1033\f0 Special sections are described below. \hyphpar0\par\pard\sb200\sl234 \fs18\lang1024\f2 Name     Description\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
.glink   This section may be used to hold the global linkage table which\sa0\par\fi0\sb0
         aids the procedure linkage table. See Procedure Linkage Table\sa0\par\fi0\sb0
         in Chapter 5 for more information.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
.got     This section may be used to hold the Global Offset Table, or\sa0\par\fi0\sb0
         GOT.  See The Toc Section and Coding Examples in Chapter 3\sa0\par\fi0\sb0
         and Global Offset Table in Chapter 5 for more information.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
.toc     This section may be used to hold the initialized Table of\sa0\par\fi0\sb0
         Contents, or TOC.  See TOC, below, The Toc Section and Coding\sa0\par\fi0\sb0
         examples in Chapter 3 and Global Offset Table in Chapter 5\sa0\par\fi0\sb0
         for more information.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
.tocbss  This section may be used to hold the uninitialized portions\sa0\par\fi0\sb0
         of the TOC.  This data may also be stored as zero-initialized\sa0\par\fi0\sb0
         data in a .toc section.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
.plt     This section holds the procedure linkage table. See Procedure\sa0\par\fi0\sb0
         Linkage Table in Chapter 5 for more information.\hyphpar0\par\pard\sb200\li400\sl234 \b\f0 Note: \b0\f1 Tools which support this ABI are not required to use these sections precisely as defined here, and indeed are not required to use them at all. The true use of a section is defined by the relocation information and by the code which refers to it. However, if tools use these sections, they are required to give them the types and attributes specified in the above table.\hyphpar0\par\pard\sb259\s2\sl449 {\*\bkmkstart ID_TOC}{\*\bkmkend ID_TOC}\b\fs34\f0 4.3. TOC\keepn\hyphpar0\par\pard\sb400\sl260 \b0\fs20\lang1033 The Table of Contents, or TOC, is part of the data segment of an executable program. \hyphpar0\par\pard\sb400\sl260 This sections describes a typical layout of the TOC in an executable file or shared object. Particular tools need not follow this layout as specified here. \hyphpar0\par\pard\sb400\sl260 The TOC typically contains data items within the .got, .toc and .tocbss sections, which can be addressed with 16-bit signed offsets from the TOC base. The TOC base is typically the first address in the TOC plus 0x8000, thus permitting a full 64 Kbyte TOC. The .got section is typically created by the link editor based on @got relocations. The .toc and .tocbss sections are typically included from relocatable object files referenced during the link. \hyphpar0\par\pard\sb400\sl260 The TOC may straddle the boundary between initialized and uninitialized data in the data segment. The usual order of sections in the data segment, some of which may be empty, is: \hyphpar0\par\pard\sb200\sl234 \fs18\lang1024\f2     .data\sa0\par\fi0\sb0
    .got\sa0\par\fi0\sb0
    .toc\sa0\par\fi0\sb0
    .tocbss\sa0\par\fi0\sb0
    .plt\hyphpar0\par\pard\sb400\sl260 \fs20\lang1033\f0 The link editor may create multiple TOC sections, as specified in {\field{\*\fldinst   HYPERLINK  \\l ID_TOC_45_SEC}{\fldrslt Section 3.5.2}}. In such a case, the .got and .toc sections will be repeated as necessary, possibly renamed to preserve unique section names. Any occurrence of .tocbss in a TOC section other than the last one will be converted into a .toc section initialized to contain zero bytes. \hyphpar0\par\pard\sb400\sl260 Compilers may generate "short-form," one-instruction references for all data items that are in the TOC section for the object file being compiled. Such references are relative to the TOC pointer register, r2, which always holds the base of the TOC section for the object file. \hyphpar0\par\pard\sb400\sl260 In a shared object, only data items with local (non-global) scope may be addressed via the TOC pointer. Global data items must be addressed via the GOT, even if they appear in a .toc or .tocbss section. \hyphpar0\par\pard\sb400\sl260 A compiler which places some data items in the TOC must provide an option to avoid doing so in a particular compilation.\hyphpar0\par\pard\sb259\s2\sl449 {\*\bkmkstart ID_SYM}{\*\bkmkend ID_SYM}\b\fs34\lang1024 4.4. Symbol Table\keepn\hyphpar0\par\pard\sb400\s3\sl374 {\*\bkmkstart ID_SYM_45_VAL}{\*\bkmkend ID_SYM_45_VAL}\fs28 4.4.1. Symbol Values\keepn\hyphpar0\par\pard\sb400\sl260 \b0\fs20\lang1033 If an executable file contains a reference to a function defined in one of its associated shared objects, the symbol table section for the file will contain an entry for that symbol. The st_shndx member of that symbol table entry contains SHN_UNDEF. This informs the dynamic linker that the symbol definition for that function is not contained in the executable file itself. If that symbol has been allocated a procedure linkage table entry in the executable file, and the st_value member for that symbol table entry is nonzero, the value is the virtual address of the function descriptor provided by that procedure linkage table entry. Otherwise, the st_value member contains zero. This procedure linkage table entry address is used by the dynamic linker in resolving references to the address of the function. See {\field{\*\fldinst   HYPERLINK  \\l ID_FUNC_45_ADDRESS}{\fldrslt Section 5.2.3}} for details.\hyphpar0\par\pard\sb259\s2\sl449 {\*\bkmkstart ID_RELOC}{\*\bkmkend ID_RELOC}\b\fs34\lang1024 4.5. Relocation\keepn\hyphpar0\par\pard\sb400\s3\sl374 {\*\bkmkstart ID_RELOC_45_TYPE}{\*\bkmkend ID_RELOC_45_TYPE}\fs28 4.5.1. Relocation Types\keepn\hyphpar0\par\pard\sb400\sl260 \b0\fs20\lang1033 Relocation entries describe how to alter the instruction and data relocation fields shown below. Bit numbers appear in the lower box corners; little-endian byte numbers appear in the upper right box corners; big-endian numbers appear in the upper left box corners. \hyphpar0\par\pard\sb200\sl234 \fs18\lang1024\f2 +-------+-------+-------+-------+-------+-------+-------+-------+\sa0\par\fi0\sb0
|0     7|1     6|2     5|3     4|4     3|5     2|6     1|7     0|\sa0\par\fi0\sb0
|                          doubleword64                         |\sa0\par\fi0\sb0
|0                                                            63|\sa0\par\fi0\sb0
+---------------------------------------------------------------+\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
+-------+-------+-------+-------+\sa0\par\fi0\sb0
|0     3|1     2|2     1|3     0|\sa0\par\fi0\sb0
|             word32            |\sa0\par\fi0\sb0
|0                            31|\sa0\par\fi0\sb0
+-------------------------------+\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
+-------+-------+-------+--+----+\sa0\par\fi0\sb0
|0     3|1     2|2     1|3 |   0|\sa0\par\fi0\sb0
|             word30       |    |\sa0\par\fi0\sb0
|0                       29|3031|\sa0\par\fi0\sb0
+--------------------------+----+\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
+----+--+-------+-------+--+----+\sa0\par\fi0\sb0
|0   | 3|1     2|2     1|3 |   0|\sa0\par\fi0\sb0
|    |        low24        |    |\sa0\par\fi0\sb0
|0  5|6                  29|3031|\sa0\par\fi0\sb0
+----+---------------------+----+\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
+-------+-+--+--+-------+--+----+\sa0\par\fi0\sb0
|0     3|1|  | 2|2     1|3 |   0|\sa0\par\fi0\sb0
|         |  |  |  low14   |    |\sa0\par\fi0\sb0
|0        |10|15|16      29|3031|\sa0\par\fi0\sb0
+---------+--+--+----------+----+\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
+-------+-------+\sa0\par\fi0\sb0
|0     1|1     0|\sa0\par\fi0\sb0
|    half16     |\sa0\par\fi0\sb0
|0            15|\sa0\par\fi0\sb0
+---------------+\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
+-------+------+--+\sa0\par\fi0\sb0
|0     1|1     | 0|\sa0\par\fi0\sb0
|    half16ds  |  |\sa0\par\fi0\sb0
|0           13|15|\sa0\par\fi0\sb0
+--------------+--+\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
doubleword64   This specifies a 64-bit field occupying 8 bytes, the\sa0\par\fi0\sb0
               alignment of which is 8 bytes unless otherwise\sa0\par\fi0\sb0
               specified.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
word32         This specifies a 32-bit field occupying 4 bytes, the\sa0\par\fi0\sb0
               alignment of which is 4 bytes unless otherwise\sa0\par\fi0\sb0
               specified.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
word30         This specifies a 30-bit field contained within bits\sa0\par\fi0\sb0
               0-29 of a word with 4-byte alignment. The two least\sa0\par\fi0\sb0
               significant bits of the word are unchanged.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
low24          This specifies a 24-bit field contained within a word\sa0\par\fi0\sb0
               with 4-byte alignment.  The six most significant and\sa0\par\fi0\sb0
               the two least significant bits of the word are ignored\sa0\par\fi0\sb0
               and unchanged (for example, "Branch" instruction).\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
low14          This specifies a 14-bit field contained within a word\sa0\par\fi0\sb0
               with 4-byte alignment, comprising a conditional branch\sa0\par\fi0\sb0
               instruction.  The 14-bit relative displacement in bits\sa0\par\fi0\sb0
               16-29, and possibly the "branch prediction bit" (bit\sa0\par\fi0\sb0
               10), are altered; all other bits remain unchanged.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
half16         This specifies a 16-bit field occupying 2 bytes with\sa0\par\fi0\sb0
               2-byte alignment (for example, the immediate field of\sa0\par\fi0\sb0
               an "Add Immediate" instruction).\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
half16ds       Similar to half16, but really just 14 bits since the\sa0\par\fi0\sb0
               two least significant bits must be zero, and are not really\sa0\par\fi0\sb0
               part of the field.  (Used by for example the ldu instruction.)\hyphpar0\par\pard\sb400\sl260 \fs20\lang1033\f0 Calculations in the relocation table assume the actions are transforming a relocatable file into either an executable or a shared object file. Conceptually, the link editor merges one or more relocatable files to form the output. It first determines how to combine and locate the input files, next it updates the symbol values, and then it performs relocations. \hyphpar0\par\pard\sb400\sl260 Some relocations use high adjusted values. These are the most significant bits, adjusted so that adding the low 16 bits will perform the correct calculation of the address accounting for signed arithmetic. This is to support using the low 16 bits as a signed offset when loading the value. For example, a value could be loaded from an absolute 64 bit address SYM as follows: \hyphpar0\par\pard\sb200\sl234 \fs18\lang1024\f2     lis   r3,SYM@highesta\sa0\par\fi0\sb0
    ori   r3,SYM@highera\sa0\par\fi0\sb0
    sldi  r3,r3,32\sa0\par\fi0\sb0
    oris  r3,r3,SYM@ha\sa0\par\fi0\sb0
    ld    r4,SYM@l(r3)\hyphpar0\par\pard\sb400\sl260 \fs20\lang1033\f0 The adjusted forms mean that this will work correctly even if SYM@l is negative when interpreted as a signed 16 bit number. Compare this to building the same 64 bit address using ori, in which case the adjusted forms are not used: \hyphpar0\par\pard\sb200\sl234 \fs18\lang1024\f2     lis   r3,SYM@highest\sa0\par\fi0\sb0
    ori   r3,SYM@higher\sa0\par\fi0\sb0
    sldi  r3,r3,32\sa0\par\fi0\sb0
    oris  r3,r3,SYM@h\sa0\par\fi0\sb0
    ori   r3,r3,SYM@l\sa0\par\fi0\sb0
    ld    r4,0(r3)\hyphpar0\par\pard\sb400\sl260 \fs20\lang1033\f0 These code samples are not meant to encourage people to write code which builds absolute 64 bit addresses in this manner. It is normally better to use position independent code. However, this ABI does make this usage possible when it is required. \hyphpar0\par\pard\sb400\sl260 Relocations applied to executable or shared object files are similar and accomplish the same result. The following notations are used in the relocation table: \hyphpar0\par\pard\sb200\sl234 \fs18\lang1024\f2 A    Represents the addend used to compute the value of the\sa0\par\fi0\sb0
     relocatable field.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
B    Represents the base address at which a shared object has been\sa0\par\fi0\sb0
     loaded into memory during execution.  Generally, a shared object\sa0\par\fi0\sb0
     file is built with a 0 base virtual address, but the execution\sa0\par\fi0\sb0
     address will be different.  See Program Header in the System V\sa0\par\fi0\sb0
     ABI for more information about the base address.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
G    Represents the offset into the global offset table, relative to\sa0\par\fi0\sb0
     the TOC base, at which the address of the relocation entry's symbol\sa0\par\fi0\sb0
     plus addend will reside during execution.  See {\field{\*\fldinst   HYPERLINK  \\l ID_CODE_45_EX}{\fldrslt Section 3.5}} \sa0\par\fi0\sb0
     and {\field{\*\fldinst   HYPERLINK  \\l ID_GLOBAL}{\fldrslt Section 5.2.2}} for more information.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
L    Represents the section offset or address of the procedure linkage\sa0\par\fi0\sb0
     table entry for the symbol plus addend.  A procedure linkage table\sa0\par\fi0\sb0
     entry redirects a function call to the proper destination.  The\sa0\par\fi0\sb0
     link editor builds the initial procedure linkage table, and the\sa0\par\fi0\sb0
     dynamic linker modifies the entries during execution.  See\sa0\par\fi0\sb0
     {\field{\*\fldinst   HYPERLINK  \\l ID_PROC_45_LINK}{\fldrslt Section 5.2.4}} for more information.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
M    Similar to G, except that the address which is stored may be the\sa0\par\fi0\sb0
     address of the procedure linkage table entry for the symbol.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
P    Represents the place (section offset or address) of the storage\sa0\par\fi0\sb0
     unit being relocated (computed using r_offset).\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
R    Represents the offset of the symbol within the section in which\sa0\par\fi0\sb0
     the symbol is defined (its section-relative address).\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
S    Represents the value of the symbol whose index resides in the\sa0\par\fi0\sb0
     relocation entry.\hyphpar0\par\pard\sb400\sl260 \fs20\lang1033\f0 The following notations are used for relocations used with thread-local symbols.\hyphpar0\par\pard\sb200\sl234 \fs18\lang1024\f2 @dtpmod\sa0\par\fi0\sb0
     Computes the load module index of the load module that contains\sa0\par\fi0\sb0
     the definition of sym.  The addend, if present, is ignored.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
@dtprel\sa0\par\fi0\sb0
     Computes a dtv-relative displacement, the difference between the\sa0\par\fi0\sb0
     value of S + A and the base address of the thread-local storage\sa0\par\fi0\sb0
     block that contains the definition of the symbol, minus 0x8000.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
@tprel\sa0\par\fi0\sb0
     Computes a tp-relative displacement, the difference between the\sa0\par\fi0\sb0
     value of S + A and the value of the thread pointer (r13).\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
@got@tlsgd\sa0\par\fi0\sb0
     Allocates two contiguous entries in the GOT to hold a tls_index\sa0\par\fi0\sb0
     structure, with values @dtpmod and @dtprel, and computes the\sa0\par\fi0\sb0
     offset to the first entry relative to the TOC base (r2).\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
@got@tlsld\sa0\par\fi0\sb0
     Allocates two contiguous entries in the GOT to hold a tls_index\sa0\par\fi0\sb0
     structure, with values @dtpmod and zero, and computes the offset\sa0\par\fi0\sb0
     to the first entry relative to the TOC base (r2).\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
@got@dtprel\sa0\par\fi0\sb0
     Allocates an entry in the GOT with value @dtprel, and computes\sa0\par\fi0\sb0
     the offset to the entry relative to the TOC base (r2).\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
@got@tprel\sa0\par\fi0\sb0
     Allocates an entry in the GOT with value @tprel, and computes the\sa0\par\fi0\sb0
     offset to the entry relative to the TOC base (r2).\hyphpar0\par\pard\sb400\sl260 \fs20\lang1033\f0 Relocation entries apply to halfwords, words, or doublewords. In all cases, the r_offset value designates the offset or virtual address of the first byte of the affected storage unit. The relocation type specifies which bits to change and how to calculate their values. The 64-bit PowerPC family uses only the Elf32_Rela relocation entries with explicit addends. For the relocation entries, the r_addend member serves as the relocation addend. In all cases, the offset, addend, and the computed result use the byte order specified in the ELF header. \hyphpar0\par\pard\sb400\sl260 The following general rules apply to the interpretation of the relocation types in the relocation table: \hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16\lang1024 \'95\tab \fs20 "+" and "-" denote 64-bit modulus addition and subtraction, respectively. ">>" denotes arithmetic right-shifting (shifting with sign copying) of the value of the left operand by the number of bits given by the right operand.\hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 For relocation types in which the names contain "32", the upper 32 bits of the value computed must be the same. For relocation types in which the names contain "14" or "16," the upper 49 bits of the value computed before shifting must all be the same. For relocation types whose names contain "24," the upper 39 bits of the value computed before shifting must all be the same. For relocation types whose names contain "14" or "24," the low 2 bits of the value computed before shifting must all be zero.\hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 #lo(value) denotes the least significant 16 bits of the indicated value:\hyphpar0\par\pard\sb100\li200\sl234 \fs18\f2     #lo(x) = (x & 0xffff).\sa0\par\fi0\sb0
                                                \hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16\f0 \'95\tab \fs20 #hi(value) denotes bits 16 through 31 of the indicated value:\hyphpar0\par\pard\sb100\li200\sl234 \fs18\f2     #hi(x) = ((x >> 16) & 0xffff).\sa0\par\fi0\sb0
                                                \hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16\f0 \'95\tab \fs20 #ha(value) denotes the high adjusted value: bits 16 through 31 of the indicated value, compensating for #lo() being treated as a signed number.\hyphpar0\par\pard\sb100\li200\sl234 \fs18\f2                                 \sa0\par\fi0\sb0
    #ha(x) = (((x >> 16) + ((x & 0x8000) ? 1 : 0)) & 0xffff)\sa0\par\fi0\sb0
                                        \hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16\f0 \'95\tab \fs20 #higher(value) denotes bits 32 through 47 of the indicated value.\hyphpar0\par\pard\sb100\li200\sl234 \fs18\f2     #higher(x) = ((x >> 32) & 0xffff)\sa0\par\fi0\sb0
                                                \hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16\f0 \'95\tab \fs20 #highera(value) denotes bits 32 through 47 of the indicated value, compensating for #lo() being treated as a signed number:\hyphpar0\par\pard\sb100\li200\sl234 \fs18\f2     #highera(x) =\sa0\par\fi0\sb0
      (((x >> 32) + (((x & 0xffff8000) == 0xffff8000) ? 1 : 0)) & 0xffff)\sa0\par\fi0\sb0
                                                \hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16\f0 \'95\tab \fs20 #highest(value) denotes bits 48 through 63 of the indicated value:\hyphpar0\par\pard\sb100\li200\sl234 \fs18\f2     #highest(x) = ((x >> 48) & 0xffff)\sa0\par\fi0\sb0
                                                \hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16\f0 \'95\tab \fs20 #highesta(value) denotes bits 48 through 63 of the indicated value, compensating for #lo being treated as a signed number:\hyphpar0\par\pard\sb100\li200\sl234 \fs18\f2     #highesta(value) =\sa0\par\fi0\sb0
      (((x >> 48) + (((x & 0xffffffff8000) == 0xffffffff8000) ? 1 : 0)) & 0xffff)\sa0\par\fi0\sb0
                                                \hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16\f0 \'95\tab \fs20 Reference in a calculation to the value G implicitly creates a GOT entry for the indicated symbol.\hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 .TOC. refers to the TOC base of the TOC section for the object being relocated. See {\field{\*\fldinst   HYPERLINK  \\l ID_TOC}{\fldrslt Section 4.3}} for additional information. The dynamic linker does not have this information, and hence relocation types that refer to .TOC. may only appear in relocatable object files, not in executables or shared objects.\hyphpar0\par\pard\sb200\sl260 {\*\bkmkstart _873}{\*\bkmkend _873}\b Figure 4-1. Relocation Table\keepn\hyphpar0\par\pard\sb100\sl234 \b0\fs18\f2 Name                      Value    Field         Calculation\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
R_PPC64_NONE              0        none          none\sa0\par\fi0\sb0
R_PPC64_ADDR32            1        word32*       S + A\sa0\par\fi0\sb0
R_PPC64_ADDR24            2        low24*        (S + A) >> 2\sa0\par\fi0\sb0
R_PPC64_ADDR16            3        half16*       S + A\sa0\par\fi0\sb0
R_PPC64_ADDR16_LO         4        half16        #lo(S + A)\sa0\par\fi0\sb0
R_PPC64_ADDR16_HI         5        half16        #hi(S + A)\sa0\par\fi0\sb0
R_PPC64_ADDR16_HA         6        half16        #ha(S + A)\sa0\par\fi0\sb0
R_PPC64_ADDR14            7        low14*        (S + A) >> 2\sa0\par\fi0\sb0
R_PPC64_ADDR14_BRTAKEN    8        low14*        (S + A) >> 2\sa0\par\fi0\sb0
R_PPC64_ADDR14_BRNTAKEN   9        low14*        (S + A) >> 2\sa0\par\fi0\sb0
R_PPC64_REL24             10       low24*        (S + A - P) >> 2\sa0\par\fi0\sb0
R_PPC64_REL14             11       low14*        (S + A - P) >> 2\sa0\par\fi0\sb0
R_PPC64_REL14_BRTAKEN     12       low14*        (S + A - P) >> 2\sa0\par\fi0\sb0
R_PPC64_REL14_BRNTAKEN    13       low14*        (S + A - P) >> 2\sa0\par\fi0\sb0
R_PPC64_GOT16             14             half16*       G\sa0\par\fi0\sb0
R_PPC64_GOT16_LO          15             half16        #lo(G)\sa0\par\fi0\sb0
R_PPC64_GOT16_HI          16             half16        #hi(G)\sa0\par\fi0\sb0
R_PPC64_GOT16_HA          17             half16        #ha(G)\sa0\par\fi0\sb0
R_PPC64_COPY              19       none          none\sa0\par\fi0\sb0
R_PPC64_GLOB_DAT          20       doubleword64  S + A\sa0\par\fi0\sb0
R_PPC64_JMP_SLOT          21       none          see below\sa0\par\fi0\sb0
R_PPC64_RELATIVE          22       doubleword64  B + A\sa0\par\fi0\sb0
R_PPC64_UADDR32           24       word32*       S + A\sa0\par\fi0\sb0
R_PPC64_UADDR16           25       half16*       S + A\sa0\par\fi0\sb0
R_PPC64_REL32             26       word32*       S + A - P\sa0\par\fi0\sb0
R_PPC64_PLT32             27             word32*       L\sa0\par\fi0\sb0
R_PPC64_PLTREL32          28             word32*       L - P\sa0\par\fi0\sb0
R_PPC64_PLT16_LO          29             half16        #lo(L)\sa0\par\fi0\sb0
R_PPC64_PLT16_HI          30             half16        #hi(L)\sa0\par\fi0\sb0
R_PPC64_PLT16_HA          31             half16        #ha(L)\sa0\par\fi0\sb0
R_PPC64_SECTOFF           33       half16*       R + A\sa0\par\fi0\sb0
R_PPC64_SECTOFF_LO        34       half16        #lo(R + A)\sa0\par\fi0\sb0
R_PPC64_SECTOFF_HI        35       half16        #hi(R + A)\sa0\par\fi0\sb0
R_PPC64_SECTOFF_HA        36       half16        #ha(R + A)\sa0\par\fi0\sb0
R_PPC64_ADDR30            37       word30        (S + A - P) >> 2\sa0\par\fi0\sb0
R_PPC64_ADDR64            38       doubleword64  S + A\sa0\par\fi0\sb0
R_PPC64_ADDR16_HIGHER     39       half16        #higher(S + A)\sa0\par\fi0\sb0
R_PPC64_ADDR16_HIGHERA    40       half16        #highera(S + A)\sa0\par\fi0\sb0
R_PPC64_ADDR16_HIGHEST    41       half16        #highest(S + A)\sa0\par\fi0\sb0
R_PPC64_ADDR16_HIGHESTA   42       half16        #highesta(S + A)\sa0\par\fi0\sb0
R_PPC64_UADDR64           43       doubleword64  S + A\sa0\par\fi0\sb0
R_PPC64_REL64             44       doubleword64  S + A - P\sa0\par\fi0\sb0
R_PPC64_PLT64             45             doubleword64  L\sa0\par\fi0\sb0
R_PPC64_PLTREL64          46             doubleword64  L - P\sa0\par\fi0\sb0
R_PPC64_TOC16             47       half16*       S + A - .TOC.\sa0\par\fi0\sb0
R_PPC64_TOC16_LO          48       half16        #lo(S + A - .TOC.)\sa0\par\fi0\sb0
R_PPC64_TOC16_HI          49       half16        #hi(S + A - .TOC.)\sa0\par\fi0\sb0
R_PPC64_TOC16_HA          50       half16        #ha(S + A - .TOC.)\sa0\par\fi0\sb0
R_PPC64_TOC               51       doubleword64  .TOC.\sa0\par\fi0\sb0
R_PPC64_PLTGOT16          52             half16*       M\sa0\par\fi0\sb0
R_PPC64_PLTGOT16_LO       53             half16        #lo(M)\sa0\par\fi0\sb0
R_PPC64_PLTGOT16_HI       54             half16        #hi(M)\sa0\par\fi0\sb0
R_PPC64_PLTGOT16_HA       55             half16        #ha(M)\sa0\par\fi0\sb0
R_PPC64_ADDR16_DS         56       half16ds*     (S + A) >> 2\sa0\par\fi0\sb0
R_PPC64_ADDR16_LO_DS      57       half16ds      #lo(S + A) >> 2\sa0\par\fi0\sb0
R_PPC64_GOT16_DS          58             half16ds*     G >> 2\sa0\par\fi0\sb0
R_PPC64_GOT16_LO_DS       59             half16ds      #lo(G) >> 2\sa0\par\fi0\sb0
R_PPC64_PLT16_LO_DS       60             half16ds      #lo(L) >> 2\sa0\par\fi0\sb0
R_PPC64_SECTOFF_DS        61       half16ds*     (R + A) >> 2\sa0\par\fi0\sb0
R_PPC64_SECTOFF_LO_DS     62       half16ds      #lo(R + A) >> 2\sa0\par\fi0\sb0
R_PPC64_TOC16_DS          63       half16ds*     (S + A - .TOC.) >> 2\sa0\par\fi0\sb0
R_PPC64_TOC16_LO_DS       64       half16ds      #lo(S + A - .TOC.) >> 2\sa0\par\fi0\sb0
R_PPC64_PLTGOT16_DS       65             half16ds*     M >> 2\sa0\par\fi0\sb0
R_PPC64_PLTGOT16_LO_DS    66             half16ds      #lo(M) >> 2\sa0\par\fi0\sb0
R_PPC64_TLS               67             none          none\sa0\par\fi0\sb0
R_PPC64_DTPMOD64          68             doubleword64  @dtpmod\sa0\par\fi0\sb0
R_PPC64_TPREL16           69             half16*       @tprel\sa0\par\fi0\sb0
R_PPC64_TPREL16_LO        60             half16        #lo(@tprel)\sa0\par\fi0\sb0
R_PPC64_TPREL16_HI        71             half16        #hi(@tprel)\sa0\par\fi0\sb0
R_PPC64_TPREL16_HA        72             half16        #ha(@tprel)\sa0\par\fi0\sb0
R_PPC64_TPREL64           73             doubleword64  @tprel\sa0\par\fi0\sb0
R_PPC64_DTPREL16          74             half16*       @dtprel\sa0\par\fi0\sb0
R_PPC64_DTPREL16_LO       75             half16        #lo(@dtprel)\sa0\par\fi0\sb0
R_PPC64_DTPREL16_HI       76             half16        #hi(@dtprel)\sa0\par\fi0\sb0
R_PPC64_DTPREL16_HA       77             half16        #ha(@dtprel)\sa0\par\fi0\sb0
R_PPC64_DTPREL64          78             doubleword64  @dtprel\sa0\par\fi0\sb0
R_PPC64_GOT_TLSGD16       79             half16*       @got@tlsgd\sa0\par\fi0\sb0
R_PPC64_GOT_TLSGD16_LO    80             half16        #lo(@got@tlsgd)\sa0\par\fi0\sb0
R_PPC64_GOT_TLSGD16_HI    81             half16        #hi(@got@tlsgd)\sa0\par\fi0\sb0
R_PPC64_GOT_TLSGD16_HA    82             half16        #ha(@got@tlsgd)\sa0\par\fi0\sb0
R_PPC64_GOT_TLSLD16       83             half16*       @got@tlsld\sa0\par\fi0\sb0
R_PPC64_GOT_TLSLD16_LO    84             half16        #lo(@got@tlsld)\sa0\par\fi0\sb0
R_PPC64_GOT_TLSLD16_HI    85             half16        #hi(@got@tlsld)\sa0\par\fi0\sb0
R_PPC64_GOT_TLSLD16_HA    86             half16        #ha(@got@tlsld)\sa0\par\fi0\sb0
R_PPC64_GOT_TPREL16_DS    87             half16ds*     @got@tprel\sa0\par\fi0\sb0
R_PPC64_GOT_TPREL16_LO_DS 88             half16ds      #lo(@got@tprel)\sa0\par\fi0\sb0
R_PPC64_GOT_TPREL16_HI    89             half16        #hi(@got@tprel)\sa0\par\fi0\sb0
R_PPC64_GOT_TPREL16_HA    90             half16        #ha(@got@tprel)\sa0\par\fi0\sb0
R_PPC64_GOT_DTPREL16_DS   91             half16ds*     @got@dtprel\sa0\par\fi0\sb0
R_PPC64_GOT_DTPREL16_LO_DS92             half16ds      #lo(@got@dtprel)\sa0\par\fi0\sb0
R_PPC64_GOT_DTPREL16_HI   93             half16        #hi(@got@dtprel)\sa0\par\fi0\sb0
R_PPC64_GOT_DTPREL16_HA   94             half16        #ha(@got@dtprel)\sa0\par\fi0\sb0
R_PPC64_TPREL16_DS        95             half16ds*     @tprel\sa0\par\fi0\sb0
R_PPC64_TPREL16_LO_DS     96             half16ds      #lo(@tprel)\sa0\par\fi0\sb0
R_PPC64_TPREL16_HIGHER    97             half16        #higher(@tprel)\sa0\par\fi0\sb0
R_PPC64_TPREL16_HIGHERA   98             half16        #highera(@tprel)\sa0\par\fi0\sb0
R_PPC64_TPREL16_HIGHEST   99             half16        #highest(@tprel)\sa0\par\fi0\sb0
R_PPC64_TPREL16_HIGHESTA  100      half16        #highesta(@tprel)\sa0\par\fi0\sb0
R_PPC64_DTPREL16_DS       101      half16ds*     @dtprel\sa0\par\fi0\sb0
R_PPC64_DTPREL16_LO_DS    102      half16ds      #lo(@dtprel)\sa0\par\fi0\sb0
R_PPC64_DTPREL16_HIGHER   103      half16        #higher(@dtprel)\sa0\par\fi0\sb0
R_PPC64_DTPREL16_HIGHERA  104      half16        #highera(@dtprel)\sa0\par\fi0\sb0
R_PPC64_DTPREL16_HIGHEST  105      half16        #highest(@dtprel)\sa0\par\fi0\sb0
R_PPC64_DTPREL16_HIGHESTA 106      half16        #highesta(@dtprel)\hyphpar0\par\pard\sb200\li400\sl234 \b\f0 Note: \b0\f1 Relocation values 18, 23 and 32 are not used. This is to maintain a correspondence to the relocation values used by the \i 32-bit PowerPC ELF ABI\i0 .\hyphpar0\par\pard\sb400\sl260 \fs20\lang1033\f0 The relocation types whose Field column entry contains an asterisk (*) are subject to failure if the value computed does not fit in the allocated bits. \hyphpar0\par\pard\sb400\sl260 The relocation types in which the names include _BRTAKEN or _BRNTAKEN specify whether the branch prediction bit (bit 10) should indicate that the branch will be taken or not taken, respectively. For an unconditional branch, the branch prediction bit must be 0. \hyphpar0\par\pard\sb400\sl260 Relocations 56-66 are to be used for instructions with a DS offset field (ld, ldu, lwa, std, stdu). ABI conformant tools should give an error for attempts to relocate an address to a value that is not divisible by 4. \hyphpar0\par\pard\sb400\sl260 Relocation types with special semantics are described below. \hyphpar0\par\pard\sb200\sl260 \lang1024 R_PPC64_GOT16*\keepn\hyphpar0\par\pard\sb100\li400\sl260\fi-400 \tx400 \~\tab These relocation types resemble the corresponding R_PPC64_ADDR16* types, except that they refer to the address of the symbol's global offset table entry and additionally instruct the link editor to build a global offset table.\hyphpar0\par\pard\sb200\sl260 R_PPC64_PLTGOT16*\keepn\hyphpar0\par\pard\sb100\li400\sl260\fi-400 \tx400 \~\tab These relocation types resemble the corresponding R_PPC64_GOT16* types, except that the address stored in the global offset table entry may be the address of an entry in the procedure linkage table. If the link editor can determine the actual value of the symbol, it may store that in the corresponding GOT entry. Otherwise, it may create an entry in the procedure linkage table, and store that address in the GOT entry; this permits lazy resolution of function symbols at run time. Otherwise, the link editor may generate a R_PPC64_GLOB_DAT relocation as usual.\hyphpar0\par\pard\sb200\sl260 R_PPC64_COPY\keepn\hyphpar0\par\pard\sb100\li400\sl260\fi-400 \tx400 \~\tab The link editor creates this relocation type for dynamic linking. Its offset member refers to a location in a writable segment. The symbol table index specifies a symbol that should exist both in the current object file and in a shared object. During execution, the dynamic linker copies data associated with the shared object's symbol to the location specified by the offset.\hyphpar0\par\pard\sb200\sl260 R_PPC64_GLOB_DAT\keepn\hyphpar0\par\pard\sb100\li400\sl260\fi-400 \tx400 \~\tab This relocation type resembles R_PPC64_ADDR64, except that it sets a global offset table entry to the address of the specified symbol. This special relocation type allows one to determine the correspondence between symbols and global offset table entries.\hyphpar0\par\pard\sb200\sl260 R_PPC64_JMP_SLOT\keepn\hyphpar0\par\pard\sb100\li400\sl260\fi-400 \tx400 \~\tab The link editor creates this relocation type for dynamic linking. Its offset member gives the location of a procedure linkage table entry. The dynamic linker modifies the procedure linkage table entry to transfer control to the designated symbol's address (see {\field{\*\fldinst   HYPERLINK  \\l ID_PROC_45_LINK}{\fldrslt Section 5.2.4}}).\hyphpar0\par\pard\sb200\sl260 R_PPC64_RELATIVE\keepn\hyphpar0\par\pard\sb100\li400\sl260\fi-400 \tx400 \~\tab The link editor creates this relocation type for dynamic linking. Its offset member gives a location within a shared object that contains a value representing a relative address. The dynamic linker computes the corresponding virtual address by adding the virtual address at which the shared object was loaded to the relative address. Relocation entries for this type must specify 0 for the symbol table index.\hyphpar0\par\pard\sb200\sl260 R_PPC64_UADDR*\keepn\hyphpar0\par\pard\sb100\li400\sl260\fi-400 \tx400 \~\tab These relocation types are the same as the corresponding R_PPC64_ADDR* types, except that the datum to be relocated is allowed to be unaligned.\hyphpar0\par\sect\sectd\plain\pgwsxn11905\pghsxn16837\marglsxn1440\margrsxn1440\margtsxn1440\margbsxn1920\headery0\footery0\pgndec\titlepg{\headerf\pard\sl-240\sb770\sa430\plain\tqc\tx4512\tqr\tx9025 {}\tab {}\tab {}\par}{\footerf\pard\sl-240\sb770\sa910\plain\tqc\tx4512\tqr\tx9025 {}\tab {}\tab {\i\fs20 \chpgn }\par}{\headerl\pard\sl-240\sb770\sa430\plain\tqc\tx4512\tqr\tx9025 {}\tab {}\tab {\i\fs20 Chapter 5. Program Loading and Dynamic Linking}\par}{\footerl\pard\sl-240\sb770\sa910\plain\tqc\tx4512\tqr\tx9025 {}\tab {}\tab {\i\fs20 \chpgn }\par}{\headerr\pard\sl-240\sb770\sa430\plain\tqc\tx4512\tqr\tx9025 {}\tab {}\tab {\i\fs20 Chapter 5. Program Loading and Dynamic Linking}\par}{\footerr\pard\sl-240\sb770\sa910\plain\tqc\tx4512\tqr\tx9025 {}\tab {}\tab {\i\fs20 \chpgn }\par}\pard\sb311\s1\sl539 {\*\bkmkstart ID_PROG_45_LOAD_45_DL}{\*\bkmkend ID_PROG_45_LOAD_45_DL}\b\fs41 Chapter 5. Program Loading and Dynamic Linking\keepn\hyphpar0\par\pard\sb259\s2\sl449 {\*\bkmkstart ID_PROG_45_DL}{\*\bkmkend ID_PROG_45_DL}\fs34 5.1. Program Loading\keepn\hyphpar0\par\pard\sb400\sl260 \b0\fs20\lang1033 As the system creates or augments a process image, it logically copies a file's segment to a virtual memory segment. When--and if--the system physically reads the file depends on the program's execution behavior, system load, and so on. A process does not require a physical page unless it references the logical page during execution, and processes commonly leave many pages unreferenced. Therefore, delaying physical reads frequently obviates them, improving system performance. To obtain this efficiency in practice, executable and shared object files must have segment images whose offsets and virtual addresses are congruent, modulo the page size. \hyphpar0\par\pard\sb400\sl260 Virtual addresses and file offsets for the 64-bit PowerPC processor family segments are congruent modulo 64 Kbytes (0x10000) or larger powers of 2. Although 4096 bytes is currently the 64-bit PowerPC page size, this allows files to be suitable for paging even if implementations appear with larger page sizes. The value of the p_align member of each program header in a shared object file must be 0x10000. \hyphpar0\par\pard\sb400\sl260 It is normally desirable to put segments with different characteristics in separate 256 Mbyte portions of the address space, to give the operating system full paging flexibility in the 64-bit address space. \hyphpar0\par\pard\sb400\sl260 Here is an example of an executable file assuming an executable program linked with a base address of 0x10000000. \hyphpar0\par\pard\sb200\sl234 \fs18\lang1024\f2 File Offset                             Virtual Address\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
0\sa0\par\fi0\sb0
            ELF header\sa0\par\fi0\sb0
            Program header table\sa0\par\fi0\sb0
            Other information\sa0\par\fi0\sb0
0x100                                   0x10000100\sa0\par\fi0\sb0
            Text segment\sa0\par\fi0\sb0
            . . .\sa0\par\fi0\sb0
            0x2be00 bytes\sa0\par\fi0\sb0
                                        0x1002beff\sa0\par\fi0\sb0
0x2bf00                                 0x2003bf00\sa0\par\fi0\sb0
            Data segment\sa0\par\fi0\sb0
            . . .\sa0\par\fi0\sb0
            0x4e00 bytes\sa0\par\fi0\sb0
                                        0x20040cff\sa0\par\fi0\sb0
0x30d00\sa0\par\fi0\sb0
            Other information\hyphpar0\par\pard\sb400\sl260 \fs20\lang1033\f0 Here are possible corresponding program header segments: \hyphpar0\par\pard\sb200\sl234 \fs18\lang1024\f2 Member      Text            Data\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
p_type      PT_LOAD         PT_LOAD\sa0\par\fi0\sb0
p_offset    0x100           0x2bf00\sa0\par\fi0\sb0
p_vaddr     0x10000100      0x2003bf00\sa0\par\fi0\sb0
p_paddr     unspecified     unspecified\sa0\par\fi0\sb0
p_filesz    0x2be00         0x4e00\sa0\par\fi0\sb0
p_memsz     0x2be00         0x5e24\sa0\par\fi0\sb0
p_flags     PF_R+PF_X       PF_R+PF_W\sa0\par\fi0\sb0
p_align     0x10000         0x10000\hyphpar0\par\pard\sb200\li400\sl234 \b\f0 Note: \b0\f1 The example addresses for the text and data segments are chosen for compatibility with AIX, and it is suggested, though not required, that tools supporting this ABI use similar addresses.\hyphpar0\par\pard\sb400\sl260 \fs20\lang1033\f0 Although the file offsets and virtual addresses are congruent modulo 64 Kbytes for both text and data, up to four file pages can hold impure text or data (depending on page size and file system block size). \hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16\lang1024 \'95\tab \fs20 The first text page contains the ELF header, the program header table, and other information.\hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 The last text page may hold a copy of the beginning of data.\hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 The first data page may have a copy of the end of text.\hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 The last data page may contain file information not relevant to the running process.\hyphpar0\par\pard\sb400\sl260 \lang1033 Logically, the system enforces memory permissions as if each segment were complete and separate; segment addresses are adjusted to ensure that each logical page in the address space has a single set of permissions. In the example above, the file region holding the end of text and the beginning of data is mapped twice; at one virtual address for text and at a different virtual address for data. \hyphpar0\par\pard\sb400\sl260 The end of the data segment requires special handling for uninitialized data, which the system defines to begin with zero values. Thus if the last data page of a file includes information not in the logical memory page, the extraneous data must be set to zero, rather than to the unknown contents of the executable file. "Impurities" in the other three pages are not logically part of the process image; whether the system expunges them is unspecified. The memory image for the program above is shown here, assuming 4096 (0x1000) byte pages. \hyphpar0\par\pard\sb200\sl260 {\*\bkmkstart _940}{\*\bkmkend _940}\b\lang1024 Figure 5-1. Virtual Address\keepn\hyphpar0\par\pard\sb100\sl234 \b0\fs18\f2 Text segment:\sa0\par\fi0\sb0
0x02000000\sa0\par\fi0\sb0
            Header padding\sa0\par\fi0\sb0
            0x100 bytes\sa0\par\fi0\sb0
0x02000100\sa0\par\fi0\sb0
            Text segment\sa0\par\fi0\sb0
            ...\sa0\par\fi0\sb0
            0x2be00 bytes\sa0\par\fi0\sb0
0x0202bf00\sa0\par\fi0\sb0
            Data padding\sa0\par\fi0\sb0
            0x100 bytes\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
Data segment:\sa0\par\fi0\sb0
0x0203b000\sa0\par\fi0\sb0
            Text padding\sa0\par\fi0\sb0
            0xf00 bytes\sa0\par\fi0\sb0
0x0203bf00\sa0\par\fi0\sb0
            Data segment\sa0\par\fi0\sb0
            ...\sa0\par\fi0\sb0
            0x4e00 bytes\sa0\par\fi0\sb0
0x02040d00\sa0\par\fi0\sb0
            Uninitialized data\sa0\par\fi0\sb0
            0x1024 bytes\sa0\par\fi0\sb0
0x02041d24\sa0\par\fi0\sb0
            Page padding\sa0\par\fi0\sb0
            0x2dc zero bytes\hyphpar0\par\pard\sb400\sl260 \fs20\lang1033\f0 One aspect of segment loading differs between executable files and shared objects. Executable file segments may contain absolute code. For the process to execute correctly, the segments must reside at the virtual addresses assigned when building the executable file, with the system using the p_vaddr values unchanged as virtual addresses. \hyphpar0\par\pard\sb400\sl260 On the other hand, shared object segments typically contain position-independent code. This allows a segment's virtual address to change from one process to another, without invalidating execution behavior. \hyphpar0\par\pard\sb400\sl260 Though the system chooses virtual addresses for individual processes, most systems will maintain the "relative positions" of the segments. Any use of relative addressing between segments should be indicated by an appropriate dynamic relocation. If the dynamic linker does not maintain the relative position of segments at load time, it must be careful in its handling of R_PPC64_RELATIVE relocations, examining the relative address in order to determine the appropriate base address to use. \hyphpar0\par\pard\sb400\sl260 The following table shows possible shared object virtual address assignments for several processes, illustrating constant relative positioning. The table also illustrates the base address computations. \hyphpar0\par\pard\sb200\sl234 \fs18\lang1024\f2 Source       Text        Data       Base Address\sa0\par\fi0\sb0
File         0x000200    0x02a400\sa0\par\fi0\sb0
Process 1    0x100200    0x12a400    0x100000\sa0\par\fi0\sb0
Process 2    0x200200    0x22a400    0x200000\sa0\par\fi0\sb0
Process 3    0x300200    0x32a400    0x300000\sa0\par\fi0\sb0
Process 4    0x400200    0x42a400    0x400000\hyphpar0\par\pard\sb216\s3\sl374 {\*\bkmkstart ID_PROG_45_INT}{\*\bkmkend ID_PROG_45_INT}\b\fs28\f0 5.1.1. Program Interpreter\keepn\hyphpar0\par\pard\sb400\sl260 \b0\fs20\lang1033 The standard program interpreter is /usr/lib/ld.so.1.\hyphpar0\par\pard\sb259\s2\sl449 {\*\bkmkstart ID_DYNAM_45_LINK}{\*\bkmkend ID_DYNAM_45_LINK}\b\fs34\lang1024 5.2. Dynamic Linking\keepn\hyphpar0\par\pard\sb400\s3\sl374 {\*\bkmkstart ID_DYNAM_45_SECT}{\*\bkmkend ID_DYNAM_45_SECT}\fs28 5.2.1. Dynamic Section\keepn\hyphpar0\par\pard\sb400\sl260 \b0\fs20\lang1033 Dynamic section entries give information to the dynamic linker. Some of this information is processor-specific, including the interpretation of some entries in the dynamic structure. \hyphpar0\par\pard\sb200\sl260 \lang1024 DT_PLTGOT\keepn\hyphpar0\par\pard\sb100\li400\sl260\fi-400 \tx400 \~\tab This entry's d_ptr member gives the address of the first byte in the procedure linkage table.\hyphpar0\par\pard\sb200\sl260 DT_JMPREL\keepn\hyphpar0\par\pard\sb100\li400\sl260\fi-400 \tx400 \~\tab As explained in the System V ABI, this entry is associated with a table of relocation entries for the procedure linkage table. For the 64-bit PowerPC, this entry is mandatory both for executable and shared object files. Moreover, the relocation table's entries must have a one-to-one correspondence with the procedure linkage table. The table of DT_JMPREL relocation entries is wholly contained within the DT_RELA referenced table. See {\field{\*\fldinst   HYPERLINK  \\l ID_PROC_45_LINK}{\fldrslt Section 5.2.4}} later in this chapter for more information.\hyphpar0\par\pard\sb216\s3\sl374 {\*\bkmkstart ID_GLOBAL}{\*\bkmkend ID_GLOBAL}\b\fs28 5.2.2. Global Offset Table\keepn\hyphpar0\par\pard\sb400\sl260 \b0\fs20\lang1033 Position-independent code cannot, in general, contain absolute virtual addresses. The global offset table, which is part of the TOC section, holds absolute addresses in private data, thus making the addresses available without compromising the position-independence and sharability of a program's text. A program references its TOC using position-independent addressing and extracts absolute values, thus redirecting position-independent references to absolute locations. \hyphpar0\par\pard\sb400\sl260 When the dynamic linker creates memory segments for a loadable object file, it processes the relocation entries, some of which will be of type R_PPC64_GLOB_DAT, referring to the global offset table within the TOC. The dynamic linker determines the associated symbol values, calculates their absolute addresses, and sets the global offset table entries to the proper values. Although the absolute addresses are unknown when the link editor builds an object file, the dynamic linker knows the addresses of all memory segments and can thus calculate the absolute addresses of the symbols contained therein. \hyphpar0\par\pard\sb400\sl260 A global offset table entry provides direct access to the absolute address of a symbol without compromising position-independence and sharability. Because the executable file and shared objects have separate global offset tables, a symbol may appear in several tables. The dynamic linker processes all the global offset table relocations before giving control to any code in the process image, thus ensuring the absolute addresses are available during execution. \hyphpar0\par\pard\sb400\sl260 The global offset table is part of the TOC section. Since different functions in a single executable or shared object may have different TOC sections, the global offset table may also be replicated, in whole or in part. Each instance of the global offset table will have its own set of relocations. The dynamic linker need not know about the replication; it simply processes all the relocations it is given. \hyphpar0\par\pard\sb400\sl260 The dynamic linker may choose different memory segment addresses for the same shared object in different programs; it may even choose different library addresses for different executions of the same program. Nonetheless, memory segments do not change addresses once the process image is established. As long as a process exists, its memory segments reside at fixed virtual addresses. \hyphpar0\par\pard\sb400\sl260 The global offset table normally resides in the ELF .got section in an executable or shared object. \hyphpar0\par\pard\sb216\s3\sl374 {\*\bkmkstart ID_FUNC_45_ADDRESS}{\*\bkmkend ID_FUNC_45_ADDRESS}\b\fs28\lang1024 5.2.3. Function Addresses\keepn\hyphpar0\par\pard\sb400\sl260 \b0\fs20\lang1033 References to the address of a function from an executable file and the shared objects associated with it need to resolve to the same value. \hyphpar0\par\pard\sb400\sl260 In this ABI, the address of a function is actually the address of a function descriptor. A reference to a function, other than a function call, will normally load the address of the function descriptor from the global offset table. The dynamic linker will ensure that for a given function, the same address is used for all references to the function from any global offset table. Thus, function address comparisons will work as expected. \hyphpar0\par\pard\sb400\sl260 When making a call to the function, the code may refer to the procedure linkage table entry, in order to permit lazy symbol resolution at run time. In order to support correct function address comparisons, the compiler should be careful to only generate references to the procedure linkage table entry for function calls. For any other use of a function, the compiler should use the real address. \hyphpar0\par\pard\sb400\sl260 When using the ELF assembler syntax, this means that the compiler should use the @got syntax, rather than the @got@plt syntax, if the function address is going to be used without being called. \hyphpar0\par\pard\sb216\s3\sl374 {\*\bkmkstart ID_PROC_45_LINK}{\*\bkmkend ID_PROC_45_LINK}\b\fs28\lang1024 5.2.4. Procedure Linkage Table\keepn\hyphpar0\par\pard\sb400\sl260 \b0\fs20\lang1033 The procedure linkage table may be used to redirect function calls between the executable and a shared object or between different shared objects. Because all function calls on the 64-bit PowerPC are done via function descriptors, the procedure linkage table is simply a special case of a function descriptor which is filled in by the dynamic linker rather than the link editor. \hyphpar0\par\pard\sb400\sl260 The procedure linkage table is purely an optimization designed to permit lazy symbol resolution at run time. The link editor may generate R_PPC64_GLOB_DAT relocations for all function descriptors defined in other shared objects, and avoid generating a procedure linkage table at all. \hyphpar0\par\pard\sb400\sl260 The procedure linkage table is normally found in the .plt section in an executable or shared object. Its contents are not initialized in the executable or shared object file. Instead, the link editor simply reserves space for it, and the dynamic linker initializes it and manages it according to its own, possibly implementation-dependent needs, subject to the following constraint: \hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16\lang1024 \'95\tab \fs20 If the executable or shared object requires N procedure linkage table entries, the link editor shall reserve 3*(N+1) doublewords (24*(N+1) bytes). These doublewords will be used to hold function descriptors. When calling function i, the link editor arranges to use the function descriptor at byte 24 * i. The first procedure linkage table entry is reserved for use by the dynamic linker.\hyphpar0\par\pard\sb400\sl260 \lang1033 As mentioned before, a relocation table is associated with the procedure linkage table. The DT_JMPREL entry in the dynamic section gives the location of the first relocation entry. The relocation table's entries parallel the procedure linkage table entries in a one-to-one correspondence. That is, relocation table entry 1 applies to procedure linkage table entry 1, and so on. The relocation type for each entry shall be R_PPC64_JMP_SLOT, the relocation offset shall specify the address of the first byte of the associated procedure linkage table entry, and the symbol table index shall reference the appropriate symbol. \hyphpar0\par\pard\sb400\sl260 The dynamic linker will locate the symbol referenced by the R_PPC64_JMP_SLOT relocation. The value of the symbol will be the address of the function descriptor. The dynamic linker will copy these 24 bytes into the procedure linkage table entry. \hyphpar0\par\pard\sb400\sl260 The dynamic linker can resolve the procedure linkage table relocations lazily, resolving them only when they are needed. This can speed up program startup time. \hyphpar0\par\pard\sb400\sl260 The following code shows how the dynamic linker might initialize the procedure linkage table in order to provide lazy resolution: \hyphpar0\par\pard\sb200\sl234 \fs18\lang1024\f2 .GLINK:\sa0\par\fi0\sb0
.GLINK0:\sa0\par\fi0\sb0
    ld      r2, 40(r1)\sa0\par\fi0\sb0
    addis   r12,r2,.PLT0@toc@ha\sa0\par\fi0\sb0
    addi    r12,r12,.PLT0@toc@l\sa0\par\fi0\sb0
    ld      r11,0(r12)\sa0\par\fi0\sb0
    ld      r2, 8(r12)\sa0\par\fi0\sb0
    mtctr   r11\sa0\par\fi0\sb0
    ld      r11,16(r12)\sa0\par\fi0\sb0
    bctr\sa0\par\fi0\sb0
.GLINK1:\sa0\par\fi0\sb0
    li      r0,0\sa0\par\fi0\sb0
    b       .GLINK0\sa0\par\fi0\sb0
.GLINKi:                        # i <= 32768\sa0\par\fi0\sb0
    li      r0,i - 1\sa0\par\fi0\sb0
    b       .GLINK0\sa0\par\fi0\sb0
.GLINKN:                        # N > 32768\sa0\par\fi0\sb0
    lis     r0,(N - 1) >> 16\sa0\par\fi0\sb0
    ori     r0,r0,(N - 1) & 0xffff\sa0\par\fi0\sb0
    b       .GLINK0\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
...\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
.PLT:\sa0\par\fi0\sb0
.PLT0:\sa0\par\fi0\sb0
    .quad   ld_so_fixup_func\sa0\par\fi0\sb0
    .quad   ld_so_toc\sa0\par\fi0\sb0
    .quad   ld_so_ident\sa0\par\fi0\sb0
.PLT1:\sa0\par\fi0\sb0
    .quad   .GLINK1\sa0\par\fi0\sb0
    .quad   0\sa0\par\fi0\sb0
    .quad   0\sa0\par\fi0\sb0
    ...\sa0\par\fi0\sb0
.PLTi:\sa0\par\fi0\sb0
    .quad   .GLINKi\sa0\par\fi0\sb0
    .quad   0\sa0\par\fi0\sb0
    .quad   0\sa0\par\fi0\sb0
    ...\sa0\par\fi0\sb0
.PLTN:\sa0\par\fi0\sb0
    .quad   .GLINKN\sa0\par\fi0\sb0
    .quad   0\sa0\par\fi0\sb0
    .quad   0\hyphpar0\par\pard\sb400\sl260 \fs20\lang1033\f0 Following the steps below, the dynamic linker and the program cooperate to resolve symbolic references through the procedure linkage table. Again, the steps described below are for explanation only. The precise execution-time behavior of the dynamic linker is not specified. \hyphpar0\par\pard\sb100\li360\sl260\fi-360 \tqr\tx310\tx360\tab \lang1024 1.\tab As shown above, each procedure linkage table entry I, as initialized by the link editor, transfers control to the corresponding glink entry I at .GLINKI. The instructions at .GLINKI loads a relocation index into r0 and branches to the common .GLINK0 code, the first entry in the GLINK table. For example, assume the program calls NAME, which uses the function descriptor at the label .PLTi. The function descriptor causes the program to branch to .GLINKi which loads i - 1 into r0 and branches to .GLINK0.\hyphpar0\par\pard\sb100\li360\sl260\fi-360 \tqr\tx310\tx360\tab 2.\tab .GLINK0 loads three values from the PLT Reserve area allocated by the link editor and initialized by the dynamic linker. The first doubleword is the dynamic linker's lazy binding entry point. The second doubleword is the dynamic linker's own TOC anchor value. The third doubleword is an 8-byte identifier unique to the calling module which must be placed into r11 (normally the static chain), so that the dynamic linker can identify the object from which the call originated, and thereby located that object's relocation table. .GLINK0 then calls into the dynamic linker with the PLT index copied into r0 and the identifying information copied into r11.\hyphpar0\par\pard\sb100\li360\sl260\fi-360 \tqr\tx310\tx360\tab 3.\tab The dynamic linker finds relocation entry i corresponding to the index in r0. It will have type R_PPC_JMP_SLOT, its offset will specify the address of .PLTi, and its symbol table index will reference NAME.\hyphpar0\par\pard\sb100\li360\sl260\fi-360 \tqr\tx310\tx360\tab 4.\tab Knowing this, the dynamic linker finds the symbol's "real" value. It then copies the function descriptor into the code at .PLTi.\hyphpar0\par\pard\sb100\li360\sl260\fi-360 \tqr\tx310\tx360\tab 5.\tab Subsequent executions of the procedure linkage table entry will transfer control directly to the function via the function descriptor at .PLTi, without invoking the dynamic linker.\hyphpar0\par\pard\sb400\sl260 \lang1033 The LD_BIND_NOW environment variable can change dynamic linking behavior. If its value is non-null, the dynamic linker resolves the function call binding at load time, before transferring control to the program. That is, the dynamic linker processes relocation entries of type R_PPC_JMP_SLOT during process initialization. Otherwise, the dynamic linker evaluates procedure linkage table entries lazily, delaying symbol resolution and relocation until the first execution of a table entry. \hyphpar0\par\pard\sb400\sl260 Lazy binding generally improves overall application performance because unused symbols do not incur the dynamic linking overhead. Nevertheless, two situations make lazy binding undesirable for some applications: \hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16\lang1024 \'95\tab \fs20 The initial reference to a shared object function takes longer than subsequent calls because the dynamic linker intercepts the call to resolve the symbol, and some applications cannot tolerate this unpredictability.\hyphpar0\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 If an error occurs and the dynamic linker cannot resolve the symbol, the dynamic linker will terminate the program. Under lazy binding, this might occur at arbitrary times. Once again, some applications cannot tolerate this unpredictability. By turning off lazy binding, the dynamic linker forces the failure to occur during process initialization, before the application receives control.\hyphpar0\par\sect\sectd\plain\pgwsxn11905\pghsxn16837\marglsxn1440\margrsxn1440\margtsxn1440\margbsxn1920\headery0\footery0\pgndec\titlepg{\headerf\pard\sl-240\sb770\sa430\plain\tqc\tx4512\tqr\tx9025 {}\tab {}\tab {}\par}{\footerf\pard\sl-240\sb770\sa910\plain\tqc\tx4512\tqr\tx9025 {}\tab {}\tab {\i\fs20 \chpgn }\par}{\headerl\pard\sl-240\sb770\sa430\plain\tqc\tx4512\tqr\tx9025 {}\tab {}\tab {\i\fs20 Chapter 6. Libraries}\par}{\footerl\pard\sl-240\sb770\sa910\plain\tqc\tx4512\tqr\tx9025 {}\tab {}\tab {\i\fs20 \chpgn }\par}{\headerr\pard\sl-240\sb770\sa430\plain\tqc\tx4512\tqr\tx9025 {}\tab {}\tab {\i\fs20 Chapter 6. Libraries}\par}{\footerr\pard\sl-240\sb770\sa910\plain\tqc\tx4512\tqr\tx9025 {}\tab {}\tab {\i\fs20 \chpgn }\par}\pard\sb311\s1\sl539 {\*\bkmkstart ID_LIB}{\*\bkmkend ID_LIB}\b\fs41 Chapter 6. Libraries\keepn\hyphpar0\par\pard\sb400\sl260 \b0\fs20\lang1033 This document does not specify any library interfaces.\hyphpar0\par\sect\sectd\plain\pgwsxn11905\pghsxn16837\marglsxn1440\margrsxn1440\margtsxn1440\margbsxn1920\headery0\footery0\pgndec\titlepg{\headerf\pard\sl-240\sb770\sa430\plain\tqc\tx4512\tqr\tx9025 {}\tab {}\tab {}\par}{\footerf\pard\sl-240\sb770\sa910\plain\tqc\tx4512\tqr\tx9025 {}\tab {}\tab {\i\fs20 \chpgn }\par}{\headerl\pard\sl-240\sb770\sa430\plain\tqc\tx4512\tqr\tx9025 {}\tab {}\tab {\i\fs20 Appendix A. GNU Free Documentation License}\par}{\footerl\pard\sl-240\sb770\sa910\plain\tqc\tx4512\tqr\tx9025 {}\tab {}\tab {\i\fs20 \chpgn }\par}{\headerr\pard\sl-240\sb770\sa430\plain\tqc\tx4512\tqr\tx9025 {}\tab {}\tab {\i\fs20 Appendix A. GNU Free Documentation License}\par}{\footerr\pard\sl-240\sb770\sa910\plain\tqc\tx4512\tqr\tx9025 {}\tab {}\tab {\i\fs20 \chpgn }\par}\pard\sb311\s1\sl539 {\*\bkmkstart ID_GFDL}{\*\bkmkend ID_GFDL}\b\fs41 Appendix A. GNU Free Documentation License\keepn\hyphpar0\par\pard\sb400\sl260 \b0\fs20\lang1033 Version 1.1, March 2000\hyphpar0\par\pard\sb100\li200\ri200\sl234 \fs18\lang1024 Copyright (C) 2000 Free Software Foundation, Inc. 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.\hyphpar0\par\pard\sb259\s2\sl449 {\*\bkmkstart ID_GFDL_45_0}{\*\bkmkend ID_GFDL_45_0}\b\fs34 A.1. PREAMBLE\keepn\hyphpar0\par\pard\sb400\sl260 \b0\fs20\lang1033 The purpose of this License is to make a manual, textbook, or other written document "free" in the sense of freedom: to assure everyone the effective freedom to copy and redistribute it, with or without modifying it, either commercially or noncommercially. Secondarily, this License preserves for the author and publisher a way to get credit for their work, while not being considered responsible for modifications made by others.\hyphpar0\par\pard\sb400\sl260 This License is a kind of "copyleft", which means that derivative works of the document must themselves be free in the same sense. It complements the GNU General Public License, which is a copyleft license designed for free software.\hyphpar0\par\pard\sb400\sl260 We have designed this License in order to use it for manuals for free software, because free software needs free documentation: a free program should come with manuals providing the same freedoms that the software does. But this License is not limited to software manuals; it can be used for any textual work, regardless of subject matter or whether it is published as a printed book. We recommend this License principally for works whose purpose is instruction or reference.\hyphpar0\par\pard\sb259\s2\sl449 {\*\bkmkstart ID_GFDL_45_1}{\*\bkmkend ID_GFDL_45_1}\b\fs34\lang1024 A.2. APPLICABILITY AND DEFINITIONS\keepn\hyphpar0\par\pard\sb400\sl260 \b0\fs20\lang1033 This License applies to any manual or other work that contains a notice placed by the copyright holder saying it can be distributed under the terms of this License. The "Document", below, refers to any such manual or work. Any member of the public is a licensee, and is addressed as "you".\hyphpar0\par\pard\sb400\sl260 A "Modified Version" of the Document means any work containing the Document or a portion of it, either copied verbatim, or with modifications and/or translated into another language.\hyphpar0\par\pard\sb400\sl260 A "Secondary Section" is a named appendix or a front-matter section of the Document that deals exclusively with the relationship of the publishers or authors of the Document to the Document's overall subject (or to related matters) and contains nothing that could fall directly within that overall subject. (For example, if the Document is in part a textbook of mathematics, a Secondary Section may not explain any mathematics.) The relationship could be a matter of historical connection with the subject or with related matters, or of legal, commercial, philosophical, ethical or political position regarding them.\hyphpar0\par\pard\sb400\sl260 The "Invariant Sections" are certain Secondary Sections whose titles are designated, as being those of Invariant Sections, in the notice that says that the Document is released under this License.\hyphpar0\par\pard\sb400\sl260 The "Cover Texts" are certain short passages of text that are listed, as Front-Cover Texts or Back-Cover Texts, in the notice that says that the Document is released under this License.\hyphpar0\par\pard\sb400\sl260 A "Transparent" copy of the Document means a machine-readable copy, represented in a format whose specification is available to the general public, whose contents can be viewed and edited directly and straightforwardly with generic text editors or (for images composed of pixels) generic paint programs or (for drawings) some widely available drawing editor, and that is suitable for input to text formatters or for automatic translation to a variety of formats suitable for input to text formatters. A copy made in an otherwise Transparent file format whose markup has been designed to thwart or discourage subsequent modification by readers is not Transparent. A copy that is not "Transparent" is called "Opaque".\hyphpar0\par\pard\sb400\sl260 Examples of suitable formats for Transparent copies include plain ASCII without markup, Texinfo input format, LaTeX input format, SGML or XML using a publicly available DTD, and standard-conforming simple HTML designed for human modification. Opaque formats include PostScript, PDF, proprietary formats that can be read and edited only by proprietary word processors, SGML or XML for which the DTD and/or processing tools are not generally available, and the machine-generated HTML produced by some word processors for output purposes only.\hyphpar0\par\pard\sb400\sl260 The "Title Page" means, for a printed book, the title page itself, plus such following pages as are needed to hold, legibly, the material this License requires to appear in the title page. For works in formats which do not have any title page as such, "Title Page" means the text near the most prominent appearance of the work's title, preceding the beginning of the body of the text.\hyphpar0\par\pard\sb259\s2\sl449 {\*\bkmkstart ID_GFDL_45_2}{\*\bkmkend ID_GFDL_45_2}\b\fs34\lang1024 A.3. VERBATIM COPYING\keepn\hyphpar0\par\pard\sb400\sl260 \b0\fs20\lang1033 You may copy and distribute the Document in any medium, either commercially or noncommercially, provided that this License, the copyright notices, and the license notice saying this License applies to the Document are reproduced in all copies, and that you add no other conditions whatsoever to those of this License. You may not use technical measures to obstruct or control the reading or further copying of the copies you make or distribute. However, you may accept compensation in exchange for copies. If you distribute a large enough number of copies you must also follow the conditions in section 3.\hyphpar0\par\pard\sb400\sl260 You may also lend copies, under the same conditions stated above, and you may publicly display copies.\hyphpar0\par\pard\sb259\s2\sl449 {\*\bkmkstart ID_GFDL_45_3}{\*\bkmkend ID_GFDL_45_3}\b\fs34\lang1024 A.4. COPYING IN QUANTITY\keepn\hyphpar0\par\pard\sb400\sl260 \b0\fs20\lang1033 If you publish printed copies of the Document numbering more than 100, and the Document's license notice requires Cover Texts, you must enclose the copies in covers that carry, clearly and legibly, all these Cover Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on the back cover. Both covers must also clearly and legibly identify you as the publisher of these copies. The front cover must present the full title with all words of the title equally prominent and visible. You may add other material on the covers in addition. Copying with changes limited to the covers, as long as they preserve the title of the Document and satisfy these conditions, can be treated as verbatim copying in other respects.\hyphpar0\par\pard\sb400\sl260 If the required texts for either cover are too voluminous to fit legibly, you should put the first ones listed (as many as fit reasonably) on the actual cover, and continue the rest onto adjacent pages.\hyphpar0\par\pard\sb400\sl260 If you publish or distribute Opaque copies of the Document numbering more than 100, you must either include a machine-readable Transparent copy along with each Opaque copy, or state in or with each Opaque copy a publicly-accessible computer-network location containing a complete Transparent copy of the Document, free of added material, which the general network-using public has access to download anonymously at no charge using public-standard network protocols. If you use the latter option, you must take reasonably prudent steps, when you begin distribution of Opaque copies in quantity, to ensure that this Transparent copy will remain thus accessible at the stated location until at least one year after the last time you distribute an Opaque copy (directly or through your agents or retailers) of that edition to the public.\hyphpar0\par\pard\sb400\sl260 It is requested, but not required, that you contact the authors of the Document well before redistributing any large number of copies, to give them a chance to provide you with an updated version of the Document.\hyphpar0\par\pard\sb259\s2\sl449 {\*\bkmkstart ID_GFDL_45_4}{\*\bkmkend ID_GFDL_45_4}\b\fs34\lang1024 A.5. MODIFICATIONS\keepn\hyphpar0\par\pard\sb400\sl260 \b0\fs20\lang1033 You may copy and distribute a Modified Version of the Document under the conditions of sections 2 and 3 above, provided that you release the Modified Version under precisely this License, with the Modified Version filling the role of the Document, thus licensing distribution and modification of the Modified Version to whoever possesses a copy of it. In addition, you must do these things in the Modified Version:\hyphpar0\par\pard\sb100\li360\sl260\fi-360 \tqr\tx310\tx360\tab \lang1024 A.\tab Use in the Title Page  (and on the covers, if any) a title distinct from that of the  Document, and from those of previous versions (which should, if  there were any, be listed in the History section of the  Document). You may use the same title as a previous version if  the original publisher of that version gives permission.\hyphpar0\par\pard\sb100\li360\sl260\fi-360 \tqr\tx310\tx360\tab B.\tab List on the Title Page,  as authors, one or more persons or entities responsible for  authorship of the modifications in the Modified Version,  together with at least five of the principal authors of the  Document (all of its principal authors, if it has less than  five).\hyphpar0\par\pard\sb100\li360\sl260\fi-360 \tqr\tx310\tx360\tab C.\tab State on the Title page  the name of the publisher of the Modified Version, as the  publisher.\hyphpar0\par\pard\sb100\li360\sl260\fi-360 \tqr\tx310\tx360\tab D.\tab Preserve all the  copyright notices of the Document.\hyphpar0\par\pard\sb100\li360\sl260\fi-360 \tqr\tx310\tx360\tab E.\tab Add an appropriate  copyright notice for your modifications adjacent to the other  copyright notices.\hyphpar0\par\pard\sb100\li360\sl260\fi-360 \tqr\tx310\tx360\tab F.\tab Include, immediately  after the copyright notices, a license notice giving the public  permission to use the Modified Version under the terms of this  License, in the form shown in the Addendum below.\hyphpar0\par\pard\sb100\li360\sl260\fi-360 \tqr\tx310\tx360\tab G.\tab Preserve in that license  notice the full lists of Invariant Sections and required Cover  Texts given in the Document's license notice.\hyphpar0\par\pard\sb100\li360\sl260\fi-360 \tqr\tx310\tx360\tab H.\tab Include an unaltered  copy of this License.\hyphpar0\par\pard\sb100\li360\sl260\fi-360 \tqr\tx310\tx360\tab I.\tab Preserve the section  entitled "History", and its title, and add to it an item stating  at least the title, year, new authors, and publisher of the  Modified Version as given on the Title Page. If there is no  section entitled "History" in the Document, create one stating  the title, year, authors, and publisher of the Document as given  on its Title Page, then add an item describing the Modified  Version as stated in the previous sentence.\hyphpar0\par\pard\sb100\li360\sl260\fi-360 \tqr\tx310\tx360\tab J.\tab Preserve the network  location, if any, given in the Document for public access to a  Transparent copy of the Document, and likewise the network  locations given in the Document for previous versions it was  based on. These may be placed in the "History" section. You  may omit a network location for a work that was published at  least four years before the Document itself, or if the original  publisher of the version it refers to gives permission.\hyphpar0\par\pard\sb100\li360\sl260\fi-360 \tqr\tx310\tx360\tab K.\tab In any section entitled  "Acknowledgements" or "Dedications", preserve the section's  title, and preserve in the section all the substance and tone of  each of the contributor acknowledgements and/or dedications  given therein.\hyphpar0\par\pard\sb100\li360\sl260\fi-360 \tqr\tx310\tx360\tab L.\tab Preserve all the  Invariant Sections of the Document, unaltered in their text and  in their titles. Section numbers or the equivalent are not  considered part of the section titles.\hyphpar0\par\pard\sb100\li360\sl260\fi-360 \tqr\tx310\tx360\tab M.\tab Delete any section  entitled "Endorsements". Such a section may not be included in  the Modified Version.\hyphpar0\par\pard\sb100\li360\sl260\fi-360 \tqr\tx310\tx360\tab N.\tab Do not retitle any  existing section as "Endorsements" or to conflict in title with  any Invariant Section.\hyphpar0\par\pard\sb400\sl260 \lang1033 If the Modified Version includes new front-matter sections or appendices that qualify as Secondary Sections and contain no material copied from the Document, you may at your option designate some or all of these sections as invariant. To do this, add their titles to the list of Invariant Sections in the Modified Version's license notice. These titles must be distinct from any other section titles.\hyphpar0\par\pard\sb400\sl260 You may add a section entitled "Endorsements", provided it contains nothing but endorsements of your Modified Version by various parties--for example, statements of peer review or that the text has been approved by an organization as the authoritative definition of a standard.\hyphpar0\par\pard\sb400\sl260 You may add a passage of up to five words as a Front-Cover Text, and a passage of up to 25 words as a Back-Cover Text, to the end of the list of Cover Texts in the Modified Version. Only one passage of Front-Cover Text and one of Back-Cover Text may be added by (or through arrangements made by) any one entity. If the Document already includes a cover text for the same cover, previously added by you or by arrangement made by the same entity you are acting on behalf of, you may not add another; but you may replace the old one, on explicit permission from the previous publisher that added the old one.\hyphpar0\par\pard\sb400\sl260 The author(s) and publisher(s) of the Document do not by this License give permission to use their names for publicity for or to assert or imply endorsement of any Modified Version.\hyphpar0\par\pard\sb259\s2\sl449 {\*\bkmkstart ID_GFDL_45_5}{\*\bkmkend ID_GFDL_45_5}\b\fs34\lang1024 A.6. COMBINING DOCUMENTS\keepn\hyphpar0\par\pard\sb400\sl260 \b0\fs20\lang1033 You may combine the Document with other documents released under this License, under the terms defined in section 4 above for modified versions, provided that you include in the combination all of the Invariant Sections of all of the original documents, unmodified, and list them all as Invariant Sections of your combined work in its license notice.\hyphpar0\par\pard\sb400\sl260 The combined work need only contain one copy of this License, and multiple identical Invariant Sections may be replaced with a single copy. If there are multiple Invariant Sections with the same name but different contents, make the title of each such section unique by adding at the end of it, in parentheses, the name of the original author or publisher of that section if known, or else a unique number. Make the same adjustment to the section titles in the list of Invariant Sections in the license notice of the combined work.\hyphpar0\par\pard\sb400\sl260 In the combination, you must combine any sections entitled "History" in the various original documents, forming one section entitled "History"; likewise combine any sections entitled "Acknowledgements", and any sections entitled "Dedications". You must delete all sections entitled "Endorsements."\hyphpar0\par\pard\sb259\s2\sl449 {\*\bkmkstart ID_GFDL_45_6}{\*\bkmkend ID_GFDL_45_6}\b\fs34\lang1024 A.7. COLLECTIONS OF DOCUMENTS\keepn\hyphpar0\par\pard\sb400\sl260 \b0\fs20\lang1033 You may make a collection consisting of the Document and other documents released under this License, and replace the individual copies of this License in the various documents with a single copy that is included in the collection, provided that you follow the rules of this License for verbatim copying of each of the documents in all other respects.\hyphpar0\par\pard\sb400\sl260 You may extract a single document from such a collection, and distribute it individually under this License, provided you insert a copy of this License into the extracted document, and follow this License in all other respects regarding verbatim copying of that document.\hyphpar0\par\pard\sb259\s2\sl449 {\*\bkmkstart ID_GFDL_45_7}{\*\bkmkend ID_GFDL_45_7}\b\fs34\lang1024 A.8. AGGREGATION WITH INDEPENDENT WORKS\keepn\hyphpar0\par\pard\sb400\sl260 \b0\fs20\lang1033 A compilation of the Document or its derivatives with other separate and independent documents or works, in or on a volume of a storage or distribution medium, does not as a whole count as a Modified Version of the Document, provided no compilation copyright is claimed for the compilation. Such a compilation is called an "aggregate", and this License does not apply to the other self-contained works thus compiled with the Document, on account of their being thus compiled, if they are not themselves derivative works of the Document.\hyphpar0\par\pard\sb400\sl260 If the Cover Text requirement of section 3 is applicable to these copies of the Document, then if the Document is less than one quarter of the entire aggregate, the Document's Cover Texts may be placed on covers that surround only the Document within the aggregate. Otherwise they must appear on covers around the whole aggregate.\hyphpar0\par\pard\sb259\s2\sl449 {\*\bkmkstart ID_GFDL_45_8}{\*\bkmkend ID_GFDL_45_8}\b\fs34\lang1024 A.9. TRANSLATION\keepn\hyphpar0\par\pard\sb400\sl260 \b0\fs20\lang1033 Translation is considered a kind of modification, so you may distribute translations of the Document under the terms of section 4. Replacing Invariant Sections with translations requires special permission from their copyright holders, but you may include translations of some or all Invariant Sections in addition to the original versions of these Invariant Sections. You may include a translation of this License provided that you also include the original English version of this License. In case of a disagreement between the translation and the original English version of this License, the original English version will prevail.\hyphpar0\par\pard\sb259\s2\sl449 {\*\bkmkstart ID_GFDL_45_9}{\*\bkmkend ID_GFDL_45_9}\b\fs34\lang1024 A.10. TERMINATION\keepn\hyphpar0\par\pard\sb400\sl260 \b0\fs20\lang1033 You may not copy, modify, sublicense, or distribute the Document except as expressly provided for under this License. Any other attempt to copy, modify, sublicense or distribute the Document is void, and will automatically terminate your rights under this License. However, parties who have received copies, or rights, from you under this License will not have their licenses terminated so long as such parties remain in full compliance.\hyphpar0\par\pard\sb259\s2\sl449 {\*\bkmkstart ID_GFDL_45_10}{\*\bkmkend ID_GFDL_45_10}\b\fs34\lang1024 A.11. FUTURE REVISIONS OF THIS LICENSE\keepn\hyphpar0\par\pard\sb400\sl260 \b0\fs20\lang1033 The Free Software Foundation may publish new, revised versions of the GNU Free Documentation License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. See http://www.gnu.org/copyleft/.\hyphpar0\par\pard\sb400\sl260 Each version of the License is given a distinguishing version number. If the Document specifies that a particular numbered version of this License "or any later version" applies to it, you have the option of following the terms and conditions either of that specified version or of any later version that has been published (not as a draft) by the Free Software Foundation. If the Document does not specify a version number of this License, you may choose any version ever published (not as a draft) by the Free Software Foundation.\hyphpar0\par\pard\sb259\s2\sl449 {\*\bkmkstart ID_GFDL_45_11}{\*\bkmkend ID_GFDL_45_11}\b\fs34\lang1024 A.12. How to use this License for your documents\keepn\hyphpar0\par\pard\sb400\sl260 \b0\fs20\lang1033 To use this License in a document you have written, include a copy of the License in the document and put the following copyright and license notices just after the title page:\hyphpar0\par\pard\sb100\li200\ri200\sl234 \fs18\lang1024 Copyright (c) YEAR YOUR NAME. Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.1 or any later version published by the Free Software Foundation; with the Invariant Sections being LIST THEIR TITLES, with the Front-Cover Texts being LIST, and with the Back-Cover Texts being LIST. A copy of the license is included in the section entitled "GNU Free Documentation License".\hyphpar0\par\pard\sb400\sl260 \fs20\lang1033 If you have no Invariant Sections, write "with no Invariant Sections" instead of saying which ones are invariant. If you have no Front-Cover Texts, write "no Front-Cover Texts" instead of "Front-Cover Texts being LIST"; likewise for Back-Cover Texts.\hyphpar0\par\pard\sb400\sl260 If your document contains nontrivial examples of program code, we recommend releasing these examples in parallel under your choice of free software license, such as the GNU General Public License, to permit their use in free software.\hyphpar0\par}
