<!-- Start of text generated from database -->
<!-- generated from the LSB specification database -->
<!--    by $Header: //cvsroot/lsb/lsbspec/mklibspec,v 1.75 2005/10/12 22:24:36 nick Exp 0 -->
<!--    at Mon Nov 14 15:58:10 2005 -->
<SECT1 ID=libpangoxft-1.0>
<TITLE>Interfaces for libpangoxft-1.0</TITLE>
<PARA>
<XREF LINKEND="lib-libpangoxft-1.0-def"> defines the library name and shared object name
for the libpangoxft-1.0 library
</PARA>
<TABLE id="lib-libpangoxft-1.0-def">
<TITLE>libpangoxft-1.0 Definition</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Library:</ENTRY>
<ENTRY>libpangoxft-1.0</ENTRY>
</ROW>
<ROW>
<ENTRY>SONAME:</ENTRY>
<ENTRY>libpangoxft-1.0.so.0</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The behavior of the interfaces in this library is specified by the following specifications:<SIMPLELIST COLUMNS=1>
<MEMBER ID='REFSTD.libpangoxft.1.0.1'>
[Pango] <XREF LINKEND="std.Pango">
</MEMBER>
</SIMPLELIST>
</PARA>
<!-- debug: database interface name Default LibGroup for libpangoxft-1.0 -->
<SECT2>
<!--libgroup-->
<TITLE>Default LibGroup for libpangoxft-1.0</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for Default LibGroup for libpangoxft-1.0</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic functions
for Default LibGroup for libpangoxft-1.0 specified in <XREF linkend="tbl-libpangoxft-1.0-def-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<TABLE id="tbl-libpangoxft-1.0-def-ints">
<TITLE>libpangoxft-1.0 - Default LibGroup for libpangoxft-1.0 Function Interfaces</TITLE>
<TGROUP COLS=4>
<TBODY>
<ROW>
<ENTRY><indexterm><primary>pango_xft_font_get_type</primary></indexterm>pango_xft_font_get_type <LINK LINKEND="REFSTD.libpangoxft.1.0.1">[Pango]</LINK></ENTRY>
<ENTRY><indexterm><primary>pango_xft_font_has_char</primary></indexterm>pango_xft_font_has_char <LINK LINKEND="REFSTD.libpangoxft.1.0.1">[Pango]</LINK></ENTRY>
<ENTRY><indexterm><primary>pango_xft_font_map_get_type</primary></indexterm>pango_xft_font_map_get_type <LINK LINKEND="REFSTD.libpangoxft.1.0.1">[Pango]</LINK></ENTRY>
<ENTRY><indexterm><primary>pango_xft_get_context</primary></indexterm>pango_xft_get_context <LINK LINKEND="REFSTD.libpangoxft.1.0.1">[Pango]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>pango_xft_get_font_map</primary></indexterm>pango_xft_get_font_map <LINK LINKEND="REFSTD.libpangoxft.1.0.1">[Pango]</LINK></ENTRY>
<ENTRY><indexterm><primary>pango_xft_picture_render</primary></indexterm>pango_xft_picture_render <LINK LINKEND="REFSTD.libpangoxft.1.0.1">[Pango]</LINK></ENTRY>
<ENTRY><indexterm><primary>pango_xft_render</primary></indexterm>pango_xft_render <LINK LINKEND="REFSTD.libpangoxft.1.0.1">[Pango]</LINK></ENTRY>
<ENTRY><indexterm><primary>pango_xft_render_layout</primary></indexterm>pango_xft_render_layout <LINK LINKEND="REFSTD.libpangoxft.1.0.1">[Pango]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>pango_xft_render_layout_line</primary></indexterm>pango_xft_render_layout_line <LINK LINKEND="REFSTD.libpangoxft.1.0.1">[Pango]</LINK></ENTRY>
<ENTRY><indexterm><primary>pango_xft_render_transformed</primary></indexterm>pango_xft_render_transformed <LINK LINKEND="REFSTD.libpangoxft.1.0.1">[Pango]</LINK></ENTRY>
<ENTRY><indexterm><primary>pango_xft_renderer_get_type</primary></indexterm>pango_xft_renderer_get_type <LINK LINKEND="REFSTD.libpangoxft.1.0.1">[Pango]</LINK></ENTRY>
<ENTRY><indexterm><primary>pango_xft_renderer_new</primary></indexterm>pango_xft_renderer_new <LINK LINKEND="REFSTD.libpangoxft.1.0.1">[Pango]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>pango_xft_renderer_set_default_color</primary></indexterm>pango_xft_renderer_set_default_color <LINK LINKEND="REFSTD.libpangoxft.1.0.1">[Pango]</LINK></ENTRY>
<ENTRY><indexterm><primary>pango_xft_renderer_set_draw</primary></indexterm>pango_xft_renderer_set_draw <LINK LINKEND="REFSTD.libpangoxft.1.0.1">[Pango]</LINK></ENTRY>
<ENTRY><indexterm><primary>pango_xft_set_default_substitute</primary></indexterm>pango_xft_set_default_substitute <LINK LINKEND="REFSTD.libpangoxft.1.0.1">[Pango]</LINK></ENTRY>
<ENTRY><indexterm><primary>pango_xft_shutdown_display</primary></indexterm>pango_xft_shutdown_display <LINK LINKEND="REFSTD.libpangoxft.1.0.1">[Pango]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>pango_xft_substitute_changed</primary></indexterm>pango_xft_substitute_changed <LINK LINKEND="REFSTD.libpangoxft.1.0.1">[Pango]</LINK></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>
</SECT2>
</SECT1>
<SECT1 ID=libpangoxft-1.0-ddefs>
<TITLE>Data Definitions for libpangoxft-1.0</TITLE>
<PARA>
This section defines global identifiers and their values that are associated
with interfaces contained in libpangoxft-1.0.
These definitions are organized into groups that
correspond to system headers. This convention is used as a
convenience for the reader, and does not imply the existence
of these headers, or their content.
Where an interface is defined as requiring a particular system header file
all of the data definitions for that system header file presented here shall be in effect.
</PARA>
<PARA>
This section gives data definitions to promote binary application
portability, not to repeat source interface definitions available
elsewhere. System providers and application developers should use this ABI
to supplement - not to replace - source interface definition specifications.
</PARA>
<PARA>
This specification uses the <XREF LINKEND='std.ISOC99'> C Language as the reference programming language, and data definitions are specified in ISO C format. The C language is used here as a convenient notation. Using a C language description of these data objects does not preclude their use by other programming languages.</PARA>
<SECT2>
<TITLE>pango-1.0/pango/pangoxft.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define PANGO_XFT_RENDERER_CLASS(klass)	(G_TYPE_CHECK_CLASS_CAST ((klass), PANGO_TYPE_XFT_RENDERER, PangoXftRendererClass))
#define PANGO_IS_XFT_RENDERER_CLASS(klass)	(G_TYPE_CHECK_CLASS_TYPE ((klass), PANGO_TYPE_XFT_RENDERER))
#define PANGO_FC_FONT(object)	(G_TYPE_CHECK_INSTANCE_CAST ((object), PANGO_TYPE_FC_FONT, PangoFcFont))
#define PANGO_XFT_FONT(object)	(G_TYPE_CHECK_INSTANCE_CAST ((object), PANGO_TYPE_XFT_FONT, PangoXftFont))
#define PANGO_XFT_FONT_MAP(object)	(G_TYPE_CHECK_INSTANCE_CAST ((object), PANGO_TYPE_XFT_FONT_MAP, PangoXftFontMap))
#define PANGO_XFT_RENDERER(object)	(G_TYPE_CHECK_INSTANCE_CAST ((object), PANGO_TYPE_XFT_RENDERER, PangoXftRenderer))
#define PANGO_IS_FC_FONT(object)	(G_TYPE_CHECK_INSTANCE_TYPE ((object), PANGO_TYPE_FC_FONT))
#define PANGO_XFT_IS_FONT(object)	(G_TYPE_CHECK_INSTANCE_TYPE ((object), PANGO_TYPE_XFT_FONT))
#define PANGO_XFT_IS_FONT_MAP(object)	(G_TYPE_CHECK_INSTANCE_TYPE ((object), PANGO_TYPE_XFT_FONT_MAP))
#define PANGO_IS_XFT_RENDERER(object)	(G_TYPE_CHECK_INSTANCE_TYPE ((object), PANGO_TYPE_XFT_RENDERER))
#define PANGO_XFT_RENDERER_GET_CLASS(obj)	(G_TYPE_INSTANCE_GET_CLASS ((obj), PANGO_TYPE_XFT_RENDERER, PangoXftRendererClass))
#define PANGO_TYPE_FC_FONT	(pango_fc_font_get_type ())
#define PANGO_TYPE_XFT_FONT	(pango_xft_font_get_type ())
#define PANGO_TYPE_XFT_FONT_MAP	(pango_xft_font_map_get_type ())
#define PANGO_TYPE_XFT_RENDERER	(pango_xft_renderer_get_type())
#define PANGO_RENDER_TYPE_XFT	"PangoRenderXft"

typedef struct _XftDraw
 XftDraw;
typedef struct _XftColor
 XftColor;
typedef struct _PangoXftRendererPrivate
 PangoXftRendererPrivate;
typedef struct _PangoXftRenderer {
    PangoRenderer parent_instance;
    Display *display;
    int screen;
    XftDraw *draw;
    PangoXftRendererPrivate *priv;
} PangoXftRenderer;
typedef long unsigned int Picture;
typedef struct _FcPattern
 FcPattern;
typedef void (*fptr_pangoxft_9) (FcPattern *, gpointer);
typedef enum FT_Glyph_Format_ {
    FT_GLYPH_FORMAT_NONE, FT_GLYPH_FORMAT_BITMAP,
	FT_GLYPH_FORMAT_COMPOSITE, FT_GLYPH_FORMAT_OUTLINE,
	FT_GLYPH_FORMAT_PLOTTER
} FT_Glyph_Format;
typedef unsigned int FT_UInt;
typedef struct FT_Bitmap_ {
    int rows;
    int width;
    int pitch;
    unsigned char *buffer;
    short int num_grays;
    char pixel_mode;
    char palette_mode;
    void *palette;
} FT_Bitmap;
typedef long int FT_Pos;
typedef int XFixed;
typedef struct _XPointFixed {
    XFixed x;
    XFixed y;
} XPointFixed;
typedef short int FT_Short;
typedef struct FT_Vector_ {
    FT_Pos x;
    FT_Pos y;
} FT_Vector;
typedef struct FT_Outline_ {
    short int n_contours;
    short int n_points;
    FT_Vector *points;
    char *tags;
    short int *contours;
    int flags;
} FT_Outline;
typedef void (*fptr_pangoxft_16) (void *);
typedef struct _XLineFixed {
    XPointFixed p1;
    XPointFixed p2;
} XLineFixed;
typedef struct _XTrapezoid {
    XFixed top;
    XFixed bottom;
    XLineFixed left;
    XLineFixed right;
} XTrapezoid;
typedef struct FT_Bitmap_Size_ {
    FT_Short height;
    FT_Short width;
    FT_Pos size;
    FT_Pos x_ppem;
    FT_Pos y_ppem;
} FT_Bitmap_Size;
typedef struct _FcCharSet
 FcCharSet;
typedef long unsigned int PictFormat;
typedef struct {
    short int red;
    short int redMask;
    short int green;
    short int greenMask;
    short int blue;
    short int blueMask;
    short int alpha;
    short int alphaMask;
} XRenderDirectFormat;
typedef struct {
    PictFormat id;
    int type;
    int depth;
    XRenderDirectFormat direct;
    Colormap colormap;
} XRenderPictFormat;
typedef union FT_StreamDesc_ {
    long int value;
    void *pointer;
} FT_StreamDesc;
typedef struct FT_StreamRec_ {
    unsigned char *base;
    long unsigned int size;
    long unsigned int pos;
    FT_StreamDesc descriptor;
    FT_StreamDesc pathname;
    FT_Stream_IoFunc read;
    FT_Stream_CloseFunc close;
    FT_Memory memory;
    unsigned char *cursor;
    unsigned char *limit;
} *FT_Stream;
typedef long unsigned int (*fptr_pangoxft_77) (FT_Stream,
					       long unsigned int,
					       unsigned char *,
					       long unsigned int);
typedef void (*fptr_pangoxft_21) (FT_Stream);
typedef struct FT_MemoryRec_ {
    void *user;
    FT_Alloc_Func alloc;
    FT_Free_Func free;
    FT_Realloc_Func realloc;
} *FT_Memory;
typedef void *(*fptr_pangoxft_83) (FT_Memory, long int);
typedef void (*fptr_pangoxft_82) (FT_Memory, void *);
typedef void *(*fptr_pangoxft_36) (FT_Memory, long int, long int, void *);
typedef struct FT_LibraryRec_
*FT_Library;
typedef long int FT_Long;
typedef char FT_String;
typedef int FT_Int;
typedef struct FT_FaceRec_ {
    FT_Long num_faces;
    FT_Long face_index;
    FT_Long face_flags;
    FT_Long style_flags;
    FT_Long num_glyphs;
    FT_String *family_name;
    FT_String *style_name;
    FT_Int num_fixed_sizes;
    FT_Bitmap_Size *available_sizes;
    FT_Int num_charmaps;
    FT_CharMap *charmaps;
    FT_Generic generic;
    FT_BBox bbox;
    FT_UShort units_per_EM;
    FT_Short ascender;
    FT_Short descender;
    FT_Short height;
    FT_Short max_advance_width;
    FT_Short max_advance_height;
    FT_Short underline_position;
    FT_Short underline_thickness;
    FT_GlyphSlot glyph;
    FT_Size size;
    FT_CharMap charmap;
    FT_Driver driver;
    FT_Memory memory;
    FT_Stream stream;
    FT_ListRec sizes_list;
    FT_Generic autohint;
    void *extensions;
    FT_Face_Internal internal;
} *FT_Face;
typedef enum FT_Encoding_ {
    FT_ENCODING_NONE, FT_ENCODING_ADOBE_CUSTOM, FT_ENCODING_ADOBE_EXPERT,
	FT_ENCODING_ADOBE_STANDARD, FT_ENCODING_APPLE_ROMAN,
	FT_ENCODING_BIG5, FT_ENCODING_MS_BIG5, FT_ENCODING_MS_GB2312,
	FT_ENCODING_GB2312, FT_ENCODING_MS_JOHAB, FT_ENCODING_JOHAB,
	FT_ENCODING_ADOBE_LATIN_1, FT_ENCODING_OLD_LATIN_2,
	FT_ENCODING_MS_SJIS, FT_ENCODING_SJIS, FT_ENCODING_MS_SYMBOL,
	FT_ENCODING_UNICODE, FT_ENCODING_WANSUNG, FT_ENCODING_MS_WANSUNG
} FT_Encoding;
typedef short unsigned int FT_UShort;
typedef struct FT_CharMapRec_ {
    FT_Face face;
    FT_Encoding encoding;
    FT_UShort platform_id;
    FT_UShort encoding_id;
} *FT_CharMap;
typedef struct FT_Generic_ {
    void *data;
    FT_Generic_Finalizer finalizer;
} FT_Generic;
typedef struct FT_BBox_ {
    FT_Pos xMin;
    FT_Pos yMin;
    FT_Pos xMax;
    FT_Pos yMax;
} FT_BBox;
typedef struct FT_GlyphSlotRec_ {
    FT_Library library;
    FT_Face face;
    FT_GlyphSlot next;
    FT_UInt reserved;
    FT_Generic generic;
    FT_Glyph_Metrics metrics;
    FT_Fixed linearHoriAdvance;
    FT_Fixed linearVertAdvance;
    FT_Vector advance;
    FT_Glyph_Format format;
    FT_Bitmap bitmap;
    FT_Int bitmap_left;
    FT_Int bitmap_top;
    FT_Outline outline;
    FT_UInt num_subglyphs;
    FT_SubGlyph subglyphs;
    void *control_data;
    long int control_len;
    void *other;
    FT_Slot_Internal internal;
} *FT_GlyphSlot;
typedef long int FT_Fixed;
typedef struct FT_Size_Metrics_ {
    FT_UShort x_ppem;
    FT_UShort y_ppem;
    FT_Fixed x_scale;
    FT_Fixed y_scale;
    FT_Pos ascender;
    FT_Pos descender;
    FT_Pos height;
    FT_Pos max_advance;
} FT_Size_Metrics;
typedef struct FT_Size_InternalRec_
*FT_Size_Internal;
typedef struct FT_SizeRec_ {
    FT_Face face;
    FT_Generic generic;
    FT_Size_Metrics metrics;
    FT_Size_Internal internal;
} *FT_Size;
typedef struct FT_DriverRec_
*FT_Driver;
typedef struct FT_ListNodeRec_ {
    FT_ListNode prev;
    FT_ListNode next;
    void *data;
} *FT_ListNode;
typedef struct FT_ListRec_ {
    FT_ListNode head;
    FT_ListNode tail;
} FT_ListRec;
typedef struct FT_Face_InternalRec_
*FT_Face_Internal;
typedef struct FT_Glyph_Metrics_ {
    FT_Pos width;
    FT_Pos height;
    FT_Pos horiBearingX;
    FT_Pos horiBearingY;
    FT_Pos horiAdvance;
    FT_Pos vertBearingX;
    FT_Pos vertBearingY;
    FT_Pos vertAdvance;
} FT_Glyph_Metrics;
typedef struct FT_SubGlyphRec_
*FT_SubGlyph;
typedef struct FT_Slot_InternalRec_
*FT_Slot_Internal;
typedef struct _XftFont {
    int ascent;
    int descent;
    int height;
    int max_advance_width;
    FcCharSet *charset;
    FcPattern *pattern;
} XftFont;
typedef struct _XftGlyphSpec {
    FT_UInt glyph;
    short int x;
    short int y;
} XftGlyphSpec;
typedef struct _PangoXftRendererClass {
    PangoRendererClass parent_class;
    void (*fptr_pangoxft_74) (PangoXftRenderer *, PangoRenderPart,
			      XTrapezoid *, int);
    void (*fptr_pangoxft_85) (PangoXftRenderer *, XftFont *,
			      XftGlyphSpec *, int);
} PangoXftRendererClass;
typedef struct _XGlyphInfo {
    short unsigned int width;
    short unsigned int height;
    short int x;
    short int y;
    short int xOff;
    short int yOff;
} XGlyphInfo;
typedef struct {
    short unsigned int red;
    short unsigned int green;
    short unsigned int blue;
    short unsigned int alpha;
} XRenderColor;
extern void pango_xft_substitute_changed(Display *, int);
extern void pango_xft_render(XftDraw *, XftColor *, PangoFont *,
			     PangoGlyphString *, gint, gint);
extern PangoRenderer *pango_xft_renderer_new(Display *, int);
extern GType pango_xft_renderer_get_type(void);
extern void pango_xft_renderer_set_default_color(PangoXftRenderer *,
						 PangoColor *);
extern GType pango_xft_font_get_type(void);
extern void pango_xft_picture_render(Display *, Picture, Picture,
				     PangoFont *, PangoGlyphString *, gint,
				     gint);
extern void pango_xft_render_layout(XftDraw *, XftColor *, PangoLayout *,
				    int, int);
extern void pango_xft_render_transformed(XftDraw *, XftColor *,
					 PangoMatrix *, PangoFont *,
					 PangoGlyphString *, int, int);
extern void pango_xft_renderer_set_draw(PangoXftRenderer *, XftDraw *);
extern gboolean pango_xft_font_has_char(PangoFont *, gunichar);
extern void pango_xft_render_layout_line(XftDraw *, XftColor *,
					 PangoLayoutLine *, int, int);
extern void pango_xft_shutdown_display(Display *, int);
extern PangoFontMap *pango_xft_get_font_map(Display *, int);
extern PangoContext *pango_xft_get_context(Display *, int);
extern GType pango_xft_font_map_get_type(void);
extern void pango_xft_set_default_substitute(Display *, int,
					     PangoXftSubstituteFunc,
					     gpointer, GDestroyNotify);
</SCREEN>
</SECT2>
</SECT1>
<!-- End of text generated from database -->
<!--    by $Header: //cvsroot/lsb/lsbspec/mklibspec,v 1.75 2005/10/12 22:24:36 nick Exp 0 -->
