<!-- Start of text generated from database -->
<!-- generated from the LSB specification database -->
<!--    by $Header: //cvsroot/lsb/lsbspec/mklibspec,v 1.75 2005/10/12 22:24:36 nick Exp 0 -->
<!--    at Mon Nov 14 15:58:10 2005 -->
<SECT1 ID=libpangoft2-1.0>
<TITLE>Interfaces for libpangoft2-1.0</TITLE>
<PARA>
<XREF LINKEND="lib-libpangoft2-1.0-def"> defines the library name and shared object name
for the libpangoft2-1.0 library
</PARA>
<TABLE id="lib-libpangoft2-1.0-def">
<TITLE>libpangoft2-1.0 Definition</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Library:</ENTRY>
<ENTRY>libpangoft2-1.0</ENTRY>
</ROW>
<ROW>
<ENTRY>SONAME:</ENTRY>
<ENTRY>libpangoft2-1.0.so.0</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The behavior of the interfaces in this library is specified by the following specifications:<SIMPLELIST COLUMNS=1>
<MEMBER ID='REFSTD.libpangoft2.1.0.1'>
[Pango] <XREF LINKEND="std.Pango">
</MEMBER>
</SIMPLELIST>
</PARA>
<!-- debug: database interface name Default LibGroup for libpangoft2-1.0 -->
<SECT2>
<!--libgroup-->
<TITLE>Default LibGroup for libpangoft2-1.0</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for Default LibGroup for libpangoft2-1.0</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic functions
for Default LibGroup for libpangoft2-1.0 specified in <XREF linkend="tbl-libpangoft2-1.0-def-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<TABLE id="tbl-libpangoft2-1.0-def-ints">
<TITLE>libpangoft2-1.0 - Default LibGroup for libpangoft2-1.0 Function Interfaces</TITLE>
<TGROUP COLS=4>
<TBODY>
<ROW>
<ENTRY><indexterm><primary>pango_fc_font_get_raw_extents</primary></indexterm>pango_fc_font_get_raw_extents <LINK LINKEND="REFSTD.libpangoft2.1.0.1">[Pango]</LINK></ENTRY>
<ENTRY><indexterm><primary>pango_fc_font_get_type</primary></indexterm>pango_fc_font_get_type <LINK LINKEND="REFSTD.libpangoft2.1.0.1">[Pango]</LINK></ENTRY>
<ENTRY><indexterm><primary>pango_fc_font_lock_face</primary></indexterm>pango_fc_font_lock_face <LINK LINKEND="REFSTD.libpangoft2.1.0.1">[Pango]</LINK></ENTRY>
<ENTRY><indexterm><primary>pango_fc_font_unlock_face</primary></indexterm>pango_fc_font_unlock_face <LINK LINKEND="REFSTD.libpangoft2.1.0.1">[Pango]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>pango_ft2_font_get_type</primary></indexterm>pango_ft2_font_get_type <LINK LINKEND="REFSTD.libpangoft2.1.0.1">[Pango]</LINK></ENTRY>
<ENTRY><indexterm><primary>pango_ft2_font_map_create_context</primary></indexterm>pango_ft2_font_map_create_context <LINK LINKEND="REFSTD.libpangoft2.1.0.1">[Pango]</LINK></ENTRY>
<ENTRY><indexterm><primary>pango_ft2_font_map_get_type</primary></indexterm>pango_ft2_font_map_get_type <LINK LINKEND="REFSTD.libpangoft2.1.0.1">[Pango]</LINK></ENTRY>
<ENTRY><indexterm><primary>pango_ft2_font_map_new</primary></indexterm>pango_ft2_font_map_new <LINK LINKEND="REFSTD.libpangoft2.1.0.1">[Pango]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>pango_ft2_font_map_set_default_substitute</primary></indexterm>pango_ft2_font_map_set_default_substitute <LINK LINKEND="REFSTD.libpangoft2.1.0.1">[Pango]</LINK></ENTRY>
<ENTRY><indexterm><primary>pango_ft2_font_map_set_resolution</primary></indexterm>pango_ft2_font_map_set_resolution <LINK LINKEND="REFSTD.libpangoft2.1.0.1">[Pango]</LINK></ENTRY>
<ENTRY><indexterm><primary>pango_ft2_font_map_substitute_changed</primary></indexterm>pango_ft2_font_map_substitute_changed <LINK LINKEND="REFSTD.libpangoft2.1.0.1">[Pango]</LINK></ENTRY>
<ENTRY><indexterm><primary>pango_ft2_render</primary></indexterm>pango_ft2_render <LINK LINKEND="REFSTD.libpangoft2.1.0.1">[Pango]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>pango_ft2_render_layout</primary></indexterm>pango_ft2_render_layout <LINK LINKEND="REFSTD.libpangoft2.1.0.1">[Pango]</LINK></ENTRY>
<ENTRY><indexterm><primary>pango_ft2_render_layout_line</primary></indexterm>pango_ft2_render_layout_line <LINK LINKEND="REFSTD.libpangoft2.1.0.1">[Pango]</LINK></ENTRY>
<ENTRY><indexterm><primary>pango_ft2_render_layout_line_subpixel</primary></indexterm>pango_ft2_render_layout_line_subpixel <LINK LINKEND="REFSTD.libpangoft2.1.0.1">[Pango]</LINK></ENTRY>
<ENTRY><indexterm><primary>pango_ft2_render_layout_subpixel</primary></indexterm>pango_ft2_render_layout_subpixel <LINK LINKEND="REFSTD.libpangoft2.1.0.1">[Pango]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>pango_ft2_render_transformed</primary></indexterm>pango_ft2_render_transformed <LINK LINKEND="REFSTD.libpangoft2.1.0.1">[Pango]</LINK></ENTRY>
<ENTRY><indexterm><primary>pango_ft2_renderer_get_type</primary></indexterm>pango_ft2_renderer_get_type <LINK LINKEND="REFSTD.libpangoft2.1.0.1">[Pango]</LINK></ENTRY>
<ENTRY><indexterm><primary>pango_ot_info_get_type</primary></indexterm>pango_ot_info_get_type <LINK LINKEND="REFSTD.libpangoft2.1.0.1">[Pango]</LINK></ENTRY>
<ENTRY><indexterm><primary>pango_ot_ruleset_get_type</primary></indexterm>pango_ot_ruleset_get_type <LINK LINKEND="REFSTD.libpangoft2.1.0.1">[Pango]</LINK></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>
</SECT2>
</SECT1>
<SECT1 ID=libpangoft2-1.0-ddefs>
<TITLE>Data Definitions for libpangoft2-1.0</TITLE>
<PARA>
This section defines global identifiers and their values that are associated
with interfaces contained in libpangoft2-1.0.
These definitions are organized into groups that
correspond to system headers. This convention is used as a
convenience for the reader, and does not imply the existence
of these headers, or their content.
Where an interface is defined as requiring a particular system header file
all of the data definitions for that system header file presented here shall be in effect.
</PARA>
<PARA>
This section gives data definitions to promote binary application
portability, not to repeat source interface definitions available
elsewhere. System providers and application developers should use this ABI
to supplement - not to replace - source interface definition specifications.
</PARA>
<PARA>
This specification uses the <XREF LINKEND='std.ISOC99'> C Language as the reference programming language, and data definitions are specified in ISO C format. The C language is used here as a convenient notation. Using a C language description of these data objects does not preclude their use by other programming languages.</PARA>
<SECT2>
<TITLE>pango-1.0/pango/pangoft2.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define PANGO_FT2_FONT_MAP(object)	(G_TYPE_CHECK_INSTANCE_CAST ((object), PANGO_TYPE_FT2_FONT_MAP, PangoFT2FontMap))
#define PANGO_FT2_IS_FONT_MAP(object)	(G_TYPE_CHECK_INSTANCE_TYPE ((object), PANGO_TYPE_FT2_FONT_MAP))
#define PANGO_TYPE_FT2_FONT_MAP	(pango_ft2_font_map_get_type ())

typedef struct _PangoFcFont
 PangoFcFont;
typedef struct _PangoFT2FontMap
 PangoFT2FontMap;
typedef struct FT_Bitmap_ {
    int rows;
    int width;
    int pitch;
    unsigned char *buffer;
    short int num_grays;
    char pixel_mode;
    char palette_mode;
    void *palette;
} FT_Bitmap;
typedef long int FT_Long;
typedef char FT_String;
typedef int FT_Int;
typedef short int FT_Short;
typedef struct FT_Bitmap_Size_ {
    FT_Short height;
    FT_Short width;
    FT_Pos size;
    FT_Pos x_ppem;
    FT_Pos y_ppem;
} FT_Bitmap_Size;
typedef struct FT_FaceRec_ {
    FT_Long num_faces;
    FT_Long face_index;
    FT_Long face_flags;
    FT_Long style_flags;
    FT_Long num_glyphs;
    FT_String *family_name;
    FT_String *style_name;
    FT_Int num_fixed_sizes;
    FT_Bitmap_Size *available_sizes;
    FT_Int num_charmaps;
    FT_CharMap *charmaps;
    FT_Generic generic;
    FT_BBox bbox;
    FT_UShort units_per_EM;
    FT_Short ascender;
    FT_Short descender;
    FT_Short height;
    FT_Short max_advance_width;
    FT_Short max_advance_height;
    FT_Short underline_position;
    FT_Short underline_thickness;
    FT_GlyphSlot glyph;
    FT_Size size;
    FT_CharMap charmap;
    FT_Driver driver;
    FT_Memory memory;
    FT_Stream stream;
    FT_ListRec sizes_list;
    FT_Generic autohint;
    void *extensions;
    FT_Face_Internal internal;
} *FT_Face;
typedef enum FT_Encoding_ {
    FT_ENCODING_NONE, FT_ENCODING_ADOBE_CUSTOM, FT_ENCODING_ADOBE_EXPERT,
	FT_ENCODING_ADOBE_STANDARD, FT_ENCODING_APPLE_ROMAN,
	FT_ENCODING_BIG5, FT_ENCODING_MS_BIG5, FT_ENCODING_MS_GB2312,
	FT_ENCODING_GB2312, FT_ENCODING_MS_JOHAB, FT_ENCODING_JOHAB,
	FT_ENCODING_ADOBE_LATIN_1, FT_ENCODING_OLD_LATIN_2,
	FT_ENCODING_MS_SJIS, FT_ENCODING_SJIS, FT_ENCODING_MS_SYMBOL,
	FT_ENCODING_UNICODE, FT_ENCODING_WANSUNG, FT_ENCODING_MS_WANSUNG
} FT_Encoding;
typedef short unsigned int FT_UShort;
typedef struct FT_CharMapRec_ {
    FT_Face face;
    FT_Encoding encoding;
    FT_UShort platform_id;
    FT_UShort encoding_id;
} *FT_CharMap;
typedef void (*fptr_pangoft2_130) (void *);
typedef struct FT_Generic_ {
    void *data;
    FT_Generic_Finalizer finalizer;
} FT_Generic;
typedef struct FT_BBox_ {
    FT_Pos xMin;
    FT_Pos yMin;
    FT_Pos xMax;
    FT_Pos yMax;
} FT_BBox;
typedef struct FT_LibraryRec_
*FT_Library;
typedef struct FT_GlyphSlotRec_ {
    FT_Library library;
    FT_Face face;
    FT_GlyphSlot next;
    FT_UInt reserved;
    FT_Generic generic;
    FT_Glyph_Metrics metrics;
    FT_Fixed linearHoriAdvance;
    FT_Fixed linearVertAdvance;
    FT_Vector advance;
    FT_Glyph_Format format;
    FT_Bitmap bitmap;
    FT_Int bitmap_left;
    FT_Int bitmap_top;
    FT_Outline outline;
    FT_UInt num_subglyphs;
    FT_SubGlyph subglyphs;
    void *control_data;
    long int control_len;
    void *other;
    FT_Slot_Internal internal;
} *FT_GlyphSlot;
typedef unsigned int FT_UInt;
typedef struct FT_Glyph_Metrics_ {
    FT_Pos width;
    FT_Pos height;
    FT_Pos horiBearingX;
    FT_Pos horiBearingY;
    FT_Pos horiAdvance;
    FT_Pos vertBearingX;
    FT_Pos vertBearingY;
    FT_Pos vertAdvance;
} FT_Glyph_Metrics;
typedef long int FT_Fixed;
typedef struct FT_Vector_ {
    FT_Pos x;
    FT_Pos y;
} FT_Vector;
typedef enum FT_Glyph_Format_ {
    FT_GLYPH_FORMAT_NONE, FT_GLYPH_FORMAT_BITMAP,
	FT_GLYPH_FORMAT_COMPOSITE, FT_GLYPH_FORMAT_OUTLINE,
	FT_GLYPH_FORMAT_PLOTTER
} FT_Glyph_Format;
typedef struct FT_Outline_ {
    short int n_contours;
    short int n_points;
    FT_Vector *points;
    char *tags;
    short int *contours;
    int flags;
} FT_Outline;
typedef struct FT_SubGlyphRec_
*FT_SubGlyph;
typedef struct FT_Slot_InternalRec_
*FT_Slot_Internal;
typedef struct FT_Size_Metrics_ {
    FT_UShort x_ppem;
    FT_UShort y_ppem;
    FT_Fixed x_scale;
    FT_Fixed y_scale;
    FT_Pos ascender;
    FT_Pos descender;
    FT_Pos height;
    FT_Pos max_advance;
} FT_Size_Metrics;
typedef struct FT_Size_InternalRec_
*FT_Size_Internal;
typedef struct FT_SizeRec_ {
    FT_Face face;
    FT_Generic generic;
    FT_Size_Metrics metrics;
    FT_Size_Internal internal;
} *FT_Size;
typedef struct FT_DriverRec_
*FT_Driver;
typedef struct FT_MemoryRec_ {
    void *user;
    FT_Alloc_Func alloc;
    FT_Free_Func free;
    FT_Realloc_Func realloc;
} *FT_Memory;
typedef void *(*fptr_pangoft2_155) (FT_Memory, long int);
typedef void (*fptr_pangoft2_145) (FT_Memory, void *);
typedef void *(*fptr_pangoft2_92) (FT_Memory, long int, long int, void *);
typedef union FT_StreamDesc_ {
    long int value;
    void *pointer;
} FT_StreamDesc;
typedef struct FT_StreamRec_ {
    unsigned char *base;
    long unsigned int size;
    long unsigned int pos;
    FT_StreamDesc descriptor;
    FT_StreamDesc pathname;
    FT_Stream_IoFunc read;
    FT_Stream_CloseFunc close;
    FT_Memory memory;
    unsigned char *cursor;
    unsigned char *limit;
} *FT_Stream;
typedef long unsigned int (*fptr_pangoft2_98) (FT_Stream,
					       long unsigned int,
					       unsigned char *,
					       long unsigned int);
typedef void (*fptr_pangoft2_35) (FT_Stream);
typedef struct FT_ListNodeRec_ {
    FT_ListNode prev;
    FT_ListNode next;
    void *data;
} *FT_ListNode;
typedef struct FT_ListRec_ {
    FT_ListNode head;
    FT_ListNode tail;
} FT_ListRec;
typedef struct FT_Face_InternalRec_
*FT_Face_Internal;
typedef void (*fptr_pangoxft_9) (FcPattern *, gpointer);
typedef int FT_Int32;
typedef struct _PangoFontClass {
    GObjectClass parent_class;
    PangoFontDescription *(*fptr_pangoft2_215) (PangoFont *);
    PangoCoverage *(*fptr_pangoft2_144) (PangoFont *, PangoLanguage *);
    PangoEngineShape *(*fptr_pangoft2_147) (PangoFont *, PangoLanguage *,
					    guint32);
    void (*fptr_pangoft2_210) (PangoFont *, PangoGlyph, PangoRectangle *,
			       PangoRectangle *);
    PangoFontMetrics *(*fptr_pangoft2_84) (PangoFont *, PangoLanguage *);
    void (*func) (void);
    void (*func) (void);
    void (*func) (void);
    void (*func) (void);
} PangoFontClass;
typedef struct TTO_Device_ {
    FT_UShort StartSize;
    FT_UShort EndSize;
    FT_UShort DeltaFormat;
    FT_UShort *DeltaValue;
} TTO_Device;
typedef struct TTO_SubstLookupRecord_ {
    FT_UShort SequenceIndex;
    FT_UShort LookupListIndex;
} TTO_SubstLookupRecord;
typedef struct TTO_FeatureRecord_
 TTO_FeatureRecord;
typedef struct TTO_ValueRecord_ {
    FT_Short XPlacement;
    FT_Short YPlacement;
    FT_Short XAdvance;
    FT_Short YAdvance;
    TTO_Device XPlacementDevice;
    TTO_Device YPlacementDevice;
    TTO_Device XAdvanceDevice;
    TTO_Device YAdvanceDevice;
    FT_UShort XIdPlacement;
    FT_UShort YIdPlacement;
    FT_UShort XIdAdvance;
    FT_UShort YIdAdvance;
} TTO_ValueRecord;
typedef unsigned char FT_Bool;
typedef struct TTO_ClassDefFormat1_ {
    FT_UShort StartGlyph;
    FT_UShort GlyphCount;
    FT_UShort *ClassValueArray;
} TTO_ClassDefFormat1;
typedef struct TTO_ClassRangeRecord_ {
    FT_UShort Start;
    FT_UShort End;
    FT_UShort Class;
} TTO_ClassRangeRecord;
typedef struct TTO_ClassDefFormat2_ {
    FT_UShort ClassRangeCount;
    TTO_ClassRangeRecord *ClassRangeRecord;
} TTO_ClassDefFormat2;
typedef struct TTO_ClassDefinition_ {
    FT_Bool loaded;
    FT_Bool *Defined;
    FT_UShort ClassFormat;
    union {
	TTO_ClassDefFormat1 cd1;
	TTO_ClassDefFormat2 cd2;
    } cd;
} TTO_ClassDefinition;
typedef struct _FcFontSet {
    int nfont;
    int sfont;
    FcPattern **fonts;
} FcFontSet;
typedef struct TTO_LigCaretList_
 TTO_LigCaretList;
typedef struct TTO_ChainSubClassRule_ {
    FT_UShort BacktrackGlyphCount;
    FT_UShort *Backtrack;
    FT_UShort InputGlyphCount;
    FT_UShort *Input;
    FT_UShort LookaheadGlyphCount;
    FT_UShort *Lookahead;
    FT_UShort SubstCount;
    TTO_SubstLookupRecord *SubstLookupRecord;
} TTO_ChainSubClassRule;
typedef struct TTO_Sequence_ {
    FT_UShort GlyphCount;
    FT_UShort *Substitute;
} TTO_Sequence;
typedef struct TTO_GDEFHeader_
 TTO_GDEFHeader;
typedef struct TTO_Coverage_
 TTO_Coverage;
typedef struct TTO_MultipleSubst_ {
    FT_UShort SubstFormat;
    TTO_Coverage Coverage;
    FT_UShort SequenceCount;
    TTO_Sequence *Sequence;
} TTO_MultipleSubst;
typedef struct TTO_SubRule_ {
    FT_UShort GlyphCount;
    FT_UShort SubstCount;
    FT_UShort *Input;
    TTO_SubstLookupRecord *SubstLookupRecord;
} TTO_SubRule;
typedef struct TTO_ContextPos_
 TTO_ContextPos;
typedef struct TTO_SinglePosFormat1_ {
    TTO_ValueRecord Value;
} TTO_SinglePosFormat1;
typedef struct TTO_SinglePosFormat2_ {
    FT_UShort ValueCount;
    TTO_ValueRecord *Value;
} TTO_SinglePosFormat2;
typedef struct TTO_SinglePos_ {
    FT_UShort PosFormat;
    TTO_Coverage Coverage;
    FT_UShort ValueFormat;
    union {
	TTO_SinglePosFormat1 spf1;
	TTO_SinglePosFormat2 spf2;
    } spf;
} TTO_SinglePos;
typedef struct TTO_PairValueRecord_ {
    FT_UShort SecondGlyph;
    TTO_ValueRecord Value1;
    TTO_ValueRecord Value2;
} TTO_PairValueRecord;
typedef struct TTO_PairSet_ {
    FT_UShort PairValueCount;
    TTO_PairValueRecord *PairValueRecord;
} TTO_PairSet;
typedef struct TTO_PairPosFormat1_ {
    FT_UShort PairSetCount;
    TTO_PairSet *PairSet;
} TTO_PairPosFormat1;
typedef struct TTO_Class2Record_ {
    TTO_ValueRecord Value1;
    TTO_ValueRecord Value2;
} TTO_Class2Record;
typedef struct TTO_Class1Record_ {
    TTO_Class2Record *Class2Record;
} TTO_Class1Record;
typedef struct TTO_PairPosFormat2_ {
    TTO_ClassDefinition ClassDef1;
    TTO_ClassDefinition ClassDef2;
    FT_UShort Class1Count;
    FT_UShort Class2Count;
    TTO_Class1Record *Class1Record;
} TTO_PairPosFormat2;
typedef struct TTO_PairPos_ {
    FT_UShort PosFormat;
    TTO_Coverage Coverage;
    FT_UShort ValueFormat1;
    FT_UShort ValueFormat2;
    union {
	TTO_PairPosFormat1 ppf1;
	TTO_PairPosFormat2 ppf2;
    } ppf;
} TTO_PairPos;
typedef struct TTO_AnchorFormat1_ {
    FT_Short XCoordinate;
    FT_Short YCoordinate;
} TTO_AnchorFormat1;
typedef struct TTO_AnchorFormat2_ {
    FT_Short XCoordinate;
    FT_Short YCoordinate;
    FT_UShort AnchorPoint;
} TTO_AnchorFormat2;
typedef struct TTO_AnchorFormat3_ {
    FT_Short XCoordinate;
    FT_Short YCoordinate;
    TTO_Device XDeviceTable;
    TTO_Device YDeviceTable;
} TTO_AnchorFormat3;
typedef struct TTO_AnchorFormat4_
 TTO_AnchorFormat4;
typedef struct TTO_Anchor_ {
    FT_UShort PosFormat;
    union {
	TTO_AnchorFormat1 af1;
	TTO_AnchorFormat2 af2;
	TTO_AnchorFormat3 af3;
	TTO_AnchorFormat4 af4;
    } af;
} TTO_Anchor;
typedef struct TTO_EntryExitRecord_ {
    TTO_Anchor EntryAnchor;
    TTO_Anchor ExitAnchor;
} TTO_EntryExitRecord;
typedef struct TTO_CursivePos_ {
    FT_UShort PosFormat;
    TTO_Coverage Coverage;
    FT_UShort EntryExitCount;
    TTO_EntryExitRecord *EntryExitRecord;
} TTO_CursivePos;
typedef struct TTO_MarkBasePos_
 TTO_MarkBasePos;
typedef struct TTO_MarkLigPos_
 TTO_MarkLigPos;
typedef struct TTO_MarkMarkPos_
 TTO_MarkMarkPos;
typedef struct TTO_ChainContextPos_
 TTO_ChainContextPos;
typedef struct TTO_ChainContextPosFormat1_
 TTO_ChainContextPosFormat1;
typedef struct TTO_LangSys_
 TTO_LangSys;
typedef long unsigned int FT_ULong;
typedef struct TTO_Script_
 TTO_Script;
typedef struct TTO_ScriptRecord_ {
    FT_ULong ScriptTag;
    TTO_Script Script;
} TTO_ScriptRecord;
typedef struct TTO_MarkRecord_
 TTO_MarkRecord;
typedef struct OTL_BufferRec_
*OTL_Buffer;
typedef struct TTO_CaretValueFormat2_
 TTO_CaretValueFormat2;
typedef enum _FcType {
    FcTypeVoid, FcTypeInteger, FcTypeDouble, FcTypeString, FcTypeBool,
	FcTypeMatrix, FcTypeCharSet, FcTypeFTFace, FcTypeLangSet
} FcType;
typedef unsigned char FcChar8;
typedef int FcBool;
typedef struct _FcMatrix {
    double xx;
    double xy;
    double yx;
    double yy;
} FcMatrix;
typedef struct _FcCharSet
 FcCharSet;
typedef struct _FcLangSet
 FcLangSet;
typedef struct _FcValue {
    FcType type;
    union {
	const FcChar8 *s;
	int i;
	FcBool b;
	double d;
	const FcMatrix *m;
	const FcCharSet *c;
	void *f;
	const FcPattern *p;
	const FcLangSet *l;
    } u;
} FcValue;
typedef struct TTO_Mark2Record_
 TTO_Mark2Record;
typedef struct TTO_ChainSubClassSet_ {
    FT_UShort ChainSubClassRuleCount;
    TTO_ChainSubClassRule *ChainSubClassRule;
} TTO_ChainSubClassSet;
typedef struct TTO_SubRuleSet_ {
    FT_UShort SubRuleCount;
    TTO_SubRule *SubRule;
} TTO_SubRuleSet;
typedef struct TTO_PosClassSet_
 TTO_PosClassSet;
typedef struct TTO_SingleSubstFormat1_
 TTO_SingleSubstFormat1;
typedef struct TTO_ContextSubstFormat1_ {
    TTO_Coverage Coverage;
    FT_UShort SubRuleSetCount;
    TTO_SubRuleSet *SubRuleSet;
} TTO_ContextSubstFormat1;
typedef struct TTO_SubClassRule_ {
    FT_UShort GlyphCount;
    FT_UShort SubstCount;
    FT_UShort *Class;
    TTO_SubstLookupRecord *SubstLookupRecord;
} TTO_SubClassRule;
typedef struct TTO_SubClassSet_ {
    FT_UShort SubClassRuleCount;
    TTO_SubClassRule *SubClassRule;
} TTO_SubClassSet;
typedef struct TTO_ContextSubstFormat2_ {
    FT_UShort MaxContextLength;
    TTO_Coverage Coverage;
    TTO_ClassDefinition ClassDef;
    FT_UShort SubClassSetCount;
    TTO_SubClassSet *SubClassSet;
} TTO_ContextSubstFormat2;
typedef struct TTO_ContextSubstFormat3_ {
    FT_UShort GlyphCount;
    FT_UShort SubstCount;
    TTO_Coverage *Coverage;
    TTO_SubstLookupRecord *SubstLookupRecord;
} TTO_ContextSubstFormat3;
typedef struct TTO_ComponentRecord_
 TTO_ComponentRecord;
typedef struct TTO_RangeRecord_
 TTO_RangeRecord;
typedef struct TTO_Ligature_ {
    FT_UShort LigGlyph;
    FT_UShort ComponentCount;
    FT_UShort *Component;
} TTO_Ligature;
typedef struct TTO_LigatureSet_ {
    FT_UShort LigatureCount;
    TTO_Ligature *Ligature;
} TTO_LigatureSet;
typedef int FT_Error;
typedef FT_Error(*fptr_pangoft2_89) (FT_Face, FT_UShort, FT_Pos *, void *);
typedef struct TTO_ContextPosFormat2_ TTO_ContextPosFormat2;
typedef struct TTO_SingleSubst_ TTO_SingleSubst;
typedef struct TTO_MarkArray_ TTO_MarkArray;
typedef struct TTO_ContextSubst_ {
    FT_UShort SubstFormat;
    union {
	TTO_ContextSubstFormat1 csf1;
	TTO_ContextSubstFormat2 csf2;
	TTO_ContextSubstFormat3 csf3;
    } csf;
} TTO_ContextSubst;
typedef union TTO_GSUB_SubTable_ TTO_GSUB_SubTable;
typedef FT_UShort(*fptr_pangoft2_115) (FT_ULong, FT_UShort, FT_UShort,
				       FT_UShort *, void *);
typedef struct TTO_CoverageFormat1_ TTO_CoverageFormat1;
typedef struct TTO_ChainSubRule_ {
    FT_UShort BacktrackGlyphCount;
    FT_UShort *Backtrack;
    FT_UShort InputGlyphCount;
    FT_UShort *Input;
    FT_UShort LookaheadGlyphCount;
    FT_UShort *Lookahead;
    FT_UShort SubstCount;
    TTO_SubstLookupRecord *SubstLookupRecord;
} TTO_ChainSubRule;
typedef struct TTO_ChainSubRuleSet_ {
    FT_UShort ChainSubRuleCount;
    TTO_ChainSubRule *ChainSubRule;
} TTO_ChainSubRuleSet;
typedef struct TTO_LigatureAttach_ TTO_LigatureAttach;
typedef struct TTO_ChainContextSubstFormat1_ {
    TTO_Coverage Coverage;
    FT_UShort ChainSubRuleSetCount;
    TTO_ChainSubRuleSet *ChainSubRuleSet;
} TTO_ChainContextSubstFormat1;
typedef struct TTO_ChainContextSubstFormat2_ {
    TTO_Coverage Coverage;
    FT_UShort MaxBacktrackLength;
    TTO_ClassDefinition BacktrackClassDef;
    FT_UShort MaxInputLength;
    TTO_ClassDefinition InputClassDef;
    FT_UShort MaxLookaheadLength;
    TTO_ClassDefinition LookaheadClassDef;
    FT_UShort ChainSubClassSetCount;
    TTO_ChainSubClassSet *ChainSubClassSet;
} TTO_ChainContextSubstFormat2;
typedef struct TTO_ChainContextSubstFormat3_ {
    FT_UShort BacktrackGlyphCount;
    TTO_Coverage *BacktrackCoverage;
    FT_UShort InputGlyphCount;
    TTO_Coverage *InputCoverage;
    FT_UShort LookaheadGlyphCount;
    TTO_Coverage *LookaheadCoverage;
    FT_UShort SubstCount;
    TTO_SubstLookupRecord *SubstLookupRecord;
} TTO_ChainContextSubstFormat3;
typedef struct TTO_LigatureSubst_ {
    FT_UShort SubstFormat;
    TTO_Coverage Coverage;
    FT_UShort LigatureSetCount;
    TTO_LigatureSet *LigatureSet;
} TTO_LigatureSubst;
typedef struct _PangoEngine PangoEngine;
typedef struct TTO_Mark2Array_ TTO_Mark2Array;
typedef struct TTO_AlternateSet_ {
    FT_UShort GlyphCount;
    FT_UShort *Alternate;
} TTO_AlternateSet;
typedef struct TTO_ContextPosFormat3_ TTO_ContextPosFormat3;
typedef struct OTL_GlyphItemRec_
*OTL_GlyphItem;
typedef struct TTO_SingleSubstFormat2_ TTO_SingleSubstFormat2;
typedef struct TTO_LigGlyph_ TTO_LigGlyph;
typedef struct OTL_PositionRec_
*OTL_Position;
typedef struct TTO_CaretValue_ TTO_CaretValue;
typedef struct TTO_PosRule_ TTO_PosRule;
typedef struct TTO_PosRuleSet_ TTO_PosRuleSet;
typedef enum {
    PANGO_OT_TABLE_GSUB, PANGO_OT_TABLE_GPOS
} PangoOTTableType;
typedef struct TTO_ContextPosFormat1_ TTO_ContextPosFormat1;
typedef struct _PangoFcDecoder PangoFcDecoder;
typedef struct _PangoFcFontClass {
    PangoFontClass parent_class;
     FT_Face(*fptr_pangoft2_168) (PangoFcFont *);
    void (*fptr_pangoft2_163) (PangoFcFont *);
     gboolean(*fptr_pangoft2_139) (PangoFcFont *, gunichar);
     guint(*fptr_pangoft2_140) (PangoFcFont *, gunichar);
     PangoGlyph(*fptr_pangoft2_123) (PangoFcFont *, gunichar);
    void (*fptr_pangoft2_163) (PangoFcFont *);
    void (*func) (void);
    void (*func) (void);
    void (*func) (void);
    void (*func) (void);
} PangoFcFontClass;
typedef union TTO_GPOS_SubTable_ {
    TTO_SinglePos single;
    TTO_PairPos pair;
    TTO_CursivePos cursive;
    TTO_MarkBasePos markbase;
    TTO_MarkLigPos marklig;
    TTO_MarkMarkPos markmark;
    TTO_ContextPos context;
    TTO_ChainContextPos chain;
} TTO_GPOS_SubTable;
typedef struct TTO_ScriptList_ TTO_ScriptList;
typedef unsigned char FT_Byte;
typedef struct TTO_LangSysRecord_ TTO_LangSysRecord;
typedef struct TTO_PosLookupRecord_ TTO_PosLookupRecord;
typedef struct _PangoFontMapClass {
    GObjectClass parent_class;
    PangoFont *(*fptr_pangoft2_59) (PangoFontMap *, PangoContext *,
				    const PangoFontDescription *);
    void (*fptr_pangoft2_211) (PangoFontMap *, PangoFontFamily * **,
			       int *);
    PangoFontset *(*fptr_pangoft2_91) (PangoFontMap *, PangoContext *,
				       const PangoFontDescription *,
				       PangoLanguage *);
    const char *shape_engine_type;
    void (*func) (void);
    void (*func) (void);
    void (*func) (void);
    void (*func) (void);
} PangoFontMapClass;
typedef struct TTO_CoverageFormat2_ TTO_CoverageFormat2;
typedef struct TTO_CaretValueFormat4_ TTO_CaretValueFormat4;
typedef struct TTO_CaretValueFormat3_ TTO_CaretValueFormat3;
typedef struct TTO_Feature_ TTO_Feature;
typedef struct TTO_BaseRecord_ TTO_BaseRecord;
typedef struct _PangoFcFontMap PangoFcFontMap;
typedef struct TTO_CaretValueFormat1_ TTO_CaretValueFormat1;
typedef struct TTO_Lookup_ TTO_Lookup;
typedef struct TTO_ChainPosRule_ TTO_ChainPosRule;
typedef struct _PangoFontFamilyClass {
    GObjectClass parent_class;
    void (*fptr_pangoft2_96) (PangoFontFamily *, PangoFontFace * **,
			      int *);
    const char *(*fptr_pangoft2_156) (PangoFontFamily *);
     gboolean(*fptr_pangoft2_117) (PangoFontFamily *);
    void (*func) (void);
    void (*func) (void);
    void (*func) (void);
} PangoFontFamilyClass;
typedef struct _PangoFcFontMapClass {
    PangoFontMapClass parent_class;
    void (*fptr_pangoft2_23) (PangoFcFontMap *, FcPattern *);
    PangoFcFont *(*fptr_pangoft2_0) (PangoFcFontMap *, FcPattern *);
    void (*func) (void);
    void (*func) (void);
    void (*func) (void);
    void (*func) (void);
} PangoFcFontMapClass;
typedef struct _PangoFT2FontMapClass {
    PangoFcFontMapClass parent_class;
} PangoFT2FontMapClass;
typedef struct _GlyphInfo {
    FT_UShort glyph;
    FT_UShort class;
} GlyphInfo;
typedef struct TTO_GSUBHeader_ TTO_GSUBHeader;
typedef struct _PangoFcFace PangoFcFace;
typedef struct TTO_LookupList_ TTO_LookupList;
typedef struct _PangoFontsetSimple PangoFontsetSimple;
typedef struct TTO_FeatureList_ TTO_FeatureList;
typedef enum _FcResult {
    FcResultMatch, FcResultNoMatch, FcResultTypeMismatch, FcResultNoId
} FcResult;
typedef struct TTO_AlternateSubst_ {
    FT_UShort SubstFormat;
    TTO_Coverage Coverage;
    FT_UShort AlternateSetCount;
    TTO_AlternateSet *AlternateSet;
} TTO_AlternateSubst;
typedef struct TTO_ChainContextSubst_ {
    FT_UShort SubstFormat;
    union {
	TTO_ChainContextSubstFormat1 ccsf1;
	TTO_ChainContextSubstFormat2 ccsf2;
	TTO_ChainContextSubstFormat3 ccsf3;
    } ccsf;
} TTO_ChainContextSubst;
typedef struct TTO_BaseArray_ TTO_BaseArray;
typedef signed char FT_Char;
typedef struct TTO_AttachPoint_ TTO_AttachPoint;
typedef struct TTO_LigatureArray_ TTO_LigatureArray;
typedef struct _PangoEngineInfo PangoEngineInfo;
typedef struct TTO_ChainPosRuleSet_ TTO_ChainPosRuleSet;
typedef struct TTO_ChainPosClassSet_ TTO_ChainPosClassSet;
typedef struct TTO_AttachList_ TTO_AttachList;
typedef struct _PangoOTInfo PangoOTInfo;
typedef struct TT_OS2_ {
    FT_UShort version;
    FT_Short xAvgCharWidth;
    FT_UShort usWeightClass;
    FT_UShort usWidthClass;
    FT_Short fsType;
    FT_Short ySubscriptXSize;
    FT_Short ySubscriptYSize;
    FT_Short ySubscriptXOffset;
    FT_Short ySubscriptYOffset;
    FT_Short ySuperscriptXSize;
    FT_Short ySuperscriptYSize;
    FT_Short ySuperscriptXOffset;
    FT_Short ySuperscriptYOffset;
    FT_Short yStrikeoutSize;
    FT_Short yStrikeoutPosition;
    FT_Short sFamilyClass;
    FT_Byte panose[];
    FT_ULong ulUnicodeRange1;
    FT_ULong ulUnicodeRange2;
    FT_ULong ulUnicodeRange3;
    FT_ULong ulUnicodeRange4;
    FT_Char achVendID[];
    FT_UShort fsSelection;
    FT_UShort usFirstCharIndex;
    FT_UShort usLastCharIndex;
    FT_Short sTypoAscender;
    FT_Short sTypoDescender;
    FT_Short sTypoLineGap;
    FT_UShort usWinAscent;
    FT_UShort usWinDescent;
    FT_ULong ulCodePageRange1;
    FT_ULong ulCodePageRange2;
    FT_Short sxHeight;
    FT_Short sCapHeight;
    FT_UShort usDefaultChar;
    FT_UShort usBreakChar;
    FT_UShort usMaxContext;
} TT_OS2;
typedef struct _PangoFcFontMapPrivate PangoFcFontMapPrivate;
typedef struct TTO_ChainContextPosFormat2_ TTO_ChainContextPosFormat2;
typedef PangoFcDecoder *(*fptr_pangoft2_3) (FcPattern *, gpointer);
typedef struct _PangoFcFindFuncInfo {
    PangoFcDecoderFindFunc findfunc;
    gpointer user_data;
    GDestroyNotify dnotify;
    gpointer ddata;
} PangoFcFindFuncInfo;
typedef struct _PangoOTBuffer PangoOTBuffer;
typedef struct TTO_PosClassRule_ TTO_PosClassRule;
typedef unsigned int FcChar32;
typedef struct TTO_ChainContextPosFormat3_ TTO_ChainContextPosFormat3;
typedef struct _PangoFontFaceClass {
    GObjectClass parent_class;
    const char *(*fptr_pangoft2_2) (PangoFontFace *);
    PangoFontDescription *(*fptr_pangoft2_214) (PangoFontFace *);
    void (*fptr_pangoft2_63) (PangoFontFace *, int **, int *);
    void (*func) (void);
    void (*func) (void);
    void (*func) (void);
} PangoFontFaceClass;
typedef enum TTO_Type_ {
    GSUB, GPOS
} TTO_Type;
typedef struct _PangoFcFamily PangoFcFamily;
typedef struct _PangoIncludedModule PangoIncludedModule;
typedef struct TTO_SubTable_ TTO_SubTable;
typedef struct TTO_GPOSHeader_ TTO_GPOSHeader;
typedef struct GPOS_Instance_ {
    TTO_GPOSHeader *gpos;
    FT_Face face;
    FT_Bool dvi;
    FT_UShort load_flags;
    FT_Bool r2l;
    FT_UShort last;
    FT_Pos anchor_x;
    FT_Pos anchor_y;
} GPOS_Instance;
typedef void *FT_Pointer;
typedef struct TTO_ChainPosClassRule_ TTO_ChainPosClassRule;
typedef struct _PangoEngineScriptInfo PangoEngineScriptInfo;
typedef struct _PangoFT2Font {
    PangoFcFont font;
    FT_Face face;
    int load_flags;
    int size;
    GSList *metrics_by_lang;
    GHashTable *glyph_info;
    GDestroyNotify glyph_cache_destroy;
} PangoFT2Font;
typedef FT_Error(*fptr_pangoft2_228) (FT_Face, FT_UInt, FT_Int);
typedef struct _PangoFcCoverageKey {
    char *filename;
    int id;
} PangoFcCoverageKey;
typedef struct _PangoFcFontPrivate {
    PangoFcDecoder *decoder;
} PangoFcFontPrivate;
typedef struct _PangoOTGlyph PangoOTGlyph;
typedef struct {
    FT_Bitmap bitmap;
    int bitmap_left;
    int bitmap_top;
} PangoFT2RenderedGlyph;
typedef struct {
    FT_Error code;
    const char *msg;
} ft_error_description;
typedef struct _PangoFT2RendererClass {
    PangoRendererClass parent_class;
} PangoFT2RendererClass;
typedef struct _PangoOTRule {
    gulong property_bit;
    FT_UShort feature_index;
    guint table_type:1;
} PangoOTRule;
typedef guint32 PangoOTTag;
typedef struct _PangoMap PangoMap;
typedef struct _PangoFcMetricsInfo {
    const char *sample_str;
    PangoFontMetrics *metrics;
} PangoFcMetricsInfo;
typedef struct _PangoFT2GlyphInfo {
    PangoRectangle logical_rect;
    PangoRectangle ink_rect;
    void *cached_glyph;
} PangoFT2GlyphInfo;
typedef struct _PangoOTRuleset PangoOTRuleset;
typedef struct FT_Matrix_ {
    FT_Fixed xx;
    FT_Fixed xy;
    FT_Fixed yx;
    FT_Fixed yy;
} FT_Matrix;
typedef struct _FontsetHashListNode {
    GHashTable *fontset_hash;
    PangoLanguage *language;
} FontsetHashListNode;
typedef struct _PangoFT2Renderer {
    PangoRenderer parent_instance;
    FT_Bitmap *bitmap;
} PangoFT2Renderer;
typedef struct _PangoFcPatternSet {
    int n_patterns;
    FcPattern **patterns;
    PangoFontset *fontset;
    GList *cache_link;
} PangoFcPatternSet;
typedef struct _PangoFT2FontClass {
    PangoFcFontClass parent_class;
} PangoFT2FontClass;
typedef struct _FcObjectSet {
    int nobject;
    int sobject;
    const char **objects;
} FcObjectSet;
extern void pango_fc_font_unlock_face(PangoFcFont *);
extern GType pango_ft2_font_map_get_type(void);
extern GType pango_ft2_font_get_type(void);
extern PangoContext *pango_ft2_font_map_create_context(PangoFT2FontMap *);
extern void pango_ft2_font_map_set_resolution(PangoFT2FontMap *, double,
					      double);
extern GType pango_ft2_renderer_get_type(void);
extern void pango_ft2_font_map_substitute_changed(PangoFT2FontMap *);
extern void pango_ft2_render_layout_line_subpixel(FT_Bitmap *,
						  PangoLayoutLine *, int,
						  int);
extern FT_Face pango_fc_font_lock_face(PangoFcFont *);
extern PangoFontMap *pango_ft2_font_map_new(void);
extern GType pango_ot_ruleset_get_type(void);
extern void pango_ft2_font_map_set_default_substitute(PangoFT2FontMap *,
						      PangoFT2SubstituteFunc,
						      gpointer,
						      GDestroyNotify);
extern GType pango_ot_info_get_type(void);
extern void pango_ft2_render_transformed(FT_Bitmap *, const PangoMatrix *,
					 PangoFont *, PangoGlyphString *,
					 int, int);
extern void pango_ft2_render_layout_subpixel(FT_Bitmap *, PangoLayout *,
					     int, int);
extern void pango_ft2_render_layout(FT_Bitmap *, PangoLayout *, int, int);
extern void pango_ft2_render(FT_Bitmap *, PangoFont *, PangoGlyphString *,
			     int, int);
extern void pango_fc_font_get_raw_extents(PangoFcFont *, FT_Int32,
					  PangoGlyph, PangoRectangle *,
					  PangoRectangle *);
extern GType pango_fc_font_get_type(void);
extern void pango_ft2_render_layout_line(FT_Bitmap *, PangoLayoutLine *,
					 int, int);
</SCREEN>
</SECT2>
</SECT1>
<!-- End of text generated from database -->
<!--    by $Header: //cvsroot/lsb/lsbspec/mklibspec,v 1.75 2005/10/12 22:24:36 nick Exp 0 -->
