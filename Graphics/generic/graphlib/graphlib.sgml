<PART ID="tocgraphlib">
<TITLE>Graphic Libraries</TITLE>

<CHAPTER id=graphlib>
<TITLE>Libraries</TITLE>

<PARA>
The X Libraries should be built thread-safe.
</PARA>

<!-- Start of generated text - do not edit! -->
<!-- generated from the LSB specification database by mklibspec -->
<SECT1 ID=libX11>
<TITLE>Interfaces for libX11</TITLE>
<PARA>
<XREF LINKEND="lib-libX11-def"> defines the library name and shared object name
for the libX11 library
</PARA>
<TABLE id="lib-libX11-def">
<TITLE>libX11 Definition</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Library:</ENTRY>
<ENTRY>libX11</ENTRY>
</ROW>
<ROW>
<ENTRY>SONAME:</ENTRY>
<ENTRY>libX11.so.6</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The behavior of the interfaces in this library is specified by the following specifications:<SIMPLELIST COLUMNS=1>
<MEMBER ID='REFSTD.libX11.1'>
[LSB] <XREF LINKEND="std.LSB">
</MEMBER>
<MEMBER ID='REFSTD.libX11.2'>
[XKBlib] <XREF LINKEND="std.XKBlib">
</MEMBER>
<MEMBER ID='REFSTD.libX11.3'>
[Xlib] <XREF LINKEND="std.Xlib">
</MEMBER>
</SIMPLELIST>
</PARA>
<!-- debug: database interface name X Windows System Interface -->
<SECT2>
<!--libgroup-->
<TITLE>X Windows System Interface</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for X Windows System Interface</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic functions
for X Windows System Interface specified in <XREF linkend="tbl-libX11-x-win-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<TABLE id="tbl-libX11-x-win-ints">
<TITLE>libX11 - X Windows System Interface Function Interfaces</TITLE>
<TGROUP COLS=4>
<TBODY>
<ROW>
<ENTRY><indexterm><primary>XActivateScreenSaver</primary></indexterm>XActivateScreenSaver <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XAddConnectionWatch</primary></indexterm>XAddConnectionWatch <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XAddExtension</primary></indexterm>XAddExtension <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XAddHost</primary></indexterm>XAddHost <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XAddHosts</primary></indexterm>XAddHosts <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XAddPixel</primary></indexterm>XAddPixel <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XAddToExtensionList</primary></indexterm>XAddToExtensionList <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XAddToSaveSet</primary></indexterm>XAddToSaveSet <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XAllPlanes</primary></indexterm>XAllPlanes <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XAllocClassHint</primary></indexterm>XAllocClassHint <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XAllocColor</primary></indexterm>XAllocColor <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XAllocColorCells</primary></indexterm>XAllocColorCells <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XAllocColorPlanes</primary></indexterm>XAllocColorPlanes <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XAllocIconSize</primary></indexterm>XAllocIconSize <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XAllocNamedColor</primary></indexterm>XAllocNamedColor <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XAllocSizeHints</primary></indexterm>XAllocSizeHints <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XAllocStandardColormap</primary></indexterm>XAllocStandardColormap <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XAllocWMHints</primary></indexterm>XAllocWMHints <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XAllowEvents</primary></indexterm>XAllowEvents <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XAutoRepeatOff</primary></indexterm>XAutoRepeatOff <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XAutoRepeatOn</primary></indexterm>XAutoRepeatOn <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XBaseFontNameListOfFontSet</primary></indexterm>XBaseFontNameListOfFontSet <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XBell</primary></indexterm>XBell <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XBitmapBitOrder</primary></indexterm>XBitmapBitOrder <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XBitmapPad</primary></indexterm>XBitmapPad <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XBitmapUnit</primary></indexterm>XBitmapUnit <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XBlackPixel</primary></indexterm>XBlackPixel <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XBlackPixelOfScreen</primary></indexterm>XBlackPixelOfScreen <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XCellsOfScreen</primary></indexterm>XCellsOfScreen <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XChangeActivePointerGrab</primary></indexterm>XChangeActivePointerGrab <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XChangeGC</primary></indexterm>XChangeGC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XChangeKeyboardControl</primary></indexterm>XChangeKeyboardControl <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XChangeKeyboardMapping</primary></indexterm>XChangeKeyboardMapping <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XChangePointerControl</primary></indexterm>XChangePointerControl <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XChangeProperty</primary></indexterm>XChangeProperty <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XChangeSaveSet</primary></indexterm>XChangeSaveSet <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XChangeWindowAttributes</primary></indexterm>XChangeWindowAttributes <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XCheckIfEvent</primary></indexterm>XCheckIfEvent <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XCheckMaskEvent</primary></indexterm>XCheckMaskEvent <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XCheckTypedEvent</primary></indexterm>XCheckTypedEvent <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XCheckTypedWindowEvent</primary></indexterm>XCheckTypedWindowEvent <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XCheckWindowEvent</primary></indexterm>XCheckWindowEvent <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XCirculateSubwindows</primary></indexterm>XCirculateSubwindows <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XCirculateSubwindowsDown</primary></indexterm>XCirculateSubwindowsDown <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XCirculateSubwindowsUp</primary></indexterm>XCirculateSubwindowsUp <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XClearArea</primary></indexterm>XClearArea <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XClearWindow</primary></indexterm>XClearWindow <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XClipBox</primary></indexterm>XClipBox <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XCloseDisplay</primary></indexterm>XCloseDisplay <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XCloseIM</primary></indexterm>XCloseIM <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XCloseOM</primary></indexterm>XCloseOM <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XConfigureWindow</primary></indexterm>XConfigureWindow <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XConnectionNumber</primary></indexterm>XConnectionNumber <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XContextDependentDrawing</primary></indexterm>XContextDependentDrawing <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XContextualDrawing</primary></indexterm>XContextualDrawing <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XConvertCase</primary></indexterm>XConvertCase <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XConvertSelection</primary></indexterm>XConvertSelection <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XCopyArea</primary></indexterm>XCopyArea <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XCopyColormapAndFree</primary></indexterm>XCopyColormapAndFree <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XCopyGC</primary></indexterm>XCopyGC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XCopyPlane</primary></indexterm>XCopyPlane <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XCreateBitmapFromData</primary></indexterm>XCreateBitmapFromData <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XCreateColormap</primary></indexterm>XCreateColormap <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XCreateFontCursor</primary></indexterm>XCreateFontCursor <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XCreateFontSet</primary></indexterm>XCreateFontSet <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XCreateGC</primary></indexterm>XCreateGC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XCreateGlyphCursor</primary></indexterm>XCreateGlyphCursor <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XCreateIC</primary></indexterm>XCreateIC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XCreateImage</primary></indexterm>XCreateImage <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XCreateOC</primary></indexterm>XCreateOC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XCreatePixmap</primary></indexterm>XCreatePixmap <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XCreatePixmapCursor</primary></indexterm>XCreatePixmapCursor <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XCreatePixmapFromBitmapData</primary></indexterm>XCreatePixmapFromBitmapData <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XCreateRegion</primary></indexterm>XCreateRegion <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XCreateSimpleWindow</primary></indexterm>XCreateSimpleWindow <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XCreateWindow</primary></indexterm>XCreateWindow <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XDefaultColormap</primary></indexterm>XDefaultColormap <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDefaultColormapOfScreen</primary></indexterm>XDefaultColormapOfScreen <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDefaultDepth</primary></indexterm>XDefaultDepth <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDefaultDepthOfScreen</primary></indexterm>XDefaultDepthOfScreen <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XDefaultGC</primary></indexterm>XDefaultGC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDefaultGCOfScreen</primary></indexterm>XDefaultGCOfScreen <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDefaultRootWindow</primary></indexterm>XDefaultRootWindow <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDefaultScreen</primary></indexterm>XDefaultScreen <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XDefaultScreenOfDisplay</primary></indexterm>XDefaultScreenOfDisplay <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDefaultString</primary></indexterm>XDefaultString <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDefaultVisual</primary></indexterm>XDefaultVisual <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDefaultVisualOfScreen</primary></indexterm>XDefaultVisualOfScreen <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XDefineCursor</primary></indexterm>XDefineCursor <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDeleteContext</primary></indexterm>XDeleteContext <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDeleteModifiermapEntry</primary></indexterm>XDeleteModifiermapEntry <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDeleteProperty</primary></indexterm>XDeleteProperty <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XDestroyIC</primary></indexterm>XDestroyIC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDestroyImage</primary></indexterm>XDestroyImage <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDestroyOC</primary></indexterm>XDestroyOC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDestroyRegion</primary></indexterm>XDestroyRegion <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XDestroySubwindows</primary></indexterm>XDestroySubwindows <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDestroyWindow</primary></indexterm>XDestroyWindow <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDirectionalDependentDrawing</primary></indexterm>XDirectionalDependentDrawing <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDisableAccessControl</primary></indexterm>XDisableAccessControl <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XDisplayCells</primary></indexterm>XDisplayCells <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDisplayHeight</primary></indexterm>XDisplayHeight <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDisplayHeightMM</primary></indexterm>XDisplayHeightMM <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDisplayKeycodes</primary></indexterm>XDisplayKeycodes <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XDisplayMotionBufferSize</primary></indexterm>XDisplayMotionBufferSize <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDisplayName</primary></indexterm>XDisplayName <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDisplayOfIM</primary></indexterm>XDisplayOfIM <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDisplayOfOM</primary></indexterm>XDisplayOfOM <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XDisplayOfScreen</primary></indexterm>XDisplayOfScreen <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDisplayPlanes</primary></indexterm>XDisplayPlanes <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDisplayString</primary></indexterm>XDisplayString <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDisplayWidth</primary></indexterm>XDisplayWidth <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XDisplayWidthMM</primary></indexterm>XDisplayWidthMM <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDoesBackingStore</primary></indexterm>XDoesBackingStore <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDoesSaveUnders</primary></indexterm>XDoesSaveUnders <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDrawArc</primary></indexterm>XDrawArc <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XDrawArcs</primary></indexterm>XDrawArcs <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDrawImageString</primary></indexterm>XDrawImageString <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDrawImageString16</primary></indexterm>XDrawImageString16 <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDrawLine</primary></indexterm>XDrawLine <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XDrawLines</primary></indexterm>XDrawLines <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDrawPoint</primary></indexterm>XDrawPoint <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDrawPoints</primary></indexterm>XDrawPoints <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDrawRectangle</primary></indexterm>XDrawRectangle <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XDrawRectangles</primary></indexterm>XDrawRectangles <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDrawSegments</primary></indexterm>XDrawSegments <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDrawString</primary></indexterm>XDrawString <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDrawString16</primary></indexterm>XDrawString16 <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XDrawText</primary></indexterm>XDrawText <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDrawText16</primary></indexterm>XDrawText16 <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XEHeadOfExtensionList</primary></indexterm>XEHeadOfExtensionList <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XESetBeforeFlush</primary></indexterm>XESetBeforeFlush <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XESetCloseDisplay</primary></indexterm>XESetCloseDisplay <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XESetCopyGC</primary></indexterm>XESetCopyGC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XESetCreateFont</primary></indexterm>XESetCreateFont <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XESetCreateGC</primary></indexterm>XESetCreateGC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XESetError</primary></indexterm>XESetError <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XESetErrorString</primary></indexterm>XESetErrorString <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XESetEventToWire</primary></indexterm>XESetEventToWire <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XESetFlushGC</primary></indexterm>XESetFlushGC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XESetFreeFont</primary></indexterm>XESetFreeFont <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XESetFreeGC</primary></indexterm>XESetFreeGC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XESetPrintErrorValues</primary></indexterm>XESetPrintErrorValues <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XESetWireToError</primary></indexterm>XESetWireToError <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XESetWireToEvent</primary></indexterm>XESetWireToEvent <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XEmptyRegion</primary></indexterm>XEmptyRegion <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XEnableAccessControl</primary></indexterm>XEnableAccessControl <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XEqualRegion</primary></indexterm>XEqualRegion <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XEventMaskOfScreen</primary></indexterm>XEventMaskOfScreen <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XEventsQueued</primary></indexterm>XEventsQueued <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XExtendedMaxRequestSize</primary></indexterm>XExtendedMaxRequestSize <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XExtentsOfFontSet</primary></indexterm>XExtentsOfFontSet <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XFetchBuffer</primary></indexterm>XFetchBuffer <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XFetchBytes</primary></indexterm>XFetchBytes <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XFetchName</primary></indexterm>XFetchName <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XFillArc</primary></indexterm>XFillArc <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XFillArcs</primary></indexterm>XFillArcs <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XFillPolygon</primary></indexterm>XFillPolygon <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XFillRectangle</primary></indexterm>XFillRectangle <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XFillRectangles</primary></indexterm>XFillRectangles <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XFilterEvent</primary></indexterm>XFilterEvent <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XFindContext</primary></indexterm>XFindContext <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XFindOnExtensionList</primary></indexterm>XFindOnExtensionList <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XFlush</primary></indexterm>XFlush <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XFlushGC</primary></indexterm>XFlushGC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XFontsOfFontSet</primary></indexterm>XFontsOfFontSet <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XForceScreenSaver</primary></indexterm>XForceScreenSaver <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XFree</primary></indexterm>XFree <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XFreeColormap</primary></indexterm>XFreeColormap <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XFreeColors</primary></indexterm>XFreeColors <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XFreeCursor</primary></indexterm>XFreeCursor <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XFreeExtensionList</primary></indexterm>XFreeExtensionList <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XFreeFont</primary></indexterm>XFreeFont <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XFreeFontInfo</primary></indexterm>XFreeFontInfo <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XFreeFontNames</primary></indexterm>XFreeFontNames <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XFreeFontPath</primary></indexterm>XFreeFontPath <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XFreeFontSet</primary></indexterm>XFreeFontSet <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XFreeGC</primary></indexterm>XFreeGC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XFreeModifiermap</primary></indexterm>XFreeModifiermap <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XFreePixmap</primary></indexterm>XFreePixmap <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XFreeStringList</primary></indexterm>XFreeStringList <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGContextFromGC</primary></indexterm>XGContextFromGC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGeometry</primary></indexterm>XGeometry <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetAtomName</primary></indexterm>XGetAtomName <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XGetAtomNames</primary></indexterm>XGetAtomNames <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetClassHint</primary></indexterm>XGetClassHint <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetCommand</primary></indexterm>XGetCommand <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetDefault</primary></indexterm>XGetDefault <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XGetErrorDatabaseText</primary></indexterm>XGetErrorDatabaseText <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetErrorText</primary></indexterm>XGetErrorText <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetFontPath</primary></indexterm>XGetFontPath <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetFontProperty</primary></indexterm>XGetFontProperty <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XGetGCValues</primary></indexterm>XGetGCValues <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetGeometry</primary></indexterm>XGetGeometry <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetICValues</primary></indexterm>XGetICValues <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetIMValues</primary></indexterm>XGetIMValues <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XGetIconName</primary></indexterm>XGetIconName <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetIconSizes</primary></indexterm>XGetIconSizes <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetImage</primary></indexterm>XGetImage <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetInputFocus</primary></indexterm>XGetInputFocus <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XGetKeyboardControl</primary></indexterm>XGetKeyboardControl <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetKeyboardMapping</primary></indexterm>XGetKeyboardMapping <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetModifierMapping</primary></indexterm>XGetModifierMapping <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetMotionEvents</primary></indexterm>XGetMotionEvents <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XGetNormalHints</primary></indexterm>XGetNormalHints <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetOCValues</primary></indexterm>XGetOCValues <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetOMValues</primary></indexterm>XGetOMValues <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetPixel</primary></indexterm>XGetPixel <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XGetPointerControl</primary></indexterm>XGetPointerControl <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetPointerMapping</primary></indexterm>XGetPointerMapping <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetRGBColormaps</primary></indexterm>XGetRGBColormaps <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetScreenSaver</primary></indexterm>XGetScreenSaver <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XGetSelectionOwner</primary></indexterm>XGetSelectionOwner <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetSizeHints</primary></indexterm>XGetSizeHints <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetStandardColormap</primary></indexterm>XGetStandardColormap <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetSubImage</primary></indexterm>XGetSubImage <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XGetTextProperty</primary></indexterm>XGetTextProperty <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetTransientForHint</primary></indexterm>XGetTransientForHint <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetVisualInfo</primary></indexterm>XGetVisualInfo <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetWMClientMachine</primary></indexterm>XGetWMClientMachine <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XGetWMColormapWindows</primary></indexterm>XGetWMColormapWindows <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetWMHints</primary></indexterm>XGetWMHints <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetWMIconName</primary></indexterm>XGetWMIconName <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetWMName</primary></indexterm>XGetWMName <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XGetWMNormalHints</primary></indexterm>XGetWMNormalHints <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetWMProtocols</primary></indexterm>XGetWMProtocols <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetWMSizeHints</primary></indexterm>XGetWMSizeHints <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetWindowAttributes</primary></indexterm>XGetWindowAttributes <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XGetWindowProperty</primary></indexterm>XGetWindowProperty <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetZoomHints</primary></indexterm>XGetZoomHints <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGrabButton</primary></indexterm>XGrabButton <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGrabKey</primary></indexterm>XGrabKey <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XGrabKeyboard</primary></indexterm>XGrabKeyboard <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGrabPointer</primary></indexterm>XGrabPointer <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGrabServer</primary></indexterm>XGrabServer <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XHeightMMOfScreen</primary></indexterm>XHeightMMOfScreen <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XHeightOfScreen</primary></indexterm>XHeightOfScreen <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XIMOfIC</primary></indexterm>XIMOfIC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XIconifyWindow</primary></indexterm>XIconifyWindow <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XIfEvent</primary></indexterm>XIfEvent <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XImageByteOrder</primary></indexterm>XImageByteOrder <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XInitExtension</primary></indexterm>XInitExtension <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XInitImage</primary></indexterm>XInitImage <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XInitThreads</primary></indexterm>XInitThreads <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XInsertModifiermapEntry</primary></indexterm>XInsertModifiermapEntry <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XInstallColormap</primary></indexterm>XInstallColormap <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XInternAtom</primary></indexterm>XInternAtom <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XInternAtoms</primary></indexterm>XInternAtoms <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XInternalConnectionNumbers</primary></indexterm>XInternalConnectionNumbers <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XIntersectRegion</primary></indexterm>XIntersectRegion <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XKeycodeToKeysym</primary></indexterm>XKeycodeToKeysym <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XKeysymToKeycode</primary></indexterm>XKeysymToKeycode <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XKeysymToString</primary></indexterm>XKeysymToString <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XKillClient</primary></indexterm>XKillClient <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XLastKnownRequestProcessed</primary></indexterm>XLastKnownRequestProcessed <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XListDepths</primary></indexterm>XListDepths <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XListExtensions</primary></indexterm>XListExtensions <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XListFonts</primary></indexterm>XListFonts <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XListFontsWithInfo</primary></indexterm>XListFontsWithInfo <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XListHosts</primary></indexterm>XListHosts <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XListInstalledColormaps</primary></indexterm>XListInstalledColormaps <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XListPixmapFormats</primary></indexterm>XListPixmapFormats <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XListProperties</primary></indexterm>XListProperties <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XLoadFont</primary></indexterm>XLoadFont <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XLoadQueryFont</primary></indexterm>XLoadQueryFont <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XLocaleOfFontSet</primary></indexterm>XLocaleOfFontSet <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XLocaleOfIM</primary></indexterm>XLocaleOfIM <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XLocaleOfOM</primary></indexterm>XLocaleOfOM <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XLockDisplay</primary></indexterm>XLockDisplay <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XLookupColor</primary></indexterm>XLookupColor <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XLookupKeysym</primary></indexterm>XLookupKeysym <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XLookupString</primary></indexterm>XLookupString <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XLowerWindow</primary></indexterm>XLowerWindow <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XMapRaised</primary></indexterm>XMapRaised <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XMapSubwindows</primary></indexterm>XMapSubwindows <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XMapWindow</primary></indexterm>XMapWindow <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XMaskEvent</primary></indexterm>XMaskEvent <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XMatchVisualInfo</primary></indexterm>XMatchVisualInfo <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XMaxCmapsOfScreen</primary></indexterm>XMaxCmapsOfScreen <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XMaxRequestSize</primary></indexterm>XMaxRequestSize <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XMinCmapsOfScreen</primary></indexterm>XMinCmapsOfScreen <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XMoveResizeWindow</primary></indexterm>XMoveResizeWindow <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XMoveWindow</primary></indexterm>XMoveWindow <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XNewModifiermap</primary></indexterm>XNewModifiermap <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XNextEvent</primary></indexterm>XNextEvent <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XNextRequest</primary></indexterm>XNextRequest <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XNoOp</primary></indexterm>XNoOp <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XOMOfOC</primary></indexterm>XOMOfOC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XOffsetRegion</primary></indexterm>XOffsetRegion <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XOpenDisplay</primary></indexterm>XOpenDisplay <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XOpenIM</primary></indexterm>XOpenIM <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XOpenOM</primary></indexterm>XOpenOM <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XParseColor</primary></indexterm>XParseColor <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XParseGeometry</primary></indexterm>XParseGeometry <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XPeekEvent</primary></indexterm>XPeekEvent <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XPeekIfEvent</primary></indexterm>XPeekIfEvent <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XPending</primary></indexterm>XPending <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XPlanesOfScreen</primary></indexterm>XPlanesOfScreen <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XPointInRegion</primary></indexterm>XPointInRegion <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XPolygonRegion</primary></indexterm>XPolygonRegion <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XProcessInternalConnection</primary></indexterm>XProcessInternalConnection <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XProtocolRevision</primary></indexterm>XProtocolRevision <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XProtocolVersion</primary></indexterm>XProtocolVersion <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XPutBackEvent</primary></indexterm>XPutBackEvent <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XPutImage</primary></indexterm>XPutImage <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XPutPixel</primary></indexterm>XPutPixel <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XQLength</primary></indexterm>XQLength <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XQueryBestCursor</primary></indexterm>XQueryBestCursor <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XQueryBestSize</primary></indexterm>XQueryBestSize <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XQueryBestStipple</primary></indexterm>XQueryBestStipple <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XQueryBestTile</primary></indexterm>XQueryBestTile <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XQueryColor</primary></indexterm>XQueryColor <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XQueryColors</primary></indexterm>XQueryColors <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XQueryExtension</primary></indexterm>XQueryExtension <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XQueryFont</primary></indexterm>XQueryFont <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XQueryKeymap</primary></indexterm>XQueryKeymap <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XQueryPointer</primary></indexterm>XQueryPointer <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XQueryTextExtents</primary></indexterm>XQueryTextExtents <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XQueryTextExtents16</primary></indexterm>XQueryTextExtents16 <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XQueryTree</primary></indexterm>XQueryTree <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XRaiseWindow</primary></indexterm>XRaiseWindow <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XReadBitmapFile</primary></indexterm>XReadBitmapFile <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XReadBitmapFileData</primary></indexterm>XReadBitmapFileData <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XRebindKeysym</primary></indexterm>XRebindKeysym <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XRecolorCursor</primary></indexterm>XRecolorCursor <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XReconfigureWMWindow</primary></indexterm>XReconfigureWMWindow <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XRectInRegion</primary></indexterm>XRectInRegion <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XRefreshKeyboardMapping</primary></indexterm>XRefreshKeyboardMapping <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XRegisterIMInstantiateCallback</primary></indexterm>XRegisterIMInstantiateCallback <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XRemoveConnectionWatch</primary></indexterm>XRemoveConnectionWatch <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XRemoveFromSaveSet</primary></indexterm>XRemoveFromSaveSet <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XRemoveHost</primary></indexterm>XRemoveHost <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XRemoveHosts</primary></indexterm>XRemoveHosts <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XReparentWindow</primary></indexterm>XReparentWindow <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XResetScreenSaver</primary></indexterm>XResetScreenSaver <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XResizeWindow</primary></indexterm>XResizeWindow <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XResourceManagerString</primary></indexterm>XResourceManagerString <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XRestackWindows</primary></indexterm>XRestackWindows <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XRootWindow</primary></indexterm>XRootWindow <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XRootWindowOfScreen</primary></indexterm>XRootWindowOfScreen <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XRotateBuffers</primary></indexterm>XRotateBuffers <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XRotateWindowProperties</primary></indexterm>XRotateWindowProperties <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSaveContext</primary></indexterm>XSaveContext <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XScreenCount</primary></indexterm>XScreenCount <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XScreenNumberOfScreen</primary></indexterm>XScreenNumberOfScreen <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XScreenOfDisplay</primary></indexterm>XScreenOfDisplay <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XScreenResourceString</primary></indexterm>XScreenResourceString <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSelectInput</primary></indexterm>XSelectInput <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XSendEvent</primary></indexterm>XSendEvent <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XServerVendor</primary></indexterm>XServerVendor <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetAccessControl</primary></indexterm>XSetAccessControl <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetAfterFunction</primary></indexterm>XSetAfterFunction <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XSetArcMode</primary></indexterm>XSetArcMode <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetAuthorization</primary></indexterm>XSetAuthorization <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetBackground</primary></indexterm>XSetBackground <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetClassHint</primary></indexterm>XSetClassHint <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XSetClipMask</primary></indexterm>XSetClipMask <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetClipOrigin</primary></indexterm>XSetClipOrigin <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetClipRectangles</primary></indexterm>XSetClipRectangles <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetCloseDownMode</primary></indexterm>XSetCloseDownMode <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XSetCommand</primary></indexterm>XSetCommand <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetDashes</primary></indexterm>XSetDashes <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetErrorHandler</primary></indexterm>XSetErrorHandler <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetFillRule</primary></indexterm>XSetFillRule <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XSetFillStyle</primary></indexterm>XSetFillStyle <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetFont</primary></indexterm>XSetFont <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetFontPath</primary></indexterm>XSetFontPath <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetForeground</primary></indexterm>XSetForeground <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XSetFunction</primary></indexterm>XSetFunction <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetGraphicsExposures</primary></indexterm>XSetGraphicsExposures <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetICFocus</primary></indexterm>XSetICFocus <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetICValues</primary></indexterm>XSetICValues <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XSetIMValues</primary></indexterm>XSetIMValues <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetIOErrorHandler</primary></indexterm>XSetIOErrorHandler <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetIconName</primary></indexterm>XSetIconName <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetIconSizes</primary></indexterm>XSetIconSizes <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XSetInputFocus</primary></indexterm>XSetInputFocus <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetLineAttributes</primary></indexterm>XSetLineAttributes <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetLocaleModifiers</primary></indexterm>XSetLocaleModifiers <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetModifierMapping</primary></indexterm>XSetModifierMapping <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XSetNormalHints</primary></indexterm>XSetNormalHints <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetOCValues</primary></indexterm>XSetOCValues <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetOMValues</primary></indexterm>XSetOMValues <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetPlaneMask</primary></indexterm>XSetPlaneMask <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XSetPointerMapping</primary></indexterm>XSetPointerMapping <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetRGBColormaps</primary></indexterm>XSetRGBColormaps <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetRegion</primary></indexterm>XSetRegion <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetScreenSaver</primary></indexterm>XSetScreenSaver <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XSetSelectionOwner</primary></indexterm>XSetSelectionOwner <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetSizeHints</primary></indexterm>XSetSizeHints <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetStandardColormap</primary></indexterm>XSetStandardColormap <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetStandardProperties</primary></indexterm>XSetStandardProperties <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XSetState</primary></indexterm>XSetState <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetStipple</primary></indexterm>XSetStipple <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetSubwindowMode</primary></indexterm>XSetSubwindowMode <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetTSOrigin</primary></indexterm>XSetTSOrigin <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XSetTextProperty</primary></indexterm>XSetTextProperty <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetTile</primary></indexterm>XSetTile <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetTransientForHint</primary></indexterm>XSetTransientForHint <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetWMClientMachine</primary></indexterm>XSetWMClientMachine <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XSetWMColormapWindows</primary></indexterm>XSetWMColormapWindows <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetWMHints</primary></indexterm>XSetWMHints <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetWMIconName</primary></indexterm>XSetWMIconName <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetWMName</primary></indexterm>XSetWMName <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XSetWMNormalHints</primary></indexterm>XSetWMNormalHints <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetWMProperties</primary></indexterm>XSetWMProperties <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetWMProtocols</primary></indexterm>XSetWMProtocols <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetWMSizeHints</primary></indexterm>XSetWMSizeHints <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XSetWindowBackground</primary></indexterm>XSetWindowBackground <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetWindowBackgroundPixmap</primary></indexterm>XSetWindowBackgroundPixmap <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetWindowBorder</primary></indexterm>XSetWindowBorder <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetWindowBorderPixmap</primary></indexterm>XSetWindowBorderPixmap <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XSetWindowBorderWidth</primary></indexterm>XSetWindowBorderWidth <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetWindowColormap</primary></indexterm>XSetWindowColormap <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetZoomHints</primary></indexterm>XSetZoomHints <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XShrinkRegion</primary></indexterm>XShrinkRegion <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XStoreBuffer</primary></indexterm>XStoreBuffer <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XStoreBytes</primary></indexterm>XStoreBytes <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XStoreColor</primary></indexterm>XStoreColor <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XStoreColors</primary></indexterm>XStoreColors <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XStoreName</primary></indexterm>XStoreName <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XStoreNamedColor</primary></indexterm>XStoreNamedColor <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XStringListToTextProperty</primary></indexterm>XStringListToTextProperty <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XStringToKeysym</primary></indexterm>XStringToKeysym <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XSubImage</primary></indexterm>XSubImage <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSubtractRegion</primary></indexterm>XSubtractRegion <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSupportsLocale</primary></indexterm>XSupportsLocale <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSync</primary></indexterm>XSync <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XSynchronize</primary></indexterm>XSynchronize <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XTextExtents</primary></indexterm>XTextExtents <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XTextExtents16</primary></indexterm>XTextExtents16 <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XTextPropertyToStringList</primary></indexterm>XTextPropertyToStringList <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XTextWidth</primary></indexterm>XTextWidth <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XTextWidth16</primary></indexterm>XTextWidth16 <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XTranslateCoordinates</primary></indexterm>XTranslateCoordinates <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XUndefineCursor</primary></indexterm>XUndefineCursor <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XUngrabButton</primary></indexterm>XUngrabButton <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XUngrabKey</primary></indexterm>XUngrabKey <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XUngrabKeyboard</primary></indexterm>XUngrabKeyboard <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XUngrabPointer</primary></indexterm>XUngrabPointer <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XUngrabServer</primary></indexterm>XUngrabServer <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XUninstallColormap</primary></indexterm>XUninstallColormap <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XUnionRectWithRegion</primary></indexterm>XUnionRectWithRegion <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XUnionRegion</primary></indexterm>XUnionRegion <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XUnloadFont</primary></indexterm>XUnloadFont <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XUnlockDisplay</primary></indexterm>XUnlockDisplay <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XUnmapSubwindows</primary></indexterm>XUnmapSubwindows <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XUnmapWindow</primary></indexterm>XUnmapWindow <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XUnregisterIMInstantiateCallback</primary></indexterm>XUnregisterIMInstantiateCallback <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XUnsetICFocus</primary></indexterm>XUnsetICFocus <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XVaCreateNestedList</primary></indexterm>XVaCreateNestedList <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XVendorRelease</primary></indexterm>XVendorRelease <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XVisualIDFromVisual</primary></indexterm>XVisualIDFromVisual <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XWMGeometry</primary></indexterm>XWMGeometry <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XWarpPointer</primary></indexterm>XWarpPointer <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XWhitePixel</primary></indexterm>XWhitePixel <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XWhitePixelOfScreen</primary></indexterm>XWhitePixelOfScreen <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XWidthMMOfScreen</primary></indexterm>XWidthMMOfScreen <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XWidthOfScreen</primary></indexterm>XWidthOfScreen <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XWindowEvent</primary></indexterm>XWindowEvent <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XWithdrawWindow</primary></indexterm>XWithdrawWindow <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XWriteBitmapFile</primary></indexterm>XWriteBitmapFile <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XXorRegion</primary></indexterm>XXorRegion <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XauDisposeAuth</primary></indexterm>XauDisposeAuth <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XauFileName</primary></indexterm>XauFileName <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XauGetBestAuthByAddr</primary></indexterm>XauGetBestAuthByAddr <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XauReadAuth</primary></indexterm>XauReadAuth <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsAddColorSpace</primary></indexterm>XcmsAddColorSpace <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XcmsAddFunctionSet</primary></indexterm>XcmsAddFunctionSet <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsAllocColor</primary></indexterm>XcmsAllocColor <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsAllocNamedColor</primary></indexterm>XcmsAllocNamedColor <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsCCCOfColormap</primary></indexterm>XcmsCCCOfColormap <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XcmsCIELabClipL</primary></indexterm>XcmsCIELabClipL <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsCIELabClipLab</primary></indexterm>XcmsCIELabClipLab <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsCIELabClipab</primary></indexterm>XcmsCIELabClipab <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsCIELabQueryMaxC</primary></indexterm>XcmsCIELabQueryMaxC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XcmsCIELabQueryMaxL</primary></indexterm>XcmsCIELabQueryMaxL <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsCIELabQueryMaxLC</primary></indexterm>XcmsCIELabQueryMaxLC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsCIELabQueryMinL</primary></indexterm>XcmsCIELabQueryMinL <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsCIELabToCIEXYZ</primary></indexterm>XcmsCIELabToCIEXYZ <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XcmsCIELabWhiteShiftColors</primary></indexterm>XcmsCIELabWhiteShiftColors <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsCIELuvClipL</primary></indexterm>XcmsCIELuvClipL <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsCIELuvClipLuv</primary></indexterm>XcmsCIELuvClipLuv <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsCIELuvClipuv</primary></indexterm>XcmsCIELuvClipuv <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XcmsCIELuvQueryMaxC</primary></indexterm>XcmsCIELuvQueryMaxC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsCIELuvQueryMaxL</primary></indexterm>XcmsCIELuvQueryMaxL <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsCIELuvQueryMaxLC</primary></indexterm>XcmsCIELuvQueryMaxLC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsCIELuvQueryMinL</primary></indexterm>XcmsCIELuvQueryMinL <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XcmsCIELuvToCIEuvY</primary></indexterm>XcmsCIELuvToCIEuvY <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsCIELuvWhiteShiftColors</primary></indexterm>XcmsCIELuvWhiteShiftColors <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsCIEXYZToCIELab</primary></indexterm>XcmsCIEXYZToCIELab <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsCIEXYZToCIEuvY</primary></indexterm>XcmsCIEXYZToCIEuvY <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XcmsCIEXYZToCIExyY</primary></indexterm>XcmsCIEXYZToCIExyY <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsCIEXYZToRGBi</primary></indexterm>XcmsCIEXYZToRGBi <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsCIEuvYToCIELuv</primary></indexterm>XcmsCIEuvYToCIELuv <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsCIEuvYToCIEXYZ</primary></indexterm>XcmsCIEuvYToCIEXYZ <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XcmsCIEuvYToTekHVC</primary></indexterm>XcmsCIEuvYToTekHVC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsCIExyYToCIEXYZ</primary></indexterm>XcmsCIExyYToCIEXYZ <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsClientWhitePointOfCCC</primary></indexterm>XcmsClientWhitePointOfCCC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsConvertColors</primary></indexterm>XcmsConvertColors <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XcmsCreateCCC</primary></indexterm>XcmsCreateCCC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsDefaultCCC</primary></indexterm>XcmsDefaultCCC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsDisplayOfCCC</primary></indexterm>XcmsDisplayOfCCC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsFormatOfPrefix</primary></indexterm>XcmsFormatOfPrefix <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XcmsFreeCCC</primary></indexterm>XcmsFreeCCC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsLookupColor</primary></indexterm>XcmsLookupColor <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsPrefixOfFormat</primary></indexterm>XcmsPrefixOfFormat <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsQueryBlack</primary></indexterm>XcmsQueryBlack <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XcmsQueryBlue</primary></indexterm>XcmsQueryBlue <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsQueryColor</primary></indexterm>XcmsQueryColor <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsQueryColors</primary></indexterm>XcmsQueryColors <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsQueryGreen</primary></indexterm>XcmsQueryGreen <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XcmsQueryRed</primary></indexterm>XcmsQueryRed <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsQueryWhite</primary></indexterm>XcmsQueryWhite <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsRGBToRGBi</primary></indexterm>XcmsRGBToRGBi <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsRGBiToCIEXYZ</primary></indexterm>XcmsRGBiToCIEXYZ <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XcmsRGBiToRGB</primary></indexterm>XcmsRGBiToRGB <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsScreenNumberOfCCC</primary></indexterm>XcmsScreenNumberOfCCC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsScreenWhitePointOfCCC</primary></indexterm>XcmsScreenWhitePointOfCCC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsSetCCCOfColormap</primary></indexterm>XcmsSetCCCOfColormap <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XcmsSetCompressionProc</primary></indexterm>XcmsSetCompressionProc <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsSetWhiteAdjustProc</primary></indexterm>XcmsSetWhiteAdjustProc <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsSetWhitePoint</primary></indexterm>XcmsSetWhitePoint <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsStoreColor</primary></indexterm>XcmsStoreColor <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XcmsStoreColors</primary></indexterm>XcmsStoreColors <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsTekHVCClipC</primary></indexterm>XcmsTekHVCClipC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsTekHVCClipV</primary></indexterm>XcmsTekHVCClipV <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsTekHVCClipVC</primary></indexterm>XcmsTekHVCClipVC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XcmsTekHVCQueryMaxC</primary></indexterm>XcmsTekHVCQueryMaxC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsTekHVCQueryMaxV</primary></indexterm>XcmsTekHVCQueryMaxV <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsTekHVCQueryMaxVC</primary></indexterm>XcmsTekHVCQueryMaxVC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsTekHVCQueryMaxVSamples</primary></indexterm>XcmsTekHVCQueryMaxVSamples <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XcmsTekHVCQueryMinV</primary></indexterm>XcmsTekHVCQueryMinV <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsTekHVCToCIEuvY</primary></indexterm>XcmsTekHVCToCIEuvY <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsTekHVCWhiteShiftColors</primary></indexterm>XcmsTekHVCWhiteShiftColors <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsVisualOfCCC</primary></indexterm>XcmsVisualOfCCC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XkbAllocClientMap</primary></indexterm>XkbAllocClientMap <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbAllocCompatMap</primary></indexterm>XkbAllocCompatMap <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbAllocControls</primary></indexterm>XkbAllocControls <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbAllocGeomColors</primary></indexterm>XkbAllocGeomColors <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XkbAllocGeomDoodads</primary></indexterm>XkbAllocGeomDoodads <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbAllocGeomKeyAliases</primary></indexterm>XkbAllocGeomKeyAliases <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbAllocGeomKeys</primary></indexterm>XkbAllocGeomKeys <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbAllocGeomOutlines</primary></indexterm>XkbAllocGeomOutlines <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XkbAllocGeomOverlayKeys</primary></indexterm>XkbAllocGeomOverlayKeys <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbAllocGeomOverlayRows</primary></indexterm>XkbAllocGeomOverlayRows <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbAllocGeomOverlays</primary></indexterm>XkbAllocGeomOverlays <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbAllocGeomPoints</primary></indexterm>XkbAllocGeomPoints <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XkbAllocGeomProps</primary></indexterm>XkbAllocGeomProps <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbAllocGeomRows</primary></indexterm>XkbAllocGeomRows <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbAllocGeomSectionDoodads</primary></indexterm>XkbAllocGeomSectionDoodads <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbAllocGeomSections</primary></indexterm>XkbAllocGeomSections <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XkbAllocGeomShapes</primary></indexterm>XkbAllocGeomShapes <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbAllocGeometry</primary></indexterm>XkbAllocGeometry <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbAllocIndicatorMaps</primary></indexterm>XkbAllocIndicatorMaps <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbAllocKeyboard</primary></indexterm>XkbAllocKeyboard <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XkbAllocNames</primary></indexterm>XkbAllocNames <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbAllocServerMap</primary></indexterm>XkbAllocServerMap <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbApplyCompatMapToKey</primary></indexterm>XkbApplyCompatMapToKey <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbBell</primary></indexterm>XkbBell <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XkbBellEvent</primary></indexterm>XkbBellEvent <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbChangeEnabledControls</primary></indexterm>XkbChangeEnabledControls <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbChangeMap</primary></indexterm>XkbChangeMap <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbChangeNames</primary></indexterm>XkbChangeNames <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XkbChangeTypesOfKey</primary></indexterm>XkbChangeTypesOfKey <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbComputeEffectiveMap</primary></indexterm>XkbComputeEffectiveMap <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbComputeRowBounds</primary></indexterm>XkbComputeRowBounds <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbComputeSectionBounds</primary></indexterm>XkbComputeSectionBounds <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XkbComputeShapeBounds</primary></indexterm>XkbComputeShapeBounds <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbComputeShapeTop</primary></indexterm>XkbComputeShapeTop <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbCopyKeyType</primary></indexterm>XkbCopyKeyType <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbCopyKeyTypes</primary></indexterm>XkbCopyKeyTypes <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XkbFindOverlayForKey</primary></indexterm>XkbFindOverlayForKey <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbForceBell</primary></indexterm>XkbForceBell <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbFreeClientMap</primary></indexterm>XkbFreeClientMap <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbFreeCompatMap</primary></indexterm>XkbFreeCompatMap <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XkbFreeComponentList</primary></indexterm>XkbFreeComponentList <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbFreeControls</primary></indexterm>XkbFreeControls <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbFreeGeomColors</primary></indexterm>XkbFreeGeomColors <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbFreeGeomDoodads</primary></indexterm>XkbFreeGeomDoodads <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XkbFreeGeomKeyAliases</primary></indexterm>XkbFreeGeomKeyAliases <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbFreeGeomKeys</primary></indexterm>XkbFreeGeomKeys <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbFreeGeomOutlines</primary></indexterm>XkbFreeGeomOutlines <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbFreeGeomOverlayKeys</primary></indexterm>XkbFreeGeomOverlayKeys <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XkbFreeGeomOverlayRows</primary></indexterm>XkbFreeGeomOverlayRows <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbFreeGeomOverlays</primary></indexterm>XkbFreeGeomOverlays <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbFreeGeomPoints</primary></indexterm>XkbFreeGeomPoints <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbFreeGeomProperties</primary></indexterm>XkbFreeGeomProperties <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XkbFreeGeomRows</primary></indexterm>XkbFreeGeomRows <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbFreeGeomSections</primary></indexterm>XkbFreeGeomSections <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbFreeGeomShapes</primary></indexterm>XkbFreeGeomShapes <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbFreeGeometry</primary></indexterm>XkbFreeGeometry <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XkbFreeIndicatorMaps</primary></indexterm>XkbFreeIndicatorMaps <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbFreeKeyboard</primary></indexterm>XkbFreeKeyboard <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbFreeNames</primary></indexterm>XkbFreeNames <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbFreeServerMap</primary></indexterm>XkbFreeServerMap <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XkbGetAutoRepeatRate</primary></indexterm>XkbGetAutoRepeatRate <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbGetCompatMap</primary></indexterm>XkbGetCompatMap <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbGetControls</primary></indexterm>XkbGetControls <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbGetGeometry</primary></indexterm>XkbGetGeometry <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XkbGetIndicatorMap</primary></indexterm>XkbGetIndicatorMap <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbGetIndicatorState</primary></indexterm>XkbGetIndicatorState <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbGetKeyActions</primary></indexterm>XkbGetKeyActions <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbGetKeyBehaviors</primary></indexterm>XkbGetKeyBehaviors <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XkbGetKeyExplicitComponents</primary></indexterm>XkbGetKeyExplicitComponents <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbGetKeyModifierMap</primary></indexterm>XkbGetKeyModifierMap <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbGetKeySyms</primary></indexterm>XkbGetKeySyms <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbGetKeyTypes</primary></indexterm>XkbGetKeyTypes <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XkbGetKeyboard</primary></indexterm>XkbGetKeyboard <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbGetKeyboardByName</primary></indexterm>XkbGetKeyboardByName <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbGetMap</primary></indexterm>XkbGetMap <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbGetMapChanges</primary></indexterm>XkbGetMapChanges <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XkbGetNamedGeometry</primary></indexterm>XkbGetNamedGeometry <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbGetNamedIndicator</primary></indexterm>XkbGetNamedIndicator <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbGetNames</primary></indexterm>XkbGetNames <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbGetState</primary></indexterm>XkbGetState <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XkbGetUpdatedMap</primary></indexterm>XkbGetUpdatedMap <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbGetVirtualMods</primary></indexterm>XkbGetVirtualMods <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbGetXlibControls</primary></indexterm>XkbGetXlibControls <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbIgnoreExtension</primary></indexterm>XkbIgnoreExtension <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XkbInitCanonicalKeyTypes</primary></indexterm>XkbInitCanonicalKeyTypes <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbKeyTypesForCoreSymbols</primary></indexterm>XkbKeyTypesForCoreSymbols <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbKeycodeToKeysym</primary></indexterm>XkbKeycodeToKeysym <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbKeysymToModifiers</primary></indexterm>XkbKeysymToModifiers <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XkbLatchGroup</primary></indexterm>XkbLatchGroup <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbLatchModifiers</primary></indexterm>XkbLatchModifiers <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbLibraryVersion</primary></indexterm>XkbLibraryVersion <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbListComponents</primary></indexterm>XkbListComponents <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XkbLockGroup</primary></indexterm>XkbLockGroup <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbLockModifiers</primary></indexterm>XkbLockModifiers <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbLookupKeyBinding</primary></indexterm>XkbLookupKeyBinding <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbLookupKeySym</primary></indexterm>XkbLookupKeySym <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XkbNoteControlsChanges</primary></indexterm>XkbNoteControlsChanges <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbNoteMapChanges</primary></indexterm>XkbNoteMapChanges <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbNoteNameChanges</primary></indexterm>XkbNoteNameChanges <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbOpenDisplay</primary></indexterm>XkbOpenDisplay <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XkbQueryExtension</primary></indexterm>XkbQueryExtension <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbRefreshKeyboardMapping</primary></indexterm>XkbRefreshKeyboardMapping <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbResizeKeyActions</primary></indexterm>XkbResizeKeyActions <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbResizeKeySyms</primary></indexterm>XkbResizeKeySyms <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XkbResizeKeyType</primary></indexterm>XkbResizeKeyType <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbSelectEventDetails</primary></indexterm>XkbSelectEventDetails <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbSelectEvents</primary></indexterm>XkbSelectEvents <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbSetAtomFuncs</primary></indexterm>XkbSetAtomFuncs <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XkbSetAutoRepeatRate</primary></indexterm>XkbSetAutoRepeatRate <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbSetAutoResetControls</primary></indexterm>XkbSetAutoResetControls <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbSetCompatMap</primary></indexterm>XkbSetCompatMap <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbSetControls</primary></indexterm>XkbSetControls <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XkbSetDebuggingFlags</primary></indexterm>XkbSetDebuggingFlags <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbSetDetectableAutoRepeat</primary></indexterm>XkbSetDetectableAutoRepeat <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbSetGeometry</primary></indexterm>XkbSetGeometry <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbSetIgnoreLockMods</primary></indexterm>XkbSetIgnoreLockMods <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XkbSetIndicatorMap</primary></indexterm>XkbSetIndicatorMap <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbSetMap</primary></indexterm>XkbSetMap <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbSetNamedIndicator</primary></indexterm>XkbSetNamedIndicator <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbSetNames</primary></indexterm>XkbSetNames <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XkbSetServerInternalMods</primary></indexterm>XkbSetServerInternalMods <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbSetXlibControls</primary></indexterm>XkbSetXlibControls <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbToControl</primary></indexterm>XkbToControl <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbTranslateKeyCode</primary></indexterm>XkbTranslateKeyCode <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XkbTranslateKeySym</primary></indexterm>XkbTranslateKeySym <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbUpdateMapFromCore</primary></indexterm>XkbUpdateMapFromCore <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbUseExtension</primary></indexterm>XkbUseExtension <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbVirtualModsToReal</primary></indexterm>XkbVirtualModsToReal <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XmbDrawImageString</primary></indexterm>XmbDrawImageString <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XmbDrawString</primary></indexterm>XmbDrawString <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XmbDrawText</primary></indexterm>XmbDrawText <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XmbLookupString</primary></indexterm>XmbLookupString <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XmbResetIC</primary></indexterm>XmbResetIC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XmbSetWMProperties</primary></indexterm>XmbSetWMProperties <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XmbTextEscapement</primary></indexterm>XmbTextEscapement <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XmbTextExtents</primary></indexterm>XmbTextExtents <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XmbTextListToTextProperty</primary></indexterm>XmbTextListToTextProperty <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XmbTextPerCharExtents</primary></indexterm>XmbTextPerCharExtents <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XmbTextPropertyToTextList</primary></indexterm>XmbTextPropertyToTextList <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XrmCombineDatabase</primary></indexterm>XrmCombineDatabase <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XrmCombineFileDatabase</primary></indexterm>XrmCombineFileDatabase <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XrmDestroyDatabase</primary></indexterm>XrmDestroyDatabase <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XrmEnumerateDatabase</primary></indexterm>XrmEnumerateDatabase <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XrmGetDatabase</primary></indexterm>XrmGetDatabase <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XrmGetFileDatabase</primary></indexterm>XrmGetFileDatabase <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XrmGetResource</primary></indexterm>XrmGetResource <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XrmGetStringDatabase</primary></indexterm>XrmGetStringDatabase <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XrmInitialize</primary></indexterm>XrmInitialize <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XrmLocaleOfDatabase</primary></indexterm>XrmLocaleOfDatabase <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XrmMergeDatabases</primary></indexterm>XrmMergeDatabases <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XrmParseCommand</primary></indexterm>XrmParseCommand <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XrmPermStringToQuark</primary></indexterm>XrmPermStringToQuark <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XrmPutFileDatabase</primary></indexterm>XrmPutFileDatabase <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XrmPutLineResource</primary></indexterm>XrmPutLineResource <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XrmPutResource</primary></indexterm>XrmPutResource <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XrmPutStringResource</primary></indexterm>XrmPutStringResource <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XrmQGetResource</primary></indexterm>XrmQGetResource <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XrmQGetSearchList</primary></indexterm>XrmQGetSearchList <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XrmQGetSearchResource</primary></indexterm>XrmQGetSearchResource <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XrmQPutResource</primary></indexterm>XrmQPutResource <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XrmQPutStringResource</primary></indexterm>XrmQPutStringResource <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XrmQuarkToString</primary></indexterm>XrmQuarkToString <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XrmSetDatabase</primary></indexterm>XrmSetDatabase <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XrmStringToBindingQuarkList</primary></indexterm>XrmStringToBindingQuarkList <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XrmStringToQuark</primary></indexterm>XrmStringToQuark <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XrmStringToQuarkList</primary></indexterm>XrmStringToQuarkList <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XrmUniqueQuark</primary></indexterm>XrmUniqueQuark <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>Xutf8TextListToTextProperty</primary></indexterm>Xutf8TextListToTextProperty <LINK LINKEND="REFSTD.libX11.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>Xutf8TextPropertyToTextList</primary></indexterm>Xutf8TextPropertyToTextList <LINK LINKEND="REFSTD.libX11.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>XwcDrawImageString</primary></indexterm>XwcDrawImageString <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XwcDrawString</primary></indexterm>XwcDrawString <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XwcDrawText</primary></indexterm>XwcDrawText <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XwcFreeStringList</primary></indexterm>XwcFreeStringList <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XwcLookupString</primary></indexterm>XwcLookupString <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XwcResetIC</primary></indexterm>XwcResetIC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XwcTextEscapement</primary></indexterm>XwcTextEscapement <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XwcTextExtents</primary></indexterm>XwcTextExtents <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XwcTextListToTextProperty</primary></indexterm>XwcTextListToTextProperty <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XwcTextPerCharExtents</primary></indexterm>XwcTextPerCharExtents <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XwcTextPropertyToTextList</primary></indexterm>XwcTextPropertyToTextList <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>
</SECT2>
</SECT1>
<SECT1 ID=libX11-ddefs>
<TITLE>Data Definitions for libX11</TITLE>
<PARA>
This section defines global identifiers and their values that are associated
with interfaces contained in libX11.
These definitions are organized into groups that
correspond to system headers. This convention is used as a
convenience for the reader, and does not imply the existence
of these headers, or their content.
Where an interface is defined as requiring a particular system header file
all of the data definitions for that system header file presented here shall be in effect.
</PARA>
<PARA>
This section gives data definitions to promote binary application
portability, not to repeat source interface definitions available
elsewhere. System providers and application developers should use this ABI
to supplement - not to replace - source interface definition specifications.
</PARA>
<PARA>
This specification uses the <XREF LINKEND='std.ISOC99'> C Language as the reference programming language, and data definitions are specified in ISO C format. The C language is used here as a convenient notation. Using a C language description of these data objects does not preclude their use by other programming languages.</PARA>
<SECT2>
<TITLE>X11/X.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define X_PROTOCOL_REVISION	0
#define X_PROTOCOL	11

typedef unsigned long int XID;
typedef unsigned long int Mask;
typedef unsigned long int Atom;
typedef unsigned long int VisualID;
typedef unsigned long int Time;
typedef XID Window;
typedef XID Font;
typedef XID Pixmap;
typedef unsigned char KeyCode;
typedef XID Drawable;
typedef XID Cursor;
typedef XID Colormap;
typedef XID GContext;
typedef XID KeySym;

#define AllTemporary	0L
#define AnyButton	0L
#define AnyKey	0L
#define AnyPropertyType	0L
#define CopyFromParent	0L
#define CurrentTime	0L
#define NoSymbol	0L
#define None	0L
#define PointerWindow	0L
#define InputFocus	1L
#define ParentRelative	1L
#define PointerRoot	1L

#define KeyPressMask	(1L&lt;&lt;0)
#define KeyReleaseMask	(1L&lt;&lt;1)
#define Button3MotionMask	(1L&lt;&lt;10)
#define Button4MotionMask	(1L&lt;&lt;11)
#define Button5MotionMask	(1L&lt;&lt;12)
#define ButtonMotionMask	(1L&lt;&lt;13)
#define KeymapStateMask	(1L&lt;&lt;14)
#define ExposureMask	(1L&lt;&lt;15)
#define VisibilityChangeMask	(1L&lt;&lt;16)
#define StructureNotifyMask	(1L&lt;&lt;17)
#define ResizeRedirectMask	(1L&lt;&lt;18)
#define SubstructureNotifyMask	(1L&lt;&lt;19)
#define ButtonPressMask	(1L&lt;&lt;2)
#define SubstructureRedirectMask	(1L&lt;&lt;20)
#define FocusChangeMask	(1L&lt;&lt;21)
#define PropertyChangeMask	(1L&lt;&lt;22)
#define ColormapChangeMask	(1L&lt;&lt;23)
#define OwnerGrabButtonMask	(1L&lt;&lt;24)
#define ButtonReleaseMask	(1L&lt;&lt;3)
#define EnterWindowMask	(1L&lt;&lt;4)
#define LeaveWindowMask	(1L&lt;&lt;5)
#define PointerMotionMask	(1L&lt;&lt;6)
#define PointerMotionHintMask	(1L&lt;&lt;7)
#define Button1MotionMask	(1L&lt;&lt;8)
#define Button2MotionMask	(1L&lt;&lt;9)

#define NoEventMask	0L
#define FocusOut	10
#define KeymapNotify	11
#define Expose	12
#define GraphicsExpose	13
#define NoExpose	14
#define VisibilityNotify	15
#define CreateNotify	16
#define DestroyNotify	17
#define UnmapNotify	18
#define MapNotify	19
#define KeyPress	2
#define MapRequest	20
#define ReparentNotify	21
#define ConfigureNotify	22
#define ConfigureRequest	23
#define GravityNotify	24
#define ResizeRequest	25
#define CirculateNotify	26
#define CirculateRequest	27
#define PropertyNotify	28
#define SelectionClear	29
#define KeyRelease	3
#define SelectionRequest	30
#define SelectionNotify	31
#define ColormapNotify	32
#define ClientMessage	33
#define MappingNotify	34
#define LASTEvent	35
#define ButtonPress	4
#define ButtonRelease	5
#define MotionNotify	6
#define EnterNotify	7
#define LeaveNotify	8
#define FocusIn	9

#define ShiftMask	(1&lt;&lt;0)
#define LockMask	(1&lt;&lt;1)
#define ControlMask	(1&lt;&lt;2)
#define Mod1Mask	(1&lt;&lt;3)
#define Mod2Mask	(1&lt;&lt;4)
#define Mod3Mask	(1&lt;&lt;5)
#define Mod4Mask	(1&lt;&lt;6)
#define Mod5Mask	(1&lt;&lt;7)

#define ShiftMapIndex	0
#define LockMapIndex	1
#define ControlMapIndex	2
#define Mod1MapIndex	3
#define Mod2MapIndex	4
#define Mod3MapIndex	5
#define Mod4MapIndex	6
#define Mod5MapIndex	7

#define Button3Mask	(1&lt;&lt;10)
#define Button4Mask	(1&lt;&lt;11)
#define Button5Mask	(1&lt;&lt;12)
#define AnyModifier	(1&lt;&lt;15)
#define Button1Mask	(1&lt;&lt;8)
#define Button2Mask	(1&lt;&lt;9)

#define Button1	1
#define Button2	2
#define Button3	3
#define Button4	4
#define Button5	5

#define NotifyNormal	0
#define NotifyGrab	1
#define NotifyHint	1
#define NotifyUngrab	2
#define NotifyWhileGrabbed	3

#define NotifyAncestor	0
#define NotifyVirtual	1
#define NotifyInferior	2
#define NotifyNonlinear	3
#define NotifyNonlinearVirtual	4
#define NotifyPointer	5
#define NotifyPointerRoot	6
#define NotifyDetailNone	7

#define VisibilityUnobscured	0
#define VisibilityPartiallyObscured	1
#define VisibilityFullyObscured	2

#define PlaceOnTop	0
#define PlaceOnBottom	1

#define FamilyInternet	0
#define FamilyDECnet	1
#define FamilyChaos	2
#define FamilyServerInterpreted	5
#define FamilyInternet6	6	/* IPv6 */

#define PropModeReplace	0
#define PropertyNewValue	0
#define PropertyDelete	1

#define ColormapUninstalled	0
#define ColormapInstalled	1

#define GrabModeSync	0
#define GrabModeAsync	1

#define GrabSuccess	0
#define AlreadyGrabbed	1
#define GrabInvalidTime	2
#define GrabNotViewable	3
#define GrabFrozen	4

#define AsyncPointer	0
#define SyncPointer	1
#define ReplayPointer	2
#define AsyncKeyboard	3
#define SyncKeyboard	4
#define ReplayKeyboard	5
#define AsyncBoth	6
#define SyncBoth	7

#define RevertToNone	(int)None
#define RevertToPointerRoot	(int)PointerRoot
#define RevertToParent	2

#define Success	0
#define BadRequest	1
#define BadAccess	10
#define BadAlloc	11
#define BadColor	12
#define FirstExtensionError	128
#define BadGC	13
#define BadIDChoice	14
#define BadName	15
#define BadLength	16
#define BadImplementation	17
#define BadValue	2
#define LastExtensionError	255
#define BadWindow	3
#define BadPixmap	4
#define BadAtom	5
#define BadCursor	6
#define BadFont	7
#define BadMatch	8
#define BadDrawable	9

#define CWX	(1&lt;&lt;0)
#define InputOutput	1
#define InputOnly	2

#define CWBackPixmap	(1L&lt;&lt;0)
#define CWBackPixel	(1L&lt;&lt;1)
#define CWSaveUnder	(1L&lt;&lt;10)
#define CWEventMask	(1L&lt;&lt;11)
#define CWDontPropagate	(1L&lt;&lt;12)
#define CWColormap	(1L&lt;&lt;13)
#define CWCursor	(1L&lt;&lt;14)
#define CWBorderPixmap	(1L&lt;&lt;2)
#define CWBorderPixel	(1L&lt;&lt;3)
#define CWBitGravity	(1L&lt;&lt;4)
#define CWWinGravity	(1L&lt;&lt;5)
#define CWBackingStore	(1L&lt;&lt;6)
#define CWBackingPlanes	(1L&lt;&lt;7)
#define CWBackingPixel	(1L&lt;&lt;8)
#define CWOverrideRedirect	(1L&lt;&lt;9)

#define CWY	(1&lt;&lt;1)
#define CWWidth	(1&lt;&lt;2)
#define CWHeight	(1&lt;&lt;3)
#define CWBorderWidth	(1&lt;&lt;4)
#define CWSibling	(1&lt;&lt;5)
#define CWStackMode	(1&lt;&lt;6)

#define ForgetGravity	0
#define UnmapGravity	0
#define NorthWestGravity	1
#define StaticGravity	10
#define NorthGravity	2
#define NorthEastGravity	3
#define WestGravity	4
#define CenterGravity	5
#define EastGravity	6
#define SouthWestGravity	7
#define SouthGravity	8
#define SouthEastGravity	9

#define NotUseful	0
#define WhenMapped	1
#define Always	2

#define IsUnmapped	0
#define IsUnviewable	1
#define IsViewable	2

#define SetModeInsert	0
#define SetModeDelete	1

#define DestroyAll	0
#define RetainPermanent	1
#define RetainTemporary	2

#define Above	0
#define Below	1
#define TopIf	2
#define BottomIf	3
#define Opposite	4

#define RaiseLowest	0
#define LowerHighest	1

#define PropModePrepend	1
#define PropModeAppend	2

#define GXclear	0x0
#define GXand	0x1
#define GXandReverse	0x2
#define GXcopy	0x3
#define GXandInverted	0x4
#define GXnoop	0x5
#define GXxor	0x6
#define GXor	0x7
#define GXnor	0x8
#define GXequiv	0x9
#define GXinvert	0xa
#define GXorReverse	0xb
#define GXcopyInverted	0xc
#define GXorInverted	0xd
#define GXnand	0xe
#define GXset	0xf

#define LineSolid	0
#define LineOnOffDash	1
#define LineDoubleDash	2

#define CapNotLast	0
#define CapButt	1
#define CapRound	2
#define CapProjecting	3

#define JoinMiter	0
#define JoinRound	1
#define JoinBevel	2

#define FillSolid	0
#define FillTiled	1
#define FillStippled	2
#define FillOpaqueStippled	3

#define EvenOddRule	0
#define WindingRule	1

#define ClipByChildren	0
#define IncludeInferiors	1

#define Unsorted	0
#define XYBitmap	0
#define YSorted	1
#define YXSorted	2
#define YXBanded	3

#define CoordModeOrigin	0
#define CoordModePrevious	1

#define Complex	0
#define Nonconvex	1
#define Convex	2

#define ArcChord	0
#define ArcPieSlice	1

#define GCFunction	(1L&lt;&lt;0)
#define GCPlaneMask	(1L&lt;&lt;1)
#define GCTile	(1L&lt;&lt;10)
#define GCStipple	(1L&lt;&lt;11)
#define GCTileStipXOrigin	(1L&lt;&lt;12)
#define GCTileStipYOrigin	(1L&lt;&lt;13)
#define GCFont	(1L&lt;&lt;14)
#define GCSubwindowMode	(1L&lt;&lt;15)
#define GCGraphicsExposures	(1L&lt;&lt;16)
#define GCClipXOrigin	(1L&lt;&lt;17)
#define GCClipYOrigin	(1L&lt;&lt;18)
#define GCClipMask	(1L&lt;&lt;19)
#define GCForeground	(1L&lt;&lt;2)
#define GCDashOffset	(1L&lt;&lt;20)
#define GCDashList	(1L&lt;&lt;21)
#define GCArcMode	(1L&lt;&lt;22)
#define GCBackground	(1L&lt;&lt;3)
#define GCLineWidth	(1L&lt;&lt;4)
#define GCLineStyle	(1L&lt;&lt;5)
#define GCCapStyle	(1L&lt;&lt;6)
#define GCJoinStyle	(1L&lt;&lt;7)
#define GCFillStyle	(1L&lt;&lt;8)
#define GCFillRule	(1L&lt;&lt;9)
#define GCLastBit	22
#define FontChange	255

#define FontLeftToRight	0
#define FontRightToLeft	1

#define XYPixmap	1
#define ZPixmap	2

#define AllocNone	0
#define AllocAll	1

#define DoRed	(1&lt;&lt;0)
#define DoGreen	(1&lt;&lt;1)
#define DoBlue	(1&lt;&lt;2)

#define CursorShape	0
#define TileShape	1
#define StippleShape	2

#define AutoRepeatModeOff	0
#define LedModeOff	0
#define AutoRepeatModeOn	1
#define LedModeOn	1
#define AutoRepeatModeDefault	2

#define KBKeyClickPercent	(1L&lt;&lt;0)
#define KBBellPercent	(1L&lt;&lt;1)
#define KBBellPitch	(1L&lt;&lt;2)
#define KBBellDuration	(1L&lt;&lt;3)
#define KBLed	(1L&lt;&lt;4)
#define KBLedMode	(1L&lt;&lt;5)
#define KBKey	(1L&lt;&lt;6)
#define KBAutoRepeatMode	(1L&lt;&lt;7)
#define MappingModifier	0
#define MappingSuccess	0
#define MappingBusy	1
#define MappingKeyboard	1
#define MappingFailed	2
#define MappingPointer	2

#define DisableScreenInterval	0
#define DisableScreenSaver	0
#define DontAllowExposures	0
#define DontPreferBlanking	0
#define AllowExposures	1
#define PreferBlanking	1
#define DefaultBlanking	2
#define DefaultExposures	2

#define ScreenSaverReset	0
#define ScreenSaverActive	1

#define HostInsert	0
#define HostDelete	1

#define DisableAccess	0
#define EnableAccess	1

#define StaticGray	0
#define GrayScale	1
#define StaticColor	2
#define PseudoColor	3
#define TrueColor	4
#define DirectColor	5

#define LSBFirst	0
#define MSBFirst	1
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/XKBlib.h</TITLE>
<PARA>
</PARA>
<SCREEN>

typedef struct _XkbAnyEvent {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Time time;
    int xkb_type;
    unsigned int device;
} XkbAnyEvent;
typedef struct _XkbNewKeyboardNotify {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Time time;
    int xkb_type;
    int device;
    int old_device;
    int min_key_code;
    int max_key_code;
    int old_min_key_code;
    int old_max_key_code;
    unsigned int changed;
    char req_major;
    char req_minor;
} XkbNewKeyboardNotifyEvent;
typedef struct _XkbMapNotifyEvent {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Time time;
    int xkb_type;
    int device;
    unsigned int changed;
    unsigned int flags;
    int first_type;
    int num_types;
    KeyCode min_key_code;
    KeyCode max_key_code;
    KeyCode first_key_sym;
    KeyCode first_key_act;
    KeyCode first_key_behavior;
    KeyCode first_key_explicit;
    KeyCode first_modmap_key;
    KeyCode first_vmodmap_key;
    int num_key_syms;
    int num_key_acts;
    int num_key_behaviors;
    int num_key_explicit;
    int num_modmap_keys;
    int num_vmodmap_keys;
    unsigned int vmods;
} XkbMapNotifyEvent;
typedef struct _XkbStateNotifyEvent {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Time time;
    int xkb_type;
    int device;
    unsigned int changed;
    int group;
    int base_group;
    int latched_group;
    int locked_group;
    unsigned int mods;
    unsigned int base_mods;
    unsigned int latched_mods;
    unsigned int locked_mods;
    int compat_state;
    unsigned char grab_mods;
    unsigned char compat_grab_mods;
    unsigned char lookup_mods;
    unsigned char compat_lookup_mods;
    int ptr_buttons;
    KeyCode keycode;
    char event_type;
    char req_major;
    char req_minor;
} XkbStateNotifyEvent;
typedef struct _XkbControlsNotify {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Time time;
    int xkb_type;
    int device;
    unsigned int changed_ctrls;
    unsigned int enabled_ctrls;
    unsigned int enabled_ctrl_changes;
    int num_groups;
    KeyCode keycode;
    char event_type;
    char req_major;
    char req_minor;
} XkbControlsNotifyEvent;
typedef struct _XkbIndicatorNotify {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Time time;
    int xkb_type;
    int device;
    unsigned int changed;
    unsigned int state;
} XkbIndicatorNotifyEvent;
typedef struct _XkbNamesNotify {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Time time;
    int xkb_type;
    int device;
    unsigned int changed;
    int first_type;
    int num_types;
    int first_lvl;
    int num_lvls;
    int num_aliases;
    int num_radio_groups;
    unsigned int changed_vmods;
    unsigned int changed_groups;
    unsigned int changed_indicators;
    int first_key;
    int num_keys;
} XkbNamesNotifyEvent;
typedef struct _XkbCompatMapNotify {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Time time;
    int xkb_type;
    int device;
    unsigned int changed_groups;
    int first_si;
    int num_si;
    int num_total_si;
} XkbCompatMapNotifyEvent;
typedef struct _XkbBellNotify {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Time time;
    int xkb_type;
    int device;
    int percent;
    int pitch;
    int duration;
    int bell_class;
    int bell_id;
    Atom name;
    Window window;
    int event_only;
} XkbBellNotifyEvent;
typedef struct _XkbActionMessage {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Time time;
    int xkb_type;
    int device;
    KeyCode keycode;
    int press;
    int key_event_follows;
    int group;
    unsigned int mods;
    char message;
} XkbActionMessageEvent;
typedef struct _XkbAccessXNotify {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Time time;
    int xkb_type;
    int device;
    int detail;
    int keycode;
    int sk_delay;
    int debounce_delay;
} XkbAccessXNotifyEvent;
typedef struct _XkbExtensionDeviceNotify {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Time time;
    int xkb_type;
    int device;
    unsigned int reason;
    unsigned int supported;
    unsigned int unsupported;
    int first_btn;
    int num_btns;
    unsigned int leds_defined;
    unsigned int led_state;
    int led_class;
    int led_id;
} XkbExtensionDeviceNotifyEvent;
union _XkbEvent {
    int type;
    XkbAnyEvent any;
    XkbNewKeyboardNotifyEvent new_kbd;
    XkbMapNotifyEvent map;
    XkbStateNotifyEvent state;
    XkbControlsNotifyEvent ctrls;
    XkbIndicatorNotifyEvent indicators;
    XkbNamesNotifyEvent names;
    XkbCompatMapNotifyEvent compat;
    XkbBellNotifyEvent bell;
    XkbActionMessageEvent message;
    XkbAccessXNotifyEvent accessx;
    XkbExtensionDeviceNotifyEvent device;
    XEvent core;
};
typedef union _XkbEvent {
    int type;
    XkbAnyEvent any;
    XkbNewKeyboardNotifyEvent new_kbd;
    XkbMapNotifyEvent map;
    XkbStateNotifyEvent state;
    XkbControlsNotifyEvent ctrls;
    XkbIndicatorNotifyEvent indicators;
    XkbNamesNotifyEvent names;
    XkbCompatMapNotifyEvent compat;
    XkbBellNotifyEvent bell;
    XkbActionMessageEvent message;
    XkbAccessXNotifyEvent accessx;
    XkbExtensionDeviceNotifyEvent device;
    XEvent core;
} XkbEvent;
typedef struct _XkbKbdDpyState XkbKbdDpyStateRec;
typedef struct _XkbKbdDpyState *XkbKbdDpyStatePtr;
typedef Atom(*XkbInternAtomFunc) (Display *, const char *, int);
typedef char *(*XkbGetAtomNameFunc) (Display *, Atom);
extern int XkbAllocClientMap(XkbDescPtr, unsigned int, unsigned int);
extern int XkbAllocCompatMap(XkbDescPtr, unsigned int, unsigned int);
extern int XkbAllocControls(XkbDescPtr, unsigned int);
extern int XkbAllocIndicatorMaps(XkbDescPtr);
extern XkbDescPtrXkbAllocKeyboard(void);
extern int XkbAllocNames(XkbDescPtr, unsigned int, int, int);
extern int XkbAllocServerMap(XkbDescPtr, unsigned int, unsigned int);
extern int XkbApplyCompatMapToKey(XkbDescPtr, KeyCode, XkbChangesPtr);
extern int XkbBell(Display *, Window, int, Atom);
extern int XkbBellEvent(Display *, Window, int, Atom);
extern int XkbChangeEnabledControls(Display *, unsigned int, unsigned int,
				    unsigned int);
extern int XkbChangeMap(Display *, XkbDescPtr, XkbMapChangesPtr);
extern int XkbChangeNames(Display *, XkbDescPtr, XkbNameChangesPtr);
extern int XkbChangeTypesOfKey(XkbDescPtr, int, int, unsigned int, int *,
			       XkbMapChangesPtr);
extern int XkbComputeEffectiveMap(XkbDescPtr, XkbKeyTypePtr,
				  unsigned char *);
extern int XkbCopyKeyType(XkbKeyTypePtr, XkbKeyTypePtr);
extern int XkbCopyKeyTypes(XkbKeyTypePtr, XkbKeyTypePtr, int);
extern int XkbForceBell(Display *, int);
extern void XkbFreeClientMap(XkbDescPtr, unsigned int, int);
extern void XkbFreeCompatMap(XkbDescPtr, unsigned int, int);
extern void XkbFreeComponentList(XkbComponentListPtr);
extern void XkbFreeControls(XkbDescPtr, unsigned int, int);
extern void XkbFreeIndicatorMaps(XkbDescPtr);
extern void XkbFreeKeyboard(XkbDescPtr, unsigned int, int);
extern void XkbFreeNames(XkbDescPtr, unsigned int, int);
extern void XkbFreeServerMap(XkbDescPtr, unsigned int, int);
extern int XkbGetAutoRepeatRate(Display *, unsigned int, unsigned int *,
				unsigned int *);
extern int XkbGetCompatMap(Display *, unsigned int, XkbDescPtr);
extern int XkbGetControls(Display *, unsigned long int, XkbDescPtr);
extern int XkbGetIndicatorMap(Display *, unsigned long int, XkbDescPtr);
extern int XkbGetIndicatorState(Display *, unsigned int, unsigned int *);
extern int XkbGetKeyActions(Display *, unsigned int, unsigned int,
			    XkbDescPtr);
extern int XkbGetKeyBehaviors(Display *, unsigned int, unsigned int,
			      XkbDescPtr);
extern int XkbGetKeyExplicitComponents(Display *, unsigned int,
				       unsigned int, XkbDescPtr);
extern int XkbGetKeyModifierMap(Display *, unsigned int, unsigned int,
				XkbDescPtr);
extern int XkbGetKeySyms(Display *, unsigned int, unsigned int,
			 XkbDescPtr);
extern int XkbGetKeyTypes(Display *, unsigned int, unsigned int,
			  XkbDescPtr);
extern XkbDescPtrXkbGetKeyboard(Display *, unsigned int, unsigned int);
extern XkbDescPtrXkbGetKeyboardByName(Display *, unsigned int,
				      XkbComponentNamesPtr, unsigned int,
				      unsigned int, int);
extern XkbDescPtrXkbGetMap(Display *, unsigned int, unsigned int);
extern int XkbGetMapChanges(Display *, XkbDescPtr, XkbMapChangesPtr);
extern int XkbGetNamedIndicator(Display *, Atom, int *, int *,
				XkbIndicatorMapPtr, int *);
extern int XkbGetNames(Display *, unsigned int, XkbDescPtr);
extern int XkbGetState(Display *, unsigned int, XkbStatePtr);
extern int XkbGetUpdatedMap(Display *, unsigned int, XkbDescPtr);
extern int XkbGetVirtualMods(Display *, unsigned int, XkbDescPtr);
extern unsigned int XkbGetXlibControls(Display *);
extern int XkbIgnoreExtension(int);
extern int XkbInitCanonicalKeyTypes(XkbDescPtr, unsigned int, int);
extern int XkbKeyTypesForCoreSymbols(XkbDescPtr, int, KeySym *,
				     unsigned int, int *, KeySym *);
extern KeySym XkbKeycodeToKeysym(Display *, unsigned int, int, int);
extern unsigned int XkbKeysymToModifiers(Display *, KeySym);
extern int XkbLatchGroup(Display *, unsigned int, unsigned int);
extern int XkbLatchModifiers(Display *, unsigned int, unsigned int,
			     unsigned int);
extern int XkbLibraryVersion(int *, int *);
extern XkbComponentListPtrXkbListComponents(Display *, unsigned int,
					    XkbComponentNamesPtr, int *);
extern int XkbLockGroup(Display *, unsigned int, unsigned int);
extern int XkbLockModifiers(Display *, unsigned int, unsigned int,
			    unsigned int);
extern int XkbLookupKeyBinding(Display *, KeySym, unsigned int, char *,
			       int, int *);
extern int XkbLookupKeySym(Display *, KeyCode, unsigned int,
			   unsigned int *, KeySym *);
extern void XkbNoteControlsChanges(XkbControlsChangesPtr,
				   XkbControlsNotifyEvent *, unsigned int);
extern void XkbNoteMapChanges(XkbMapChangesPtr, XkbMapNotifyEvent *,
			      unsigned int);
extern void XkbNoteNameChanges(XkbNameChangesPtr, XkbNamesNotifyEvent *,
			       unsigned int);
extern Display *XkbOpenDisplay(char *, int *, int *, int *, int *, int *);
extern int XkbQueryExtension(Display *, int *, int *, int *, int *, int *);
extern int XkbRefreshKeyboardMapping(XkbMapNotifyEvent *);
extern XkbAction *XkbResizeKeyActions(XkbDescPtr, int, int);
extern KeySym *XkbResizeKeySyms(XkbDescPtr, int, int);
extern int XkbResizeKeyType(XkbDescPtr, int, int, int, int);
extern int XkbSelectEventDetails(Display *, unsigned int, unsigned int,
				 unsigned long int, unsigned long int);
extern int XkbSelectEvents(Display *, unsigned int, unsigned int,
			   unsigned int);
extern void XkbSetAtomFuncs(XkbInternAtomFunc, XkbGetAtomNameFunc);
extern int XkbSetAutoRepeatRate(Display *, unsigned int, unsigned int,
				unsigned int);
extern int XkbSetAutoResetControls(Display *, unsigned int, unsigned int *,
				   unsigned int *);
extern int XkbSetCompatMap(Display *, unsigned int, XkbDescPtr, int);
extern int XkbSetControls(Display *, unsigned long int, XkbDescPtr);
extern int XkbSetDebuggingFlags(Display *, unsigned int, unsigned int,
				char *, unsigned int, unsigned int,
				unsigned int *, unsigned int *);
extern int XkbSetDetectableAutoRepeat(Display *, int, int *);
extern int XkbSetIgnoreLockMods(Display *, unsigned int, unsigned int,
				unsigned int, unsigned int, unsigned int);
extern int XkbSetIndicatorMap(Display *, unsigned long int, XkbDescPtr);
extern int XkbSetMap(Display *, unsigned int, XkbDescPtr);
extern int XkbSetNamedIndicator(Display *, Atom, int, int, int,
				XkbIndicatorMapPtr);
extern int XkbSetNames(Display *, unsigned int, unsigned int, unsigned int,
		       XkbDescPtr);
extern int XkbSetServerInternalMods(Display *, unsigned int, unsigned int,
				    unsigned int, unsigned int,
				    unsigned int);
extern unsigned int XkbSetXlibControls(Display *, unsigned int,
				       unsigned int);
extern char XkbToControl(char);
extern int XkbTranslateKeyCode(XkbDescPtr, KeyCode, unsigned int,
			       unsigned int *, KeySym *);
extern int XkbTranslateKeySym(Display *, KeySym *, unsigned int, char *,
			      int, int *);
extern int XkbUpdateMapFromCore(XkbDescPtr, KeyCode, int, int, KeySym *,
				XkbChangesPtr);
extern int XkbUseExtension(Display *, int *, int *);
extern int XkbVirtualModsToReal(XkbDescPtr, unsigned int, unsigned int *);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/Xauth.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define FamilyLocalHost	(252)
#define FamilyKrb5Principal	(253)
#define FamilyNetname	(254)
#define FamilyLocal	(256)
#define FamilyWild	(65535)
#define LOCK_SUCCESS	0
#define LOCK_ERROR	1
#define _Xauth_h	1
#define LOCK_TIMEOUT	2

typedef struct xauth {
    unsigned short family;
    unsigned short address_length;
    char *address;
    unsigned short number_length;
    char *number;
    unsigned short name_length;
    char *name;
    unsigned short data_length;
    char *data;
} Xauth;
extern void XauDisposeAuth(Xauth *);
extern char *XauFileName(void);
extern Xauth *XauGetBestAuthByAddr(unsigned int, unsigned int,
				   const char *, unsigned int, char *, int,
				   char **, int *);
extern Xauth *XauReadAuth(FILE *);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/Xcms.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define ClientWhitePointOfCCC(ccc)	(&amp;(ccc)->clientWhitePt)
#define ScreenWhitePointOfCCC(ccc)	(&amp;(ccc)->pPerScrnInfo->screenWhitePt)
#define DisplayOfCCC(ccc)	((ccc)->dpy)
#define FunctionSetOfCCC(ccc)	((ccc)->pPerScrnInfo->functionSet)
#define ScreenNumberOfCCC(ccc)	((ccc)->screenNumber)
#define VisualOfCCC(ccc)	((ccc)->visual)
#define XcmsUndefinedFormat	(XcmsColorFormat)0x00000000
#define XcmsCIEXYZFormat	(XcmsColorFormat)0x00000001
#define XcmsCIEuvYFormat	(XcmsColorFormat)0x00000002
#define XcmsCIExyYFormat	(XcmsColorFormat)0x00000003
#define XcmsCIELabFormat	(XcmsColorFormat)0x00000004
#define XcmsCIELuvFormat	(XcmsColorFormat)0x00000005
#define XcmsTekHVCFormat	(XcmsColorFormat)0x00000006
#define XcmsRGBFormat	(XcmsColorFormat)0x80000000
#define XcmsRGBiFormat	(XcmsColorFormat)0x80000001
#define XcmsFailure	0
#define XcmsInitNone	0x00
#define XcmsInitSuccess	0x01
#define XcmsInitFailure	0xff
#define XcmsSuccess	1
#define XcmsSuccessWithCompression	2

typedef unsigned long int XcmsColorFormat;
typedef double XcmsFloat;
typedef struct {
    unsigned short red;
    unsigned short green;
    unsigned short blue;
} XcmsRGB;
typedef struct {
    XcmsFloat red;
    XcmsFloat green;
    XcmsFloat blue;
} XcmsRGBi;
typedef struct {
    XcmsFloat X;
    XcmsFloat Y;
    XcmsFloat Z;
} XcmsCIEXYZ;
typedef struct {
    XcmsFloat u_prime;
    XcmsFloat v_prime;
    XcmsFloat Y;
} XcmsCIEuvY;
typedef struct {
    XcmsFloat x;
    XcmsFloat y;
    XcmsFloat Y;
} XcmsCIExyY;
typedef struct {
    XcmsFloat L_star;
    XcmsFloat a_star;
    XcmsFloat b_star;
} XcmsCIELab;
typedef struct {
    XcmsFloat L_star;
    XcmsFloat u_star;
    XcmsFloat v_star;
} XcmsCIELuv;
typedef struct {
    XcmsFloat H;
    XcmsFloat V;
    XcmsFloat C;
} XcmsTekHVC;
typedef struct {
    XcmsFloat pad0;
    XcmsFloat pad1;
    XcmsFloat pad2;
    XcmsFloat pad3;
} XcmsPad;
typedef struct {
    union {
	XcmsRGB RGB;
	XcmsRGBi RGBi;
	XcmsCIEXYZ CIEXYZ;
	XcmsCIEuvY CIEuvY;
	XcmsCIExyY CIExyY;
	XcmsCIELab CIELab;
	XcmsCIELuv CIELuv;
	XcmsTekHVC TekHVC;
	XcmsPad Pad;
    } spec;
    unsigned long int pixel;
    XcmsColorFormat format;
} XcmsColor;
typedef struct _XcmsPerScrnInfo {
    XcmsColor screenWhitePt;
    XPointer functionSet;
    XPointer screenData;
    unsigned char state;
    char pad[1];
} XcmsPerScrnInfo;
typedef struct _XcmsCCC {
    Display *dpy;
    int screenNumber;
    Visual *visual;
    XcmsColor clientWhitePt;
    XcmsCompressionProc gamutCompProc;
    XPointer gamutCompClientData;
    XcmsWhiteAdjustProc whitePtAdjProc;
    XPointer whitePtAdjClientData;
    XcmsPerScrnInfo *pPerScrnInfo;
} XcmsCCCRec;
typedef struct _XcmsColorSpace {
    char *prefix;
    XcmsColorFormat id;
    XcmsParseStringProc parseString;
    XcmsFuncListPtr to_CIEXYZ;
    XcmsFuncListPtr from_CIEXYZ;
    int inverse_flag;
} XcmsColorSpace;
typedef struct _XcmsFunctionSet {
    XcmsColorSpace **DDColorSpaces;
    XcmsScreenInitProc screenInitProc;
    XcmsScreenFreeProc screenFreeProc;
} XcmsFunctionSet;
typedef struct _XcmsCCC *XcmsCCC;
typedef int (*XcmsCompressionProc) (XcmsCCC, XcmsColor *, unsigned int,
				    unsigned int, int *);
typedef int (*XcmsWhiteAdjustProc) (XcmsCCC, XcmsColor *, XcmsColor *,
				    XcmsColorFormat, XcmsColor *,
				    unsigned int, int *);
typedef int (*XcmsScreenInitProc) (Display *, int, XcmsPerScrnInfo *);
typedef void (*XcmsScreenFreeProc) (XPointer);
typedef int (*XcmsDIConversionProc) (XcmsCCC, XcmsColor *, XcmsColor *,
				     unsigned int);
typedef XcmsDIConversionProc XcmsConversionProc;
typedef int (*XcmsParseStringProc) (char *, XcmsColor *);
typedef XcmsConversionProc *XcmsFuncListPtr;
typedef int (*XcmsDDConversionProc) (XcmsCCC, XcmsColor *, unsigned int,
				     int *);

extern int XcmsAddColorSpace(XcmsColorSpace *);
extern int XcmsAddFunctionSet(XcmsFunctionSet *);
extern int XcmsAllocColor(Display *, Colormap, XcmsColor *,
			  XcmsColorFormat);
extern int XcmsAllocNamedColor(Display *, Colormap, const char *,
			       XcmsColor *, XcmsColor *, XcmsColorFormat);
extern XcmsCCC XcmsCCCOfColormap(Display *, Colormap);
extern int XcmsCIELabClipL(XcmsCCC, XcmsColor *, unsigned int,
			   unsigned int, int *);
extern int XcmsCIELabClipLab(XcmsCCC, XcmsColor *, unsigned int,
			     unsigned int, int *);
extern int XcmsCIELabClipab(XcmsCCC, XcmsColor *, unsigned int,
			    unsigned int, int *);
extern int XcmsCIELabQueryMaxC(XcmsCCC, XcmsFloat, XcmsFloat, XcmsColor *);
extern int XcmsCIELabQueryMaxL(XcmsCCC, XcmsFloat, XcmsFloat, XcmsColor *);
extern int XcmsCIELabQueryMaxLC(XcmsCCC, XcmsFloat, XcmsColor *);
extern int XcmsCIELabQueryMinL(XcmsCCC, XcmsFloat, XcmsFloat, XcmsColor *);
extern int XcmsCIELabToCIEXYZ(XcmsCCC, XcmsColor *, XcmsColor *,
			      unsigned int);
extern int XcmsCIELabWhiteShiftColors(XcmsCCC, XcmsColor *, XcmsColor *,
				      XcmsColorFormat, XcmsColor *,
				      unsigned int, int *);
extern int XcmsCIELuvClipL(XcmsCCC, XcmsColor *, unsigned int,
			   unsigned int, int *);
extern int XcmsCIELuvClipLuv(XcmsCCC, XcmsColor *, unsigned int,
			     unsigned int, int *);
extern int XcmsCIELuvClipuv(XcmsCCC, XcmsColor *, unsigned int,
			    unsigned int, int *);
extern int XcmsCIELuvQueryMaxC(XcmsCCC, XcmsFloat, XcmsFloat, XcmsColor *);
extern int XcmsCIELuvQueryMaxL(XcmsCCC, XcmsFloat, XcmsFloat, XcmsColor *);
extern int XcmsCIELuvQueryMaxLC(XcmsCCC, XcmsFloat, XcmsColor *);
extern int XcmsCIELuvQueryMinL(XcmsCCC, XcmsFloat, XcmsFloat, XcmsColor *);
extern int XcmsCIELuvToCIEuvY(XcmsCCC, XcmsColor *, XcmsColor *,
			      unsigned int);
extern int XcmsCIELuvWhiteShiftColors(XcmsCCC, XcmsColor *, XcmsColor *,
				      XcmsColorFormat, XcmsColor *,
				      unsigned int, int *);
extern int XcmsCIEXYZToCIELab(XcmsCCC, XcmsColor *, XcmsColor *,
			      unsigned int);
extern int XcmsCIEXYZToCIEuvY(XcmsCCC, XcmsColor *, XcmsColor *,
			      unsigned int);
extern int XcmsCIEXYZToCIExyY(XcmsCCC, XcmsColor *, XcmsColor *,
			      unsigned int);
extern int XcmsCIEXYZToRGBi(XcmsCCC, XcmsColor *, unsigned int, int *);
extern int XcmsCIEuvYToCIELuv(XcmsCCC, XcmsColor *, XcmsColor *,
			      unsigned int);
extern int XcmsCIEuvYToCIEXYZ(XcmsCCC, XcmsColor *, XcmsColor *,
			      unsigned int);
extern int XcmsCIEuvYToTekHVC(XcmsCCC, XcmsColor *, XcmsColor *,
			      unsigned int);
extern int XcmsCIExyYToCIEXYZ(XcmsCCC, XcmsColor *, XcmsColor *,
			      unsigned int);
extern XcmsColor *XcmsClientWhitePointOfCCC(XcmsCCC);
extern int XcmsConvertColors(XcmsCCC, XcmsColor *, unsigned int,
			     XcmsColorFormat, int *);
extern XcmsCCC XcmsCreateCCC(Display *, int, Visual *, XcmsColor *,
			     XcmsCompressionProc, XPointer,
			     XcmsWhiteAdjustProc, XPointer);
extern XcmsCCC XcmsDefaultCCC(Display *, int);
extern Display *XcmsDisplayOfCCC(XcmsCCC);
extern XcmsColorFormat XcmsFormatOfPrefix(char *);
extern void XcmsFreeCCC(XcmsCCC);
extern int XcmsLookupColor(Display *, Colormap, const char *, XcmsColor *,
			   XcmsColor *, XcmsColorFormat);
extern char *XcmsPrefixOfFormat(XcmsColorFormat);
extern int XcmsQueryBlack(XcmsCCC, XcmsColorFormat, XcmsColor *);
extern int XcmsQueryBlue(XcmsCCC, XcmsColorFormat, XcmsColor *);
extern int XcmsQueryColor(Display *, Colormap, XcmsColor *,
			  XcmsColorFormat);
extern int XcmsQueryColors(Display *, Colormap, XcmsColor *, unsigned int,
			   XcmsColorFormat);
extern int XcmsQueryGreen(XcmsCCC, XcmsColorFormat, XcmsColor *);
extern int XcmsQueryRed(XcmsCCC, XcmsColorFormat, XcmsColor *);
extern int XcmsQueryWhite(XcmsCCC, XcmsColorFormat, XcmsColor *);
extern int XcmsRGBToRGBi(XcmsCCC, XcmsColor *, unsigned int, int *);
extern int XcmsRGBiToCIEXYZ(XcmsCCC, XcmsColor *, unsigned int, int *);
extern int XcmsRGBiToRGB(XcmsCCC, XcmsColor *, unsigned int, int *);
extern int XcmsScreenNumberOfCCC(XcmsCCC);
extern XcmsColor *XcmsScreenWhitePointOfCCC(XcmsCCC);
extern XcmsCCC XcmsSetCCCOfColormap(Display *, Colormap, XcmsCCC);
extern XcmsCompressionProc XcmsSetCompressionProc(XcmsCCC,
						  XcmsCompressionProc,
						  XPointer);
extern XcmsWhiteAdjustProc XcmsSetWhiteAdjustProc(XcmsCCC,
						  XcmsWhiteAdjustProc,
						  XPointer);
extern int XcmsSetWhitePoint(XcmsCCC, XcmsColor *);
extern int XcmsStoreColor(Display *, Colormap, XcmsColor *);
extern int XcmsStoreColors(Display *, Colormap, XcmsColor *, unsigned int,
			   int *);
extern int XcmsTekHVCClipC(XcmsCCC, XcmsColor *, unsigned int,
			   unsigned int, int *);
extern int XcmsTekHVCClipV(XcmsCCC, XcmsColor *, unsigned int,
			   unsigned int, int *);
extern int XcmsTekHVCClipVC(XcmsCCC, XcmsColor *, unsigned int,
			    unsigned int, int *);
extern int XcmsTekHVCQueryMaxC(XcmsCCC, XcmsFloat, XcmsFloat, XcmsColor *);
extern int XcmsTekHVCQueryMaxV(XcmsCCC, XcmsFloat, XcmsFloat, XcmsColor *);
extern int XcmsTekHVCQueryMaxVC(XcmsCCC, XcmsFloat, XcmsColor *);
extern int XcmsTekHVCQueryMaxVSamples(XcmsCCC, XcmsFloat, XcmsColor *,
				      unsigned int);
extern int XcmsTekHVCQueryMinV(XcmsCCC, XcmsFloat, XcmsFloat, XcmsColor *);
extern int XcmsTekHVCToCIEuvY(XcmsCCC, XcmsColor *, XcmsColor *,
			      unsigned int);
extern int XcmsTekHVCWhiteShiftColors(XcmsCCC, XcmsColor *, XcmsColor *,
				      XcmsColorFormat, XcmsColor *,
				      unsigned int, int *);
extern Visual *XcmsVisualOfCCC(XcmsCCC);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/Xfuncproto.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define NARROWPROTO
#define NeedWidePrototypes	0
#define NeedFunctionPrototypes	1
#define NeedNestedPrototypes	1
#define NeedVarargsPrototypes	1
#define FUNCPROTO	15
#define _Xconst	const
#ifdef __cplusplus
#define _XFUNCPROTOBEGIN extern "C" {
#else
#define _XFUNCPROTOBEGIN
#endif
#define _X_INLINE	inline
#define _X_SENTINEL(x)	__attribute__ ((__sentinel__(x)))
#define _X_DEPRECATED	__attribute__((deprecated))
#define _X_EXPORT	__attribute__((visibility("default")))
#define _X_HIDDEN	__attribute__((visibility("hidden")))
#define _X_INTERNAL	__attribute__((visibility("internal")))
#define _X_ATTRIBUTE_PRINTF(x,y)	__attribute__((__format__(__printf__,x,y)))
#define _X_UNLIKELY(x)	__builtin_expect(!!(x), 0)
#define _X_LIKELY(x)	__builtin_expect(!!(x), 1)
#ifdef __cplusplus
#define _XFUNCPROTOEND }
#else
#define _XFUNCPROTOEND
#endif
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/Xlib.h</TITLE>
<PARA>
</PARA>
<SCREEN>

typedef char *XPointer;
typedef struct {
    unsigned long int pixel;
    unsigned short red;
    unsigned short green;
    unsigned short blue;
    char flags;
    char pad;
} XColor;
typedef struct _XDisplay Display;
typedef struct {
    int type;
    Display *display;
    XID resourceid;
    unsigned long int serial;
    unsigned char error_code;
    unsigned char request_code;
    unsigned char minor_code;
} XErrorEvent;
typedef struct _XIM *XIM;
typedef struct _XIC *XIC;
typedef void *XVaNestedList;
typedef unsigned long int XIMFeedback;
typedef struct _XIMText {
    unsigned short length;
    XIMFeedback *feedback;
    int encoding_is_wchar;
    union {
	char *multi_byte;
	wchar_t *wide_char;
    } string;
} XIMText;
typedef unsigned long int XIMPreeditState;
typedef struct _XIMPreeditStateNotifyCallbackStruct {
    XIMPreeditState state;
} XIMPreeditStateNotifyCallbackStruct;
typedef unsigned long int XIMResetState;
typedef unsigned long int XIMStringConversionFeedback;
typedef struct _XIMStringConversionText {
    unsigned short length;
    XIMStringConversionFeedback *feedback;
    int encoding_is_wchar;
    union {
	char *mbs;
	wchar_t *wcs;
    } string;
} XIMStringConversionText;
typedef unsigned short XIMStringConversionPosition;
typedef unsigned short XIMStringConversionType;
typedef unsigned short XIMStringConversionOperation;
typedef struct _XIMStringConversionCallbackStruct {
    XIMStringConversionPosition position;
    XIMCaretDirection direction;
    XIMStringConversionOperation operation;
    unsigned short factor;
    XIMStringConversionText *text;
} XIMStringConversionCallbackStruct;
typedef struct _XIMPreeditDrawCallbackStruct {
    int caret;
    int chg_first;
    int chg_length;
    XIMText *text;
} XIMPreeditDrawCallbackStruct;
typedef struct _XIMPreeditCaretCallbackStruct {
    int position;
    XIMCaretDirection direction;
    XIMCaretStyle style;
} XIMPreeditCaretCallbackStruct;
typedef struct _XIMStatusDrawCallbackStruct {
    XIMStatusDataType type;
    union {
	XIMText *text;
	Pixmap bitmap;
    } data;
} XIMStatusDrawCallbackStruct;
typedef struct _XIMHotKeyTrigger {
    KeySym keysym;
    int modifier;
    int modifier_mask;
} XIMHotKeyTrigger;
typedef struct _XIMHotKeyTriggers {
    int num_hot_key;
    XIMHotKeyTrigger *key;
} XIMHotKeyTriggers;
typedef unsigned long int XIMHotKeyState;
typedef struct {
    unsigned short count_values;
    char **supported_values;
} XIMValuesList;
typedef void (*XIMProc) (XIM, XPointer, XPointer);
typedef int (*XICProc) (XIC, XPointer, XPointer);
typedef enum {
    XIMForwardChar = 0,
    XIMBackwardChar = 1,
    XIMForwardWord = 2,
    XIMBackwardWord = 3,
    XIMCaretUp = 4,
    XIMCaretDown = 5,
    XIMNextLine = 6,
    XIMPreviousLine = 7,
    XIMLineStart = 8,
    XIMLineEnd = 9,
    XIMAbsolutePosition = 10,
    XIMDontChange = 11
} XIMCaretDirection;
typedef enum {
    XIMIsInvisible = 0,
    XIMIsPrimary = 1,
    XIMIsSecondary = 2
} XIMCaretStyle;
typedef enum {
    XIMTextType = 0,
    XIMBitmapType = 1
} XIMStatusDataType;
typedef int (*XErrorHandler) (Display *, XErrorEvent *);
typedef int (*XIOErrorHandler) (Display *);
typedef void (*XConnectionWatchProc) (Display *, XPointer, int, int,
				      XPointer *);

#define XNArea	"area"
#define XNAreaNeeded	"areaNeeded"
#define XNBackground	"background"
#define XNBackgroundPixmap	"backgroundPixmap"
#define XNBaseFontName	"baseFontName"
#define XNClientWindow	"clientWindow"
#define XNColormap	"colorMap"
#define XNContextualDrawing	"contextualDrawing"
#define XNCursor	"cursor"
#define XNDefaultString	"defaultString"
#define XNDestroyCallback	"destroyCallback"
#define XNDirectionalDependentDrawing	"directionalDependentDrawing"
#define XNFilterEvents	"filterEvents"
#define XNFocusWindow	"focusWindow"
#define XNFontInfo	"fontInfo"
#define XNFontSet	"fontSet"
#define XNForeground	"foreground"
#define XNGeometryCallback	"geometryCallback"
#define XNHotKey	"hotKey"
#define XNHotKeyState	"hotKeyState"
#define XNInputStyle	"inputStyle"
#define XNLineSpace	"lineSpace"
#define XNMissingCharSet	"missingCharSet"
#define XNOMAutomatic	"omAutomatic"
#define XNOrientation	"orientation"
#define XNPreeditAttributes	"preeditAttributes"
#define XNPreeditCaretCallback	"preeditCaretCallback"
#define XNPreeditDoneCallback	"preeditDoneCallback"
#define XNPreeditDrawCallback	"preeditDrawCallback"
#define XNPreeditStartCallback	"preeditStartCallback"
#define XNPreeditState	"preeditState"
#define XNPreeditStateNotifyCallback	"preeditStateNotifyCallback"
#define XNQueryICValuesList	"queryICValuesList"
#define XNQueryIMValuesList	"queryIMValuesList"
#define XNQueryInputStyle	"queryInputStyle"
#define XNQueryOrientation	"queryOrientation"
#define XNR6PreeditCallback	"r6PreeditCallback"
#define XNRequiredCharSet	"requiredCharSet"
#define XNResetState	"resetState"
#define XNResourceClass	"resourceClass"
#define XNResourceName	"resourceName"
#define XNSeparatorofNestedList	"separatorofNestedList"
#define XNSpotLocation	"spotLocation"
#define XNStatusAttributes	"statusAttributes"
#define XNStatusDoneCallback	"statusDoneCallback"
#define XNStatusDrawCallback	"statusDrawCallback"
#define XNStatusStartCallback	"statusStartCallback"
#define XNStdColormap	"stdColorMap"
#define XNStringConversion	"stringConversion"
#define XNStringConversionCallback	"stringConversionCallback"
#define XNVisiblePosition	"visiblePosition"
#define XNVaNestedList	"XNVaNestedList"
#define ScreenOfDisplay(dpy,scr)	(&amp;((_XPrivDisplay)dpy)->screens[scr])
#define BitmapBitOrder(dpy)	(((_XPrivDisplay)dpy)->bitmap_bit_order)
#define BitmapPad(dpy)	(((_XPrivDisplay)dpy)->bitmap_pad)
#define BitmapUnit(dpy)	(((_XPrivDisplay)dpy)->bitmap_unit)
#define ImageByteOrder(dpy)	(((_XPrivDisplay)dpy)->byte_order)
#define DefaultScreen(dpy)	(((_XPrivDisplay)dpy)->default_screen)
#define DisplayString(dpy)	(((_XPrivDisplay)dpy)->display_name)
#define ConnectionNumber(dpy)	(((_XPrivDisplay)dpy)->fd)
#define LastKnownRequestProcessed(dpy)	(((_XPrivDisplay)dpy)->last_request_read)
#define ScreenCount(dpy)	(((_XPrivDisplay)dpy)->nscreens)
#define ProtocolVersion(dpy)	(((_XPrivDisplay)dpy)->proto_major_version)
#define ProtocolRevision(dpy)	(((_XPrivDisplay)dpy)->proto_minor_version)
#define QLength(dpy)	(((_XPrivDisplay)dpy)->qlen)
#define VendorRelease(dpy)	(((_XPrivDisplay)dpy)->release)
#define NextRequest(dpy)	(((_XPrivDisplay)dpy)->request+1)
#define ServerVendor(dpy)	(((_XPrivDisplay)dpy)->vendor)
#define XAllocID(dpy)	((*((_XPrivDisplay)dpy)->resource_alloc)((dpy)))
#define DoesBackingStore(s)	((s)->backing_store)
#define BlackPixelOfScreen(s)	((s)->black_pixel)
#define DefaultColormapOfScreen(s)	((s)->cmap)
#define DefaultGCOfScreen(s)	((s)->default_gc)
#define DisplayOfScreen(s)	((s)->display)
#define HeightOfScreen(s)	((s)->height)
#define MaxCmapsOfScreen(s)	((s)->max_maps)
#define HeightMMOfScreen(s)	((s)->mheight)
#define MinCmapsOfScreen(s)	((s)->min_maps)
#define WidthMMOfScreen(s)	((s)->mwidth)
#define RootWindowOfScreen(s)	((s)->root)
#define DefaultDepthOfScreen(s)	((s)->root_depth)
#define PlanesOfScreen(s)	((s)->root_depth)
#define EventMaskOfScreen(s)	((s)->root_input_mask)
#define DefaultVisualOfScreen(s)	((s)->root_visual)
#define DoesSaveUnders(s)	((s)->save_unders)
#define WhitePixelOfScreen(s)	((s)->white_pixel)
#define WidthOfScreen(s)	((s)->width)
#define AllPlanes	((unsigned long)~0L)
#define XIMStringConversionLeftEdge	(0x00000001)
#define XIMStringConversionRightEdge	(0x00000002)
#define XIMStringConversionTopEdge	(0x00000004)
#define XIMStringConversionBottomEdge	(0x00000008)
#define XIMStringConversionConcealed	(0x00000010)
#define XIMStringConversionWrapped	(0x00000020)
#define XIMStringConversionBuffer	(0x0001)
#define XIMStringConversionSubstitution	(0x0001)
#define XIMHotKeyStateON	(0x0001L)
#define XIMStringConversionLine	(0x0002)
#define XIMStringConversionRetrieval	(0x0002)
#define XIMHotKeyStateOFF	(0x0002L)
#define XIMStringConversionWord	(0x0003)
#define XIMStringConversionChar	(0x0004)
#define XIMPreeditDisable	(1L&lt;&lt;1)
#define XIMPreserveState	(1L&lt;&lt;1)
#define XIMUnderline	(1L&lt;&lt;1)
#define XIMVisibleToCenter	(1L&lt;&lt;10)
#define XIMHighlight	(1L&lt;&lt;2)
#define XIMPrimary	(1L&lt;&lt;5)
#define XIMSecondary	(1L&lt;&lt;6)
#define XIMTertiary	(1L&lt;&lt;7)
#define XIMVisibleToForward	(1L&lt;&lt;8)
#define XIMVisibleToBackword	(1L&lt;&lt;9)
#define DisplayCells(dpy,scr)	(DefaultVisual(dpy,scr)->map_entries)
#define CellsOfScreen(s)	(DefaultVisualOfScreen((s))->map_entries)
#define DefaultRootWindow(dpy)	(ScreenOfDisplay(dpy,DefaultScreen(dpy))->root)
#define BlackPixel(dpy,scr)	(ScreenOfDisplay(dpy,scr)->black_pixel)
#define DefaultColormap(dpy,scr)	(ScreenOfDisplay(dpy,scr)->cmap)
#define DefaultGC(dpy,scr)	(ScreenOfDisplay(dpy,scr)->default_gc)
#define DisplayHeight(dpy,scr)	(ScreenOfDisplay(dpy,scr)->height)
#define DisplayHeightMM(dpy,scr)	(ScreenOfDisplay(dpy,scr)->mheight)
#define DisplayWidthMM(dpy,scr)	(ScreenOfDisplay(dpy,scr)->mwidth)
#define RootWindow(dpy, scr)	(ScreenOfDisplay(dpy,scr)->root)
#define DefaultDepth(dpy,scr)	(ScreenOfDisplay(dpy,scr)->root_depth)
#define DisplayPlanes(dpy,scr)	(ScreenOfDisplay(dpy,scr)->root_depth)
#define DefaultVisual(dpy,scr)	(ScreenOfDisplay(dpy,scr)->root_visual)
#define WhitePixel(dpy,scr)	(ScreenOfDisplay(dpy,scr)->white_pixel)
#define DisplayWidth(dpy,scr)	(ScreenOfDisplay(dpy,scr)->width)
#define XBufferOverflow	-1
#define False	0
#define QueuedAlready	0
#define XIMPreeditUnKnown	0L
#define XIMPreeditArea	0x0001L
#define XIMPreeditCallbacks	0x0002L
#define XIMPreeditPosition	0x0004L
#define XIMPreeditNothing	0x0008L
#define XIMPreeditNone	0x0010L
#define XIMStatusArea	0x0100L
#define XIMStatusCallbacks	0x0200L
#define XIMStatusNothing	0x0400L
#define XIMStatusNone	0x0800L
#define QueuedAfterReading	1
#define True	1
#define XLookupNone	1
#define X_HAVE_UTF8_STRING	1
#define XIMInitialState	1L
#define XIMPreeditEnable	1L
#define XIMReverse	1L
#define QueuedAfterFlush	2
#define XLookupChars	2
#define XLookupKeySym	3
#define XLookupBoth	4
#define XlibSpecificationRelease	6
#define Bool	int
#define Status	int
#define DefaultScreenOfDisplay(dpy)	ScreenOfDisplay(dpy,DefaultScreen(dpy))

typedef struct _XExtData {
    int number;
    struct _XExtData *next;
    int (*free_private) (struct _XExtData * extension);
    XPointer private_data;
} XExtData;
typedef struct {
    int extension;
    int major_opcode;
    int first_event;
    int first_error;
} XExtCodes;

typedef struct {
    int depth;
    int bits_per_pixel;
    int scanline_pad;
} XPixmapFormatValues;

typedef struct {
    int function;
    unsigned long int plane_mask;
    unsigned long int foreground;
    unsigned long int background;
    int line_width;
    int line_style;
    int cap_style;
    int join_style;
    int fill_style;
    int fill_rule;
    int arc_mode;
    Pixmap tile;
    Pixmap stipple;
    int ts_x_origin;
    int ts_y_origin;
    Font font;
    int subwindow_mode;
    int graphics_exposures;
    int clip_x_origin;
    int clip_y_origin;
    Pixmap clip_mask;
    int dash_offset;
    char dashes;
} XGCValues;

struct _XGC;
typedef struct _XGC *GC;

typedef struct {
    XExtData *ext_data;
    VisualID visualid;
    int c_class;
    unsigned long int red_mask;
    unsigned long int green_mask;
    unsigned long int blue_mask;
    int bits_per_rgb;
    int map_entries;
} Visual;

typedef struct {
    int depth;
    int nvisuals;
    Visual *visuals;
} Depth;

typedef struct {
    XExtData *ext_data;
    struct _XDisplay *display;
    Window root;
    int width;
    int height;
    int mwidth;
    int mheight;
    int ndepths;
    Depth *depths;
    int root_depth;
    Visual *root_visual;
    GC default_gc;
    Colormap cmap;
    unsigned long int white_pixel;
    unsigned long int black_pixel;
    int max_maps;
    int min_maps;
    int backing_store;
    int save_unders;
    long int root_input_mask;
} Screen;

typedef struct {
    XExtData *ext_data;
    int depth;
    int bits_per_pixel;
    int scanline_pad;
} ScreenFormat;

typedef struct {
    Pixmap background_pixmap;
    unsigned long int background_pixel;
    Pixmap border_pixmap;
    unsigned long int border_pixel;
    int bit_gravity;
    int win_gravity;
    int backing_store;
    unsigned long int backing_planes;
    unsigned long int backing_pixel;
    int save_under;
    long int event_mask;
    long int do_not_propagate_mask;
    int override_redirect;
    Colormap colormap;
    Cursor cursor;
} XSetWindowAttributes;
typedef struct {
    int x;
    int y;
    int width;
    int height;
    int border_width;
    int depth;
    Visual *visual;
    Window root;
    int c_class;
    int bit_gravity;
    int win_gravity;
    int backing_store;
    unsigned long int backing_planes;
    unsigned long int backing_pixel;
    int save_under;
    Colormap colormap;
    int map_installed;
    int map_state;
    long int all_event_masks;
    long int your_event_mask;
    long int do_not_propagate_mask;
    int override_redirect;
    Screen *screen;
} XWindowAttributes;

typedef struct {
    int family;
    int length;
    char *address;
} XHostAddress;

struct funcs {
    struct _XImage *(*create_image) (void);
    int (*destroy_image) (void);
    unsigned long int (*get_pixel) (void);
    int (*put_pixel) (void);
    struct _XImage *(*sub_image) (void);
    int (*add_pixel) (void);
};
typedef struct _XImage {
    int width;
    int height;
    int xoffset;
    int format;
    char *data;
    int byte_order;
    int bitmap_unit;
    int bitmap_bit_order;
    int bitmap_pad;
    int depth;
    int bytes_per_line;
    int bits_per_pixel;
    unsigned long int red_mask;
    unsigned long int green_mask;
    unsigned long int blue_mask;
    XPointer obdata;
    struct funcs f;
} XImage;

typedef struct {
    int x;
    int y;
    int width;
    int height;
    int border_width;
    Window sibling;
    int stack_mode;
} XWindowChanges;

typedef struct {
    short x1;
    short y1;
    short x2;
    short y2;
} XSegment;
typedef struct {
    short x;
    short y;
} XPoint;
typedef struct {
    short x;
    short y;
    unsigned short width;
    unsigned short height;
} XRectangle;
typedef struct {
    short x;
    short y;
    unsigned short width;
    unsigned short height;
    short angle1;
    short angle2;
} XArc;

typedef struct {
    int key_click_percent;
    int bell_percent;
    int bell_pitch;
    int bell_duration;
    int led;
    int led_mode;
    int key;
    int auto_repeat_mode;
} XKeyboardControl;

typedef struct {
    int key_click_percent;
    int bell_percent;
    unsigned int bell_pitch;
    unsigned int bell_duration;
    unsigned long int led_mask;
    int global_auto_repeat;
    char auto_repeats[32];
} XKeyboardState;

typedef struct {
    Time time;
    short x;
    short y;
} XTimeCoord;

typedef struct {
    int max_keypermod;
    KeyCode *modifiermap;
} XModifierKeymap;

typedef struct {
    XExtData *ext_data;
    struct _XPrivate *private1;
    int fd;
    int private2;
    int proto_major_version;
    int proto_minor_version;
    char *vendor;
    XID private3;
    XID private4;
    XID private5;
    int private6;
     XID(*resource_alloc) (struct _XDisplay *);
    int byte_order;
    int bitmap_unit;
    int bitmap_pad;
    int bitmap_bit_order;
    int nformats;
    ScreenFormat *pixmap_format;
    int private8;
    int release;
    struct _XPrivate *private9;
    struct _XPrivate *private10;
    int qlen;
    unsigned long int last_request_read;
    unsigned long int request;
    XPointer private11;
    XPointer private12;
    XPointer private13;
    XPointer private14;
    unsigned int max_request_size;
    struct _XrmHashBucketRec *db;
    int (*private15) (struct _XDisplay *);
    char *display_name;
    int default_screen;
    int nscreens;
    Screen *screens;
    unsigned long int motion_buffer;
    unsigned long int private16;
    int min_keycode;
    int max_keycode;
    XPointer private17;
    XPointer private18;
    int private19;
    char *xdefaults;
} *_XPrivDisplay;

typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Window window;
    Window root;
    Window subwindow;
    Time time;
    int x;
    int y;
    int x_root;
    int y_root;
    unsigned int state;
    unsigned int keycode;
    int same_screen;
} XKeyEvent;
typedef XKeyEvent XKeyPressedEvent;
typedef XKeyEvent XKeyReleasedEvent;
typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Window window;
    Window root;
    Window subwindow;
    Time time;
    int x;
    int y;
    int x_root;
    int y_root;
    unsigned int state;
    unsigned int button;
    int same_screen;
} XButtonEvent;
typedef XButtonEvent XButtonPressedEvent;
typedef XButtonEvent XButtonReleasedEvent;
typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Window window;
    Window root;
    Window subwindow;
    Time time;
    int x;
    int y;
    int x_root;
    int y_root;
    unsigned int state;
    char is_hint;
    int same_screen;
} XMotionEvent;
typedef XMotionEvent XPointerMovedEvent;
typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Window window;
    Window root;
    Window subwindow;
    Time time;
    int x;
    int y;
    int x_root;
    int y_root;
    int mode;
    int detail;
    int same_screen;
    int focus;
    unsigned int state;
} XCrossingEvent;
typedef XCrossingEvent XEnterWindowEvent;
typedef XCrossingEvent XLeaveWindowEvent;
typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Window window;
    int mode;
    int detail;
} XFocusChangeEvent;
typedef XFocusChangeEvent XFocusInEvent;
typedef XFocusChangeEvent XFocusOutEvent;
typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Window window;
    char key_vector[32];
} XKeymapEvent;
typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Window window;
    int x;
    int y;
    int width;
    int height;
    int count;
} XExposeEvent;
typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Drawable drawable;
    int x;
    int y;
    int width;
    int height;
    int count;
    int major_code;
    int minor_code;
} XGraphicsExposeEvent;
typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Drawable drawable;
    int major_code;
    int minor_code;
} XNoExposeEvent;
typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Window window;
    int state;
} XVisibilityEvent;
typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Window parent;
    Window window;
    int x;
    int y;
    int width;
    int height;
    int border_width;
    int override_redirect;
} XCreateWindowEvent;
typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Window event;
    Window window;
} XDestroyWindowEvent;
typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Window event;
    Window window;
    int from_configure;
} XUnmapEvent;
typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Window event;
    Window window;
    int override_redirect;
} XMapEvent;
typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Window parent;
    Window window;
} XMapRequestEvent;
typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Window event;
    Window window;
    Window parent;
    int x;
    int y;
    int override_redirect;
} XReparentEvent;
typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Window event;
    Window window;
    int x;
    int y;
    int width;
    int height;
    int border_width;
    Window above;
    int override_redirect;
} XConfigureEvent;
typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Window event;
    Window window;
    int x;
    int y;
} XGravityEvent;
typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Window window;
    int width;
    int height;
} XResizeRequestEvent;
typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Window parent;
    Window window;
    int x;
    int y;
    int width;
    int height;
    int border_width;
    Window above;
    int detail;
    unsigned long int value_mask;
} XConfigureRequestEvent;
typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Window event;
    Window window;
    int place;
} XCirculateEvent;
typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Window parent;
    Window window;
    int place;
} XCirculateRequestEvent;
typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Window window;
    Atom atom;
    Time time;
    int state;
} XPropertyEvent;
typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Window window;
    Atom selection;
    Time time;
} XSelectionClearEvent;
typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Window owner;
    Window requestor;
    Atom selection;
    Atom target;
    Atom property;
    Time time;
} XSelectionRequestEvent;
typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Window requestor;
    Atom selection;
    Atom target;
    Atom property;
    Time time;
} XSelectionEvent;
typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Window window;
    Colormap colormap;
    int c_new;
    int state;
} XColormapEvent;
typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Window window;
    Atom message_type;
    int format;
    union {
	char b[20];
	short s[10];
	long int l[5];
    } data;
} XClientMessageEvent;
typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Window window;
    int request;
    int first_keycode;
    int count;
} XMappingEvent;
typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Window window;
} XAnyEvent;

union _XEvent {
    int type;
    XAnyEvent xany;
    XKeyEvent xkey;
    XButtonEvent xbutton;
    XMotionEvent xmotion;
    XCrossingEvent xcrossing;
    XFocusChangeEvent xfocus;
    XExposeEvent xexpose;
    XGraphicsExposeEvent xgraphicsexpose;
    XNoExposeEvent xnoexpose;
    XVisibilityEvent xvisibility;
    XCreateWindowEvent xcreatewindow;
    XDestroyWindowEvent xdestroywindow;
    XUnmapEvent xunmap;
    XMapEvent xmap;
    XMapRequestEvent xmaprequest;
    XReparentEvent xreparent;
    XConfigureEvent xconfigure;
    XGravityEvent xgravity;
    XResizeRequestEvent xresizerequest;
    XConfigureRequestEvent xconfigurerequest;
    XCirculateEvent xcirculate;
    XCirculateRequestEvent xcirculaterequest;
    XPropertyEvent xproperty;
    XSelectionClearEvent xselectionclear;
    XSelectionRequestEvent xselectionrequest;
    XSelectionEvent xselection;
    XColormapEvent xcolormap;
    XClientMessageEvent xclient;
    XMappingEvent xmapping;
    XErrorEvent xerror;
    XKeymapEvent xkeymap;
    long int pad[1];
};
typedef union _XEvent {
    int type;
    XAnyEvent xany;
    XKeyEvent xkey;
    XButtonEvent xbutton;
    XMotionEvent xmotion;
    XCrossingEvent xcrossing;
    XFocusChangeEvent xfocus;
    XExposeEvent xexpose;
    XGraphicsExposeEvent xgraphicsexpose;
    XNoExposeEvent xnoexpose;
    XVisibilityEvent xvisibility;
    XCreateWindowEvent xcreatewindow;
    XDestroyWindowEvent xdestroywindow;
    XUnmapEvent xunmap;
    XMapEvent xmap;
    XMapRequestEvent xmaprequest;
    XReparentEvent xreparent;
    XConfigureEvent xconfigure;
    XGravityEvent xgravity;
    XResizeRequestEvent xresizerequest;
    XConfigureRequestEvent xconfigurerequest;
    XCirculateEvent xcirculate;
    XCirculateRequestEvent xcirculaterequest;
    XPropertyEvent xproperty;
    XSelectionClearEvent xselectionclear;
    XSelectionRequestEvent xselectionrequest;
    XSelectionEvent xselection;
    XColormapEvent xcolormap;
    XClientMessageEvent xclient;
    XMappingEvent xmapping;
    XErrorEvent xerror;
    XKeymapEvent xkeymap;
    long int pad[1];
} XEvent;

typedef struct {
    short lbearing;
    short rbearing;
    short width;
    short ascent;
    short descent;
    unsigned short attributes;
} XCharStruct;

typedef struct {
    Atom name;
    unsigned long int card32;
} XFontProp;
typedef struct {
    XExtData *ext_data;
    Font fid;
    unsigned int direction;
    unsigned int min_char_or_byte2;
    unsigned int max_char_or_byte2;
    unsigned int min_byte1;
    unsigned int max_byte1;
    int all_chars_exist;
    unsigned int default_char;
    int n_properties;
    XFontProp *properties;
    XCharStruct min_bounds;
    XCharStruct max_bounds;
    XCharStruct *per_char;
    int ascent;
    int descent;
} XFontStruct;
typedef struct {
    XRectangle max_ink_extent;
    XRectangle max_logical_extent;
} XFontSetExtents;

typedef struct {
    char *chars;
    int nchars;
    int delta;
    Font font;
} XTextItem;
typedef struct {
    unsigned char byte1;
    unsigned char byte2;
} XChar2b;
typedef struct {
    XChar2b *chars;
    int nchars;
    int delta;
    Font font;
} XTextItem16;

typedef union {
    Display *display;
    GC gc;
    Visual *visual;
    Screen *screen;
    ScreenFormat *pixmap_format;
    XFontStruct *font;
} XEDataObject;

typedef struct _XOM *XOM;
typedef struct _XOC *XOC;
typedef struct _XOC *XFontSet;

typedef struct {
    char *chars;
    int nchars;
    int delta;
    XFontSet font_set;
} XmbTextItem;
typedef struct {
    wchar_t *chars;
    int nchars;
    int delta;
    XFontSet font_set;
} XwcTextItem;

typedef struct {
    int charset_count;
    char **charset_list;
} XOMCharSetList;
typedef enum XOrientation;
typedef struct {
    int num_font;
    XFontStruct **font_struct_list;
    char **font_name_list;
} XOMFontInfo;
typedef struct {
    int num_orientation;
    XOrientation *orientation;
} XOMOrientation;

typedef unsigned long int XIMStyle;
typedef struct {
    unsigned short count_styles;
    XIMStyle *supported_styles;
} XIMStyles;
typedef struct {
    XPointer client_data;
    XIMProc callback;
} XIMCallback;
typedef struct {
    XPointer client_data;
    XICProc callback;
} XICCallback;
typedef void (*XIDProc) (Display *, XPointer, XPointer);
extern int XActivateScreenSaver(Display *);
extern int XAddConnectionWatch(Display *, XConnectionWatchProc, XPointer);
extern XExtCodes *XAddExtension(Display *);
extern int XAddHost(Display *, XHostAddress *);
extern int XAddHosts(Display *, XHostAddress *, int);
extern int XAddToExtensionList(struct _XExtData **, XExtData *);
extern int XAddToSaveSet(Display *, Window);
extern unsigned long int XAllPlanes(void);
extern int XAllocColor(Display *, Colormap, XColor *);
extern int XAllocColorCells(Display *, Colormap, int, unsigned long int *,
			    unsigned int, unsigned long int *,
			    unsigned int);
extern int XAllocColorPlanes(Display *, Colormap, int, unsigned long int *,
			     int, int, int, int, unsigned long int *,
			     unsigned long int *, unsigned long int *);
extern int XAllocNamedColor(Display *, Colormap, const char *, XColor *,
			    XColor *);
extern int XAllowEvents(Display *, int, Time);
extern int XAutoRepeatOff(Display *);
extern int XAutoRepeatOn(Display *);
extern char *XBaseFontNameListOfFontSet(XFontSet);
extern int XBell(Display *, int);
extern int XBitmapBitOrder(Display *);
extern int XBitmapPad(Display *);
extern int XBitmapUnit(Display *);
extern unsigned long int XBlackPixel(Display *, int);
extern unsigned long int XBlackPixelOfScreen(Screen *);
extern int XCellsOfScreen(Screen *);
extern int XChangeActivePointerGrab(Display *, unsigned int, Cursor, Time);
extern int XChangeGC(Display *, GC, unsigned long int, XGCValues *);
extern int XChangeKeyboardControl(Display *, unsigned long int,
				  XKeyboardControl *);
extern int XChangeKeyboardMapping(Display *, int, int, KeySym *, int);
extern int XChangePointerControl(Display *, int, int, int, int, int);
extern int XChangeProperty(Display *, Window, Atom, Atom, int, int,
			   const unsigned char *, int);
extern int XChangeSaveSet(Display *, Window, int);
extern int XChangeWindowAttributes(Display *, Window, unsigned long int,
				   XSetWindowAttributes *);
extern int XCheckIfEvent(Display *, XEvent *,
			 int (*)(Display *, XEvent *, XPointer)
			 , XPointer);
extern int XCheckMaskEvent(Display *, long int, XEvent *);
extern int XCheckTypedEvent(Display *, int, XEvent *);
extern int XCheckTypedWindowEvent(Display *, Window, int, XEvent *);
extern int XCheckWindowEvent(Display *, Window, long int, XEvent *);
extern int XCirculateSubwindows(Display *, Window, int);
extern int XCirculateSubwindowsDown(Display *, Window);
extern int XCirculateSubwindowsUp(Display *, Window);
extern int XClearArea(Display *, Window, int, int, unsigned int,
		      unsigned int, int);
extern int XClearWindow(Display *, Window);
extern int XCloseDisplay(Display *);
extern int XCloseIM(XIM);
extern int XCloseOM(XOM);
extern int XConfigureWindow(Display *, Window, unsigned int,
			    XWindowChanges *);
extern int XConnectionNumber(Display *);
extern int XContextDependentDrawing(XFontSet);
extern int XContextualDrawing(XFontSet);
extern int XConvertSelection(Display *, Atom, Atom, Atom, Window, Time);
extern int XCopyArea(Display *, Drawable, Drawable, GC, int, int,
		     unsigned int, unsigned int, int, int);
extern Colormap XCopyColormapAndFree(Display *, Colormap);
extern int XCopyGC(Display *, GC, unsigned long int, GC);
extern int XCopyPlane(Display *, Drawable, Drawable, GC, int, int,
		      unsigned int, unsigned int, int, int,
		      unsigned long int);
extern Pixmap XCreateBitmapFromData(Display *, Drawable, const char *,
				    unsigned int, unsigned int);
extern Colormap XCreateColormap(Display *, Window, Visual *, int);
extern Cursor XCreateFontCursor(Display *, unsigned int);
extern XFontSet XCreateFontSet(Display *, const char *, char ***, int *,
			       char **);
extern GC XCreateGC(Display *, Drawable, unsigned long int, XGCValues *);
extern Cursor XCreateGlyphCursor(Display *, Font, Font, unsigned int,
				 unsigned int, XColor *, XColor *);
extern XIC XCreateIC(XIM, ...);
extern XImage *XCreateImage(Display *, Visual *, unsigned int, int, int,
			    char *, unsigned int, unsigned int, int, int);
extern XOC XCreateOC(XOM, ...);
extern Pixmap XCreatePixmap(Display *, Drawable, unsigned int,
			    unsigned int, unsigned int);
extern Cursor XCreatePixmapCursor(Display *, Pixmap, Pixmap, XColor *,
				  XColor *, unsigned int, unsigned int);
extern Pixmap XCreatePixmapFromBitmapData(Display *, Drawable, char *,
					  unsigned int, unsigned int,
					  unsigned long int,
					  unsigned long int, unsigned int);
extern Window XCreateSimpleWindow(Display *, Window, int, int,
				  unsigned int, unsigned int, unsigned int,
				  unsigned long int, unsigned long int);
extern Window XCreateWindow(Display *, Window, int, int, unsigned int,
			    unsigned int, unsigned int, int, unsigned int,
			    Visual *, unsigned long int,
			    XSetWindowAttributes *);
extern Colormap XDefaultColormap(Display *, int);
extern Colormap XDefaultColormapOfScreen(Screen *);
extern int XDefaultDepth(Display *, int);
extern int XDefaultDepthOfScreen(Screen *);
extern GC XDefaultGC(Display *, int);
extern GC XDefaultGCOfScreen(Screen *);
extern Window XDefaultRootWindow(Display *);
extern int XDefaultScreen(Display *);
extern Screen *XDefaultScreenOfDisplay(Display *);
extern Visual *XDefaultVisual(Display *, int);
extern Visual *XDefaultVisualOfScreen(Screen *);
extern int XDefineCursor(Display *, Window, Cursor);
extern XModifierKeymap *XDeleteModifiermapEntry(XModifierKeymap *,
						unsigned int, int);
extern int XDeleteProperty(Display *, Window, Atom);
extern void XDestroyIC(XIC);
extern void XDestroyOC(XOC);
extern int XDestroySubwindows(Display *, Window);
extern int XDestroyWindow(Display *, Window);
extern int XDirectionalDependentDrawing(XFontSet);
extern int XDisableAccessControl(Display *);
extern int XDisplayCells(Display *, int);
extern int XDisplayHeight(Display *, int);
extern int XDisplayHeightMM(Display *, int);
extern int XDisplayKeycodes(Display *, int *, int *);
extern unsigned long int XDisplayMotionBufferSize(Display *);
extern char *XDisplayName(const char *);
extern Display *XDisplayOfIM(XIM);
extern Display *XDisplayOfOM(XOM);
extern Display *XDisplayOfScreen(Screen *);
extern int XDisplayPlanes(Display *, int);
extern char *XDisplayString(Display *);
extern int XDisplayWidth(Display *, int);
extern int XDisplayWidthMM(Display *, int);
extern int XDoesBackingStore(Screen *);
extern int XDoesSaveUnders(Screen *);
extern int XDrawArc(Display *, Drawable, GC, int, int, unsigned int,
		    unsigned int, int, int);
extern int XDrawArcs(Display *, Drawable, GC, XArc *, int);
extern int XDrawImageString(Display *, Drawable, GC, int, int,
			    const char *, int);
extern int XDrawImageString16(Display *, Drawable, GC, int, int, XChar2b *,
			      int);
extern int XDrawLine(Display *, Drawable, GC, int, int, int, int);
extern int XDrawLines(Display *, Drawable, GC, XPoint *, int, int);
extern int XDrawPoint(Display *, Drawable, GC, int, int);
extern int XDrawPoints(Display *, Drawable, GC, XPoint *, int, int);
extern int XDrawRectangle(Display *, Drawable, GC, int, int, unsigned int,
			  unsigned int);
extern int XDrawRectangles(Display *, Drawable, GC, XRectangle *, int);
extern int XDrawSegments(Display *, Drawable, GC, XSegment *, int);
extern int XDrawString(Display *, Drawable, GC, int, int, const char *,
		       int);
extern int XDrawString16(Display *, Drawable, GC, int, int, XChar2b *,
			 int);
extern int XDrawText(Display *, Drawable, GC, int, int, XTextItem *, int);
extern int XDrawText16(Display *, Drawable, GC, int, int, XTextItem16 *,
		       int);
extern XExtData **XEHeadOfExtensionList(XEDataObject);
extern
    void (*XESetBeforeFlush
	  (Display *, int,
	   void (*XESetBeforeFlush) (Display *, XExtCodes *, const char *,
				     long int)
	  )) (Display *, XExtCodes *, const char *, long int);
extern
    int (*XESetCloseDisplay
	 (Display *, int, int (*XESetCloseDisplay) (Display *, XExtCodes *)
	 )) (Display *, XExtCodes *);
extern
    int (*XESetCopyGC
	 (Display *, int, int (*XESetCopyGC) (Display *, GC, XExtCodes *)
	 )) (Display *, GC, XExtCodes *);
extern
    int (*XESetCreateFont
	 (Display *, int,
	  int (*XESetCreateFont) (Display *, XFontStruct *, XExtCodes *)
	 )) (Display *, XFontStruct *, XExtCodes *);
extern
    int (*XESetCreateGC
	 (Display *, int, int (*XESetCreateGC) (Display *, GC, XExtCodes *)
	 )) (Display *, GC, XExtCodes *);
extern
    int (*XESetError
	 (Display *, int,
	  int (*XESetError) (Display *, xError *, XExtCodes *, int *)
	 )) (Display *, xError *, XExtCodes *, int *);
extern char
    *(*XESetErrorString
      (Display *, int,
       char *(*XESetErrorString) (Display *, int, XExtCodes *, char *, int)
      )) (Display *, int, XExtCodes *, char *, int);
extern
    int (*XESetEventToWire
	 (Display *, int,
	  int (*XESetEventToWire) (Display *, XEvent *, xEvent *)
	 )) (Display *, XEvent *, xEvent *);
extern
    int (*XESetFlushGC
	 (Display *, int, int (*XESetFlushGC) (Display *, GC, XExtCodes *)
	 )) (Display *, GC, XExtCodes *);
extern
    int (*XESetFreeFont
	 (Display *, int,
	  int (*XESetFreeFont) (Display *, XFontStruct *, XExtCodes *)
	 )) (Display *, XFontStruct *, XExtCodes *);
extern
    int (*XESetFreeGC
	 (Display *, int, int (*XESetFreeGC) (Display *, GC, XExtCodes *)
	 )) (Display *, GC, XExtCodes *);
extern
    void (*XESetPrintErrorValues
	  (Display *, int,
	   void (*XESetPrintErrorValues) (Display *, XErrorEvent *, void *)
	  )) (Display *, XErrorEvent *, void *);
extern
    int (*XESetWireToError
	 (Display *, int,
	  int (*XESetWireToError) (Display *, XErrorEvent *, xError *)
	 )) (Display *, XErrorEvent *, xError *);
extern
    int (*XESetWireToEvent
	 (Display *, int,
	  int (*XESetWireToEvent) (Display *, XEvent *, xEvent *)
	 )) (Display *, XEvent *, xEvent *);
extern int XEnableAccessControl(Display *);
extern long int XEventMaskOfScreen(Screen *);
extern int XEventsQueued(Display *, int);
extern long int XExtendedMaxRequestSize(Display *);
extern XFontSetExtents *XExtentsOfFontSet(XFontSet);
extern char *XFetchBuffer(Display *, int *, int);
extern char *XFetchBytes(Display *, int *);
extern int XFetchName(Display *, Window, char **);
extern int XFillArc(Display *, Drawable, GC, int, int, unsigned int,
		    unsigned int, int, int);
extern int XFillArcs(Display *, Drawable, GC, XArc *, int);
extern int XFillPolygon(Display *, Drawable, GC, XPoint *, int, int, int);
extern int XFillRectangle(Display *, Drawable, GC, int, int, unsigned int,
			  unsigned int);
extern int XFillRectangles(Display *, Drawable, GC, XRectangle *, int);
extern int XFilterEvent(XEvent *, Window);
extern XExtData *XFindOnExtensionList(XExtData * *, int);
extern int XFlush(Display *);
extern void XFlushGC(Display *, GC);
extern int XFontsOfFontSet(XFontSet, XFontStruct * **, char ***);
extern int XForceScreenSaver(Display *, int);
extern int XFree(void *);
extern int XFreeColormap(Display *, Colormap);
extern int XFreeColors(Display *, Colormap, unsigned long int *, int,
		       unsigned long int);
extern int XFreeCursor(Display *, Cursor);
extern int XFreeExtensionList(char **);
extern int XFreeFont(Display *, XFontStruct *);
extern int XFreeFontInfo(char **, XFontStruct *, int);
extern int XFreeFontNames(char **);
extern int XFreeFontPath(char **);
extern void XFreeFontSet(Display *, XFontSet);
extern int XFreeGC(Display *, GC);
extern int XFreeModifiermap(XModifierKeymap *);
extern int XFreePixmap(Display *, Pixmap);
extern void XFreeStringList(char **);
extern GContext XGContextFromGC(GC);
extern int XGeometry(Display *, int, const char *, const char *,
		     unsigned int, unsigned int, unsigned int, int, int,
		     int *, int *, int *, int *);
extern char *XGetAtomName(Display *, Atom);
extern int XGetAtomNames(Display *, Atom *, int, char **);
extern int XGetCommand(Display *, Window, char ***, int *);
extern char *XGetDefault(Display *, const char *, const char *);
extern int XGetErrorDatabaseText(Display *, const char *, const char *,
				 const char *, char *, int);
extern int XGetErrorText(Display *, int, char *, int);
extern char **XGetFontPath(Display *, int *);
extern int XGetFontProperty(XFontStruct *, Atom, unsigned long int *);
extern int XGetGCValues(Display *, GC, unsigned long int, XGCValues *);
extern int XGetGeometry(Display *, Drawable, Window *, int *, int *,
			unsigned int *, unsigned int *, unsigned int *,
			unsigned int *);
extern char *XGetICValues(XIC, ...);
extern char *XGetIMValues(XIM, ...);
extern int XGetIconName(Display *, Window, char **);
extern XImage *XGetImage(Display *, Drawable, int, int, unsigned int,
			 unsigned int, unsigned long int, int);
extern int XGetInputFocus(Display *, Window *, int *);
extern int XGetKeyboardControl(Display *, XKeyboardState *);
extern KeySym *XGetKeyboardMapping(Display *, unsigned int, int, int *);
extern XModifierKeymap *XGetModifierMapping(Display *);
extern XTimeCoord *XGetMotionEvents(Display *, Window, Time, Time, int *);
extern char *XGetOCValues(XOC, ...);
extern char *XGetOMValues(XOM, ...);
extern int XGetPointerControl(Display *, int *, int *, int *);
extern int XGetPointerMapping(Display *, unsigned char *, int);
extern int XGetScreenSaver(Display *, int *, int *, int *, int *);
extern Window XGetSelectionOwner(Display *, Atom);
extern XImage *XGetSubImage(Display *, Drawable, int, int, unsigned int,
			    unsigned int, unsigned long int, int, XImage *,
			    int, int);
extern int XGetTransientForHint(Display *, Window, Window *);
extern int XGetWMColormapWindows(Display *, Window, Window * *, int *);
extern int XGetWMProtocols(Display *, Window, Atom * *, int *);
extern int XGetWindowAttributes(Display *, Window, XWindowAttributes *);
extern int XGetWindowProperty(Display *, Window, Atom, long int, long int,
			      int, Atom, Atom *, int *,
			      unsigned long int *, unsigned long int *,
			      unsigned char **);
extern int XGrabButton(Display *, unsigned int, unsigned int, Window, int,
		       unsigned int, int, int, Window, Cursor);
extern int XGrabKey(Display *, int, unsigned int, Window, int, int, int);
extern int XGrabKeyboard(Display *, Window, int, int, int, Time);
extern int XGrabPointer(Display *, Window, int, unsigned int, int, int,
			Window, Cursor, Time);
extern int XGrabServer(Display *);
extern int XHeightMMOfScreen(Screen *);
extern int XHeightOfScreen(Screen *);
extern XIM XIMOfIC(XIC);
extern int XIconifyWindow(Display *, Window, int);
extern int XIfEvent(Display *, XEvent *,
		    int (*)(Display *, XEvent *, XPointer)
		    , XPointer);
extern int XImageByteOrder(Display *);
extern XExtCodes *XInitExtension(Display *, const char *);
extern int XInitImage(XImage *);
extern int XInitThreads(void);
extern XModifierKeymap *XInsertModifiermapEntry(XModifierKeymap *,
						unsigned int, int);
extern int XInstallColormap(Display *, Colormap);
extern Atom XInternAtom(Display *, const char *, int);
extern int XInternAtoms(Display *, char **, int, int, Atom *);
extern int XInternalConnectionNumbers(Display *, int **, int *);
extern KeySym XKeycodeToKeysym(Display *, unsigned int, int);
extern KeyCode XKeysymToKeycode(Display *, KeySym);
extern char *XKeysymToString(KeySym);
extern int XKillClient(Display *, XID);
extern unsigned long int XLastKnownRequestProcessed(Display *);
extern int *XListDepths(Display *, int, int *);
extern char **XListExtensions(Display *, int *);
extern char **XListFonts(Display *, const char *, int, int *);
extern char **XListFontsWithInfo(Display *, const char *, int, int *,
				 XFontStruct * *);
extern XHostAddress *XListHosts(Display *, int *, int *);
extern Colormap *XListInstalledColormaps(Display *, Window, int *);
extern XPixmapFormatValues *XListPixmapFormats(Display *, int *);
extern Atom *XListProperties(Display *, Window, int *);
extern Font XLoadFont(Display *, const char *);
extern XFontStruct *XLoadQueryFont(Display *, const char *);
extern char *XLocaleOfFontSet(XFontSet);
extern char *XLocaleOfIM(XIM);
extern char *XLocaleOfOM(XOM);
extern void XLockDisplay(Display *);
extern int XLookupColor(Display *, Colormap, const char *, XColor *,
			XColor *);
extern KeySym XLookupKeysym(XKeyEvent *, int);
extern int XLowerWindow(Display *, Window);
extern int XMapRaised(Display *, Window);
extern int XMapSubwindows(Display *, Window);
extern int XMapWindow(Display *, Window);
extern int XMaskEvent(Display *, long int, XEvent *);
extern int XMaxCmapsOfScreen(Screen *);
extern long int XMaxRequestSize(Display *);
extern int XMinCmapsOfScreen(Screen *);
extern int XMoveResizeWindow(Display *, Window, int, int, unsigned int,
			     unsigned int);
extern int XMoveWindow(Display *, Window, int, int);
extern XModifierKeymap *XNewModifiermap(int);
extern int XNextEvent(Display *, XEvent *);
extern unsigned long int XNextRequest(Display *);
extern int XNoOp(Display *);
extern XOM XOMOfOC(XOC);
extern Display *XOpenDisplay(const char *);
extern XIM XOpenIM(Display *, struct _XrmHashBucketRec *, char *, char *);
extern XOM XOpenOM(Display *, struct _XrmHashBucketRec *, const char *,
		   const char *);
extern int XParseColor(Display *, Colormap, const char *, XColor *);
extern int XParseGeometry(const char *, int *, int *, unsigned int *,
			  unsigned int *);
extern int XPeekEvent(Display *, XEvent *);
extern int XPeekIfEvent(Display *, XEvent *,
			int (*)(Display *, XEvent *, XPointer)
			, XPointer);
extern int XPending(Display *);
extern int XPlanesOfScreen(Screen *);
extern void XProcessInternalConnection(Display *, int);
extern int XProtocolRevision(Display *);
extern int XProtocolVersion(Display *);
extern int XPutBackEvent(Display *, XEvent *);
extern int XPutImage(Display *, Drawable, GC, XImage *, int, int, int, int,
		     unsigned int, unsigned int);
extern int XQLength(Display *);
extern int XQueryBestCursor(Display *, Drawable, unsigned int,
			    unsigned int, unsigned int *, unsigned int *);
extern int XQueryBestSize(Display *, int, Drawable, unsigned int,
			  unsigned int, unsigned int *, unsigned int *);
extern int XQueryBestStipple(Display *, Drawable, unsigned int,
			     unsigned int, unsigned int *, unsigned int *);
extern int XQueryBestTile(Display *, Drawable, unsigned int, unsigned int,
			  unsigned int *, unsigned int *);
extern int XQueryColor(Display *, Colormap, XColor *);
extern int XQueryColors(Display *, Colormap, XColor *, int);
extern int XQueryExtension(Display *, const char *, int *, int *, int *);
extern XFontStruct *XQueryFont(Display *, XID);
extern int XQueryKeymap(Display *, char);
extern int XQueryPointer(Display *, Window, Window *, Window *, int *,
			 int *, int *, int *, unsigned int *);
extern int XQueryTextExtents(Display *, XID, const char *, int, int *,
			     int *, int *, XCharStruct *);
extern int XQueryTextExtents16(Display *, XID, XChar2b *, int, int *,
			       int *, int *, XCharStruct *);
extern int XQueryTree(Display *, Window, Window *, Window *, Window * *,
		      unsigned int *);
extern int XRaiseWindow(Display *, Window);
extern int XReadBitmapFile(Display *, Drawable, const char *,
			   unsigned int *, unsigned int *, Pixmap *, int *,
			   int *);
extern int XReadBitmapFileData(const char *, unsigned int *,
			       unsigned int *, unsigned char **, int *,
			       int *);
extern int XRebindKeysym(Display *, KeySym, KeySym *, int,
			 const unsigned char *, int);
extern int XRecolorCursor(Display *, Cursor, XColor *, XColor *);
extern int XReconfigureWMWindow(Display *, Window, int, unsigned int,
				XWindowChanges *);
extern int XRefreshKeyboardMapping(XMappingEvent *);
extern int XRegisterIMInstantiateCallback(Display *,
					  struct _XrmHashBucketRec *,
					  char *, char *, XIDProc,
					  XPointer);
extern void XRemoveConnectionWatch(Display *, XConnectionWatchProc,
				   XPointer);
extern int XRemoveFromSaveSet(Display *, Window);
extern int XRemoveHost(Display *, XHostAddress *);
extern int XRemoveHosts(Display *, XHostAddress *, int);
extern int XReparentWindow(Display *, Window, Window, int, int);
extern int XResetScreenSaver(Display *);
extern int XResizeWindow(Display *, Window, unsigned int, unsigned int);
extern char *XResourceManagerString(Display *);
extern int XRestackWindows(Display *, Window *, int);
extern Window XRootWindow(Display *, int);
extern Window XRootWindowOfScreen(Screen *);
extern int XRotateBuffers(Display *, int);
extern int XRotateWindowProperties(Display *, Window, Atom *, int, int);
extern int XScreenCount(Display *);
extern int XScreenNumberOfScreen(Screen *);
extern Screen *XScreenOfDisplay(Display *, int);
extern char *XScreenResourceString(Screen *);
extern int XSelectInput(Display *, Window, long int);
extern int XSendEvent(Display *, Window, int, long int, XEvent *);
extern char *XServerVendor(Display *);
extern int XSetAccessControl(Display *, int);
extern
    int (*XSetAfterFunction(Display *, int (*XSetAfterFunction) (Display *)
	 )) (Display *);
extern int XSetArcMode(Display *, GC, int);
extern void XSetAuthorization(char *, int, char *, int);
extern int XSetBackground(Display *, GC, unsigned long int);
extern int XSetClipMask(Display *, GC, Pixmap);
extern int XSetClipOrigin(Display *, GC, int, int);
extern int XSetClipRectangles(Display *, GC, int, int, XRectangle *, int,
			      int);
extern int XSetCloseDownMode(Display *, int);
extern int XSetCommand(Display *, Window, char **, int);
extern int XSetDashes(Display *, GC, int, const char *, int);
extern XErrorHandler XSetErrorHandler(XErrorHandler);
extern int XSetFillRule(Display *, GC, int);
extern int XSetFillStyle(Display *, GC, int);
extern int XSetFont(Display *, GC, Font);
extern int XSetFontPath(Display *, char **, int);
extern int XSetForeground(Display *, GC, unsigned long int);
extern int XSetFunction(Display *, GC, int);
extern int XSetGraphicsExposures(Display *, GC, int);
extern void XSetICFocus(XIC);
extern char *XSetICValues(XIC, ...);
extern char *XSetIMValues(XIM, ...);
extern XIOErrorHandler XSetIOErrorHandler(XIOErrorHandler);
extern int XSetIconName(Display *, Window, const char *);
extern int XSetInputFocus(Display *, Window, int, Time);
extern int XSetLineAttributes(Display *, GC, unsigned int, int, int, int);
extern char *XSetLocaleModifiers(const char *);
extern int XSetModifierMapping(Display *, XModifierKeymap *);
extern char *XSetOCValues(XOC, ...);
extern char *XSetOMValues(XOM, ...);
extern int XSetPlaneMask(Display *, GC, unsigned long int);
extern int XSetPointerMapping(Display *, const unsigned char *, int);
extern int XSetScreenSaver(Display *, int, int, int, int);
extern int XSetSelectionOwner(Display *, Atom, Window, Time);
extern int XSetState(Display *, GC, unsigned long int, unsigned long int,
		     int, unsigned long int);
extern int XSetStipple(Display *, GC, Pixmap);
extern int XSetSubwindowMode(Display *, GC, int);
extern int XSetTSOrigin(Display *, GC, int, int);
extern int XSetTile(Display *, GC, Pixmap);
extern int XSetTransientForHint(Display *, Window, Window);
extern int XSetWMColormapWindows(Display *, Window, Window *, int);
extern int XSetWMProtocols(Display *, Window, Atom *, int);
extern int XSetWindowBackground(Display *, Window, unsigned long int);
extern int XSetWindowBackgroundPixmap(Display *, Window, Pixmap);
extern int XSetWindowBorder(Display *, Window, unsigned long int);
extern int XSetWindowBorderPixmap(Display *, Window, Pixmap);
extern int XSetWindowBorderWidth(Display *, Window, unsigned int);
extern int XSetWindowColormap(Display *, Window, Colormap);
extern int XStoreBuffer(Display *, const char *, int, int);
extern int XStoreBytes(Display *, const char *, int);
extern int XStoreColor(Display *, Colormap, XColor *);
extern int XStoreColors(Display *, Colormap, XColor *, int);
extern int XStoreName(Display *, Window, const char *);
extern int XStoreNamedColor(Display *, Colormap, const char *,
			    unsigned long int, int);
extern KeySym XStringToKeysym(const char *);
extern int XSupportsLocale(void);
extern int XSync(Display *, int);
extern int (*XSynchronize(Display *, int)) (Display *);
extern int XTextExtents(XFontStruct *, const char *, int, int *, int *,
			int *, XCharStruct *);
extern int XTextExtents16(XFontStruct *, XChar2b *, int, int *, int *,
			  int *, XCharStruct *);
extern int XTextWidth(XFontStruct *, const char *, int);
extern int XTextWidth16(XFontStruct *, XChar2b *, int);
extern int XTranslateCoordinates(Display *, Window, Window, int, int,
				 int *, int *, Window *);
extern int XUndefineCursor(Display *, Window);
extern int XUngrabButton(Display *, unsigned int, unsigned int, Window);
extern int XUngrabKey(Display *, int, unsigned int, Window);
extern int XUngrabKeyboard(Display *, Time);
extern int XUngrabPointer(Display *, Time);
extern int XUngrabServer(Display *);
extern int XUninstallColormap(Display *, Colormap);
extern int XUnloadFont(Display *, Font);
extern void XUnlockDisplay(Display *);
extern int XUnmapSubwindows(Display *, Window);
extern int XUnmapWindow(Display *, Window);
extern int XUnregisterIMInstantiateCallback(Display *,
					    struct _XrmHashBucketRec *,
					    char *, char *, XIDProc,
					    XPointer);
extern void XUnsetICFocus(XIC);
extern XVaNestedList XVaCreateNestedList(int, ...);
extern int XVendorRelease(Display *);
extern VisualID XVisualIDFromVisual(Visual *);
extern int XWarpPointer(Display *, Window, Window, int, int, unsigned int,
			unsigned int, int, int);
extern unsigned long int XWhitePixel(Display *, int);
extern unsigned long int XWhitePixelOfScreen(Screen *);
extern int XWidthMMOfScreen(Screen *);
extern int XWidthOfScreen(Screen *);
extern int XWindowEvent(Display *, Window, long int, XEvent *);
extern int XWithdrawWindow(Display *, Window, int);
extern int XWriteBitmapFile(Display *, const char *, Pixmap, unsigned int,
			    unsigned int, int, int);
extern void XmbDrawImageString(Display *, Drawable, XFontSet, GC, int, int,
			       const char *, int);
extern void XmbDrawString(Display *, Drawable, XFontSet, GC, int, int,
			  const char *, int);
extern void XmbDrawText(Display *, Drawable, GC, int, int, XmbTextItem *,
			int);
extern int XmbLookupString(XIC, XKeyPressedEvent *, char *, int, KeySym *,
			   int *);
extern char *XmbResetIC(XIC);
extern int XmbTextEscapement(XFontSet, const char *, int);
extern int XmbTextExtents(XFontSet, const char *, int, XRectangle *,
			  XRectangle *);
extern int XmbTextPerCharExtents(XFontSet, const char *, int, XRectangle *,
				 XRectangle *, int, int *, XRectangle *,
				 XRectangle *);
extern void XrmInitialize(void);
extern void XwcDrawImageString(Display *, Drawable, XFontSet, GC, int, int,
			       wchar_t *, int);
extern void XwcDrawString(Display *, Drawable, XFontSet, GC, int, int,
			  wchar_t *, int);
extern void XwcDrawText(Display *, Drawable, GC, int, int, XwcTextItem *,
			int);
extern int XwcLookupString(XIC, XKeyPressedEvent *, wchar_t *, int,
			   KeySym *, int *);
extern wchar_t *XwcResetIC(XIC);
extern int XwcTextEscapement(XFontSet, wchar_t *, int);
extern int XwcTextExtents(XFontSet, wchar_t *, int, XRectangle *,
			  XRectangle *);
extern int XwcTextPerCharExtents(XFontSet, wchar_t *, int, XRectangle *,
				 XRectangle *, int, int *, XRectangle *,
				 XRectangle *);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/Xmd.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define B16
#define B32
#define NEXTPTR(p,t)	(((t *)(p)) + 1)
#define _SIZEOF(x)	sz_ ##x
#define SIZEOF(x)	_SIZEOF(x)

typedef unsigned short CARD16;
typedef unsigned char CARD8;
typedef CARD8 BOOL;
typedef unsigned char BYTE;
typedef CARD32 BITS32;
typedef CARD16 BITS16;
typedef int INT32;
typedef short int INT16;
typedef signed char INT8;
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/Xproto.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define ELFlagFocus	(1&lt;&lt;0)
#define ELFlagSameScreen	(1&lt;&lt;1)
#define XEventSize	(sizeof(xEvent))
#define X_Error	0
#define xFalse	0
#define X_CreateWindow	1
#define X_Reply	1
#define xTrue	1
#define X_UnmapWindow	10
#define X_ChangeKeyboardMapping	100
#define X_GetKeyboardMapping	101
#define X_ChangeKeyboardControl	102
#define X_GetKeyboardControl	103
#define X_Bell	104
#define X_ChangePointerControl	105
#define X_GetPointerControl	106
#define X_SetScreenSaver	107
#define X_GetScreenSaver	108
#define X_ChangeHosts	109
#define X_UnmapSubwindows	11
#define X_ListHosts	110
#define X_SetAccessControl	111
#define X_SetCloseDownMode	112
#define X_KillClient	113
#define X_RotateProperties	114
#define X_ForceScreenSaver	115
#define X_SetPointerMapping	116
#define X_GetPointerMapping	117
#define X_SetModifierMapping	118
#define X_GetModifierMapping	119
#define X_ConfigureWindow	12
#define sz_xAllocColorCellsReq	12
#define sz_xAllocNamedColorReq	12
#define sz_xArc	12
#define sz_xChangeGCReq	12
#define sz_xChangePointerControlReq	12
#define sz_xChangeWindowAttributesReq	12
#define sz_xCharInfo	12
#define sz_xColorItem	12
#define sz_xConfigureWindowReq	12
#define sz_xConnClientPrefix	12
#define sz_xCopyColormapAndFreeReq	12
#define sz_xDeletePropertyReq	12
#define sz_xFreeColorsReq	12
#define sz_xLookupColorReq	12
#define sz_xOpenFontReq	12
#define sz_xPolyArcReq	12
#define sz_xPolyFillArcReq	12
#define sz_xPolyFillRectangleReq	12
#define sz_xPolyLineReq	12
#define sz_xPolyPointReq	12
#define sz_xPolyRectangleReq	12
#define sz_xPolySegmentReq	12
#define sz_xQueryBestSizeReq	12
#define sz_xRotatePropertiesReq	12
#define sz_xSetClipRectanglesReq	12
#define sz_xSetDashesReq	12
#define sz_xSetInputFocusReq	12
#define sz_xSetScreenSaverReq	12
#define sz_xUngrabButtonReq	12
#define sz_xUngrabKeyReq	12
#define X_NoOperation	127
#define X_CirculateWindow	13
#define X_GetGeometry	14
#define X_QueryTree	15
#define X_InternAtom	16
#define sz_xAllocColorPlanesReq	16
#define sz_xAllocColorReq	16
#define sz_xChangeActivePointerGrabReq	16
#define sz_xClearAreaReq	16
#define sz_xCopyGCReq	16
#define sz_xCreateColormapReq	16
#define sz_xCreateGCReq	16
#define sz_xCreatePixmapReq	16
#define sz_xFillPolyReq	16
#define sz_xGetMotionEventsReq	16
#define sz_xGrabKeyReq	16
#define sz_xGrabKeyboardReq	16
#define sz_xImageText16Req	16
#define sz_xImageText8Req	16
#define sz_xImageTextReq	16
#define sz_xPolyText16Req	16
#define sz_xPolyText8Req	16
#define sz_xPolyTextReq	16
#define sz_xReparentWindowReq	16
#define sz_xSetSelectionOwnerReq	16
#define sz_xStoreNamedColorReq	16
#define sz_xTranslateCoordsReq	16
#define X_GetAtomName	17
#define X_ChangeProperty	18
#define X_DeleteProperty	19
#define X_ChangeWindowAttributes	2
#define sz_xTextElt	2
#define X_GetProperty	20
#define sz_xGetImageReq	20
#define sz_xRecolorCursorReq	20
#define X_ListProperties	21
#define X_SetSelectionOwner	22
#define X_GetSelectionOwner	23
#define X_ConvertSelection	24
#define sz_xChangePropertyReq	24
#define sz_xConvertSelectionReq	24
#define sz_xGetPropertyReq	24
#define sz_xGrabButtonReq	24
#define sz_xGrabPointerReq	24
#define sz_xPropIconSize	24
#define sz_xPutImageReq	24
#define sz_xVisualType	24
#define sz_xWarpPointerReq	24
#define X_SendEvent	25
#define X_GrabPointer	26
#define X_UngrabPointer	27
#define X_GrabButton	28
#define sz_xCopyAreaReq	28
#define X_UngrabButton	29
#define X_GetWindowAttributes	3
#define X_ChangeActivePointerGrab	30
#define X_GrabKeyboard	31
#define X_UngrabKeyboard	32
#define sz_xAllocColorCellsReply	32
#define sz_xAllocColorPlanesReply	32
#define sz_xAllocColorReply	32
#define sz_xAllocNamedColorReply	32
#define sz_xConnSetup	32
#define sz_xCopyPlaneReq	32
#define sz_xCreateCursorReq	32
#define sz_xCreateGlyphCursorReq	32
#define sz_xCreateWindowReq	32
#define sz_xError	32
#define sz_xEvent	32
#define sz_xGenericReply	32
#define sz_xGetAtomNameReply	32
#define sz_xGetFontPathReply	32
#define sz_xGetGeometryReply	32
#define sz_xGetImageReply	32
#define sz_xGetInputFocusReply	32
#define sz_xGetKeyboardMappingReply	32
#define sz_xGetModifierMappingReply	32
#define sz_xGetMotionEventsReply	32
#define sz_xGetPointerControlReply	32
#define sz_xGetPointerMappingReply	32
#define sz_xGetPropertyReply	32
#define sz_xGetScreenSaverReply	32
#define sz_xGetSelectionOwnerReply	32
#define sz_xGrabKeyboardReply	32
#define sz_xGrabPointerReply	32
#define sz_xInternAtomReply	32
#define sz_xKeymapEvent	32
#define sz_xListExtensionsReply	32
#define sz_xListFontsReply	32
#define sz_xListHostsReply	32
#define sz_xListInstalledColormapsReply	32
#define sz_xListPropertiesReply	32
#define sz_xLookupColorReply	32
#define sz_xQueryBestSizeReply	32
#define sz_xQueryColorsReply	32
#define sz_xQueryExtensionReply	32
#define sz_xQueryPointerReply	32
#define sz_xQueryTextExtentsReply	32
#define sz_xQueryTreeReply	32
#define sz_xReply	32
#define sz_xSetMappingReply	32
#define sz_xSetModifierMappingReply	32
#define sz_xSetPointerMappingReply	32
#define sz_xTranslateCoordsReply	32
#define X_GrabKey	33
#define X_UngrabKey	34
#define X_AllowEvents	35
#define X_GrabServer	36
#define X_UngrabServer	37
#define X_QueryPointer	38
#define X_GetMotionEvents	39
#define X_DestroyWindow	4
#define sz_xBellReq	4
#define sz_xChangeModeReq	4
#define sz_xForceScreenSaverReq	4
#define sz_xHostEntry	4
#define sz_xListHostsReq	4
#define sz_xPoint	4
#define sz_xReq	4
#define sz_xSetAccessControlReq	4
#define sz_xSetCloseDownModeReq	4
#define sz_xSetModifierMappingReq	4
#define sz_xSetPointerMappingReq	4
#define X_TranslateCoords	40
#define sz_xQueryKeymapReply	40
#define sz_xWindowRoot	40
#define X_WarpPointer	41
#define X_SetInputFocus	42
#define X_GetInputFocus	43
#define X_QueryKeymap	44
#define sz_xGetWindowAttributesReply	44
#define sz_xSendEventReq	44
#define X_OpenFont	45
#define X_CloseFont	46
#define X_QueryFont	47
#define X_QueryTextExtents	48
#define X_ListFonts	49
#define X_DestroySubwindows	5
#define X_ListFontsWithInfo	50
#define X_SetFontPath	51
#define X_GetFontPath	52
#define sz_xGetKeyboardControlReply	52
#define X_CreatePixmap	53
#define X_FreePixmap	54
#define X_CreateGC	55
#define X_ChangeGC	56
#define X_CopyGC	57
#define X_SetDashes	58
#define X_SetClipRectangles	59
#define X_ChangeSaveSet	6
#define X_FreeGC	60
#define sz_xListFontsWithInfoReply	60
#define sz_xQueryFontReply	60
#define X_TCP_PORT	6000
#define X_ClearArea	61
#define X_CopyArea	62
#define X_CopyPlane	63
#define X_PolyPoint	64
#define X_PolyLine	65
#define X_PolySegment	66
#define X_PolyRectangle	67
#define X_PolyArc	68
#define X_FillPoly	69
#define X_ReparentWindow	7
#define X_PolyFillRectangle	70
#define X_PolyFillArc	71
#define X_PutImage	72
#define X_GetImage	73
#define X_PolyText8	74
#define X_PolyText16	75
#define X_ImageText8	76
#define X_ImageText16	77
#define X_CreateColormap	78
#define X_FreeColormap	79
#define X_MapWindow	8
#define sz_xAllowEventsReq	8
#define sz_xChangeHostsReq	8
#define sz_xChangeKeyboardControlReq	8
#define sz_xChangeKeyboardMappingReq	8
#define sz_xChangeSaveSetReq	8
#define sz_xCirculateWindowReq	8
#define sz_xConnSetupPrefix	8
#define sz_xDepth	8
#define sz_xFontProp	8
#define sz_xGetKeyboardMappingReq	8
#define sz_xInternAtomReq	8
#define sz_xListFontsReq	8
#define sz_xListFontsWithInfoReq	8
#define sz_xPixmapFormat	8
#define sz_xQueryColorsReq	8
#define sz_xQueryExtensionReq	8
#define sz_xQueryTextExtentsReq	8
#define sz_xRectangle	8
#define sz_xResourceReq	8
#define sz_xSegment	8
#define sz_xSetFontPathReq	8
#define sz_xStoreColorsReq	8
#define sz_xTimecoord	8
#define sz_xrgb	8
#define X_CopyColormapAndFree	80
#define X_InstallColormap	81
#define X_UninstallColormap	82
#define X_ListInstalledColormaps	83
#define X_AllocColor	84
#define X_AllocNamedColor	85
#define X_AllocColorCells	86
#define X_AllocColorPlanes	87
#define X_FreeColors	88
#define X_StoreColors	89
#define X_MapSubwindows	9
#define X_StoreNamedColor	90
#define X_QueryColors	91
#define X_LookupColor	92
#define X_CreateCursor	93
#define X_CreateGlyphCursor	94
#define X_FreeCursor	95
#define X_RecolorCursor	96
#define X_QueryBestSize	97
#define X_QueryExtension	98
#define X_ListExtensions	99
#define Atom	CARD32
#define Colormap	CARD32
#define Cursor	CARD32
#define Drawable	CARD32
#define Font	CARD32
#define GContext	CARD32
#define KeySym	CARD32
#define Pixmap	CARD32
#define Time	CARD32
#define VisualID	CARD32
#define Window	CARD32
#define KeyCode	CARD8

typedef struct _xEvent {
    union {
	struct {
	    BYTE type;
	    BYTE detail;
	    CARD16 sequenceNumber;
	} u;
	struct {
	    CARD32 pad00;
	    CARD32 time;
	    CARD32 root;
	    CARD32 event;
	    CARD32 child;
	    INT16 rootX;
	    INT16 rootY;
	    INT16 eventX;
	    INT16 eventY;
	    KeyButMask state;
	    BOOL sameScreen;
	    BYTE pad1;
	} keyButtonPointer;
	struct {
	    CARD32 pad00;
	    CARD32 time;
	    CARD32 root;
	    CARD32 event;
	    CARD32 child;
	    INT16 rootX;
	    INT16 rootY;
	    INT16 eventX;
	    INT16 eventY;
	    KeyButMask state;
	    BYTE mode;
	    BYTE flags;
	} enterLeave;
	struct {
	    CARD32 pad00;
	    CARD32 window;
	    BYTE mode;
	    BYTE pad1;
	    BYTE pad2;
	    BYTE pad3;
	} focus;
	struct {
	    CARD32 pad00;
	    CARD32 window;
	    CARD16 x;
	    CARD16 y;
	    CARD16 width;
	    CARD16 height;
	    CARD16 count;
	    CARD16 pad2;
	} expose;
	struct {
	    CARD32 pad00;
	    CARD32 drawable;
	    CARD16 x;
	    CARD16 y;
	    CARD16 width;
	    CARD16 height;
	    CARD16 minorEvent;
	    CARD16 count;
	    BYTE majorEvent;
	    BYTE pad1;
	    BYTE pad2;
	    BYTE pad3;
	} graphicsExposure;
	struct {
	    CARD32 pad00;
	    CARD32 drawable;
	    CARD16 minorEvent;
	    BYTE majorEvent;
	    BYTE bpad;
	} noExposure;
	struct {
	    CARD32 pad00;
	    CARD32 window;
	    CARD8 state;
	    BYTE pad1;
	    BYTE pad2;
	    BYTE pad3;
	} visibility;
	struct {
	    CARD32 pad00;
	    CARD32 parent;
	    CARD32 window;
	    INT16 x;
	    INT16 y;
	    CARD16 width;
	    CARD16 height;
	    CARD16 borderWidth;
	    BOOL override;
	    BYTE bpad;
	} createNotify;
	struct {
	    CARD32 pad00;
	    CARD32 event;
	    CARD32 window;
	} destroyNotify;
	struct {
	    CARD32 pad00;
	    CARD32 event;
	    CARD32 window;
	    BOOL fromConfigure;
	    BYTE pad1;
	    BYTE pad2;
	    BYTE pad3;
	} unmapNotify;
	struct {
	    CARD32 pad00;
	    CARD32 event;
	    CARD32 window;
	    BOOL override;
	    BYTE pad1;
	    BYTE pad2;
	    BYTE pad3;
	} mapNotify;
	struct {
	    CARD32 pad00;
	    CARD32 parent;
	    CARD32 window;
	} mapRequest;
	struct {
	    CARD32 pad00;
	    CARD32 event;
	    CARD32 window;
	    CARD32 parent;
	    INT16 x;
	    INT16 y;
	    BOOL override;
	    BYTE pad1;
	    BYTE pad2;
	    BYTE pad3;
	} reparent;
	struct {
	    CARD32 pad00;
	    CARD32 event;
	    CARD32 window;
	    CARD32 aboveSibling;
	    INT16 x;
	    INT16 y;
	    CARD16 width;
	    CARD16 height;
	    CARD16 borderWidth;
	    BOOL override;
	    BYTE bpad;
	} configureNotify;
	struct {
	    CARD32 pad00;
	    CARD32 parent;
	    CARD32 window;
	    CARD32 sibling;
	    INT16 x;
	    INT16 y;
	    CARD16 width;
	    CARD16 height;
	    CARD16 borderWidth;
	    CARD16 valueMask;
	    CARD32 pad1;
	} configureRequest;
	struct {
	    CARD32 pad00;
	    CARD32 event;
	    CARD32 window;
	    INT16 x;
	    INT16 y;
	    CARD32 pad1;
	    CARD32 pad2;
	    CARD32 pad3;
	    CARD32 pad4;
	} gravity;
	struct {
	    CARD32 pad00;
	    CARD32 window;
	    CARD16 width;
	    CARD16 height;
	} resizeRequest;
	struct {
	    CARD32 pad00;
	    CARD32 event;
	    CARD32 window;
	    CARD32 parent;
	    BYTE place;
	    BYTE pad1;
	    BYTE pad2;
	    BYTE pad3;
	} circulate;
	struct {
	    CARD32 pad00;
	    CARD32 window;
	    CARD32 atom;
	    CARD32 time;
	    BYTE state;
	    BYTE pad1;
	    CARD16 pad2;
	} property;
	struct {
	    CARD32 pad00;
	    CARD32 time;
	    CARD32 window;
	    CARD32 atom;
	} selectionClear;
	struct {
	    CARD32 pad00;
	    CARD32 time;
	    CARD32 owner;
	    CARD32 requestor;
	    CARD32 selection;
	    CARD32 target;
	    CARD32 property;
	} selectionRequest;
	struct {
	    CARD32 pad00;
	    CARD32 time;
	    CARD32 requestor;
	    CARD32 selection;
	    CARD32 target;
	    CARD32 property;
	} selectionNotify;
	struct {
	    CARD32 pad00;
	    CARD32 window;
	    CARD32 colormap;
	    BOOL c_new;
	    BYTE state;
	    BYTE pad1;
	    BYTE pad2;
	} colormap;
	struct {
	    CARD32 pad00;
	    CARD8 request;
	    CARD8 firstKeyCode;
	    CARD8 count;
	    BYTE pad1;
	} mappingNotify;
	struct {
	    CARD32 pad00;
	    CARD32 window;
	    union {
		struct {
		    CARD32 type;
		    INT32 longs0;
		    INT32 longs1;
		    INT32 longs2;
		    INT32 longs3;
		    INT32 longs4;
		} l;
		struct {
		    CARD32 type;
		    INT16 shorts0;
		    INT16 shorts1;
		    INT16 shorts2;
		    INT16 shorts3;
		    INT16 shorts4;
		    INT16 shorts5;
		    INT16 shorts6;
		    INT16 shorts7;
		    INT16 shorts8;
		    INT16 shorts9;
		} s;
		struct {
		    CARD32 type;
		    INT8 bytes[20];
		} b;
	    } u;
	} clientMessage;
    } u;
} xEvent;
typedef struct {
    BYTE type;
    BYTE errorCode;
    CARD16 sequenceNumber;
    CARD32 resourceID;
    CARD16 minorCode;
    CARD8 majorCode;
    BYTE pad1;
    CARD32 pad3;
    CARD32 pad4;
    CARD32 pad5;
    CARD32 pad6;
    CARD32 pad7;
} xError;
typedef CARD16 KeyButMask;
typedef struct {
    CARD8 byteOrder;
    BYTE pad;
    CARD16 majorVersion;
    CARD16 minorVersion;
    CARD16 nbytesAuthProto;
    CARD16 nbytesAuthString;
    CARD16 pad2;
} xConnClientPrefix;
typedef struct {
    CARD8 success;
    BYTE lengthReason;
    CARD16 majorVersion;
    CARD16 minorVersion;
    CARD16 length;
} xConnSetupPrefix;
typedef struct {
    CARD32 release;
    CARD32 ridBase;
    CARD32 ridMask;
    CARD32 motionBufferSize;
    CARD16 nbytesVendor;
    CARD16 maxRequestSize;
    CARD8 numRoots;
    CARD8 numFormats;
    CARD8 imageByteOrder;
    CARD8 bitmapBitOrder;
    CARD8 bitmapScanlineUnit;
    CARD8 bitmapScanlinePad;
    CARD8 minKeyCode;
    CARD8 maxKeyCode;
    CARD32 pad2;
} xConnSetup;
typedef struct {
    CARD8 depth;
    CARD8 bitsPerPixel;
    CARD8 scanLinePad;
    CARD8 pad1;
    CARD32 pad2;
} xPixmapFormat;
typedef struct {
    CARD8 depth;
    CARD8 pad1;
    CARD16 nVisuals;
    CARD32 pad2;
} xDepth;
typedef struct {
    CARD32 visualID;
    CARD8 c_class;
    CARD8 bitsPerRGB;
    CARD16 colormapEntries;
    CARD32 redMask;
    CARD32 greenMask;
    CARD32 blueMask;
    CARD32 pad;
} xVisualType;
typedef struct {
    CARD32 windowId;
    CARD32 defaultColormap;
    CARD32 whitePixel;
    CARD32 blackPixel;
    CARD32 currentInputMask;
    CARD16 pixWidth;
    CARD16 pixHeight;
    CARD16 mmWidth;
    CARD16 mmHeight;
    CARD16 minInstalledMaps;
    CARD16 maxInstalledMaps;
    CARD32 rootVisualID;
    CARD8 backingStore;
    BOOL saveUnders;
    CARD8 rootDepth;
    CARD8 nDepths;
} xWindowRoot;
typedef struct {
    CARD32 time;
    INT16 x;
    INT16 y;
} xTimecoord;
typedef struct {
    CARD8 family;
    BYTE pad;
    CARD16 length;
} xHostEntry;
typedef struct {
    INT16 leftSideBearing;
    INT16 rightSideBearing;
    INT16 characterWidth;
    INT16 ascent;
    INT16 descent;
    CARD16 attributes;
} xCharInfo;
typedef struct {
    CARD32 name;
    CARD32 value;
} xFontProp;
typedef struct {
    CARD8 len;
    INT8 delta;
} xTextElt;
typedef struct {
    CARD32 pixel;
    CARD16 red;
    CARD16 green;
    CARD16 blue;
    CARD8 flags;
    CARD8 pad;
} xColorItem;
typedef struct {
    CARD16 red;
    CARD16 green;
    CARD16 blue;
    CARD16 pad;
} xrgb;
typedef unsigned char KEYCODE;
typedef struct {
    BYTE type;
    BYTE data1;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD32 data00;
    CARD32 data01;
    CARD32 data02;
    CARD32 data03;
    CARD32 data04;
    CARD32 data05;
} xGenericReply;
typedef struct {
    BYTE type;
    CARD8 backingStore;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD32 visualID;
    CARD16 c_class;
    CARD8 bitGravity;
    CARD8 winGravity;
    CARD32 backingBitPlanes;
    CARD32 backingPixel;
    BOOL saveUnder;
    BOOL mapInstalled;
    CARD8 mapState;
    BOOL override;
    CARD32 colormap;
    CARD32 allEventMasks;
    CARD32 yourEventMask;
    CARD16 doNotPropagateMask;
    CARD16 pad;
} xGetWindowAttributesReply;
typedef struct {
    BYTE type;
    CARD8 depth;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD32 root;
    INT16 x;
    INT16 y;
    CARD16 width;
    CARD16 height;
    CARD16 borderWidth;
    CARD16 pad1;
    CARD32 pad2;
    CARD32 pad3;
} xGetGeometryReply;
typedef struct {
    BYTE type;
    BYTE pad1;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD32 root;
    CARD32 parent;
    CARD16 nChildren;
    CARD16 pad2;
    CARD32 pad3;
    CARD32 pad4;
    CARD32 pad5;
} xQueryTreeReply;
typedef struct {
    BYTE type;
    BYTE pad1;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD32 atom;
    CARD32 pad2;
    CARD32 pad3;
    CARD32 pad4;
    CARD32 pad5;
    CARD32 pad6;
} xInternAtomReply;
typedef struct {
    BYTE type;
    BYTE pad1;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD16 nameLength;
    CARD16 pad2;
    CARD32 pad3;
    CARD32 pad4;
    CARD32 pad5;
    CARD32 pad6;
    CARD32 pad7;
} xGetAtomNameReply;
typedef struct {
    BYTE type;
    CARD8 format;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD32 propertyType;
    CARD32 bytesAfter;
    CARD32 nItems;
    CARD32 pad1;
    CARD32 pad2;
    CARD32 pad3;
} xGetPropertyReply;
typedef struct {
    BYTE type;
    BYTE pad1;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD16 nProperties;
    CARD16 pad2;
    CARD32 pad3;
    CARD32 pad4;
    CARD32 pad5;
    CARD32 pad6;
    CARD32 pad7;
} xListPropertiesReply;
typedef struct {
    BYTE type;
    BYTE pad1;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD32 owner;
    CARD32 pad2;
    CARD32 pad3;
    CARD32 pad4;
    CARD32 pad5;
    CARD32 pad6;
} xGetSelectionOwnerReply;
typedef struct {
    BYTE type;
    BYTE status;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD32 pad1;
    CARD32 pad2;
    CARD32 pad3;
    CARD32 pad4;
    CARD32 pad5;
    CARD32 pad6;
} xGrabPointerReply;
typedef xGrabPointerReply xGrabKeyboardReply;
typedef struct {
    BYTE type;
    BOOL sameScreen;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD32 root;
    CARD32 child;
    INT16 rootX;
    INT16 rootY;
    INT16 winX;
    INT16 winY;
    CARD16 mask;
    CARD16 pad1;
    CARD32 pad;
} xQueryPointerReply;
typedef struct {
    BYTE type;
    BYTE pad1;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD32 nEvents;
    CARD32 pad2;
    CARD32 pad3;
    CARD32 pad4;
    CARD32 pad5;
    CARD32 pad6;
} xGetMotionEventsReply;
typedef struct {
    BYTE type;
    BOOL sameScreen;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD32 child;
    INT16 dstX;
    INT16 dstY;
    CARD32 pad2;
    CARD32 pad3;
    CARD32 pad4;
    CARD32 pad5;
} xTranslateCoordsReply;
typedef struct {
    BYTE type;
    CARD8 revertTo;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD32 focus;
    CARD32 pad1;
    CARD32 pad2;
    CARD32 pad3;
    CARD32 pad4;
    CARD32 pad5;
} xGetInputFocusReply;
typedef struct {
    BYTE type;
    BYTE pad1;
    CARD16 sequenceNumber;
    CARD32 length;
    BYTE map[32];
} xQueryKeymapReply;
typedef struct _xQueryFontReply {
    BYTE type;
    BYTE pad1;
    CARD16 sequenceNumber;
    CARD32 length;
    xCharInfo minBounds;
    CARD32 walign1;
    xCharInfo maxBounds;
    CARD32 walign2;
    CARD16 minCharOrByte2;
    CARD16 maxCharOrByte2;
    CARD16 defaultChar;
    CARD16 nFontProps;
    CARD8 drawDirection;
    CARD8 minByte1;
    CARD8 maxByte1;
    BOOL allCharsExist;
    INT16 fontAscent;
    INT16 fontDescent;
    CARD32 nCharInfos;
} xQueryFontReply;
typedef struct {
    BYTE type;
    CARD8 drawDirection;
    CARD16 sequenceNumber;
    CARD32 length;
    INT16 fontAscent;
    INT16 fontDescent;
    INT16 overallAscent;
    INT16 overallDescent;
    INT32 overallWidth;
    INT32 overallLeft;
    INT32 overallRight;
    CARD32 pad;
} xQueryTextExtentsReply;
typedef struct {
    BYTE type;
    BYTE pad1;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD16 nFonts;
    CARD16 pad2;
    CARD32 pad3;
    CARD32 pad4;
    CARD32 pad5;
    CARD32 pad6;
    CARD32 pad7;
} xListFontsReply;
typedef struct {
    BYTE type;
    CARD8 nameLength;
    CARD16 sequenceNumber;
    CARD32 length;
    xCharInfo minBounds;
    CARD32 walign1;
    xCharInfo maxBounds;
    CARD32 walign2;
    CARD16 minCharOrByte2;
    CARD16 maxCharOrByte2;
    CARD16 defaultChar;
    CARD16 nFontProps;
    CARD8 drawDirection;
    CARD8 minByte1;
    CARD8 maxByte1;
    BOOL allCharsExist;
    INT16 fontAscent;
    INT16 fontDescent;
    CARD32 nReplies;
} xListFontsWithInfoReply;
typedef struct {
    BYTE type;
    BYTE pad1;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD16 nPaths;
    CARD16 pad2;
    CARD32 pad3;
    CARD32 pad4;
    CARD32 pad5;
    CARD32 pad6;
    CARD32 pad7;
} xGetFontPathReply;
typedef struct {
    BYTE type;
    CARD8 depth;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD32 visual;
    CARD32 pad3;
    CARD32 pad4;
    CARD32 pad5;
    CARD32 pad6;
    CARD32 pad7;
} xGetImageReply;
typedef struct {
    BYTE type;
    BYTE pad1;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD16 nColormaps;
    CARD16 pad2;
    CARD32 pad3;
    CARD32 pad4;
    CARD32 pad5;
    CARD32 pad6;
    CARD32 pad7;
} xListInstalledColormapsReply;
typedef struct {
    BYTE type;
    BYTE pad1;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD16 red;
    CARD16 green;
    CARD16 blue;
    CARD16 pad2;
    CARD32 pixel;
    CARD32 pad3;
    CARD32 pad4;
    CARD32 pad5;
} xAllocColorReply;
typedef struct {
    BYTE type;
    BYTE pad1;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD32 pixel;
    CARD16 exactRed;
    CARD16 exactGreen;
    CARD16 exactBlue;
    CARD16 screenRed;
    CARD16 screenGreen;
    CARD16 screenBlue;
    CARD32 pad2;
    CARD32 pad3;
} xAllocNamedColorReply;
typedef struct {
    BYTE type;
    BYTE pad1;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD16 nPixels;
    CARD16 nMasks;
    CARD32 pad3;
    CARD32 pad4;
    CARD32 pad5;
    CARD32 pad6;
    CARD32 pad7;
} xAllocColorCellsReply;
typedef struct {
    BYTE type;
    BYTE pad1;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD16 nPixels;
    CARD16 pad2;
    CARD32 redMask;
    CARD32 greenMask;
    CARD32 blueMask;
    CARD32 pad3;
    CARD32 pad4;
} xAllocColorPlanesReply;
typedef struct {
    BYTE type;
    BYTE pad1;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD16 nColors;
    CARD16 pad2;
    CARD32 pad3;
    CARD32 pad4;
    CARD32 pad5;
    CARD32 pad6;
    CARD32 pad7;
} xQueryColorsReply;
typedef struct {
    BYTE type;
    BYTE pad1;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD16 exactRed;
    CARD16 exactGreen;
    CARD16 exactBlue;
    CARD16 screenRed;
    CARD16 screenGreen;
    CARD16 screenBlue;
    CARD32 pad3;
    CARD32 pad4;
    CARD32 pad5;
} xLookupColorReply;
typedef struct {
    BYTE type;
    BYTE pad1;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD16 width;
    CARD16 height;
    CARD32 pad3;
    CARD32 pad4;
    CARD32 pad5;
    CARD32 pad6;
    CARD32 pad7;
} xQueryBestSizeReply;
typedef struct {
    BYTE type;
    BYTE pad1;
    CARD16 sequenceNumber;
    CARD32 length;
    BOOL present;
    CARD8 major_opcode;
    CARD8 first_event;
    CARD8 first_error;
    CARD32 pad3;
    CARD32 pad4;
    CARD32 pad5;
    CARD32 pad6;
    CARD32 pad7;
} xQueryExtensionReply;
typedef struct {
    BYTE type;
    CARD8 nExtensions;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD32 pad2;
    CARD32 pad3;
    CARD32 pad4;
    CARD32 pad5;
    CARD32 pad6;
    CARD32 pad7;
} xListExtensionsReply;
typedef struct {
    BYTE type;
    CARD8 success;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD32 pad2;
    CARD32 pad3;
    CARD32 pad4;
    CARD32 pad5;
    CARD32 pad6;
    CARD32 pad7;
} xSetMappingReply;
typedef xSetMappingReply xSetPointerMappingReply;
typedef xSetMappingReply xSetModifierMappingReply;
typedef struct {
    BYTE type;
    CARD8 nElts;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD32 pad2;
    CARD32 pad3;
    CARD32 pad4;
    CARD32 pad5;
    CARD32 pad6;
    CARD32 pad7;
} xGetPointerMappingReply;
typedef struct {
    BYTE type;
    CARD8 keySymsPerKeyCode;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD32 pad2;
    CARD32 pad3;
    CARD32 pad4;
    CARD32 pad5;
    CARD32 pad6;
    CARD32 pad7;
} xGetKeyboardMappingReply;
typedef struct {
    BYTE type;
    CARD8 numKeyPerModifier;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD32 pad1;
    CARD32 pad2;
    CARD32 pad3;
    CARD32 pad4;
    CARD32 pad5;
    CARD32 pad6;
} xGetModifierMappingReply;
typedef struct {
    BYTE type;
    BOOL globalAutoRepeat;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD32 ledMask;
    CARD8 keyClickPercent;
    CARD8 bellPercent;
    CARD16 bellPitch;
    CARD16 bellDuration;
    CARD16 pad;
    BYTE map[32];
} xGetKeyboardControlReply;
typedef struct {
    BYTE type;
    BYTE pad1;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD16 accelNumerator;
    CARD16 accelDenominator;
    CARD16 threshold;
    CARD16 pad2;
    CARD32 pad3;
    CARD32 pad4;
    CARD32 pad5;
    CARD32 pad6;
} xGetPointerControlReply;
typedef struct {
    BYTE type;
    BYTE pad1;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD16 timeout;
    CARD16 interval;
    BOOL preferBlanking;
    BOOL allowExposures;
    CARD16 pad2;
    CARD32 pad3;
    CARD32 pad4;
    CARD32 pad5;
    CARD32 pad6;
} xGetScreenSaverReply;
typedef struct {
    BYTE type;
    BOOL enabled;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD16 nHosts;
    CARD16 pad1;
    CARD32 pad3;
    CARD32 pad4;
    CARD32 pad5;
    CARD32 pad6;
    CARD32 pad7;
} xListHostsReply;
typedef struct {
    BYTE type;
    BYTE map[31];
} xKeymapEvent;
typedef struct _xReq {
    CARD8 reqType;
    CARD8 data;
    CARD16 length;
} xReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD32 id;
} xResourceReq;
typedef struct {
    CARD8 reqType;
    CARD8 depth;
    CARD16 length;
    CARD32 wid;
    CARD32 parent;
    INT16 x;
    INT16 y;
    CARD16 width;
    CARD16 height;
    CARD16 borderWidth;
    CARD16 c_class;
    CARD32 visual;
    CARD32 mask;
} xCreateWindowReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD32 window;
    CARD32 valueMask;
} xChangeWindowAttributesReq;
typedef struct {
    CARD8 reqType;
    BYTE mode;
    CARD16 length;
    CARD32 window;
} xChangeSaveSetReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD32 window;
    CARD32 parent;
    INT16 x;
    INT16 y;
} xReparentWindowReq;
typedef struct {
    CARD8 reqType;
    CARD8 pad;
    CARD16 length;
    CARD32 window;
    CARD16 mask;
    CARD16 pad2;
} xConfigureWindowReq;
typedef struct {
    CARD8 reqType;
    CARD8 direction;
    CARD16 length;
    CARD32 window;
} xCirculateWindowReq;
typedef struct {
    CARD8 reqType;
    BOOL onlyIfExists;
    CARD16 length;
    CARD16 nbytes;
    CARD16 pad;
} xInternAtomReq;
typedef struct {
    CARD8 reqType;
    CARD8 mode;
    CARD16 length;
    CARD32 window;
    CARD32 property;
    CARD32 type;
    CARD8 format;
    BYTE pad[3];
    CARD32 nUnits;
} xChangePropertyReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD32 window;
    CARD32 property;
} xDeletePropertyReq;
typedef struct {
    CARD8 reqType;
    BOOL c_delete;
    CARD16 length;
    CARD32 window;
    CARD32 property;
    CARD32 type;
    CARD32 longOffset;
    CARD32 longLength;
} xGetPropertyReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD32 window;
    CARD32 selection;
    CARD32 time;
} xSetSelectionOwnerReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD32 requestor;
    CARD32 selection;
    CARD32 target;
    CARD32 property;
    CARD32 time;
} xConvertSelectionReq;
typedef struct {
    CARD8 reqType;
    BOOL ownerEvents;
    CARD16 length;
    CARD32 grabWindow;
    CARD16 eventMask;
    BYTE pointerMode;
    BYTE keyboardMode;
    CARD32 confineTo;
    CARD32 cursor;
    CARD32 time;
} xGrabPointerReq;
typedef struct {
    CARD8 reqType;
    BOOL ownerEvents;
    CARD16 length;
    CARD32 grabWindow;
    CARD16 eventMask;
    BYTE pointerMode;
    BYTE keyboardMode;
    CARD32 confineTo;
    CARD32 cursor;
    CARD8 button;
    BYTE pad;
    CARD16 modifiers;
} xGrabButtonReq;
typedef struct {
    CARD8 reqType;
    CARD8 button;
    CARD16 length;
    CARD32 grabWindow;
    CARD16 modifiers;
    CARD16 pad;
} xUngrabButtonReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD32 cursor;
    CARD32 time;
    CARD16 eventMask;
    CARD16 pad2;
} xChangeActivePointerGrabReq;
typedef struct {
    CARD8 reqType;
    BOOL ownerEvents;
    CARD16 length;
    CARD32 grabWindow;
    CARD32 time;
    BYTE pointerMode;
    BYTE keyboardMode;
    CARD16 pad;
} xGrabKeyboardReq;
typedef struct {
    CARD8 reqType;
    BOOL ownerEvents;
    CARD16 length;
    CARD32 grabWindow;
    CARD16 modifiers;
    CARD8 key;
    BYTE pointerMode;
    BYTE keyboardMode;
    BYTE pad1;
    BYTE pad2;
    BYTE pad3;
} xGrabKeyReq;
typedef struct {
    CARD8 reqType;
    CARD8 key;
    CARD16 length;
    CARD32 grabWindow;
    CARD16 modifiers;
    CARD16 pad;
} xUngrabKeyReq;
typedef struct {
    CARD8 reqType;
    CARD8 mode;
    CARD16 length;
    CARD32 time;
} xAllowEventsReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD32 window;
    CARD32 start;
    CARD32 stop;
} xGetMotionEventsReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD32 srcWid;
    CARD32 dstWid;
    INT16 srcX;
    INT16 srcY;
} xTranslateCoordsReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD32 srcWid;
    CARD32 dstWid;
    INT16 srcX;
    INT16 srcY;
    CARD16 srcWidth;
    CARD16 srcHeight;
    INT16 dstX;
    INT16 dstY;
} xWarpPointerReq;
typedef struct {
    CARD8 reqType;
    CARD8 revertTo;
    CARD16 length;
    CARD32 focus;
    CARD32 time;
} xSetInputFocusReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD32 fid;
    CARD16 nbytes;
    BYTE pad1;
    BYTE pad2;
} xOpenFontReq;
typedef struct {
    CARD8 reqType;
    BOOL oddLength;
    CARD16 length;
    CARD32 fid;
} xQueryTextExtentsReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD16 maxNames;
    CARD16 nbytes;
} xListFontsReq;
typedef xListFontsReq xListFontsWithInfoReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD16 nFonts;
    BYTE pad1;
    BYTE pad2;
} xSetFontPathReq;
typedef struct {
    CARD8 reqType;
    CARD8 depth;
    CARD16 length;
    CARD32 pid;
    CARD32 drawable;
    CARD16 width;
    CARD16 height;
} xCreatePixmapReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD32 gc;
    CARD32 drawable;
    CARD32 mask;
} xCreateGCReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD32 gc;
    CARD32 mask;
} xChangeGCReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD32 srcGC;
    CARD32 dstGC;
    CARD32 mask;
} xCopyGCReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD32 gc;
    CARD16 dashOffset;
    CARD16 nDashes;
} xSetDashesReq;
typedef struct {
    CARD8 reqType;
    BYTE ordering;
    CARD16 length;
    CARD32 gc;
    INT16 xOrigin;
    INT16 yOrigin;
} xSetClipRectanglesReq;
typedef struct {
    CARD8 reqType;
    BOOL exposures;
    CARD16 length;
    CARD32 window;
    INT16 x;
    INT16 y;
    CARD16 width;
    CARD16 height;
} xClearAreaReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD32 srcDrawable;
    CARD32 dstDrawable;
    CARD32 gc;
    INT16 srcX;
    INT16 srcY;
    INT16 dstX;
    INT16 dstY;
    CARD16 width;
    CARD16 height;
} xCopyAreaReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD32 srcDrawable;
    CARD32 dstDrawable;
    CARD32 gc;
    INT16 srcX;
    INT16 srcY;
    INT16 dstX;
    INT16 dstY;
    CARD16 width;
    CARD16 height;
    CARD32 bitPlane;
} xCopyPlaneReq;
typedef struct {
    CARD8 reqType;
    BYTE coordMode;
    CARD16 length;
    CARD32 drawable;
    CARD32 gc;
} xPolyPointReq;
typedef xPolyPointReq xPolyLineReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD32 drawable;
    CARD32 gc;
} xPolySegmentReq;
typedef xPolySegmentReq xPolyArcReq;
typedef xPolySegmentReq xPolyRectangleReq;
typedef xPolySegmentReq xPolyFillRectangleReq;
typedef xPolySegmentReq xPolyFillArcReq;
typedef struct _FillPolyReq {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD32 drawable;
    CARD32 gc;
    BYTE shape;
    BYTE coordMode;
    CARD16 pad1;
} xFillPolyReq;
typedef struct _PutImageReq {
    CARD8 reqType;
    CARD8 format;
    CARD16 length;
    CARD32 drawable;
    CARD32 gc;
    CARD16 width;
    CARD16 height;
    INT16 dstX;
    INT16 dstY;
    CARD8 leftPad;
    CARD8 depth;
    CARD16 pad;
} xPutImageReq;
typedef struct {
    CARD8 reqType;
    CARD8 format;
    CARD16 length;
    CARD32 drawable;
    INT16 x;
    INT16 y;
    CARD16 width;
    CARD16 height;
    CARD32 planeMask;
} xGetImageReq;
typedef struct {
    CARD8 reqType;
    CARD8 pad;
    CARD16 length;
    CARD32 drawable;
    CARD32 gc;
    INT16 x;
    INT16 y;
} xPolyTextReq;
typedef xPolyTextReq xPolyText8Req;
typedef xPolyTextReq xPolyText16Req;
typedef struct {
    CARD8 reqType;
    BYTE nChars;
    CARD16 length;
    CARD32 drawable;
    CARD32 gc;
    INT16 x;
    INT16 y;
} xImageTextReq;
typedef xImageTextReq xImageText8Req;
typedef xImageTextReq xImageText16Req;
typedef struct {
    CARD8 reqType;
    BYTE alloc;
    CARD16 length;
    CARD32 mid;
    CARD32 window;
    CARD32 visual;
} xCreateColormapReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD32 mid;
    CARD32 srcCmap;
} xCopyColormapAndFreeReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD32 cmap;
    CARD16 red;
    CARD16 green;
    CARD16 blue;
    CARD16 pad2;
} xAllocColorReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD32 cmap;
    CARD16 nbytes;
    BYTE pad1;
    BYTE pad2;
} xAllocNamedColorReq;
typedef struct {
    CARD8 reqType;
    BOOL contiguous;
    CARD16 length;
    CARD32 cmap;
    CARD16 colors;
    CARD16 planes;
} xAllocColorCellsReq;
typedef struct {
    CARD8 reqType;
    BOOL contiguous;
    CARD16 length;
    CARD32 cmap;
    CARD16 colors;
    CARD16 red;
    CARD16 green;
    CARD16 blue;
} xAllocColorPlanesReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD32 cmap;
    CARD32 planeMask;
} xFreeColorsReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD32 cmap;
} xStoreColorsReq;
typedef struct {
    CARD8 reqType;
    CARD8 flags;
    CARD16 length;
    CARD32 cmap;
    CARD32 pixel;
    CARD16 nbytes;
    BYTE pad1;
    BYTE pad2;
} xStoreNamedColorReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD32 cmap;
} xQueryColorsReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD32 cmap;
    CARD16 nbytes;
    BYTE pad1;
    BYTE pad2;
} xLookupColorReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD32 cid;
    CARD32 source;
    CARD32 mask;
    CARD16 foreRed;
    CARD16 foreGreen;
    CARD16 foreBlue;
    CARD16 backRed;
    CARD16 backGreen;
    CARD16 backBlue;
    CARD16 x;
    CARD16 y;
} xCreateCursorReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD32 cid;
    CARD32 source;
    CARD32 mask;
    CARD16 sourceChar;
    CARD16 maskChar;
    CARD16 foreRed;
    CARD16 foreGreen;
    CARD16 foreBlue;
    CARD16 backRed;
    CARD16 backGreen;
    CARD16 backBlue;
} xCreateGlyphCursorReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD32 cursor;
    CARD16 foreRed;
    CARD16 foreGreen;
    CARD16 foreBlue;
    CARD16 backRed;
    CARD16 backGreen;
    CARD16 backBlue;
} xRecolorCursorReq;
typedef struct {
    CARD8 reqType;
    CARD8 c_class;
    CARD16 length;
    CARD32 drawable;
    CARD16 width;
    CARD16 height;
} xQueryBestSizeReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD16 nbytes;
    BYTE pad1;
    BYTE pad2;
} xQueryExtensionReq;
typedef struct {
    CARD8 reqType;
    CARD8 numKeyPerModifier;
    CARD16 length;
} xSetModifierMappingReq;
typedef struct {
    CARD8 reqType;
    CARD8 nElts;
    CARD16 length;
} xSetPointerMappingReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD8 firstKeyCode;
    CARD8 count;
    CARD16 pad1;
} xGetKeyboardMappingReq;
typedef struct {
    CARD8 reqType;
    CARD8 keyCodes;
    CARD16 length;
    CARD8 firstKeyCode;
    CARD8 keySymsPerKeyCode;
    CARD16 pad1;
} xChangeKeyboardMappingReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD32 mask;
} xChangeKeyboardControlReq;
typedef struct {
    CARD8 reqType;
    INT8 percent;
    CARD16 length;
} xBellReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    INT16 accelNum;
    INT16 accelDenum;
    INT16 threshold;
    BOOL doAccel;
    BOOL doThresh;
} xChangePointerControlReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    INT16 timeout;
    INT16 interval;
    BYTE preferBlank;
    BYTE allowExpose;
    CARD16 pad2;
} xSetScreenSaverReq;
typedef struct {
    CARD8 reqType;
    BYTE mode;
    CARD16 length;
    CARD8 hostFamily;
    BYTE pad;
    CARD16 hostLength;
} xChangeHostsReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
} xListHostsReq;
typedef struct {
    CARD8 reqType;
    BYTE mode;
    CARD16 length;
} xChangeModeReq;
typedef xChangeModeReq xSetAccessControlReq;
typedef xChangeModeReq xSetCloseDownModeReq;
typedef xChangeModeReq xForceScreenSaverReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD32 window;
    CARD16 nAtoms;
    INT16 nPositions;
} xRotatePropertiesReq;

typedef union {
    xGenericReply generic;
    xGetGeometryReply geom;
    xQueryTreeReply tree;
    xInternAtomReply atom;
    xGetAtomNameReply atomName;
    xGetPropertyReply property;
    xListPropertiesReply listProperties;
    xGetSelectionOwnerReply selection;
    xGrabPointerReply grabPointer;
    xGrabKeyboardReply grabKeyboard;
    xQueryPointerReply pointer;
    xGetMotionEventsReply motionEvents;
    xTranslateCoordsReply coords;
    xGetInputFocusReply inputFocus;
    xQueryTextExtentsReply textExtents;
    xListFontsReply fonts;
    xGetFontPathReply fontPath;
    xGetImageReply image;
    xListInstalledColormapsReply colormaps;
    xAllocColorReply allocColor;
    xAllocNamedColorReply allocNamedColor;
    xAllocColorCellsReply colorCells;
    xAllocColorPlanesReply colorPlanes;
    xQueryColorsReply colors;
    xLookupColorReply lookupColor;
    xQueryBestSizeReply bestSize;
    xQueryExtensionReply extension;
    xListExtensionsReply extensions;
    xSetModifierMappingReply setModifierMapping;
    xGetModifierMappingReply getModifierMapping;
    xSetPointerMappingReply setPointerMapping;
    xGetKeyboardMappingReply getKeyboardMapping;
    xGetPointerMappingReply getPointerMapping;
    xGetPointerControlReply pointerControl;
    xGetScreenSaverReply screenSaver;
    xListHostsReply hosts;
    xError error;
    xEvent event;
} xReply;
typedef struct {
    CARD8 reqType;
    BOOL propagate;
    CARD16 length;
    CARD32 destination;
    CARD32 eventMask;
    xEvent event;
} xSendEventReq;
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/Xresource.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define NULLQUARK	((XrmQuark) 0)

typedef int XrmQuark;
typedef int *XrmQuarkList;
typedef char *XrmString;
typedef enum {
    XrmBindTightly,
    XrmBindLoosely
} XrmBinding;
typedef enum *XrmBindingList;
typedef XrmQuark XrmName;
typedef XrmQuarkList XrmNameList;
typedef XrmQuark XrmClass;
typedef XrmQuarkList XrmClassList;
typedef XrmQuark XrmRepresentation;
typedef struct {
    unsigned int size;
    XPointer addr;
} XrmValue;
typedef struct {
    unsigned int size;
    XPointer addr;
} *XrmValuePtr;
typedef struct _XrmHashBucketRec *XrmHashBucket;
typedef XrmHashBucket *XrmHashTable;
typedef XrmHashTable XrmSearchList[];
typedef struct _XrmHashBucketRec *XrmDatabase;
typedef enum {
    XrmoptionNoArg,
    XrmoptionIsArg,
    XrmoptionStickyArg,
    XrmoptionSepArg,
    XrmoptionResArg,
    XrmoptionSkipArg,
    XrmoptionSkipLine,
    XrmoptionSkipNArgs
} XrmOptionKind;
typedef struct {
    char *option;
    char *specifier;
    XrmOptionKind argKind;
    XPointer value;
} XrmOptionDescRec;
typedef struct {
    char *option;
    char *specifier;
    XrmOptionKind argKind;
    XPointer value;
} *XrmOptionDescList;
extern void XrmCombineDatabase(XrmDatabase, XrmDatabase *, int);
extern int XrmCombineFileDatabase(const char *, XrmDatabase *, int);
extern void XrmDestroyDatabase(XrmDatabase);
extern int XrmEnumerateDatabase(XrmDatabase, XrmNameList, XrmClassList,
				int, int (*)(XrmDatabase *, XrmBindingList,
					     XrmQuarkList,
					     XrmRepresentation *,
					     XrmValue *, XPointer)
				, XPointer);
extern XrmDatabase XrmGetDatabase(Display *);
extern XrmDatabase XrmGetFileDatabase(const char *);
extern int XrmGetResource(XrmDatabase, const char *, const char *, char **,
			  XrmValue *);
extern XrmDatabase XrmGetStringDatabase(const char *);
extern const char *XrmLocaleOfDatabase(XrmDatabase);
extern void XrmMergeDatabases(XrmDatabase, XrmDatabase *);
extern void XrmParseCommand(XrmDatabase *, XrmOptionDescList, int,
			    const char *, int *, char **);
extern XrmQuark XrmPermStringToQuark(const char *);
extern void XrmPutFileDatabase(XrmDatabase, const char *);
extern void XrmPutLineResource(XrmDatabase *, const char *);
extern void XrmPutResource(XrmDatabase *, const char *, const char *,
			   XrmValue *);
extern void XrmPutStringResource(XrmDatabase *, const char *,
				 const char *);
extern int XrmQGetResource(XrmDatabase, XrmNameList, XrmClassList,
			   XrmRepresentation *, XrmValue *);
extern int XrmQGetSearchList(XrmDatabase, XrmNameList, XrmClassList,
			     XrmSearchList, int);
extern int XrmQGetSearchResource(XrmSearchList, XrmName, XrmClass,
				 XrmRepresentation *, XrmValue *);
extern void XrmQPutResource(XrmDatabase *, XrmBindingList, XrmQuarkList,
			    XrmRepresentation, XrmValue *);
extern void XrmQPutStringResource(XrmDatabase *, XrmBindingList,
				  XrmQuarkList, const char *);
extern XrmString XrmQuarkToString(XrmQuark);
extern void XrmSetDatabase(Display *, XrmDatabase);
extern void XrmStringToBindingQuarkList(const char *, XrmBindingList,
					XrmQuarkList);
extern XrmQuark XrmStringToQuark(const char *);
extern void XrmStringToQuarkList(const char *, XrmQuarkList);
extern XrmQuark XrmUniqueQuark(void);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/Xutil.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define IsModifierKey(keysym)	((((KeySym)(keysym)>=XK_Shift_L)&amp;&amp;((KeySym)(keysym)&lt;=XK_Hype
#define IsPrivateKeypadKey(keysym)	(((KeySym)(keysym)>=0x11000000)&amp;&amp;((KeySym)(keysym)&lt;=0x1100FF
#define IsFunctionKey(keysym)	(((KeySym)(keysym)>=XK_F1)&amp;&amp;((KeySym)(keysym)&lt;=XK_F35))
#define IsCursorKey(keysym)	(((KeySym)(keysym)>=XK_Home)&amp;&amp;((KeySym)(keysym)&lt;XK_Select))
#define IsPFKey(keysym)	(((KeySym)(keysym)>=XK_KP_F1)&amp;&amp;((KeySym)(keysym)&lt;=XK_KP_F4))
#define IsKeypadKey(keysym)	(((KeySym)(keysym)>=XK_KP_Space)&amp;&amp;((KeySym)(keysym)&lt;=XK_KP_E
#define IsMiscFunctionKey(keysym)	(((KeySym)(keysym)>=XK_Select)&amp;&amp;((KeySym)(keysym)&lt;=XK_Break)
#define XStringToContext(string)	((XContext)XrmStringToQuark(string))
#define XUniqueContext()	((XContext)XrmUniqueQuark())
#define ReleaseByFreeingColormap	((XID)1L)
#define InputHint	(1L&lt;&lt;0)
#define USPosition	(1L&lt;&lt;0)
#define StateHint	(1L&lt;&lt;1)
#define USSize	(1L&lt;&lt;1)
#define IconPixmapHint	(1L&lt;&lt;2)
#define PPosition	(1L&lt;&lt;2)
#define IconWindowHint	(1L&lt;&lt;3)
#define PSize	(1L&lt;&lt;3)
#define IconPositionHint	(1L&lt;&lt;4)
#define PMinSize	(1L&lt;&lt;4)
#define IconMaskHint	(1L&lt;&lt;5)
#define PMaxSize	(1L&lt;&lt;5)
#define PResizeInc	(1L&lt;&lt;6)
#define WindowGroupHint	(1L&lt;&lt;6)
#define PAspect	(1L&lt;&lt;7)
#define PBaseSize	(1L&lt;&lt;8)
#define XUrgencyHint	(1L&lt;&lt;8)
#define PWinGravity	(1L&lt;&lt;9)
#define AllHints	(InputHint|StateHint|IconPixmapHint|IconWindowHint|IconPositionHint|IconMaskHint|WindowGroupHint)
#define PAllHints	(PPosition|PSize|PMinSize|PMaxSize|PResizeInc|PAspect)
#define XNoMemory	-1
#define XLocaleNotSupported	-2
#define XConverterNotFound	-3
#define BitmapSuccess	0
#define DontCareState	0
#define RectangleOut	0
#define WithdrawnState	0
#define XCSUCCESS	0
#define VisualNoMask	0x0
#define NoValue	0x0000
#define XValue	0x0001
#define YValue	0x0002
#define WidthValue	0x0004
#define HeightValue	0x0008
#define AllValues	0x000F
#define XNegative	0x0010
#define YNegative	0x0020
#define VisualIDMask	0x1
#define VisualRedMaskMask	0x10
#define VisualBitsPerRGBMask	0x100
#define VisualAllMask	0x1FF
#define VisualScreenMask	0x2
#define VisualGreenMaskMask	0x20
#define VisualDepthMask	0x4
#define VisualBlueMaskMask	0x40
#define VisualClassMask	0x8
#define VisualColormapSizeMask	0x80
#define BitmapOpenFailed	1
#define NormalState	1
#define RectangleIn	1
#define XCNOMEM	1
#define BitmapFileInvalid	2
#define RectanglePart	2
#define XCNOENT	2
#define ZoomState	2
#define BitmapNoMemory	3
#define IconicState	3
#define InactiveState	4

typedef struct {
    long int flags;
    int x;
    int y;
    int width;
    int height;
    int min_width;
    int min_height;
    int max_width;
    int max_height;
    int width_inc;
    int height_inc;
    struct {
	int x;
	int y;
    } min_aspect;
    struct {
	int x;
	int y;
    } max_aspect;
    int base_width;
    int base_height;
    int win_gravity;
} XSizeHints;
typedef struct {
    long int flags;
    int input;
    int initial_state;
    Pixmap icon_pixmap;
    Window icon_window;
    int icon_x;
    int icon_y;
    Pixmap icon_mask;
    XID window_group;
} XWMHints;
typedef struct {
    unsigned char *value;
    Atom encoding;
    int format;
    unsigned long int nitems;
} XTextProperty;
typedef struct {
    int min_width;
    int min_height;
    int max_width;
    int max_height;
    int width_inc;
    int height_inc;
} XIconSize;
typedef struct {
    char *res_name;
    char *res_class;
} XClassHint;
typedef struct _XComposeStatus {
    XPointer compose_ptr;
    int chars_matched;
} XComposeStatus;
typedef struct _XRegion *Region;
typedef struct {
    Visual *visual;
    VisualID visualid;
    int screen;
    int depth;
    int c_class;
    unsigned long int red_mask;
    unsigned long int green_mask;
    unsigned long int blue_mask;
    int colormap_size;
    int bits_per_rgb;
} XVisualInfo;
typedef struct {
    Colormap colormap;
    unsigned long int red_max;
    unsigned long int red_mult;
    unsigned long int green_max;
    unsigned long int green_mult;
    unsigned long int blue_max;
    unsigned long int blue_mult;
    unsigned long int base_pixel;
    VisualID visualid;
    XID killid;
} XStandardColormap;
typedef int XContext;
typedef enum {
    XStringStyle = 0,
    XCompoundTextStyle = 1,
    XTextStyle = 2,
    XStdICCTextStyle = 3,
    XUTF8StringStyle = 4
} XICCEncodingStyle;
extern int XAddPixel(XImage *, long int);
extern XClassHint *XAllocClassHint(void);
extern XIconSize *XAllocIconSize(void);
extern XSizeHints *XAllocSizeHints(void);
extern XStandardColormap *XAllocStandardColormap(void);
extern XWMHints *XAllocWMHints(void);
extern int XClipBox(Region, XRectangle *);
extern void XConvertCase(KeySym, KeySym *, KeySym *);
extern Region XCreateRegion(void);
extern const char *XDefaultString(void);
extern int XDeleteContext(Display *, XID, XContext);
extern int XDestroyImage(XImage *);
extern int XDestroyRegion(Region);
extern int XEmptyRegion(Region);
extern int XEqualRegion(Region, Region);
extern int XFindContext(Display *, XID, XContext, XPointer *);
extern int XGetClassHint(Display *, Window, XClassHint *);
extern int XGetIconSizes(Display *, Window, XIconSize * *, int *);
extern int XGetNormalHints(Display *, Window, XSizeHints *);
extern unsigned long int XGetPixel(XImage *, int, int);
extern int XGetRGBColormaps(Display *, Window, XStandardColormap * *,
			    int *, Atom);
extern int XGetSizeHints(Display *, Window, XSizeHints *, Atom);
extern int XGetStandardColormap(Display *, Window, XStandardColormap *,
				Atom);
extern int XGetTextProperty(Display *, Window, XTextProperty *, Atom);
extern XVisualInfo *XGetVisualInfo(Display *, long int, XVisualInfo *,
				   int *);
extern int XGetWMClientMachine(Display *, Window, XTextProperty *);
extern XWMHints *XGetWMHints(Display *, Window);
extern int XGetWMIconName(Display *, Window, XTextProperty *);
extern int XGetWMName(Display *, Window, XTextProperty *);
extern int XGetWMNormalHints(Display *, Window, XSizeHints *, long int *);
extern int XGetWMSizeHints(Display *, Window, XSizeHints *, long int *,
			   Atom);
extern int XGetZoomHints(Display *, Window, XSizeHints *);
extern int XIntersectRegion(Region, Region, Region);
extern int XLookupString(XKeyEvent *, char *, int, KeySym *,
			 XComposeStatus *);
extern int XMatchVisualInfo(Display *, int, int, int, XVisualInfo *);
extern int XOffsetRegion(Region, int, int);
extern int XPointInRegion(Region, int, int);
extern Region XPolygonRegion(XPoint *, int, int);
extern int XPutPixel(XImage *, int, int, unsigned long int);
extern int XRectInRegion(Region, int, int, unsigned int, unsigned int);
extern int XSaveContext(Display *, XID, XContext, const char *);
extern int XSetClassHint(Display *, Window, XClassHint *);
extern int XSetIconSizes(Display *, Window, XIconSize *, int);
extern int XSetNormalHints(Display *, Window, XSizeHints *);
extern void XSetRGBColormaps(Display *, Window, XStandardColormap *, int,
			     Atom);
extern int XSetRegion(Display *, GC, Region);
extern int XSetSizeHints(Display *, Window, XSizeHints *, Atom);
extern void XSetStandardColormap(Display *, Window, XStandardColormap *,
				 Atom);
extern int XSetStandardProperties(Display *, Window, const char *,
				  const char *, Pixmap, char **, int,
				  XSizeHints *);
extern void XSetTextProperty(Display *, Window, XTextProperty *, Atom);
extern void XSetWMClientMachine(Display *, Window, XTextProperty *);
extern int XSetWMHints(Display *, Window, XWMHints *);
extern void XSetWMIconName(Display *, Window, XTextProperty *);
extern void XSetWMName(Display *, Window, XTextProperty *);
extern void XSetWMNormalHints(Display *, Window, XSizeHints *);
extern void XSetWMProperties(Display *, Window, XTextProperty *,
			     XTextProperty *, char **, int, XSizeHints *,
			     XWMHints *, XClassHint *);
extern void XSetWMSizeHints(Display *, Window, XSizeHints *, Atom);
extern int XSetZoomHints(Display *, Window, XSizeHints *);
extern int XShrinkRegion(Region, int, int);
extern int XStringListToTextProperty(char **, int, XTextProperty *);
extern XImage *XSubImage(XImage *, int, int, unsigned int, unsigned int);
extern int XSubtractRegion(Region, Region, Region);
extern int XTextPropertyToStringList(XTextProperty *, char ***, int *);
extern int XUnionRectWithRegion(XRectangle *, Region, Region);
extern int XUnionRegion(Region, Region, Region);
extern int XWMGeometry(Display *, int, const char *, const char *,
		       unsigned int, XSizeHints *, int *, int *, int *,
		       int *, int *);
extern int XXorRegion(Region, Region, Region);
extern void XmbSetWMProperties(Display *, Window, const char *,
			       const char *, char **, int, XSizeHints *,
			       XWMHints *, XClassHint *);
extern int XmbTextListToTextProperty(Display *, char **, int,
				     XICCEncodingStyle, XTextProperty *);
extern int XmbTextPropertyToTextList(Display *, XTextProperty *, char ***,
				     int *);
extern void XwcFreeStringList(wchar_t * *);
extern int XwcTextListToTextProperty(Display *, wchar_t * *, int,
				     XICCEncodingStyle, XTextProperty *);
extern int XwcTextPropertyToTextList(Display *, XTextProperty *,
				     wchar_t * **, int *);
extern int Xutf8TextPropertyToTextList(Display *, XTextProperty *,
				       char ***, int *);
extern int Xutf8TextListToTextProperty(Display *, char **, int,
				       XICCEncodingStyle, XTextProperty *);
</SCREEN>
</SECT2>
</SECT1>
<SECT1 ID=libX11man>
<TITLE>Interface Definitions for libX11</TITLE>
<PARA>
The interfaces defined on the following pages are included in libX11 and are defined
by this specification.
Unless otherwise noted, these interfaces shall be included
in the source standard.
</PARA>
<PARA>
Other interfaces listed in <XREF LINKEND=libX11> shall behave as described
in the referenced base document.
</PARA>
<!-- MISSING DEFINITION FOR Xutf8TextListToTextProperty -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR Xutf8TextPropertyToTextList -->
<!-- Lets just hope nobody notices -->
</SECT1>
<!-- End of text generated from database -->


<!-- Start of generated text - do not edit! -->
<!-- generated from the LSB specification database by mklibspec -->
<SECT1 ID=libSM>
<TITLE>Interfaces for libSM</TITLE>
<PARA>
<XREF LINKEND="lib-libSM-def"> defines the library name and shared object name
for the libSM library
</PARA>
<TABLE id="lib-libSM-def">
<TITLE>libSM Definition</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Library:</ENTRY>
<ENTRY>libSM</ENTRY>
</ROW>
<ROW>
<ENTRY>SONAME:</ENTRY>
<ENTRY>libSM.so.6</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The behavior of the interfaces in this library is specified by the following specifications:<SIMPLELIST COLUMNS=1>
<MEMBER ID='REFSTD.libSM.1'>
[XSM] <XREF LINKEND="std.XSM">
</MEMBER>
</SIMPLELIST>
</PARA>
<!-- debug: database interface name Session Management Functions -->
<SECT2>
<!--libgroup-->
<TITLE>Session Management Functions</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for Session Management Functions</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic functions
for Session Management Functions specified in <XREF linkend="tbl-libSM-sessi-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<TABLE id="tbl-libSM-sessi-ints">
<TITLE>libSM - Session Management Functions Function Interfaces</TITLE>
<TGROUP COLS=4>
<TBODY>
<ROW>
<ENTRY><indexterm><primary>SmFreeProperty</primary></indexterm>SmFreeProperty <LINK LINKEND="REFSTD.libSM.1">[XSM]</LINK></ENTRY>
<ENTRY><indexterm><primary>SmFreeReasons</primary></indexterm>SmFreeReasons <LINK LINKEND="REFSTD.libSM.1">[XSM]</LINK></ENTRY>
<ENTRY><indexterm><primary>SmcClientID</primary></indexterm>SmcClientID <LINK LINKEND="REFSTD.libSM.1">[XSM]</LINK></ENTRY>
<ENTRY><indexterm><primary>SmcCloseConnection</primary></indexterm>SmcCloseConnection <LINK LINKEND="REFSTD.libSM.1">[XSM]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>SmcDeleteProperties</primary></indexterm>SmcDeleteProperties <LINK LINKEND="REFSTD.libSM.1">[XSM]</LINK></ENTRY>
<ENTRY><indexterm><primary>SmcGetIceConnection</primary></indexterm>SmcGetIceConnection <LINK LINKEND="REFSTD.libSM.1">[XSM]</LINK></ENTRY>
<ENTRY><indexterm><primary>SmcGetProperties</primary></indexterm>SmcGetProperties <LINK LINKEND="REFSTD.libSM.1">[XSM]</LINK></ENTRY>
<ENTRY><indexterm><primary>SmcInteractDone</primary></indexterm>SmcInteractDone <LINK LINKEND="REFSTD.libSM.1">[XSM]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>SmcInteractRequest</primary></indexterm>SmcInteractRequest <LINK LINKEND="REFSTD.libSM.1">[XSM]</LINK></ENTRY>
<ENTRY><indexterm><primary>SmcModifyCallbacks</primary></indexterm>SmcModifyCallbacks <LINK LINKEND="REFSTD.libSM.1">[XSM]</LINK></ENTRY>
<ENTRY><indexterm><primary>SmcOpenConnection</primary></indexterm>SmcOpenConnection <LINK LINKEND="REFSTD.libSM.1">[XSM]</LINK></ENTRY>
<ENTRY><indexterm><primary>SmcProtocolRevision</primary></indexterm>SmcProtocolRevision <LINK LINKEND="REFSTD.libSM.1">[XSM]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>SmcProtocolVersion</primary></indexterm>SmcProtocolVersion <LINK LINKEND="REFSTD.libSM.1">[XSM]</LINK></ENTRY>
<ENTRY><indexterm><primary>SmcRelease</primary></indexterm>SmcRelease <LINK LINKEND="REFSTD.libSM.1">[XSM]</LINK></ENTRY>
<ENTRY><indexterm><primary>SmcRequestSaveYourself</primary></indexterm>SmcRequestSaveYourself <LINK LINKEND="REFSTD.libSM.1">[XSM]</LINK></ENTRY>
<ENTRY><indexterm><primary>SmcRequestSaveYourselfPhase2</primary></indexterm>SmcRequestSaveYourselfPhase2 <LINK LINKEND="REFSTD.libSM.1">[XSM]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>SmcSaveYourselfDone</primary></indexterm>SmcSaveYourselfDone <LINK LINKEND="REFSTD.libSM.1">[XSM]</LINK></ENTRY>
<ENTRY><indexterm><primary>SmcSetErrorHandler</primary></indexterm>SmcSetErrorHandler <LINK LINKEND="REFSTD.libSM.1">[XSM]</LINK></ENTRY>
<ENTRY><indexterm><primary>SmcSetProperties</primary></indexterm>SmcSetProperties <LINK LINKEND="REFSTD.libSM.1">[XSM]</LINK></ENTRY>
<ENTRY><indexterm><primary>SmcVendor</primary></indexterm>SmcVendor <LINK LINKEND="REFSTD.libSM.1">[XSM]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>SmsCleanUp</primary></indexterm>SmsCleanUp <LINK LINKEND="REFSTD.libSM.1">[XSM]</LINK></ENTRY>
<ENTRY><indexterm><primary>SmsClientHostName</primary></indexterm>SmsClientHostName <LINK LINKEND="REFSTD.libSM.1">[XSM]</LINK></ENTRY>
<ENTRY><indexterm><primary>SmsClientID</primary></indexterm>SmsClientID <LINK LINKEND="REFSTD.libSM.1">[XSM]</LINK></ENTRY>
<ENTRY><indexterm><primary>SmsDie</primary></indexterm>SmsDie <LINK LINKEND="REFSTD.libSM.1">[XSM]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>SmsGenerateClientID</primary></indexterm>SmsGenerateClientID <LINK LINKEND="REFSTD.libSM.1">[XSM]</LINK></ENTRY>
<ENTRY><indexterm><primary>SmsGetIceConnection</primary></indexterm>SmsGetIceConnection <LINK LINKEND="REFSTD.libSM.1">[XSM]</LINK></ENTRY>
<ENTRY><indexterm><primary>SmsInitialize</primary></indexterm>SmsInitialize <LINK LINKEND="REFSTD.libSM.1">[XSM]</LINK></ENTRY>
<ENTRY><indexterm><primary>SmsInteract</primary></indexterm>SmsInteract <LINK LINKEND="REFSTD.libSM.1">[XSM]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>SmsProtocolRevision</primary></indexterm>SmsProtocolRevision <LINK LINKEND="REFSTD.libSM.1">[XSM]</LINK></ENTRY>
<ENTRY><indexterm><primary>SmsProtocolVersion</primary></indexterm>SmsProtocolVersion <LINK LINKEND="REFSTD.libSM.1">[XSM]</LINK></ENTRY>
<ENTRY><indexterm><primary>SmsRegisterClientReply</primary></indexterm>SmsRegisterClientReply <LINK LINKEND="REFSTD.libSM.1">[XSM]</LINK></ENTRY>
<ENTRY><indexterm><primary>SmsReturnProperties</primary></indexterm>SmsReturnProperties <LINK LINKEND="REFSTD.libSM.1">[XSM]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>SmsSaveComplete</primary></indexterm>SmsSaveComplete <LINK LINKEND="REFSTD.libSM.1">[XSM]</LINK></ENTRY>
<ENTRY><indexterm><primary>SmsSaveYourself</primary></indexterm>SmsSaveYourself <LINK LINKEND="REFSTD.libSM.1">[XSM]</LINK></ENTRY>
<ENTRY><indexterm><primary>SmsSaveYourselfPhase2</primary></indexterm>SmsSaveYourselfPhase2 <LINK LINKEND="REFSTD.libSM.1">[XSM]</LINK></ENTRY>
<ENTRY><indexterm><primary>SmsSetErrorHandler</primary></indexterm>SmsSetErrorHandler <LINK LINKEND="REFSTD.libSM.1">[XSM]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>SmsShutdownCancelled</primary></indexterm>SmsShutdownCancelled <LINK LINKEND="REFSTD.libSM.1">[XSM]</LINK></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>
</SECT2>
</SECT1>
<SECT1 ID=libSM-ddefs>
<TITLE>Data Definitions for libSM</TITLE>
<PARA>
This section defines global identifiers and their values that are associated
with interfaces contained in libSM.
These definitions are organized into groups that
correspond to system headers. This convention is used as a
convenience for the reader, and does not imply the existence
of these headers, or their content.
Where an interface is defined as requiring a particular system header file
all of the data definitions for that system header file presented here shall be in effect.
</PARA>
<PARA>
This section gives data definitions to promote binary application
portability, not to repeat source interface definitions available
elsewhere. System providers and application developers should use this ABI
to supplement - not to replace - source interface definition specifications.
</PARA>
<PARA>
This specification uses the <XREF LINKEND='std.ISOC99'> C Language as the reference programming language, and data definitions are specified in ISO C format. The C language is used here as a convenient notation. Using a C language description of these data objects does not preclude their use by other programming languages.</PARA>
<SECT2>
<TITLE>X11/SM/SM.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define SM_Error	0
#define SmDialogError	0
#define SmInteractStyleNone	0
#define SmProtoMinor	0
#define SmRestartIfRunning	0
#define SmSaveGlobal	0
#define SM_RegisterClient	1
#define SmDialogNormal	1
#define SmInteractStyleErrors	1
#define SmProtoMajor	1
#define SmRestartAnyway	1
#define SmSaveLocal	1
#define SM_ShutdownCancelled	10
#define SM_CloseConnection	11
#define SM_SetProperties	12
#define SM_DeleteProperties	13
#define SM_GetProperties	14
#define SM_PropertiesReply	15
#define SM_SaveYourselfPhase2Request	16
#define SM_SaveYourselfPhase2	17
#define SM_SaveComplete	18
#define SM_RegisterClientReply	2
#define SmInteractStyleAny	2
#define SmRestartImmediately	2
#define SmSaveBoth	2
#define SM_SaveYourself	3
#define SmRestartNever	3
#define SM_SaveYourselfRequest	4
#define SM_InteractRequest	5
#define SM_Interact	6
#define SM_InteractDone	7
#define SM_SaveYourselfDone	8
#define SM_Die	9
#define SmARRAY8	"ARRAY8"
#define SmCARD8	"CARD8"
#define SmCloneCommand	"CloneCommand"
#define SmCurrentDirectory	"CurrentDirectory"
#define SmDiscardCommand	"DiscardCommand"
#define SmEnvironment	"Environment"
#define SmLISTofARRAY8	"LISTofARRAY8"
#define SmProcessID	"ProcessID"
#define SmProgram	"Program"
#define SmResignCommand	"ResignCommand"
#define SmRestartCommand	"RestartCommand"
#define SmRestartStyleHint	"RestartStyleHint"
#define SmShutdownCommand	"ShutdownCommand"
#define SmUserID	"UserID"
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/SM/SMlib.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define SmcSaveYourselfProcMask	(1L &lt;&lt; 0)
#define SmsRegisterClientProcMask	(1L &lt;&lt; 0)
#define SmcDieProcMask	(1L &lt;&lt; 1)
#define SmsInteractRequestProcMask	(1L &lt;&lt; 1)
#define SmcSaveCompleteProcMask	(1L &lt;&lt; 2)
#define SmsInteractDoneProcMask	(1L &lt;&lt; 2)
#define SmcShutdownCancelledProcMask	(1L &lt;&lt; 3)
#define SmsSaveYourselfRequestProcMask	(1L &lt;&lt; 3)
#define SmsSaveYourselfP2RequestProcMask	(1L &lt;&lt; 4)
#define SmsSaveYourselfDoneProcMask	(1L &lt;&lt; 5)
#define SmsCloseConnectionProcMask	(1L &lt;&lt; 6)
#define SmsSetPropertiesProcMask	(1L &lt;&lt; 7)
#define SmsDeletePropertiesProcMask	(1L &lt;&lt; 8)
#define SmsGetPropertiesProcMask	(1L &lt;&lt; 9)

typedef void *SmPointer;
typedef struct {
    int length;
    SmPointer value;
} SmPropValue;
typedef struct {
    char *name;
    char *type;
    int num_vals;
    SmPropValue *vals;
} SmProp;
struct _SmcConn;
typedef struct _SmcConn *SmcConn;
typedef void (*SmcSaveYourselfProc) (SmcConn, SmPointer, int, int, int,
				     int);
typedef void (*SmcDieProc) (SmcConn, SmPointer);
typedef void (*SmcSaveCompleteProc) (SmcConn, SmPointer);
typedef void (*SmcShutdownCancelledProc) (SmcConn, SmPointer);
typedef struct {
    struct {
	SmcSaveYourselfProc callback;
	SmPointer client_data;
    } save_yourself;
    struct {
	SmcDieProc callback;
	SmPointer client_data;
    } die;
    struct {
	SmcSaveCompleteProc callback;
	SmPointer client_data;
    } save_complete;
    struct {
	SmcShutdownCancelledProc callback;
	SmPointer client_data;
    } shutdown_cancelled;
} SmcCallbacks;
struct _SmsConn;
typedef struct _SmsConn *SmsConn;
typedef void (*SmsErrorHandler) (SmsConn, int, int, long unsigned int, int,
				 int, SmPointer);
typedef void (*SmcErrorHandler) (SmcConn, int, int, long unsigned int, int,
				 int, SmPointer);
typedef int (*SmsRegisterClientProc) (SmsConn, SmPointer, char *);
typedef void (*SmsInteractRequestProc) (SmsConn, SmPointer, int);
typedef void (*SmsInteractDoneProc) (SmsConn, SmPointer, int);
typedef void (*SmsSaveYourselfRequestProc) (SmsConn, SmPointer, int, int,
					    int, int, int);
typedef void (*SmsSaveYourselfPhase2RequestProc) (SmsConn, SmPointer);
typedef void (*SmsSaveYourselfDoneProc) (SmsConn, SmPointer, int);
typedef void (*SmsCloseConnectionProc) (SmsConn, SmPointer, int, char **);
typedef void (*SmsSetPropertiesProc) (SmsConn, SmPointer, int, SmProp * *);
typedef void (*SmsDeletePropertiesProc) (SmsConn, SmPointer, int, char **);
typedef void (*SmsGetPropertiesProc) (SmsConn, SmPointer);
typedef struct {
    struct {
	SmsRegisterClientProc callback;
	SmPointer manager_data;
    } register_client;
    struct {
	SmsInteractRequestProc callback;
	SmPointer manager_data;
    } interact_request;
    struct {
	SmsInteractDoneProc callback;
	SmPointer manager_data;
    } interact_done;
    struct {
	SmsSaveYourselfRequestProc callback;
	SmPointer manager_data;
    } save_yourself_request;
    struct {
	SmsSaveYourselfPhase2RequestProc callback;
	SmPointer manager_data;
    } save_yourself_phase2_request;
    struct {
	SmsSaveYourselfDoneProc callback;
	SmPointer manager_data;
    } save_yourself_done;
    struct {
	SmsCloseConnectionProc callback;
	SmPointer manager_data;
    } close_connection;
    struct {
	SmsSetPropertiesProc callback;
	SmPointer manager_data;
    } set_properties;
    struct {
	SmsDeletePropertiesProc callback;
	SmPointer manager_data;
    } delete_properties;
    struct {
	SmsGetPropertiesProc callback;
	SmPointer manager_data;
    } get_properties;
} SmsCallbacks;
typedef int (*SmsNewClientProc) (SmsConn, SmPointer, long unsigned int *,
				 SmsCallbacks *, char **);
typedef void (*SmcPropReplyProc) (SmcConn, SmPointer, int, SmProp * *);
typedef void (*SmcInteractProc) (SmcConn, SmPointer);
typedef void (*SmcSaveYourselfPhase2Proc) (SmcConn, SmPointer);
typedef enum SmcCloseStatus;
extern void SmFreeProperty(SmProp *);
extern void SmFreeReasons(int, char **);
extern char *SmcClientID(SmcConn);
extern SmcCloseStatus SmcCloseConnection(SmcConn, int, char **);
extern void SmcDeleteProperties(SmcConn, int, char **);
extern IceConn SmcGetIceConnection(SmcConn);
extern int SmcGetProperties(SmcConn, SmcPropReplyProc, SmPointer);
extern void SmcInteractDone(SmcConn, int);
extern int SmcInteractRequest(SmcConn, int, SmcInteractProc, SmPointer);
extern void SmcModifyCallbacks(SmcConn, long unsigned int, SmcCallbacks *);
extern SmcConn SmcOpenConnection(char *, SmPointer, int, int,
				 long unsigned int, SmcCallbacks *, char *,
				 char **, int, char *);
extern int SmcProtocolRevision(SmcConn);
extern int SmcProtocolVersion(SmcConn);
extern char *SmcRelease(SmcConn);
extern void SmcRequestSaveYourself(SmcConn, int, int, int, int, int);
extern int SmcRequestSaveYourselfPhase2(SmcConn, SmcSaveYourselfPhase2Proc,
					SmPointer);
extern void SmcSaveYourselfDone(SmcConn, int);
extern SmcErrorHandler SmcSetErrorHandler(SmcErrorHandler);
extern void SmcSetProperties(SmcConn, int, SmProp * *);
extern char *SmcVendor(SmcConn);
extern void SmsCleanUp(SmsConn);
extern char *SmsClientHostName(SmsConn);
extern char *SmsClientID(SmsConn);
extern void SmsDie(SmsConn);
extern char *SmsGenerateClientID(SmsConn);
extern IceConn SmsGetIceConnection(SmsConn);
extern int SmsInitialize(char *, char *, SmsNewClientProc, SmPointer,
			 IceHostBasedAuthProc, int, char *);
extern void SmsInteract(SmsConn);
extern int SmsProtocolRevision(SmsConn);
extern int SmsProtocolVersion(SmsConn);
extern int SmsRegisterClientReply(SmsConn, char *);
extern void SmsReturnProperties(SmsConn, int, SmProp * *);
extern void SmsSaveComplete(SmsConn);
extern void SmsSaveYourself(SmsConn, int, int, int, int);
extern void SmsSaveYourselfPhase2(SmsConn);
extern SmsErrorHandler SmsSetErrorHandler(SmsErrorHandler);
extern void SmsShutdownCancelled(SmsConn);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/SM/SMproto.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define sz_smSaveYourselfMsg	16
#define sz_smSaveYourselfRequestMsg	16
#define sz_smCloseConnectionMsg	8
#define sz_smDeletePropertiesMsg	8
#define sz_smDieMsg	8
#define sz_smGetPropertiesMsg	8
#define sz_smInteractDoneMsg	8
#define sz_smInteractMsg	8
#define sz_smInteractRequestMsg	8
#define sz_smPropertiesReplyMsg	8
#define sz_smRegisterClientMsg	8
#define sz_smRegisterClientReplyMsg	8
#define sz_smSaveCompleteMsg	8
#define sz_smSaveYourselfDoneMsg	8
#define sz_smSaveYourselfPhase2Msg	8
#define sz_smSaveYourselfPhase2RequestMsg	8
#define sz_smSetPropertiesMsg	8
#define sz_smShutdownCancelledMsg	8
</SCREEN>
</SECT2>
</SECT1>
<!-- End of text generated from database -->


<!-- Start of generated text - do not edit! -->
<!-- generated from the LSB specification database by mklibspec -->
<SECT1 ID=libICE>
<TITLE>Interfaces for libICE</TITLE>
<PARA>
<XREF LINKEND="lib-libICE-def"> defines the library name and shared object name
for the libICE library
</PARA>
<TABLE id="lib-libICE-def">
<TITLE>libICE Definition</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Library:</ENTRY>
<ENTRY>libICE</ENTRY>
</ROW>
<ROW>
<ENTRY>SONAME:</ENTRY>
<ENTRY>libICE.so.6</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The behavior of the interfaces in this library is specified by the following specifications:<SIMPLELIST COLUMNS=1>
<MEMBER ID='REFSTD.libICE.1'>
[XICE] <XREF LINKEND="std.XICE">
</MEMBER>
</SIMPLELIST>
</PARA>
<!-- debug: database interface name ICE Functions -->
<SECT2>
<!--libgroup-->
<TITLE>ICE Functions</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for ICE Functions</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic functions
for ICE Functions specified in <XREF linkend="tbl-libICE-ice-f-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<TABLE id="tbl-libICE-ice-f-ints">
<TITLE>libICE - ICE Functions Function Interfaces</TITLE>
<TGROUP COLS=4>
<TBODY>
<ROW>
<ENTRY><indexterm><primary>IceAcceptConnection</primary></indexterm>IceAcceptConnection <LINK LINKEND="REFSTD.libICE.1">[XICE]</LINK></ENTRY>
<ENTRY><indexterm><primary>IceAddConnectionWatch</primary></indexterm>IceAddConnectionWatch <LINK LINKEND="REFSTD.libICE.1">[XICE]</LINK></ENTRY>
<ENTRY><indexterm><primary>IceAllocScratch</primary></indexterm>IceAllocScratch <LINK LINKEND="REFSTD.libICE.1">[XICE]</LINK></ENTRY>
<ENTRY><indexterm><primary>IceAppLockConn</primary></indexterm>IceAppLockConn <LINK LINKEND="REFSTD.libICE.1">[XICE]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>IceAppUnlockConn</primary></indexterm>IceAppUnlockConn <LINK LINKEND="REFSTD.libICE.1">[XICE]</LINK></ENTRY>
<ENTRY><indexterm><primary>IceAuthFileName</primary></indexterm>IceAuthFileName <LINK LINKEND="REFSTD.libICE.1">[XICE]</LINK></ENTRY>
<ENTRY><indexterm><primary>IceCheckShutdownNegotiation</primary></indexterm>IceCheckShutdownNegotiation <LINK LINKEND="REFSTD.libICE.1">[XICE]</LINK></ENTRY>
<ENTRY><indexterm><primary>IceCloseConnection</primary></indexterm>IceCloseConnection <LINK LINKEND="REFSTD.libICE.1">[XICE]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>IceComposeNetworkIdList</primary></indexterm>IceComposeNetworkIdList <LINK LINKEND="REFSTD.libICE.1">[XICE]</LINK></ENTRY>
<ENTRY><indexterm><primary>IceConnectionNumber</primary></indexterm>IceConnectionNumber <LINK LINKEND="REFSTD.libICE.1">[XICE]</LINK></ENTRY>
<ENTRY><indexterm><primary>IceConnectionStatus</primary></indexterm>IceConnectionStatus <LINK LINKEND="REFSTD.libICE.1">[XICE]</LINK></ENTRY>
<ENTRY><indexterm><primary>IceConnectionString</primary></indexterm>IceConnectionString <LINK LINKEND="REFSTD.libICE.1">[XICE]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>IceFlush</primary></indexterm>IceFlush <LINK LINKEND="REFSTD.libICE.1">[XICE]</LINK></ENTRY>
<ENTRY><indexterm><primary>IceFreeAuthFileEntry</primary></indexterm>IceFreeAuthFileEntry <LINK LINKEND="REFSTD.libICE.1">[XICE]</LINK></ENTRY>
<ENTRY><indexterm><primary>IceFreeListenObjs</primary></indexterm>IceFreeListenObjs <LINK LINKEND="REFSTD.libICE.1">[XICE]</LINK></ENTRY>
<ENTRY><indexterm><primary>IceGenerateMagicCookie</primary></indexterm>IceGenerateMagicCookie <LINK LINKEND="REFSTD.libICE.1">[XICE]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>IceGetAuthFileEntry</primary></indexterm>IceGetAuthFileEntry <LINK LINKEND="REFSTD.libICE.1">[XICE]</LINK></ENTRY>
<ENTRY><indexterm><primary>IceGetConnectionContext</primary></indexterm>IceGetConnectionContext <LINK LINKEND="REFSTD.libICE.1">[XICE]</LINK></ENTRY>
<ENTRY><indexterm><primary>IceGetInBufSize</primary></indexterm>IceGetInBufSize <LINK LINKEND="REFSTD.libICE.1">[XICE]</LINK></ENTRY>
<ENTRY><indexterm><primary>IceGetListenConnectionNumber</primary></indexterm>IceGetListenConnectionNumber <LINK LINKEND="REFSTD.libICE.1">[XICE]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>IceGetListenConnectionString</primary></indexterm>IceGetListenConnectionString <LINK LINKEND="REFSTD.libICE.1">[XICE]</LINK></ENTRY>
<ENTRY><indexterm><primary>IceGetOutBufSize</primary></indexterm>IceGetOutBufSize <LINK LINKEND="REFSTD.libICE.1">[XICE]</LINK></ENTRY>
<ENTRY><indexterm><primary>IceInitThreads</primary></indexterm>IceInitThreads <LINK LINKEND="REFSTD.libICE.1">[XICE]</LINK></ENTRY>
<ENTRY><indexterm><primary>IceLastReceivedSequenceNumber</primary></indexterm>IceLastReceivedSequenceNumber <LINK LINKEND="REFSTD.libICE.1">[XICE]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>IceLastSentSequenceNumber</primary></indexterm>IceLastSentSequenceNumber <LINK LINKEND="REFSTD.libICE.1">[XICE]</LINK></ENTRY>
<ENTRY><indexterm><primary>IceListenForConnections</primary></indexterm>IceListenForConnections <LINK LINKEND="REFSTD.libICE.1">[XICE]</LINK></ENTRY>
<ENTRY><indexterm><primary>IceListenForWellKnownConnections</primary></indexterm>IceListenForWellKnownConnections <LINK LINKEND="REFSTD.libICE.1">[XICE]</LINK></ENTRY>
<ENTRY><indexterm><primary>IceLockAuthFile</primary></indexterm>IceLockAuthFile <LINK LINKEND="REFSTD.libICE.1">[XICE]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>IceOpenConnection</primary></indexterm>IceOpenConnection <LINK LINKEND="REFSTD.libICE.1">[XICE]</LINK></ENTRY>
<ENTRY><indexterm><primary>IcePing</primary></indexterm>IcePing <LINK LINKEND="REFSTD.libICE.1">[XICE]</LINK></ENTRY>
<ENTRY><indexterm><primary>IceProcessMessages</primary></indexterm>IceProcessMessages <LINK LINKEND="REFSTD.libICE.1">[XICE]</LINK></ENTRY>
<ENTRY><indexterm><primary>IceProtocolRevision</primary></indexterm>IceProtocolRevision <LINK LINKEND="REFSTD.libICE.1">[XICE]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>IceProtocolSetup</primary></indexterm>IceProtocolSetup <LINK LINKEND="REFSTD.libICE.1">[XICE]</LINK></ENTRY>
<ENTRY><indexterm><primary>IceProtocolShutdown</primary></indexterm>IceProtocolShutdown <LINK LINKEND="REFSTD.libICE.1">[XICE]</LINK></ENTRY>
<ENTRY><indexterm><primary>IceProtocolVersion</primary></indexterm>IceProtocolVersion <LINK LINKEND="REFSTD.libICE.1">[XICE]</LINK></ENTRY>
<ENTRY><indexterm><primary>IceReadAuthFileEntry</primary></indexterm>IceReadAuthFileEntry <LINK LINKEND="REFSTD.libICE.1">[XICE]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>IceRegisterForProtocolReply</primary></indexterm>IceRegisterForProtocolReply <LINK LINKEND="REFSTD.libICE.1">[XICE]</LINK></ENTRY>
<ENTRY><indexterm><primary>IceRegisterForProtocolSetup</primary></indexterm>IceRegisterForProtocolSetup <LINK LINKEND="REFSTD.libICE.1">[XICE]</LINK></ENTRY>
<ENTRY><indexterm><primary>IceRelease</primary></indexterm>IceRelease <LINK LINKEND="REFSTD.libICE.1">[XICE]</LINK></ENTRY>
<ENTRY><indexterm><primary>IceRemoveConnectionWatch</primary></indexterm>IceRemoveConnectionWatch <LINK LINKEND="REFSTD.libICE.1">[XICE]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>IceSetErrorHandler</primary></indexterm>IceSetErrorHandler <LINK LINKEND="REFSTD.libICE.1">[XICE]</LINK></ENTRY>
<ENTRY><indexterm><primary>IceSetHostBasedAuthProc</primary></indexterm>IceSetHostBasedAuthProc <LINK LINKEND="REFSTD.libICE.1">[XICE]</LINK></ENTRY>
<ENTRY><indexterm><primary>IceSetIOErrorHandler</primary></indexterm>IceSetIOErrorHandler <LINK LINKEND="REFSTD.libICE.1">[XICE]</LINK></ENTRY>
<ENTRY><indexterm><primary>IceSetPaAuthData</primary></indexterm>IceSetPaAuthData <LINK LINKEND="REFSTD.libICE.1">[XICE]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>IceSetShutdownNegotiation</primary></indexterm>IceSetShutdownNegotiation <LINK LINKEND="REFSTD.libICE.1">[XICE]</LINK></ENTRY>
<ENTRY><indexterm><primary>IceSwapping</primary></indexterm>IceSwapping <LINK LINKEND="REFSTD.libICE.1">[XICE]</LINK></ENTRY>
<ENTRY><indexterm><primary>IceUnlockAuthFile</primary></indexterm>IceUnlockAuthFile <LINK LINKEND="REFSTD.libICE.1">[XICE]</LINK></ENTRY>
<ENTRY><indexterm><primary>IceVendor</primary></indexterm>IceVendor <LINK LINKEND="REFSTD.libICE.1">[XICE]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>IceWriteAuthFileEntry</primary></indexterm>IceWriteAuthFileEntry <LINK LINKEND="REFSTD.libICE.1">[XICE]</LINK></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>
</SECT2>
</SECT1>
<SECT1 ID=libICE-ddefs>
<TITLE>Data Definitions for libICE</TITLE>
<PARA>
This section defines global identifiers and their values that are associated
with interfaces contained in libICE.
These definitions are organized into groups that
correspond to system headers. This convention is used as a
convenience for the reader, and does not imply the existence
of these headers, or their content.
Where an interface is defined as requiring a particular system header file
all of the data definitions for that system header file presented here shall be in effect.
</PARA>
<PARA>
This section gives data definitions to promote binary application
portability, not to repeat source interface definitions available
elsewhere. System providers and application developers should use this ABI
to supplement - not to replace - source interface definition specifications.
</PARA>
<PARA>
This specification uses the <XREF LINKEND='std.ISOC99'> C Language as the reference programming language, and data definitions are specified in ISO C format. The C language is used here as a convenient notation. Using a C language description of these data objects does not preclude their use by other programming languages.</PARA>
<SECT2>
<TITLE>X11/ICE/ICE.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define ICE_Error	0
#define IceBadMajor	0
#define IceCanContinue	0
#define IceLSBfirst	0
#define IceProtoMinor	0
#define IceBadMinor	0x8000
#define IceBadState	0x8001
#define IceBadLength	0x8002
#define IceBadValue	0x8003
#define ICE_ByteOrder	1
#define IceFatalToProtocol	1
#define IceMSBfirst	1
#define IceNoAuth	1
#define IceProtoMajor	1
#define ICE_PingReply	10
#define ICE_WantToClose	11
#define ICE_NoClose	12
#define ICE_ConnectionSetup	2
#define IceFatalToConnection	2
#define IceNoVersion	2
#define ICE_AuthRequired	3
#define IceSetupFailed	3
#define ICE_AuthReply	4
#define IceAuthRejected	4
#define ICE_AuthNextPhase	5
#define IceAuthFailed	5
#define ICE_ConnectionReply	6
#define IceProtocolDuplicate	6
#define ICE_ProtocolSetup	7
#define IceMajorOpcodeDuplicate	7
#define ICE_ProtocolReply	8
#define IceUnknownProtocol	8
#define ICE_Ping	9
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/ICE/ICEconn.h</TITLE>
<PARA>
</PARA>
<SCREEN>

struct _XtransConnInfo;
typedef struct {
    char *vendor;
    char *release;
    int version_count;
    IcePoVersionRec *version_recs;
    int auth_count;
    char **auth_names;
    IcePoAuthProc *auth_procs;
    IceIOErrorProc io_error_proc;
} _IcePoProtocol;
typedef struct {
    char *vendor;
    char *release;
    int version_count;
    IcePaVersionRec *version_recs;
    IceProtocolSetupProc protocol_setup_proc;
    IceProtocolActivateProc protocol_activate_proc;
    int auth_count;
    char **auth_names;
    IcePaAuthProc *auth_procs;
    IceHostBasedAuthProc host_based_auth_proc;
    IceIOErrorProc io_error_proc;
} _IcePaProtocol;
typedef struct {
    char *protocol_name;
    _IcePoProtocol *orig_client;
    _IcePaProtocol *accept_client;
} _IceProtocol;
typedef struct {
    int in_use;
    int my_opcode;
    _IceProtocol *protocol;
    IcePointer client_data;
    int accept_flag;
    union {
	IcePaProcessMsgProc accept_client;
	IcePoProcessMsgProc orig_client;
    } process_msg_proc;
} _IceProcessMsgInfo;
typedef struct _IceSavedReplyWait {
    IceReplyWaitInfo *reply_wait;
    int reply_ready;
    _IceSavedReplyWait *next;
} _IceSavedReplyWait;
typedef struct _IcePingWait {
    IcePingReplyProc ping_reply_proc;
    IcePointer client_data;
    _IcePingWait *next;
} _IcePingWait;
typedef struct {
    int auth_active;
    char my_auth_index;
    IcePointer my_auth_state;
} _IceConnectToYouInfo;
typedef struct {
    int my_opcode;
    int my_auth_count;
    int *my_auth_indices;
    int auth_active;
    char my_auth_index;
    IcePointer my_auth_state;
} _IceProtoSetupToYouInfo;
typedef struct {
    int his_version_index;
    int my_version_index;
    char *his_vendor;
    char *his_release;
    char my_auth_index;
    IcePointer my_auth_state;
    int must_authenticate;
} _IceConnectToMeInfo;
typedef struct {
    int his_opcode;
    int my_opcode;
    int his_version_index;
    int my_version_index;
    char *his_vendor;
    char *his_release;
    char my_auth_index;
    IcePointer my_auth_state;
    int must_authenticate;
} _IceProtoSetupToMeInfo;
struct _IceConn {
    unsigned int io_ok:1;
    unsigned int swap:1;
    unsigned int waiting_for_byteorder:1;
    unsigned int skip_want_to_close:1;
    unsigned int want_to_close:1;
    unsigned int free_asap:1;
    unsigned int unused1:2;
    unsigned char unused2:8;
    IceConnectStatus connection_status;
    unsigned char my_ice_version_index;
    struct _XtransConnInfo *trans_conn;
    long unsigned int send_sequence;
    long unsigned int receive_sequence;
    char *connection_string;
    char *vendor;
    char *release;
    char *inbuf;
    char *inbufptr;
    char *inbufmax;
    char *outbuf;
    char *outbufptr;
    char *outbufmax;
    char *scratch;
    long unsigned int scratch_size;
    int dispatch_level;
    IcePointer context;
    _IceProcessMsgInfo *process_msg_info;
    char his_min_opcode;
    char his_max_opcode;
    unsigned char open_ref_count;
    unsigned char proto_ref_count;
    IceListenObj listen_obj;
    _IceSavedReplyWait *saved_reply_waits;
    _IcePingWait *ping_waits;
    _IceConnectToYouInfo *connect_to_you;
    _IceProtoSetupToYouInfo *protosetup_to_you;
    _IceConnectToMeInfo *connect_to_me;
    _IceProtoSetupToMeInfo *protosetup_to_me;
};
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/ICE/ICElib.h</TITLE>
<PARA>
</PARA>
<SCREEN>

typedef void *IcePointer;
typedef struct _IceConn *IceConn;
typedef void (*IcePaProcessMsgProc) (IceConn, IcePointer, int,
				     long unsigned int, int);
typedef struct {
    int major_version;
    int minor_version;
    IcePaProcessMsgProc process_msg_proc;
} IcePaVersionRec;
typedef struct {
    long unsigned int sequence_of_request;
    int major_opcode_of_request;
    int minor_opcode_of_request;
    IcePointer reply;
} IceReplyWaitInfo;
typedef void (*IcePoProcessMsgProc) (IceConn, IcePointer, int,
				     long unsigned int, int,
				     IceReplyWaitInfo *, int *);
typedef struct {
    int major_version;
    int minor_version;
    IcePoProcessMsgProc process_msg_proc;
} IcePoVersionRec;
typedef IcePoAuthStatus(*IcePoAuthProc) (IceConn, IcePointer *, int, int,
					 int, IcePointer, int *,
					 IcePointer *, char **);
typedef IcePaAuthStatus(*IcePaAuthProc) (IceConn, IcePointer *, int, int,
					 IcePointer, int *, IcePointer *,
					 char **);
typedef enum IceAcceptStatus;
struct _IceListenObj;
typedef struct _IceListenObj *IceListenObj;
typedef enum IceConnectStatus;
typedef void (*IceIOErrorProc) (IceConn);
typedef int (*IceProtocolSetupProc) (IceConn, int, int, char *, char *,
				     IcePointer *, char **);
typedef void (*IceProtocolActivateProc) (IceConn, IcePointer);
typedef int (*IceHostBasedAuthProc) (char *);
typedef void (*IcePingReplyProc) (IceConn, IcePointer);
typedef enum IceProcessMessagesStatus;
typedef enum IceCloseStatus;
typedef enum IceProtocolSetupStatus;
typedef void (*IceWatchProc) (IceConn, IcePointer, int, IcePointer *);
typedef void (*IceIOErrorHandler) (IceConn);
typedef void (*IceErrorHandler) (IceConn, int, int, long unsigned int, int,
				 int, IcePointer);
typedef enum IcePoAuthStatus;
typedef enum IcePaAuthStatus;
extern IceConn IceAcceptConnection(IceListenObj, IceAcceptStatus *);
extern int IceAddConnectionWatch(IceWatchProc, IcePointer);
extern char *IceAllocScratch(IceConn, long unsigned int);
extern void IceAppLockConn(IceConn);
extern void IceAppUnlockConn(IceConn);
extern int IceCheckShutdownNegotiation(IceConn);
extern IceCloseStatus IceCloseConnection(IceConn);
extern char *IceComposeNetworkIdList(int, IceListenObj *);
extern int IceConnectionNumber(IceConn);
extern IceConnectStatus IceConnectionStatus(IceConn);
extern char *IceConnectionString(IceConn);
extern int IceFlush(IceConn);
extern void IceFreeListenObjs(int, IceListenObj *);
extern IcePointer IceGetConnectionContext(IceConn);
extern int IceGetInBufSize(IceConn);
extern int IceGetListenConnectionNumber(IceListenObj);
extern char *IceGetListenConnectionString(IceListenObj);
extern int IceGetOutBufSize(IceConn);
extern int IceInitThreads(void);
extern long unsigned int IceLastReceivedSequenceNumber(IceConn);
extern long unsigned int IceLastSentSequenceNumber(IceConn);
extern int IceListenForConnections(int *, IceListenObj * *, int, char *);
extern int IceListenForWellKnownConnections(char *, int *,
					    IceListenObj * *, int, char *);
extern IceConn IceOpenConnection(char *, IcePointer, int, int, int,
				 char *);
extern int IcePing(IceConn, IcePingReplyProc, IcePointer);
extern IceProcessMessagesStatus IceProcessMessages(IceConn,
						   IceReplyWaitInfo *,
						   int *);
extern int IceProtocolRevision(IceConn);
extern IceProtocolSetupStatus IceProtocolSetup(IceConn, int, IcePointer,
					       int, int *, int *, char **,
					       char **, int, char *);
extern int IceProtocolShutdown(IceConn, int);
extern int IceProtocolVersion(IceConn);
extern int IceRegisterForProtocolReply(char *, char *, char *, int,
				       IcePaVersionRec *, int, char **,
				       IcePaAuthProc *,
				       IceHostBasedAuthProc,
				       IceProtocolSetupProc,
				       IceProtocolActivateProc,
				       IceIOErrorProc);
extern int IceRegisterForProtocolSetup(char *, char *, char *, int,
				       IcePoVersionRec *, int, char **,
				       IcePoAuthProc *, IceIOErrorProc);
extern char *IceRelease(IceConn);
extern void IceRemoveConnectionWatch(IceWatchProc, IcePointer);
extern IceErrorHandler IceSetErrorHandler(IceErrorHandler);
extern void IceSetHostBasedAuthProc(IceListenObj, IceHostBasedAuthProc);
extern IceIOErrorHandler IceSetIOErrorHandler(IceIOErrorHandler);
extern void IceSetShutdownNegotiation(IceConn, int);
extern int IceSwapping(IceConn);
extern char *IceVendor(IceConn);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/ICE/ICEmsg.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define IceWriteData16(_iceConn,_bytes,_data)	IceWriteData (_iceConn, _bytes, (char *) _data)
#define IceWriteData32(_iceConn,_bytes,_data)	IceWriteData (_iceConn, _bytes, (char *) _data)
#define IceDisposeCompleteMessage(_iceConn,_pData)	if ((char *) _pData &lt; _iceConn->inbuf || (char *) _pData >= _iceConn->inbufmax) free ((char *) _pData)
#define IceGetHeaderExtra(_iceConn,_major,_minor,_headerSize,_extra,_msgType,_pMsg,_pData)	if ((_iceConn->outbufptr + _headerSize + ((_extra) &lt;&lt; 3)) > _iceConn->outbufmax) IceFlush (_iceConn) _pMsg = (_msgType *) _iceConn->outbufptr if ((_iceConn->outbufptr + _headerSize + ((_extra) &lt;&lt; 3)) &lt;= _iceConn->outbufmax) _pData = (char *) _pMsg + _headerSize else _pData = NULL _pMsg->majorOpcode = _major _pMsg->minorOpcode = _minor _pMsg->length = ((_headerSize - SIZEOF (iceMsg)) >> 3) + (_extra) _iceConn->outbufptr += (_headerSize + ((_extra) &lt;&lt; 3)) _iceConn->send_sequence++
#define IceGetHeader(_iceConn,_major,_minor,_headerSize,_msgType,_pMsg)	if ((_iceConn->outbufptr + _headerSize) > _iceConn->outbufmax) IceFlush (_iceConn) _pMsg = (_msgType *) _iceConn->outbufptr _pMsg->majorOpcode = _major _pMsg->minorOpcode = _minor _pMsg->length = (_headerSize - SIZEOF (iceMsg)) >> 3 _iceConn->outbufptr += _headerSize _iceConn->send_sequence++
#define IceValidIO(_iceConn)	_iceConn->io_ok
#define IceReadData(_iceConn,_bytes,_pData)	_IceRead (_iceConn, (unsigned long) (_bytes), (char *) _pData)
#define IceReadSimpleMessage(_iceConn,_msgType,_pMsg)	_pMsg = (_msgType *) (_iceConn->inbuf)
#define IceReadPad(_iceConn,_bytes)	{ char _dummy[7] _IceRead (_iceConn, (unsigned long) (_bytes), _dummy) }
#define IceErrorHeader(_iceConn,_offendingMajorOpcode,_offendingMinorOpcode,_offendingSequenceNum,_severity,_errorClass,_dataLength)	{ iceErrorMsg *_pMsg IceGetHeader (_iceConn, _offendingMajorOpcode, ICE_Error, SIZEOF (iceErrorMsg), iceErrorMsg, _pMsg) _pMsg->length += (_dataLength) _pMsg->offendingMinorOpcode = _offendingMinorOpcode _pMsg->severity = _severity _pMsg->offendingSequenceNum = _offendingSequenceNum _pMsg->errorClass = _errorClass }
#define IceSimpleMessage(_iceConn,_major,_minor)	{ iceMsg *_pMsg IceGetHeader (_iceConn, _major, _minor, SIZEOF (iceMsg), iceMsg, _pMsg) }
#define IceWritePad(_iceConn,_bytes)	{ if ((_iceConn->outbufptr + (_bytes)) > _iceConn->outbufmax) { char _dummy[7] IceFlush (_iceConn) _IceWrite (_iceConn, (unsigned long) (_bytes), _dummy) } else { _iceConn->outbufptr += (_bytes) } }
#define IceWriteData(_iceConn,_bytes,_data)	{ if ((_iceConn->outbufptr + (_bytes)) > _iceConn->outbufmax) { IceFlush (_iceConn) _IceWrite (_iceConn, (unsigned long) (_bytes), _data) } else { memcpy (_iceConn->outbufptr, _data, _bytes) _iceConn->outbufptr += (_bytes) } }
#define IceSendData(_iceConn,_bytes,_data)	{ if (_iceConn->outbufptr > _iceConn->outbuf) IceFlush (_iceConn) _IceWrite (_iceConn, (unsigned long) (_bytes), _data) }
#define IceReadCompleteMessage(_iceConn,_headerSize,_msgType,_pMsg,_pData)	{ unsigned long _bytes IceReadMessageHeader (_iceConn, _headerSize, _msgType, _pMsg) _bytes = (_pMsg->length &lt;&lt; 3) - (_headerSize - SIZEOF (iceMsg)) if ((_iceConn->inbufmax - _iceConn->inbufptr) >= _bytes) { _IceRead (_iceConn, _bytes, _iceConn->inbufptr) _pData = _iceConn->inbufptr _iceConn->inbufptr += _bytes } else { _pData = (char *) malloc ((unsigned) _bytes) if (_pData) _IceRead (_iceConn, _bytes, _pData) else _IceReadSkip (_iceConn, _bytes) } }
#define IceReadData16(_iceConn,_swap,_bytes,_pData)	{ _IceRead (_iceConn, (unsigned long) (_bytes), (char *) _pData) }
#define IceReadData32(_iceConn,_swap,_bytes,_pData)	{ _IceRead (_iceConn, (unsigned long) (_bytes), (char *) _pData) }
#define IceReadMessageHeader(_iceConn,_headerSize,_msgType,_pMsg)	{ _IceRead (_iceConn, (unsigned long) (_headerSize - SIZEOF (iceMsg)), _iceConn->inbufptr) _pMsg = (_msgType *) (_iceConn->inbuf) _iceConn->inbufptr += (_headerSize - SIZEOF (iceMsg)) }
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/ICE/ICEproto.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define sz_iceAuthNextPhaseMsg	16
#define sz_iceAuthReplyMsg	16
#define sz_iceAuthRequiredMsg	16
#define sz_iceConnectionSetupMsg	16
#define sz_iceErrorMsg	16
#define sz_iceProtocolSetupMsg	16
#define sz_iceByteOrderMsg	8
#define sz_iceConnectionReplyMsg	8
#define sz_iceMsg	8
#define sz_iceNoCloseMsg	8
#define sz_icePingMsg	8
#define sz_icePingReplyMsg	8
#define sz_iceProtocolReplyMsg	8
#define sz_iceWantToCloseMsg	8

typedef iceErrorMsg icePingMsg;
typedef iceErrorMsg icePingReplyMsg;
typedef iceErrorMsg iceWantToCloseMsg;
typedef iceErrorMsg iceNoCloseMsg;
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/ICE/ICEutil.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define IceAuthLockSuccess	0
#define IceAuthLockError	1
#define IceAuthLockTimeout	2

typedef struct {
    char *protocol_name;
    char *network_id;
    char *auth_name;
    short unsigned int auth_data_length;
    char *auth_data;
} IceAuthDataEntry;
typedef struct {
    char *protocol_name;
    short unsigned int protocol_data_length;
    char *protocol_data;
    char *network_id;
    char *auth_name;
    short unsigned int auth_data_length;
    char *auth_data;
} IceAuthFileEntry;
extern char *IceAuthFileName(void);
extern void IceFreeAuthFileEntry(IceAuthFileEntry *);
extern char *IceGenerateMagicCookie(int);
extern IceAuthFileEntry *IceGetAuthFileEntry(char *, char *, char *);
extern int IceLockAuthFile(char *, int, int, long int);
extern IceAuthFileEntry *IceReadAuthFileEntry(FILE *);
extern void IceSetPaAuthData(int, IceAuthDataEntry *);
extern void IceUnlockAuthFile(char *);
extern int IceWriteAuthFileEntry(FILE *, IceAuthFileEntry *);
</SCREEN>
</SECT2>
</SECT1>
<!-- End of text generated from database -->


<!-- Start of generated text - do not edit! -->
<!-- generated from the LSB specification database by mklibspec -->
<SECT1 ID=libXt>
<TITLE>Interfaces for libXt</TITLE>
<PARA>
<XREF LINKEND="lib-libXt-def"> defines the library name and shared object name
for the libXt library
</PARA>
<TABLE id="lib-libXt-def">
<TITLE>libXt Definition</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Library:</ENTRY>
<ENTRY>libXt</ENTRY>
</ROW>
<ROW>
<ENTRY>SONAME:</ENTRY>
<ENTRY>libXt.so.6</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The behavior of the interfaces in this library is specified by the following specifications:<SIMPLELIST COLUMNS=1>
<MEMBER ID='REFSTD.libXt.1'>
[LSB] <XREF LINKEND="std.LSB">
</MEMBER>
<MEMBER ID='REFSTD.libXt.2'>
[Xt] <XREF LINKEND="std.Xt">
</MEMBER>
</SIMPLELIST>
</PARA>
<!-- debug: database interface name X Toolkit -->
<SECT2>
<!--libgroup-->
<TITLE>X Toolkit</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for X Toolkit</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic functions
for X Toolkit specified in <XREF linkend="tbl-libXt-x-too-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<TABLE id="tbl-libXt-x-too-ints">
<TITLE>libXt - X Toolkit Function Interfaces</TITLE>
<TGROUP COLS=4>
<TBODY>
<ROW>
<ENTRY><indexterm><primary>XtAddActions</primary></indexterm>XtAddActions <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAddCallback</primary></indexterm>XtAddCallback <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAddCallbacks</primary></indexterm>XtAddCallbacks <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAddConverter</primary></indexterm>XtAddConverter <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtAddEventHandler</primary></indexterm>XtAddEventHandler <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAddExposureToRegion</primary></indexterm>XtAddExposureToRegion <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAddGrab</primary></indexterm>XtAddGrab <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAddInput</primary></indexterm>XtAddInput <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtAddRawEventHandler</primary></indexterm>XtAddRawEventHandler <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAddSignal</primary></indexterm>XtAddSignal <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAddTimeOut</primary></indexterm>XtAddTimeOut <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAddWorkProc</primary></indexterm>XtAddWorkProc <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtAllocateGC</primary></indexterm>XtAllocateGC <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAppAddActionHook</primary></indexterm>XtAppAddActionHook <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAppAddActions</primary></indexterm>XtAppAddActions <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAppAddBlockHook</primary></indexterm>XtAppAddBlockHook <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtAppAddConverter</primary></indexterm>XtAppAddConverter <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAppAddInput</primary></indexterm>XtAppAddInput <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAppAddSignal</primary></indexterm>XtAppAddSignal <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAppAddTimeOut</primary></indexterm>XtAppAddTimeOut <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtAppAddWorkProc</primary></indexterm>XtAppAddWorkProc <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAppCreateShell</primary></indexterm>XtAppCreateShell <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAppError</primary></indexterm>XtAppError <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAppErrorMsg</primary></indexterm>XtAppErrorMsg <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtAppGetErrorDatabase</primary></indexterm>XtAppGetErrorDatabase <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAppGetErrorDatabaseText</primary></indexterm>XtAppGetErrorDatabaseText <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAppGetExitFlag</primary></indexterm>XtAppGetExitFlag <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAppGetSelectionTimeout</primary></indexterm>XtAppGetSelectionTimeout <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtAppInitialize</primary></indexterm>XtAppInitialize <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAppLock</primary></indexterm>XtAppLock <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAppMainLoop</primary></indexterm>XtAppMainLoop <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAppNextEvent</primary></indexterm>XtAppNextEvent <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtAppPeekEvent</primary></indexterm>XtAppPeekEvent <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAppPending</primary></indexterm>XtAppPending <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAppProcessEvent</primary></indexterm>XtAppProcessEvent <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAppReleaseCacheRefs</primary></indexterm>XtAppReleaseCacheRefs <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtAppSetErrorHandler</primary></indexterm>XtAppSetErrorHandler <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAppSetErrorMsgHandler</primary></indexterm>XtAppSetErrorMsgHandler <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAppSetExitFlag</primary></indexterm>XtAppSetExitFlag <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAppSetFallbackResources</primary></indexterm>XtAppSetFallbackResources <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtAppSetSelectionTimeout</primary></indexterm>XtAppSetSelectionTimeout <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAppSetTypeConverter</primary></indexterm>XtAppSetTypeConverter <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAppSetWarningHandler</primary></indexterm>XtAppSetWarningHandler <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAppSetWarningMsgHandler</primary></indexterm>XtAppSetWarningMsgHandler <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtAppUnlock</primary></indexterm>XtAppUnlock <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAppWarning</primary></indexterm>XtAppWarning <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAppWarningMsg</primary></indexterm>XtAppWarningMsg <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAugmentTranslations</primary></indexterm>XtAugmentTranslations <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtBuildEventMask</primary></indexterm>XtBuildEventMask <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCallAcceptFocus</primary></indexterm>XtCallAcceptFocus <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCallActionProc</primary></indexterm>XtCallActionProc <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCallCallbackList</primary></indexterm>XtCallCallbackList <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtCallCallbacks</primary></indexterm>XtCallCallbacks <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCallConverter</primary></indexterm>XtCallConverter <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCallbackExclusive</primary></indexterm>XtCallbackExclusive <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCallbackNone</primary></indexterm>XtCallbackNone <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtCallbackNonexclusive</primary></indexterm>XtCallbackNonexclusive <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCallbackPopdown</primary></indexterm>XtCallbackPopdown <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCallbackReleaseCacheRef</primary></indexterm>XtCallbackReleaseCacheRef <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCallbackReleaseCacheRefList</primary></indexterm>XtCallbackReleaseCacheRefList <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtCalloc</primary></indexterm>XtCalloc <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCancelSelectionRequest</primary></indexterm>XtCancelSelectionRequest <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtChangeManagedSet</primary></indexterm>XtChangeManagedSet <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtClass</primary></indexterm>XtClass <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtCloseDisplay</primary></indexterm>XtCloseDisplay <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtConfigureWidget</primary></indexterm>XtConfigureWidget <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtConvert</primary></indexterm>XtConvert <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtConvertAndStore</primary></indexterm>XtConvertAndStore <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtConvertCase</primary></indexterm>XtConvertCase <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCreateApplicationContext</primary></indexterm>XtCreateApplicationContext <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCreateApplicationShell</primary></indexterm>XtCreateApplicationShell <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCreateManagedWidget</primary></indexterm>XtCreateManagedWidget <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtCreatePopupShell</primary></indexterm>XtCreatePopupShell <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCreateSelectionRequest</primary></indexterm>XtCreateSelectionRequest <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCreateWidget</primary></indexterm>XtCreateWidget <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCreateWindow</primary></indexterm>XtCreateWindow <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtCvtColorToPixel</primary></indexterm>XtCvtColorToPixel <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCvtIntToBool</primary></indexterm>XtCvtIntToBool <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCvtIntToBoolean</primary></indexterm>XtCvtIntToBoolean <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCvtIntToColor</primary></indexterm>XtCvtIntToColor <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtCvtIntToFloat</primary></indexterm>XtCvtIntToFloat <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCvtIntToFont</primary></indexterm>XtCvtIntToFont <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCvtIntToPixel</primary></indexterm>XtCvtIntToPixel <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCvtIntToPixmap</primary></indexterm>XtCvtIntToPixmap <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtCvtIntToShort</primary></indexterm>XtCvtIntToShort <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCvtIntToUnsignedChar</primary></indexterm>XtCvtIntToUnsignedChar <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCvtStringToAcceleratorTable</primary></indexterm>XtCvtStringToAcceleratorTable <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCvtStringToAtom</primary></indexterm>XtCvtStringToAtom <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtCvtStringToBool</primary></indexterm>XtCvtStringToBool <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCvtStringToBoolean</primary></indexterm>XtCvtStringToBoolean <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCvtStringToCommandArgArray</primary></indexterm>XtCvtStringToCommandArgArray <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCvtStringToCursor</primary></indexterm>XtCvtStringToCursor <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtCvtStringToDimension</primary></indexterm>XtCvtStringToDimension <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCvtStringToDirectoryString</primary></indexterm>XtCvtStringToDirectoryString <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCvtStringToDisplay</primary></indexterm>XtCvtStringToDisplay <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCvtStringToFile</primary></indexterm>XtCvtStringToFile <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtCvtStringToFloat</primary></indexterm>XtCvtStringToFloat <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCvtStringToFont</primary></indexterm>XtCvtStringToFont <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCvtStringToFontSet</primary></indexterm>XtCvtStringToFontSet <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCvtStringToFontStruct</primary></indexterm>XtCvtStringToFontStruct <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtCvtStringToGravity</primary></indexterm>XtCvtStringToGravity <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCvtStringToInitialState</primary></indexterm>XtCvtStringToInitialState <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCvtStringToInt</primary></indexterm>XtCvtStringToInt <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCvtStringToPixel</primary></indexterm>XtCvtStringToPixel <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtCvtStringToRestartStyle</primary></indexterm>XtCvtStringToRestartStyle <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCvtStringToShort</primary></indexterm>XtCvtStringToShort <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCvtStringToTranslationTable</primary></indexterm>XtCvtStringToTranslationTable <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCvtStringToUnsignedChar</primary></indexterm>XtCvtStringToUnsignedChar <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtCvtStringToVisual</primary></indexterm>XtCvtStringToVisual <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtDatabase</primary></indexterm>XtDatabase <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtDestroyApplicationContext</primary></indexterm>XtDestroyApplicationContext <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtDestroyGC</primary></indexterm>XtDestroyGC <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtDestroyWidget</primary></indexterm>XtDestroyWidget <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtDirectConvert</primary></indexterm>XtDirectConvert <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtDisownSelection</primary></indexterm>XtDisownSelection <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtDispatchEvent</primary></indexterm>XtDispatchEvent <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtDispatchEventToWidget</primary></indexterm>XtDispatchEventToWidget <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtDisplay</primary></indexterm>XtDisplay <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtDisplayInitialize</primary></indexterm>XtDisplayInitialize <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtDisplayOfObject</primary></indexterm>XtDisplayOfObject <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtDisplayStringConversionWarning</primary></indexterm>XtDisplayStringConversionWarning <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtDisplayToApplicationContext</primary></indexterm>XtDisplayToApplicationContext <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtError</primary></indexterm>XtError <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtErrorMsg</primary></indexterm>XtErrorMsg <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtFindFile</primary></indexterm>XtFindFile <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtFree</primary></indexterm>XtFree <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtGetActionKeysym</primary></indexterm>XtGetActionKeysym <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtGetActionList</primary></indexterm>XtGetActionList <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtGetApplicationNameAndClass</primary></indexterm>XtGetApplicationNameAndClass <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtGetApplicationResources</primary></indexterm>XtGetApplicationResources <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtGetClassExtension</primary></indexterm>XtGetClassExtension <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtGetConstraintResourceList</primary></indexterm>XtGetConstraintResourceList <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtGetDisplays</primary></indexterm>XtGetDisplays <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtGetErrorDatabase</primary></indexterm>XtGetErrorDatabase <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtGetErrorDatabaseText</primary></indexterm>XtGetErrorDatabaseText <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtGetGC</primary></indexterm>XtGetGC <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtGetKeyboardFocusWidget</primary></indexterm>XtGetKeyboardFocusWidget <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtGetKeysymTable</primary></indexterm>XtGetKeysymTable <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtGetMultiClickTime</primary></indexterm>XtGetMultiClickTime <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtGetResourceList</primary></indexterm>XtGetResourceList <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtGetSelectionParameters</primary></indexterm>XtGetSelectionParameters <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtGetSelectionRequest</primary></indexterm>XtGetSelectionRequest <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtGetSelectionTimeout</primary></indexterm>XtGetSelectionTimeout <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtGetSelectionValue</primary></indexterm>XtGetSelectionValue <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtGetSelectionValueIncremental</primary></indexterm>XtGetSelectionValueIncremental <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtGetSelectionValues</primary></indexterm>XtGetSelectionValues <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtGetSelectionValuesIncremental</primary></indexterm>XtGetSelectionValuesIncremental <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtGetSubresources</primary></indexterm>XtGetSubresources <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtGetSubvalues</primary></indexterm>XtGetSubvalues <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtGetValues</primary></indexterm>XtGetValues <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtGrabButton</primary></indexterm>XtGrabButton <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtGrabKey</primary></indexterm>XtGrabKey <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtGrabKeyboard</primary></indexterm>XtGrabKeyboard <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtGrabPointer</primary></indexterm>XtGrabPointer <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtHasCallbacks</primary></indexterm>XtHasCallbacks <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtHooksOfDisplay</primary></indexterm>XtHooksOfDisplay <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtInitialize</primary></indexterm>XtInitialize <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtInitializeWidgetClass</primary></indexterm>XtInitializeWidgetClass <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtInsertEventHandler</primary></indexterm>XtInsertEventHandler <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtInsertEventTypeHandler</primary></indexterm>XtInsertEventTypeHandler <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtInsertRawEventHandler</primary></indexterm>XtInsertRawEventHandler <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtInstallAccelerators</primary></indexterm>XtInstallAccelerators <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtInstallAllAccelerators</primary></indexterm>XtInstallAllAccelerators <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtIsApplicationShell</primary></indexterm>XtIsApplicationShell <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtIsComposite</primary></indexterm>XtIsComposite <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtIsConstraint</primary></indexterm>XtIsConstraint <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtIsManaged</primary></indexterm>XtIsManaged <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtIsObject</primary></indexterm>XtIsObject <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtIsOverrideShell</primary></indexterm>XtIsOverrideShell <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtIsRealized</primary></indexterm>XtIsRealized <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtIsRectObj</primary></indexterm>XtIsRectObj <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtIsSensitive</primary></indexterm>XtIsSensitive <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtIsSessionShell</primary></indexterm>XtIsSessionShell <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtIsShell</primary></indexterm>XtIsShell <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtIsSubclass</primary></indexterm>XtIsSubclass <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtIsTopLevelShell</primary></indexterm>XtIsTopLevelShell <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtIsTransientShell</primary></indexterm>XtIsTransientShell <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtIsVendorShell</primary></indexterm>XtIsVendorShell <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtIsWMShell</primary></indexterm>XtIsWMShell <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtIsWidget</primary></indexterm>XtIsWidget <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtKeysymToKeycodeList</primary></indexterm>XtKeysymToKeycodeList <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtLastEventProcessed</primary></indexterm>XtLastEventProcessed <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtLastTimestampProcessed</primary></indexterm>XtLastTimestampProcessed <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtMainLoop</primary></indexterm>XtMainLoop <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtMakeGeometryRequest</primary></indexterm>XtMakeGeometryRequest <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtMakeResizeRequest</primary></indexterm>XtMakeResizeRequest <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtMalloc</primary></indexterm>XtMalloc <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtManageChild</primary></indexterm>XtManageChild <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtManageChildren</primary></indexterm>XtManageChildren <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtMapWidget</primary></indexterm>XtMapWidget <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtMenuPopupAction</primary></indexterm>XtMenuPopupAction <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtMergeArgLists</primary></indexterm>XtMergeArgLists <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtMoveWidget</primary></indexterm>XtMoveWidget <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtName</primary></indexterm>XtName <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtNameToWidget</primary></indexterm>XtNameToWidget <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtNewString</primary></indexterm>XtNewString <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtNextEvent</primary></indexterm>XtNextEvent <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtNoticeSignal</primary></indexterm>XtNoticeSignal <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtOpenApplication</primary></indexterm>XtOpenApplication <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtOpenDisplay</primary></indexterm>XtOpenDisplay <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtOverrideTranslations</primary></indexterm>XtOverrideTranslations <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtOwnSelection</primary></indexterm>XtOwnSelection <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtOwnSelectionIncremental</primary></indexterm>XtOwnSelectionIncremental <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtParent</primary></indexterm>XtParent <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtParseAcceleratorTable</primary></indexterm>XtParseAcceleratorTable <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtParseTranslationTable</primary></indexterm>XtParseTranslationTable <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtPeekEvent</primary></indexterm>XtPeekEvent <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtPending</primary></indexterm>XtPending <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtPopdown</primary></indexterm>XtPopdown <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtPopup</primary></indexterm>XtPopup <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtPopupSpringLoaded</primary></indexterm>XtPopupSpringLoaded <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtProcessEvent</primary></indexterm>XtProcessEvent <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtProcessLock</primary></indexterm>XtProcessLock <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtProcessUnlock</primary></indexterm>XtProcessUnlock <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtQueryGeometry</primary></indexterm>XtQueryGeometry <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtRealizeWidget</primary></indexterm>XtRealizeWidget <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtRealloc</primary></indexterm>XtRealloc <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtRegisterCaseConverter</primary></indexterm>XtRegisterCaseConverter <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtRegisterDrawable</primary></indexterm>XtRegisterDrawable <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtRegisterExtensionSelector</primary></indexterm>XtRegisterExtensionSelector <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtRegisterGrabAction</primary></indexterm>XtRegisterGrabAction <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtReleaseGC</primary></indexterm>XtReleaseGC <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtReleasePropertyAtom</primary></indexterm>XtReleasePropertyAtom <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtRemoveActionHook</primary></indexterm>XtRemoveActionHook <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtRemoveAllCallbacks</primary></indexterm>XtRemoveAllCallbacks <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtRemoveBlockHook</primary></indexterm>XtRemoveBlockHook <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtRemoveCallback</primary></indexterm>XtRemoveCallback <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtRemoveCallbacks</primary></indexterm>XtRemoveCallbacks <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtRemoveEventHandler</primary></indexterm>XtRemoveEventHandler <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtRemoveEventTypeHandler</primary></indexterm>XtRemoveEventTypeHandler <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtRemoveGrab</primary></indexterm>XtRemoveGrab <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtRemoveInput</primary></indexterm>XtRemoveInput <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtRemoveRawEventHandler</primary></indexterm>XtRemoveRawEventHandler <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtRemoveSignal</primary></indexterm>XtRemoveSignal <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtRemoveTimeOut</primary></indexterm>XtRemoveTimeOut <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtRemoveWorkProc</primary></indexterm>XtRemoveWorkProc <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtReservePropertyAtom</primary></indexterm>XtReservePropertyAtom <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtResizeWidget</primary></indexterm>XtResizeWidget <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtResizeWindow</primary></indexterm>XtResizeWindow <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtResolvePathname</primary></indexterm>XtResolvePathname <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtScreen</primary></indexterm>XtScreen <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtScreenDatabase</primary></indexterm>XtScreenDatabase <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtScreenOfObject</primary></indexterm>XtScreenOfObject <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtSendSelectionRequest</primary></indexterm>XtSendSelectionRequest <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtSessionGetToken</primary></indexterm>XtSessionGetToken <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtSessionReturnToken</primary></indexterm>XtSessionReturnToken <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtSetErrorHandler</primary></indexterm>XtSetErrorHandler <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtSetErrorMsgHandler</primary></indexterm>XtSetErrorMsgHandler <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtSetEventDispatcher</primary></indexterm>XtSetEventDispatcher <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtSetKeyTranslator</primary></indexterm>XtSetKeyTranslator <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtSetKeyboardFocus</primary></indexterm>XtSetKeyboardFocus <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtSetLanguageProc</primary></indexterm>XtSetLanguageProc <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtSetMappedWhenManaged</primary></indexterm>XtSetMappedWhenManaged <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtSetMultiClickTime</primary></indexterm>XtSetMultiClickTime <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtSetSelectionParameters</primary></indexterm>XtSetSelectionParameters <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtSetSelectionTimeout</primary></indexterm>XtSetSelectionTimeout <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtSetSensitive</primary></indexterm>XtSetSensitive <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtSetSubvalues</primary></indexterm>XtSetSubvalues <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtSetTypeConverter</primary></indexterm>XtSetTypeConverter <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtSetValues</primary></indexterm>XtSetValues <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtSetWMColormapWindows</primary></indexterm>XtSetWMColormapWindows <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtSetWarningHandler</primary></indexterm>XtSetWarningHandler <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtSetWarningMsgHandler</primary></indexterm>XtSetWarningMsgHandler <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtStringConversionWarning</primary></indexterm>XtStringConversionWarning <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtSuperclass</primary></indexterm>XtSuperclass <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtToolkitInitialize</primary></indexterm>XtToolkitInitialize <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtToolkitThreadInitialize</primary></indexterm>XtToolkitThreadInitialize <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtTranslateCoords</primary></indexterm>XtTranslateCoords <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtTranslateKey</primary></indexterm>XtTranslateKey <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtTranslateKeycode</primary></indexterm>XtTranslateKeycode <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtUngrabButton</primary></indexterm>XtUngrabButton <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtUngrabKey</primary></indexterm>XtUngrabKey <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtUngrabKeyboard</primary></indexterm>XtUngrabKeyboard <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtUngrabPointer</primary></indexterm>XtUngrabPointer <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtUninstallTranslations</primary></indexterm>XtUninstallTranslations <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtUnmanageChild</primary></indexterm>XtUnmanageChild <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtUnmanageChildren</primary></indexterm>XtUnmanageChildren <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtUnmapWidget</primary></indexterm>XtUnmapWidget <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtUnrealizeWidget</primary></indexterm>XtUnrealizeWidget <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtUnregisterDrawable</primary></indexterm>XtUnregisterDrawable <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtVaAppCreateShell</primary></indexterm>XtVaAppCreateShell <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtVaAppInitialize</primary></indexterm>XtVaAppInitialize <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtVaCreateArgsList</primary></indexterm>XtVaCreateArgsList <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtVaCreateManagedWidget</primary></indexterm>XtVaCreateManagedWidget <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtVaCreatePopupShell</primary></indexterm>XtVaCreatePopupShell <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtVaCreateWidget</primary></indexterm>XtVaCreateWidget <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtVaGetApplicationResources</primary></indexterm>XtVaGetApplicationResources <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtVaGetSubresources</primary></indexterm>XtVaGetSubresources <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtVaGetSubvalues</primary></indexterm>XtVaGetSubvalues <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtVaGetValues</primary></indexterm>XtVaGetValues <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtVaOpenApplication</primary></indexterm>XtVaOpenApplication <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtVaSetSubvalues</primary></indexterm>XtVaSetSubvalues <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtVaSetValues</primary></indexterm>XtVaSetValues <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtWarning</primary></indexterm>XtWarning <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtWarningMsg</primary></indexterm>XtWarningMsg <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtWidgetToApplicationContext</primary></indexterm>XtWidgetToApplicationContext <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtWindow</primary></indexterm>XtWindow <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtWindowOfObject</primary></indexterm>XtWindowOfObject <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtWindowToWidget</primary></indexterm>XtWindowToWidget <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>_XtCheckSubclassFlag</primary></indexterm>_XtCheckSubclassFlag <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_XtCopyFromArg</primary></indexterm>_XtCopyFromArg <LINK LINKEND="REFSTD.libXt.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>_XtInherit</primary></indexterm>_XtInherit <LINK LINKEND="REFSTD.libXt.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>_XtIsSubclassOf</primary></indexterm>_XtIsSubclassOf <LINK LINKEND="REFSTD.libXt.1">[LSB]</LINK></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for X Toolkit specified in <XREF linkend="tbl-libXt-x-too-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<TABLE id="tbl-libXt-x-too-data">
<TITLE>libXt - X Toolkit Data Interfaces</TITLE>
<TGROUP COLS=4>
<TBODY>
<ROW>
<ENTRY><indexterm><primary>XtCXtToolkitError</primary></indexterm>XtCXtToolkitError <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtShellStrings</primary></indexterm>XtShellStrings <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtStrings</primary></indexterm>XtStrings <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>_XtInheritTranslations</primary></indexterm>_XtInheritTranslations <LINK LINKEND="REFSTD.libXt.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>applicationShellWidgetClass</primary></indexterm>applicationShellWidgetClass <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>compositeClassRec</primary></indexterm>compositeClassRec <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>compositeWidgetClass</primary></indexterm>compositeWidgetClass <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>constraintClassRec</primary></indexterm>constraintClassRec <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>constraintWidgetClass</primary></indexterm>constraintWidgetClass <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>coreWidgetClass</primary></indexterm>coreWidgetClass <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>objectClass</primary></indexterm>objectClass <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>objectClassRec</primary></indexterm>objectClassRec <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>overrideShellClassRec</primary></indexterm>overrideShellClassRec <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>overrideShellWidgetClass</primary></indexterm>overrideShellWidgetClass <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>rectObjClass</primary></indexterm>rectObjClass <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>rectObjClassRec</primary></indexterm>rectObjClassRec <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>sessionShellClassRec</primary></indexterm>sessionShellClassRec <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>sessionShellWidgetClass</primary></indexterm>sessionShellWidgetClass <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>shellClassRec</primary></indexterm>shellClassRec <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>shellWidgetClass</primary></indexterm>shellWidgetClass <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>topLevelShellClassRec</primary></indexterm>topLevelShellClassRec <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>topLevelShellWidgetClass</primary></indexterm>topLevelShellWidgetClass <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>transientShellClassRec</primary></indexterm>transientShellClassRec <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>transientShellWidgetClass</primary></indexterm>transientShellWidgetClass <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>widgetClass</primary></indexterm>widgetClass <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>widgetClassRec</primary></indexterm>widgetClassRec <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>wmShellClassRec</primary></indexterm>wmShellClassRec <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>wmShellWidgetClass</primary></indexterm>wmShellWidgetClass <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>
</SECT2>
</SECT1>
<SECT1 ID=libXt-ddefs>
<TITLE>Data Definitions for libXt</TITLE>
<PARA>
This section defines global identifiers and their values that are associated
with interfaces contained in libXt.
These definitions are organized into groups that
correspond to system headers. This convention is used as a
convenience for the reader, and does not imply the existence
of these headers, or their content.
Where an interface is defined as requiring a particular system header file
all of the data definitions for that system header file presented here shall be in effect.
</PARA>
<PARA>
This section gives data definitions to promote binary application
portability, not to repeat source interface definitions available
elsewhere. System providers and application developers should use this ABI
to supplement - not to replace - source interface definition specifications.
</PARA>
<PARA>
This specification uses the <XREF LINKEND='std.ISOC99'> C Language as the reference programming language, and data definitions are specified in ISO C format. The C language is used here as a convenient notation. Using a C language description of these data objects does not preclude their use by other programming languages.</PARA>
<SECT2>
<TITLE>X11/Composite.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define _XtComposite_h	1

typedef void (*XtDoChangeProc) (Widget, WidgetList, Cardinal *, WidgetList,
				Cardinal *, XtPointer);
typedef struct _CompositeClassRec *CompositeWidgetClass;
typedef Cardinal(*XtOrderProc) (Widget);
extern void XtChangeManagedSet(WidgetList, Cardinal, XtDoChangeProc,
			       XtPointer, WidgetList, Cardinal);
extern void XtManageChild(Widget);
extern void XtManageChildren(WidgetList, Cardinal);
extern void XtUnmanageChild(Widget);
extern void XtUnmanageChildren(WidgetList, Cardinal);
extern WidgetClass compositeWidgetClass;
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/CompositeP.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define XtInheritGeometryManager	((XtGeometryHandler) _XtInherit)
#define XtInheritDeleteChild	((XtWidgetProc) _XtInherit)
#define XtInheritInsertChild	((XtWidgetProc) _XtInherit)
#define _XtCompositeP_h	1
#define XtCompositeExtensionVersion	2L

typedef struct _CompositePart {
    WidgetList children;
    Cardinal num_children;
    Cardinal num_slots;
    XtOrderProc insert_position;
} CompositePart;
typedef struct _CompositeClassPart {
    XtGeometryHandler geometry_manager;
    XtWidgetProc change_managed;
    XtWidgetProc insert_child;
    XtWidgetProc delete_child;
    XtPointer extension;
} CompositeClassPart;
typedef struct _CompositePart *CompositePtr;
typedef struct _CompositeRec {
    CorePart core;
    CompositePart composite;
} CompositeRec;
typedef struct _CompositeClassPart *CompositePartPtr;
typedef struct {
    XtPointer next_extension;
    XrmQuark record_type;
    long int version;
    Cardinal record_size;
    Boolean accepts_objects;
    Boolean allows_change_managed_set;
} CompositeClassExtensionRec;
typedef CompositeClassExtensionRec *CompositeClassExtension;

typedef struct _CompositeClassRec CompositeClassRec;
extern CompositeClassRec compositeClassRec;
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/ConstrainP.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define XtConstraintExtensionVersion	1L

typedef struct _ConstraintPart {
    XtPointer mumble;
} ConstraintPart;
typedef struct _ConstraintClassRec *ConstraintClassRec;
typedef struct _ConstraintClassPart {
    XtResourceList resources;
    Cardinal num_resources;
    Cardinal constraint_size;
    XtInitProc initialize;
    XtWidgetProc destroy;
    XtSetValuesFunc set_values;
    XtPointer extension;
} ConstraintClassPart;
struct _ConstraintClassRec {
    CoreClassPart core_class;
    CompositeClassPart composite_class;
    ConstraintClassPart constraint_class;
};
typedef struct _ConstraintRec {
    CorePart core;
    CompositePart composite;
    ConstraintPart constraint;
} ConstraintRec;
typedef struct _ConstraintRec *ConstraintWidget;
typedef struct {
    XtPointer next_extension;
    XrmQuark record_type;
    long int version;
    Cardinal record_size;
    XtArgsProc get_values_hook;
} ConstraintClassExtensionRec;
typedef ConstraintClassExtensionRec *ConstraintClassExtension;
extern ConstraintClassRec constraintClassRec;
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/Constraint.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define _XtConstraint_h	1

typedef struct _ConstraintClassRec *ConstraintWidgetClass;
extern WidgetClass constraintWidgetClass;
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/Core.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define _XtCore_h	1

typedef struct _WidgetClassRec *CoreWidgetClass;
typedef struct _WidgetClassRec *CoreWidget;
extern WidgetClass coreWidgetClass;
extern widgetClass;
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/CoreP.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define _XtCoreP_h	1

typedef struct _CorePart {
    Widget self;
    WidgetClass widget_class;
    Widget parent;
    XrmName xrm_name;
    Boolean being_destroyed;
    XtCallbackList destroy_callbacks;
    XtPointer constraints;
    Position x;
    Position y;
    Dimension width;
    Dimension height;
    Dimension border_width;
    Boolean managed;
    Boolean sensitive;
    Boolean ancestor_sensitive;
    XtEventTable event_table;
    XtTMRec tm;
    XtTranslations accelerators;
    Pixel border_pixel;
    Pixmap border_pixmap;
    WidgetList popup_list;
    Cardinal num_popups;
    String name;
    Screen *screen;
    Colormap colormap;
    Window window;
    Cardinal depth;
    Pixel background_pixel;
    Pixmap background_pixmap;
    Boolean visible;
    Boolean mapped_when_managed;
} CorePart;
typedef struct _CoreClassPart {
    WidgetClass superclass;
    String class_name;
    Cardinal widget_size;
    XtProc class_initialize;
    XtWidgetClassProc class_part_initialize;
    XtEnum class_inited;
    XtInitProc initialize;
    XtArgsProc initialize_hook;
    XtRealizeProc realize;
    XtActionList actions;
    Cardinal num_actions;
    XtResourceList resources;
    Cardinal num_resources;
    XrmClass xrm_class;
    Boolean compress_motion;
    XtEnum compress_exposure;
    Boolean compress_enterleave;
    Boolean visible_interest;
    XtWidgetProc destroy;
    XtWidgetProc resize;
    XtExposeProc expose;
    XtSetValuesFunc set_values;
    XtArgsFunc set_values_hook;
    XtAlmostProc set_values_almost;
    XtArgsProc get_values_hook;
    XtAcceptFocusProc accept_focus;
    XtVersionType version;
    XtPointer callback_private;
    String tm_table;
    XtGeometryHandler query_geometry;
    XtStringProc display_accelerator;
    XtPointer extension;
} CoreClassPart;
typedef struct _WidgetRec {
    CorePart core;
} WidgetRec;
typedef struct _WidgetRec {
    CorePart core;
} CoreRec;
typedef struct _WidgetClassRec {
    CoreClassPart core_class;
} WidgetClassRec;
typedef struct _WidgetClassRec {
    CoreClassPart core_class;
} CoreClassRec;
extern int _XtInheritTranslations;
extern WidgetClassRec widgetClassRec;
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/Intrinsic.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define XtOffset(p_type,field)	((Cardinal) (((char *) (&amp;(((p_type)NULL)->field))) - ((char *) NULL)))
#define XtNumber(arr)	((Cardinal) (sizeof(arr) / sizeof(arr[0])))
#define XtAllEvents	((EventMask) -1L)
#define XtUnspecifiedPixmap	((Pixmap)2)
#define XtNew(type)	((type *) XtMalloc((unsigned) sizeof(type)))
#define XtSetArg(arg,n,d)	((void)( (arg).name = (n), (arg).value = (XtArgVal)(d) ))
#define XtUnspecifiedWindow	((Window)2)
#define XtUnspecifiedWindowGroup	((Window)3)
#define XtUnspecifiedShellInt	(-1)
#define XtCWQueryOnly	(1 &lt;&lt; 7)
#define XtInputReadMask	(1L&lt;&lt;0)
#define XtInputWriteMask	(1L&lt;&lt;1)
#define XtInputExceptMask	(1L&lt;&lt;2)
#define XT_CONVERT_FAIL	(Atom)0x80000001
#define XtIMAll	(XtIMXEvent | XtIMTimer | XtIMAlternateInput | XtIMSignal)
#define XtIsRectObj(object)	(_XtCheckSubclassFlag(object, (XtEnum)0x02))
#define XtIsWidget(object)	(_XtCheckSubclassFlag(object, (XtEnum)0x04))
#define XtIsComposite(widget)	(_XtCheckSubclassFlag(widget, (XtEnum)0x08))
#define XtIsConstraint(widget)	(_XtCheckSubclassFlag(widget, (XtEnum)0x10))
#define XtIsShell(widget)	(_XtCheckSubclassFlag(widget, (XtEnum)0x20))
#define XtIsWMShell(widget)	(_XtCheckSubclassFlag(widget, (XtEnum)0x40))
#define XtInputNoneMask	0L
#define XtCacheNone	0x001
#define XtCacheAll	0x002
#define XtCacheByDisplay	0x003
#define XtCacheRefCount	0x100
#define XtIMXEvent	1
#define _XtIntrinsic_h	1
#define XtIMTimer	2
#define XtIMAlternateInput	4
#define XtSMDontChange	5
#define XtSpecificationRelease	6
#define XtIMSignal	8
#define _XtString	char*
#define externalref	extern
#define _XtBoolean	int
#define _XtPosition	int
#define XtOffsetOf(s_type,field)	offsetof(s_type,field)
#define _XtDimension	unsigned int
#define _XtKeyCode	unsigned int
#define _XtXtEnum	unsigned int
#define XtCurrentDirectory	"XtCurrentDirectory"
#define XtCvtPixelToColor	"XtCvtIntToColor"
#define XtCvtIntToDimension	"XtCvtIntToShort"
#define XtCvtIntToPosition	"XtCvtIntToShort"
#define XtCvtStringToPosition	"XtCvtStringToShort"
#define XtDefaultBackground	"XtDefaultBackground"
#define XtDefaultFont	"XtDefaultFont"
#define XtDefaultFontSet	"XtDefaultFontSet"
#define XtDefaultForeground	"XtDefaultForeground"
#define XtVaNestedList	"XtVaNestedList"
#define XtVaTypedArg	"XtVaTypedArg"

typedef unsigned int Cardinal;
typedef void *XtPointer;
struct _WidgetRec;
typedef struct _WidgetRec *Widget;
typedef char *String;
typedef unsigned int XtGeometryMask;
typedef short int Position;
typedef short unsigned int Dimension;
typedef struct {
    XtGeometryMask request_mode;
    Position x;
    Position y;
    Dimension width;
    Dimension height;
    Dimension border_width;
    Widget sibling;
    int stack_mode;
} XtWidgetGeometry;
typedef unsigned int Modifiers;
typedef void *XtCacheRef;
typedef struct _XtResource *XtResourceList;
struct _XtAppStruct;
typedef struct _XtAppStruct *XtAppContext;
typedef void (*XtActionProc) (Widget, XEvent *, String *, Cardinal *);
typedef struct _XtActionsRec *XtActionList;
typedef char Boolean;
typedef int XtCacheType;
typedef long unsigned int XtGCMask;
typedef unsigned char XtEnum;
typedef long unsigned int XtSignalId;
typedef long unsigned int XtWorkProcId;
typedef long unsigned int XtInputId;
typedef long unsigned int XtIntervalId;
struct _WidgetClassRec;
typedef struct _WidgetClassRec *WidgetClass;
typedef Widget *WidgetList;
typedef struct _TranslationData *XtAccelerators;
typedef struct _TranslationData *XtTranslations;
typedef enum XtGeometryResult;
typedef enum XtAddressMode;
typedef struct {
    XtAddressMode address_mode;
    XtPointer address_id;
    Cardinal size;
} XtConvertArgRec;
typedef XtConvertArgRec *XtConvertArgList;
typedef long int XtArgVal;
typedef struct {
    String name;
    XtArgVal value;
} Arg;
typedef Arg *ArgList;
typedef void (*XtSignalCallbackProc) (XtPointer, XtSignalId *);
typedef enum XtCallbackStatus;
typedef void (*XtInputCallbackProc) (XtPointer, int *, XtInputId *);
typedef void (*XtTimerCallbackProc) (XtPointer, XtIntervalId *);
typedef long unsigned int XtInputMask;
typedef enum XtListPosition;
typedef void (*XtCallbackProc) (Widget, XtPointer, XtPointer);
typedef struct _XtCallbackRec *XtCallbackList;
typedef long unsigned int EventMask;
typedef void *XtVarArgsList;
typedef void (*XtEventHandler) (Widget, XtPointer, XEvent *, Boolean *);
typedef void (*XtCaseProc) (Display *, KeySym, KeySym *, KeySym *);
typedef void (*XtKeyProc) (Display *, KeyCode, Modifiers, Modifiers *,
			   KeySym *);
typedef void (*XtBlockHookProc) (XtPointer);
typedef long unsigned int XtBlockHookId;
typedef void (*XtActionHookProc) (Widget, XtPointer, String, XEvent *,
				  String *, Cardinal *);
typedef void *XtActionHookId;
typedef void (*XtDestructor) (XtAppContext, XrmValue *, XtPointer,
			      XrmValue *, Cardinal *);
typedef Boolean(*XtTypeConverter) (Display *, XrmValue *, Cardinal *,
				   XrmValue *, XrmValue *, XtPointer *);
typedef void (*XtConverter) (XrmValue *, Cardinal *, XrmValue *,
			     XrmValue *);
typedef void *XtRequestId;
typedef Boolean(*XtFilePredicate) (String);
typedef struct {
    char match;
    String substitution;
} SubstitutionRec;
typedef SubstitutionRec *Substitution;
typedef void (*XtSelectionCallbackProc) (Widget, XtPointer, Atom *, Atom *,
					 XtPointer, long unsigned int *,
					 int *);
typedef Boolean(*XtWorkProc) (XtPointer);
typedef void (*XtSelectionDoneProc) (Widget, Atom *, Atom *);
typedef void (*XtLoseSelectionProc) (Widget, Atom *);
typedef void (*XtErrorHandler) (String);
typedef Boolean(*XtConvertSelectionProc) (Widget, Atom *, Atom *, Atom *,
					  XtPointer *, long unsigned int *,
					  int *);
typedef void (*XtErrorMsgHandler) (String, String, String, String,
				   String *, Cardinal *);
typedef String(*XtLanguageProc) (Display *, String, XtPointer);
typedef enum XtGrabKind;
typedef struct _XtCheckpointTokenRec *XtCheckpointToken;
typedef void (*XtExtensionSelectProc) (Widget, int *, XtPointer *, int,
				       XtPointer);
typedef Boolean(*XtEventDispatchProc) (XEvent *);
typedef void (*XtCancelConvertSelectionProc) (Widget, Atom *, Atom *,
					      XtRequestId *, XtPointer);
typedef Boolean(*XtConvertSelectionIncrProc) (Widget, Atom *, Atom *,
					      Atom *, XtPointer *,
					      long unsigned int *, int *,
					      long unsigned int *,
					      XtPointer, XtRequestId *);
typedef void (*XtSelectionDoneIncrProc) (Widget, Atom *, Atom *,
					 XtRequestId *, XtPointer);
typedef void (*XtLoseSelectionIncrProc) (Widget, Atom *, XtPointer);
typedef long unsigned int XtValueMask;
typedef struct _XtEventRec *XtEventTable;
typedef XtActionProc *XtBoundActions;
typedef struct _XtResource {
    String resource_name;
    String resource_class;
    String resource_type;
    Cardinal resource_size;
    Cardinal resource_offset;
    String default_type;
    XtPointer default_addr;
} XtResource;
typedef struct _XtCallbackRec {
    XtCallbackProc callback;
    XtPointer closure;
} XtCallbackRec;
typedef struct _XtCheckpointTokenRec {
    int save_type;
    int interact_style;
    Boolean shutdown;
    Boolean fast;
    Boolean cancel_shutdown;
    int phase;
    int interact_dialog_type;
    Boolean request_cancel;
    Boolean request_next_phase;
    Boolean save_success;
    int type;
    Widget widget;
} XtCheckpointTokenRec;
typedef long unsigned int Pixel;
typedef struct _XtActionsRec {
    String string;
    XtActionProc proc;
} XtActionsRec;
typedef struct {
    Widget shell_widget;
    Widget enable_widget;
} XtPopdownIDRec;
typedef XtPopdownIDRec *XtPopdownID;
typedef struct {
    String type;
    Widget widget;
    ArgList args;
    Cardinal num_args;
} XtCreateHookDataRec;
typedef XtCreateHookDataRec *XtCreateHookData;
typedef struct {
    String type;
    Widget widget;
    XtPointer event_data;
    Cardinal num_event_data;
} XtChangeHookDataRec;
typedef XtChangeHookDataRec *XtChangeHookData;
typedef struct {
    Widget old;
    Widget req;
    ArgList args;
    Cardinal num_args;
} XtChangeHookSetValuesDataRec;
typedef XtChangeHookSetValuesDataRec *XtChangeHookSetValuesData;
typedef struct {
    String type;
    Widget widget;
    XtGeometryMask changeMask;
    XWindowChanges changes;
} XtConfigureHookDataRec;
typedef XtConfigureHookDataRec *XtConfigureHookData;
typedef struct {
    String type;
    Widget widget;
    XtWidgetGeometry *request;
    XtWidgetGeometry *reply;
    XtGeometryResult result;
} XtGeometryHookDataRec;
typedef XtGeometryHookDataRec *XtGeometryHookData;
typedef struct {
    String type;
    Widget widget;
} XtDestroyHookDataRec;
typedef XtDestroyHookDataRec *XtDestroyHookData;
extern void XtAddActions(XtActionList, Cardinal);
extern void XtAddCallback(Widget, const char *, XtCallbackProc, XtPointer);
extern void XtAddCallbacks(Widget, const char *, XtCallbackList);
extern void XtAddConverter(const char *, const char *, XtConverter,
			   XtConvertArgList, Cardinal);
extern void XtAddEventHandler(Widget, EventMask, Boolean, XtEventHandler,
			      XtPointer);
extern void XtAddExposureToRegion(XEvent *, Region);
extern void XtAddGrab(Widget, Boolean, Boolean);
extern XtInputId XtAddInput(int, XtPointer, XtInputCallbackProc,
			    XtPointer);
extern void XtAddRawEventHandler(Widget, EventMask, Boolean,
				 XtEventHandler, XtPointer);
extern XtSignalId XtAddSignal(XtSignalCallbackProc, XtPointer);
extern XtIntervalId XtAddTimeOut(long unsigned int, XtTimerCallbackProc,
				 XtPointer);
extern XtWorkProcId XtAddWorkProc(XtWorkProc, XtPointer);
extern GC XtAllocateGC(Widget, Cardinal, XtGCMask, XGCValues *, XtGCMask,
		       XtGCMask);
extern XtActionHookId XtAppAddActionHook(XtAppContext, XtActionHookProc,
					 XtPointer);
extern void XtAppAddActions(XtAppContext, XtActionList, Cardinal);
extern XtBlockHookId XtAppAddBlockHook(XtAppContext, XtBlockHookProc,
				       XtPointer);
extern void XtAppAddConverter(XtAppContext, const char *, const char *,
			      XtConverter, XtConvertArgList, Cardinal);
extern XtInputId XtAppAddInput(XtAppContext, int, XtPointer,
			       XtInputCallbackProc, XtPointer);
extern XtSignalId XtAppAddSignal(XtAppContext, XtSignalCallbackProc,
				 XtPointer);
extern XtIntervalId XtAppAddTimeOut(XtAppContext, long unsigned int,
				    XtTimerCallbackProc, XtPointer);
extern XtWorkProcId XtAppAddWorkProc(XtAppContext, XtWorkProc, XtPointer);
extern Widget XtAppCreateShell(const char *, const char *, WidgetClass,
			       Display *, ArgList, Cardinal);
extern void XtAppError(XtAppContext, const char *);
extern void XtAppErrorMsg(XtAppContext, const char *, const char *,
			  const char *, const char *, String *,
			  Cardinal *);
extern XrmDatabase *XtAppGetErrorDatabase(XtAppContext);
extern void XtAppGetErrorDatabaseText(XtAppContext, const char *,
				      const char *, const char *,
				      const char *, String, int,
				      XrmDatabase);
extern Boolean XtAppGetExitFlag(XtAppContext);
extern long unsigned int XtAppGetSelectionTimeout(XtAppContext);
extern Widget XtAppInitialize(XtAppContext *, const char *,
			      XrmOptionDescList, Cardinal, int *, String *,
			      String *, ArgList, Cardinal);
extern void XtAppLock(XtAppContext);
extern void XtAppMainLoop(XtAppContext);
extern void XtAppNextEvent(XtAppContext, XEvent *);
extern Boolean XtAppPeekEvent(XtAppContext, XEvent *);
extern XtInputMask XtAppPending(XtAppContext);
extern void XtAppProcessEvent(XtAppContext, XtInputMask);
extern void XtAppReleaseCacheRefs(XtAppContext, XtCacheRef *);
extern XtErrorHandler XtAppSetErrorHandler(XtAppContext, XtErrorHandler);
extern XtErrorMsgHandler XtAppSetErrorMsgHandler(XtAppContext,
						 XtErrorMsgHandler);
extern void XtAppSetExitFlag(XtAppContext);
extern void XtAppSetFallbackResources(XtAppContext, String *);
extern void XtAppSetSelectionTimeout(XtAppContext, long unsigned int);
extern void XtAppSetTypeConverter(XtAppContext, const char *, const char *,
				  XtTypeConverter, XtConvertArgList,
				  Cardinal, XtCacheType, XtDestructor);
extern XtErrorHandler XtAppSetWarningHandler(XtAppContext, XtErrorHandler);
extern XtErrorMsgHandler XtAppSetWarningMsgHandler(XtAppContext,
						   XtErrorMsgHandler);
extern void XtAppUnlock(XtAppContext);
extern void XtAppWarning(XtAppContext, const char *);
extern void XtAppWarningMsg(XtAppContext, const char *, const char *,
			    const char *, const char *, String *,
			    Cardinal *);
extern void XtAugmentTranslations(Widget, XtTranslations);
extern EventMask XtBuildEventMask(Widget);
extern String XtCXtToolkitError;
extern Boolean XtCallAcceptFocus(Widget, Time *);
extern void XtCallActionProc(Widget, const char *, XEvent *, String *,
			     Cardinal);
extern void XtCallCallbackList(Widget, XtCallbackList, XtPointer);
extern void XtCallCallbacks(Widget, const char *, XtPointer);
extern Boolean XtCallConverter(Display *, XtTypeConverter, XrmValuePtr,
			       Cardinal, XrmValuePtr, XrmValue *,
			       XtCacheRef *);
extern void XtCallbackExclusive(Widget, XtPointer, XtPointer);
extern void XtCallbackNone(Widget, XtPointer, XtPointer);
extern void XtCallbackNonexclusive(Widget, XtPointer, XtPointer);
extern void XtCallbackPopdown(Widget, XtPointer, XtPointer);
extern void XtCallbackReleaseCacheRef(Widget, XtPointer, XtPointer);
extern void XtCallbackReleaseCacheRefList(Widget, XtPointer, XtPointer);
extern char *XtCalloc(Cardinal, Cardinal);
extern void XtCancelSelectionRequest(Widget, Atom);
extern WidgetClass XtClass(Widget);
extern void XtCloseDisplay(Display *);
extern void XtConvert(Widget, const char *, XrmValue *, const char *,
		      XrmValue *);
extern Boolean XtConvertAndStore(Widget, const char *, XrmValue *,
				 const char *, XrmValue *);
extern void XtConvertCase(Display *, KeySym, KeySym *, KeySym *);
extern XtAppContext XtCreateApplicationContext(void);
extern Widget XtCreateApplicationShell(const char *, WidgetClass, ArgList,
				       Cardinal);
extern Widget XtCreateManagedWidget(const char *, WidgetClass, Widget,
				    ArgList, Cardinal);
extern Widget XtCreatePopupShell(const char *, WidgetClass, Widget,
				 ArgList, Cardinal);
extern void XtCreateSelectionRequest(Widget, Atom);
extern Widget XtCreateWidget(const char *, WidgetClass, Widget, ArgList,
			     Cardinal);
extern Boolean XtCvtColorToPixel(Display *, XrmValuePtr, Cardinal *,
				 XrmValuePtr, XrmValuePtr, XtPointer *);
extern Boolean XtCvtIntToBool(Display *, XrmValuePtr, Cardinal *,
			      XrmValuePtr, XrmValuePtr, XtPointer *);
extern Boolean XtCvtIntToBoolean(Display *, XrmValuePtr, Cardinal *,
				 XrmValuePtr, XrmValuePtr, XtPointer *);
extern Boolean XtCvtIntToColor(Display *, XrmValuePtr, Cardinal *,
			       XrmValuePtr, XrmValuePtr, XtPointer *);
extern Boolean XtCvtIntToFloat(Display *, XrmValuePtr, Cardinal *,
			       XrmValuePtr, XrmValuePtr, XtPointer *);
extern Boolean XtCvtIntToFont(Display *, XrmValuePtr, Cardinal *,
			      XrmValuePtr, XrmValuePtr, XtPointer *);
extern Boolean XtCvtIntToPixel(Display *, XrmValuePtr, Cardinal *,
			       XrmValuePtr, XrmValuePtr, XtPointer *);
extern Boolean XtCvtIntToPixmap(Display *, XrmValuePtr, Cardinal *,
				XrmValuePtr, XrmValuePtr, XtPointer *);
extern Boolean XtCvtIntToShort(Display *, XrmValuePtr, Cardinal *,
			       XrmValuePtr, XrmValuePtr, XtPointer *);
extern Boolean XtCvtIntToUnsignedChar(Display *, XrmValuePtr, Cardinal *,
				      XrmValuePtr, XrmValuePtr,
				      XtPointer *);
extern Boolean XtCvtStringToAcceleratorTable(Display *, XrmValuePtr,
					     Cardinal *, XrmValuePtr,
					     XrmValuePtr, XtPointer *);
extern Boolean XtCvtStringToAtom(Display *, XrmValuePtr, Cardinal *,
				 XrmValuePtr, XrmValuePtr, XtPointer *);
extern Boolean XtCvtStringToBool(Display *, XrmValuePtr, Cardinal *,
				 XrmValuePtr, XrmValuePtr, XtPointer *);
extern Boolean XtCvtStringToBoolean(Display *, XrmValuePtr, Cardinal *,
				    XrmValuePtr, XrmValuePtr, XtPointer *);
extern Boolean XtCvtStringToCommandArgArray(Display *, XrmValuePtr,
					    Cardinal *, XrmValuePtr,
					    XrmValuePtr, XtPointer *);
extern Boolean XtCvtStringToCursor(Display *, XrmValuePtr, Cardinal *,
				   XrmValuePtr, XrmValuePtr, XtPointer *);
extern Boolean XtCvtStringToDimension(Display *, XrmValuePtr, Cardinal *,
				      XrmValuePtr, XrmValuePtr,
				      XtPointer *);
extern Boolean XtCvtStringToDirectoryString(Display *, XrmValuePtr,
					    Cardinal *, XrmValuePtr,
					    XrmValuePtr, XtPointer *);
extern Boolean XtCvtStringToDisplay(Display *, XrmValuePtr, Cardinal *,
				    XrmValuePtr, XrmValuePtr, XtPointer *);
extern Boolean XtCvtStringToFile(Display *, XrmValuePtr, Cardinal *,
				 XrmValuePtr, XrmValuePtr, XtPointer *);
extern Boolean XtCvtStringToFloat(Display *, XrmValuePtr, Cardinal *,
				  XrmValuePtr, XrmValuePtr, XtPointer *);
extern Boolean XtCvtStringToFont(Display *, XrmValuePtr, Cardinal *,
				 XrmValuePtr, XrmValuePtr, XtPointer *);
extern Boolean XtCvtStringToFontSet(Display *, XrmValuePtr, Cardinal *,
				    XrmValuePtr, XrmValuePtr, XtPointer *);
extern Boolean XtCvtStringToFontStruct(Display *, XrmValuePtr, Cardinal *,
				       XrmValuePtr, XrmValuePtr,
				       XtPointer *);
extern Boolean XtCvtStringToGravity(Display *, XrmValuePtr, Cardinal *,
				    XrmValuePtr, XrmValuePtr, XtPointer *);
extern Boolean XtCvtStringToInitialState(Display *, XrmValuePtr,
					 Cardinal *, XrmValuePtr,
					 XrmValuePtr, XtPointer *);
extern Boolean XtCvtStringToInt(Display *, XrmValuePtr, Cardinal *,
				XrmValuePtr, XrmValuePtr, XtPointer *);
extern Boolean XtCvtStringToPixel(Display *, XrmValuePtr, Cardinal *,
				  XrmValuePtr, XrmValuePtr, XtPointer *);
extern Boolean XtCvtStringToRestartStyle(Display *, XrmValuePtr,
					 Cardinal *, XrmValuePtr,
					 XrmValuePtr, XtPointer *);
extern Boolean XtCvtStringToShort(Display *, XrmValuePtr, Cardinal *,
				  XrmValuePtr, XrmValuePtr, XtPointer *);
extern Boolean XtCvtStringToTranslationTable(Display *, XrmValuePtr,
					     Cardinal *, XrmValuePtr,
					     XrmValuePtr, XtPointer *);
extern Boolean XtCvtStringToUnsignedChar(Display *, XrmValuePtr,
					 Cardinal *, XrmValuePtr,
					 XrmValuePtr, XtPointer *);
extern Boolean XtCvtStringToVisual(Display *, XrmValuePtr, Cardinal *,
				   XrmValuePtr, XrmValuePtr, XtPointer *);
extern XrmDatabase XtDatabase(Display *);
extern void XtDestroyApplicationContext(XtAppContext);
extern void XtDestroyGC(GC);
extern void XtDestroyWidget(Widget);
extern void XtDirectConvert(XtConverter, XrmValuePtr, Cardinal,
			    XrmValuePtr, XrmValue *);
extern void XtDisownSelection(Widget, Atom, Time);
extern Boolean XtDispatchEvent(XEvent *);
extern Boolean XtDispatchEventToWidget(Widget, XEvent *);
extern Display *XtDisplay(Widget);
extern void XtDisplayInitialize(XtAppContext, Display *, const char *,
				const char *, XrmOptionDescRec *, Cardinal,
				int *, char **);
extern Display *XtDisplayOfObject(Widget);
extern void XtDisplayStringConversionWarning(Display *, const char *,
					     const char *);
extern XtAppContext XtDisplayToApplicationContext(Display *);
extern void XtError(const char *);
extern void XtErrorMsg(const char *, const char *, const char *,
		       const char *, String *, Cardinal *);
extern String XtFindFile(const char *, Substitution, Cardinal,
			 XtFilePredicate);
extern void XtFree(char *);
extern KeySym XtGetActionKeysym(XEvent *, Modifiers *);
extern void XtGetActionList(WidgetClass, XtActionList *, Cardinal *);
extern void XtGetApplicationNameAndClass(Display *, String *, String *);
extern void XtGetApplicationResources(Widget, XtPointer, XtResourceList,
				      Cardinal, ArgList, Cardinal);
extern XtPointer XtGetClassExtension(WidgetClass, Cardinal, XrmQuark,
				     long int, Cardinal);
extern void XtGetConstraintResourceList(WidgetClass, XtResourceList *,
					Cardinal *);
extern void XtGetDisplays(XtAppContext, Display * **, Cardinal *);
extern XrmDatabase *XtGetErrorDatabase(void);
extern void XtGetErrorDatabaseText(const char *, const char *,
				   const char *, const char *, String,
				   int);
extern GC XtGetGC(Widget, XtGCMask, XGCValues *);
extern Widget XtGetKeyboardFocusWidget(Widget);
extern KeySym *XtGetKeysymTable(Display *, KeyCode *, int *);
extern int XtGetMultiClickTime(Display *);
extern void XtGetResourceList(WidgetClass, XtResourceList *, Cardinal *);
extern void XtGetSelectionParameters(Widget, Atom, XtRequestId, Atom *,
				     XtPointer *, long unsigned int *,
				     int *);
extern XSelectionRequestEvent *XtGetSelectionRequest(Widget, Atom,
						     XtRequestId);
extern long unsigned int XtGetSelectionTimeout(void);
extern void XtGetSelectionValue(Widget, Atom, Atom,
				XtSelectionCallbackProc, XtPointer, Time);
extern void XtGetSelectionValueIncremental(Widget, Atom, Atom,
					   XtSelectionCallbackProc,
					   XtPointer, Time);
extern void XtGetSelectionValues(Widget, Atom, Atom *, int,
				 XtSelectionCallbackProc, XtPointer *,
				 Time);
extern void XtGetSelectionValuesIncremental(Widget, Atom, Atom *, int,
					    XtSelectionCallbackProc,
					    XtPointer *, Time);
extern void XtGetSubresources(Widget, XtPointer, const char *,
			      const char *, XtResourceList, Cardinal,
			      ArgList, Cardinal);
extern void XtGetSubvalues(XtPointer, XtResourceList, Cardinal, ArgList,
			   Cardinal);
extern void XtGetValues(Widget, ArgList, Cardinal);
extern void XtGrabButton(Widget, int, Modifiers, Boolean, unsigned int,
			 int, int, Window, Cursor);
extern void XtGrabKey(Widget, KeyCode, Modifiers, Boolean, int, int);
extern int XtGrabKeyboard(Widget, Boolean, int, int, Time);
extern int XtGrabPointer(Widget, Boolean, unsigned int, int, int, Window,
			 Cursor, Time);
extern XtCallbackStatus XtHasCallbacks(Widget, const char *);
extern Widget XtHooksOfDisplay(Display *);
extern Widget XtInitialize(const char *, const char *, XrmOptionDescRec *,
			   Cardinal, int *, char **);
extern void XtInitializeWidgetClass(WidgetClass);
extern void XtInsertEventHandler(Widget, EventMask, Boolean,
				 XtEventHandler, XtPointer,
				 XtListPosition);
extern void XtInsertEventTypeHandler(Widget, int, XtPointer,
				     XtEventHandler, XtPointer,
				     XtListPosition);
extern void XtInsertRawEventHandler(Widget, EventMask, Boolean,
				    XtEventHandler, XtPointer,
				    XtListPosition);
extern void XtInstallAccelerators(Widget, Widget);
extern void XtInstallAllAccelerators(Widget, Widget);
extern Boolean XtIsApplicationShell(Widget);
extern Boolean XtIsManaged(Widget);
extern Boolean XtIsObject(Widget);
extern Boolean XtIsOverrideShell(Widget);
extern Boolean XtIsRealized(Widget);
extern Boolean XtIsSensitive(Widget);
extern Boolean XtIsSessionShell(Widget);
extern Boolean XtIsSubclass(Widget, WidgetClass);
extern Boolean XtIsTransientShell(Widget);
extern Boolean XtIsVendorShell(Widget);
extern void XtKeysymToKeycodeList(Display *, KeySym, KeyCode * *,
				  Cardinal *);
extern XEvent *XtLastEventProcessed(Display *);
extern Time XtLastTimestampProcessed(Display *);
extern void XtMainLoop(void);
extern XtGeometryResult XtMakeGeometryRequest(Widget, XtWidgetGeometry *,
					      XtWidgetGeometry *);
extern XtGeometryResult XtMakeResizeRequest(Widget, Dimension, Dimension,
					    Dimension *, Dimension *);
extern char *XtMalloc(Cardinal);
extern void XtMapWidget(Widget);
extern void XtMenuPopupAction(Widget, XEvent *, String *, Cardinal *);
extern ArgList XtMergeArgLists(ArgList, Cardinal, ArgList, Cardinal);
extern String XtName(Widget);
extern Widget XtNameToWidget(Widget, const char *);
extern String XtNewString(String);
extern void XtNextEvent(XEvent *);
extern void XtNoticeSignal(XtSignalId);
extern Widget XtOpenApplication(XtAppContext *, const char *,
				XrmOptionDescList, Cardinal, int *,
				String *, String *, WidgetClass, ArgList,
				Cardinal);
extern Display *XtOpenDisplay(XtAppContext, const char *, const char *,
			      const char *, XrmOptionDescRec *, Cardinal,
			      int *, char **);
extern void XtOverrideTranslations(Widget, XtTranslations);
extern Boolean XtOwnSelection(Widget, Atom, Time, XtConvertSelectionProc,
			      XtLoseSelectionProc, XtSelectionDoneProc);
extern Boolean XtOwnSelectionIncremental(Widget, Atom, Time,
					 XtConvertSelectionIncrProc,
					 XtLoseSelectionIncrProc,
					 XtSelectionDoneIncrProc,
					 XtCancelConvertSelectionProc,
					 XtPointer);
extern Widget XtParent(Widget);
extern XtAccelerators XtParseAcceleratorTable(const char *);
extern XtTranslations XtParseTranslationTable(const char *);
extern Boolean XtPeekEvent(XEvent *);
extern Boolean XtPending(void);
extern void XtPopdown(Widget);
extern void XtPopup(Widget, XtGrabKind);
extern void XtPopupSpringLoaded(Widget);
extern void XtProcessEvent(XtInputMask);
extern XtGeometryResult XtQueryGeometry(Widget, XtWidgetGeometry *,
					XtWidgetGeometry *);
extern void XtRealizeWidget(Widget);
extern char *XtRealloc(char *, Cardinal);
extern void XtRegisterCaseConverter(Display *, XtCaseProc, KeySym, KeySym);
extern void XtRegisterDrawable(Display *, Drawable, Widget);
extern void XtRegisterExtensionSelector(Display *, int, int,
					XtExtensionSelectProc, XtPointer);
extern void XtRegisterGrabAction(XtActionProc, Boolean, unsigned int, int,
				 int);
extern void XtReleaseGC(Widget, GC);
extern void XtReleasePropertyAtom(Widget, Atom);
extern void XtRemoveActionHook(XtActionHookId);
extern void XtRemoveAllCallbacks(Widget, const char *);
extern void XtRemoveBlockHook(XtBlockHookId);
extern void XtRemoveCallback(Widget, const char *, XtCallbackProc,
			     XtPointer);
extern void XtRemoveCallbacks(Widget, const char *, XtCallbackList);
extern void XtRemoveEventHandler(Widget, EventMask, Boolean,
				 XtEventHandler, XtPointer);
extern void XtRemoveEventTypeHandler(Widget, int, XtPointer,
				     XtEventHandler, XtPointer);
extern void XtRemoveGrab(Widget);
extern void XtRemoveInput(XtInputId);
extern void XtRemoveRawEventHandler(Widget, EventMask, Boolean,
				    XtEventHandler, XtPointer);
extern void XtRemoveSignal(XtSignalId);
extern void XtRemoveTimeOut(XtIntervalId);
extern void XtRemoveWorkProc(XtWorkProcId);
extern Atom XtReservePropertyAtom(Widget);
extern String XtResolvePathname(Display *, const char *, const char *,
				const char *, const char *, Substitution,
				Cardinal, XtFilePredicate);
extern Screen *XtScreen(Widget);
extern XrmDatabase XtScreenDatabase(Screen *);
extern Screen *XtScreenOfObject(Widget);
extern void XtSendSelectionRequest(Widget, Atom, Time);
extern XtCheckpointToken XtSessionGetToken(Widget);
extern void XtSessionReturnToken(XtCheckpointToken);
extern void XtSetErrorHandler(XtErrorHandler);
extern void XtSetErrorMsgHandler(XtErrorMsgHandler);
extern XtEventDispatchProc XtSetEventDispatcher(Display *, int,
						XtEventDispatchProc);
extern void XtSetKeyTranslator(Display *, XtKeyProc);
extern void XtSetKeyboardFocus(Widget, Widget);
extern XtLanguageProc XtSetLanguageProc(XtAppContext, XtLanguageProc,
					XtPointer);
extern void XtSetMappedWhenManaged(Widget, Boolean);
extern void XtSetMultiClickTime(Display *, int);
extern void XtSetSelectionParameters(Widget, Atom, Atom, XtPointer,
				     long unsigned int, int);
extern void XtSetSelectionTimeout(long unsigned int);
extern void XtSetSensitive(Widget, Boolean);
extern void XtSetSubvalues(XtPointer, XtResourceList, Cardinal, ArgList,
			   Cardinal);
extern void XtSetTypeConverter(const char *, const char *, XtTypeConverter,
			       XtConvertArgList, Cardinal, XtCacheType,
			       XtDestructor);
extern void XtSetValues(Widget, ArgList, Cardinal);
extern void XtSetWMColormapWindows(Widget, Widget *, Cardinal);
extern void XtSetWarningHandler(XtErrorHandler);
extern void XtSetWarningMsgHandler(XtErrorMsgHandler);
extern void XtStringConversionWarning(const char *, const char *);
extern WidgetClass XtSuperclass(Widget);
extern void XtToolkitInitialize(void);
extern Boolean XtToolkitThreadInitialize(void);
extern void XtTranslateCoords(Widget, Position, Position, Position *,
			      Position *);
extern void XtTranslateKey(Display *, KeyCode, Modifiers, Modifiers *,
			   KeySym *);
extern void XtTranslateKeycode(Display *, KeyCode, Modifiers, Modifiers *,
			       KeySym *);
extern void XtUngrabButton(Widget, unsigned int, Modifiers);
extern void XtUngrabKey(Widget, KeyCode, Modifiers);
extern void XtUngrabKeyboard(Widget, Time);
extern void XtUngrabPointer(Widget, Time);
extern void XtUninstallTranslations(Widget);
extern void XtUnmapWidget(Widget);
extern void XtUnrealizeWidget(Widget);
extern void XtUnregisterDrawable(Display *, Drawable);
extern Widget XtVaAppCreateShell(const char *, const char *, WidgetClass,
				 Display *, ...);
extern Widget XtVaAppInitialize(XtAppContext *, const char *,
				XrmOptionDescList, Cardinal, int *,
				String *, String *, ...);
extern XtVarArgsList XtVaCreateArgsList(XtPointer, ...);
extern Widget XtVaCreateManagedWidget(const char *, WidgetClass, Widget,
				      ...);
extern Widget XtVaCreatePopupShell(const char *, WidgetClass, Widget, ...);
extern Widget XtVaCreateWidget(const char *, WidgetClass, Widget, ...);
extern void XtVaGetApplicationResources(Widget, XtPointer, XtResourceList,
					Cardinal, ...);
extern void XtVaGetSubresources(Widget, XtPointer, const char *,
				const char *, XtResourceList, Cardinal,
				...);
extern void XtVaGetSubvalues(XtPointer, XtResourceList, Cardinal, ...);
extern void XtVaGetValues(Widget, ...);
extern Widget XtVaOpenApplication(XtAppContext *, const char *,
				  XrmOptionDescList, Cardinal, int *,
				  String *, String *, WidgetClass, ...);
extern void XtVaSetSubvalues(XtPointer, XtResourceList, Cardinal, ...);
extern void XtVaSetValues(Widget, ...);
extern void XtWarning(const char *);
extern void XtWarningMsg(const char *, const char *, const char *,
			 const char *, String *, Cardinal *);
extern XtAppContext XtWidgetToApplicationContext(Widget);
extern Window XtWindow(Widget);
extern Window XtWindowOfObject(Widget);
extern Widget XtWindowToWidget(Display *, Window);
extern Boolean _XtCheckSubclassFlag(Widget, XtEnum);
extern Boolean _XtIsSubclassOf(Widget, WidgetClass, WidgetClass, XtEnum);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/IntrinsicP.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define _XtintrinsicP_h	1

typedef struct {
    long int xrm_name;
    long int xrm_class;
    long int xrm_type;
    Cardinal xrm_size;
    int xrm_offset;
    long int xrm_default_type;
    XtPointer xrm_default_addr;
} XrmResource;
typedef XrmResource *XrmResourceList;
typedef struct _XtTMRec *XtTM;
typedef struct {
    String name;
    String type;
    XtArgVal value;
    int size;
} XtTypedArg;
typedef XtTypedArg *XtTypedArgList;
typedef void (*XtProc) (void);
typedef void (*XtWidgetClassProc) (WidgetClass);
typedef void (*XtInitProc) (Widget, Widget, ArgList, Cardinal *);
typedef void (*XtArgsProc) (Widget, ArgList, Cardinal *);
typedef void (*XtRealizeProc) (Widget, XtValueMask *,
			       XSetWindowAttributes *);
typedef void (*XtWidgetProc) (Widget);
typedef void (*XtExposeProc) (Widget, XEvent *, Region);
typedef Boolean(*XtSetValuesFunc) (Widget, Widget, Widget, ArgList,
				   Cardinal *);
typedef Boolean(*XtArgsFunc) (Widget, ArgList, Cardinal *);
typedef void (*XtAlmostProc) (Widget, Widget, XtWidgetGeometry *,
			      XtWidgetGeometry *);
typedef Boolean(*XtAcceptFocusProc) (Widget, Time *);
typedef long unsigned int XtVersionType;
typedef XtGeometryResult(*XtGeometryHandler) (Widget, XtWidgetGeometry *,
					      XtWidgetGeometry *);
typedef void (*XtStringProc) (Widget, String);
typedef void (*XtAllocateProc) (WidgetClass, Cardinal *, Cardinal *,
				ArgList, Cardinal *, XtTypedArgList,
				Cardinal *, struct _WidgetRec * *,
				void **);
typedef void (*XtDeallocateProc) (struct _WidgetRec *, void *);
typedef struct _XtTMRec {
    XtTranslations translations;
    XtBoundActions proc_table;
    struct _XtStateRec *current_state;
    long unsigned int lastEventTime;
} XtTMRec;
extern void XtConfigureWidget(Widget, Position, Position, Dimension,
			      Dimension, Dimension);
extern void XtCreateWindow(Widget, unsigned int, Visual *, XtValueMask,
			   XSetWindowAttributes *);
extern Boolean XtIsComposite(Widget);
extern Boolean XtIsConstraint(Widget);
extern Boolean XtIsRectObj(Widget);
extern Boolean XtIsShell(Widget);
extern Boolean XtIsTopLevelShell(Widget);
extern Boolean XtIsWMShell(Widget);
extern Boolean XtIsWidget(Widget);
extern void XtMoveWidget(Widget, Position, Position);
extern void XtProcessLock(void);
extern void XtProcessUnlock(void);
extern void XtResizeWidget(Widget, Dimension, Dimension, Dimension);
extern void XtResizeWindow(Widget);
extern void _XtInherit(void);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/Object.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define _XtObject_h	1

typedef struct _ObjectClassRec *ObjectClass;
typedef struct _ObjectClassRec *Object;
extern WidgetClass objectClass;
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/ObjectP.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define XtInheritAllocate	((XtAllocateProc) _XtInherit)
#define XtInheritDeallocate	((XtDeallocateProc) _XtInherit)
#define _XtObjectP_h_	1
#define XtObjectExtensionVersion	1L

typedef struct _ObjectClassRec ObjectClassRec;
extern ObjectClassRec objectClassRec;
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/Shell.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define _XtShell_h	1

extern char XtShellStrings[];
extern WidgetClass applicationShellWidgetClass;
extern WidgetClass overrideShellWidgetClass;
extern WidgetClass sessionShellWidgetClass;
extern WidgetClass shellWidgetClass;
extern WidgetClass topLevelShellWidgetClass;
extern WidgetClass transientShellWidgetClass;
extern WidgetClass wmShellWidgetClass;
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/StringDefs.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define XtNaccelerators	((char*)&amp;XtStrings[0])
#define XtCFile	((char*)&amp;XtStrings[1012])
#define XtCFont	((char*)&amp;XtStrings[1017])
#define XtCForeground	((char*)&amp;XtStrings[1022])
#define XtCFraction	((char*)&amp;XtStrings[1033])
#define XtCFunction	((char*)&amp;XtStrings[1042])
#define XtCHeight	((char*)&amp;XtStrings[1051])
#define XtCHSpace	((char*)&amp;XtStrings[1058])
#define XtCIndex	((char*)&amp;XtStrings[1065])
#define XtCInitialResourcesPersistent	((char*)&amp;XtStrings[1071])
#define XtCInsertPosition	((char*)&amp;XtStrings[1098])
#define XtCInterval	((char*)&amp;XtStrings[1113])
#define XtNborderPixmap	((char*)&amp;XtStrings[111])
#define XtCJustify	((char*)&amp;XtStrings[1122])
#define XtCKnobIndent	((char*)&amp;XtStrings[1130])
#define XtCKnobPixel	((char*)&amp;XtStrings[1141])
#define XtCLabel	((char*)&amp;XtStrings[1151])
#define XtCLength	((char*)&amp;XtStrings[1157])
#define XtCMappedWhenManaged	((char*)&amp;XtStrings[1164])
#define XtCMargin	((char*)&amp;XtStrings[1182])
#define XtCMenuEntry	((char*)&amp;XtStrings[1189])
#define XtCNotify	((char*)&amp;XtStrings[1199])
#define XtCOrientation	((char*)&amp;XtStrings[1206])
#define XtCParameter	((char*)&amp;XtStrings[1218])
#define XtCPixmap	((char*)&amp;XtStrings[1228])
#define XtCPosition	((char*)&amp;XtStrings[1235])
#define XtCReadOnly	((char*)&amp;XtStrings[1244])
#define XtNborderWidth	((char*)&amp;XtStrings[124])
#define XtCResize	((char*)&amp;XtStrings[1253])
#define XtCReverseVideo	((char*)&amp;XtStrings[1260])
#define XtCScreen	((char*)&amp;XtStrings[1273])
#define XtCScrollProc	((char*)&amp;XtStrings[1280])
#define XtCScrollDCursor	((char*)&amp;XtStrings[1291])
#define XtCScrollHCursor	((char*)&amp;XtStrings[1305])
#define XtCScrollLCursor	((char*)&amp;XtStrings[1319])
#define XtCScrollRCursor	((char*)&amp;XtStrings[1333])
#define XtCScrollUCursor	((char*)&amp;XtStrings[1347])
#define XtCScrollVCursor	((char*)&amp;XtStrings[1361])
#define XtNcallback	((char*)&amp;XtStrings[136])
#define XtCSelection	((char*)&amp;XtStrings[1375])
#define XtCSensitive	((char*)&amp;XtStrings[1385])
#define XtCSelectionArray	((char*)&amp;XtStrings[1395])
#define XtNallowHoriz	((char*)&amp;XtStrings[13])
#define XtCSpace	((char*)&amp;XtStrings[1410])
#define XtCString	((char*)&amp;XtStrings[1416])
#define XtCTextOptions	((char*)&amp;XtStrings[1423])
#define XtCTextPosition	((char*)&amp;XtStrings[1435])
#define XtCTextSink	((char*)&amp;XtStrings[1448])
#define XtCTextSource	((char*)&amp;XtStrings[1457])
#define XtNchildren	((char*)&amp;XtStrings[145])
#define XtCThickness	((char*)&amp;XtStrings[1468])
#define XtCThumb	((char*)&amp;XtStrings[1478])
#define XtCTranslations	((char*)&amp;XtStrings[1484])
#define XtCValue	((char*)&amp;XtStrings[1497])
#define XtCVSpace	((char*)&amp;XtStrings[1503])
#define XtCWidth	((char*)&amp;XtStrings[1510])
#define XtCWindow	((char*)&amp;XtStrings[1516])
#define XtCX	((char*)&amp;XtStrings[1523])
#define XtCY	((char*)&amp;XtStrings[1525])
#define XtRAcceleratorTable	((char*)&amp;XtStrings[1527])
#define XtRAtom	((char*)&amp;XtStrings[1544])
#define XtRBitmap	((char*)&amp;XtStrings[1549])
#define XtNcolormap	((char*)&amp;XtStrings[154])
#define XtRBool	((char*)&amp;XtStrings[1556])
#define XtRBoolean	((char*)&amp;XtStrings[1561])
#define XtRCallback	((char*)&amp;XtStrings[1569])
#define XtRCallProc	((char*)&amp;XtStrings[1578])
#define XtRCardinal	((char*)&amp;XtStrings[1587])
#define XtRColor	((char*)&amp;XtStrings[1596])
#define XtRColormap	((char*)&amp;XtStrings[1602])
#define XtRCursor	((char*)&amp;XtStrings[1611])
#define XtRDimension	((char*)&amp;XtStrings[1618])
#define XtRDisplay	((char*)&amp;XtStrings[1628])
#define XtREditMode	((char*)&amp;XtStrings[1636])
#define XtNdepth	((char*)&amp;XtStrings[163])
#define XtREnum	((char*)&amp;XtStrings[1645])
#define XtRFile	((char*)&amp;XtStrings[1650])
#define XtRFloat	((char*)&amp;XtStrings[1655])
#define XtRFont	((char*)&amp;XtStrings[1661])
#define XtRFontStruct	((char*)&amp;XtStrings[1666])
#define XtRFunction	((char*)&amp;XtStrings[1677])
#define XtRGeometry	((char*)&amp;XtStrings[1686])
#define XtRImmediate	((char*)&amp;XtStrings[1695])
#define XtNdestroyCallback	((char*)&amp;XtStrings[169])
#define XtRInitialState	((char*)&amp;XtStrings[1705])
#define XtRInt	((char*)&amp;XtStrings[1718])
#define XtRJustify	((char*)&amp;XtStrings[1722])
#define XtRLongBoolean	((char*)&amp;XtStrings[1730])
#define XtRObject	((char*)&amp;XtStrings[1735])
#define XtROrientation	((char*)&amp;XtStrings[1742])
#define XtRPixel	((char*)&amp;XtStrings[1754])
#define XtRPixmap	((char*)&amp;XtStrings[1760])
#define XtRPointer	((char*)&amp;XtStrings[1767])
#define XtRPosition	((char*)&amp;XtStrings[1775])
#define XtRScreen	((char*)&amp;XtStrings[1784])
#define XtRShort	((char*)&amp;XtStrings[1791])
#define XtRString	((char*)&amp;XtStrings[1797])
#define XtRStringArray	((char*)&amp;XtStrings[1804])
#define XtRStringTable	((char*)&amp;XtStrings[1816])
#define XtRUnsignedChar	((char*)&amp;XtStrings[1828])
#define XtRTranslationTable	((char*)&amp;XtStrings[1841])
#define XtRVisual	((char*)&amp;XtStrings[1858])
#define XtNeditType	((char*)&amp;XtStrings[185])
#define XtRWidget	((char*)&amp;XtStrings[1865])
#define XtRWidgetClass	((char*)&amp;XtStrings[1872])
#define XtRWidgetList	((char*)&amp;XtStrings[1884])
#define XtRWindow	((char*)&amp;XtStrings[1895])
#define XtEoff	((char*)&amp;XtStrings[1902])
#define XtEfalse	((char*)&amp;XtStrings[1906])
#define XtEno	((char*)&amp;XtStrings[1912])
#define XtEon	((char*)&amp;XtStrings[1915])
#define XtEtrue	((char*)&amp;XtStrings[1918])
#define XtEyes	((char*)&amp;XtStrings[1923])
#define XtEvertical	((char*)&amp;XtStrings[1927])
#define XtEhorizontal	((char*)&amp;XtStrings[1936])
#define XtEtextRead	((char*)&amp;XtStrings[1947])
#define XtNfile	((char*)&amp;XtStrings[194])
#define XtEtextAppend	((char*)&amp;XtStrings[1952])
#define XtEtextEdit	((char*)&amp;XtStrings[1959])
#define XtExtdefaultbackground	((char*)&amp;XtStrings[1964])
#define XtExtdefaultforeground	((char*)&amp;XtStrings[1984])
#define XtNfont	((char*)&amp;XtStrings[199])
#define XtExtdefaultfont	((char*)&amp;XtStrings[2004])
#define XtNfontSet	((char*)&amp;XtStrings[2018])
#define XtRFontSet	((char*)&amp;XtStrings[2026])
#define XtCFontSet	((char*)&amp;XtStrings[2034])
#define XtRGravity	((char*)&amp;XtStrings[2042])
#define XtNforceBars	((char*)&amp;XtStrings[204])
#define XtNcreateHook	((char*)&amp;XtStrings[2050])
#define XtNchangeHook	((char*)&amp;XtStrings[2061])
#define XtNconfigureHook	((char*)&amp;XtStrings[2072])
#define XtNgeometryHook	((char*)&amp;XtStrings[2086])
#define XtNdestroyHook	((char*)&amp;XtStrings[2099])
#define XtNshells	((char*)&amp;XtStrings[2111])
#define XtNnumShells	((char*)&amp;XtStrings[2118])
#define XtRCommandArgArray	((char*)&amp;XtStrings[2128])
#define XtRDirectoryString	((char*)&amp;XtStrings[2144])
#define XtNforeground	((char*)&amp;XtStrings[214])
#define XtREnvironmentArray	((char*)&amp;XtStrings[2160])
#define XtRRestartStyle	((char*)&amp;XtStrings[2177])
#define XtRSmcConn	((char*)&amp;XtStrings[2190])
#define XtHcreate	((char*)&amp;XtStrings[2198])
#define XtHsetValues	((char*)&amp;XtStrings[2207])
#define XtHmanageChildren	((char*)&amp;XtStrings[2219])
#define XtHunmanageChildren	((char*)&amp;XtStrings[2236])
#define XtHmanageSet	((char*)&amp;XtStrings[2255])
#define XtNfunction	((char*)&amp;XtStrings[225])
#define XtHunmanageSet	((char*)&amp;XtStrings[2267])
#define XtHrealizeWidget	((char*)&amp;XtStrings[2281])
#define XtHunrealizeWidget	((char*)&amp;XtStrings[2297])
#define XtHaddCallback	((char*)&amp;XtStrings[2315])
#define XtHaddCallbacks	((char*)&amp;XtStrings[2329])
#define XtHremoveCallback	((char*)&amp;XtStrings[2344])
#define XtNheight	((char*)&amp;XtStrings[234])
#define XtHremoveCallbacks	((char*)&amp;XtStrings[2361])
#define XtHremoveAllCallbacks	((char*)&amp;XtStrings[2379])
#define XtHaugmentTranslations	((char*)&amp;XtStrings[2400])
#define XtNhighlight	((char*)&amp;XtStrings[241])
#define XtHoverrideTranslations	((char*)&amp;XtStrings[2422])
#define XtHuninstallTranslations	((char*)&amp;XtStrings[2445])
#define XtHsetKeyboardFocus	((char*)&amp;XtStrings[2469])
#define XtHsetWMColormapWindows	((char*)&amp;XtStrings[2488])
#define XtNallowVert	((char*)&amp;XtStrings[24])
#define XtHsetMappedWhenManaged	((char*)&amp;XtStrings[2511])
#define XtNhSpace	((char*)&amp;XtStrings[251])
#define XtHmapWidget	((char*)&amp;XtStrings[2534])
#define XtHunmapWidget	((char*)&amp;XtStrings[2546])
#define XtHpopup	((char*)&amp;XtStrings[2560])
#define XtHpopupSpringLoaded	((char*)&amp;XtStrings[2568])
#define XtHpopdown	((char*)&amp;XtStrings[2588])
#define XtNindex	((char*)&amp;XtStrings[258])
#define XtHconfigure	((char*)&amp;XtStrings[2598])
#define XtHpreGeometry	((char*)&amp;XtStrings[2610])
#define XtHpostGeometry	((char*)&amp;XtStrings[2624])
#define XtHdestroy	((char*)&amp;XtStrings[2639])
#define XtNinitialResourcesPersistent	((char*)&amp;XtStrings[264])
#define XtNinnerHeight	((char*)&amp;XtStrings[291])
#define XtNinnerWidth	((char*)&amp;XtStrings[303])
#define XtNinnerWindow	((char*)&amp;XtStrings[314])
#define XtNinsertPosition	((char*)&amp;XtStrings[326])
#define XtNinternalHeight	((char*)&amp;XtStrings[341])
#define XtNancestorSensitive	((char*)&amp;XtStrings[34])
#define XtNinternalWidth	((char*)&amp;XtStrings[356])
#define XtNjumpProc	((char*)&amp;XtStrings[370])
#define XtNjustify	((char*)&amp;XtStrings[379])
#define XtNknobHeight	((char*)&amp;XtStrings[387])
#define XtNknobIndent	((char*)&amp;XtStrings[398])
#define XtNknobPixel	((char*)&amp;XtStrings[409])
#define XtNknobWidth	((char*)&amp;XtStrings[419])
#define XtNlabel	((char*)&amp;XtStrings[429])
#define XtNlength	((char*)&amp;XtStrings[435])
#define XtNlowerRight	((char*)&amp;XtStrings[442])
#define XtNmappedWhenManaged	((char*)&amp;XtStrings[453])
#define XtNmenuEntry	((char*)&amp;XtStrings[471])
#define XtNname	((char*)&amp;XtStrings[481])
#define XtNnotify	((char*)&amp;XtStrings[486])
#define XtNnumChildren	((char*)&amp;XtStrings[493])
#define XtNorientation	((char*)&amp;XtStrings[505])
#define XtNparameter	((char*)&amp;XtStrings[517])
#define XtNpixmap	((char*)&amp;XtStrings[527])
#define XtNbackground	((char*)&amp;XtStrings[52])
#define XtNpopupCallback	((char*)&amp;XtStrings[534])
#define XtNpopdownCallback	((char*)&amp;XtStrings[548])
#define XtNresize	((char*)&amp;XtStrings[564])
#define XtNreverseVideo	((char*)&amp;XtStrings[571])
#define XtNscreen	((char*)&amp;XtStrings[584])
#define XtNscrollProc	((char*)&amp;XtStrings[591])
#define XtNscrollDCursor	((char*)&amp;XtStrings[602])
#define XtNscrollHCursor	((char*)&amp;XtStrings[616])
#define XtNscrollLCursor	((char*)&amp;XtStrings[630])
#define XtNbackgroundPixmap	((char*)&amp;XtStrings[63])
#define XtNscrollRCursor	((char*)&amp;XtStrings[644])
#define XtNscrollUCursor	((char*)&amp;XtStrings[658])
#define XtNscrollVCursor	((char*)&amp;XtStrings[672])
#define XtNselection	((char*)&amp;XtStrings[686])
#define XtNselectionArray	((char*)&amp;XtStrings[696])
#define XtNsensitive	((char*)&amp;XtStrings[711])
#define XtNshown	((char*)&amp;XtStrings[721])
#define XtNspace	((char*)&amp;XtStrings[727])
#define XtNstring	((char*)&amp;XtStrings[733])
#define XtNtextOptions	((char*)&amp;XtStrings[740])
#define XtNtextSink	((char*)&amp;XtStrings[752])
#define XtNtextSource	((char*)&amp;XtStrings[761])
#define XtNthickness	((char*)&amp;XtStrings[772])
#define XtNthumb	((char*)&amp;XtStrings[782])
#define XtNthumbProc	((char*)&amp;XtStrings[788])
#define XtNtop	((char*)&amp;XtStrings[798])
#define XtNtranslations	((char*)&amp;XtStrings[802])
#define XtNbitmap	((char*)&amp;XtStrings[80])
#define XtNunrealizeCallback	((char*)&amp;XtStrings[815])
#define XtNupdate	((char*)&amp;XtStrings[833])
#define XtNuseBottom	((char*)&amp;XtStrings[840])
#define XtNuseRight	((char*)&amp;XtStrings[850])
#define XtNvalue	((char*)&amp;XtStrings[859])
#define XtNvSpace	((char*)&amp;XtStrings[865])
#define XtNwidth	((char*)&amp;XtStrings[872])
#define XtNwindow	((char*)&amp;XtStrings[878])
#define XtNborderColor	((char*)&amp;XtStrings[87])
#define XtNx	((char*)&amp;XtStrings[885])
#define XtNy	((char*)&amp;XtStrings[887])
#define XtCAccelerators	((char*)&amp;XtStrings[889])
#define XtCBackground	((char*)&amp;XtStrings[902])
#define XtCBitmap	((char*)&amp;XtStrings[913])
#define XtCBoolean	((char*)&amp;XtStrings[920])
#define XtCBorderColor	((char*)&amp;XtStrings[928])
#define XtCBorderWidth	((char*)&amp;XtStrings[940])
#define XtCCallback	((char*)&amp;XtStrings[952])
#define XtCColormap	((char*)&amp;XtStrings[961])
#define XtCColor	((char*)&amp;XtStrings[970])
#define XtCCursor	((char*)&amp;XtStrings[976])
#define XtCDepth	((char*)&amp;XtStrings[983])
#define XtCEditType	((char*)&amp;XtStrings[989])
#define XtCEventBindings	((char*)&amp;XtStrings[998])
#define XtNborder	((char*)&amp;XtStrings[99])
#define _XtStringDefs_h_	1

extern char XtStrings[];
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/TranslateI.h</TITLE>
<PARA>
</PARA>
<SCREEN>

struct _TranslationData {
    unsigned char hasBindings;
    unsigned char operation;
    TMShortCard numStateTrees;
    struct _TranslationData *composers[2];
    EventMask eventMask;
    TMStateTree stateTreeTbl[1];
};
typedef struct _ActionsRec *ActionPtr;
typedef struct _ActionsRec {
    int idx;
    String *params;
    Cardinal num_params;
    ActionPtr next;
} ActionRec;
typedef long unsigned int TMLongCard;
struct _LateBindings {
    unsigned int knot:1;
    unsigned int pair:1;
    short unsigned int ref_count;
    KeySym keysym;
};
typedef struct _LateBindings *LateBindingsPtr;
struct _TMTypeMatchRec {
    TMLongCard eventType;
    TMLongCard eventCode;
    TMLongCard eventCodeMask;
    MatchProc matchEvent;
};
typedef struct _TMTypeMatchRec *TMTypeMatch;
struct _TMModifierMatchRec {
    TMLongCard modifiers;
    TMLongCard modifierMask;
    LateBindingsPtr lateModifiers;
    Boolean standard;
};
typedef struct _TMModifierMatchRec *TMModifierMatch;
typedef struct _TMEventRec *TMEventPtr;
typedef Boolean(*MatchProc) (TMTypeMatch, TMModifierMatch, TMEventPtr);
struct _TMEventRec {
    XEvent *xev;
    Event event;
};
typedef struct _EventRec {
    TMLongCard modifiers;
    TMLongCard modifierMask;
    LateBindingsPtr lateModifiers;
    TMLongCard eventType;
    TMLongCard eventCode;
    TMLongCard eventCodeMask;
    MatchProc matchEvent;
    Boolean standard;
} Event;
typedef short unsigned int TMShortCard;
typedef struct _TMBranchHeadRec {
    unsigned int isSimple:1;
    unsigned int hasActions:1;
    unsigned int hasCycles:1;
    unsigned int more:13;
    TMShortCard typeIndex;
    TMShortCard modIndex;
} TMBranchHeadRec;
typedef struct _TMSimpleStateTreeRec {
    unsigned int isSimple:1;
    unsigned int isAccelerator:1;
    unsigned int mappingNotifyInterest:1;
    unsigned int refCount:13;
    TMShortCard numBranchHeads;
    TMShortCard numQuarks;
    TMShortCard unused;
    TMBranchHeadRec *branchHeadTbl;
    XrmQuark *quarkTbl;
} TMSimpleStateTreeRec;
struct _XtStateRec {
    unsigned int isCycleStart:1;
    unsigned int isCycleEnd:1;
    TMShortCard typeIndex;
    TMShortCard modIndex;
    ActionPtr actions;
    StatePtr nextLevel;
};
typedef struct _XtStateRec *StatePtr;
typedef struct _TMParseStateTreeRec {
    unsigned int isSimple:1;
    unsigned int isAccelerator:1;
    unsigned int mappingNotifyInterest:1;
    unsigned int isStackQuarks:1;
    unsigned int isStackBranchHeads:1;
    unsigned int isStackComplexBranchHeads:1;
    unsigned int unused:10;
    TMShortCard numBranchHeads;
    TMShortCard numQuarks;
    TMShortCard numComplexBranchHeads;
    TMBranchHeadRec *branchHeadTbl;
    XrmQuark *quarkTbl;
    StatePtr *complexBranchHeadTbl;
    TMShortCard branchHeadTblSize;
    TMShortCard quarkTblSize;
    TMShortCard complexBranchHeadTblSize;
    StatePtr head;
} TMParseStateTreeRec;
typedef struct _TMComplexStateTreeRec {
    unsigned int isSimple:1;
    unsigned int isAccelerator:1;
    unsigned int mappingNotifyInterest:1;
    unsigned int refCount:13;
    TMShortCard numBranchHeads;
    TMShortCard numQuarks;
    TMShortCard numComplexBranchHeads;
    TMBranchHeadRec *branchHeadTbl;
    XrmQuark *quarkTbl;
    StatePtr *complexBranchHeadTbl;
} TMComplexStateTreeRec;
union _TMStateTreeRec {
    TMSimpleStateTreeRec simple;
    TMParseStateTreeRec parse;
    TMComplexStateTreeRec complex;
};
typedef union _TMStateTreeRec *TMStateTree;
typedef Boolean(*_XtTraversalProc) (StatePtr, XtPointer);
typedef struct _TMSimpleBindProcsRec {
    XtActionProc *procs;
} TMSimpleBindProcsRec;
typedef struct _TMSimpleBindDataRec {
    unsigned int isComplex:1;
    TMSimpleBindProcsRec bindTbl[8];
} TMSimpleBindDataRec;
typedef struct _TMComplexBindProcsRec {
    Widget widget;
    XtTranslations aXlations;
    XtActionProc *procs;
} TMComplexBindProcsRec;
struct _ATranslationData {
    unsigned char hasBindings;
    unsigned char operation;
    struct _TranslationData *xlations;
    struct _ATranslationData *next;
    TMComplexBindProcsRec bindTbl[24];
};
typedef struct _TMComplexBindDataRec {
    unsigned int isComplex:1;
    struct _ATranslationData *accel_context;
    TMComplexBindProcsRec bindTbl[24];
} TMComplexBindDataRec;
union _TMBindDataRec {
    TMSimpleBindDataRec simple;
    TMComplexBindDataRec complex;
};
typedef union _TMBindDataRec *TMBindData;
typedef struct _TMParseStateTreeRec *TMParseStateTree;
struct _EventSeqRec {
    Event event;
    StatePtr state;
    EventSeqPtr next;
    ActionPtr actions;
};
typedef struct _EventSeqRec *EventSeqPtr;
typedef struct _TMBranchHeadRec *TMBranchHead;
typedef unsigned int _XtTranslateOp;
</SCREEN>
</SECT2>
</SECT1>
<SECT1 ID=libXtman>
<TITLE>Interface Definitions for libXt</TITLE>
<PARA>
The interfaces defined on the following pages are included in libXt and are defined
by this specification.
Unless otherwise noted, these interfaces shall be included
in the source standard.
</PARA>
<PARA>
Other interfaces listed in <XREF LINKEND=libXt> shall behave as described
in the referenced base document.
</PARA>
<REFENTRY ID="graphiclib--XtCopyFromArg-"> <REFMETA>
<REFENTRYTITLE>_XtCopyFromArg</REFENTRYTITLE>
<REFMISCINFO>Graphic Libraries</REFMISCINFO>
</REFMETA>
<REFNAMEDIV>
<REFNAME>_XtCopyFromArg</REFNAME>
<REFPURPOSE>
Copy "size" bytes from src to dst.  
</REFPURPOSE>
</REFNAMEDIV>
<REFSYNOPSISDIV>
<REFSYNOPSISDIVINFO>
<DATE>3 May 2001</DATE>
</REFSYNOPSISDIVINFO>
<SYNOPSIS>
void _XtCopyFromArg(XtArgVal src,char* dst,unsigned int size);
</SYNOPSIS>
</REFSYNOPSISDIV>
<REFSECT1>
<REFSECT1INFO>
<DATE>3 May 2001</DATE>
</REFSECT1INFO>
<TITLE>Description
</TITLE>
<PARA>
The _XtCopyFromArg() function copies "size" bytes from src
to dst.  This is an internal X function call.
</PARA>

</REFSECT1>
</REFENTRY>









<REFENTRY ID="graphiclib--XtInherit-"> <REFMETA>
<REFENTRYTITLE>_XtInherit</REFENTRYTITLE>
<REFMISCINFO>Graphic Libraries</REFMISCINFO>
</REFMETA>
<REFNAMEDIV>
<REFNAME>_XtInherit
</REFNAME>
<REFPURPOSE>
inheritance operation.
</REFPURPOSE>
</REFNAMEDIV>

<REFSYNOPSISDIV>
<REFSYNOPSISDIVINFO>
<DATE>2 May  2001</DATE>
</REFSYNOPSISDIVINFO>
<SYNOPSIS>
#include &lt;IntrinsicP.h>

extern void _XtInherit(
#if NeedFunctionPrototypes
    void
#endif
);
</SYNOPSIS>
</REFSYNOPSISDIV>

<REFSECT1>
<REFSECT1INFO>
<DATE>2 May 2001</DATE>
</REFSECT1INFO>
<TITLE>Description
</TITLE>
<PARA>
_XtInherit() is a procedure that issues an error message if it is actually called.
</PARA>
</REFSECT1>
</REFENTRY>

<REFENTRY ID="graphiclib--XtInheritTranslations-"> <REFMETA>
<REFENTRYTITLE>_XtInheritTranslations</REFENTRYTITLE>
<REFMISCINFO>Graphic Libraries</REFMISCINFO>
</REFMETA>
<REFNAMEDIV>
<REFNAME>_XtInheritTranslations
</REFNAME>
<REFPURPOSE>
an inheritance constant
</REFPURPOSE>
</REFNAMEDIV>

<REFSYNOPSISDIV>
<REFSYNOPSISDIVINFO>
<DATE>2 May  2001</DATE>
</REFSYNOPSISDIVINFO>
<SYNOPSIS>
#include &lt;CoreP.h>

externalref int _XtInheritTranslations;
</SYNOPSIS>
</REFSYNOPSISDIV>

<REFSECT1>
<REFSECT1INFO>
<DATE>2 May 2001</DATE>
</REFSECT1INFO>
<TITLE>Description
</TITLE>
<PARA>
_XtInheritTranslations is an inheritance constant.
</PARA>
</REFSECT1>
</REFENTRY>

<REFENTRY ID="graphiclib--XtIsSubclassOf-"> <REFMETA>
<REFENTRYTITLE>_XtIsSubclassOf</REFENTRYTITLE>
<REFMISCINFO>Graphic Libraries</REFMISCINFO>
</REFMETA>
<REFNAMEDIV>
<REFNAME>_XtIsSubclassOf</REFNAME>
<REFPURPOSE>
determine if Widget is a subclass of WidgetClass.
</REFPURPOSE>
</REFNAMEDIV>
<REFSYNOPSISDIV>
<REFSYNOPSISDIVINFO>
<DATE>3 May 2001</DATE>
</REFSYNOPSISDIVINFO>
<SYNOPSIS>
#include &lt;Intrinsic.h>

extern Boolean _XtIsSubclassOf(
    Widget              /* object*  /,
    WidgetClass         /* widget_class */,
    WidgetClass         /* flag_class */,
    _XtXtEnum           /* type_flag */,
);

</SYNOPSIS>
</REFSYNOPSISDIV>
<REFSECT1>
<REFSECT1INFO>
<DATE>3 May 2001</DATE>
</REFSECT1INFO>
<TITLE>Description
</TITLE>
<PARA>
Determine if Widget(object) is a subclass of WidgetClass(widget_class).
</PARA>

</REFSECT1>
</REFENTRY>









</SECT1>
<!-- End of text generated from database -->


<!-- Start of generated text - do not edit! -->
<!-- generated from the LSB specification database by mklibspec -->
<SECT1 ID=libXext>
<TITLE>Interfaces for libXext</TITLE>
<PARA>
<XREF LINKEND="lib-libXext-def"> defines the library name and shared object name
for the libXext library
</PARA>
<TABLE id="lib-libXext-def">
<TITLE>libXext Definition</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Library:</ENTRY>
<ENTRY>libXext</ENTRY>
</ROW>
<ROW>
<ENTRY>SONAME:</ENTRY>
<ENTRY>libXext.so.6</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The behavior of the interfaces in this library is specified by the following specifications:<SIMPLELIST COLUMNS=1>
<MEMBER ID='REFSTD.libXext.1'>
[X-dbe] <XREF LINKEND="std.X.dbe">
</MEMBER>
<MEMBER ID='REFSTD.libXext.2'>
[X-DPMS] <XREF LINKEND="std.X.DPMS">
</MEMBER>
<MEMBER ID='REFSTD.libXext.3'>
[X-evi] <XREF LINKEND="std.X.evi">
</MEMBER>
<MEMBER ID='REFSTD.libXext.4'>
[X-security] <XREF LINKEND="std.X.security">
</MEMBER>
<MEMBER ID='REFSTD.libXext.5'>
[X-shape] <XREF LINKEND="std.X.shape">
</MEMBER>
<MEMBER ID='REFSTD.libXext.6'>
[X-shm] <XREF LINKEND="std.X.shm">
</MEMBER>
<MEMBER ID='REFSTD.libXext.7'>
[X-sync] <XREF LINKEND="std.X.sync">
</MEMBER>
</SIMPLELIST>
</PARA>
<!-- debug: database interface name libXext interfaces -->
<SECT2>
<!--libgroup-->
<TITLE>libXext interfaces</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for libXext interfaces</TITLE>
<PARA>
No external functions are defined for libXext - libXext interfaces
in this part of the specification. See also the relevant architecture specific part of this specification.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name X Shape Extension -->
<SECT2>
<!--libgroup-->
<TITLE>X Shape Extension</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for X Shape Extension</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic functions
for X Shape Extension specified in <XREF linkend="tbl-libXext-x-sha-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<TABLE id="tbl-libXext-x-sha-ints">
<TITLE>libXext - X Shape Extension Function Interfaces</TITLE>
<TGROUP COLS=4>
<TBODY>
<ROW>
<ENTRY><indexterm><primary>XShapeCombineMask</primary></indexterm>XShapeCombineMask <LINK LINKEND="REFSTD.libXext.5">[X-shape]</LINK></ENTRY>
<ENTRY><indexterm><primary>XShapeCombineRectangles</primary></indexterm>XShapeCombineRectangles <LINK LINKEND="REFSTD.libXext.5">[X-shape]</LINK></ENTRY>
<ENTRY><indexterm><primary>XShapeCombineRegion</primary></indexterm>XShapeCombineRegion <LINK LINKEND="REFSTD.libXext.5">[X-shape]</LINK></ENTRY>
<ENTRY><indexterm><primary>XShapeCombineShape</primary></indexterm>XShapeCombineShape <LINK LINKEND="REFSTD.libXext.5">[X-shape]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XShapeGetRectangles</primary></indexterm>XShapeGetRectangles <LINK LINKEND="REFSTD.libXext.5">[X-shape]</LINK></ENTRY>
<ENTRY><indexterm><primary>XShapeInputSelected</primary></indexterm>XShapeInputSelected <LINK LINKEND="REFSTD.libXext.5">[X-shape]</LINK></ENTRY>
<ENTRY><indexterm><primary>XShapeOffsetShape</primary></indexterm>XShapeOffsetShape <LINK LINKEND="REFSTD.libXext.5">[X-shape]</LINK></ENTRY>
<ENTRY><indexterm><primary>XShapeQueryExtension</primary></indexterm>XShapeQueryExtension <LINK LINKEND="REFSTD.libXext.5">[X-shape]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XShapeQueryExtents</primary></indexterm>XShapeQueryExtents <LINK LINKEND="REFSTD.libXext.5">[X-shape]</LINK></ENTRY>
<ENTRY><indexterm><primary>XShapeQueryVersion</primary></indexterm>XShapeQueryVersion <LINK LINKEND="REFSTD.libXext.5">[X-shape]</LINK></ENTRY>
<ENTRY><indexterm><primary>XShapeSelectInput</primary></indexterm>XShapeSelectInput <LINK LINKEND="REFSTD.libXext.5">[X-shape]</LINK></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>
</SECT2>
<!-- debug: database interface name X Display Power Management Signaling Extension -->
<SECT2>
<!--libgroup-->
<TITLE>X Display Power Management Signaling Extension</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for X Display Power Management Signaling Extension</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic functions
for X Display Power Management Signaling Extension specified in <XREF linkend="tbl-libXext-x-dis-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<TABLE id="tbl-libXext-x-dis-ints">
<TITLE>libXext - X Display Power Management Signaling Extension Function Interfaces</TITLE>
<TGROUP COLS=4>
<TBODY>
<ROW>
<ENTRY><indexterm><primary>DPMSCapable</primary></indexterm>DPMSCapable <LINK LINKEND="REFSTD.libXext.2">[X-DPMS]</LINK></ENTRY>
<ENTRY><indexterm><primary>DPMSDisable</primary></indexterm>DPMSDisable <LINK LINKEND="REFSTD.libXext.2">[X-DPMS]</LINK></ENTRY>
<ENTRY><indexterm><primary>DPMSEnable</primary></indexterm>DPMSEnable <LINK LINKEND="REFSTD.libXext.2">[X-DPMS]</LINK></ENTRY>
<ENTRY><indexterm><primary>DPMSForceLevel</primary></indexterm>DPMSForceLevel <LINK LINKEND="REFSTD.libXext.2">[X-DPMS]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>DPMSGetTimeouts</primary></indexterm>DPMSGetTimeouts <LINK LINKEND="REFSTD.libXext.2">[X-DPMS]</LINK></ENTRY>
<ENTRY><indexterm><primary>DPMSGetVersion</primary></indexterm>DPMSGetVersion <LINK LINKEND="REFSTD.libXext.2">[X-DPMS]</LINK></ENTRY>
<ENTRY><indexterm><primary>DPMSInfo</primary></indexterm>DPMSInfo <LINK LINKEND="REFSTD.libXext.2">[X-DPMS]</LINK></ENTRY>
<ENTRY><indexterm><primary>DPMSQueryExtension</primary></indexterm>DPMSQueryExtension <LINK LINKEND="REFSTD.libXext.2">[X-DPMS]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>DPMSSetTimeouts</primary></indexterm>DPMSSetTimeouts <LINK LINKEND="REFSTD.libXext.2">[X-DPMS]</LINK></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>
</SECT2>
<!-- debug: database interface name X Shared Memory Extensions -->
<SECT2>
<!--libgroup-->
<TITLE>X Shared Memory Extensions</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for X Shared Memory Extensions</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic functions
for X Shared Memory Extensions specified in <XREF linkend="tbl-libXext-1-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<TABLE id="tbl-libXext-1-ints">
<TITLE>libXext - X Shared Memory Extensions Function Interfaces</TITLE>
<TGROUP COLS=4>
<TBODY>
<ROW>
<ENTRY><indexterm><primary>XShmAttach</primary></indexterm>XShmAttach <LINK LINKEND="REFSTD.libXext.6">[X-shm]</LINK></ENTRY>
<ENTRY><indexterm><primary>XShmCreateImage</primary></indexterm>XShmCreateImage <LINK LINKEND="REFSTD.libXext.6">[X-shm]</LINK></ENTRY>
<ENTRY><indexterm><primary>XShmCreatePixmap</primary></indexterm>XShmCreatePixmap <LINK LINKEND="REFSTD.libXext.6">[X-shm]</LINK></ENTRY>
<ENTRY><indexterm><primary>XShmDetach</primary></indexterm>XShmDetach <LINK LINKEND="REFSTD.libXext.6">[X-shm]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XShmGetEventBase</primary></indexterm>XShmGetEventBase <LINK LINKEND="REFSTD.libXext.6">[X-shm]</LINK></ENTRY>
<ENTRY><indexterm><primary>XShmGetImage</primary></indexterm>XShmGetImage <LINK LINKEND="REFSTD.libXext.6">[X-shm]</LINK></ENTRY>
<ENTRY><indexterm><primary>XShmPixmapFormat</primary></indexterm>XShmPixmapFormat <LINK LINKEND="REFSTD.libXext.6">[X-shm]</LINK></ENTRY>
<ENTRY><indexterm><primary>XShmPutImage</primary></indexterm>XShmPutImage <LINK LINKEND="REFSTD.libXext.6">[X-shm]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XShmQueryExtension</primary></indexterm>XShmQueryExtension <LINK LINKEND="REFSTD.libXext.6">[X-shm]</LINK></ENTRY>
<ENTRY><indexterm><primary>XShmQueryVersion</primary></indexterm>XShmQueryVersion <LINK LINKEND="REFSTD.libXext.6">[X-shm]</LINK></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>
</SECT2>
<!-- debug: database interface name MIT-MISC Extension -->
<SECT2>
<!--libgroup-->
<TITLE>MIT-MISC Extension</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for MIT-MISC Extension</TITLE>
<PARA>
No external functions are defined for libXext - MIT-MISC Extension
in this part of the specification. See also the relevant architecture specific part of this specification.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name X Synchronization Extension -->
<SECT2>
<!--libgroup-->
<TITLE>X Synchronization Extension</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for X Synchronization Extension</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic functions
for X Synchronization Extension specified in <XREF linkend="tbl-libXext-x-syn-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<TABLE id="tbl-libXext-x-syn-ints">
<TITLE>libXext - X Synchronization Extension Function Interfaces</TITLE>
<TGROUP COLS=4>
<TBODY>
<ROW>
<ENTRY><indexterm><primary>XSyncAwait</primary></indexterm>XSyncAwait <LINK LINKEND="REFSTD.libXext.7">[X-sync]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSyncChangeAlarm</primary></indexterm>XSyncChangeAlarm <LINK LINKEND="REFSTD.libXext.7">[X-sync]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSyncChangeCounter</primary></indexterm>XSyncChangeCounter <LINK LINKEND="REFSTD.libXext.7">[X-sync]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSyncCreateAlarm</primary></indexterm>XSyncCreateAlarm <LINK LINKEND="REFSTD.libXext.7">[X-sync]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XSyncCreateCounter</primary></indexterm>XSyncCreateCounter <LINK LINKEND="REFSTD.libXext.7">[X-sync]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSyncDestroyAlarm</primary></indexterm>XSyncDestroyAlarm <LINK LINKEND="REFSTD.libXext.7">[X-sync]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSyncDestroyCounter</primary></indexterm>XSyncDestroyCounter <LINK LINKEND="REFSTD.libXext.7">[X-sync]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSyncFreeSystemCounterList</primary></indexterm>XSyncFreeSystemCounterList <LINK LINKEND="REFSTD.libXext.7">[X-sync]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XSyncGetPriority</primary></indexterm>XSyncGetPriority <LINK LINKEND="REFSTD.libXext.7">[X-sync]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSyncInitialize</primary></indexterm>XSyncInitialize <LINK LINKEND="REFSTD.libXext.7">[X-sync]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSyncIntToValue</primary></indexterm>XSyncIntToValue <LINK LINKEND="REFSTD.libXext.7">[X-sync]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSyncIntsToValue</primary></indexterm>XSyncIntsToValue <LINK LINKEND="REFSTD.libXext.7">[X-sync]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XSyncListSystemCounters</primary></indexterm>XSyncListSystemCounters <LINK LINKEND="REFSTD.libXext.7">[X-sync]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSyncMaxValue</primary></indexterm>XSyncMaxValue <LINK LINKEND="REFSTD.libXext.7">[X-sync]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSyncMinValue</primary></indexterm>XSyncMinValue <LINK LINKEND="REFSTD.libXext.7">[X-sync]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSyncQueryAlarm</primary></indexterm>XSyncQueryAlarm <LINK LINKEND="REFSTD.libXext.7">[X-sync]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XSyncQueryCounter</primary></indexterm>XSyncQueryCounter <LINK LINKEND="REFSTD.libXext.7">[X-sync]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSyncQueryExtension</primary></indexterm>XSyncQueryExtension <LINK LINKEND="REFSTD.libXext.7">[X-sync]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSyncSetCounter</primary></indexterm>XSyncSetCounter <LINK LINKEND="REFSTD.libXext.7">[X-sync]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSyncSetPriority</primary></indexterm>XSyncSetPriority <LINK LINKEND="REFSTD.libXext.7">[X-sync]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XSyncValueAdd</primary></indexterm>XSyncValueAdd <LINK LINKEND="REFSTD.libXext.7">[X-sync]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSyncValueEqual</primary></indexterm>XSyncValueEqual <LINK LINKEND="REFSTD.libXext.7">[X-sync]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSyncValueGreaterOrEqual</primary></indexterm>XSyncValueGreaterOrEqual <LINK LINKEND="REFSTD.libXext.7">[X-sync]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSyncValueGreaterThan</primary></indexterm>XSyncValueGreaterThan <LINK LINKEND="REFSTD.libXext.7">[X-sync]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XSyncValueHigh32</primary></indexterm>XSyncValueHigh32 <LINK LINKEND="REFSTD.libXext.7">[X-sync]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSyncValueIsNegative</primary></indexterm>XSyncValueIsNegative <LINK LINKEND="REFSTD.libXext.7">[X-sync]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSyncValueIsPositive</primary></indexterm>XSyncValueIsPositive <LINK LINKEND="REFSTD.libXext.7">[X-sync]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSyncValueIsZero</primary></indexterm>XSyncValueIsZero <LINK LINKEND="REFSTD.libXext.7">[X-sync]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XSyncValueLessOrEqual</primary></indexterm>XSyncValueLessOrEqual <LINK LINKEND="REFSTD.libXext.7">[X-sync]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSyncValueLessThan</primary></indexterm>XSyncValueLessThan <LINK LINKEND="REFSTD.libXext.7">[X-sync]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSyncValueLow32</primary></indexterm>XSyncValueLow32 <LINK LINKEND="REFSTD.libXext.7">[X-sync]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSyncValueSubtract</primary></indexterm>XSyncValueSubtract <LINK LINKEND="REFSTD.libXext.7">[X-sync]</LINK></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>
</SECT2>
<!-- debug: database interface name X Security Extension -->
<SECT2>
<!--libgroup-->
<TITLE>X Security Extension</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for X Security Extension</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic functions
for X Security Extension specified in <XREF linkend="tbl-libXext-x-sec-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<TABLE id="tbl-libXext-x-sec-ints">
<TITLE>libXext - X Security Extension Function Interfaces</TITLE>
<TGROUP COLS=4>
<TBODY>
<ROW>
<ENTRY><indexterm><primary>XSecurityAllocXauth</primary></indexterm>XSecurityAllocXauth <LINK LINKEND="REFSTD.libXext.4">[X-security]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSecurityFreeXauth</primary></indexterm>XSecurityFreeXauth <LINK LINKEND="REFSTD.libXext.4">[X-security]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSecurityGenerateAuthorization</primary></indexterm>XSecurityGenerateAuthorization <LINK LINKEND="REFSTD.libXext.4">[X-security]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSecurityQueryExtension</primary></indexterm>XSecurityQueryExtension <LINK LINKEND="REFSTD.libXext.4">[X-security]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XSecurityRevokeAuthorization</primary></indexterm>XSecurityRevokeAuthorization <LINK LINKEND="REFSTD.libXext.4">[X-security]</LINK></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>
</SECT2>
<!-- debug: database interface name X Double Buffer Extension -->
<SECT2>
<!--libgroup-->
<TITLE>X Double Buffer Extension</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for X Double Buffer Extension</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic functions
for X Double Buffer Extension specified in <XREF linkend="tbl-libXext-x-dou-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<TABLE id="tbl-libXext-x-dou-ints">
<TITLE>libXext - X Double Buffer Extension Function Interfaces</TITLE>
<TGROUP COLS=4>
<TBODY>
<ROW>
<ENTRY><indexterm><primary>XdbeAllocateBackBufferName</primary></indexterm>XdbeAllocateBackBufferName <LINK LINKEND="REFSTD.libXext.1">[X-dbe]</LINK></ENTRY>
<ENTRY><indexterm><primary>XdbeBeginIdiom</primary></indexterm>XdbeBeginIdiom <LINK LINKEND="REFSTD.libXext.1">[X-dbe]</LINK></ENTRY>
<ENTRY><indexterm><primary>XdbeDeallocateBackBufferName</primary></indexterm>XdbeDeallocateBackBufferName <LINK LINKEND="REFSTD.libXext.1">[X-dbe]</LINK></ENTRY>
<ENTRY><indexterm><primary>XdbeEndIdiom</primary></indexterm>XdbeEndIdiom <LINK LINKEND="REFSTD.libXext.1">[X-dbe]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XdbeFreeVisualInfo</primary></indexterm>XdbeFreeVisualInfo <LINK LINKEND="REFSTD.libXext.1">[X-dbe]</LINK></ENTRY>
<ENTRY><indexterm><primary>XdbeGetBackBufferAttributes</primary></indexterm>XdbeGetBackBufferAttributes <LINK LINKEND="REFSTD.libXext.1">[X-dbe]</LINK></ENTRY>
<ENTRY><indexterm><primary>XdbeGetVisualInfo</primary></indexterm>XdbeGetVisualInfo <LINK LINKEND="REFSTD.libXext.1">[X-dbe]</LINK></ENTRY>
<ENTRY><indexterm><primary>XdbeQueryExtension</primary></indexterm>XdbeQueryExtension <LINK LINKEND="REFSTD.libXext.1">[X-dbe]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XdbeSwapBuffers</primary></indexterm>XdbeSwapBuffers <LINK LINKEND="REFSTD.libXext.1">[X-dbe]</LINK></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>
</SECT2>
<!-- debug: database interface name X Extended Visual Interface Extension -->
<SECT2>
<!--libgroup-->
<TITLE>X Extended Visual Interface Extension</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for X Extended Visual Interface Extension</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic functions
for X Extended Visual Interface Extension specified in <XREF linkend="tbl-libXext-x-ext-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<TABLE id="tbl-libXext-x-ext-ints">
<TITLE>libXext - X Extended Visual Interface Extension Function Interfaces</TITLE>
<TGROUP COLS=4>
<TBODY>
<ROW>
<ENTRY><indexterm><primary>XeviGetVisualInfo</primary></indexterm>XeviGetVisualInfo <LINK LINKEND="REFSTD.libXext.3">[X-evi]</LINK></ENTRY>
<ENTRY><indexterm><primary>XeviQueryExtension</primary></indexterm>XeviQueryExtension <LINK LINKEND="REFSTD.libXext.3">[X-evi]</LINK></ENTRY>
<ENTRY><indexterm><primary>XeviQueryVersion</primary></indexterm>XeviQueryVersion <LINK LINKEND="REFSTD.libXext.3">[X-evi]</LINK></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>
</SECT2>
</SECT1>
<SECT1 ID=libXext-ddefs>
<TITLE>Data Definitions for libXext</TITLE>
<PARA>
This section defines global identifiers and their values that are associated
with interfaces contained in libXext.
These definitions are organized into groups that
correspond to system headers. This convention is used as a
convenience for the reader, and does not imply the existence
of these headers, or their content.
Where an interface is defined as requiring a particular system header file
all of the data definitions for that system header file presented here shall be in effect.
</PARA>
<PARA>
This section gives data definitions to promote binary application
portability, not to repeat source interface definitions available
elsewhere. System providers and application developers should use this ABI
to supplement - not to replace - source interface definition specifications.
</PARA>
<PARA>
This specification uses the <XREF LINKEND='std.ISOC99'> C Language as the reference programming language, and data definitions are specified in ISO C format. The C language is used here as a convenient notation. Using a C language description of these data objects does not preclude their use by other programming languages.</PARA>
<SECT2>
<TITLE>X11/extensions/XEVI.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define XEVI_TRANSPARENCY_NONE	0
#define XEVI_TRANSPARENCY_PIXEL	1
#define XEVI_TRANSPARENCY_MASK	2

typedef struct {
    VisualID core_visual_id;
    int screen;
    int level;
    unsigned int transparency_type;
    unsigned int transparency_value;
    unsigned int min_hw_colormaps;
    unsigned int max_hw_colormaps;
    unsigned int num_colormap_conflicts;
    VisualID *colormap_conflicts;
} ExtendedVisualInfo;
extern int XeviGetVisualInfo(Display *, VisualID *, int,
			     ExtendedVisualInfo * *, int *);
extern int XeviQueryExtension(Display *);
extern int XeviQueryVersion(Display *, int *, int *);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/extensions/XKBgeom.h</TITLE>
<PARA>
</PARA>
<SCREEN>

typedef struct _XkbProperty {
    char *name;
    char *value;
} XkbPropertyRec;
typedef struct _XkbProperty *XkbPropertyPtr;
typedef struct _XkbColor {
    unsigned int pixel;
    char *spec;
} XkbColorRec;
typedef struct _XkbColor *XkbColorPtr;
typedef struct _XkbPoint {
    short x;
    short y;
} XkbPointRec;
typedef struct _XkbPoint *XkbPointPtr;
typedef struct _XkbBounds {
    short x1;
    short y1;
    short x2;
    short y2;
} XkbBoundsRec;
typedef struct _XkbBounds *XkbBoundsPtr;
typedef struct _XkbOutline {
    unsigned short num_points;
    unsigned short sz_points;
    unsigned short corner_radius;
    XkbPointPtr points;
} XkbOutlineRec;
typedef struct _XkbOutline *XkbOutlinePtr;
typedef struct _XkbShape {
    Atom name;
    unsigned short num_outlines;
    unsigned short sz_outlines;
    XkbOutlinePtr outlines;
    XkbOutlinePtr approx;
    XkbOutlinePtr primary;
    XkbBoundsRec bounds;
} XkbShapeRec;
typedef struct _XkbShape *XkbShapePtr;
typedef struct _XkbShapeDoodad {
    Atom name;
    unsigned char type;
    unsigned char priority;
    short top;
    short left;
    short angle;
    unsigned short color_ndx;
    unsigned short shape_ndx;
} XkbShapeDoodadRec;
typedef struct _XkbShapeDoodad *XkbShapeDoodadPtr;
typedef struct _XkbTextDoodad {
    Atom name;
    unsigned char type;
    unsigned char priority;
    short top;
    short left;
    short angle;
    short width;
    short height;
    unsigned short color_ndx;
    char *text;
    char *font;
} XkbTextDoodadRec;
typedef struct _XkbTextDoodad *XkbTextDoodadPtr;
typedef struct _XkbIndicatorDoodad {
    Atom name;
    unsigned char type;
    unsigned char priority;
    short top;
    short left;
    short angle;
    unsigned short shape_ndx;
    unsigned short on_color_ndx;
    unsigned short off_color_ndx;
} XkbIndicatorDoodadRec;
typedef struct _XkbIndicatorDoodad *XkbIndicatorDoodadPtr;
typedef struct _XkbLogoDoodad {
    Atom name;
    unsigned char type;
    unsigned char priority;
    short top;
    short left;
    short angle;
    unsigned short color_ndx;
    unsigned short shape_ndx;
    char *logo_name;
} XkbLogoDoodadRec;
typedef struct _XkbLogoDoodad *XkbLogoDoodadPtr;
typedef struct _XkbAnyDoodad {
    Atom name;
    unsigned char type;
    unsigned char priority;
    short top;
    short left;
    short angle;
} XkbAnyDoodadRec;
typedef struct _XkbAnyDoodad *XkbAnyDoodadPtr;
union _XkbDoodad {
    XkbAnyDoodadRec any;
    XkbShapeDoodadRec shape;
    XkbTextDoodadRec text;
    XkbIndicatorDoodadRec indicator;
    XkbLogoDoodadRec logo;
};
typedef union _XkbDoodad {
    XkbAnyDoodadRec any;
    XkbShapeDoodadRec shape;
    XkbTextDoodadRec text;
    XkbIndicatorDoodadRec indicator;
    XkbLogoDoodadRec logo;
} XkbDoodadRec;
typedef union _XkbDoodad *XkbDoodadPtr;
typedef struct _XkbKey {
    XkbKeyNameRecname;
    short gap;
    unsigned char shape_ndx;
    unsigned char color_ndx;
} XkbKeyRec;
typedef struct _XkbKey *XkbKeyPtr;
typedef struct _XkbRow {
    short top;
    short left;
    unsigned short num_keys;
    unsigned short sz_keys;
    int vertical;
    XkbKeyPtr keys;
    XkbBoundsRec bounds;
} XkbRowRec;
typedef struct _XkbRow *XkbRowPtr;
typedef struct _XkbSection {
    Atom name;
    unsigned char priority;
    short top;
    short left;
    unsigned short width;
    unsigned short height;
    short angle;
    unsigned short num_rows;
    unsigned short num_doodads;
    unsigned short num_overlays;
    unsigned short sz_rows;
    unsigned short sz_doodads;
    unsigned short sz_overlays;
    XkbRowPtr rows;
    XkbDoodadPtr doodads;
    XkbBoundsRec bounds;
    struct _XkbOverlay *overlays;
} XkbSectionRec;
typedef struct _XkbOverlay **XkbSectionPtr;
typedef struct _XkbOverlayKey {
    XkbKeyNameRecover;
    XkbKeyNameRecunder;
} XkbOverlayKeyRec;
typedef struct _XkbOverlayKey *XkbOverlayKeyPtr;
typedef struct _XkbOverlayRow {
    unsigned short row_under;
    unsigned short num_keys;
    unsigned short sz_keys;
    XkbOverlayKeyPtr keys;
} XkbOverlayRowRec;
typedef struct _XkbOverlayRow *XkbOverlayRowPtr;
typedef struct _XkbOverlay {
    Atom name;
    XkbSectionPtr section_under;
    unsigned short num_rows;
    unsigned short sz_rows;
    XkbOverlayRowPtr rows;
    XkbBoundsPtr bounds;
} XkbOverlayRec;
typedef struct _XkbOverlay *XkbOverlayPtr;
typedef struct _XkbGeometry {
    Atom name;
    unsigned short width_mm;
    unsigned short height_mm;
    char *label_font;
    XkbColorPtr label_color;
    XkbColorPtr base_color;
    unsigned short sz_properties;
    unsigned short sz_colors;
    unsigned short sz_shapes;
    unsigned short sz_sections;
    unsigned short sz_doodads;
    unsigned short sz_key_aliases;
    unsigned short num_properties;
    unsigned short num_colors;
    unsigned short num_shapes;
    unsigned short num_sections;
    unsigned short num_doodads;
    unsigned short num_key_aliases;
    XkbPropertyPtr properties;
    XkbColorPtr colors;
    XkbShapePtr shapes;
    XkbSectionPtr sections;
    XkbDoodadPtr doodads;
     XkbKeyAliasPtrkey_aliases;
} XkbGeometryRec;
typedef struct _XkbGeometrySizes {
    unsigned int which;
    unsigned short num_properties;
    unsigned short num_colors;
    unsigned short num_shapes;
    unsigned short num_sections;
    unsigned short num_doodads;
    unsigned short num_key_aliases;
} XkbGeometrySizesRec;
typedef struct _XkbGeometrySizes *XkbGeometrySizesPtr;
extern int XkbAllocGeomColors(XkbGeometryPtr, int);
extern int XkbAllocGeomDoodads(XkbGeometryPtr, int);
extern int XkbAllocGeomKeyAliases(XkbGeometryPtr, int);
extern int XkbAllocGeomKeys(XkbRowPtr, int);
extern int XkbAllocGeomOutlines(XkbShapePtr, int);
extern int XkbAllocGeomOverlayKeys(XkbOverlayRowPtr, int);
extern int XkbAllocGeomOverlayRows(XkbOverlayPtr, int);
extern int XkbAllocGeomOverlays(XkbSectionPtr, int);
extern int XkbAllocGeomPoints(XkbOutlinePtr, int);
extern int XkbAllocGeomProps(XkbGeometryPtr, int);
extern int XkbAllocGeomRows(XkbSectionPtr, int);
extern int XkbAllocGeomSectionDoodads(XkbSectionPtr, int);
extern int XkbAllocGeomSections(XkbGeometryPtr, int);
extern int XkbAllocGeomShapes(XkbGeometryPtr, int);
extern int XkbAllocGeometry(XkbDescPtr, XkbGeometrySizesPtr);
extern int XkbComputeRowBounds(XkbGeometryPtr, XkbSectionPtr, XkbRowPtr);
extern int XkbComputeSectionBounds(XkbGeometryPtr, XkbSectionPtr);
extern int XkbComputeShapeBounds(XkbShapePtr);
extern int XkbComputeShapeTop(XkbShapePtr, XkbBoundsPtr);
extern char *XkbFindOverlayForKey(XkbGeometryPtr, XkbSectionPtr, char *);
extern void XkbFreeGeomColors(XkbGeometryPtr, int, int, int);
extern void XkbFreeGeomDoodads(XkbDoodadPtr, int, int);
extern void XkbFreeGeomKeyAliases(XkbGeometryPtr, int, int, int);
extern void XkbFreeGeomKeys(XkbRowPtr, int, int, int);
extern void XkbFreeGeomOutlines(XkbShapePtr, int, int, int);
extern void XkbFreeGeomOverlayKeys(XkbOverlayRowPtr, int, int, int);
extern void XkbFreeGeomOverlayRows(XkbOverlayPtr, int, int, int);
extern void XkbFreeGeomOverlays(XkbSectionPtr, int, int, int);
extern void XkbFreeGeomPoints(XkbOutlinePtr, int, int, int);
extern void XkbFreeGeomProperties(XkbGeometryPtr, int, int, int);
extern void XkbFreeGeomRows(XkbSectionPtr, int, int, int);
extern void XkbFreeGeomSections(XkbGeometryPtr, int, int, int);
extern void XkbFreeGeomShapes(XkbGeometryPtr, int, int, int);
extern void XkbFreeGeometry(XkbGeometryPtr, unsigned int, int);
extern int XkbGetGeometry(Display *, XkbDescPtr);
extern int XkbGetNamedGeometry(Display *, XkbDescPtr, Atom);
extern int XkbSetGeometry(Display *, unsigned int, XkbGeometryPtr);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/extensions/XShm.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define X_ShmQueryVersion	0
#define X_ShmAttach	1
#define X_ShmDetach	2
#define X_ShmPutImage	3
#define X_ShmGetImage	4
#define X_ShmCreatePixmap	5
#define ShmCompletion	0
#define ShmNumberEvents	(ShmCompletion + 1)
#define BadShmSeg	0
#define ShmNumberErrors	(BadShmSeg + 1)

typedef unsigned long int ShmSeg;
typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Drawable drawable;
    int major_code;
    int minor_code;
    ShmSeg shmseg;
    unsigned long int offset;
} XShmCompletionEvent;
typedef struct {
    ShmSeg shmseg;
    int shmid;
    char *shmaddr;
    int readOnly;
} XShmSegmentInfo;
extern int XShmAttach(Display *, XShmSegmentInfo *);
extern XImage *XShmCreateImage(Display *, Visual *, unsigned int, int,
			       char *, XShmSegmentInfo *, unsigned int,
			       unsigned int);
extern Pixmap XShmCreatePixmap(Display *, Drawable, char *,
			       XShmSegmentInfo *, unsigned int,
			       unsigned int, unsigned int);
extern int XShmDetach(Display *, XShmSegmentInfo *);
extern int XShmGetEventBase(Display *);
extern int XShmGetImage(Display *, Drawable, XImage *, int, int,
			unsigned long int);
extern int XShmPixmapFormat(Display *);
extern int XShmPutImage(Display *, Drawable, GC, XImage *, int, int, int,
			int, unsigned int, unsigned int, int);
extern int XShmQueryExtension(Display *);
extern int XShmQueryVersion(Display *, int *, int *, int *);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/extensions/Xdbe.h</TITLE>
<PARA>
</PARA>
<SCREEN>

typedef Drawable XdbeBackBuffer;
typedef unsigned char XdbeSwapAction;
typedef struct {
    Window swap_window;
    XdbeSwapAction swap_action;
} XdbeSwapInfo;
typedef struct {
    Window window;
} XdbeBackBufferAttributes;
typedef struct {
    int type;
    Display *display;
    XdbeBackBuffer buffer;
    unsigned long int serial;
    unsigned char error_code;
    unsigned char request_code;
    unsigned char minor_code;
} XdbeBufferError;
extern XdbeBackBuffer XdbeAllocateBackBufferName(Display *, Window,
						 XdbeSwapAction);
extern int XdbeBeginIdiom(Display *);
extern int XdbeDeallocateBackBufferName(Display *, XdbeBackBuffer);
extern int XdbeEndIdiom(Display *);
extern void XdbeFreeVisualInfo(XdbeScreenVisualInfo *);
extern XdbeBackBufferAttributes *XdbeGetBackBufferAttributes(Display *,
							     XdbeBackBuffer);
extern XdbeScreenVisualInfo *XdbeGetVisualInfo(Display *, Drawable *,
					       int *);
extern int XdbeQueryExtension(Display *, int *, int *);
extern int XdbeSwapBuffers(Display *, XdbeSwapInfo *, int);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/extensions/Xdbeproto.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define DbeNumberErrors	(DbeBadBuffer + 1)
#define DBE_MINOR_VERSION	0
#define DbeBadBuffer	0
#define DbeNumberEvents	0
#define X_DbeGetVersion	0
#define XdbeUndefined	0
#define DBE_MAJOR_VERSION	1
#define X_DbeAllocateBackBufferName	1
#define XdbeBackground	1
#define X_DbeDeallocateBackBufferName	2
#define XdbeUntouched	2
#define X_DbeSwapBuffers	3
#define XdbeCopied	3
#define X_DbeBeginIdiom	4
#define X_DbeEndIdiom	5
#define X_DbeGetVisualInfo	6
#define X_DbeGetBackBufferAttributes	7
#define DBE_PROTOCOL_NAME	"DOUBLE-BUFFER"

typedef CARD8 xDbeSwapAction;
typedef CARD32 xDbeBackBuffer;
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/extensions/Xext.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define X_EXTENSION_MISSING	"missing"
#define X_EXTENSION_UNKNOWN	"unknown"

extern
    int (*XSetExtensionErrorHandler
	 (int (*XSetExtensionErrorHandler) (Display *, char *, char *)
	 )) (Display *, char *, char *);
extern int XMissingExtension(Display *, const char *);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/extensions/dpms.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define DPMSModeOn	0
#define DPMSModeStandby	1
#define DPMSModeSuspend	2
#define DPMSModeOff	3

extern int DPMSCapable(Display *);
extern int DPMSDisable(Display *);
extern int DPMSEnable(Display *);
extern int DPMSForceLevel(Display *, CARD16);
extern int DPMSGetTimeouts(Display *, CARD16 *, CARD16 *, CARD16 *);
extern int DPMSGetVersion(Display *, int *, int *);
extern int DPMSInfo(Display *, CARD16 *, BOOL *);
extern int DPMSQueryExtension(Display *, int *, int *);
extern int DPMSSetTimeouts(Display *, CARD16, CARD16, CARD16);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/extensions/extutil.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define XextHasExtension(i)	((i) &amp;&amp; ((i)->codes))
#define XEXT_ERROR_STRING_PROTO(proc)	\
        char *proc(Display *dpy, int code, XExtCodes *codes, char *buf, int n)
#define XEXT_CLOSE_DISPLAY_PROTO(proc)	\
        int proc(Display *dpy, XExtCodes *codes)
#define XEXT_FIND_DISPLAY_PROTO(proc)	\
        XExtDisplayInfo *proc(Display *dpy)
#define XextCheckExtension(dpy,i,name,val)	\
  if (!XextHasExtension(i)) { XMissingExtension (dpy, name); return val; }
#define XextSimpleCheckExtension(dpy,i,name)	\
  if (!XextHasExtension(i)) { XMissingExtension (dpy, name); return; }
#define XEXT_GENERATE_ERROR_STRING(proc,extname,nerr,errl)	\
char *proc (Display *dpy, int code, XExtCodes *codes, char *buf, int n) \
{ \
    code -= codes->first_error; \
    if (code >= 0 &amp;&amp; code &lt; nerr) { \
        char tmp[256]; \
        sprintf (tmp, "%s.%d", extname, code); \
        XGetErrorDatabaseText (dpy, "XProtoError", tmp, errl[code], buf, n); \
        return buf; \
    } \
    return (char *)0; \
}
#define XEXT_GENERATE_CLOSE_DISPLAY(proc,extinfo)	\
int proc (Display *dpy, XExtCodes *codes) \
{ \
    return XextRemoveDisplay (extinfo, dpy); \
}
#define XEXT_GENERATE_FIND_DISPLAY(proc,extinfo,extname,hooks,nev,data)	\
XExtDisplayInfo *proc (Display *dpy) \
{ \
XExtDisplayInfo *dpyinfo; \
    if (!extinfo) { if (!(extinfo = XextCreateExtension())) return NULL; } \
    if (!(dpyinfo = XextFindDisplay (extinfo, dpy))) \
      dpyinfo = XextAddDisplay (extinfo,dpy,extname,hooks,nev,data); \
    return dpyinfo; \
}

typedef struct _XExtDisplayInfo {
    struct _XExtDisplayInfo *next;
    Display *display;
    XExtCodes *codes;
    XPointer data;
} XExtDisplayInfo;
typedef struct _XExtensionInfo {
    XExtDisplayInfo *head;
    XExtDisplayInfo *cur;
    int ndisplays;
} XExtensionInfo;
typedef struct _XExtensionHooks {
    int (*create_gc) (Display *, GC, XExtCodes *);
    int (*copy_gc) (Display *, GC, XExtCodes *);
    int (*flush_gc) (Display *, GC, XExtCodes *);
    int (*free_gc) (Display *, GC, XExtCodes *);
    int (*create_font) (Display *, XFontStruct *, XExtCodes *);
    int (*free_font) (Display *, XFontStruct *, XExtCodes *);
    int (*close_display) (Display *, XExtCodes *);
    int (*wire_to_event) (Display *, XEvent *, xEvent *);
    int (*event_to_wire) (Display *, XEvent *, xEvent *);
    int (*error) (Display *, xError *, XExtCodes *, int *);
    char *(*error_string) (Display *, int, XExtCodes *, char *, int);
} XExtensionHooks;
extern XExtDisplayInfo *XextAddDisplay(XExtensionInfo *, Display *, char *,
				       XExtensionHooks *, int, XPointer);
extern XExtensionInfo *XextCreateExtension(void);
extern void XextDestroyExtension(XExtensionInfo *);
extern XExtDisplayInfo *XextFindDisplay(XExtensionInfo *, Display *);
extern int XextRemoveDisplay(XExtensionInfo *, Display *);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/extensions/security.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define XSecurityAuthorizationName	"XC-QUERY-SECURITY-1"
#define XSecurityAuthorizationRevokedMask	(1&lt;&lt;0)
#define XSecurityTimeout	(1&lt;&lt;0)
#define XSecurityTrustLevel	(1&lt;&lt;1)
#define XSecurityGroup	(1&lt;&lt;2)
#define XSecurityEventMask	(1&lt;&lt;3)
#define XSecurityAllAuthorizationAttributes	(XSecurityTimeout | XSecurityTrustLevel | XSecurityGroup | XSecurityEventMask)
#define XSecurityAuthorizationRevoked	0
#define XSecurityBadAuthorization	0
#define XSecurityClientTrusted	0
#define XSecurityBadAuthorizationProtocol	1
#define XSecurityClientUntrusted	1
#define XSecurityNumberEvents	1
#define XSecurityAuthorizationNameLen	19
#define XSecurityNumberErrors	2
#define XSecurityAllEventMasks	XSecurityAuthorizationRevokedMask

typedef unsigned long int XSecurityAuthorization;
typedef struct {
    unsigned int timeout;
    unsigned int trust_level;
    XID group;
    long int event_mask;
} XSecurityAuthorizationAttributes;
typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    XSecurityAuthorization auth_id;
} XSecurityAuthorizationRevokedEvent;
extern Xauth *XSecurityAllocXauth(void);
extern void XSecurityFreeXauth(Xauth *);
extern Xauth *XSecurityGenerateAuthorization(Display *, Xauth *,
					     unsigned long int,
					     XSecurityAuthorizationAttributes
					     *, XSecurityAuthorization *);
extern int XSecurityQueryExtension(Display *, int *, int *);
extern int XSecurityRevokeAuthorization(Display *, XSecurityAuthorization);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/extensions/shape.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define X_ShapeQueryVersion	0
#define X_ShapeRectangles	1
#define X_ShapeMask	2
#define X_ShapeCombine	3
#define X_ShapeOffset	4
#define X_ShapeQueryExtents	5
#define X_ShapeSelectInput	6
#define X_ShapeInputSelected	7
#define X_ShapeGetRectangles	8
#define ShapeSet	0
#define ShapeUnion	1
#define ShapeIntersect	2
#define ShapeSubtract	3
#define ShapeInvert	4
#define ShapeBounding	0
#define ShapeClip	1
#define ShapeInput	2
#define ShapeNotifyMask	(1L &lt;&lt; 0)
#define ShapeNotify	0
#define ShapeNumberEvents	(ShapeNotify + 1)

typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Window window;
    int kind;
    int x;
    int y;
    unsigned int width;
    unsigned int height;
    Time time;
    int shaped;
} XShapeEvent;
extern void XShapeCombineMask(Display *, Window, int, int, int, Pixmap,
			      int);
extern void XShapeCombineRectangles(Display *, Window, int, int, int,
				    XRectangle *, int, int, int);
extern void XShapeCombineRegion(Display *, Window, int, int, int, Region,
				int);
extern void XShapeCombineShape(Display *, Window, int, int, int, Window,
			       int, int);
extern XRectangle *XShapeGetRectangles(Display *, Window, int, int *,
				       int *);
extern unsigned long int XShapeInputSelected(Display *, Window);
extern void XShapeOffsetShape(Display *, Window, int, int, int);
extern int XShapeQueryExtension(Display *, int *, int *);
extern int XShapeQueryExtents(Display *, Window, int *, int *, int *,
			      unsigned int *, unsigned int *, int *, int *,
			      int *, unsigned int *, unsigned int *);
extern int XShapeQueryVersion(Display *, int *, int *);
extern void XShapeSelectInput(Display *, Window, unsigned long int);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/extensions/sync.h</TITLE>
<PARA>
</PARA>
<SCREEN>

typedef XID XSyncCounter;
typedef XID XSyncAlarm;
typedef struct _XSyncValue {
    int hi;
    unsigned int lo;
} XSyncValue;
typedef enum {
    XSyncAbsolute,
    XSyncRelative
} XSyncValueType;
typedef enum {
    XSyncPositiveTransition,
    XSyncNegativeTransition,
    XSyncPositiveComparison,
    XSyncNegativeComparison
} XSyncTestType;
typedef enum {
    XSyncAlarmActive,
    XSyncAlarmInactive,
    XSyncAlarmDestroyed
} XSyncAlarmState;

#define SYNC_NAME	"SYNC"
#define _XSyncValueIsPositive(v)	(((v).hi&amp;0x80000000)?0:1)
#define _XSyncValueIsNegative(v)	(((v).hi&amp;0x80000000)?1:0)
#define _XSyncValueLessThan(a,b)	((a).hi&lt;(b).hi||((a).hi==(b).hi&amp;&amp;(a).lo&lt;(b).lo)))
#define _XSyncValueLessOrEqual(a,b)	((a).hi&lt;(b).hi||((a).hi==(b).hi&amp;&amp;(a).lo&lt;=(b).lo)))
#define _XSyncValueGreaterThan(a,b)	((a).hi>(b).hi||((a).hi==(b).hi&amp;&amp;(a).lo>(b).lo)))
#define _XSyncValueGreaterOrEqual(a,b)	((a).hi>(b).hi||((a).hi==(b).hi&amp;&amp;(a).lo>=(b).lo)))
#define _XSyncValueEqual(a,b)	((a).lo==(b).lo&amp;&amp;(a).hi==(b).hi))
#define _XSyncValueIsZero(a)	((a).lo==0&amp;&amp;(a).hi==0)
#define _XSyncIntToValue(pv,i)	((pv)->hi=((i&lt;0)?~0:0),(pv)->lo=(i)))
#define _XSyncMaxValue(pv)	((pv)->hi=0x7fffffff,(pv)->lo=0xffffffff)
#define _XSyncMinValue(pv)	((pv)->hi=0x80000000,(pv)->lo=0)
#define _XSyncIntsToValue(pv,l,h)	((pv)->lo=(l),(pv)->hi=(h)))
#define _XSyncValueHigh32(v)	((v).hi)
#define _XSyncValueLow32(v)	((v).lo)
#define XSyncCACounter	(1L&lt;&lt;0)
#define XSyncCAValueType	(1L&lt;&lt;1)
#define XSyncCAValue	(1L&lt;&lt;2)
#define XSyncCATestType	(1L&lt;&lt;3)
#define XSyncCADelta	(1L&lt;&lt;4)
#define XSyncCAEvents	(1L&lt;&lt;5)
#define XSyncAlarmNotifyMask	(1L&lt;&lt;XSyncAlarmNotify)
#define XSyncNumberErrors	(XSyncBadAlarm+1)
#define SYNC_MINOR_VERSION	0
#define XSyncCounterNotify	0
#define X_SyncInitialize	0
#define XSyncBadCounter	0L
#define XSyncAlarmNotify	1
#define X_SyncListSystemCounters	1
#define X_SyncQueryAlarm	10
#define X_SyncDestroyAlarm	11
#define X_SyncSetPriority	12
#define X_SyncGetPriority	13
#define XSyncBadAlarm	1L
#define X_SyncCreateCounter	2
#define XSyncNumberEvents	2L
#define SYNC_MAJOR_VERSION	3
#define X_SyncSetCounter	3
#define X_SyncChangeCounter	4
#define X_SyncQueryCounter	5
#define X_SyncDestroyCounter	6
#define X_SyncAwait	7
#define X_SyncCreateAlarm	8
#define X_SyncChangeAlarm	9
#define _XSyncValueAdd(presult,a,b,poverflow)	{intt=(a).lo;Boolsigna=XSyncValueIsNegative(a);Boolsignb=XSyncValueIsNegative(b);((presult)->lo=(a).lo+(b).lo);((presult)->hi=(a
#define _XSyncValueSubtract(presult,a,b,poverflow)	{intt=(a).lo;Boolsigna=XSyncValueIsNegative(a);Boolsignb=XSyncValueIsNegative(b);((presult)->lo=(a).lo-(b).lo);((presult)->hi=(a

typedef struct _XSyncSystemCounter {
    char *name;
    XSyncCounter counter;
    XSyncValue resolution;
} XSyncSystemCounter;
typedef struct {
    XSyncCounter counter;
    XSyncValueType value_type;
    XSyncValue wait_value;
    XSyncTestType test_type;
} XSyncTrigger;
typedef struct {
    XSyncTrigger trigger;
    XSyncValue event_threshold;
} XSyncWaitCondition;
typedef struct {
    XSyncTrigger trigger;
    XSyncValue delta;
    int events;
    XSyncAlarmState state;
} XSyncAlarmAttributes;
typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    XSyncCounter counter;
    XSyncValue wait_value;
    XSyncValue counter_value;
    Time time;
    int count;
    int destroyed;
} XSyncCounterNotifyEvent;
typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    XSyncAlarm alarm;
    XSyncValue counter_value;
    XSyncValue alarm_value;
    Time time;
    XSyncAlarmState state;
} XSyncAlarmNotifyEvent;
typedef struct {
    int type;
    Display *display;
    XSyncAlarm alarm;
    unsigned long int serial;
    unsigned char error_code;
    unsigned char request_code;
    unsigned char minor_code;
} XSyncAlarmError;
typedef struct {
    int type;
    Display *display;
    XSyncCounter counter;
    unsigned long int serial;
    unsigned char error_code;
    unsigned char request_code;
    unsigned char minor_code;
} XSyncCounterError;
extern int XSyncAwait(Display *, XSyncWaitCondition *, int);
extern int XSyncChangeAlarm(Display *, XSyncAlarm, unsigned long int,
			    XSyncAlarmAttributes *);
extern int XSyncChangeCounter(Display *, XSyncCounter, XSyncValue);
extern XSyncAlarm XSyncCreateAlarm(Display *, unsigned long int,
				   XSyncAlarmAttributes *);
extern XSyncCounter XSyncCreateCounter(Display *, XSyncValue);
extern int XSyncDestroyAlarm(Display *, XSyncAlarm);
extern int XSyncDestroyCounter(Display *, XSyncCounter);
extern void XSyncFreeSystemCounterList(XSyncSystemCounter *);
extern int XSyncGetPriority(Display *, XID, int *);
extern int XSyncInitialize(Display *, int *, int *);
extern void XSyncIntToValue(XSyncValue *, int);
extern void XSyncIntsToValue(XSyncValue *, unsigned int, int);
extern XSyncSystemCounter *XSyncListSystemCounters(Display *, int *);
extern void XSyncMaxValue(XSyncValue *);
extern void XSyncMinValue(XSyncValue *);
extern int XSyncQueryAlarm(Display *, XSyncAlarm, XSyncAlarmAttributes *);
extern int XSyncQueryCounter(Display *, XSyncCounter, XSyncValue *);
extern int XSyncQueryExtension(Display *, int *, int *);
extern int XSyncSetCounter(Display *, XSyncCounter, XSyncValue);
extern int XSyncSetPriority(Display *, XID, int);
extern void XSyncValueAdd(XSyncValue *, XSyncValue, XSyncValue, int *);
extern int XSyncValueEqual(XSyncValue, XSyncValue);
extern int XSyncValueGreaterOrEqual(XSyncValue, XSyncValue);
extern int XSyncValueGreaterThan(XSyncValue, XSyncValue);
extern int XSyncValueHigh32(XSyncValue);
extern int XSyncValueIsNegative(XSyncValue);
extern int XSyncValueIsPositive(XSyncValue);
extern int XSyncValueIsZero(XSyncValue);
extern int XSyncValueLessOrEqual(XSyncValue, XSyncValue);
extern int XSyncValueLessThan(XSyncValue, XSyncValue);
extern unsigned int XSyncValueLow32(XSyncValue);
extern void XSyncValueSubtract(XSyncValue *, XSyncValue, XSyncValue,
			       int *);
</SCREEN>
</SECT2>
</SECT1>
<!-- End of text generated from database -->


<!-- Start of generated text - do not edit! -->
<!-- generated from the LSB specification database by mklibspec -->
<SECT1 ID=libXi>
<TITLE>Interfaces for libXi</TITLE>
<PARA>
<XREF LINKEND="lib-libXi-def"> defines the library name and shared object name
for the libXi library
</PARA>
<TABLE id="lib-libXi-def">
<TITLE>libXi Definition</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Library:</ENTRY>
<ENTRY>libXi</ENTRY>
</ROW>
<ROW>
<ENTRY>SONAME:</ENTRY>
<ENTRY>libXi.so.6</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The behavior of the interfaces in this library is specified by the following specifications:<SIMPLELIST COLUMNS=1>
<MEMBER ID='REFSTD.libXi.1'>
[XINPUT] <XREF LINKEND="std.XINPUT">
</MEMBER>
</SIMPLELIST>
</PARA>
<!-- debug: database interface name XInput -->
<SECT2>
<!--libgroup-->
<TITLE>XInput</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for XInput</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic functions
for XInput specified in <XREF linkend="tbl-libXi-xinpu-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<TABLE id="tbl-libXi-xinpu-ints">
<TITLE>libXi - XInput Function Interfaces</TITLE>
<TGROUP COLS=4>
<TBODY>
<ROW>
<ENTRY><indexterm><primary>XAllowDeviceEvents</primary></indexterm>XAllowDeviceEvents <LINK LINKEND="REFSTD.libXi.1">[XINPUT]</LINK></ENTRY>
<ENTRY><indexterm><primary>XChangeDeviceControl</primary></indexterm>XChangeDeviceControl <LINK LINKEND="REFSTD.libXi.1">[XINPUT]</LINK></ENTRY>
<ENTRY><indexterm><primary>XChangeDeviceDontPropagateList</primary></indexterm>XChangeDeviceDontPropagateList <LINK LINKEND="REFSTD.libXi.1">[XINPUT]</LINK></ENTRY>
<ENTRY><indexterm><primary>XChangeDeviceKeyMapping</primary></indexterm>XChangeDeviceKeyMapping <LINK LINKEND="REFSTD.libXi.1">[XINPUT]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XChangeFeedbackControl</primary></indexterm>XChangeFeedbackControl <LINK LINKEND="REFSTD.libXi.1">[XINPUT]</LINK></ENTRY>
<ENTRY><indexterm><primary>XChangeKeyboardDevice</primary></indexterm>XChangeKeyboardDevice <LINK LINKEND="REFSTD.libXi.1">[XINPUT]</LINK></ENTRY>
<ENTRY><indexterm><primary>XChangePointerDevice</primary></indexterm>XChangePointerDevice <LINK LINKEND="REFSTD.libXi.1">[XINPUT]</LINK></ENTRY>
<ENTRY><indexterm><primary>XCloseDevice</primary></indexterm>XCloseDevice <LINK LINKEND="REFSTD.libXi.1">[XINPUT]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XDeviceBell</primary></indexterm>XDeviceBell <LINK LINKEND="REFSTD.libXi.1">[XINPUT]</LINK></ENTRY>
<ENTRY><indexterm><primary>XFreeDeviceControl</primary></indexterm>XFreeDeviceControl <LINK LINKEND="REFSTD.libXi.1">[XINPUT]</LINK></ENTRY>
<ENTRY><indexterm><primary>XFreeDeviceList</primary></indexterm>XFreeDeviceList <LINK LINKEND="REFSTD.libXi.1">[XINPUT]</LINK></ENTRY>
<ENTRY><indexterm><primary>XFreeDeviceMotionEvents</primary></indexterm>XFreeDeviceMotionEvents <LINK LINKEND="REFSTD.libXi.1">[XINPUT]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XFreeDeviceState</primary></indexterm>XFreeDeviceState <LINK LINKEND="REFSTD.libXi.1">[XINPUT]</LINK></ENTRY>
<ENTRY><indexterm><primary>XFreeFeedbackList</primary></indexterm>XFreeFeedbackList <LINK LINKEND="REFSTD.libXi.1">[XINPUT]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetDeviceButtonMapping</primary></indexterm>XGetDeviceButtonMapping <LINK LINKEND="REFSTD.libXi.1">[XINPUT]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetDeviceControl</primary></indexterm>XGetDeviceControl <LINK LINKEND="REFSTD.libXi.1">[XINPUT]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XGetDeviceDontPropagateList</primary></indexterm>XGetDeviceDontPropagateList <LINK LINKEND="REFSTD.libXi.1">[XINPUT]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetDeviceFocus</primary></indexterm>XGetDeviceFocus <LINK LINKEND="REFSTD.libXi.1">[XINPUT]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetDeviceKeyMapping</primary></indexterm>XGetDeviceKeyMapping <LINK LINKEND="REFSTD.libXi.1">[XINPUT]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetDeviceModifierMapping</primary></indexterm>XGetDeviceModifierMapping <LINK LINKEND="REFSTD.libXi.1">[XINPUT]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XGetDeviceMotionEvents</primary></indexterm>XGetDeviceMotionEvents <LINK LINKEND="REFSTD.libXi.1">[XINPUT]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetExtensionVersion</primary></indexterm>XGetExtensionVersion <LINK LINKEND="REFSTD.libXi.1">[XINPUT]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetFeedbackControl</primary></indexterm>XGetFeedbackControl <LINK LINKEND="REFSTD.libXi.1">[XINPUT]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetSelectedExtensionEvents</primary></indexterm>XGetSelectedExtensionEvents <LINK LINKEND="REFSTD.libXi.1">[XINPUT]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XGrabDevice</primary></indexterm>XGrabDevice <LINK LINKEND="REFSTD.libXi.1">[XINPUT]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGrabDeviceButton</primary></indexterm>XGrabDeviceButton <LINK LINKEND="REFSTD.libXi.1">[XINPUT]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGrabDeviceKey</primary></indexterm>XGrabDeviceKey <LINK LINKEND="REFSTD.libXi.1">[XINPUT]</LINK></ENTRY>
<ENTRY><indexterm><primary>XInput_find_display</primary></indexterm>XInput_find_display <LINK LINKEND="REFSTD.libXi.1">[XINPUT]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XListInputDevices</primary></indexterm>XListInputDevices <LINK LINKEND="REFSTD.libXi.1">[XINPUT]</LINK></ENTRY>
<ENTRY><indexterm><primary>XOpenDevice</primary></indexterm>XOpenDevice <LINK LINKEND="REFSTD.libXi.1">[XINPUT]</LINK></ENTRY>
<ENTRY><indexterm><primary>XQueryDeviceState</primary></indexterm>XQueryDeviceState <LINK LINKEND="REFSTD.libXi.1">[XINPUT]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSelectExtensionEvent</primary></indexterm>XSelectExtensionEvent <LINK LINKEND="REFSTD.libXi.1">[XINPUT]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XSendExtensionEvent</primary></indexterm>XSendExtensionEvent <LINK LINKEND="REFSTD.libXi.1">[XINPUT]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetDeviceButtonMapping</primary></indexterm>XSetDeviceButtonMapping <LINK LINKEND="REFSTD.libXi.1">[XINPUT]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetDeviceFocus</primary></indexterm>XSetDeviceFocus <LINK LINKEND="REFSTD.libXi.1">[XINPUT]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetDeviceMode</primary></indexterm>XSetDeviceMode <LINK LINKEND="REFSTD.libXi.1">[XINPUT]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XSetDeviceModifierMapping</primary></indexterm>XSetDeviceModifierMapping <LINK LINKEND="REFSTD.libXi.1">[XINPUT]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetDeviceValuators</primary></indexterm>XSetDeviceValuators <LINK LINKEND="REFSTD.libXi.1">[XINPUT]</LINK></ENTRY>
<ENTRY><indexterm><primary>XUngrabDevice</primary></indexterm>XUngrabDevice <LINK LINKEND="REFSTD.libXi.1">[XINPUT]</LINK></ENTRY>
<ENTRY><indexterm><primary>XUngrabDeviceButton</primary></indexterm>XUngrabDeviceButton <LINK LINKEND="REFSTD.libXi.1">[XINPUT]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XUngrabDeviceKey</primary></indexterm>XUngrabDeviceKey <LINK LINKEND="REFSTD.libXi.1">[XINPUT]</LINK></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>
</SECT2>
</SECT1>
<SECT1 ID=libXi-ddefs>
<TITLE>Data Definitions for libXi</TITLE>
<PARA>
This section defines global identifiers and their values that are associated
with interfaces contained in libXi.
These definitions are organized into groups that
correspond to system headers. This convention is used as a
convenience for the reader, and does not imply the existence
of these headers, or their content.
Where an interface is defined as requiring a particular system header file
all of the data definitions for that system header file presented here shall be in effect.
</PARA>
<PARA>
This section gives data definitions to promote binary application
portability, not to repeat source interface definitions available
elsewhere. System providers and application developers should use this ABI
to supplement - not to replace - source interface definition specifications.
</PARA>
<PARA>
This specification uses the <XREF LINKEND='std.ISOC99'> C Language as the reference programming language, and data definitions are specified in ISO C format. The C language is used here as a convenient notation. Using a C language description of these data objects does not preclude their use by other programming languages.</PARA>
<SECT2>
<TITLE>X11/extensions/XI.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define XI_BARCODE	"BARCODE"
#define XI_BUTTONBOX	"BUTTONBOX"
#define XI_CURSORKEYS	"CURSORKEYS"
#define XI_DATAGLOVE	"DATAGLOVE"
#define XI_EYETRACKER	"EYETRACKER"
#define XI_FOOTMOUSE	"FOOTMOUSE"
#define XI_ID_MODULE	"ID_MODULE"
#define XI_KEYBOARD	"KEYBOARD"
#define XI_KNOB_BOX	"KNOB_BOX"
#define XI_MOUSE	"MOUSE"
#define XI_NINE_KNOB	"NINE_KNOB"
#define XI_ONE_KNOB	"ONE_KNOB"
#define XI_QUADRATURE	"QUADRATURE"
#define XI_SPACEBALL	"SPACEBALL"
#define XI_TABLET	"TABLET"
#define XI_TOUCHPAD	"TOUCHPAD"
#define XI_TOUCHSCREEN	"TOUCHSCREEN"
#define XI_TRACKBALL	"TRACKBALL"
#define INAME	"XInputExtension"
#define InProximity	(0L &lt;&lt; 1)
#define DeviceMode	(1L &lt;&lt; 0)
#define DvAccelNum	(1L &lt;&lt; 0)
#define DvInteger	(1L &lt;&lt; 0)
#define DvString	(1L &lt;&lt; 0)
#define DvAccelDenom	(1L &lt;&lt; 1)
#define OutOfProximity	(1L &lt;&lt; 1)
#define ProximityState	(1L &lt;&lt; 1)
#define DvThreshold	(1L &lt;&lt; 2)
#define DvKeyClickPercent	(1L&lt;&lt;0)
#define DvPercent	(1L&lt;&lt;1)
#define DvPitch	(1L&lt;&lt;2)
#define DvDuration	(1L&lt;&lt;3)
#define DvLed	(1L&lt;&lt;4)
#define DvLedMode	(1L&lt;&lt;5)
#define DvKey	(1L&lt;&lt;6)
#define DvAutoRepeatMode	(1L&lt;&lt;7)
#define AddToList	0
#define AsyncThisDevice	0
#define COUNT	0
#define DeviceAdded	0
#define Dont_Check	0
#define IsXPointer	0
#define KbdFeedbackClass	0
#define KeyClass	0
#define NewPointer	0
#define Relative	0
#define XI_Absent	0
#define XI_BadDevice	0
#define XI_Initial_Release_Minor	0
#define XPOINTER	0
#define _devicePointerMotionHint	0
#define _devicePresence	0
#define UseXKeyboard	0xFF
#define Absolute	1
#define ButtonClass	1
#define CREATE	1
#define DEVICE_RESOLUTION	1
#define DeleteFromList	1
#define DeviceRemoved	1
#define IsXKeyboard	1
#define NewKeyboard	1
#define NoSuchExtension	1
#define PtrFeedbackClass	1
#define SyncThisDevice	1
#define XI_Add_DevicePresenceNotify_Major	1
#define XI_Add_XChangeDeviceControl_Major	1
#define XI_Add_XDeviceBell_Major	1
#define XI_Add_XDeviceBell_Minor	1
#define XI_Add_XSetDeviceValuators_Major	1
#define XI_BadEvent	1
#define XI_Initial_Release_Major	1
#define XI_Present	1
#define XInput_Initial_Release	1
#define XKEYBOARD	1
#define _deviceButton1Motion	1
#define sz_xAllowDeviceEventsReq	12
#define sz_xChangeDeviceDontPropagateListReq	12
#define sz_xChangeFeedbackControlReq	12
#define sz_xSelectExtensionEventReq	12
#define sz_xUngrabDeviceReq	12
#define sz_xGetDeviceMotionEventsReq	16
#define sz_xSendExtensionEventReq	16
#define sz_xSetDeviceFocusReq	16
#define sz_xUngrabDeviceButtonReq	16
#define sz_xUngrabDeviceKeyReq	16
#define DEVICE_ABS_CALIB	2
#define DeviceEnabled	2
#define IsXExtensionDevice	2
#define ReplayThisDevice	2
#define StringFeedbackClass	2
#define ValuatorClass	2
#define XI_Add_XSetDeviceValuators_Minor	2
#define XI_BadMode	2
#define XInput_Add_XDeviceBell	2
#define _deviceButton2Motion	2
#define sz_xGrabDeviceButtonReq	20
#define sz_xGrabDeviceKeyReq	20
#define sz_xGrabDeviceReq	20
#define AsyncOtherDevices	3
#define DEVICE_CORE	3
#define DeviceDisabled	3
#define FeedbackClass	3
#define FollowKeyboard	3
#define IntegerFeedbackClass	3
#define IsXExtensionKeyboard	3
#define RevertToFollowKeyboard	3
#define XI_Add_XChangeDeviceControl_Minor	3
#define XI_DeviceBusy	3
#define XInput_Add_XSetDeviceValuators	3
#define _deviceButton3Motion	3
#define sz_xChangeDeviceControlReply	32
#define sz_xChangeKeyboardDeviceReply	32
#define sz_xChangePointerDeviceReply	32
#define sz_xGetDeviceButtonMappingReply	32
#define sz_xGetDeviceControlReply	32
#define sz_xGetDeviceDontPropagateListReply	32
#define sz_xGetDeviceFocusReply	32
#define sz_xGetDeviceKeyMappingReply	32
#define sz_xGetDeviceMotionEventsReply	32
#define sz_xGetExtensionVersionReply	32
#define sz_xGetFeedbackControlReply	32
#define sz_xGetSelectedExtensionEventsReply	32
#define sz_xGrabDeviceButtonReply	32
#define sz_xGrabDeviceKeyReply	32
#define sz_xGrabDeviceReply	32
#define sz_xListInputDevicesReply	32
#define sz_xOpenDeviceReply	32
#define sz_xQueryDeviceStateReply	32
#define sz_xSetDeviceButtonMappingReply	32
#define sz_xSetDeviceModeReply	32
#define sz_xSetDeviceModifierMappingReply	32
#define sz_xSetDeviceValuatorsReply	32
#define AsyncAll	4
#define DEVICE_ENABLE	4
#define DeviceUnrecoverable	4
#define IsXExtensionPointer	4
#define LedFeedbackClass	4
#define ProximityClass	4
#define XI_Add_DevicePresenceNotify_Minor	4
#define XI_BadClass	4
#define XInput_Add_XChangeDeviceControl	4
#define _deviceButton4Motion	4
#define sz_xListInputDevicesReq	4
#define BellFeedbackClass	5
#define DEVICE_ABS_AREA	5
#define FocusClass	5
#define SyncAll	5
#define XInput_Add_DevicePresenceNotify	5
#define _deviceButton5Motion	5
#define OtherClass	6
#define _deviceButtonMotion	6
#define _deviceButtonGrab	7
#define _deviceOwnerGrabButton	8
#define sz_xChangeDeviceControlReq	8
#define sz_xChangeDeviceKeyMappingReq	8
#define sz_xChangeKeyboardDeviceReq	8
#define sz_xChangePointerDeviceReq	8
#define sz_xCloseDeviceReq	8
#define sz_xDeviceBellReq	8
#define sz_xGetDeviceButtonMappingReq	8
#define sz_xGetDeviceControlReq	8
#define sz_xGetDeviceDontPropagateListReq	8
#define sz_xGetDeviceFocusReq	8
#define sz_xGetDeviceKeyMappingReq	8
#define sz_xGetDeviceModifierMappingReq	8
#define sz_xGetExtensionVersionReq	8
#define sz_xGetFeedbackControlReq	8
#define sz_xGetSelectedExtensionEventsReq	8
#define sz_xOpenDeviceReq	8
#define sz_xQueryDeviceStateReq	8
#define sz_xSetDeviceButtonMappingReq	8
#define sz_xSetDeviceModeReq	8
#define sz_xSetDeviceModifierMappingReq	8
#define sz_xSetDeviceValuatorsReq	8
#define _noExtensionEvent	9

typedef long unsigned int XEventClass;
typedef struct {
    int present;
    short int major_version;
    short int minor_version;
} XExtensionVersion;
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/extensions/XInput.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define DeviceButtonPress(d,type,_class)	 \
	FindTypeAndClass(d, type, _class, ButtonClass, _deviceButtonPress)
#define DeviceButtonRelease(d,type,_class)	 \
	FindTypeAndClass(d, type, _class, ButtonClass, _deviceButtonRelease)
#define DeviceFocusIn(d,type,_class)	 \
	FindTypeAndClass(d, type, _class, FocusClass, _deviceFocusIn)
#define DeviceFocusOut(d,type,_class)	 \
	FindTypeAndClass(d, type, _class, FocusClass, _deviceFocusOut)
#define DeviceKeyPress(d,type,_class)	 \
	FindTypeAndClass(d, type, _class, KeyClass, _deviceKeyPress)
#define DeviceKeyRelease(d,type,_class)	 \
	FindTypeAndClass(d, type, _class, KeyClass, _deviceKeyRelease)
#define ChangeDeviceNotify(d,type,_class)	 \
	FindTypeAndClass(d, type, _class, OtherClass, _changeDeviceNotify)
#define DeviceMappingNotify(d,type,_class)	 \
	FindTypeAndClass(d, type, _class, OtherClass, _deviceMappingNotify)
#define DeviceStateNotify(d,type,_class)	 \
	FindTypeAndClass(d, type, _class, OtherClass, _deviceStateNotify)
#define ProximityIn(d,type,_class)	 \
	FindTypeAndClass(d, type, _class, ProximityClass, _proximityIn)
#define ProximityOut(d,type,_class)	 \
	FindTypeAndClass(d, type, _class, ProximityClass, _proximityOut)
#define DeviceMotionNotify(d,type,_class)	 \
	FindTypeAndClass(d, type, _class, ValuatorClass, _deviceMotionNotify)
#define FindTypeAndClass(d,type,_class,classid,offset)	 \
	{ int _i; XInputClassInfo *_ip; type = 0; _class = 0; for (_i=0, _ip= \
	((XDevice *) d)->classes; _i&lt; ((XDevice *) d)->num_classes; _i++, \
	_ip++) if (_ip->input_class == classid) {type = _ip->event_type_base + \
	offset; _class = ((XDevice *) d)->device_id &lt;&lt; 8 | type;}}
#define DevicePointerMotionHint(d,type,_class)	 \
	{ _class = ((XDevice *) d)->device_id &lt;&lt; 8 | \
	_devicePointerMotionHint;}
#define DeviceButton1Motion(d,type,_class)	 \
	{ _class = ((XDevice *) d)->device_id &lt;&lt; 8 | _deviceButton1Motion;}
#define DeviceButton2Motion(d,type,_class)	 \
	{ _class = ((XDevice *) d)->device_id &lt;&lt; 8 | _deviceButton2Motion;}
#define DeviceButton3Motion(d,type,_class)	 \
	{ _class = ((XDevice *) d)->device_id &lt;&lt; 8 | _deviceButton3Motion;}
#define DeviceButton5Motion(d,type,_class)	 \
	{ _class = ((XDevice *) d)->device_id &lt;&lt; 8 | _deviceButton5Motion;}
#define DeviceButtonPressGrab(d,type,_class)	 \
	{ _class = ((XDevice *) d)->device_id &lt;&lt; 8 | _deviceButtonGrab;}
#define DeviceOwnerGrabButton(d,type,_class)	 \
	{ _class = ((XDevice *) d)->device_id &lt;&lt; 8 | _deviceOwnerGrabButton;}
#define NoExtensionEvent(d,type,_class)	 \
	{ _class = ((XDevice *) d)->device_id &lt;&lt; 8 | _noExtensionEvent;}
#define _deviceButtonPress	0
#define _deviceFocusIn	0
#define _deviceKeyPress	0
#define _deviceMotionNotify	0
#define _deviceStateNotify	0
#define _proximityIn	0
#define _deviceButtonRelease	1
#define _deviceFocusOut	1
#define _deviceKeyRelease	1
#define _deviceMappingNotify	1
#define _proximityOut	1
#define _changeDeviceNotify	2
#define BadClass(dpy,error)	_xibadclass(dpy, &amp;error)
#define BadDevice(dpy,error)	_xibaddevice(dpy, &amp;error)
#define BadEvent(dpy,error)	_xibadevent(dpy, &amp;error)
#define BadMode(dpy,error)	_xibadmode(dpy, &amp;error)
#define DeviceBusy(dpy,error)	_xidevicebusy(dpy, &amp;error)

typedef struct {
    unsigned char input_class;
    unsigned char event_type_base;
} XInputClassInfo;
typedef struct {
    XID device_id;
    int num_classes;
    XInputClassInfo *classes;
} XDevice;
typedef struct {
    int type;
    long unsigned int serial;
    int send_event;
    Display *display;
    Window window;
    XID deviceid;
    Window root;
    Window subwindow;
    Time time;
    int x;
    int y;
    int x_root;
    int y_root;
    unsigned int state;
    unsigned int keycode;
    int same_screen;
    unsigned int device_state;
    unsigned char axes_count;
    unsigned char first_axis;
    int axis_data[6];
} XDeviceKeyEvent;
typedef XDeviceKeyEvent XDeviceKeyPressedEvent;
typedef XDeviceKeyEvent XDeviceKeyReleasedEvent;
typedef struct {
    int type;
    long unsigned int serial;
    int send_event;
    Display *display;
    Window window;
    XID deviceid;
    Window root;
    Window subwindow;
    Time time;
    int x;
    int y;
    int x_root;
    int y_root;
    unsigned int state;
    unsigned int button;
    int same_screen;
    unsigned int device_state;
    unsigned char axes_count;
    unsigned char first_axis;
    int axis_data[6];
} XDeviceButtonEvent;
typedef XDeviceButtonEvent XDeviceButtonPressedEvent;
typedef XDeviceButtonEvent XDeviceButtonReleasedEvent;
typedef struct {
    int type;
    long unsigned int serial;
    int send_event;
    Display *display;
    Window window;
    XID deviceid;
    Window root;
    Window subwindow;
    Time time;
    int x;
    int y;
    int x_root;
    int y_root;
    unsigned int state;
    char is_hint;
    int same_screen;
    unsigned int device_state;
    unsigned char axes_count;
    unsigned char first_axis;
    int axis_data[6];
} XDeviceMotionEvent;
typedef struct {
    int type;
    long unsigned int serial;
    int send_event;
    Display *display;
    Window window;
    XID deviceid;
    int mode;
    int detail;
    Time time;
} XDeviceFocusChangeEvent;
typedef XDeviceFocusChangeEvent XDeviceFocusInEvent;
typedef XDeviceFocusChangeEvent XDeviceFocusOutEvent;
typedef struct {
    int type;
    long unsigned int serial;
    int send_event;
    Display *display;
    Window window;
    XID deviceid;
    Window root;
    Window subwindow;
    Time time;
    int x;
    int y;
    int x_root;
    int y_root;
    unsigned int state;
    int same_screen;
    unsigned int device_state;
    unsigned char axes_count;
    unsigned char first_axis;
    int axis_data[6];
} XProximityNotifyEvent;
typedef XProximityNotifyEvent XProximityInEvent;
typedef XProximityNotifyEvent XProximityOutEvent;
typedef struct {
    unsigned char c_class;
    unsigned char length;
} XInputClass;
typedef struct {
    int type;
    long unsigned int serial;
    int send_event;
    Display *display;
    Window window;
    XID deviceid;
    Time time;
    int num_classes;
    char data[64];
} XDeviceStateNotifyEvent;
typedef struct {
    unsigned char c_class;
    unsigned char length;
    unsigned char num_valuators;
    unsigned char mode;
    int valuators[6];
} XValuatorStatus;
typedef struct {
    unsigned char c_class;
    unsigned char length;
    short int num_keys;
    char keys[32];
} XKeyStatus;
typedef struct {
    unsigned char c_class;
    unsigned char length;
    short int num_buttons;
    char buttons[32];
} XButtonStatus;
typedef struct {
    int type;
    long unsigned int serial;
    int send_event;
    Display *display;
    Window window;
    XID deviceid;
    Time time;
    int request;
    int first_keycode;
    int count;
} XDeviceMappingEvent;
typedef struct {
    int type;
    long unsigned int serial;
    int send_event;
    Display *display;
    Window window;
    XID deviceid;
    Time time;
    int request;
} XChangeDeviceNotifyEvent;
typedef struct {
    XID c_class;
    int length;
    XID id;
} XFeedbackState;
typedef struct {
    XID c_class;
    int length;
    XID id;
    int click;
    int percent;
    int pitch;
    int duration;
    int led_mask;
    int global_auto_repeat;
    char auto_repeats[32];
} XKbdFeedbackState;
typedef struct {
    XID c_class;
    int length;
    XID id;
    int accelNum;
    int accelDenom;
    int threshold;
} XPtrFeedbackState;
typedef struct {
    XID c_class;
    int length;
    XID id;
    int resolution;
    int minVal;
    int maxVal;
} XIntegerFeedbackState;
typedef struct {
    XID c_class;
    int length;
    XID id;
    int max_symbols;
    int num_syms_supported;
    KeySym *syms_supported;
} XStringFeedbackState;
typedef struct {
    XID c_class;
    int length;
    XID id;
    int percent;
    int pitch;
    int duration;
} XBellFeedbackState;
typedef struct {
    XID c_class;
    int length;
    XID id;
    int led_values;
    int led_mask;
} XLedFeedbackState;
typedef struct {
    XID c_class;
    int length;
    XID id;
} XFeedbackControl;
typedef struct {
    XID c_class;
    int length;
    XID id;
    int accelNum;
    int accelDenom;
    int threshold;
} XPtrFeedbackControl;
typedef struct {
    XID c_class;
    int length;
    XID id;
    int click;
    int percent;
    int pitch;
    int duration;
    int led_mask;
    int led_value;
    int key;
    int auto_repeat_mode;
} XKbdFeedbackControl;
typedef struct {
    XID c_class;
    int length;
    XID id;
    int num_keysyms;
    KeySym *syms_to_display;
} XStringFeedbackControl;
typedef struct {
    XID c_class;
    int length;
    XID id;
    int int_to_display;
} XIntegerFeedbackControl;
typedef struct {
    XID c_class;
    int length;
    XID id;
    int percent;
    int pitch;
    int duration;
} XBellFeedbackControl;
typedef struct {
    XID c_class;
    int length;
    XID id;
    int led_mask;
    int led_values;
} XLedFeedbackControl;
typedef struct {
    XID control;
    int length;
} XDeviceControl;
typedef struct {
    XID control;
    int length;
    int first_valuator;
    int num_valuators;
    int *resolutions;
} XDeviceResolutionControl;
typedef struct {
    XID control;
    int length;
    int num_valuators;
    int *resolutions;
    int *min_resolutions;
    int *max_resolutions;
} XDeviceResolutionState;
typedef struct _XAnyClassinfo *XAnyClassPtr;
typedef struct _XAnyClassinfo {
    XID c_class;
    int length;
} XAnyClassInfo;
typedef struct _XDeviceInfo *XDeviceInfoPtr;
typedef struct _XDeviceInfo {
    XID id;
    Atom type;
    char *name;
    int num_classes;
    int use;
    XAnyClassPtr inputclassinfo;
} XDeviceInfo;
typedef struct _XKeyInfo *XKeyInfoPtr;
typedef struct _XKeyInfo {
    XID c_class;
    int length;
    short unsigned int min_keycode;
    short unsigned int max_keycode;
    short unsigned int num_keys;
} XKeyInfo;
typedef struct _XButtonInfo *XButtonInfoPtr;
typedef struct _XButtonInfo {
    XID c_class;
    int length;
    short int num_buttons;
} XButtonInfo;
typedef struct _XAxisInfo *XAxisInfoPtr;
typedef struct _XAxisInfo {
    int resolution;
    int min_value;
    int max_value;
} XAxisInfo;
typedef struct _XValuatorInfo *XValuatorInfoPtr;
typedef struct _XValuatorInfo {
    XID c_class;
    int length;
    unsigned char num_axes;
    unsigned char mode;
    long unsigned int motion_buffer;
    XAxisInfoPtr axes;
} XValuatorInfo;
typedef struct {
    XEventClass event_type;
    XID device;
} XEventList;
typedef struct {
    Time time;
    int *data;
} XDeviceTimeCoord;
typedef struct {
    XID device_id;
    int num_classes;
    XInputClass *data;
} XDeviceState;
typedef struct {
    unsigned char c_class;
    unsigned char length;
    unsigned char num_valuators;
    unsigned char mode;
    int *valuators;
} XValuatorState;
typedef struct {
    unsigned char c_class;
    unsigned char length;
    short int num_keys;
    char keys[32];
} XKeyState;
typedef struct {
    unsigned char c_class;
    unsigned char length;
    short int num_buttons;
    char buttons[32];
} XButtonState;
extern int XAllowDeviceEvents(Display *, XDevice *, int, Time);
extern int XChangeDeviceControl(Display *, XDevice *, int,
				XDeviceControl *);
extern int XChangeDeviceDontPropagateList(Display *, Window, int,
					  XEventClass *, int);
extern int XChangeDeviceKeyMapping(Display *, XDevice *, int, int,
				   KeySym *, int);
extern int XChangeFeedbackControl(Display *, XDevice *, unsigned long int,
				  XFeedbackControl *);
extern int XChangeKeyboardDevice(Display *, XDevice *);
extern int XChangePointerDevice(Display *, XDevice *, int, int);
extern int XCloseDevice(Display *, XDevice *);
extern int XDeviceBell(Display *, XDevice *, XID, XID, int);
extern void XFreeDeviceControl(XDeviceControl *);
extern void XFreeDeviceList(XDeviceInfo *);
extern void XFreeDeviceMotionEvents(XDeviceTimeCoord *);
extern void XFreeDeviceState(XDeviceState *);
extern void XFreeFeedbackList(XFeedbackState *);
extern int XGetDeviceButtonMapping(Display *, XDevice *, unsigned char *,
				   unsigned int);
extern XDeviceControl *XGetDeviceControl(Display *, XDevice *, int);
extern XEventClass *XGetDeviceDontPropagateList(Display *, Window, int *);
extern int XGetDeviceFocus(Display *, XDevice *, Window *, int *, Time *);
extern KeySym *XGetDeviceKeyMapping(Display *, XDevice *, KeyCode, int,
				    int *);
extern XModifierKeymap *XGetDeviceModifierMapping(Display *, XDevice *);
extern XDeviceTimeCoord *XGetDeviceMotionEvents(Display *, XDevice *, Time,
						Time, int *, int *, int *);
extern XExtensionVersion *XGetExtensionVersion(Display *, const char *);
extern XFeedbackState *XGetFeedbackControl(Display *, XDevice *, int *);
extern int XGetSelectedExtensionEvents(Display *, Window, int *,
				       XEventClass * *, int *,
				       XEventClass * *);
extern int XGrabDevice(Display *, XDevice *, Window, int, int,
		       XEventClass *, int, int, Time);
extern int XGrabDeviceButton(Display *, XDevice *, unsigned int,
			     unsigned int, XDevice *, Window, int,
			     unsigned int, XEventClass *, int, int);
extern int XGrabDeviceKey(Display *, XDevice *, unsigned int, unsigned int,
			  XDevice *, Window, int, unsigned int,
			  XEventClass *, int, int);
extern XDeviceInfo *XListInputDevices(Display *, int *);
extern XDevice *XOpenDevice(Display *, XID);
extern XDeviceState *XQueryDeviceState(Display *, XDevice *);
extern int XSelectExtensionEvent(Display *, Window, XEventClass *, int);
extern int XSendExtensionEvent(Display *, XDevice *, Window, int, int,
			       XEventClass *, XEvent *);
extern int XSetDeviceButtonMapping(Display *, XDevice *, unsigned char *,
				   int);
extern int XSetDeviceFocus(Display *, XDevice *, Window, int, Time);
extern int XSetDeviceMode(Display *, XDevice *, int);
extern int XSetDeviceModifierMapping(Display *, XDevice *,
				     XModifierKeymap *);
extern int XSetDeviceValuators(Display *, XDevice *, int *, int, int);
extern int XUngrabDevice(Display *, XDevice *, Time);
extern int XUngrabDeviceButton(Display *, XDevice *, unsigned int,
			       unsigned int, XDevice *, Window);
extern int XUngrabDeviceKey(Display *, XDevice *, unsigned int,
			    unsigned int, XDevice *, Window);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/extensions/XIproto.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define XI_DeviceValuator	0
#define InputClassBits	0x3F
#define DEVICE_BITS	0x7F
#define MORE_EVENTS	0x80
#define CLIENT_REQ	1
#define XI_DeviceKeyPress	1
#define X_GetExtensionVersion	1
#define XI_DeviceStateNotify	10
#define X_GetDeviceMotionEvents	10
#define XI_DeviceMappingNotify	11
#define X_ChangeKeyboardDevice	11
#define XI_ChangeDeviceNotify	12
#define X_ChangePointerDevice	12
#define XI_DeviceKeystateNotify	13
#define X_GrabDevice	13
#define XI_DeviceButtonstateNotify	14
#define X_UngrabDevice	14
#define XI_DevicePresenceNotify	15
#define X_GrabDeviceKey	15
#define IEVENTS	16
#define X_UngrabDeviceKey	16
#define X_GrabDeviceButton	17
#define X_UngrabDeviceButton	18
#define X_AllowDeviceEvents	19
#define XI_DeviceKeyRelease	2
#define X_ListInputDevices	2
#define X_GetDeviceFocus	20
#define X_SetDeviceFocus	21
#define X_GetFeedbackControl	22
#define X_ChangeFeedbackControl	23
#define X_GetDeviceKeyMapping	24
#define X_ChangeDeviceKeyMapping	25
#define X_GetDeviceModifierMapping	26
#define X_SetDeviceModifierMapping	27
#define X_GetDeviceButtonMapping	28
#define X_SetDeviceButtonMapping	29
#define XI_DeviceButtonPress	3
#define X_OpenDevice	3
#define X_QueryDeviceState	30
#define X_SendExtensionEvent	31
#define X_DeviceBell	32
#define X_SetDeviceValuators	33
#define X_GetDeviceControl	34
#define X_ChangeDeviceControl	35
#define XI_DeviceButtonRelease	4
#define X_CloseDevice	4
#define IERRORS	5
#define XI_DeviceMotionNotify	5
#define X_SetDeviceMode	5
#define ModeBitsShift	6
#define XI_DeviceFocusIn	6
#define X_SelectExtensionEvent	6
#define XI_DeviceFocusOut	7
#define X_GetSelectedExtensionEvents	7
#define numInputClasses	7
#define XI_ProximityIn	8
#define X_ChangeDeviceDontPropagateList	8
#define XI_ProximityOut	9
#define X_GetDeviceDontPropagateList	9

typedef struct _XExtEventInfo {
    Mask mask;
    BYTE type;
    BYTE word;
} XExtEventInfo;
typedef unsigned char *Pointer;
typedef struct {
    CARD8 reqType;
    CARD8 ReqType;
    CARD16 length;
    CARD16 nbytes;
    CARD8 pad1;
    CARD8 pad2;
} xGetExtensionVersionReq;
typedef struct {
    CARD8 repType;
    CARD8 RepType;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD16 major_version;
    CARD16 minor_version;
    BOOL present;
    CARD8 pad1;
    CARD8 pad2;
    CARD8 pad3;
    CARD32 pad01;
    CARD32 pad02;
    CARD32 pad03;
    CARD32 pad04;
} xGetExtensionVersionReply;
typedef struct {
    CARD8 reqType;
    CARD8 ReqType;
    CARD16 length;
} xListInputDevicesReq;
typedef struct {
    CARD8 repType;
    CARD8 RepType;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD8 ndevices;
    CARD8 pad1;
    CARD8 pad2;
    CARD8 pad3;
    CARD32 pad01;
    CARD32 pad02;
    CARD32 pad03;
    CARD32 pad04;
    CARD32 pad05;
} xListInputDevicesReply;
typedef struct _xDeviceInfo *xDeviceInfoPtr;
typedef struct _xAnyClassinfo *xAnyClassPtr;
typedef struct _xAnyClassinfo {
    CARD8 c_class;
    CARD8 length;
} xAnyClassInfo;
typedef struct _xDeviceInfo {
    CARD32 type;
    CARD8 id;
    CARD8 num_classes;
    CARD8 use;
    CARD8 pad1;
} xDeviceInfo;
typedef struct _xKeyInfo *xKeyInfoPtr;
typedef struct _xKeyInfo {
    CARD8 c_class;
    CARD8 length;
    CARD8 min_keycode;
    CARD8 max_keycode;
    CARD16 num_keys;
    CARD8 pad1;
    CARD8 pad2;
} xKeyInfo;
typedef struct _xButtonInfo *xButtonInfoPtr;
typedef struct _xButtonInfo {
    CARD8 c_class;
    CARD8 length;
    CARD16 num_buttons;
} xButtonInfo;
typedef struct _xValuatorInfo *xValuatorInfoPtr;
typedef struct _xValuatorInfo {
    CARD8 c_class;
    CARD8 length;
    CARD8 num_axes;
    CARD8 mode;
    CARD32 motion_buffer_size;
} xValuatorInfo;
typedef struct _xAxisInfo *xAxisInfoPtr;
typedef struct _xAxisInfo {
    CARD32 resolution;
    CARD32 min_value;
    CARD32 max_value;
} xAxisInfo;
typedef struct {
    CARD8 reqType;
    CARD8 ReqType;
    CARD16 length;
    CARD8 deviceid;
    BYTE pad1;
    BYTE pad2;
    BYTE pad3;
} xOpenDeviceReq;
typedef struct {
    CARD8 repType;
    CARD8 RepType;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD8 num_classes;
    BYTE pad1;
    BYTE pad2;
    BYTE pad3;
    CARD32 pad00;
    CARD32 pad01;
    CARD32 pad02;
    CARD32 pad03;
    CARD32 pad04;
} xOpenDeviceReply;
typedef struct {
    CARD8 c_class;
    CARD8 event_type_base;
} xInputClassInfo;
typedef struct {
    CARD8 reqType;
    CARD8 ReqType;
    CARD16 length;
    CARD8 deviceid;
    BYTE pad1;
    BYTE pad2;
    BYTE pad3;
} xCloseDeviceReq;
typedef struct {
    CARD8 reqType;
    CARD8 ReqType;
    CARD16 length;
    CARD8 deviceid;
    CARD8 mode;
    BYTE pad1;
    BYTE pad2;
} xSetDeviceModeReq;
typedef struct {
    CARD8 repType;
    CARD8 RepType;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD8 status;
    BYTE pad1;
    BYTE pad2;
    BYTE pad3;
    CARD32 pad01;
    CARD32 pad02;
    CARD32 pad03;
    CARD32 pad04;
    CARD32 pad05;
} xSetDeviceModeReply;
typedef struct {
    CARD8 reqType;
    CARD8 ReqType;
    CARD16 length;
    CARD32 window;
    CARD16 count;
    CARD16 pad00;
} xSelectExtensionEventReq;
typedef struct {
    CARD8 reqType;
    CARD8 ReqType;
    CARD16 length;
    CARD32 window;
} xGetSelectedExtensionEventsReq;
typedef struct {
    CARD8 repType;
    CARD8 RepType;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD16 this_client_count;
    CARD16 all_clients_count;
    CARD32 pad01;
    CARD32 pad02;
    CARD32 pad03;
    CARD32 pad04;
    CARD32 pad05;
} xGetSelectedExtensionEventsReply;
typedef struct {
    CARD8 reqType;
    CARD8 ReqType;
    CARD16 length;
    CARD32 window;
    CARD16 count;
    CARD8 mode;
    BYTE pad;
} xChangeDeviceDontPropagateListReq;
typedef struct {
    CARD8 reqType;
    CARD8 ReqType;
    CARD16 length;
    CARD32 window;
} xGetDeviceDontPropagateListReq;
typedef struct {
    CARD8 repType;
    CARD8 RepType;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD16 count;
    CARD16 pad00;
    CARD32 pad01;
    CARD32 pad02;
    CARD32 pad03;
    CARD32 pad04;
    CARD32 pad05;
} xGetDeviceDontPropagateListReply;
typedef struct {
    CARD8 reqType;
    CARD8 ReqType;
    CARD16 length;
    CARD32 start;
    CARD32 stop;
    CARD8 deviceid;
    BYTE pad1;
    BYTE pad2;
    BYTE pad3;
} xGetDeviceMotionEventsReq;
typedef struct {
    CARD8 repType;
    CARD8 RepType;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD32 nEvents;
    CARD8 axes;
    CARD8 mode;
    BYTE pad1;
    BYTE pad2;
    CARD32 pad01;
    CARD32 pad02;
    CARD32 pad03;
    CARD32 pad04;
} xGetDeviceMotionEventsReply;
typedef struct {
    CARD8 reqType;
    CARD8 ReqType;
    CARD16 length;
    CARD8 deviceid;
    BYTE pad1;
    BYTE pad2;
    BYTE pad3;
} xChangeKeyboardDeviceReq;
typedef struct {
    CARD8 repType;
    CARD8 RepType;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD8 status;
    BYTE pad1;
    BYTE pad2;
    BYTE pad3;
    CARD32 pad01;
    CARD32 pad02;
    CARD32 pad03;
    CARD32 pad04;
    CARD32 pad05;
} xChangeKeyboardDeviceReply;
typedef struct {
    CARD8 reqType;
    CARD8 ReqType;
    CARD16 length;
    CARD8 xaxis;
    CARD8 yaxis;
    CARD8 deviceid;
    BYTE pad1;
} xChangePointerDeviceReq;
typedef struct {
    CARD8 repType;
    CARD8 RepType;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD8 status;
    BYTE pad1;
    BYTE pad2;
    BYTE pad3;
    CARD32 pad01;
    CARD32 pad02;
    CARD32 pad03;
    CARD32 pad04;
    CARD32 pad05;
} xChangePointerDeviceReply;
typedef struct {
    CARD8 reqType;
    CARD8 ReqType;
    CARD16 length;
    CARD32 grabWindow;
    CARD32 time;
    CARD16 event_count;
    CARD8 this_device_mode;
    CARD8 other_devices_mode;
    BOOL ownerEvents;
    CARD8 deviceid;
    CARD16 pad01;
} xGrabDeviceReq;
typedef struct {
    CARD8 repType;
    CARD8 RepType;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD8 status;
    BYTE pad1;
    BYTE pad2;
    BYTE pad3;
    CARD32 pad01;
    CARD32 pad02;
    CARD32 pad03;
    CARD32 pad04;
    CARD32 pad05;
} xGrabDeviceReply;
typedef struct {
    CARD8 reqType;
    CARD8 ReqType;
    CARD16 length;
    CARD32 time;
    CARD8 deviceid;
    BYTE pad1;
    BYTE pad2;
    BYTE pad3;
} xUngrabDeviceReq;
typedef struct {
    CARD8 reqType;
    CARD8 ReqType;
    CARD16 length;
    CARD32 grabWindow;
    CARD16 event_count;
    CARD16 modifiers;
    CARD8 modifier_device;
    CARD8 grabbed_device;
    CARD8 key;
    BYTE this_device_mode;
    BYTE other_devices_mode;
    BOOL ownerEvents;
    BYTE pad1;
    BYTE pad2;
} xGrabDeviceKeyReq;
typedef struct {
    CARD8 reqType;
    CARD8 ReqType;
    CARD16 length;
    CARD32 grabWindow;
    CARD16 modifiers;
    CARD8 modifier_device;
    CARD8 key;
    CARD8 grabbed_device;
    BYTE pad1;
    BYTE pad2;
    BYTE pad3;
} xUngrabDeviceKeyReq;
typedef struct {
    CARD8 reqType;
    CARD8 ReqType;
    CARD16 length;
    CARD32 grabWindow;
    CARD8 grabbed_device;
    CARD8 modifier_device;
    CARD16 event_count;
    CARD16 modifiers;
    BYTE this_device_mode;
    BYTE other_devices_mode;
    CARD8 button;
    BOOL ownerEvents;
    BYTE pad1;
    BYTE pad2;
} xGrabDeviceButtonReq;
typedef struct {
    CARD8 reqType;
    CARD8 ReqType;
    CARD16 length;
    CARD32 grabWindow;
    CARD16 modifiers;
    CARD8 modifier_device;
    CARD8 button;
    CARD8 grabbed_device;
    BYTE pad1;
    BYTE pad2;
    BYTE pad3;
} xUngrabDeviceButtonReq;
typedef struct {
    CARD8 reqType;
    CARD8 ReqType;
    CARD16 length;
    CARD32 time;
    CARD8 mode;
    CARD8 deviceid;
    BYTE pad1;
    BYTE pad2;
} xAllowDeviceEventsReq;
typedef struct {
    CARD8 reqType;
    CARD8 ReqType;
    CARD16 length;
    CARD8 deviceid;
    BYTE pad1;
    BYTE pad2;
    BYTE pad3;
} xGetDeviceFocusReq;
typedef struct {
    CARD8 repType;
    CARD8 RepType;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD32 focus;
    CARD32 time;
    CARD8 revertTo;
    BYTE pad1;
    BYTE pad2;
    BYTE pad3;
    CARD32 pad01;
    CARD32 pad02;
    CARD32 pad03;
} xGetDeviceFocusReply;
typedef struct {
    CARD8 reqType;
    CARD8 ReqType;
    CARD16 length;
    CARD32 focus;
    CARD32 time;
    CARD8 revertTo;
    CARD8 device;
    CARD16 pad01;
} xSetDeviceFocusReq;
typedef struct {
    CARD8 reqType;
    CARD8 ReqType;
    CARD16 length;
    CARD8 deviceid;
    BYTE pad1;
    BYTE pad2;
    BYTE pad3;
} xGetFeedbackControlReq;
typedef struct {
    CARD8 repType;
    CARD8 RepType;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD16 num_feedbacks;
    CARD16 pad01;
    CARD32 pad02;
    CARD32 pad03;
    CARD32 pad04;
    CARD32 pad05;
    CARD32 pad06;
} xGetFeedbackControlReply;
typedef struct {
    CARD8 c_class;
    CARD8 id;
    CARD16 length;
} xFeedbackState;
typedef struct {
    CARD8 c_class;
    CARD8 id;
    CARD16 length;
    CARD16 pitch;
    CARD16 duration;
    CARD32 led_mask;
    CARD32 led_values;
    BOOL global_auto_repeat;
    CARD8 click;
    CARD8 percent;
    BYTE pad;
    BYTE auto_repeats[32];
} xKbdFeedbackState;
typedef struct {
    CARD8 c_class;
    CARD8 id;
    CARD16 length;
    CARD8 pad1;
    CARD8 pad2;
    CARD16 accelNum;
    CARD16 accelDenom;
    CARD16 threshold;
} xPtrFeedbackState;
typedef struct {
    CARD8 c_class;
    CARD8 id;
    CARD16 length;
    CARD32 resolution;
    INT32 min_value;
    INT32 max_value;
} xIntegerFeedbackState;
typedef struct {
    CARD8 c_class;
    CARD8 id;
    CARD16 length;
    CARD16 max_symbols;
    CARD16 num_syms_supported;
} xStringFeedbackState;
typedef struct {
    CARD8 c_class;
    CARD8 id;
    CARD16 length;
    CARD8 percent;
    BYTE pad1;
    BYTE pad2;
    BYTE pad3;
    CARD16 pitch;
    CARD16 duration;
} xBellFeedbackState;
typedef struct {
    CARD8 c_class;
    CARD8 id;
    CARD16 length;
    CARD32 led_mask;
    CARD32 led_values;
} xLedFeedbackState;
typedef struct {
    CARD8 reqType;
    CARD8 ReqType;
    CARD16 length;
    CARD32 mask;
    CARD8 deviceid;
    CARD8 feedbackid;
    BYTE pad1;
    BYTE pad2;
} xChangeFeedbackControlReq;
typedef struct {
    CARD8 c_class;
    CARD8 id;
    CARD16 length;
} xFeedbackCtl;
typedef struct {
    CARD8 c_class;
    CARD8 id;
    CARD16 length;
    CARD8 key;
    CARD8 auto_repeat_mode;
    INT8 click;
    INT8 percent;
    INT16 pitch;
    INT16 duration;
    CARD32 led_mask;
    CARD32 led_values;
} xKbdFeedbackCtl;
typedef struct {
    CARD8 c_class;
    CARD8 id;
    CARD16 length;
    CARD8 pad1;
    CARD8 pad2;
    INT16 num;
    INT16 denom;
    INT16 thresh;
} xPtrFeedbackCtl;
typedef struct {
    CARD8 c_class;
    CARD8 id;
    CARD16 length;
    INT32 int_to_display;
} xIntegerFeedbackCtl;
typedef struct {
    CARD8 c_class;
    CARD8 id;
    CARD16 length;
    CARD8 pad1;
    CARD8 pad2;
    CARD16 num_keysyms;
} xStringFeedbackCtl;
typedef struct {
    CARD8 c_class;
    CARD8 id;
    CARD16 length;
    INT8 percent;
    BYTE pad1;
    BYTE pad2;
    BYTE pad3;
    INT16 pitch;
    INT16 duration;
} xBellFeedbackCtl;
typedef struct {
    CARD8 c_class;
    CARD8 id;
    CARD16 length;
    CARD32 led_mask;
    CARD32 led_values;
} xLedFeedbackCtl;
typedef struct {
    CARD8 reqType;
    CARD8 ReqType;
    CARD16 length;
    CARD8 deviceid;
    CARD8 firstKeyCode;
    CARD8 count;
    BYTE pad1;
} xGetDeviceKeyMappingReq;
typedef struct {
    CARD8 repType;
    CARD8 RepType;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD8 keySymsPerKeyCode;
    CARD8 pad0;
    CARD16 pad1;
    CARD32 pad2;
    CARD32 pad3;
    CARD32 pad4;
    CARD32 pad5;
    CARD32 pad6;
} xGetDeviceKeyMappingReply;
typedef struct {
    CARD8 reqType;
    CARD8 ReqType;
    CARD16 length;
    CARD8 deviceid;
    CARD8 firstKeyCode;
    CARD8 keySymsPerKeyCode;
    CARD8 keyCodes;
} xChangeDeviceKeyMappingReq;
typedef struct {
    CARD8 reqType;
    CARD8 ReqType;
    CARD16 length;
    CARD8 deviceid;
    BYTE pad1;
    BYTE pad2;
    BYTE pad3;
} xGetDeviceModifierMappingReq;
typedef struct {
    CARD8 repType;
    CARD8 RepType;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD8 numKeyPerModifier;
    CARD8 pad0;
    CARD16 pad1;
    CARD32 pad2;
    CARD32 pad3;
    CARD32 pad4;
    CARD32 pad5;
    CARD32 pad6;
} xGetDeviceModifierMappingReply;
typedef struct {
    CARD8 reqType;
    CARD8 ReqType;
    CARD16 length;
    CARD8 deviceid;
    CARD8 numKeyPerModifier;
    CARD16 pad1;
} xSetDeviceModifierMappingReq;
typedef struct {
    CARD8 repType;
    CARD8 RepType;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD8 success;
    CARD8 pad0;
    CARD16 pad1;
    CARD32 pad2;
    CARD32 pad3;
    CARD32 pad4;
    CARD32 pad5;
    CARD32 pad6;
} xSetDeviceModifierMappingReply;
typedef struct {
    CARD8 reqType;
    CARD8 ReqType;
    CARD16 length;
    CARD8 deviceid;
    BYTE pad1;
    BYTE pad2;
    BYTE pad3;
} xGetDeviceButtonMappingReq;
typedef struct {
    CARD8 repType;
    CARD8 RepType;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD8 nElts;
    BYTE pad1;
    BYTE pad2;
    BYTE pad3;
    CARD32 pad01;
    CARD32 pad02;
    CARD32 pad03;
    CARD32 pad04;
    CARD32 pad05;
} xGetDeviceButtonMappingReply;
typedef struct {
    CARD8 reqType;
    CARD8 ReqType;
    CARD16 length;
    CARD8 deviceid;
    CARD8 map_length;
    BYTE pad1;
    BYTE pad2;
} xSetDeviceButtonMappingReq;
typedef struct {
    CARD8 repType;
    CARD8 RepType;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD8 status;
    BYTE pad0;
    CARD16 pad1;
    CARD32 pad2;
    CARD32 pad3;
    CARD32 pad4;
    CARD32 pad5;
    CARD32 pad6;
} xSetDeviceButtonMappingReply;
typedef struct {
    CARD8 reqType;
    CARD8 ReqType;
    CARD16 length;
    CARD8 deviceid;
    BYTE pad1;
    BYTE pad2;
    BYTE pad3;
} xQueryDeviceStateReq;
typedef struct {
    CARD8 repType;
    CARD8 RepType;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD8 num_classes;
    BYTE pad0;
    CARD16 pad1;
    CARD32 pad2;
    CARD32 pad3;
    CARD32 pad4;
    CARD32 pad5;
    CARD32 pad6;
} xQueryDeviceStateReply;
typedef struct {
    CARD8 c_class;
    CARD8 length;
    CARD8 num_keys;
    BYTE pad1;
    CARD8 keys[32];
} xKeyState;
typedef struct {
    CARD8 c_class;
    CARD8 length;
    CARD8 num_buttons;
    BYTE pad1;
    CARD8 buttons[32];
} xButtonState;
typedef struct {
    CARD8 c_class;
    CARD8 length;
    CARD8 num_valuators;
    CARD8 mode;
} xValuatorState;
typedef struct {
    CARD8 reqType;
    CARD8 ReqType;
    CARD16 length;
    CARD32 destination;
    CARD8 deviceid;
    BOOL propagate;
    CARD16 count;
    CARD8 num_events;
    BYTE pad1;
    BYTE pad2;
    BYTE pad3;
} xSendExtensionEventReq;
typedef struct {
    CARD8 reqType;
    CARD8 ReqType;
    CARD16 length;
    CARD8 deviceid;
    CARD8 feedbackid;
    CARD8 feedbackclass;
    INT8 percent;
} xDeviceBellReq;
typedef struct {
    CARD8 reqType;
    CARD8 ReqType;
    CARD16 length;
    CARD8 deviceid;
    CARD8 first_valuator;
    CARD8 num_valuators;
    BYTE pad1;
} xSetDeviceValuatorsReq;
typedef struct {
    CARD8 repType;
    CARD8 RepType;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD8 status;
    BYTE pad1;
    BYTE pad2;
    BYTE pad3;
    CARD32 pad01;
    CARD32 pad02;
    CARD32 pad03;
    CARD32 pad04;
    CARD32 pad05;
} xSetDeviceValuatorsReply;
typedef struct {
    CARD8 reqType;
    CARD8 ReqType;
    CARD16 length;
    CARD16 control;
    CARD8 deviceid;
    BYTE pad2;
} xGetDeviceControlReq;
typedef struct {
    CARD8 repType;
    CARD8 RepType;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD8 status;
    BYTE pad1;
    BYTE pad2;
    BYTE pad3;
    CARD32 pad01;
    CARD32 pad02;
    CARD32 pad03;
    CARD32 pad04;
    CARD32 pad05;
} xGetDeviceControlReply;
typedef struct {
    CARD16 control;
    CARD16 length;
} xDeviceState;
typedef struct {
    CARD16 control;
    CARD16 length;
    CARD32 num_valuators;
} xDeviceResolutionState;
typedef struct {
    CARD8 reqType;
    CARD8 ReqType;
    CARD16 length;
    CARD16 control;
    CARD8 deviceid;
    BYTE pad0;
} xChangeDeviceControlReq;
typedef struct {
    CARD8 repType;
    CARD8 RepType;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD8 status;
    BYTE pad1;
    BYTE pad2;
    BYTE pad3;
    CARD32 pad01;
    CARD32 pad02;
    CARD32 pad03;
    CARD32 pad04;
    CARD32 pad05;
} xChangeDeviceControlReply;
typedef struct {
    CARD16 control;
    CARD16 length;
} xDeviceCtl;
typedef struct {
    CARD16 control;
    CARD16 length;
    CARD8 first_valuator;
    CARD8 num_valuators;
    CARD8 pad1;
    CARD8 pad2;
} xDeviceResolutionCtl;
typedef struct {
    BYTE type;
    CARD8 deviceid;
    CARD16 sequenceNumber;
    KeyButMask device_state;
    CARD8 num_valuators;
    CARD8 first_valuator;
    INT32 valuator0;
    INT32 valuator1;
    INT32 valuator2;
    INT32 valuator3;
    INT32 valuator4;
    INT32 valuator5;
} deviceValuator;
typedef struct {
    BYTE type;
    BYTE detail;
    CARD16 sequenceNumber;
    CARD32 time;
    CARD32 root;
    CARD32 event;
    CARD32 child;
    INT16 root_x;
    INT16 root_y;
    INT16 event_x;
    INT16 event_y;
    KeyButMask state;
    BOOL same_screen;
    CARD8 deviceid;
} deviceKeyButtonPointer;
typedef struct {
    BYTE type;
    BYTE detail;
    CARD16 sequenceNumber;
    CARD32 time;
    CARD32 window;
    BYTE mode;
    CARD8 deviceid;
    BYTE pad1;
    BYTE pad2;
    CARD32 pad00;
    CARD32 pad01;
    CARD32 pad02;
    CARD32 pad03;
} deviceFocus;
typedef struct {
    BYTE type;
    BYTE deviceid;
    CARD16 sequenceNumber;
    CARD32 time;
    CARD8 num_keys;
    CARD8 num_buttons;
    CARD8 num_valuators;
    CARD8 classes_reported;
    CARD8 buttons[4];
    CARD8 keys[4];
    INT32 valuator0;
    INT32 valuator1;
    INT32 valuator2;
} deviceStateNotify;
typedef struct {
    BYTE type;
    BYTE deviceid;
    CARD16 sequenceNumber;
    CARD8 keys[28];
} deviceKeyStateNotify;
typedef struct {
    BYTE type;
    BYTE deviceid;
    CARD16 sequenceNumber;
    CARD8 buttons[28];
} deviceButtonStateNotify;
typedef struct {
    BYTE type;
    BYTE deviceid;
    CARD16 sequenceNumber;
    CARD8 request;
    CARD8 firstKeyCode;
    CARD8 count;
    BYTE pad1;
    CARD32 time;
    CARD32 pad00;
    CARD32 pad01;
    CARD32 pad02;
    CARD32 pad03;
    CARD32 pad04;
} deviceMappingNotify;
typedef struct {
    BYTE type;
    BYTE deviceid;
    CARD16 sequenceNumber;
    CARD32 time;
    CARD8 request;
    BYTE pad1;
    BYTE pad2;
    BYTE pad3;
    CARD32 pad00;
    CARD32 pad01;
    CARD32 pad02;
    CARD32 pad03;
    CARD32 pad04;
} changeDeviceNotify;
</SCREEN>
</SECT2>
</SECT1>
<!-- End of text generated from database -->


</CHAPTER>

</PART>
