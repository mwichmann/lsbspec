<!-- Start of generated text - do not edit! -->
<!-- generated from the LSB specification database by mklibspec -->
<SECT1 ID=libX11>
<TITLE>Interfaces for libX11</TITLE>
<PARA>
<XREF LINKEND="lib-libX11-def"> defines the library name and shared object name
for the libX11 library
</PARA>
<TABLE id="lib-libX11-def">
<TITLE>libX11 Definition</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Library:</ENTRY>
<ENTRY>libX11</ENTRY>
</ROW>
<ROW>
<ENTRY>SONAME:</ENTRY>
<ENTRY>libX11.so.6</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The behavior of the interfaces in this library is specified by the following specifications:<SIMPLELIST COLUMNS=1>
<MEMBER ID='REFSTD.libX11.1'>
[LSB] <XREF LINKEND="std.LSB">
</MEMBER>
<MEMBER ID='REFSTD.libX11.2'>
[XKBlib] <XREF LINKEND="std.XKBlib">
</MEMBER>
<MEMBER ID='REFSTD.libX11.3'>
[Xlib] <XREF LINKEND="std.Xlib">
</MEMBER>
</SIMPLELIST>
</PARA>
<!-- debug: database interface name X Windows System Interface -->
<SECT2>
<!--libgroup-->
<TITLE>X Windows System Interface</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for X Windows System Interface</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic functions
for X Windows System Interface specified in <XREF linkend="tbl-libX11-x-win-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<TABLE id="tbl-libX11-x-win-ints">
<TITLE>libX11 - X Windows System Interface Function Interfaces</TITLE>
<TGROUP COLS=4>
<TBODY>
<ROW>
<ENTRY><indexterm><primary>XActivateScreenSaver</primary></indexterm>XActivateScreenSaver <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XAddConnectionWatch</primary></indexterm>XAddConnectionWatch <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XAddExtension</primary></indexterm>XAddExtension <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XAddHost</primary></indexterm>XAddHost <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XAddHosts</primary></indexterm>XAddHosts <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XAddPixel</primary></indexterm>XAddPixel <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XAddToExtensionList</primary></indexterm>XAddToExtensionList <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XAddToSaveSet</primary></indexterm>XAddToSaveSet <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XAllPlanes</primary></indexterm>XAllPlanes <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XAllocClassHint</primary></indexterm>XAllocClassHint <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XAllocColor</primary></indexterm>XAllocColor <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XAllocColorCells</primary></indexterm>XAllocColorCells <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XAllocColorPlanes</primary></indexterm>XAllocColorPlanes <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XAllocIconSize</primary></indexterm>XAllocIconSize <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XAllocNamedColor</primary></indexterm>XAllocNamedColor <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XAllocSizeHints</primary></indexterm>XAllocSizeHints <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XAllocStandardColormap</primary></indexterm>XAllocStandardColormap <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XAllocWMHints</primary></indexterm>XAllocWMHints <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XAllowEvents</primary></indexterm>XAllowEvents <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XAutoRepeatOff</primary></indexterm>XAutoRepeatOff <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XAutoRepeatOn</primary></indexterm>XAutoRepeatOn <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XBaseFontNameListOfFontSet</primary></indexterm>XBaseFontNameListOfFontSet <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XBell</primary></indexterm>XBell <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XBitmapBitOrder</primary></indexterm>XBitmapBitOrder <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XBitmapPad</primary></indexterm>XBitmapPad <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XBitmapUnit</primary></indexterm>XBitmapUnit <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XBlackPixel</primary></indexterm>XBlackPixel <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XBlackPixelOfScreen</primary></indexterm>XBlackPixelOfScreen <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XCellsOfScreen</primary></indexterm>XCellsOfScreen <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XChangeActivePointerGrab</primary></indexterm>XChangeActivePointerGrab <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XChangeGC</primary></indexterm>XChangeGC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XChangeKeyboardControl</primary></indexterm>XChangeKeyboardControl <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XChangeKeyboardMapping</primary></indexterm>XChangeKeyboardMapping <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XChangePointerControl</primary></indexterm>XChangePointerControl <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XChangeProperty</primary></indexterm>XChangeProperty <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XChangeSaveSet</primary></indexterm>XChangeSaveSet <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XChangeWindowAttributes</primary></indexterm>XChangeWindowAttributes <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XCheckIfEvent</primary></indexterm>XCheckIfEvent <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XCheckMaskEvent</primary></indexterm>XCheckMaskEvent <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XCheckTypedEvent</primary></indexterm>XCheckTypedEvent <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XCheckTypedWindowEvent</primary></indexterm>XCheckTypedWindowEvent <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XCheckWindowEvent</primary></indexterm>XCheckWindowEvent <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XCirculateSubwindows</primary></indexterm>XCirculateSubwindows <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XCirculateSubwindowsDown</primary></indexterm>XCirculateSubwindowsDown <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XCirculateSubwindowsUp</primary></indexterm>XCirculateSubwindowsUp <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XClearArea</primary></indexterm>XClearArea <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XClearWindow</primary></indexterm>XClearWindow <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XClipBox</primary></indexterm>XClipBox <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XCloseDisplay</primary></indexterm>XCloseDisplay <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XCloseIM</primary></indexterm>XCloseIM <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XCloseOM</primary></indexterm>XCloseOM <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XConfigureWindow</primary></indexterm>XConfigureWindow <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XConnectionNumber</primary></indexterm>XConnectionNumber <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XContextDependentDrawing</primary></indexterm>XContextDependentDrawing <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XContextualDrawing</primary></indexterm>XContextualDrawing <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XConvertCase</primary></indexterm>XConvertCase <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XConvertSelection</primary></indexterm>XConvertSelection <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XCopyArea</primary></indexterm>XCopyArea <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XCopyColormapAndFree</primary></indexterm>XCopyColormapAndFree <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XCopyGC</primary></indexterm>XCopyGC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XCopyPlane</primary></indexterm>XCopyPlane <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XCreateBitmapFromData</primary></indexterm>XCreateBitmapFromData <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XCreateColormap</primary></indexterm>XCreateColormap <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XCreateFontCursor</primary></indexterm>XCreateFontCursor <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XCreateFontSet</primary></indexterm>XCreateFontSet <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XCreateGC</primary></indexterm>XCreateGC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XCreateGlyphCursor</primary></indexterm>XCreateGlyphCursor <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XCreateIC</primary></indexterm>XCreateIC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XCreateImage</primary></indexterm>XCreateImage <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XCreateOC</primary></indexterm>XCreateOC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XCreatePixmap</primary></indexterm>XCreatePixmap <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XCreatePixmapCursor</primary></indexterm>XCreatePixmapCursor <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XCreatePixmapFromBitmapData</primary></indexterm>XCreatePixmapFromBitmapData <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XCreateRegion</primary></indexterm>XCreateRegion <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XCreateSimpleWindow</primary></indexterm>XCreateSimpleWindow <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XCreateWindow</primary></indexterm>XCreateWindow <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XDefaultColormap</primary></indexterm>XDefaultColormap <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDefaultColormapOfScreen</primary></indexterm>XDefaultColormapOfScreen <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDefaultDepth</primary></indexterm>XDefaultDepth <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDefaultDepthOfScreen</primary></indexterm>XDefaultDepthOfScreen <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XDefaultGC</primary></indexterm>XDefaultGC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDefaultGCOfScreen</primary></indexterm>XDefaultGCOfScreen <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDefaultRootWindow</primary></indexterm>XDefaultRootWindow <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDefaultScreen</primary></indexterm>XDefaultScreen <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XDefaultScreenOfDisplay</primary></indexterm>XDefaultScreenOfDisplay <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDefaultString</primary></indexterm>XDefaultString <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDefaultVisual</primary></indexterm>XDefaultVisual <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDefaultVisualOfScreen</primary></indexterm>XDefaultVisualOfScreen <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XDefineCursor</primary></indexterm>XDefineCursor <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDeleteContext</primary></indexterm>XDeleteContext <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDeleteModifiermapEntry</primary></indexterm>XDeleteModifiermapEntry <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDeleteProperty</primary></indexterm>XDeleteProperty <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XDestroyIC</primary></indexterm>XDestroyIC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDestroyImage</primary></indexterm>XDestroyImage <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDestroyOC</primary></indexterm>XDestroyOC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDestroyRegion</primary></indexterm>XDestroyRegion <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XDestroySubwindows</primary></indexterm>XDestroySubwindows <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDestroyWindow</primary></indexterm>XDestroyWindow <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDirectionalDependentDrawing</primary></indexterm>XDirectionalDependentDrawing <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDisableAccessControl</primary></indexterm>XDisableAccessControl <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XDisplayCells</primary></indexterm>XDisplayCells <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDisplayHeight</primary></indexterm>XDisplayHeight <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDisplayHeightMM</primary></indexterm>XDisplayHeightMM <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDisplayKeycodes</primary></indexterm>XDisplayKeycodes <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XDisplayMotionBufferSize</primary></indexterm>XDisplayMotionBufferSize <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDisplayName</primary></indexterm>XDisplayName <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDisplayOfIM</primary></indexterm>XDisplayOfIM <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDisplayOfOM</primary></indexterm>XDisplayOfOM <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XDisplayOfScreen</primary></indexterm>XDisplayOfScreen <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDisplayPlanes</primary></indexterm>XDisplayPlanes <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDisplayString</primary></indexterm>XDisplayString <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDisplayWidth</primary></indexterm>XDisplayWidth <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XDisplayWidthMM</primary></indexterm>XDisplayWidthMM <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDoesBackingStore</primary></indexterm>XDoesBackingStore <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDoesSaveUnders</primary></indexterm>XDoesSaveUnders <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDrawArc</primary></indexterm>XDrawArc <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XDrawArcs</primary></indexterm>XDrawArcs <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDrawImageString</primary></indexterm>XDrawImageString <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDrawImageString16</primary></indexterm>XDrawImageString16 <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDrawLine</primary></indexterm>XDrawLine <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XDrawLines</primary></indexterm>XDrawLines <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDrawPoint</primary></indexterm>XDrawPoint <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDrawPoints</primary></indexterm>XDrawPoints <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDrawRectangle</primary></indexterm>XDrawRectangle <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XDrawRectangles</primary></indexterm>XDrawRectangles <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDrawSegments</primary></indexterm>XDrawSegments <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDrawString</primary></indexterm>XDrawString <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDrawString16</primary></indexterm>XDrawString16 <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XDrawText</primary></indexterm>XDrawText <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XDrawText16</primary></indexterm>XDrawText16 <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XEHeadOfExtensionList</primary></indexterm>XEHeadOfExtensionList <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XESetBeforeFlush</primary></indexterm>XESetBeforeFlush <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XESetCloseDisplay</primary></indexterm>XESetCloseDisplay <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XESetCopyGC</primary></indexterm>XESetCopyGC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XESetCreateFont</primary></indexterm>XESetCreateFont <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XESetCreateGC</primary></indexterm>XESetCreateGC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XESetError</primary></indexterm>XESetError <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XESetErrorString</primary></indexterm>XESetErrorString <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XESetEventToWire</primary></indexterm>XESetEventToWire <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XESetFlushGC</primary></indexterm>XESetFlushGC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XESetFreeFont</primary></indexterm>XESetFreeFont <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XESetFreeGC</primary></indexterm>XESetFreeGC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XESetPrintErrorValues</primary></indexterm>XESetPrintErrorValues <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XESetWireToError</primary></indexterm>XESetWireToError <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XESetWireToEvent</primary></indexterm>XESetWireToEvent <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XEmptyRegion</primary></indexterm>XEmptyRegion <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XEnableAccessControl</primary></indexterm>XEnableAccessControl <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XEqualRegion</primary></indexterm>XEqualRegion <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XEventMaskOfScreen</primary></indexterm>XEventMaskOfScreen <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XEventsQueued</primary></indexterm>XEventsQueued <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XExtendedMaxRequestSize</primary></indexterm>XExtendedMaxRequestSize <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XExtentsOfFontSet</primary></indexterm>XExtentsOfFontSet <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XFetchBuffer</primary></indexterm>XFetchBuffer <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XFetchBytes</primary></indexterm>XFetchBytes <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XFetchName</primary></indexterm>XFetchName <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XFillArc</primary></indexterm>XFillArc <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XFillArcs</primary></indexterm>XFillArcs <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XFillPolygon</primary></indexterm>XFillPolygon <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XFillRectangle</primary></indexterm>XFillRectangle <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XFillRectangles</primary></indexterm>XFillRectangles <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XFilterEvent</primary></indexterm>XFilterEvent <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XFindContext</primary></indexterm>XFindContext <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XFindOnExtensionList</primary></indexterm>XFindOnExtensionList <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XFlush</primary></indexterm>XFlush <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XFlushGC</primary></indexterm>XFlushGC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XFontsOfFontSet</primary></indexterm>XFontsOfFontSet <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XForceScreenSaver</primary></indexterm>XForceScreenSaver <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XFree</primary></indexterm>XFree <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XFreeColormap</primary></indexterm>XFreeColormap <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XFreeColors</primary></indexterm>XFreeColors <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XFreeCursor</primary></indexterm>XFreeCursor <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XFreeExtensionList</primary></indexterm>XFreeExtensionList <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XFreeFont</primary></indexterm>XFreeFont <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XFreeFontInfo</primary></indexterm>XFreeFontInfo <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XFreeFontNames</primary></indexterm>XFreeFontNames <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XFreeFontPath</primary></indexterm>XFreeFontPath <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XFreeFontSet</primary></indexterm>XFreeFontSet <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XFreeGC</primary></indexterm>XFreeGC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XFreeModifiermap</primary></indexterm>XFreeModifiermap <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XFreePixmap</primary></indexterm>XFreePixmap <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XFreeStringList</primary></indexterm>XFreeStringList <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGContextFromGC</primary></indexterm>XGContextFromGC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGeometry</primary></indexterm>XGeometry <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetAtomName</primary></indexterm>XGetAtomName <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XGetAtomNames</primary></indexterm>XGetAtomNames <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetClassHint</primary></indexterm>XGetClassHint <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetCommand</primary></indexterm>XGetCommand <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetDefault</primary></indexterm>XGetDefault <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XGetErrorDatabaseText</primary></indexterm>XGetErrorDatabaseText <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetErrorText</primary></indexterm>XGetErrorText <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetFontPath</primary></indexterm>XGetFontPath <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetFontProperty</primary></indexterm>XGetFontProperty <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XGetGCValues</primary></indexterm>XGetGCValues <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetGeometry</primary></indexterm>XGetGeometry <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetICValues</primary></indexterm>XGetICValues <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetIMValues</primary></indexterm>XGetIMValues <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XGetIconName</primary></indexterm>XGetIconName <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetIconSizes</primary></indexterm>XGetIconSizes <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetImage</primary></indexterm>XGetImage <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetInputFocus</primary></indexterm>XGetInputFocus <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XGetKeyboardControl</primary></indexterm>XGetKeyboardControl <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetKeyboardMapping</primary></indexterm>XGetKeyboardMapping <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetModifierMapping</primary></indexterm>XGetModifierMapping <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetMotionEvents</primary></indexterm>XGetMotionEvents <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XGetNormalHints</primary></indexterm>XGetNormalHints <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetOCValues</primary></indexterm>XGetOCValues <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetOMValues</primary></indexterm>XGetOMValues <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetPixel</primary></indexterm>XGetPixel <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XGetPointerControl</primary></indexterm>XGetPointerControl <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetPointerMapping</primary></indexterm>XGetPointerMapping <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetRGBColormaps</primary></indexterm>XGetRGBColormaps <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetScreenSaver</primary></indexterm>XGetScreenSaver <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XGetSelectionOwner</primary></indexterm>XGetSelectionOwner <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetSizeHints</primary></indexterm>XGetSizeHints <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetStandardColormap</primary></indexterm>XGetStandardColormap <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetSubImage</primary></indexterm>XGetSubImage <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XGetTextProperty</primary></indexterm>XGetTextProperty <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetTransientForHint</primary></indexterm>XGetTransientForHint <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetVisualInfo</primary></indexterm>XGetVisualInfo <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetWMClientMachine</primary></indexterm>XGetWMClientMachine <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XGetWMColormapWindows</primary></indexterm>XGetWMColormapWindows <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetWMHints</primary></indexterm>XGetWMHints <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetWMIconName</primary></indexterm>XGetWMIconName <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetWMName</primary></indexterm>XGetWMName <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XGetWMNormalHints</primary></indexterm>XGetWMNormalHints <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetWMProtocols</primary></indexterm>XGetWMProtocols <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetWMSizeHints</primary></indexterm>XGetWMSizeHints <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetWindowAttributes</primary></indexterm>XGetWindowAttributes <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XGetWindowProperty</primary></indexterm>XGetWindowProperty <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGetZoomHints</primary></indexterm>XGetZoomHints <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGrabButton</primary></indexterm>XGrabButton <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGrabKey</primary></indexterm>XGrabKey <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XGrabKeyboard</primary></indexterm>XGrabKeyboard <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGrabPointer</primary></indexterm>XGrabPointer <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XGrabServer</primary></indexterm>XGrabServer <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XHeightMMOfScreen</primary></indexterm>XHeightMMOfScreen <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XHeightOfScreen</primary></indexterm>XHeightOfScreen <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XIMOfIC</primary></indexterm>XIMOfIC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XIconifyWindow</primary></indexterm>XIconifyWindow <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XIfEvent</primary></indexterm>XIfEvent <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XImageByteOrder</primary></indexterm>XImageByteOrder <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XInitExtension</primary></indexterm>XInitExtension <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XInitImage</primary></indexterm>XInitImage <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XInitThreads</primary></indexterm>XInitThreads <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XInsertModifiermapEntry</primary></indexterm>XInsertModifiermapEntry <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XInstallColormap</primary></indexterm>XInstallColormap <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XInternAtom</primary></indexterm>XInternAtom <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XInternAtoms</primary></indexterm>XInternAtoms <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XInternalConnectionNumbers</primary></indexterm>XInternalConnectionNumbers <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XIntersectRegion</primary></indexterm>XIntersectRegion <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XKeycodeToKeysym</primary></indexterm>XKeycodeToKeysym <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XKeysymToKeycode</primary></indexterm>XKeysymToKeycode <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XKeysymToString</primary></indexterm>XKeysymToString <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XKillClient</primary></indexterm>XKillClient <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XLastKnownRequestProcessed</primary></indexterm>XLastKnownRequestProcessed <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XListDepths</primary></indexterm>XListDepths <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XListExtensions</primary></indexterm>XListExtensions <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XListFonts</primary></indexterm>XListFonts <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XListFontsWithInfo</primary></indexterm>XListFontsWithInfo <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XListHosts</primary></indexterm>XListHosts <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XListInstalledColormaps</primary></indexterm>XListInstalledColormaps <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XListPixmapFormats</primary></indexterm>XListPixmapFormats <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XListProperties</primary></indexterm>XListProperties <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XLoadFont</primary></indexterm>XLoadFont <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XLoadQueryFont</primary></indexterm>XLoadQueryFont <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XLocaleOfFontSet</primary></indexterm>XLocaleOfFontSet <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XLocaleOfIM</primary></indexterm>XLocaleOfIM <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XLocaleOfOM</primary></indexterm>XLocaleOfOM <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XLockDisplay</primary></indexterm>XLockDisplay <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XLookupColor</primary></indexterm>XLookupColor <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XLookupKeysym</primary></indexterm>XLookupKeysym <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XLookupString</primary></indexterm>XLookupString <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XLowerWindow</primary></indexterm>XLowerWindow <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XMapRaised</primary></indexterm>XMapRaised <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XMapSubwindows</primary></indexterm>XMapSubwindows <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XMapWindow</primary></indexterm>XMapWindow <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XMaskEvent</primary></indexterm>XMaskEvent <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XMatchVisualInfo</primary></indexterm>XMatchVisualInfo <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XMaxCmapsOfScreen</primary></indexterm>XMaxCmapsOfScreen <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XMaxRequestSize</primary></indexterm>XMaxRequestSize <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XMinCmapsOfScreen</primary></indexterm>XMinCmapsOfScreen <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XMoveResizeWindow</primary></indexterm>XMoveResizeWindow <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XMoveWindow</primary></indexterm>XMoveWindow <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XNewModifiermap</primary></indexterm>XNewModifiermap <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XNextEvent</primary></indexterm>XNextEvent <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XNextRequest</primary></indexterm>XNextRequest <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XNoOp</primary></indexterm>XNoOp <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XOMOfOC</primary></indexterm>XOMOfOC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XOffsetRegion</primary></indexterm>XOffsetRegion <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XOpenDisplay</primary></indexterm>XOpenDisplay <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XOpenIM</primary></indexterm>XOpenIM <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XOpenOM</primary></indexterm>XOpenOM <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XParseColor</primary></indexterm>XParseColor <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XParseGeometry</primary></indexterm>XParseGeometry <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XPeekEvent</primary></indexterm>XPeekEvent <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XPeekIfEvent</primary></indexterm>XPeekIfEvent <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XPending</primary></indexterm>XPending <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XPlanesOfScreen</primary></indexterm>XPlanesOfScreen <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XPointInRegion</primary></indexterm>XPointInRegion <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XPolygonRegion</primary></indexterm>XPolygonRegion <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XProcessInternalConnection</primary></indexterm>XProcessInternalConnection <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XProtocolRevision</primary></indexterm>XProtocolRevision <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XProtocolVersion</primary></indexterm>XProtocolVersion <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XPutBackEvent</primary></indexterm>XPutBackEvent <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XPutImage</primary></indexterm>XPutImage <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XPutPixel</primary></indexterm>XPutPixel <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XQLength</primary></indexterm>XQLength <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XQueryBestCursor</primary></indexterm>XQueryBestCursor <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XQueryBestSize</primary></indexterm>XQueryBestSize <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XQueryBestStipple</primary></indexterm>XQueryBestStipple <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XQueryBestTile</primary></indexterm>XQueryBestTile <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XQueryColor</primary></indexterm>XQueryColor <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XQueryColors</primary></indexterm>XQueryColors <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XQueryExtension</primary></indexterm>XQueryExtension <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XQueryFont</primary></indexterm>XQueryFont <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XQueryKeymap</primary></indexterm>XQueryKeymap <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XQueryPointer</primary></indexterm>XQueryPointer <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XQueryTextExtents</primary></indexterm>XQueryTextExtents <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XQueryTextExtents16</primary></indexterm>XQueryTextExtents16 <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XQueryTree</primary></indexterm>XQueryTree <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XRaiseWindow</primary></indexterm>XRaiseWindow <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XReadBitmapFile</primary></indexterm>XReadBitmapFile <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XReadBitmapFileData</primary></indexterm>XReadBitmapFileData <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XRebindKeysym</primary></indexterm>XRebindKeysym <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XRecolorCursor</primary></indexterm>XRecolorCursor <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XReconfigureWMWindow</primary></indexterm>XReconfigureWMWindow <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XRectInRegion</primary></indexterm>XRectInRegion <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XRefreshKeyboardMapping</primary></indexterm>XRefreshKeyboardMapping <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XRegisterIMInstantiateCallback</primary></indexterm>XRegisterIMInstantiateCallback <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XRemoveConnectionWatch</primary></indexterm>XRemoveConnectionWatch <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XRemoveFromSaveSet</primary></indexterm>XRemoveFromSaveSet <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XRemoveHost</primary></indexterm>XRemoveHost <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XRemoveHosts</primary></indexterm>XRemoveHosts <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XReparentWindow</primary></indexterm>XReparentWindow <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XResetScreenSaver</primary></indexterm>XResetScreenSaver <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XResizeWindow</primary></indexterm>XResizeWindow <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XResourceManagerString</primary></indexterm>XResourceManagerString <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XRestackWindows</primary></indexterm>XRestackWindows <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XRootWindow</primary></indexterm>XRootWindow <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XRootWindowOfScreen</primary></indexterm>XRootWindowOfScreen <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XRotateBuffers</primary></indexterm>XRotateBuffers <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XRotateWindowProperties</primary></indexterm>XRotateWindowProperties <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSaveContext</primary></indexterm>XSaveContext <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XScreenCount</primary></indexterm>XScreenCount <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XScreenNumberOfScreen</primary></indexterm>XScreenNumberOfScreen <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XScreenOfDisplay</primary></indexterm>XScreenOfDisplay <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XScreenResourceString</primary></indexterm>XScreenResourceString <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSelectInput</primary></indexterm>XSelectInput <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XSendEvent</primary></indexterm>XSendEvent <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XServerVendor</primary></indexterm>XServerVendor <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetAccessControl</primary></indexterm>XSetAccessControl <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetAfterFunction</primary></indexterm>XSetAfterFunction <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XSetArcMode</primary></indexterm>XSetArcMode <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetAuthorization</primary></indexterm>XSetAuthorization <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetBackground</primary></indexterm>XSetBackground <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetClassHint</primary></indexterm>XSetClassHint <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XSetClipMask</primary></indexterm>XSetClipMask <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetClipOrigin</primary></indexterm>XSetClipOrigin <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetClipRectangles</primary></indexterm>XSetClipRectangles <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetCloseDownMode</primary></indexterm>XSetCloseDownMode <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XSetCommand</primary></indexterm>XSetCommand <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetDashes</primary></indexterm>XSetDashes <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetErrorHandler</primary></indexterm>XSetErrorHandler <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetFillRule</primary></indexterm>XSetFillRule <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XSetFillStyle</primary></indexterm>XSetFillStyle <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetFont</primary></indexterm>XSetFont <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetFontPath</primary></indexterm>XSetFontPath <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetForeground</primary></indexterm>XSetForeground <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XSetFunction</primary></indexterm>XSetFunction <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetGraphicsExposures</primary></indexterm>XSetGraphicsExposures <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetICFocus</primary></indexterm>XSetICFocus <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetICValues</primary></indexterm>XSetICValues <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XSetIMValues</primary></indexterm>XSetIMValues <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetIOErrorHandler</primary></indexterm>XSetIOErrorHandler <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetIconName</primary></indexterm>XSetIconName <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetIconSizes</primary></indexterm>XSetIconSizes <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XSetInputFocus</primary></indexterm>XSetInputFocus <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetLineAttributes</primary></indexterm>XSetLineAttributes <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetLocaleModifiers</primary></indexterm>XSetLocaleModifiers <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetModifierMapping</primary></indexterm>XSetModifierMapping <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XSetNormalHints</primary></indexterm>XSetNormalHints <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetOCValues</primary></indexterm>XSetOCValues <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetOMValues</primary></indexterm>XSetOMValues <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetPlaneMask</primary></indexterm>XSetPlaneMask <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XSetPointerMapping</primary></indexterm>XSetPointerMapping <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetRGBColormaps</primary></indexterm>XSetRGBColormaps <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetRegion</primary></indexterm>XSetRegion <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetScreenSaver</primary></indexterm>XSetScreenSaver <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XSetSelectionOwner</primary></indexterm>XSetSelectionOwner <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetSizeHints</primary></indexterm>XSetSizeHints <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetStandardColormap</primary></indexterm>XSetStandardColormap <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetStandardProperties</primary></indexterm>XSetStandardProperties <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XSetState</primary></indexterm>XSetState <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetStipple</primary></indexterm>XSetStipple <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetSubwindowMode</primary></indexterm>XSetSubwindowMode <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetTSOrigin</primary></indexterm>XSetTSOrigin <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XSetTextProperty</primary></indexterm>XSetTextProperty <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetTile</primary></indexterm>XSetTile <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetTransientForHint</primary></indexterm>XSetTransientForHint <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetWMClientMachine</primary></indexterm>XSetWMClientMachine <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XSetWMColormapWindows</primary></indexterm>XSetWMColormapWindows <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetWMHints</primary></indexterm>XSetWMHints <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetWMIconName</primary></indexterm>XSetWMIconName <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetWMName</primary></indexterm>XSetWMName <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XSetWMNormalHints</primary></indexterm>XSetWMNormalHints <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetWMProperties</primary></indexterm>XSetWMProperties <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetWMProtocols</primary></indexterm>XSetWMProtocols <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetWMSizeHints</primary></indexterm>XSetWMSizeHints <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XSetWindowBackground</primary></indexterm>XSetWindowBackground <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetWindowBackgroundPixmap</primary></indexterm>XSetWindowBackgroundPixmap <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetWindowBorder</primary></indexterm>XSetWindowBorder <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetWindowBorderPixmap</primary></indexterm>XSetWindowBorderPixmap <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XSetWindowBorderWidth</primary></indexterm>XSetWindowBorderWidth <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetWindowColormap</primary></indexterm>XSetWindowColormap <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSetZoomHints</primary></indexterm>XSetZoomHints <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XShrinkRegion</primary></indexterm>XShrinkRegion <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XStoreBuffer</primary></indexterm>XStoreBuffer <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XStoreBytes</primary></indexterm>XStoreBytes <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XStoreColor</primary></indexterm>XStoreColor <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XStoreColors</primary></indexterm>XStoreColors <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XStoreName</primary></indexterm>XStoreName <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XStoreNamedColor</primary></indexterm>XStoreNamedColor <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XStringListToTextProperty</primary></indexterm>XStringListToTextProperty <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XStringToKeysym</primary></indexterm>XStringToKeysym <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XSubImage</primary></indexterm>XSubImage <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSubtractRegion</primary></indexterm>XSubtractRegion <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSupportsLocale</primary></indexterm>XSupportsLocale <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSync</primary></indexterm>XSync <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XSynchronize</primary></indexterm>XSynchronize <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XTextExtents</primary></indexterm>XTextExtents <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XTextExtents16</primary></indexterm>XTextExtents16 <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XTextPropertyToStringList</primary></indexterm>XTextPropertyToStringList <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XTextWidth</primary></indexterm>XTextWidth <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XTextWidth16</primary></indexterm>XTextWidth16 <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XTranslateCoordinates</primary></indexterm>XTranslateCoordinates <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XUndefineCursor</primary></indexterm>XUndefineCursor <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XUngrabButton</primary></indexterm>XUngrabButton <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XUngrabKey</primary></indexterm>XUngrabKey <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XUngrabKeyboard</primary></indexterm>XUngrabKeyboard <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XUngrabPointer</primary></indexterm>XUngrabPointer <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XUngrabServer</primary></indexterm>XUngrabServer <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XUninstallColormap</primary></indexterm>XUninstallColormap <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XUnionRectWithRegion</primary></indexterm>XUnionRectWithRegion <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XUnionRegion</primary></indexterm>XUnionRegion <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XUnloadFont</primary></indexterm>XUnloadFont <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XUnlockDisplay</primary></indexterm>XUnlockDisplay <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XUnmapSubwindows</primary></indexterm>XUnmapSubwindows <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XUnmapWindow</primary></indexterm>XUnmapWindow <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XUnregisterIMInstantiateCallback</primary></indexterm>XUnregisterIMInstantiateCallback <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XUnsetICFocus</primary></indexterm>XUnsetICFocus <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XVaCreateNestedList</primary></indexterm>XVaCreateNestedList <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XVendorRelease</primary></indexterm>XVendorRelease <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XVisualIDFromVisual</primary></indexterm>XVisualIDFromVisual <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XWMGeometry</primary></indexterm>XWMGeometry <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XWarpPointer</primary></indexterm>XWarpPointer <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XWhitePixel</primary></indexterm>XWhitePixel <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XWhitePixelOfScreen</primary></indexterm>XWhitePixelOfScreen <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XWidthMMOfScreen</primary></indexterm>XWidthMMOfScreen <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XWidthOfScreen</primary></indexterm>XWidthOfScreen <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XWindowEvent</primary></indexterm>XWindowEvent <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XWithdrawWindow</primary></indexterm>XWithdrawWindow <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XWriteBitmapFile</primary></indexterm>XWriteBitmapFile <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XXorRegion</primary></indexterm>XXorRegion <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XauDisposeAuth</primary></indexterm>XauDisposeAuth <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XauFileName</primary></indexterm>XauFileName <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XauGetBestAuthByAddr</primary></indexterm>XauGetBestAuthByAddr <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XauReadAuth</primary></indexterm>XauReadAuth <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsAddColorSpace</primary></indexterm>XcmsAddColorSpace <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XcmsAddFunctionSet</primary></indexterm>XcmsAddFunctionSet <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsAllocColor</primary></indexterm>XcmsAllocColor <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsAllocNamedColor</primary></indexterm>XcmsAllocNamedColor <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsCCCOfColormap</primary></indexterm>XcmsCCCOfColormap <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XcmsCIELabClipL</primary></indexterm>XcmsCIELabClipL <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsCIELabClipLab</primary></indexterm>XcmsCIELabClipLab <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsCIELabClipab</primary></indexterm>XcmsCIELabClipab <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsCIELabQueryMaxC</primary></indexterm>XcmsCIELabQueryMaxC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XcmsCIELabQueryMaxL</primary></indexterm>XcmsCIELabQueryMaxL <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsCIELabQueryMaxLC</primary></indexterm>XcmsCIELabQueryMaxLC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsCIELabQueryMinL</primary></indexterm>XcmsCIELabQueryMinL <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsCIELabToCIEXYZ</primary></indexterm>XcmsCIELabToCIEXYZ <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XcmsCIELabWhiteShiftColors</primary></indexterm>XcmsCIELabWhiteShiftColors <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsCIELuvClipL</primary></indexterm>XcmsCIELuvClipL <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsCIELuvClipLuv</primary></indexterm>XcmsCIELuvClipLuv <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsCIELuvClipuv</primary></indexterm>XcmsCIELuvClipuv <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XcmsCIELuvQueryMaxC</primary></indexterm>XcmsCIELuvQueryMaxC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsCIELuvQueryMaxL</primary></indexterm>XcmsCIELuvQueryMaxL <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsCIELuvQueryMaxLC</primary></indexterm>XcmsCIELuvQueryMaxLC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsCIELuvQueryMinL</primary></indexterm>XcmsCIELuvQueryMinL <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XcmsCIELuvToCIEuvY</primary></indexterm>XcmsCIELuvToCIEuvY <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsCIELuvWhiteShiftColors</primary></indexterm>XcmsCIELuvWhiteShiftColors <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsCIEXYZToCIELab</primary></indexterm>XcmsCIEXYZToCIELab <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsCIEXYZToCIEuvY</primary></indexterm>XcmsCIEXYZToCIEuvY <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XcmsCIEXYZToCIExyY</primary></indexterm>XcmsCIEXYZToCIExyY <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsCIEXYZToRGBi</primary></indexterm>XcmsCIEXYZToRGBi <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsCIEuvYToCIELuv</primary></indexterm>XcmsCIEuvYToCIELuv <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsCIEuvYToCIEXYZ</primary></indexterm>XcmsCIEuvYToCIEXYZ <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XcmsCIEuvYToTekHVC</primary></indexterm>XcmsCIEuvYToTekHVC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsCIExyYToCIEXYZ</primary></indexterm>XcmsCIExyYToCIEXYZ <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsClientWhitePointOfCCC</primary></indexterm>XcmsClientWhitePointOfCCC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsConvertColors</primary></indexterm>XcmsConvertColors <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XcmsCreateCCC</primary></indexterm>XcmsCreateCCC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsDefaultCCC</primary></indexterm>XcmsDefaultCCC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsDisplayOfCCC</primary></indexterm>XcmsDisplayOfCCC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsFormatOfPrefix</primary></indexterm>XcmsFormatOfPrefix <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XcmsFreeCCC</primary></indexterm>XcmsFreeCCC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsLookupColor</primary></indexterm>XcmsLookupColor <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsPrefixOfFormat</primary></indexterm>XcmsPrefixOfFormat <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsQueryBlack</primary></indexterm>XcmsQueryBlack <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XcmsQueryBlue</primary></indexterm>XcmsQueryBlue <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsQueryColor</primary></indexterm>XcmsQueryColor <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsQueryColors</primary></indexterm>XcmsQueryColors <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsQueryGreen</primary></indexterm>XcmsQueryGreen <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XcmsQueryRed</primary></indexterm>XcmsQueryRed <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsQueryWhite</primary></indexterm>XcmsQueryWhite <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsRGBToRGBi</primary></indexterm>XcmsRGBToRGBi <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsRGBiToCIEXYZ</primary></indexterm>XcmsRGBiToCIEXYZ <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XcmsRGBiToRGB</primary></indexterm>XcmsRGBiToRGB <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsScreenNumberOfCCC</primary></indexterm>XcmsScreenNumberOfCCC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsScreenWhitePointOfCCC</primary></indexterm>XcmsScreenWhitePointOfCCC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsSetCCCOfColormap</primary></indexterm>XcmsSetCCCOfColormap <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XcmsSetCompressionProc</primary></indexterm>XcmsSetCompressionProc <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsSetWhiteAdjustProc</primary></indexterm>XcmsSetWhiteAdjustProc <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsSetWhitePoint</primary></indexterm>XcmsSetWhitePoint <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsStoreColor</primary></indexterm>XcmsStoreColor <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XcmsStoreColors</primary></indexterm>XcmsStoreColors <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsTekHVCClipC</primary></indexterm>XcmsTekHVCClipC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsTekHVCClipV</primary></indexterm>XcmsTekHVCClipV <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsTekHVCClipVC</primary></indexterm>XcmsTekHVCClipVC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XcmsTekHVCQueryMaxC</primary></indexterm>XcmsTekHVCQueryMaxC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsTekHVCQueryMaxV</primary></indexterm>XcmsTekHVCQueryMaxV <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsTekHVCQueryMaxVC</primary></indexterm>XcmsTekHVCQueryMaxVC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsTekHVCQueryMaxVSamples</primary></indexterm>XcmsTekHVCQueryMaxVSamples <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XcmsTekHVCQueryMinV</primary></indexterm>XcmsTekHVCQueryMinV <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsTekHVCToCIEuvY</primary></indexterm>XcmsTekHVCToCIEuvY <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsTekHVCWhiteShiftColors</primary></indexterm>XcmsTekHVCWhiteShiftColors <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XcmsVisualOfCCC</primary></indexterm>XcmsVisualOfCCC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XkbAllocClientMap</primary></indexterm>XkbAllocClientMap <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbAllocCompatMap</primary></indexterm>XkbAllocCompatMap <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbAllocControls</primary></indexterm>XkbAllocControls <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbAllocGeomColors</primary></indexterm>XkbAllocGeomColors <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XkbAllocGeomDoodads</primary></indexterm>XkbAllocGeomDoodads <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbAllocGeomKeyAliases</primary></indexterm>XkbAllocGeomKeyAliases <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbAllocGeomKeys</primary></indexterm>XkbAllocGeomKeys <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbAllocGeomOutlines</primary></indexterm>XkbAllocGeomOutlines <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XkbAllocGeomOverlayKeys</primary></indexterm>XkbAllocGeomOverlayKeys <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbAllocGeomOverlayRows</primary></indexterm>XkbAllocGeomOverlayRows <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbAllocGeomOverlays</primary></indexterm>XkbAllocGeomOverlays <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbAllocGeomPoints</primary></indexterm>XkbAllocGeomPoints <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XkbAllocGeomProps</primary></indexterm>XkbAllocGeomProps <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbAllocGeomRows</primary></indexterm>XkbAllocGeomRows <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbAllocGeomSectionDoodads</primary></indexterm>XkbAllocGeomSectionDoodads <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbAllocGeomSections</primary></indexterm>XkbAllocGeomSections <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XkbAllocGeomShapes</primary></indexterm>XkbAllocGeomShapes <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbAllocGeometry</primary></indexterm>XkbAllocGeometry <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbAllocIndicatorMaps</primary></indexterm>XkbAllocIndicatorMaps <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbAllocKeyboard</primary></indexterm>XkbAllocKeyboard <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XkbAllocNames</primary></indexterm>XkbAllocNames <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbAllocServerMap</primary></indexterm>XkbAllocServerMap <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbApplyCompatMapToKey</primary></indexterm>XkbApplyCompatMapToKey <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbBell</primary></indexterm>XkbBell <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XkbBellEvent</primary></indexterm>XkbBellEvent <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbChangeEnabledControls</primary></indexterm>XkbChangeEnabledControls <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbChangeMap</primary></indexterm>XkbChangeMap <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbChangeNames</primary></indexterm>XkbChangeNames <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XkbChangeTypesOfKey</primary></indexterm>XkbChangeTypesOfKey <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbComputeEffectiveMap</primary></indexterm>XkbComputeEffectiveMap <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbComputeRowBounds</primary></indexterm>XkbComputeRowBounds <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbComputeSectionBounds</primary></indexterm>XkbComputeSectionBounds <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XkbComputeShapeBounds</primary></indexterm>XkbComputeShapeBounds <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbComputeShapeTop</primary></indexterm>XkbComputeShapeTop <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbCopyKeyType</primary></indexterm>XkbCopyKeyType <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbCopyKeyTypes</primary></indexterm>XkbCopyKeyTypes <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XkbFindOverlayForKey</primary></indexterm>XkbFindOverlayForKey <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbForceBell</primary></indexterm>XkbForceBell <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbFreeClientMap</primary></indexterm>XkbFreeClientMap <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbFreeCompatMap</primary></indexterm>XkbFreeCompatMap <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XkbFreeComponentList</primary></indexterm>XkbFreeComponentList <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbFreeControls</primary></indexterm>XkbFreeControls <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbFreeGeomColors</primary></indexterm>XkbFreeGeomColors <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbFreeGeomDoodads</primary></indexterm>XkbFreeGeomDoodads <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XkbFreeGeomKeyAliases</primary></indexterm>XkbFreeGeomKeyAliases <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbFreeGeomKeys</primary></indexterm>XkbFreeGeomKeys <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbFreeGeomOutlines</primary></indexterm>XkbFreeGeomOutlines <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbFreeGeomOverlayKeys</primary></indexterm>XkbFreeGeomOverlayKeys <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XkbFreeGeomOverlayRows</primary></indexterm>XkbFreeGeomOverlayRows <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbFreeGeomOverlays</primary></indexterm>XkbFreeGeomOverlays <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbFreeGeomPoints</primary></indexterm>XkbFreeGeomPoints <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbFreeGeomProperties</primary></indexterm>XkbFreeGeomProperties <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XkbFreeGeomRows</primary></indexterm>XkbFreeGeomRows <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbFreeGeomSections</primary></indexterm>XkbFreeGeomSections <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbFreeGeomShapes</primary></indexterm>XkbFreeGeomShapes <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbFreeGeometry</primary></indexterm>XkbFreeGeometry <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XkbFreeIndicatorMaps</primary></indexterm>XkbFreeIndicatorMaps <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbFreeKeyboard</primary></indexterm>XkbFreeKeyboard <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbFreeNames</primary></indexterm>XkbFreeNames <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbFreeServerMap</primary></indexterm>XkbFreeServerMap <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XkbGetAutoRepeatRate</primary></indexterm>XkbGetAutoRepeatRate <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbGetCompatMap</primary></indexterm>XkbGetCompatMap <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbGetControls</primary></indexterm>XkbGetControls <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbGetGeometry</primary></indexterm>XkbGetGeometry <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XkbGetIndicatorMap</primary></indexterm>XkbGetIndicatorMap <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbGetIndicatorState</primary></indexterm>XkbGetIndicatorState <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbGetKeyActions</primary></indexterm>XkbGetKeyActions <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbGetKeyBehaviors</primary></indexterm>XkbGetKeyBehaviors <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XkbGetKeyExplicitComponents</primary></indexterm>XkbGetKeyExplicitComponents <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbGetKeyModifierMap</primary></indexterm>XkbGetKeyModifierMap <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbGetKeySyms</primary></indexterm>XkbGetKeySyms <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbGetKeyTypes</primary></indexterm>XkbGetKeyTypes <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XkbGetKeyboard</primary></indexterm>XkbGetKeyboard <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbGetKeyboardByName</primary></indexterm>XkbGetKeyboardByName <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbGetMap</primary></indexterm>XkbGetMap <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbGetMapChanges</primary></indexterm>XkbGetMapChanges <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XkbGetNamedGeometry</primary></indexterm>XkbGetNamedGeometry <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbGetNamedIndicator</primary></indexterm>XkbGetNamedIndicator <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbGetNames</primary></indexterm>XkbGetNames <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbGetPerClientControls</primary></indexterm>XkbGetPerClientControls <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XkbGetState</primary></indexterm>XkbGetState <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbGetUpdatedMap</primary></indexterm>XkbGetUpdatedMap <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbGetVirtualMods</primary></indexterm>XkbGetVirtualMods <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbGetXlibControls</primary></indexterm>XkbGetXlibControls <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XkbIgnoreExtension</primary></indexterm>XkbIgnoreExtension <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbInitCanonicalKeyTypes</primary></indexterm>XkbInitCanonicalKeyTypes <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbKeyTypesForCoreSymbols</primary></indexterm>XkbKeyTypesForCoreSymbols <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbKeycodeToKeysym</primary></indexterm>XkbKeycodeToKeysym <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XkbKeysymToModifiers</primary></indexterm>XkbKeysymToModifiers <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbLatchGroup</primary></indexterm>XkbLatchGroup <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbLatchModifiers</primary></indexterm>XkbLatchModifiers <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbLibraryVersion</primary></indexterm>XkbLibraryVersion <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XkbListComponents</primary></indexterm>XkbListComponents <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbLockGroup</primary></indexterm>XkbLockGroup <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbLockModifiers</primary></indexterm>XkbLockModifiers <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbLookupKeyBinding</primary></indexterm>XkbLookupKeyBinding <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XkbLookupKeySym</primary></indexterm>XkbLookupKeySym <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbNoteControlsChanges</primary></indexterm>XkbNoteControlsChanges <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbNoteMapChanges</primary></indexterm>XkbNoteMapChanges <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbNoteNameChanges</primary></indexterm>XkbNoteNameChanges <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XkbOpenDisplay</primary></indexterm>XkbOpenDisplay <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbQueryExtension</primary></indexterm>XkbQueryExtension <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbRefreshKeyboardMapping</primary></indexterm>XkbRefreshKeyboardMapping <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbResizeKeyActions</primary></indexterm>XkbResizeKeyActions <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XkbResizeKeySyms</primary></indexterm>XkbResizeKeySyms <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbResizeKeyType</primary></indexterm>XkbResizeKeyType <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbSelectEventDetails</primary></indexterm>XkbSelectEventDetails <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbSelectEvents</primary></indexterm>XkbSelectEvents <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XkbSetAtomFuncs</primary></indexterm>XkbSetAtomFuncs <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbSetAutoRepeatRate</primary></indexterm>XkbSetAutoRepeatRate <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbSetAutoResetControls</primary></indexterm>XkbSetAutoResetControls <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbSetCompatMap</primary></indexterm>XkbSetCompatMap <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XkbSetControls</primary></indexterm>XkbSetControls <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbSetDebuggingFlags</primary></indexterm>XkbSetDebuggingFlags <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbSetDetectableAutoRepeat</primary></indexterm>XkbSetDetectableAutoRepeat <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbSetGeometry</primary></indexterm>XkbSetGeometry <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XkbSetIgnoreLockMods</primary></indexterm>XkbSetIgnoreLockMods <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbSetIndicatorMap</primary></indexterm>XkbSetIndicatorMap <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbSetMap</primary></indexterm>XkbSetMap <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbSetNamedIndicator</primary></indexterm>XkbSetNamedIndicator <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XkbSetNames</primary></indexterm>XkbSetNames <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbSetPerClientControls</primary></indexterm>XkbSetPerClientControls <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbSetServerInternalMods</primary></indexterm>XkbSetServerInternalMods <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbSetXlibControls</primary></indexterm>XkbSetXlibControls <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XkbToControl</primary></indexterm>XkbToControl <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbTranslateKeyCode</primary></indexterm>XkbTranslateKeyCode <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbTranslateKeySym</primary></indexterm>XkbTranslateKeySym <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbUpdateMapFromCore</primary></indexterm>XkbUpdateMapFromCore <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XkbUseExtension</primary></indexterm>XkbUseExtension <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XkbVirtualModsToReal</primary></indexterm>XkbVirtualModsToReal <LINK LINKEND="REFSTD.libX11.2">[XKBlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XmbDrawImageString</primary></indexterm>XmbDrawImageString <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XmbDrawString</primary></indexterm>XmbDrawString <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XmbDrawText</primary></indexterm>XmbDrawText <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XmbLookupString</primary></indexterm>XmbLookupString <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XmbResetIC</primary></indexterm>XmbResetIC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XmbSetWMProperties</primary></indexterm>XmbSetWMProperties <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XmbTextEscapement</primary></indexterm>XmbTextEscapement <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XmbTextExtents</primary></indexterm>XmbTextExtents <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XmbTextListToTextProperty</primary></indexterm>XmbTextListToTextProperty <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XmbTextPerCharExtents</primary></indexterm>XmbTextPerCharExtents <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XmbTextPropertyToTextList</primary></indexterm>XmbTextPropertyToTextList <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XrmCombineDatabase</primary></indexterm>XrmCombineDatabase <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XrmCombineFileDatabase</primary></indexterm>XrmCombineFileDatabase <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XrmDestroyDatabase</primary></indexterm>XrmDestroyDatabase <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XrmEnumerateDatabase</primary></indexterm>XrmEnumerateDatabase <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XrmGetDatabase</primary></indexterm>XrmGetDatabase <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XrmGetFileDatabase</primary></indexterm>XrmGetFileDatabase <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XrmGetResource</primary></indexterm>XrmGetResource <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XrmGetStringDatabase</primary></indexterm>XrmGetStringDatabase <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XrmInitialize</primary></indexterm>XrmInitialize <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XrmLocaleOfDatabase</primary></indexterm>XrmLocaleOfDatabase <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XrmMergeDatabases</primary></indexterm>XrmMergeDatabases <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XrmParseCommand</primary></indexterm>XrmParseCommand <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XrmPermStringToQuark</primary></indexterm>XrmPermStringToQuark <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XrmPutFileDatabase</primary></indexterm>XrmPutFileDatabase <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XrmPutLineResource</primary></indexterm>XrmPutLineResource <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XrmPutResource</primary></indexterm>XrmPutResource <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XrmPutStringResource</primary></indexterm>XrmPutStringResource <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XrmQGetResource</primary></indexterm>XrmQGetResource <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XrmQGetSearchList</primary></indexterm>XrmQGetSearchList <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XrmQGetSearchResource</primary></indexterm>XrmQGetSearchResource <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XrmQPutResource</primary></indexterm>XrmQPutResource <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XrmQPutStringResource</primary></indexterm>XrmQPutStringResource <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XrmQuarkToString</primary></indexterm>XrmQuarkToString <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XrmSetDatabase</primary></indexterm>XrmSetDatabase <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XrmStringToBindingQuarkList</primary></indexterm>XrmStringToBindingQuarkList <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XrmStringToQuark</primary></indexterm>XrmStringToQuark <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XrmStringToQuarkList</primary></indexterm>XrmStringToQuarkList <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XrmUniqueQuark</primary></indexterm>XrmUniqueQuark <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>Xutf8TextListToTextProperty</primary></indexterm>Xutf8TextListToTextProperty <LINK LINKEND="REFSTD.libX11.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>Xutf8TextPropertyToTextList</primary></indexterm>Xutf8TextPropertyToTextList <LINK LINKEND="REFSTD.libX11.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>XwcDrawImageString</primary></indexterm>XwcDrawImageString <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XwcDrawString</primary></indexterm>XwcDrawString <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XwcDrawText</primary></indexterm>XwcDrawText <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XwcFreeStringList</primary></indexterm>XwcFreeStringList <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XwcLookupString</primary></indexterm>XwcLookupString <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XwcResetIC</primary></indexterm>XwcResetIC <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XwcTextEscapement</primary></indexterm>XwcTextEscapement <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XwcTextExtents</primary></indexterm>XwcTextExtents <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XwcTextListToTextProperty</primary></indexterm>XwcTextListToTextProperty <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XwcTextPerCharExtents</primary></indexterm>XwcTextPerCharExtents <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY><indexterm><primary>XwcTextPropertyToTextList</primary></indexterm>XwcTextPropertyToTextList <LINK LINKEND="REFSTD.libX11.3">[Xlib]</LINK></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>
</SECT2>
</SECT1>
<SECT1 ID=libX11-ddefs>
<TITLE>Data Definitions for libX11</TITLE>
<PARA>
This section defines global identifiers and their values that are associated
with interfaces contained in libX11.
These definitions are organized into groups that
correspond to system headers. This convention is used as a
convenience for the reader, and does not imply the existence
of these headers, or their content.
Where an interface is defined as requiring a particular system header file
all of the data definitions for that system header file presented here shall be in effect.
</PARA>
<PARA>
This section gives data definitions to promote binary application
portability, not to repeat source interface definitions available
elsewhere. System providers and application developers should use this ABI
to supplement - not to replace - source interface definition specifications.
</PARA>
<PARA>
This specification uses the <XREF LINKEND='std.ISOC99'> C Language as the reference programming language, and data definitions are specified in ISO C format. The C language is used here as a convenient notation. Using a C language description of these data objects does not preclude their use by other programming languages.</PARA>
<SECT2>
<TITLE>X11/X.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define X_PROTOCOL_REVISION	0
#define X_PROTOCOL	11

typedef unsigned long int XID;
typedef unsigned long int Mask;
typedef unsigned long int Atom;
typedef unsigned long int VisualID;
typedef unsigned long int Time;
typedef XID Window;
typedef XID Font;
typedef XID Pixmap;
typedef unsigned char KeyCode;
typedef XID Drawable;
typedef XID Cursor;
typedef XID Colormap;
typedef XID GContext;
typedef XID KeySym;

#define AllTemporary	0L
#define AnyButton	0L
#define AnyKey	0L
#define AnyPropertyType	0L
#define CopyFromParent	0L
#define CurrentTime	0L
#define NoSymbol	0L
#define None	0L
#define PointerWindow	0L
#define InputFocus	1L
#define ParentRelative	1L
#define PointerRoot	1L

#define KeyPressMask	(1L&lt;&lt;0)
#define KeyReleaseMask	(1L&lt;&lt;1)
#define Button3MotionMask	(1L&lt;&lt;10)
#define Button4MotionMask	(1L&lt;&lt;11)
#define Button5MotionMask	(1L&lt;&lt;12)
#define ButtonMotionMask	(1L&lt;&lt;13)
#define KeymapStateMask	(1L&lt;&lt;14)
#define ExposureMask	(1L&lt;&lt;15)
#define VisibilityChangeMask	(1L&lt;&lt;16)
#define StructureNotifyMask	(1L&lt;&lt;17)
#define ResizeRedirectMask	(1L&lt;&lt;18)
#define SubstructureNotifyMask	(1L&lt;&lt;19)
#define ButtonPressMask	(1L&lt;&lt;2)
#define SubstructureRedirectMask	(1L&lt;&lt;20)
#define FocusChangeMask	(1L&lt;&lt;21)
#define PropertyChangeMask	(1L&lt;&lt;22)
#define ColormapChangeMask	(1L&lt;&lt;23)
#define OwnerGrabButtonMask	(1L&lt;&lt;24)
#define ButtonReleaseMask	(1L&lt;&lt;3)
#define EnterWindowMask	(1L&lt;&lt;4)
#define LeaveWindowMask	(1L&lt;&lt;5)
#define PointerMotionMask	(1L&lt;&lt;6)
#define PointerMotionHintMask	(1L&lt;&lt;7)
#define Button1MotionMask	(1L&lt;&lt;8)
#define Button2MotionMask	(1L&lt;&lt;9)

#define NoEventMask	0L
#define FocusOut	10
#define KeymapNotify	11
#define Expose	12
#define GraphicsExpose	13
#define NoExpose	14
#define VisibilityNotify	15
#define CreateNotify	16
#define DestroyNotify	17
#define UnmapNotify	18
#define MapNotify	19
#define KeyPress	2
#define MapRequest	20
#define ReparentNotify	21
#define ConfigureNotify	22
#define ConfigureRequest	23
#define GravityNotify	24
#define ResizeRequest	25
#define CirculateNotify	26
#define CirculateRequest	27
#define PropertyNotify	28
#define SelectionClear	29
#define KeyRelease	3
#define SelectionRequest	30
#define SelectionNotify	31
#define ColormapNotify	32
#define ClientMessage	33
#define MappingNotify	34
#define LASTEvent	35
#define ButtonPress	4
#define ButtonRelease	5
#define MotionNotify	6
#define EnterNotify	7
#define LeaveNotify	8
#define FocusIn	9

#define ShiftMask	(1&lt;&lt;0)
#define LockMask	(1&lt;&lt;1)
#define ControlMask	(1&lt;&lt;2)
#define Mod1Mask	(1&lt;&lt;3)
#define Mod2Mask	(1&lt;&lt;4)
#define Mod3Mask	(1&lt;&lt;5)
#define Mod4Mask	(1&lt;&lt;6)
#define Mod5Mask	(1&lt;&lt;7)

#define ShiftMapIndex	0
#define LockMapIndex	1
#define ControlMapIndex	2
#define Mod1MapIndex	3
#define Mod2MapIndex	4
#define Mod3MapIndex	5
#define Mod4MapIndex	6
#define Mod5MapIndex	7

#define Button3Mask	(1&lt;&lt;10)
#define Button4Mask	(1&lt;&lt;11)
#define Button5Mask	(1&lt;&lt;12)
#define AnyModifier	(1&lt;&lt;15)
#define Button1Mask	(1&lt;&lt;8)
#define Button2Mask	(1&lt;&lt;9)

#define Button1	1
#define Button2	2
#define Button3	3
#define Button4	4
#define Button5	5

#define NotifyNormal	0
#define NotifyGrab	1
#define NotifyHint	1
#define NotifyUngrab	2
#define NotifyWhileGrabbed	3

#define NotifyAncestor	0
#define NotifyVirtual	1
#define NotifyInferior	2
#define NotifyNonlinear	3
#define NotifyNonlinearVirtual	4
#define NotifyPointer	5
#define NotifyPointerRoot	6
#define NotifyDetailNone	7

#define VisibilityUnobscured	0
#define VisibilityPartiallyObscured	1
#define VisibilityFullyObscured	2

#define PlaceOnTop	0
#define PlaceOnBottom	1

#define FamilyInternet	0
#define FamilyDECnet	1
#define FamilyChaos	2
#define FamilyServerInterpreted	5
#define FamilyInternet6	6	/* IPv6 */

#define PropModeReplace	0
#define PropertyNewValue	0
#define PropertyDelete	1

#define ColormapUninstalled	0
#define ColormapInstalled	1

#define GrabModeSync	0
#define GrabModeAsync	1

#define GrabSuccess	0
#define AlreadyGrabbed	1
#define GrabInvalidTime	2
#define GrabNotViewable	3
#define GrabFrozen	4

#define AsyncPointer	0
#define SyncPointer	1
#define ReplayPointer	2
#define AsyncKeyboard	3
#define SyncKeyboard	4
#define ReplayKeyboard	5
#define AsyncBoth	6
#define SyncBoth	7

#define RevertToNone	(int)None
#define RevertToPointerRoot	(int)PointerRoot
#define RevertToParent	2

#define Success	0
#define BadRequest	1
#define BadAccess	10
#define BadAlloc	11
#define BadColor	12
#define FirstExtensionError	128
#define BadGC	13
#define BadIDChoice	14
#define BadName	15
#define BadLength	16
#define BadImplementation	17
#define BadValue	2
#define LastExtensionError	255
#define BadWindow	3
#define BadPixmap	4
#define BadAtom	5
#define BadCursor	6
#define BadFont	7
#define BadMatch	8
#define BadDrawable	9

#define CWX	(1&lt;&lt;0)
#define InputOutput	1
#define InputOnly	2

#define CWBackPixmap	(1L&lt;&lt;0)
#define CWBackPixel	(1L&lt;&lt;1)
#define CWSaveUnder	(1L&lt;&lt;10)
#define CWEventMask	(1L&lt;&lt;11)
#define CWDontPropagate	(1L&lt;&lt;12)
#define CWColormap	(1L&lt;&lt;13)
#define CWCursor	(1L&lt;&lt;14)
#define CWBorderPixmap	(1L&lt;&lt;2)
#define CWBorderPixel	(1L&lt;&lt;3)
#define CWBitGravity	(1L&lt;&lt;4)
#define CWWinGravity	(1L&lt;&lt;5)
#define CWBackingStore	(1L&lt;&lt;6)
#define CWBackingPlanes	(1L&lt;&lt;7)
#define CWBackingPixel	(1L&lt;&lt;8)
#define CWOverrideRedirect	(1L&lt;&lt;9)

#define CWY	(1&lt;&lt;1)
#define CWWidth	(1&lt;&lt;2)
#define CWHeight	(1&lt;&lt;3)
#define CWBorderWidth	(1&lt;&lt;4)
#define CWSibling	(1&lt;&lt;5)
#define CWStackMode	(1&lt;&lt;6)

#define ForgetGravity	0
#define UnmapGravity	0
#define NorthWestGravity	1
#define StaticGravity	10
#define NorthGravity	2
#define NorthEastGravity	3
#define WestGravity	4
#define CenterGravity	5
#define EastGravity	6
#define SouthWestGravity	7
#define SouthGravity	8
#define SouthEastGravity	9

#define NotUseful	0
#define WhenMapped	1
#define Always	2

#define IsUnmapped	0
#define IsUnviewable	1
#define IsViewable	2

#define SetModeInsert	0
#define SetModeDelete	1

#define DestroyAll	0
#define RetainPermanent	1
#define RetainTemporary	2

#define Above	0
#define Below	1
#define TopIf	2
#define BottomIf	3
#define Opposite	4

#define RaiseLowest	0
#define LowerHighest	1

#define PropModePrepend	1
#define PropModeAppend	2

#define GXclear	0x0
#define GXand	0x1
#define GXandReverse	0x2
#define GXcopy	0x3
#define GXandInverted	0x4
#define GXnoop	0x5
#define GXxor	0x6
#define GXor	0x7
#define GXnor	0x8
#define GXequiv	0x9
#define GXinvert	0xa
#define GXorReverse	0xb
#define GXcopyInverted	0xc
#define GXorInverted	0xd
#define GXnand	0xe
#define GXset	0xf

#define LineSolid	0
#define LineOnOffDash	1
#define LineDoubleDash	2

#define CapNotLast	0
#define CapButt	1
#define CapRound	2
#define CapProjecting	3

#define JoinMiter	0
#define JoinRound	1
#define JoinBevel	2

#define FillSolid	0
#define FillTiled	1
#define FillStippled	2
#define FillOpaqueStippled	3

#define EvenOddRule	0
#define WindingRule	1

#define ClipByChildren	0
#define IncludeInferiors	1

#define Unsorted	0
#define XYBitmap	0
#define YSorted	1
#define YXSorted	2
#define YXBanded	3

#define CoordModeOrigin	0
#define CoordModePrevious	1

#define Complex	0
#define Nonconvex	1
#define Convex	2

#define ArcChord	0
#define ArcPieSlice	1

#define GCFunction	(1L&lt;&lt;0)
#define GCPlaneMask	(1L&lt;&lt;1)
#define GCTile	(1L&lt;&lt;10)
#define GCStipple	(1L&lt;&lt;11)
#define GCTileStipXOrigin	(1L&lt;&lt;12)
#define GCTileStipYOrigin	(1L&lt;&lt;13)
#define GCFont	(1L&lt;&lt;14)
#define GCSubwindowMode	(1L&lt;&lt;15)
#define GCGraphicsExposures	(1L&lt;&lt;16)
#define GCClipXOrigin	(1L&lt;&lt;17)
#define GCClipYOrigin	(1L&lt;&lt;18)
#define GCClipMask	(1L&lt;&lt;19)
#define GCForeground	(1L&lt;&lt;2)
#define GCDashOffset	(1L&lt;&lt;20)
#define GCDashList	(1L&lt;&lt;21)
#define GCArcMode	(1L&lt;&lt;22)
#define GCBackground	(1L&lt;&lt;3)
#define GCLineWidth	(1L&lt;&lt;4)
#define GCLineStyle	(1L&lt;&lt;5)
#define GCCapStyle	(1L&lt;&lt;6)
#define GCJoinStyle	(1L&lt;&lt;7)
#define GCFillStyle	(1L&lt;&lt;8)
#define GCFillRule	(1L&lt;&lt;9)
#define GCLastBit	22
#define FontChange	255

#define FontLeftToRight	0
#define FontRightToLeft	1

#define XYPixmap	1
#define ZPixmap	2

#define AllocNone	0
#define AllocAll	1

#define DoRed	(1&lt;&lt;0)
#define DoGreen	(1&lt;&lt;1)
#define DoBlue	(1&lt;&lt;2)

#define CursorShape	0
#define TileShape	1
#define StippleShape	2

#define AutoRepeatModeOff	0
#define LedModeOff	0
#define AutoRepeatModeOn	1
#define LedModeOn	1
#define AutoRepeatModeDefault	2

#define KBKeyClickPercent	(1L&lt;&lt;0)
#define KBBellPercent	(1L&lt;&lt;1)
#define KBBellPitch	(1L&lt;&lt;2)
#define KBBellDuration	(1L&lt;&lt;3)
#define KBLed	(1L&lt;&lt;4)
#define KBLedMode	(1L&lt;&lt;5)
#define KBKey	(1L&lt;&lt;6)
#define KBAutoRepeatMode	(1L&lt;&lt;7)
#define MappingModifier	0
#define MappingSuccess	0
#define MappingBusy	1
#define MappingKeyboard	1
#define MappingFailed	2
#define MappingPointer	2

#define DisableScreenInterval	0
#define DisableScreenSaver	0
#define DontAllowExposures	0
#define DontPreferBlanking	0
#define AllowExposures	1
#define PreferBlanking	1
#define DefaultBlanking	2
#define DefaultExposures	2

#define ScreenSaverReset	0
#define ScreenSaverActive	1

#define HostInsert	0
#define HostDelete	1

#define DisableAccess	0
#define EnableAccess	1

#define StaticGray	0
#define GrayScale	1
#define StaticColor	2
#define PseudoColor	3
#define TrueColor	4
#define DirectColor	5

#define LSBFirst	0
#define MSBFirst	1
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/XKBlib.h</TITLE>
<PARA>
</PARA>
<SCREEN>

typedef struct _XkbAnyEvent {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Time time;
    int xkb_type;
    unsigned int device;
} XkbAnyEvent;
typedef struct _XkbNewKeyboardNotify {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Time time;
    int xkb_type;
    int device;
    int old_device;
    int min_key_code;
    int max_key_code;
    int old_min_key_code;
    int old_max_key_code;
    unsigned int changed;
    char req_major;
    char req_minor;
} XkbNewKeyboardNotifyEvent;
typedef struct _XkbMapNotifyEvent {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Time time;
    int xkb_type;
    int device;
    unsigned int changed;
    unsigned int flags;
    int first_type;
    int num_types;
    KeyCode min_key_code;
    KeyCode max_key_code;
    KeyCode first_key_sym;
    KeyCode first_key_act;
    KeyCode first_key_behavior;
    KeyCode first_key_explicit;
    KeyCode first_modmap_key;
    KeyCode first_vmodmap_key;
    int num_key_syms;
    int num_key_acts;
    int num_key_behaviors;
    int num_key_explicit;
    int num_modmap_keys;
    int num_vmodmap_keys;
    unsigned int vmods;
} XkbMapNotifyEvent;
typedef struct _XkbStateNotifyEvent {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Time time;
    int xkb_type;
    int device;
    unsigned int changed;
    int group;
    int base_group;
    int latched_group;
    int locked_group;
    unsigned int mods;
    unsigned int base_mods;
    unsigned int latched_mods;
    unsigned int locked_mods;
    int compat_state;
    unsigned char grab_mods;
    unsigned char compat_grab_mods;
    unsigned char lookup_mods;
    unsigned char compat_lookup_mods;
    int ptr_buttons;
    KeyCode keycode;
    char event_type;
    char req_major;
    char req_minor;
} XkbStateNotifyEvent;
typedef struct _XkbControlsNotify {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Time time;
    int xkb_type;
    int device;
    unsigned int changed_ctrls;
    unsigned int enabled_ctrls;
    unsigned int enabled_ctrl_changes;
    int num_groups;
    KeyCode keycode;
    char event_type;
    char req_major;
    char req_minor;
} XkbControlsNotifyEvent;
typedef struct _XkbIndicatorNotify {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Time time;
    int xkb_type;
    int device;
    unsigned int changed;
    unsigned int state;
} XkbIndicatorNotifyEvent;
typedef struct _XkbNamesNotify {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Time time;
    int xkb_type;
    int device;
    unsigned int changed;
    int first_type;
    int num_types;
    int first_lvl;
    int num_lvls;
    int num_aliases;
    int num_radio_groups;
    unsigned int changed_vmods;
    unsigned int changed_groups;
    unsigned int changed_indicators;
    int first_key;
    int num_keys;
} XkbNamesNotifyEvent;
typedef struct _XkbCompatMapNotify {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Time time;
    int xkb_type;
    int device;
    unsigned int changed_groups;
    int first_si;
    int num_si;
    int num_total_si;
} XkbCompatMapNotifyEvent;
typedef struct _XkbBellNotify {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Time time;
    int xkb_type;
    int device;
    int percent;
    int pitch;
    int duration;
    int bell_class;
    int bell_id;
    Atom name;
    Window window;
    int event_only;
} XkbBellNotifyEvent;
typedef struct _XkbActionMessage {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Time time;
    int xkb_type;
    int device;
    KeyCode keycode;
    int press;
    int key_event_follows;
    int group;
    unsigned int mods;
    char message;
} XkbActionMessageEvent;
typedef struct _XkbAccessXNotify {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Time time;
    int xkb_type;
    int device;
    int detail;
    int keycode;
    int sk_delay;
    int debounce_delay;
} XkbAccessXNotifyEvent;
typedef struct _XkbExtensionDeviceNotify {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Time time;
    int xkb_type;
    int device;
    unsigned int reason;
    unsigned int supported;
    unsigned int unsupported;
    int first_btn;
    int num_btns;
    unsigned int leds_defined;
    unsigned int led_state;
    int led_class;
    int led_id;
} XkbExtensionDeviceNotifyEvent;
union _XkbEvent {
    int type;
    XkbAnyEvent any;
    XkbNewKeyboardNotifyEvent new_kbd;
    XkbMapNotifyEvent map;
    XkbStateNotifyEvent state;
    XkbControlsNotifyEvent ctrls;
    XkbIndicatorNotifyEvent indicators;
    XkbNamesNotifyEvent names;
    XkbCompatMapNotifyEvent compat;
    XkbBellNotifyEvent bell;
    XkbActionMessageEvent message;
    XkbAccessXNotifyEvent accessx;
    XkbExtensionDeviceNotifyEvent device;
    XEvent core;
};
typedef union _XkbEvent {
    int type;
    XkbAnyEvent any;
    XkbNewKeyboardNotifyEvent new_kbd;
    XkbMapNotifyEvent map;
    XkbStateNotifyEvent state;
    XkbControlsNotifyEvent ctrls;
    XkbIndicatorNotifyEvent indicators;
    XkbNamesNotifyEvent names;
    XkbCompatMapNotifyEvent compat;
    XkbBellNotifyEvent bell;
    XkbActionMessageEvent message;
    XkbAccessXNotifyEvent accessx;
    XkbExtensionDeviceNotifyEvent device;
    XEvent core;
} XkbEvent;
typedef struct _XkbKbdDpyState XkbKbdDpyStateRec;
typedef struct _XkbKbdDpyState *XkbKbdDpyStatePtr;
typedef Atom(*XkbInternAtomFunc) (Display *, const char *, int);
typedef char *(*XkbGetAtomNameFunc) (Display *, Atom);
extern int XkbAllocClientMap(XkbDescPtr, unsigned int, unsigned int);
extern int XkbAllocCompatMap(XkbDescPtr, unsigned int, unsigned int);
extern int XkbAllocControls(XkbDescPtr, unsigned int);
extern int XkbAllocIndicatorMaps(XkbDescPtr);
extern XkbDescPtrXkbAllocKeyboard(void);
extern int XkbAllocNames(XkbDescPtr, unsigned int, int, int);
extern int XkbAllocServerMap(XkbDescPtr, unsigned int, unsigned int);
extern int XkbApplyCompatMapToKey(XkbDescPtr, KeyCode, XkbChangesPtr);
extern int XkbBell(Display *, Window, int, Atom);
extern int XkbBellEvent(Display *, Window, int, Atom);
extern int XkbChangeEnabledControls(Display *, unsigned int, unsigned int,
				    unsigned int);
extern int XkbChangeMap(Display *, XkbDescPtr, XkbMapChangesPtr);
extern int XkbChangeNames(Display *, XkbDescPtr, XkbNameChangesPtr);
extern int XkbChangeTypesOfKey(XkbDescPtr, int, int, unsigned int, int *,
			       XkbMapChangesPtr);
extern int XkbComputeEffectiveMap(XkbDescPtr, XkbKeyTypePtr,
				  unsigned char *);
extern int XkbCopyKeyType(XkbKeyTypePtr, XkbKeyTypePtr);
extern int XkbCopyKeyTypes(XkbKeyTypePtr, XkbKeyTypePtr, int);
extern int XkbForceBell(Display *, int);
extern void XkbFreeClientMap(XkbDescPtr, unsigned int, int);
extern void XkbFreeCompatMap(XkbDescPtr, unsigned int, int);
extern void XkbFreeComponentList(XkbComponentListPtr);
extern void XkbFreeControls(XkbDescPtr, unsigned int, int);
extern void XkbFreeIndicatorMaps(XkbDescPtr);
extern void XkbFreeKeyboard(XkbDescPtr, unsigned int, int);
extern void XkbFreeNames(XkbDescPtr, unsigned int, int);
extern void XkbFreeServerMap(XkbDescPtr, unsigned int, int);
extern int XkbGetAutoRepeatRate(Display *, unsigned int, unsigned int *,
				unsigned int *);
extern int XkbGetCompatMap(Display *, unsigned int, XkbDescPtr);
extern int XkbGetControls(Display *, unsigned long int, XkbDescPtr);
extern int XkbGetIndicatorMap(Display *, unsigned long int, XkbDescPtr);
extern int XkbGetIndicatorState(Display *, unsigned int, unsigned int *);
extern int XkbGetKeyActions(Display *, unsigned int, unsigned int,
			    XkbDescPtr);
extern int XkbGetKeyBehaviors(Display *, unsigned int, unsigned int,
			      XkbDescPtr);
extern int XkbGetKeyExplicitComponents(Display *, unsigned int,
				       unsigned int, XkbDescPtr);
extern int XkbGetKeyModifierMap(Display *, unsigned int, unsigned int,
				XkbDescPtr);
extern int XkbGetKeySyms(Display *, unsigned int, unsigned int,
			 XkbDescPtr);
extern int XkbGetKeyTypes(Display *, unsigned int, unsigned int,
			  XkbDescPtr);
extern XkbDescPtrXkbGetKeyboard(Display *, unsigned int, unsigned int);
extern XkbDescPtrXkbGetKeyboardByName(Display *, unsigned int,
				      XkbComponentNamesPtr, unsigned int,
				      unsigned int, int);
extern XkbDescPtrXkbGetMap(Display *, unsigned int, unsigned int);
extern int XkbGetMapChanges(Display *, XkbDescPtr, XkbMapChangesPtr);
extern int XkbGetNamedIndicator(Display *, Atom, int *, int *,
				XkbIndicatorMapPtr, int *);
extern int XkbGetNames(Display *, unsigned int, XkbDescPtr);
extern int XkbGetState(Display *, unsigned int, XkbStatePtr);
extern int XkbGetUpdatedMap(Display *, unsigned int, XkbDescPtr);
extern int XkbGetVirtualMods(Display *, unsigned int, XkbDescPtr);
extern unsigned int XkbGetXlibControls(Display *);
extern int XkbIgnoreExtension(int);
extern int XkbInitCanonicalKeyTypes(XkbDescPtr, unsigned int, int);
extern int XkbKeyTypesForCoreSymbols(XkbDescPtr, int, KeySym *,
				     unsigned int, int *, KeySym *);
extern KeySym XkbKeycodeToKeysym(Display *, unsigned int, int, int);
extern unsigned int XkbKeysymToModifiers(Display *, KeySym);
extern int XkbLatchGroup(Display *, unsigned int, unsigned int);
extern int XkbLatchModifiers(Display *, unsigned int, unsigned int,
			     unsigned int);
extern int XkbLibraryVersion(int *, int *);
extern XkbComponentListPtrXkbListComponents(Display *, unsigned int,
					    XkbComponentNamesPtr, int *);
extern int XkbLockGroup(Display *, unsigned int, unsigned int);
extern int XkbLockModifiers(Display *, unsigned int, unsigned int,
			    unsigned int);
extern int XkbLookupKeyBinding(Display *, KeySym, unsigned int, char *,
			       int, int *);
extern int XkbLookupKeySym(Display *, KeyCode, unsigned int,
			   unsigned int *, KeySym *);
extern void XkbNoteControlsChanges(XkbControlsChangesPtr,
				   XkbControlsNotifyEvent *, unsigned int);
extern void XkbNoteMapChanges(XkbMapChangesPtr, XkbMapNotifyEvent *,
			      unsigned int);
extern void XkbNoteNameChanges(XkbNameChangesPtr, XkbNamesNotifyEvent *,
			       unsigned int);
extern Display *XkbOpenDisplay(char *, int *, int *, int *, int *, int *);
extern int XkbQueryExtension(Display *, int *, int *, int *, int *, int *);
extern int XkbRefreshKeyboardMapping(XkbMapNotifyEvent *);
extern XkbAction *XkbResizeKeyActions(XkbDescPtr, int, int);
extern KeySym *XkbResizeKeySyms(XkbDescPtr, int, int);
extern int XkbResizeKeyType(XkbDescPtr, int, int, int, int);
extern int XkbSelectEventDetails(Display *, unsigned int, unsigned int,
				 unsigned long int, unsigned long int);
extern int XkbSelectEvents(Display *, unsigned int, unsigned int,
			   unsigned int);
extern void XkbSetAtomFuncs(XkbInternAtomFunc, XkbGetAtomNameFunc);
extern int XkbSetAutoRepeatRate(Display *, unsigned int, unsigned int,
				unsigned int);
extern int XkbSetAutoResetControls(Display *, unsigned int, unsigned int *,
				   unsigned int *);
extern int XkbSetCompatMap(Display *, unsigned int, XkbDescPtr, int);
extern int XkbSetControls(Display *, unsigned long int, XkbDescPtr);
extern int XkbSetDebuggingFlags(Display *, unsigned int, unsigned int,
				char *, unsigned int, unsigned int,
				unsigned int *, unsigned int *);
extern int XkbSetDetectableAutoRepeat(Display *, int, int *);
extern int XkbSetIgnoreLockMods(Display *, unsigned int, unsigned int,
				unsigned int, unsigned int, unsigned int);
extern int XkbSetIndicatorMap(Display *, unsigned long int, XkbDescPtr);
extern int XkbSetMap(Display *, unsigned int, XkbDescPtr);
extern int XkbSetNamedIndicator(Display *, Atom, int, int, int,
				XkbIndicatorMapPtr);
extern int XkbSetNames(Display *, unsigned int, unsigned int, unsigned int,
		       XkbDescPtr);
extern int XkbSetServerInternalMods(Display *, unsigned int, unsigned int,
				    unsigned int, unsigned int,
				    unsigned int);
extern unsigned int XkbSetXlibControls(Display *, unsigned int,
				       unsigned int);
extern char XkbToControl(char);
extern int XkbTranslateKeyCode(XkbDescPtr, KeyCode, unsigned int,
			       unsigned int *, KeySym *);
extern int XkbTranslateKeySym(Display *, KeySym *, unsigned int, char *,
			      int, int *);
extern int XkbUpdateMapFromCore(XkbDescPtr, KeyCode, int, int, KeySym *,
				XkbChangesPtr);
extern int XkbUseExtension(Display *, int *, int *);
extern int XkbVirtualModsToReal(XkbDescPtr, unsigned int, unsigned int *);
extern int XkbGetPerClientControls(Display *, unsigned int *);
extern int XkbSetPerClientControls(Display *, unsigned int,
				   unsigned int *);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/Xauth.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define FamilyLocalHost	(252)
#define FamilyKrb5Principal	(253)
#define FamilyNetname	(254)
#define FamilyLocal	(256)
#define FamilyWild	(65535)
#define LOCK_SUCCESS	0
#define LOCK_ERROR	1
#define _Xauth_h	1
#define LOCK_TIMEOUT	2

typedef struct xauth {
    unsigned short family;
    unsigned short address_length;
    char *address;
    unsigned short number_length;
    char *number;
    unsigned short name_length;
    char *name;
    unsigned short data_length;
    char *data;
} Xauth;
extern void XauDisposeAuth(Xauth *);
extern char *XauFileName(void);
extern Xauth *XauGetBestAuthByAddr(unsigned int, unsigned int,
				   const char *, unsigned int, char *, int,
				   char **, int *);
extern Xauth *XauReadAuth(FILE *);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/Xcms.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define ClientWhitePointOfCCC(ccc)	(&amp;(ccc)->clientWhitePt)
#define ScreenWhitePointOfCCC(ccc)	(&amp;(ccc)->pPerScrnInfo->screenWhitePt)
#define DisplayOfCCC(ccc)	((ccc)->dpy)
#define FunctionSetOfCCC(ccc)	((ccc)->pPerScrnInfo->functionSet)
#define ScreenNumberOfCCC(ccc)	((ccc)->screenNumber)
#define VisualOfCCC(ccc)	((ccc)->visual)
#define XcmsUndefinedFormat	(XcmsColorFormat)0x00000000
#define XcmsCIEXYZFormat	(XcmsColorFormat)0x00000001
#define XcmsCIEuvYFormat	(XcmsColorFormat)0x00000002
#define XcmsCIExyYFormat	(XcmsColorFormat)0x00000003
#define XcmsCIELabFormat	(XcmsColorFormat)0x00000004
#define XcmsCIELuvFormat	(XcmsColorFormat)0x00000005
#define XcmsTekHVCFormat	(XcmsColorFormat)0x00000006
#define XcmsRGBFormat	(XcmsColorFormat)0x80000000
#define XcmsRGBiFormat	(XcmsColorFormat)0x80000001
#define XcmsFailure	0
#define XcmsInitNone	0x00
#define XcmsInitSuccess	0x01
#define XcmsInitFailure	0xff
#define XcmsSuccess	1
#define XcmsSuccessWithCompression	2

typedef unsigned long int XcmsColorFormat;
typedef double XcmsFloat;
typedef struct {
    unsigned short red;
    unsigned short green;
    unsigned short blue;
} XcmsRGB;
typedef struct {
    XcmsFloat red;
    XcmsFloat green;
    XcmsFloat blue;
} XcmsRGBi;
typedef struct {
    XcmsFloat X;
    XcmsFloat Y;
    XcmsFloat Z;
} XcmsCIEXYZ;
typedef struct {
    XcmsFloat u_prime;
    XcmsFloat v_prime;
    XcmsFloat Y;
} XcmsCIEuvY;
typedef struct {
    XcmsFloat x;
    XcmsFloat y;
    XcmsFloat Y;
} XcmsCIExyY;
typedef struct {
    XcmsFloat L_star;
    XcmsFloat a_star;
    XcmsFloat b_star;
} XcmsCIELab;
typedef struct {
    XcmsFloat L_star;
    XcmsFloat u_star;
    XcmsFloat v_star;
} XcmsCIELuv;
typedef struct {
    XcmsFloat H;
    XcmsFloat V;
    XcmsFloat C;
} XcmsTekHVC;
typedef struct {
    XcmsFloat pad0;
    XcmsFloat pad1;
    XcmsFloat pad2;
    XcmsFloat pad3;
} XcmsPad;
typedef struct {
    union {
	XcmsRGB RGB;
	XcmsRGBi RGBi;
	XcmsCIEXYZ CIEXYZ;
	XcmsCIEuvY CIEuvY;
	XcmsCIExyY CIExyY;
	XcmsCIELab CIELab;
	XcmsCIELuv CIELuv;
	XcmsTekHVC TekHVC;
	XcmsPad Pad;
    } spec;
    unsigned long int pixel;
    XcmsColorFormat format;
} XcmsColor;
typedef struct _XcmsPerScrnInfo {
    XcmsColor screenWhitePt;
    XPointer functionSet;
    XPointer screenData;
    unsigned char state;
    char pad[3];
} XcmsPerScrnInfo;
typedef struct _XcmsCCC {
    Display *dpy;
    int screenNumber;
    Visual *visual;
    XcmsColor clientWhitePt;
    XcmsCompressionProc gamutCompProc;
    XPointer gamutCompClientData;
    XcmsWhiteAdjustProc whitePtAdjProc;
    XPointer whitePtAdjClientData;
    XcmsPerScrnInfo *pPerScrnInfo;
} XcmsCCCRec;
typedef struct _XcmsColorSpace {
    char *prefix;
    XcmsColorFormat id;
    XcmsParseStringProc parseString;
    XcmsFuncListPtr to_CIEXYZ;
    XcmsFuncListPtr from_CIEXYZ;
    int inverse_flag;
} XcmsColorSpace;
typedef struct _XcmsFunctionSet {
    XcmsColorSpace **DDColorSpaces;
    XcmsScreenInitProc screenInitProc;
    XcmsScreenFreeProc screenFreeProc;
} XcmsFunctionSet;
typedef struct _XcmsCCC *XcmsCCC;
typedef int (*XcmsCompressionProc) (XcmsCCC, XcmsColor *, unsigned int,
				    unsigned int, int *);
typedef int (*XcmsWhiteAdjustProc) (XcmsCCC, XcmsColor *, XcmsColor *,
				    XcmsColorFormat, XcmsColor *,
				    unsigned int, int *);
typedef int (*XcmsScreenInitProc) (Display *, int, XcmsPerScrnInfo *);
typedef void (*XcmsScreenFreeProc) (XPointer);
typedef int (*XcmsDIConversionProc) (XcmsCCC, XcmsColor *, XcmsColor *,
				     unsigned int);
typedef XcmsDIConversionProc XcmsConversionProc;
typedef int (*XcmsParseStringProc) (char *, XcmsColor *);
typedef XcmsConversionProc *XcmsFuncListPtr;
typedef int (*XcmsDDConversionProc) (XcmsCCC, XcmsColor *, unsigned int,
				     int *);

extern int XcmsAddColorSpace(XcmsColorSpace *);
extern int XcmsAddFunctionSet(XcmsFunctionSet *);
extern int XcmsAllocColor(Display *, Colormap, XcmsColor *,
			  XcmsColorFormat);
extern int XcmsAllocNamedColor(Display *, Colormap, const char *,
			       XcmsColor *, XcmsColor *, XcmsColorFormat);
extern XcmsCCC XcmsCCCOfColormap(Display *, Colormap);
extern int XcmsCIELabClipL(XcmsCCC, XcmsColor *, unsigned int,
			   unsigned int, int *);
extern int XcmsCIELabClipLab(XcmsCCC, XcmsColor *, unsigned int,
			     unsigned int, int *);
extern int XcmsCIELabClipab(XcmsCCC, XcmsColor *, unsigned int,
			    unsigned int, int *);
extern int XcmsCIELabQueryMaxC(XcmsCCC, XcmsFloat, XcmsFloat, XcmsColor *);
extern int XcmsCIELabQueryMaxL(XcmsCCC, XcmsFloat, XcmsFloat, XcmsColor *);
extern int XcmsCIELabQueryMaxLC(XcmsCCC, XcmsFloat, XcmsColor *);
extern int XcmsCIELabQueryMinL(XcmsCCC, XcmsFloat, XcmsFloat, XcmsColor *);
extern int XcmsCIELabToCIEXYZ(XcmsCCC, XcmsColor *, XcmsColor *,
			      unsigned int);
extern int XcmsCIELabWhiteShiftColors(XcmsCCC, XcmsColor *, XcmsColor *,
				      XcmsColorFormat, XcmsColor *,
				      unsigned int, int *);
extern int XcmsCIELuvClipL(XcmsCCC, XcmsColor *, unsigned int,
			   unsigned int, int *);
extern int XcmsCIELuvClipLuv(XcmsCCC, XcmsColor *, unsigned int,
			     unsigned int, int *);
extern int XcmsCIELuvClipuv(XcmsCCC, XcmsColor *, unsigned int,
			    unsigned int, int *);
extern int XcmsCIELuvQueryMaxC(XcmsCCC, XcmsFloat, XcmsFloat, XcmsColor *);
extern int XcmsCIELuvQueryMaxL(XcmsCCC, XcmsFloat, XcmsFloat, XcmsColor *);
extern int XcmsCIELuvQueryMaxLC(XcmsCCC, XcmsFloat, XcmsColor *);
extern int XcmsCIELuvQueryMinL(XcmsCCC, XcmsFloat, XcmsFloat, XcmsColor *);
extern int XcmsCIELuvToCIEuvY(XcmsCCC, XcmsColor *, XcmsColor *,
			      unsigned int);
extern int XcmsCIELuvWhiteShiftColors(XcmsCCC, XcmsColor *, XcmsColor *,
				      XcmsColorFormat, XcmsColor *,
				      unsigned int, int *);
extern int XcmsCIEXYZToCIELab(XcmsCCC, XcmsColor *, XcmsColor *,
			      unsigned int);
extern int XcmsCIEXYZToCIEuvY(XcmsCCC, XcmsColor *, XcmsColor *,
			      unsigned int);
extern int XcmsCIEXYZToCIExyY(XcmsCCC, XcmsColor *, XcmsColor *,
			      unsigned int);
extern int XcmsCIEXYZToRGBi(XcmsCCC, XcmsColor *, unsigned int, int *);
extern int XcmsCIEuvYToCIELuv(XcmsCCC, XcmsColor *, XcmsColor *,
			      unsigned int);
extern int XcmsCIEuvYToCIEXYZ(XcmsCCC, XcmsColor *, XcmsColor *,
			      unsigned int);
extern int XcmsCIEuvYToTekHVC(XcmsCCC, XcmsColor *, XcmsColor *,
			      unsigned int);
extern int XcmsCIExyYToCIEXYZ(XcmsCCC, XcmsColor *, XcmsColor *,
			      unsigned int);
extern XcmsColor *XcmsClientWhitePointOfCCC(XcmsCCC);
extern int XcmsConvertColors(XcmsCCC, XcmsColor *, unsigned int,
			     XcmsColorFormat, int *);
extern XcmsCCC XcmsCreateCCC(Display *, int, Visual *, XcmsColor *,
			     XcmsCompressionProc, XPointer,
			     XcmsWhiteAdjustProc, XPointer);
extern XcmsCCC XcmsDefaultCCC(Display *, int);
extern Display *XcmsDisplayOfCCC(XcmsCCC);
extern XcmsColorFormat XcmsFormatOfPrefix(char *);
extern void XcmsFreeCCC(XcmsCCC);
extern int XcmsLookupColor(Display *, Colormap, const char *, XcmsColor *,
			   XcmsColor *, XcmsColorFormat);
extern char *XcmsPrefixOfFormat(XcmsColorFormat);
extern int XcmsQueryBlack(XcmsCCC, XcmsColorFormat, XcmsColor *);
extern int XcmsQueryBlue(XcmsCCC, XcmsColorFormat, XcmsColor *);
extern int XcmsQueryColor(Display *, Colormap, XcmsColor *,
			  XcmsColorFormat);
extern int XcmsQueryColors(Display *, Colormap, XcmsColor *, unsigned int,
			   XcmsColorFormat);
extern int XcmsQueryGreen(XcmsCCC, XcmsColorFormat, XcmsColor *);
extern int XcmsQueryRed(XcmsCCC, XcmsColorFormat, XcmsColor *);
extern int XcmsQueryWhite(XcmsCCC, XcmsColorFormat, XcmsColor *);
extern int XcmsRGBToRGBi(XcmsCCC, XcmsColor *, unsigned int, int *);
extern int XcmsRGBiToCIEXYZ(XcmsCCC, XcmsColor *, unsigned int, int *);
extern int XcmsRGBiToRGB(XcmsCCC, XcmsColor *, unsigned int, int *);
extern int XcmsScreenNumberOfCCC(XcmsCCC);
extern XcmsColor *XcmsScreenWhitePointOfCCC(XcmsCCC);
extern XcmsCCC XcmsSetCCCOfColormap(Display *, Colormap, XcmsCCC);
extern XcmsCompressionProc XcmsSetCompressionProc(XcmsCCC,
						  XcmsCompressionProc,
						  XPointer);
extern XcmsWhiteAdjustProc XcmsSetWhiteAdjustProc(XcmsCCC,
						  XcmsWhiteAdjustProc,
						  XPointer);
extern int XcmsSetWhitePoint(XcmsCCC, XcmsColor *);
extern int XcmsStoreColor(Display *, Colormap, XcmsColor *);
extern int XcmsStoreColors(Display *, Colormap, XcmsColor *, unsigned int,
			   int *);
extern int XcmsTekHVCClipC(XcmsCCC, XcmsColor *, unsigned int,
			   unsigned int, int *);
extern int XcmsTekHVCClipV(XcmsCCC, XcmsColor *, unsigned int,
			   unsigned int, int *);
extern int XcmsTekHVCClipVC(XcmsCCC, XcmsColor *, unsigned int,
			    unsigned int, int *);
extern int XcmsTekHVCQueryMaxC(XcmsCCC, XcmsFloat, XcmsFloat, XcmsColor *);
extern int XcmsTekHVCQueryMaxV(XcmsCCC, XcmsFloat, XcmsFloat, XcmsColor *);
extern int XcmsTekHVCQueryMaxVC(XcmsCCC, XcmsFloat, XcmsColor *);
extern int XcmsTekHVCQueryMaxVSamples(XcmsCCC, XcmsFloat, XcmsColor *,
				      unsigned int);
extern int XcmsTekHVCQueryMinV(XcmsCCC, XcmsFloat, XcmsFloat, XcmsColor *);
extern int XcmsTekHVCToCIEuvY(XcmsCCC, XcmsColor *, XcmsColor *,
			      unsigned int);
extern int XcmsTekHVCWhiteShiftColors(XcmsCCC, XcmsColor *, XcmsColor *,
				      XcmsColorFormat, XcmsColor *,
				      unsigned int, int *);
extern Visual *XcmsVisualOfCCC(XcmsCCC);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/Xfuncproto.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define NARROWPROTO
#define NeedWidePrototypes	0
#define NeedFunctionPrototypes	1
#define NeedNestedPrototypes	1
#define NeedVarargsPrototypes	1
#define FUNCPROTO	15
#define _Xconst	const
#ifdef __cplusplus
#define _XFUNCPROTOBEGIN extern "C" {
#else
#define _XFUNCPROTOBEGIN
#endif
#define _X_INLINE	inline
#define _X_SENTINEL(x)	__attribute__ ((__sentinel__(x)))
#define _X_DEPRECATED	__attribute__((deprecated))
#define _X_EXPORT	__attribute__((visibility("default")))
#define _X_HIDDEN	__attribute__((visibility("hidden")))
#define _X_INTERNAL	__attribute__((visibility("internal")))
#define _X_ATTRIBUTE_PRINTF(x,y)	__attribute__((__format__(__printf__,x,y)))
#define _X_UNLIKELY(x)	__builtin_expect(!!(x), 0)
#define _X_LIKELY(x)	__builtin_expect(!!(x), 1)
#ifdef __cplusplus
#define _XFUNCPROTOEND }
#else
#define _XFUNCPROTOEND
#endif
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/Xlib.h</TITLE>
<PARA>
</PARA>
<SCREEN>

struct _XDisplay;

typedef char *XPointer;
typedef struct {
    unsigned long int pixel;
    unsigned short red;
    unsigned short green;
    unsigned short blue;
    char flags;
    char pad;
} XColor;
typedef struct _XDisplay Display;
typedef struct {
    int type;
    Display *display;
    XID resourceid;
    unsigned long int serial;
    unsigned char error_code;
    unsigned char request_code;
    unsigned char minor_code;
} XErrorEvent;
typedef struct _XIM *XIM;
typedef struct _XIC *XIC;
typedef void *XVaNestedList;
typedef unsigned long int XIMFeedback;
typedef struct _XIMText {
    unsigned short length;
    XIMFeedback *feedback;
    int encoding_is_wchar;
    union {
	char *multi_byte;
	wchar_t *wide_char;
    } string;
} XIMText;
typedef unsigned long int XIMPreeditState;
typedef struct _XIMPreeditStateNotifyCallbackStruct {
    XIMPreeditState state;
} XIMPreeditStateNotifyCallbackStruct;
typedef unsigned long int XIMResetState;
typedef unsigned long int XIMStringConversionFeedback;
typedef struct _XIMStringConversionText {
    unsigned short length;
    XIMStringConversionFeedback *feedback;
    int encoding_is_wchar;
    union {
	char *mbs;
	wchar_t *wcs;
    } string;
} XIMStringConversionText;
typedef unsigned short XIMStringConversionPosition;
typedef unsigned short XIMStringConversionType;
typedef unsigned short XIMStringConversionOperation;
typedef struct _XIMStringConversionCallbackStruct {
    XIMStringConversionPosition position;
    XIMCaretDirection direction;
    XIMStringConversionOperation operation;
    unsigned short factor;
    XIMStringConversionText *text;
} XIMStringConversionCallbackStruct;
typedef struct _XIMPreeditDrawCallbackStruct {
    int caret;
    int chg_first;
    int chg_length;
    XIMText *text;
} XIMPreeditDrawCallbackStruct;
typedef struct _XIMPreeditCaretCallbackStruct {
    int position;
    XIMCaretDirection direction;
    XIMCaretStyle style;
} XIMPreeditCaretCallbackStruct;
typedef struct _XIMStatusDrawCallbackStruct {
    XIMStatusDataType type;
    union {
	XIMText *text;
	Pixmap bitmap;
    } data;
} XIMStatusDrawCallbackStruct;
typedef struct _XIMHotKeyTrigger {
    KeySym keysym;
    int modifier;
    int modifier_mask;
} XIMHotKeyTrigger;
typedef struct _XIMHotKeyTriggers {
    int num_hot_key;
    XIMHotKeyTrigger *key;
} XIMHotKeyTriggers;
typedef unsigned long int XIMHotKeyState;
typedef struct {
    unsigned short count_values;
    char **supported_values;
} XIMValuesList;
typedef void (*XIMProc) (XIM, XPointer, XPointer);
typedef int (*XICProc) (XIC, XPointer, XPointer);
typedef enum {
    XIMForwardChar = 0,
    XIMBackwardChar = 1,
    XIMForwardWord = 2,
    XIMBackwardWord = 3,
    XIMCaretUp = 4,
    XIMCaretDown = 5,
    XIMNextLine = 6,
    XIMPreviousLine = 7,
    XIMLineStart = 8,
    XIMLineEnd = 9,
    XIMAbsolutePosition = 10,
    XIMDontChange = 11
} XIMCaretDirection;
typedef enum {
    XIMIsInvisible = 0,
    XIMIsPrimary = 1,
    XIMIsSecondary = 2
} XIMCaretStyle;
typedef enum {
    XIMTextType = 0,
    XIMBitmapType = 1
} XIMStatusDataType;
typedef int (*XErrorHandler) (Display *, XErrorEvent *);
typedef int (*XIOErrorHandler) (Display *);
typedef void (*XConnectionWatchProc) (Display *, XPointer, int, int,
				      XPointer *);

#define XNArea	"area"
#define XNAreaNeeded	"areaNeeded"
#define XNBackground	"background"
#define XNBackgroundPixmap	"backgroundPixmap"
#define XNBaseFontName	"baseFontName"
#define XNClientWindow	"clientWindow"
#define XNColormap	"colorMap"
#define XNContextualDrawing	"contextualDrawing"
#define XNCursor	"cursor"
#define XNDefaultString	"defaultString"
#define XNDestroyCallback	"destroyCallback"
#define XNDirectionalDependentDrawing	"directionalDependentDrawing"
#define XNFilterEvents	"filterEvents"
#define XNFocusWindow	"focusWindow"
#define XNFontInfo	"fontInfo"
#define XNFontSet	"fontSet"
#define XNForeground	"foreground"
#define XNGeometryCallback	"geometryCallback"
#define XNHotKey	"hotKey"
#define XNHotKeyState	"hotKeyState"
#define XNInputStyle	"inputStyle"
#define XNLineSpace	"lineSpace"
#define XNMissingCharSet	"missingCharSet"
#define XNOMAutomatic	"omAutomatic"
#define XNOrientation	"orientation"
#define XNPreeditAttributes	"preeditAttributes"
#define XNPreeditCaretCallback	"preeditCaretCallback"
#define XNPreeditDoneCallback	"preeditDoneCallback"
#define XNPreeditDrawCallback	"preeditDrawCallback"
#define XNPreeditStartCallback	"preeditStartCallback"
#define XNPreeditState	"preeditState"
#define XNPreeditStateNotifyCallback	"preeditStateNotifyCallback"
#define XNQueryICValuesList	"queryICValuesList"
#define XNQueryIMValuesList	"queryIMValuesList"
#define XNQueryInputStyle	"queryInputStyle"
#define XNQueryOrientation	"queryOrientation"
#define XNR6PreeditCallback	"r6PreeditCallback"
#define XNRequiredCharSet	"requiredCharSet"
#define XNResetState	"resetState"
#define XNResourceClass	"resourceClass"
#define XNResourceName	"resourceName"
#define XNSeparatorofNestedList	"separatorofNestedList"
#define XNSpotLocation	"spotLocation"
#define XNStatusAttributes	"statusAttributes"
#define XNStatusDoneCallback	"statusDoneCallback"
#define XNStatusDrawCallback	"statusDrawCallback"
#define XNStatusStartCallback	"statusStartCallback"
#define XNStdColormap	"stdColorMap"
#define XNStringConversion	"stringConversion"
#define XNStringConversionCallback	"stringConversionCallback"
#define XNVisiblePosition	"visiblePosition"
#define XNVaNestedList	"XNVaNestedList"
#define ScreenOfDisplay(dpy,scr)	(&amp;((_XPrivDisplay)dpy)->screens[scr])
#define BitmapBitOrder(dpy)	(((_XPrivDisplay)dpy)->bitmap_bit_order)
#define BitmapPad(dpy)	(((_XPrivDisplay)dpy)->bitmap_pad)
#define BitmapUnit(dpy)	(((_XPrivDisplay)dpy)->bitmap_unit)
#define ImageByteOrder(dpy)	(((_XPrivDisplay)dpy)->byte_order)
#define DefaultScreen(dpy)	(((_XPrivDisplay)dpy)->default_screen)
#define DisplayString(dpy)	(((_XPrivDisplay)dpy)->display_name)
#define ConnectionNumber(dpy)	(((_XPrivDisplay)dpy)->fd)
#define LastKnownRequestProcessed(dpy)	(((_XPrivDisplay)dpy)->last_request_read)
#define ScreenCount(dpy)	(((_XPrivDisplay)dpy)->nscreens)
#define ProtocolVersion(dpy)	(((_XPrivDisplay)dpy)->proto_major_version)
#define ProtocolRevision(dpy)	(((_XPrivDisplay)dpy)->proto_minor_version)
#define QLength(dpy)	(((_XPrivDisplay)dpy)->qlen)
#define VendorRelease(dpy)	(((_XPrivDisplay)dpy)->release)
#define NextRequest(dpy)	(((_XPrivDisplay)dpy)->request+1)
#define ServerVendor(dpy)	(((_XPrivDisplay)dpy)->vendor)
#define XAllocID(dpy)	((*((_XPrivDisplay)dpy)->resource_alloc)((dpy)))
#define DoesBackingStore(s)	((s)->backing_store)
#define BlackPixelOfScreen(s)	((s)->black_pixel)
#define DefaultColormapOfScreen(s)	((s)->cmap)
#define DefaultGCOfScreen(s)	((s)->default_gc)
#define DisplayOfScreen(s)	((s)->display)
#define HeightOfScreen(s)	((s)->height)
#define MaxCmapsOfScreen(s)	((s)->max_maps)
#define HeightMMOfScreen(s)	((s)->mheight)
#define MinCmapsOfScreen(s)	((s)->min_maps)
#define WidthMMOfScreen(s)	((s)->mwidth)
#define RootWindowOfScreen(s)	((s)->root)
#define DefaultDepthOfScreen(s)	((s)->root_depth)
#define PlanesOfScreen(s)	((s)->root_depth)
#define EventMaskOfScreen(s)	((s)->root_input_mask)
#define DefaultVisualOfScreen(s)	((s)->root_visual)
#define DoesSaveUnders(s)	((s)->save_unders)
#define WhitePixelOfScreen(s)	((s)->white_pixel)
#define WidthOfScreen(s)	((s)->width)
#define AllPlanes	((unsigned long)~0L)
#define XIMStringConversionLeftEdge	(0x00000001)
#define XIMStringConversionRightEdge	(0x00000002)
#define XIMStringConversionTopEdge	(0x00000004)
#define XIMStringConversionBottomEdge	(0x00000008)
#define XIMStringConversionConcealed	(0x00000010)
#define XIMStringConversionWrapped	(0x00000020)
#define XIMStringConversionBuffer	(0x0001)
#define XIMStringConversionSubstitution	(0x0001)
#define XIMHotKeyStateON	(0x0001L)
#define XIMStringConversionLine	(0x0002)
#define XIMStringConversionRetrieval	(0x0002)
#define XIMHotKeyStateOFF	(0x0002L)
#define XIMStringConversionWord	(0x0003)
#define XIMStringConversionChar	(0x0004)
#define XIMPreeditDisable	(1L&lt;&lt;1)
#define XIMPreserveState	(1L&lt;&lt;1)
#define XIMUnderline	(1L&lt;&lt;1)
#define XIMVisibleToCenter	(1L&lt;&lt;10)
#define XIMHighlight	(1L&lt;&lt;2)
#define XIMPrimary	(1L&lt;&lt;5)
#define XIMSecondary	(1L&lt;&lt;6)
#define XIMTertiary	(1L&lt;&lt;7)
#define XIMVisibleToForward	(1L&lt;&lt;8)
#define XIMVisibleToBackword	(1L&lt;&lt;9)
#define DisplayCells(dpy,scr)	(DefaultVisual(dpy,scr)->map_entries)
#define CellsOfScreen(s)	(DefaultVisualOfScreen((s))->map_entries)
#define DefaultRootWindow(dpy)	(ScreenOfDisplay(dpy,DefaultScreen(dpy))->root)
#define BlackPixel(dpy,scr)	(ScreenOfDisplay(dpy,scr)->black_pixel)
#define DefaultColormap(dpy,scr)	(ScreenOfDisplay(dpy,scr)->cmap)
#define DefaultGC(dpy,scr)	(ScreenOfDisplay(dpy,scr)->default_gc)
#define DisplayHeight(dpy,scr)	(ScreenOfDisplay(dpy,scr)->height)
#define DisplayHeightMM(dpy,scr)	(ScreenOfDisplay(dpy,scr)->mheight)
#define DisplayWidthMM(dpy,scr)	(ScreenOfDisplay(dpy,scr)->mwidth)
#define RootWindow(dpy, scr)	(ScreenOfDisplay(dpy,scr)->root)
#define DefaultDepth(dpy,scr)	(ScreenOfDisplay(dpy,scr)->root_depth)
#define DisplayPlanes(dpy,scr)	(ScreenOfDisplay(dpy,scr)->root_depth)
#define DefaultVisual(dpy,scr)	(ScreenOfDisplay(dpy,scr)->root_visual)
#define WhitePixel(dpy,scr)	(ScreenOfDisplay(dpy,scr)->white_pixel)
#define DisplayWidth(dpy,scr)	(ScreenOfDisplay(dpy,scr)->width)
#define XBufferOverflow	-1
#define False	0
#define QueuedAlready	0
#define XIMPreeditUnKnown	0L
#define XIMPreeditArea	0x0001L
#define XIMPreeditCallbacks	0x0002L
#define XIMPreeditPosition	0x0004L
#define XIMPreeditNothing	0x0008L
#define XIMPreeditNone	0x0010L
#define XIMStatusArea	0x0100L
#define XIMStatusCallbacks	0x0200L
#define XIMStatusNothing	0x0400L
#define XIMStatusNone	0x0800L
#define QueuedAfterReading	1
#define True	1
#define XLookupNone	1
#define XIMInitialState	1L
#define XIMPreeditEnable	1L
#define XIMReverse	1L
#define QueuedAfterFlush	2
#define XLookupChars	2
#define XLookupKeySym	3
#define XLookupBoth	4
#define XlibSpecificationRelease	6
#define Bool	int
#define Status	int
#define DefaultScreenOfDisplay(dpy)	ScreenOfDisplay(dpy,DefaultScreen(dpy))

typedef struct _XExtData {
    int number;
    struct _XExtData *next;
    int (*free_private) (struct _XExtData * extension);
    XPointer private_data;
} XExtData;
typedef struct {
    int extension;
    int major_opcode;
    int first_event;
    int first_error;
} XExtCodes;

typedef struct {
    int depth;
    int bits_per_pixel;
    int scanline_pad;
} XPixmapFormatValues;

typedef struct {
    int function;
    unsigned long int plane_mask;
    unsigned long int foreground;
    unsigned long int background;
    int line_width;
    int line_style;
    int cap_style;
    int join_style;
    int fill_style;
    int fill_rule;
    int arc_mode;
    Pixmap tile;
    Pixmap stipple;
    int ts_x_origin;
    int ts_y_origin;
    Font font;
    int subwindow_mode;
    int graphics_exposures;
    int clip_x_origin;
    int clip_y_origin;
    Pixmap clip_mask;
    int dash_offset;
    char dashes;
} XGCValues;

struct _XGC;
typedef struct _XGC *GC;

typedef struct {
    XExtData *ext_data;
    VisualID visualid;
    int c_class;
    unsigned long int red_mask;
    unsigned long int green_mask;
    unsigned long int blue_mask;
    int bits_per_rgb;
    int map_entries;
} Visual;

typedef struct {
    int depth;
    int nvisuals;
    Visual *visuals;
} Depth;

typedef struct {
    XExtData *ext_data;
    struct _XDisplay *display;
    Window root;
    int width;
    int height;
    int mwidth;
    int mheight;
    int ndepths;
    Depth *depths;
    int root_depth;
    Visual *root_visual;
    GC default_gc;
    Colormap cmap;
    unsigned long int white_pixel;
    unsigned long int black_pixel;
    int max_maps;
    int min_maps;
    int backing_store;
    int save_unders;
    long int root_input_mask;
} Screen;

typedef struct {
    XExtData *ext_data;
    int depth;
    int bits_per_pixel;
    int scanline_pad;
} ScreenFormat;

typedef struct {
    Pixmap background_pixmap;
    unsigned long int background_pixel;
    Pixmap border_pixmap;
    unsigned long int border_pixel;
    int bit_gravity;
    int win_gravity;
    int backing_store;
    unsigned long int backing_planes;
    unsigned long int backing_pixel;
    int save_under;
    long int event_mask;
    long int do_not_propagate_mask;
    int override_redirect;
    Colormap colormap;
    Cursor cursor;
} XSetWindowAttributes;
typedef struct {
    int x;
    int y;
    int width;
    int height;
    int border_width;
    int depth;
    Visual *visual;
    Window root;
    int c_class;
    int bit_gravity;
    int win_gravity;
    int backing_store;
    unsigned long int backing_planes;
    unsigned long int backing_pixel;
    int save_under;
    Colormap colormap;
    int map_installed;
    int map_state;
    long int all_event_masks;
    long int your_event_mask;
    long int do_not_propagate_mask;
    int override_redirect;
    Screen *screen;
} XWindowAttributes;

typedef struct {
    int family;
    int length;
    char *address;
} XHostAddress;

struct funcs {
    struct _XImage *(*create_image) (void);
    int (*destroy_image) (void);
    unsigned long int (*get_pixel) (void);
    int (*put_pixel) (void);
    struct _XImage *(*sub_image) (void);
    int (*add_pixel) (void);
};
typedef struct _XImage {
    int width;
    int height;
    int xoffset;
    int format;
    char *data;
    int byte_order;
    int bitmap_unit;
    int bitmap_bit_order;
    int bitmap_pad;
    int depth;
    int bytes_per_line;
    int bits_per_pixel;
    unsigned long int red_mask;
    unsigned long int green_mask;
    unsigned long int blue_mask;
    XPointer obdata;
    struct funcs f;
} XImage;

typedef struct {
    int x;
    int y;
    int width;
    int height;
    int border_width;
    Window sibling;
    int stack_mode;
} XWindowChanges;

typedef struct {
    short x1;
    short y1;
    short x2;
    short y2;
} XSegment;
typedef struct {
    short x;
    short y;
} XPoint;
typedef struct {
    short x;
    short y;
    unsigned short width;
    unsigned short height;
} XRectangle;
typedef struct {
    short x;
    short y;
    unsigned short width;
    unsigned short height;
    short angle1;
    short angle2;
} XArc;

typedef struct {
    int key_click_percent;
    int bell_percent;
    int bell_pitch;
    int bell_duration;
    int led;
    int led_mode;
    int key;
    int auto_repeat_mode;
} XKeyboardControl;

typedef struct {
    int key_click_percent;
    int bell_percent;
    unsigned int bell_pitch;
    unsigned int bell_duration;
    unsigned long int led_mask;
    int global_auto_repeat;
    char auto_repeats[32];
} XKeyboardState;

typedef struct {
    Time time;
    short x;
    short y;
} XTimeCoord;

typedef struct {
    int max_keypermod;
    KeyCode *modifiermap;
} XModifierKeymap;

typedef struct {
    XExtData *ext_data;
    struct _XPrivate *private1;
    int fd;
    int private2;
    int proto_major_version;
    int proto_minor_version;
    char *vendor;
    XID private3;
    XID private4;
    XID private5;
    int private6;
     XID(*resource_alloc) (struct _XDisplay *);
    int byte_order;
    int bitmap_unit;
    int bitmap_pad;
    int bitmap_bit_order;
    int nformats;
    ScreenFormat *pixmap_format;
    int private8;
    int release;
    struct _XPrivate *private9;
    struct _XPrivate *private10;
    int qlen;
    unsigned long int last_request_read;
    unsigned long int request;
    XPointer private11;
    XPointer private12;
    XPointer private13;
    XPointer private14;
    unsigned int max_request_size;
    struct _XrmHashBucketRec *db;
    int (*private15) (struct _XDisplay *);
    char *display_name;
    int default_screen;
    int nscreens;
    Screen *screens;
    unsigned long int motion_buffer;
    unsigned long int private16;
    int min_keycode;
    int max_keycode;
    XPointer private17;
    XPointer private18;
    int private19;
    char *xdefaults;
} *_XPrivDisplay;

typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Window window;
    Window root;
    Window subwindow;
    Time time;
    int x;
    int y;
    int x_root;
    int y_root;
    unsigned int state;
    unsigned int keycode;
    int same_screen;
} XKeyEvent;
typedef XKeyEvent XKeyPressedEvent;
typedef XKeyEvent XKeyReleasedEvent;
typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Window window;
    Window root;
    Window subwindow;
    Time time;
    int x;
    int y;
    int x_root;
    int y_root;
    unsigned int state;
    unsigned int button;
    int same_screen;
} XButtonEvent;
typedef XButtonEvent XButtonPressedEvent;
typedef XButtonEvent XButtonReleasedEvent;
typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Window window;
    Window root;
    Window subwindow;
    Time time;
    int x;
    int y;
    int x_root;
    int y_root;
    unsigned int state;
    char is_hint;
    int same_screen;
} XMotionEvent;
typedef XMotionEvent XPointerMovedEvent;
typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Window window;
    Window root;
    Window subwindow;
    Time time;
    int x;
    int y;
    int x_root;
    int y_root;
    int mode;
    int detail;
    int same_screen;
    int focus;
    unsigned int state;
} XCrossingEvent;
typedef XCrossingEvent XEnterWindowEvent;
typedef XCrossingEvent XLeaveWindowEvent;
typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Window window;
    int mode;
    int detail;
} XFocusChangeEvent;
typedef XFocusChangeEvent XFocusInEvent;
typedef XFocusChangeEvent XFocusOutEvent;
typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Window window;
    char key_vector[32];
} XKeymapEvent;
typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Window window;
    int x;
    int y;
    int width;
    int height;
    int count;
} XExposeEvent;
typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Drawable drawable;
    int x;
    int y;
    int width;
    int height;
    int count;
    int major_code;
    int minor_code;
} XGraphicsExposeEvent;
typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Drawable drawable;
    int major_code;
    int minor_code;
} XNoExposeEvent;
typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Window window;
    int state;
} XVisibilityEvent;
typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Window parent;
    Window window;
    int x;
    int y;
    int width;
    int height;
    int border_width;
    int override_redirect;
} XCreateWindowEvent;
typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Window event;
    Window window;
} XDestroyWindowEvent;
typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Window event;
    Window window;
    int from_configure;
} XUnmapEvent;
typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Window event;
    Window window;
    int override_redirect;
} XMapEvent;
typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Window parent;
    Window window;
} XMapRequestEvent;
typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Window event;
    Window window;
    Window parent;
    int x;
    int y;
    int override_redirect;
} XReparentEvent;
typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Window event;
    Window window;
    int x;
    int y;
    int width;
    int height;
    int border_width;
    Window above;
    int override_redirect;
} XConfigureEvent;
typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Window event;
    Window window;
    int x;
    int y;
} XGravityEvent;
typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Window window;
    int width;
    int height;
} XResizeRequestEvent;
typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Window parent;
    Window window;
    int x;
    int y;
    int width;
    int height;
    int border_width;
    Window above;
    int detail;
    unsigned long int value_mask;
} XConfigureRequestEvent;
typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Window event;
    Window window;
    int place;
} XCirculateEvent;
typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Window parent;
    Window window;
    int place;
} XCirculateRequestEvent;
typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Window window;
    Atom atom;
    Time time;
    int state;
} XPropertyEvent;
typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Window window;
    Atom selection;
    Time time;
} XSelectionClearEvent;
typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Window owner;
    Window requestor;
    Atom selection;
    Atom target;
    Atom property;
    Time time;
} XSelectionRequestEvent;
typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Window requestor;
    Atom selection;
    Atom target;
    Atom property;
    Time time;
} XSelectionEvent;
typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Window window;
    Colormap colormap;
    int c_new;
    int state;
} XColormapEvent;
typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Window window;
    Atom message_type;
    int format;
    union {
	char b[20];
	short s[10];
	long int l[5];
    } data;
} XClientMessageEvent;
typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Window window;
    int request;
    int first_keycode;
    int count;
} XMappingEvent;
typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Window window;
} XAnyEvent;

union _XEvent {
    int type;
    XAnyEvent xany;
    XKeyEvent xkey;
    XButtonEvent xbutton;
    XMotionEvent xmotion;
    XCrossingEvent xcrossing;
    XFocusChangeEvent xfocus;
    XExposeEvent xexpose;
    XGraphicsExposeEvent xgraphicsexpose;
    XNoExposeEvent xnoexpose;
    XVisibilityEvent xvisibility;
    XCreateWindowEvent xcreatewindow;
    XDestroyWindowEvent xdestroywindow;
    XUnmapEvent xunmap;
    XMapEvent xmap;
    XMapRequestEvent xmaprequest;
    XReparentEvent xreparent;
    XConfigureEvent xconfigure;
    XGravityEvent xgravity;
    XResizeRequestEvent xresizerequest;
    XConfigureRequestEvent xconfigurerequest;
    XCirculateEvent xcirculate;
    XCirculateRequestEvent xcirculaterequest;
    XPropertyEvent xproperty;
    XSelectionClearEvent xselectionclear;
    XSelectionRequestEvent xselectionrequest;
    XSelectionEvent xselection;
    XColormapEvent xcolormap;
    XClientMessageEvent xclient;
    XMappingEvent xmapping;
    XErrorEvent xerror;
    XKeymapEvent xkeymap;
    long int pad[24];
};
typedef union _XEvent {
    int type;
    XAnyEvent xany;
    XKeyEvent xkey;
    XButtonEvent xbutton;
    XMotionEvent xmotion;
    XCrossingEvent xcrossing;
    XFocusChangeEvent xfocus;
    XExposeEvent xexpose;
    XGraphicsExposeEvent xgraphicsexpose;
    XNoExposeEvent xnoexpose;
    XVisibilityEvent xvisibility;
    XCreateWindowEvent xcreatewindow;
    XDestroyWindowEvent xdestroywindow;
    XUnmapEvent xunmap;
    XMapEvent xmap;
    XMapRequestEvent xmaprequest;
    XReparentEvent xreparent;
    XConfigureEvent xconfigure;
    XGravityEvent xgravity;
    XResizeRequestEvent xresizerequest;
    XConfigureRequestEvent xconfigurerequest;
    XCirculateEvent xcirculate;
    XCirculateRequestEvent xcirculaterequest;
    XPropertyEvent xproperty;
    XSelectionClearEvent xselectionclear;
    XSelectionRequestEvent xselectionrequest;
    XSelectionEvent xselection;
    XColormapEvent xcolormap;
    XClientMessageEvent xclient;
    XMappingEvent xmapping;
    XErrorEvent xerror;
    XKeymapEvent xkeymap;
    long int pad[24];
} XEvent;

typedef struct {
    short lbearing;
    short rbearing;
    short width;
    short ascent;
    short descent;
    unsigned short attributes;
} XCharStruct;

typedef struct {
    Atom name;
    unsigned long int card32;
} XFontProp;
typedef struct {
    XExtData *ext_data;
    Font fid;
    unsigned int direction;
    unsigned int min_char_or_byte2;
    unsigned int max_char_or_byte2;
    unsigned int min_byte1;
    unsigned int max_byte1;
    int all_chars_exist;
    unsigned int default_char;
    int n_properties;
    XFontProp *properties;
    XCharStruct min_bounds;
    XCharStruct max_bounds;
    XCharStruct *per_char;
    int ascent;
    int descent;
} XFontStruct;
typedef struct {
    XRectangle max_ink_extent;
    XRectangle max_logical_extent;
} XFontSetExtents;

typedef struct {
    char *chars;
    int nchars;
    int delta;
    Font font;
} XTextItem;
typedef struct {
    unsigned char byte1;
    unsigned char byte2;
} XChar2b;
typedef struct {
    XChar2b *chars;
    int nchars;
    int delta;
    Font font;
} XTextItem16;

typedef union {
    Display *display;
    GC gc;
    Visual *visual;
    Screen *screen;
    ScreenFormat *pixmap_format;
    XFontStruct *font;
} XEDataObject;

typedef struct _XOM *XOM;
typedef struct _XOC *XOC;
typedef struct _XOC *XFontSet;

typedef struct {
    char *chars;
    int nchars;
    int delta;
    XFontSet font_set;
} XmbTextItem;
typedef struct {
    wchar_t *chars;
    int nchars;
    int delta;
    XFontSet font_set;
} XwcTextItem;

typedef struct {
    int charset_count;
    char **charset_list;
} XOMCharSetList;
typedef enum XOrientation;
typedef struct {
    int num_font;
    XFontStruct **font_struct_list;
    char **font_name_list;
} XOMFontInfo;
typedef struct {
    int num_orientation;
    XOrientation *orientation;
} XOMOrientation;

typedef unsigned long int XIMStyle;
typedef struct {
    unsigned short count_styles;
    XIMStyle *supported_styles;
} XIMStyles;
typedef struct {
    XPointer client_data;
    XIMProc callback;
} XIMCallback;
typedef struct {
    XPointer client_data;
    XICProc callback;
} XICCallback;
typedef void (*XIDProc) (Display *, XPointer, XPointer);
extern int XActivateScreenSaver(Display *);
extern int XAddConnectionWatch(Display *, XConnectionWatchProc, XPointer);
extern XExtCodes *XAddExtension(Display *);
extern int XAddHost(Display *, XHostAddress *);
extern int XAddHosts(Display *, XHostAddress *, int);
extern int XAddToExtensionList(struct _XExtData **, XExtData *);
extern int XAddToSaveSet(Display *, Window);
extern unsigned long int XAllPlanes(void);
extern int XAllocColor(Display *, Colormap, XColor *);
extern int XAllocColorCells(Display *, Colormap, int, unsigned long int *,
			    unsigned int, unsigned long int *,
			    unsigned int);
extern int XAllocColorPlanes(Display *, Colormap, int, unsigned long int *,
			     int, int, int, int, unsigned long int *,
			     unsigned long int *, unsigned long int *);
extern int XAllocNamedColor(Display *, Colormap, const char *, XColor *,
			    XColor *);
extern int XAllowEvents(Display *, int, Time);
extern int XAutoRepeatOff(Display *);
extern int XAutoRepeatOn(Display *);
extern char *XBaseFontNameListOfFontSet(XFontSet);
extern int XBell(Display *, int);
extern int XBitmapBitOrder(Display *);
extern int XBitmapPad(Display *);
extern int XBitmapUnit(Display *);
extern unsigned long int XBlackPixel(Display *, int);
extern unsigned long int XBlackPixelOfScreen(Screen *);
extern int XCellsOfScreen(Screen *);
extern int XChangeActivePointerGrab(Display *, unsigned int, Cursor, Time);
extern int XChangeGC(Display *, GC, unsigned long int, XGCValues *);
extern int XChangeKeyboardControl(Display *, unsigned long int,
				  XKeyboardControl *);
extern int XChangeKeyboardMapping(Display *, int, int, KeySym *, int);
extern int XChangePointerControl(Display *, int, int, int, int, int);
extern int XChangeProperty(Display *, Window, Atom, Atom, int, int,
			   const unsigned char *, int);
extern int XChangeSaveSet(Display *, Window, int);
extern int XChangeWindowAttributes(Display *, Window, unsigned long int,
				   XSetWindowAttributes *);
extern int XCheckIfEvent(Display *, XEvent *,
			 int (*)(Display *, XEvent *, XPointer)
			 , XPointer);
extern int XCheckMaskEvent(Display *, long int, XEvent *);
extern int XCheckTypedEvent(Display *, int, XEvent *);
extern int XCheckTypedWindowEvent(Display *, Window, int, XEvent *);
extern int XCheckWindowEvent(Display *, Window, long int, XEvent *);
extern int XCirculateSubwindows(Display *, Window, int);
extern int XCirculateSubwindowsDown(Display *, Window);
extern int XCirculateSubwindowsUp(Display *, Window);
extern int XClearArea(Display *, Window, int, int, unsigned int,
		      unsigned int, int);
extern int XClearWindow(Display *, Window);
extern int XCloseDisplay(Display *);
extern int XCloseIM(XIM);
extern int XCloseOM(XOM);
extern int XConfigureWindow(Display *, Window, unsigned int,
			    XWindowChanges *);
extern int XConnectionNumber(Display *);
extern int XContextDependentDrawing(XFontSet);
extern int XContextualDrawing(XFontSet);
extern int XConvertSelection(Display *, Atom, Atom, Atom, Window, Time);
extern int XCopyArea(Display *, Drawable, Drawable, GC, int, int,
		     unsigned int, unsigned int, int, int);
extern Colormap XCopyColormapAndFree(Display *, Colormap);
extern int XCopyGC(Display *, GC, unsigned long int, GC);
extern int XCopyPlane(Display *, Drawable, Drawable, GC, int, int,
		      unsigned int, unsigned int, int, int,
		      unsigned long int);
extern Pixmap XCreateBitmapFromData(Display *, Drawable, const char *,
				    unsigned int, unsigned int);
extern Colormap XCreateColormap(Display *, Window, Visual *, int);
extern Cursor XCreateFontCursor(Display *, unsigned int);
extern XFontSet XCreateFontSet(Display *, const char *, char ***, int *,
			       char **);
extern GC XCreateGC(Display *, Drawable, unsigned long int, XGCValues *);
extern Cursor XCreateGlyphCursor(Display *, Font, Font, unsigned int,
				 unsigned int, const XColor *,
				 const XColor *);
extern XIC XCreateIC(XIM, ...);
extern XImage *XCreateImage(Display *, Visual *, unsigned int, int, int,
			    char *, unsigned int, unsigned int, int, int);
extern XOC XCreateOC(XOM, ...);
extern Pixmap XCreatePixmap(Display *, Drawable, unsigned int,
			    unsigned int, unsigned int);
extern Cursor XCreatePixmapCursor(Display *, Pixmap, Pixmap, XColor *,
				  XColor *, unsigned int, unsigned int);
extern Pixmap XCreatePixmapFromBitmapData(Display *, Drawable, char *,
					  unsigned int, unsigned int,
					  unsigned long int,
					  unsigned long int, unsigned int);
extern Window XCreateSimpleWindow(Display *, Window, int, int,
				  unsigned int, unsigned int, unsigned int,
				  unsigned long int, unsigned long int);
extern Window XCreateWindow(Display *, Window, int, int, unsigned int,
			    unsigned int, unsigned int, int, unsigned int,
			    Visual *, unsigned long int,
			    XSetWindowAttributes *);
extern Colormap XDefaultColormap(Display *, int);
extern Colormap XDefaultColormapOfScreen(Screen *);
extern int XDefaultDepth(Display *, int);
extern int XDefaultDepthOfScreen(Screen *);
extern GC XDefaultGC(Display *, int);
extern GC XDefaultGCOfScreen(Screen *);
extern Window XDefaultRootWindow(Display *);
extern int XDefaultScreen(Display *);
extern Screen *XDefaultScreenOfDisplay(Display *);
extern Visual *XDefaultVisual(Display *, int);
extern Visual *XDefaultVisualOfScreen(Screen *);
extern int XDefineCursor(Display *, Window, Cursor);
extern XModifierKeymap *XDeleteModifiermapEntry(XModifierKeymap *,
						unsigned int, int);
extern int XDeleteProperty(Display *, Window, Atom);
extern void XDestroyIC(XIC);
extern void XDestroyOC(XOC);
extern int XDestroySubwindows(Display *, Window);
extern int XDestroyWindow(Display *, Window);
extern int XDirectionalDependentDrawing(XFontSet);
extern int XDisableAccessControl(Display *);
extern int XDisplayCells(Display *, int);
extern int XDisplayHeight(Display *, int);
extern int XDisplayHeightMM(Display *, int);
extern int XDisplayKeycodes(Display *, int *, int *);
extern unsigned long int XDisplayMotionBufferSize(Display *);
extern char *XDisplayName(const char *);
extern Display *XDisplayOfIM(XIM);
extern Display *XDisplayOfOM(XOM);
extern Display *XDisplayOfScreen(Screen *);
extern int XDisplayPlanes(Display *, int);
extern char *XDisplayString(Display *);
extern int XDisplayWidth(Display *, int);
extern int XDisplayWidthMM(Display *, int);
extern int XDoesBackingStore(Screen *);
extern int XDoesSaveUnders(Screen *);
extern int XDrawArc(Display *, Drawable, GC, int, int, unsigned int,
		    unsigned int, int, int);
extern int XDrawArcs(Display *, Drawable, GC, XArc *, int);
extern int XDrawImageString(Display *, Drawable, GC, int, int,
			    const char *, int);
extern int XDrawImageString16(Display *, Drawable, GC, int, int,
			      const XChar2b *, int);
extern int XDrawLine(Display *, Drawable, GC, int, int, int, int);
extern int XDrawLines(Display *, Drawable, GC, XPoint *, int, int);
extern int XDrawPoint(Display *, Drawable, GC, int, int);
extern int XDrawPoints(Display *, Drawable, GC, XPoint *, int, int);
extern int XDrawRectangle(Display *, Drawable, GC, int, int, unsigned int,
			  unsigned int);
extern int XDrawRectangles(Display *, Drawable, GC, XRectangle *, int);
extern int XDrawSegments(Display *, Drawable, GC, XSegment *, int);
extern int XDrawString(Display *, Drawable, GC, int, int, const char *,
		       int);
extern int XDrawString16(Display *, Drawable, GC, int, int,
			 const XChar2b *, int);
extern int XDrawText(Display *, Drawable, GC, int, int, XTextItem *, int);
extern int XDrawText16(Display *, Drawable, GC, int, int, XTextItem16 *,
		       int);
extern XExtData **XEHeadOfExtensionList(XEDataObject);
extern
    void (*XESetBeforeFlush
	  (Display *, int,
	   void (*XESetBeforeFlush) (Display *, XExtCodes *, const char *,
				     long int)
	  )) (Display *, XExtCodes *, const char *, long int);
extern
    int (*XESetCloseDisplay
	 (Display *, int, int (*XESetCloseDisplay) (Display *, XExtCodes *)
	 )) (Display *, XExtCodes *);
extern
    int (*XESetCopyGC
	 (Display *, int, int (*XESetCopyGC) (Display *, GC, XExtCodes *)
	 )) (Display *, GC, XExtCodes *);
extern
    int (*XESetCreateFont
	 (Display *, int,
	  int (*XESetCreateFont) (Display *, XFontStruct *, XExtCodes *)
	 )) (Display *, XFontStruct *, XExtCodes *);
extern
    int (*XESetCreateGC
	 (Display *, int, int (*XESetCreateGC) (Display *, GC, XExtCodes *)
	 )) (Display *, GC, XExtCodes *);
extern
    int (*XESetError
	 (Display *, int,
	  int (*XESetError) (Display *, xError *, XExtCodes *, int *)
	 )) (Display *, xError *, XExtCodes *, int *);
extern char
    *(*XESetErrorString
      (Display *, int,
       char *(*XESetErrorString) (Display *, int, XExtCodes *, char *, int)
      )) (Display *, int, XExtCodes *, char *, int);
extern
    int (*XESetEventToWire
	 (Display *, int,
	  int (*XESetEventToWire) (Display *, XEvent *, xEvent *)
	 )) (Display *, XEvent *, xEvent *);
extern
    int (*XESetFlushGC
	 (Display *, int, int (*XESetFlushGC) (Display *, GC, XExtCodes *)
	 )) (Display *, GC, XExtCodes *);
extern
    int (*XESetFreeFont
	 (Display *, int,
	  int (*XESetFreeFont) (Display *, XFontStruct *, XExtCodes *)
	 )) (Display *, XFontStruct *, XExtCodes *);
extern
    int (*XESetFreeGC
	 (Display *, int, int (*XESetFreeGC) (Display *, GC, XExtCodes *)
	 )) (Display *, GC, XExtCodes *);
extern
    void (*XESetPrintErrorValues
	  (Display *, int,
	   void (*XESetPrintErrorValues) (Display *, XErrorEvent *, void *)
	  )) (Display *, XErrorEvent *, void *);
extern
    int (*XESetWireToError
	 (Display *, int,
	  int (*XESetWireToError) (Display *, XErrorEvent *, xError *)
	 )) (Display *, XErrorEvent *, xError *);
extern
    int (*XESetWireToEvent
	 (Display *, int,
	  int (*XESetWireToEvent) (Display *, XEvent *, xEvent *)
	 )) (Display *, XEvent *, xEvent *);
extern int XEnableAccessControl(Display *);
extern long int XEventMaskOfScreen(Screen *);
extern int XEventsQueued(Display *, int);
extern long int XExtendedMaxRequestSize(Display *);
extern XFontSetExtents *XExtentsOfFontSet(XFontSet);
extern char *XFetchBuffer(Display *, int *, int);
extern char *XFetchBytes(Display *, int *);
extern int XFetchName(Display *, Window, char **);
extern int XFillArc(Display *, Drawable, GC, int, int, unsigned int,
		    unsigned int, int, int);
extern int XFillArcs(Display *, Drawable, GC, XArc *, int);
extern int XFillPolygon(Display *, Drawable, GC, XPoint *, int, int, int);
extern int XFillRectangle(Display *, Drawable, GC, int, int, unsigned int,
			  unsigned int);
extern int XFillRectangles(Display *, Drawable, GC, XRectangle *, int);
extern int XFilterEvent(XEvent *, Window);
extern XExtData *XFindOnExtensionList(XExtData * *, int);
extern int XFlush(Display *);
extern void XFlushGC(Display *, GC);
extern int XFontsOfFontSet(XFontSet, XFontStruct * **, char ***);
extern int XForceScreenSaver(Display *, int);
extern int XFree(void *);
extern int XFreeColormap(Display *, Colormap);
extern int XFreeColors(Display *, Colormap, unsigned long int *, int,
		       unsigned long int);
extern int XFreeCursor(Display *, Cursor);
extern int XFreeExtensionList(char **);
extern int XFreeFont(Display *, XFontStruct *);
extern int XFreeFontInfo(char **, XFontStruct *, int);
extern int XFreeFontNames(char **);
extern int XFreeFontPath(char **);
extern void XFreeFontSet(Display *, XFontSet);
extern int XFreeGC(Display *, GC);
extern int XFreeModifiermap(XModifierKeymap *);
extern int XFreePixmap(Display *, Pixmap);
extern void XFreeStringList(char **);
extern GContext XGContextFromGC(GC);
extern int XGeometry(Display *, int, const char *, const char *,
		     unsigned int, unsigned int, unsigned int, int, int,
		     int *, int *, int *, int *);
extern char *XGetAtomName(Display *, Atom);
extern int XGetAtomNames(Display *, Atom *, int, char **);
extern int XGetCommand(Display *, Window, char ***, int *);
extern char *XGetDefault(Display *, const char *, const char *);
extern int XGetErrorDatabaseText(Display *, const char *, const char *,
				 const char *, char *, int);
extern int XGetErrorText(Display *, int, char *, int);
extern char **XGetFontPath(Display *, int *);
extern int XGetFontProperty(XFontStruct *, Atom, unsigned long int *);
extern int XGetGCValues(Display *, GC, unsigned long int, XGCValues *);
extern int XGetGeometry(Display *, Drawable, Window *, int *, int *,
			unsigned int *, unsigned int *, unsigned int *,
			unsigned int *);
extern char *XGetICValues(XIC, ...);
extern char *XGetIMValues(XIM, ...);
extern int XGetIconName(Display *, Window, char **);
extern XImage *XGetImage(Display *, Drawable, int, int, unsigned int,
			 unsigned int, unsigned long int, int);
extern int XGetInputFocus(Display *, Window *, int *);
extern int XGetKeyboardControl(Display *, XKeyboardState *);
extern KeySym *XGetKeyboardMapping(Display *, unsigned int, int, int *);
extern XModifierKeymap *XGetModifierMapping(Display *);
extern XTimeCoord *XGetMotionEvents(Display *, Window, Time, Time, int *);
extern char *XGetOCValues(XOC, ...);
extern char *XGetOMValues(XOM, ...);
extern int XGetPointerControl(Display *, int *, int *, int *);
extern int XGetPointerMapping(Display *, unsigned char *, int);
extern int XGetScreenSaver(Display *, int *, int *, int *, int *);
extern Window XGetSelectionOwner(Display *, Atom);
extern XImage *XGetSubImage(Display *, Drawable, int, int, unsigned int,
			    unsigned int, unsigned long int, int, XImage *,
			    int, int);
extern int XGetTransientForHint(Display *, Window, Window *);
extern int XGetWMColormapWindows(Display *, Window, Window * *, int *);
extern int XGetWMProtocols(Display *, Window, Atom * *, int *);
extern int XGetWindowAttributes(Display *, Window, XWindowAttributes *);
extern int XGetWindowProperty(Display *, Window, Atom, long int, long int,
			      int, Atom, Atom *, int *,
			      unsigned long int *, unsigned long int *,
			      unsigned char **);
extern int XGrabButton(Display *, unsigned int, unsigned int, Window, int,
		       unsigned int, int, int, Window, Cursor);
extern int XGrabKey(Display *, int, unsigned int, Window, int, int, int);
extern int XGrabKeyboard(Display *, Window, int, int, int, Time);
extern int XGrabPointer(Display *, Window, int, unsigned int, int, int,
			Window, Cursor, Time);
extern int XGrabServer(Display *);
extern int XHeightMMOfScreen(Screen *);
extern int XHeightOfScreen(Screen *);
extern XIM XIMOfIC(XIC);
extern int XIconifyWindow(Display *, Window, int);
extern int XIfEvent(Display *, XEvent *,
		    int (*)(Display *, XEvent *, XPointer)
		    , XPointer);
extern int XImageByteOrder(Display *);
extern XExtCodes *XInitExtension(Display *, const char *);
extern int XInitImage(XImage *);
extern int XInitThreads(void);
extern XModifierKeymap *XInsertModifiermapEntry(XModifierKeymap *,
						unsigned int, int);
extern int XInstallColormap(Display *, Colormap);
extern Atom XInternAtom(Display *, const char *, int);
extern int XInternAtoms(Display *, char **, int, int, Atom *);
extern int XInternalConnectionNumbers(Display *, int **, int *);
extern KeySym XKeycodeToKeysym(Display *, unsigned int, int);
extern KeyCode XKeysymToKeycode(Display *, KeySym);
extern char *XKeysymToString(KeySym);
extern int XKillClient(Display *, XID);
extern unsigned long int XLastKnownRequestProcessed(Display *);
extern int *XListDepths(Display *, int, int *);
extern char **XListExtensions(Display *, int *);
extern char **XListFonts(Display *, const char *, int, int *);
extern char **XListFontsWithInfo(Display *, const char *, int, int *,
				 XFontStruct * *);
extern XHostAddress *XListHosts(Display *, int *, int *);
extern Colormap *XListInstalledColormaps(Display *, Window, int *);
extern XPixmapFormatValues *XListPixmapFormats(Display *, int *);
extern Atom *XListProperties(Display *, Window, int *);
extern Font XLoadFont(Display *, const char *);
extern XFontStruct *XLoadQueryFont(Display *, const char *);
extern char *XLocaleOfFontSet(XFontSet);
extern char *XLocaleOfIM(XIM);
extern char *XLocaleOfOM(XOM);
extern void XLockDisplay(Display *);
extern int XLookupColor(Display *, Colormap, const char *, XColor *,
			XColor *);
extern KeySym XLookupKeysym(XKeyEvent *, int);
extern int XLowerWindow(Display *, Window);
extern int XMapRaised(Display *, Window);
extern int XMapSubwindows(Display *, Window);
extern int XMapWindow(Display *, Window);
extern int XMaskEvent(Display *, long int, XEvent *);
extern int XMaxCmapsOfScreen(Screen *);
extern long int XMaxRequestSize(Display *);
extern int XMinCmapsOfScreen(Screen *);
extern int XMoveResizeWindow(Display *, Window, int, int, unsigned int,
			     unsigned int);
extern int XMoveWindow(Display *, Window, int, int);
extern XModifierKeymap *XNewModifiermap(int);
extern int XNextEvent(Display *, XEvent *);
extern unsigned long int XNextRequest(Display *);
extern int XNoOp(Display *);
extern XOM XOMOfOC(XOC);
extern Display *XOpenDisplay(const char *);
extern XIM XOpenIM(Display *, struct _XrmHashBucketRec *, char *, char *);
extern XOM XOpenOM(Display *, struct _XrmHashBucketRec *, const char *,
		   const char *);
extern int XParseColor(Display *, Colormap, const char *, XColor *);
extern int XParseGeometry(const char *, int *, int *, unsigned int *,
			  unsigned int *);
extern int XPeekEvent(Display *, XEvent *);
extern int XPeekIfEvent(Display *, XEvent *,
			int (*)(Display *, XEvent *, XPointer)
			, XPointer);
extern int XPending(Display *);
extern int XPlanesOfScreen(Screen *);
extern void XProcessInternalConnection(Display *, int);
extern int XProtocolRevision(Display *);
extern int XProtocolVersion(Display *);
extern int XPutBackEvent(Display *, XEvent *);
extern int XPutImage(Display *, Drawable, GC, XImage *, int, int, int, int,
		     unsigned int, unsigned int);
extern int XQLength(Display *);
extern int XQueryBestCursor(Display *, Drawable, unsigned int,
			    unsigned int, unsigned int *, unsigned int *);
extern int XQueryBestSize(Display *, int, Drawable, unsigned int,
			  unsigned int, unsigned int *, unsigned int *);
extern int XQueryBestStipple(Display *, Drawable, unsigned int,
			     unsigned int, unsigned int *, unsigned int *);
extern int XQueryBestTile(Display *, Drawable, unsigned int, unsigned int,
			  unsigned int *, unsigned int *);
extern int XQueryColor(Display *, Colormap, XColor *);
extern int XQueryColors(Display *, Colormap, XColor *, int);
extern int XQueryExtension(Display *, const char *, int *, int *, int *);
extern XFontStruct *XQueryFont(Display *, XID);
extern int XQueryKeymap(Display *, char[32]);
extern int XQueryPointer(Display *, Window, Window *, Window *, int *,
			 int *, int *, int *, unsigned int *);
extern int XQueryTextExtents(Display *, XID, const char *, int, int *,
			     int *, int *, XCharStruct *);
extern int XQueryTextExtents16(Display *, XID, const XChar2b *, int, int *,
			       int *, int *, XCharStruct *);
extern int XQueryTree(Display *, Window, Window *, Window *, Window * *,
		      unsigned int *);
extern int XRaiseWindow(Display *, Window);
extern int XReadBitmapFile(Display *, Drawable, const char *,
			   unsigned int *, unsigned int *, Pixmap *, int *,
			   int *);
extern int XReadBitmapFileData(const char *, unsigned int *,
			       unsigned int *, unsigned char **, int *,
			       int *);
extern int XRebindKeysym(Display *, KeySym, KeySym *, int,
			 const unsigned char *, int);
extern int XRecolorCursor(Display *, Cursor, XColor *, XColor *);
extern int XReconfigureWMWindow(Display *, Window, int, unsigned int,
				XWindowChanges *);
extern int XRefreshKeyboardMapping(XMappingEvent *);
extern int XRegisterIMInstantiateCallback(Display *,
					  struct _XrmHashBucketRec *,
					  char *, char *, XIDProc,
					  XPointer);
extern void XRemoveConnectionWatch(Display *, XConnectionWatchProc,
				   XPointer);
extern int XRemoveFromSaveSet(Display *, Window);
extern int XRemoveHost(Display *, XHostAddress *);
extern int XRemoveHosts(Display *, XHostAddress *, int);
extern int XReparentWindow(Display *, Window, Window, int, int);
extern int XResetScreenSaver(Display *);
extern int XResizeWindow(Display *, Window, unsigned int, unsigned int);
extern char *XResourceManagerString(Display *);
extern int XRestackWindows(Display *, Window *, int);
extern Window XRootWindow(Display *, int);
extern Window XRootWindowOfScreen(Screen *);
extern int XRotateBuffers(Display *, int);
extern int XRotateWindowProperties(Display *, Window, Atom *, int, int);
extern int XScreenCount(Display *);
extern int XScreenNumberOfScreen(Screen *);
extern Screen *XScreenOfDisplay(Display *, int);
extern char *XScreenResourceString(Screen *);
extern int XSelectInput(Display *, Window, long int);
extern int XSendEvent(Display *, Window, int, long int, XEvent *);
extern char *XServerVendor(Display *);
extern int XSetAccessControl(Display *, int);
extern
    int (*XSetAfterFunction(Display *, int (*XSetAfterFunction) (Display *)
	 )) (Display *);
extern int XSetArcMode(Display *, GC, int);
extern void XSetAuthorization(char *, int, char *, int);
extern int XSetBackground(Display *, GC, unsigned long int);
extern int XSetClipMask(Display *, GC, Pixmap);
extern int XSetClipOrigin(Display *, GC, int, int);
extern int XSetClipRectangles(Display *, GC, int, int, XRectangle *, int,
			      int);
extern int XSetCloseDownMode(Display *, int);
extern int XSetCommand(Display *, Window, char **, int);
extern int XSetDashes(Display *, GC, int, const char *, int);
extern XErrorHandler XSetErrorHandler(XErrorHandler);
extern int XSetFillRule(Display *, GC, int);
extern int XSetFillStyle(Display *, GC, int);
extern int XSetFont(Display *, GC, Font);
extern int XSetFontPath(Display *, char **, int);
extern int XSetForeground(Display *, GC, unsigned long int);
extern int XSetFunction(Display *, GC, int);
extern int XSetGraphicsExposures(Display *, GC, int);
extern void XSetICFocus(XIC);
extern char *XSetICValues(XIC, ...);
extern char *XSetIMValues(XIM, ...);
extern XIOErrorHandler XSetIOErrorHandler(XIOErrorHandler);
extern int XSetIconName(Display *, Window, const char *);
extern int XSetInputFocus(Display *, Window, int, Time);
extern int XSetLineAttributes(Display *, GC, unsigned int, int, int, int);
extern char *XSetLocaleModifiers(const char *);
extern int XSetModifierMapping(Display *, XModifierKeymap *);
extern char *XSetOCValues(XOC, ...);
extern char *XSetOMValues(XOM, ...);
extern int XSetPlaneMask(Display *, GC, unsigned long int);
extern int XSetPointerMapping(Display *, const unsigned char *, int);
extern int XSetScreenSaver(Display *, int, int, int, int);
extern int XSetSelectionOwner(Display *, Atom, Window, Time);
extern int XSetState(Display *, GC, unsigned long int, unsigned long int,
		     int, unsigned long int);
extern int XSetStipple(Display *, GC, Pixmap);
extern int XSetSubwindowMode(Display *, GC, int);
extern int XSetTSOrigin(Display *, GC, int, int);
extern int XSetTile(Display *, GC, Pixmap);
extern int XSetTransientForHint(Display *, Window, Window);
extern int XSetWMColormapWindows(Display *, Window, Window *, int);
extern int XSetWMProtocols(Display *, Window, Atom *, int);
extern int XSetWindowBackground(Display *, Window, unsigned long int);
extern int XSetWindowBackgroundPixmap(Display *, Window, Pixmap);
extern int XSetWindowBorder(Display *, Window, unsigned long int);
extern int XSetWindowBorderPixmap(Display *, Window, Pixmap);
extern int XSetWindowBorderWidth(Display *, Window, unsigned int);
extern int XSetWindowColormap(Display *, Window, Colormap);
extern int XStoreBuffer(Display *, const char *, int, int);
extern int XStoreBytes(Display *, const char *, int);
extern int XStoreColor(Display *, Colormap, XColor *);
extern int XStoreColors(Display *, Colormap, XColor *, int);
extern int XStoreName(Display *, Window, const char *);
extern int XStoreNamedColor(Display *, Colormap, const char *,
			    unsigned long int, int);
extern KeySym XStringToKeysym(const char *);
extern int XSupportsLocale(void);
extern int XSync(Display *, int);
extern int (*XSynchronize(Display *, int)) (Display *);
extern int XTextExtents(XFontStruct *, const char *, int, int *, int *,
			int *, XCharStruct *);
extern int XTextExtents16(XFontStruct *, const XChar2b *, int, int *,
			  int *, int *, XCharStruct *);
extern int XTextWidth(XFontStruct *, const char *, int);
extern int XTextWidth16(XFontStruct *, const XChar2b *, int);
extern int XTranslateCoordinates(Display *, Window, Window, int, int,
				 int *, int *, Window *);
extern int XUndefineCursor(Display *, Window);
extern int XUngrabButton(Display *, unsigned int, unsigned int, Window);
extern int XUngrabKey(Display *, int, unsigned int, Window);
extern int XUngrabKeyboard(Display *, Time);
extern int XUngrabPointer(Display *, Time);
extern int XUngrabServer(Display *);
extern int XUninstallColormap(Display *, Colormap);
extern int XUnloadFont(Display *, Font);
extern void XUnlockDisplay(Display *);
extern int XUnmapSubwindows(Display *, Window);
extern int XUnmapWindow(Display *, Window);
extern int XUnregisterIMInstantiateCallback(Display *,
					    struct _XrmHashBucketRec *,
					    char *, char *, XIDProc,
					    XPointer);
extern void XUnsetICFocus(XIC);
extern XVaNestedList XVaCreateNestedList(int, ...);
extern int XVendorRelease(Display *);
extern VisualID XVisualIDFromVisual(Visual *);
extern int XWarpPointer(Display *, Window, Window, int, int, unsigned int,
			unsigned int, int, int);
extern unsigned long int XWhitePixel(Display *, int);
extern unsigned long int XWhitePixelOfScreen(Screen *);
extern int XWidthMMOfScreen(Screen *);
extern int XWidthOfScreen(Screen *);
extern int XWindowEvent(Display *, Window, long int, XEvent *);
extern int XWithdrawWindow(Display *, Window, int);
extern int XWriteBitmapFile(Display *, const char *, Pixmap, unsigned int,
			    unsigned int, int, int);
extern void XmbDrawImageString(Display *, Drawable, XFontSet, GC, int, int,
			       const char *, int);
extern void XmbDrawString(Display *, Drawable, XFontSet, GC, int, int,
			  const char *, int);
extern void XmbDrawText(Display *, Drawable, GC, int, int, XmbTextItem *,
			int);
extern int XmbLookupString(XIC, XKeyPressedEvent *, char *, int, KeySym *,
			   int *);
extern char *XmbResetIC(XIC);
extern int XmbTextEscapement(XFontSet, const char *, int);
extern int XmbTextExtents(XFontSet, const char *, int, XRectangle *,
			  XRectangle *);
extern int XmbTextPerCharExtents(XFontSet, const char *, int, XRectangle *,
				 XRectangle *, int, int *, XRectangle *,
				 XRectangle *);
extern void XrmInitialize(void);
extern void XwcDrawImageString(Display *, Drawable, XFontSet, GC, int, int,
			       const wchar_t *, int);
extern void XwcDrawString(Display *, Drawable, XFontSet, GC, int, int,
			  const wchar_t *, int);
extern void XwcDrawText(Display *, Drawable, GC, int, int, XwcTextItem *,
			int);
extern int XwcLookupString(XIC, XKeyPressedEvent *, wchar_t *, int,
			   KeySym *, int *);
extern wchar_t *XwcResetIC(XIC);
extern int XwcTextEscapement(XFontSet, const wchar_t *, int);
extern int XwcTextExtents(XFontSet, const wchar_t *, int, XRectangle *,
			  XRectangle *);
extern int XwcTextPerCharExtents(XFontSet, const wchar_t *, int,
				 XRectangle *, XRectangle *, int, int *,
				 XRectangle *, XRectangle *);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/Xlibint.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define NEED_EVENTS
#define NEED_REPLIES
#define UNLOCKED
#define WORD64ALIGN
#define min(a,b)	(((a) &lt; (b)) ? (a) : (b))
#define max(a,b)	(((a) > (b)) ? (a) : (b))
#define CI_NONEXISTCHAR(cs)	(((cs)->width == 0) &amp;&amp; (((cs)->rbearing|(cs)->lbearing| (cs)->ascent|(cs)->descent) == 0))
#define XAllocIDs(dpy,ids,n)	(*(dpy)->idlist_alloc)(dpy,ids,n)
#define XlibDisplayIOError	(1L &lt;&lt; 0)
#define XlibDisplayClosing	(1L &lt;&lt; 1)
#define XlibDisplayNoXkb	(1L &lt;&lt; 2)
#define XlibDisplayPrivSync	(1L &lt;&lt; 3)
#define XlibDisplayProcConni	(1L &lt;&lt; 4)
#define XlibDisplayReadEvents	(1L &lt;&lt; 5)
#define XlibDisplayReply	(1L &lt;&lt; 5)
#define XlibDisplayWriting	(1L &lt;&lt; 6)
#define XlibDisplayDfltRMDB	(1L &lt;&lt; 7)
#define LOCKED	1
#define WRCTSPERBATCH	10
#define PTSPERBATCH	1024
#define ZLNSPERBATCH	1024
#define BUFSIZE	2048
#define FARCSPERBATCH	256
#define FRCTSPERBATCH	256
#define XCONN_CHECK_FREQ	256
#define ZRCTSPERBATCH	256
#define WLNSPERBATCH	50
#define Xcalloc(nelem,elsize)	calloc((nelem), (elsize))
#define CI_GET_DEFAULT_INFO_1D(fs,cs)	CI_GET_CHAR_INFO_1D (fs, fs->default_char, NULL, cs)
#define CURSORFONT	"cursor"
#define Data16(dpy,data,len)	Data((dpy), (char *)(data), (len))
#define PackData16(dpy,data,len)	Data16 (dpy, data, len)
#define PackData32(dpy,data,len)	Data32 (dpy, data, len)
#define _XFopenFile(path,mode)	fopen(path,mode)
#define Xfree(ptr)	free((ptr))
#define LockDisplay(d)	if ((d)->lock_fns) (*(d)->lock_fns->lock_display)(d)
#define UnlockDisplay(d)	if ((d)->lock_fns) (*(d)->lock_fns->unlock_display)(d)
#define FlushGC(dpy,gc)	if ((gc)->dirty) _XFlushGCCache((dpy), (gc))
#define SetReqLen(req,n,badlen)	if ((req->length + n) > (unsigned)65535) { if (dpy->bigreq_size) { MakeBigReq(req,n) } else { n = badlen; req->length += n; } } else req->length += n
#define BufAlloc(type,ptr,n)	if (dpy->bufptr + (n) > dpy->bufmax) _XFlush (dpy); ptr = (type) dpy->bufptr; (void)ptr; dpy->bufptr += (n);
#define SyncHandle()	if (dpy->synchandler) (*dpy->synchandler)(dpy)
#define _XCreateMutex(lock)	if (_XCreateMutex_fn) (*_XCreateMutex_fn)(lock);
#define _XFreeMutex(lock)	if (_XFreeMutex_fn) (*_XFreeMutex_fn)(lock);
#define _XLockMutex(lock)	if (_XLockMutex_fn) (*_XLockMutex_fn)(lock)
#define _XUnlockMutex(lock)	if (_XUnlockMutex_fn) (*_XUnlockMutex_fn)(lock)
#define Xmalloc(size)	malloc((size))
#define _XOpenFile(path,flags)	open(path,flags)
#define _XOpenFileMode(path,flags,mode)	open(path,flags,mode)
#define PackData(dpy,data,len)	PackData16 (dpy, data, len)
#define Xrealloc(ptr,size)	realloc((ptr), (size))
#define GetReqExtra(name,n,req)	WORD64ALIGN if ((dpy->bufptr + SIZEOF(x ##name ##Req) + n) > dpy->bufmax) _XFlush(dpy); req = (x ##name ##Req *)(dpy->last_req = dpy->bufptr); req->reqType = X_ ##name; req->length = (SIZEOF(x ##name ##Req) + n)>>2; dpy->bufptr += SIZEOF(x ##name ##Req) + n; dpy->request++
#define GetReq(name,req)	WORD64ALIGN if ((dpy->bufptr + SIZEOF(x ##name ##Req)) > dpy->bufmax) _XFlush(dpy); req = (x ##name ##Req *)(dpy->last_req = dpy->bufptr); req->reqType = X_ ##name; req->length = (SIZEOF(x ##name ##Req))>>2; dpy->bufptr += SIZEOF(x ##name ##Req); dpy->request++
#define GetEmptyReq(name,req)	WORD64ALIGN if ((dpy->bufptr + SIZEOF(xReq)) > dpy->bufmax) _XFlush(dpy); req = (xReq *) (dpy->last_req = dpy->bufptr); req->reqType = X_ ##name; req->length = 1; dpy->bufptr += SIZEOF(xReq); dpy->request++
#define GetResReq(name,rid,req)	WORD64ALIGN if ((dpy->bufptr + SIZEOF(xResourceReq)) > dpy->bufmax) _XFlush(dpy); req = (xResourceReq *) (dpy->last_req = dpy->bufptr); req->reqType = X_ ##name; req->length = 2; req->id = (rid); dpy->bufptr += SIZEOF(xResourceReq); dpy->request++
#define _XBCOPYFUNC	_Xbcopy
#define Data32(dpy,data,len)	_XData32(dpy, (long *)data, len)
#define _XRead16(dpy,data,len)	_XRead((dpy), (char *)(data), (len))
#define _XRead16Pad(dpy,data,len)	_XReadPad((dpy), (char *)(data), (len))
#define OneDataCard32(dpy,dstaddr,srcvar)	{ *(CARD32 *)(dstaddr) = (srcvar); }
#define MakeBigReq(req,n)	{ CARD64 _BRdat; CARD32 _BRlen = req->length - 1; req->length = 0; _BRdat = ((CARD32 *)req)[_BRlen]; memmove(((char *)req) + 8, ((char *)req) + 4, _BRlen &lt;&lt; 2); ((CARD32 *)req)[1] = _BRlen + n + 2; Data32(dpy, &amp;_BRdat, 4); }
#define CI_GET_CHAR_INFO_1D(fs,col,def,cs)	{ cs = def; if (col >= fs->min_char_or_byte2 &amp;&amp; col &lt;= fs->max_char_or_byte2) { if (fs->per_char == NULL) { cs = &amp;fs->min_bounds; } else { cs = &amp;fs->per_char[(col - fs->min_char_or_byte2)]; if (CI_NONEXISTCHAR(cs)) cs = def; } } }
#define CI_GET_CHAR_INFO_2D(fs,row,col,def,cs)	{ cs = def; if (row >= fs->min_byte1 &amp;&amp; row &lt;= fs->max_byte1 &amp;&amp; col >= fs->min_char_or_byte2 &amp;&amp; col &lt;= fs->max_char_or_byte2) { if (fs->per_char == NULL) { cs = &amp;fs->min_bounds; } else { cs = &amp;fs->per_char[((row - fs->min_byte1) * (fs->max_char_or_byte2 - fs->min_char_or_byte2 + 1)) + (col - fs->min_char_or_byte2)]; if (CI_NONEXISTCHAR(cs)) cs = def; } } }
#define DeqAsyncHandler(dpy,handler)	{ if (dpy->async_handlers == (handler)) dpy->async_handlers = (handler)->next; else _XDeqAsyncHandler(dpy, handler); }
#define Data(dpy,data,len)	{ if (dpy->bufptr + (len) &lt;= dpy->bufmax) { memcpy(dpy->bufptr, data, (int)len); dpy->bufptr += ((len) + 3) &amp; ~3; } else _XSend(dpy, data, len); }
#define CI_GET_DEFAULT_INFO_2D(fs,cs)	{ unsigned int r = (fs->default_char >> 8); unsigned int c = (fs->default_char &amp; 0xff); CI_GET_CHAR_INFO_2D (fs, r, c, NULL, cs); }

typedef struct _XSQEvent {
    struct _XSQEvent *next;
    XEvent event;
    unsigned long int qserial_num;
} _XQEvent;
typedef struct _LockInfoRec *LockInfoPtr;
typedef struct _XInternalAsync {
    struct _XInternalAsync *next;
    int (*handler) (Display *, xReply *, char *, int, XPointer);
    XPointer data;
} _XAsyncHandler;
typedef struct _XAsyncEState {
    unsigned long int min_sequence_number;
    unsigned long int max_sequence_number;
    unsigned char error_code;
    unsigned char major_opcode;
    unsigned short minor_opcode;
    unsigned char last_error_received;
    int error_count;
} _XAsyncErrorState;
typedef void (*FreeFuncType) (Display *);
typedef int (*FreeModmapType) (XModifierKeymap *);
typedef struct _XFreeFuncs {
    FreeFuncType atoms;
    FreeModmapType modifiermap;
    FreeFuncType key_bindings;
    FreeFuncType context_db;
    FreeFuncType defaultCCCs;
    FreeFuncType clientCmaps;
    FreeFuncType intensityMaps;
    FreeFuncType im_filters;
    FreeFuncType xkb;
} _XFreeFuncRec;
typedef int (*CreateGCType) (Display *, GC, XExtCodes *);
typedef int (*CopyGCType) (Display *, GC, XExtCodes *);
typedef int (*FlushGCType) (Display *, GC, XExtCodes *);
typedef int (*FreeGCType) (Display *, GC, XExtCodes *);
typedef int (*CreateFontType) (Display *, XFontStruct *, XExtCodes *);
typedef int (*FreeFontType) (Display *, XFontStruct *, XExtCodes *);
typedef int (*CloseDisplayType) (Display *, XExtCodes *);
typedef int (*ErrorType) (Display *, xError *, XExtCodes *, int *);
typedef char *(*ErrorStringType) (Display *, int, XExtCodes *, char *,
				  int);
typedef void (*PrintErrorType) (Display *, XErrorEvent *, void *);
typedef void (*BeforeFlushType) (Display *, XExtCodes *, const char *,
				 long int);
typedef struct _XExten {
    struct _XExten *next;
    XExtCodes codes;
    CreateGCType create_GC;
    CopyGCType copy_GC;
    FlushGCType flush_GC;
    FreeGCType free_GC;
    CreateFontType create_Font;
    FreeFontType free_Font;
    CloseDisplayType close_display;
    ErrorType error;
    ErrorStringType error_string;
    char *name;
    PrintErrorType error_values;
    BeforeFlushType before_flush;
    struct _XExten *next_flush;
} _XExtension;
typedef void (*_XInternalConnectionProc) (Display *, int, XPointer);
struct _XDisplay {
    XExtData *ext_data;
    struct _XFreeFuncs *free_funcs;
    int fd;
    int conn_checker;
    int proto_major_version;
    int proto_minor_version;
    char *vendor;
    XID resource_base;
    XID resource_mask;
    XID resource_id;
    int resource_shift;
     XID(*resource_alloc) (struct _XDisplay *);
    int byte_order;
    int bitmap_unit;
    int bitmap_pad;
    int bitmap_bit_order;
    int nformats;
    ScreenFormat *pixmap_format;
    int vnumber;
    int release;
    struct _XSQEvent *head;
    struct _XSQEvent *tail;
    int qlen;
    unsigned long int last_request_read;
    unsigned long int request;
    char *last_req;
    char *buffer;
    char *bufptr;
    char *bufmax;
    unsigned int max_request_size;
    struct _XrmHashBucketRec *db;
    int (*synchandler) (struct _XDisplay *);
    char *display_name;
    int default_screen;
    int nscreens;
    Screen *screens;
    unsigned long int motion_buffer;
    unsigned long int flags;
    int min_keycode;
    int max_keycode;
    KeySym *keysyms;
    XModifierKeymap *modifiermap;
    int keysyms_per_keycode;
    char *xdefaults;
    char *scratch_buffer;
    unsigned long int scratch_length;
    int ext_number;
    struct _XExten *ext_procs;
    int (*event_vec) (Display *, XEvent *, xEvent *)
     event_vec[128];
    int (*wire_vec) (Display *, XEvent *, xEvent *)
     wire_vec[128];
    KeySym lock_meaning;
    struct _XLockInfo *lock;
    struct _XInternalAsync *async_handlers;
    unsigned long int bigreq_size;
    struct _XLockPtrs *lock_fns;
    void (*idlist_alloc) (Display *, XID *, int);
    struct _XKeytrans *key_bindings;
    Font cursor_font;
    struct _XDisplayAtoms *atoms;
    unsigned int mode_switch;
    unsigned int num_lock;
    struct _XContextDB *context_db;
    int (*error_vec) (Display *, XErrorEvent *, xError *)
    * error_vec;
    struct {
	XPointer defaultCCCs;
	XPointer clientCmaps;
	XPointer perVisualIntensityMaps;
    } cms;
    struct _XIMFilter *im_filters;
    struct _XSQEvent *qfree;
    unsigned long int next_event_serial_num;
    struct _XExten *flushes;
    struct _XConnectionInfo *im_fd_info;
    int im_fd_length;
    struct _XConnWatchInfo *conn_watchers;
    int watcher_count;
    XPointer filedes;
    int (*savedsynchandler) (Display *);
    XID resource_max;
    int xcmisc_opcode;
    struct _XkbInfoRec *xkb_info;
    struct _XtransConnInfo *trans_conn;
};
struct _XGC {
    XExtData *ext_data;
    GContext gid;
    int rects;
    int dashes;
    unsigned long int dirty;
    XGCValues values;
};
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/Xmd.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define B16
#define B32
#define NEXTPTR(p,t)	(((t *)(p)) + 1)
#define _SIZEOF(x)	sz_ ##x
#define SIZEOF(x)	_SIZEOF(x)

typedef unsigned short CARD16;
typedef unsigned char CARD8;
typedef CARD8 BOOL;
typedef unsigned char BYTE;
typedef CARD32 BITS32;
typedef CARD16 BITS16;
typedef int INT32;
typedef short int INT16;
typedef signed char INT8;
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/Xosdefs.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#ifndef MAXPATHLEN
#define MAXPATHLEN	4096
#endif
#ifndef PATH_MAX
#define PATH_MAX	4096
#endif
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/Xproto.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define ELFlagFocus	(1&lt;&lt;0)
#define ELFlagSameScreen	(1&lt;&lt;1)
#define XEventSize	(sizeof(xEvent))
#define X_Error	0
#define xFalse	0
#define X_CreateWindow	1
#define X_Reply	1
#define xTrue	1
#define X_UnmapWindow	10
#define X_ChangeKeyboardMapping	100
#define X_GetKeyboardMapping	101
#define X_ChangeKeyboardControl	102
#define X_GetKeyboardControl	103
#define X_Bell	104
#define X_ChangePointerControl	105
#define X_GetPointerControl	106
#define X_SetScreenSaver	107
#define X_GetScreenSaver	108
#define X_ChangeHosts	109
#define X_UnmapSubwindows	11
#define X_ListHosts	110
#define X_SetAccessControl	111
#define X_SetCloseDownMode	112
#define X_KillClient	113
#define X_RotateProperties	114
#define X_ForceScreenSaver	115
#define X_SetPointerMapping	116
#define X_GetPointerMapping	117
#define X_SetModifierMapping	118
#define X_GetModifierMapping	119
#define X_ConfigureWindow	12
#define sz_xAllocColorCellsReq	12
#define sz_xAllocNamedColorReq	12
#define sz_xArc	12
#define sz_xChangeGCReq	12
#define sz_xChangePointerControlReq	12
#define sz_xChangeWindowAttributesReq	12
#define sz_xCharInfo	12
#define sz_xColorItem	12
#define sz_xConfigureWindowReq	12
#define sz_xConnClientPrefix	12
#define sz_xCopyColormapAndFreeReq	12
#define sz_xDeletePropertyReq	12
#define sz_xFreeColorsReq	12
#define sz_xLookupColorReq	12
#define sz_xOpenFontReq	12
#define sz_xPolyArcReq	12
#define sz_xPolyFillArcReq	12
#define sz_xPolyFillRectangleReq	12
#define sz_xPolyLineReq	12
#define sz_xPolyPointReq	12
#define sz_xPolyRectangleReq	12
#define sz_xPolySegmentReq	12
#define sz_xQueryBestSizeReq	12
#define sz_xRotatePropertiesReq	12
#define sz_xSetClipRectanglesReq	12
#define sz_xSetDashesReq	12
#define sz_xSetInputFocusReq	12
#define sz_xSetScreenSaverReq	12
#define sz_xUngrabButtonReq	12
#define sz_xUngrabKeyReq	12
#define X_NoOperation	127
#define X_CirculateWindow	13
#define X_GetGeometry	14
#define X_QueryTree	15
#define X_InternAtom	16
#define sz_xAllocColorPlanesReq	16
#define sz_xAllocColorReq	16
#define sz_xChangeActivePointerGrabReq	16
#define sz_xClearAreaReq	16
#define sz_xCopyGCReq	16
#define sz_xCreateColormapReq	16
#define sz_xCreateGCReq	16
#define sz_xCreatePixmapReq	16
#define sz_xFillPolyReq	16
#define sz_xGetMotionEventsReq	16
#define sz_xGrabKeyReq	16
#define sz_xGrabKeyboardReq	16
#define sz_xImageText16Req	16
#define sz_xImageText8Req	16
#define sz_xImageTextReq	16
#define sz_xPolyText16Req	16
#define sz_xPolyText8Req	16
#define sz_xPolyTextReq	16
#define sz_xReparentWindowReq	16
#define sz_xSetSelectionOwnerReq	16
#define sz_xStoreNamedColorReq	16
#define sz_xTranslateCoordsReq	16
#define X_GetAtomName	17
#define X_ChangeProperty	18
#define X_DeleteProperty	19
#define X_ChangeWindowAttributes	2
#define sz_xTextElt	2
#define X_GetProperty	20
#define sz_xGetImageReq	20
#define sz_xRecolorCursorReq	20
#define X_ListProperties	21
#define X_SetSelectionOwner	22
#define X_GetSelectionOwner	23
#define X_ConvertSelection	24
#define sz_xChangePropertyReq	24
#define sz_xConvertSelectionReq	24
#define sz_xGetPropertyReq	24
#define sz_xGrabButtonReq	24
#define sz_xGrabPointerReq	24
#define sz_xPropIconSize	24
#define sz_xPutImageReq	24
#define sz_xVisualType	24
#define sz_xWarpPointerReq	24
#define X_SendEvent	25
#define X_GrabPointer	26
#define X_UngrabPointer	27
#define X_GrabButton	28
#define sz_xCopyAreaReq	28
#define X_UngrabButton	29
#define X_GetWindowAttributes	3
#define X_ChangeActivePointerGrab	30
#define X_GrabKeyboard	31
#define X_UngrabKeyboard	32
#define sz_xAllocColorCellsReply	32
#define sz_xAllocColorPlanesReply	32
#define sz_xAllocColorReply	32
#define sz_xAllocNamedColorReply	32
#define sz_xConnSetup	32
#define sz_xCopyPlaneReq	32
#define sz_xCreateCursorReq	32
#define sz_xCreateGlyphCursorReq	32
#define sz_xCreateWindowReq	32
#define sz_xError	32
#define sz_xEvent	32
#define sz_xGenericReply	32
#define sz_xGetAtomNameReply	32
#define sz_xGetFontPathReply	32
#define sz_xGetGeometryReply	32
#define sz_xGetImageReply	32
#define sz_xGetInputFocusReply	32
#define sz_xGetKeyboardMappingReply	32
#define sz_xGetModifierMappingReply	32
#define sz_xGetMotionEventsReply	32
#define sz_xGetPointerControlReply	32
#define sz_xGetPointerMappingReply	32
#define sz_xGetPropertyReply	32
#define sz_xGetScreenSaverReply	32
#define sz_xGetSelectionOwnerReply	32
#define sz_xGrabKeyboardReply	32
#define sz_xGrabPointerReply	32
#define sz_xInternAtomReply	32
#define sz_xKeymapEvent	32
#define sz_xListExtensionsReply	32
#define sz_xListFontsReply	32
#define sz_xListHostsReply	32
#define sz_xListInstalledColormapsReply	32
#define sz_xListPropertiesReply	32
#define sz_xLookupColorReply	32
#define sz_xQueryBestSizeReply	32
#define sz_xQueryColorsReply	32
#define sz_xQueryExtensionReply	32
#define sz_xQueryPointerReply	32
#define sz_xQueryTextExtentsReply	32
#define sz_xQueryTreeReply	32
#define sz_xReply	32
#define sz_xSetMappingReply	32
#define sz_xSetModifierMappingReply	32
#define sz_xSetPointerMappingReply	32
#define sz_xTranslateCoordsReply	32
#define X_GrabKey	33
#define X_UngrabKey	34
#define X_AllowEvents	35
#define X_GrabServer	36
#define X_UngrabServer	37
#define X_QueryPointer	38
#define X_GetMotionEvents	39
#define X_DestroyWindow	4
#define sz_xBellReq	4
#define sz_xChangeModeReq	4
#define sz_xForceScreenSaverReq	4
#define sz_xHostEntry	4
#define sz_xListHostsReq	4
#define sz_xPoint	4
#define sz_xReq	4
#define sz_xSetAccessControlReq	4
#define sz_xSetCloseDownModeReq	4
#define sz_xSetModifierMappingReq	4
#define sz_xSetPointerMappingReq	4
#define X_TranslateCoords	40
#define sz_xQueryKeymapReply	40
#define sz_xWindowRoot	40
#define X_WarpPointer	41
#define X_SetInputFocus	42
#define X_GetInputFocus	43
#define X_QueryKeymap	44
#define sz_xGetWindowAttributesReply	44
#define sz_xSendEventReq	44
#define X_OpenFont	45
#define X_CloseFont	46
#define X_QueryFont	47
#define X_QueryTextExtents	48
#define X_ListFonts	49
#define X_DestroySubwindows	5
#define X_ListFontsWithInfo	50
#define X_SetFontPath	51
#define X_GetFontPath	52
#define sz_xGetKeyboardControlReply	52
#define X_CreatePixmap	53
#define X_FreePixmap	54
#define X_CreateGC	55
#define X_ChangeGC	56
#define X_CopyGC	57
#define X_SetDashes	58
#define X_SetClipRectangles	59
#define X_ChangeSaveSet	6
#define X_FreeGC	60
#define sz_xListFontsWithInfoReply	60
#define sz_xQueryFontReply	60
#define X_TCP_PORT	6000
#define X_ClearArea	61
#define X_CopyArea	62
#define X_CopyPlane	63
#define X_PolyPoint	64
#define X_PolyLine	65
#define X_PolySegment	66
#define X_PolyRectangle	67
#define X_PolyArc	68
#define X_FillPoly	69
#define X_ReparentWindow	7
#define X_PolyFillRectangle	70
#define X_PolyFillArc	71
#define X_PutImage	72
#define X_GetImage	73
#define X_PolyText8	74
#define X_PolyText16	75
#define X_ImageText8	76
#define X_ImageText16	77
#define X_CreateColormap	78
#define X_FreeColormap	79
#define X_MapWindow	8
#define sz_xAllowEventsReq	8
#define sz_xChangeHostsReq	8
#define sz_xChangeKeyboardControlReq	8
#define sz_xChangeKeyboardMappingReq	8
#define sz_xChangeSaveSetReq	8
#define sz_xCirculateWindowReq	8
#define sz_xConnSetupPrefix	8
#define sz_xDepth	8
#define sz_xFontProp	8
#define sz_xGetKeyboardMappingReq	8
#define sz_xInternAtomReq	8
#define sz_xListFontsReq	8
#define sz_xListFontsWithInfoReq	8
#define sz_xPixmapFormat	8
#define sz_xQueryColorsReq	8
#define sz_xQueryExtensionReq	8
#define sz_xQueryTextExtentsReq	8
#define sz_xRectangle	8
#define sz_xResourceReq	8
#define sz_xSegment	8
#define sz_xSetFontPathReq	8
#define sz_xStoreColorsReq	8
#define sz_xTimecoord	8
#define sz_xrgb	8
#define X_CopyColormapAndFree	80
#define X_InstallColormap	81
#define X_UninstallColormap	82
#define X_ListInstalledColormaps	83
#define X_AllocColor	84
#define X_AllocNamedColor	85
#define X_AllocColorCells	86
#define X_AllocColorPlanes	87
#define X_FreeColors	88
#define X_StoreColors	89
#define X_MapSubwindows	9
#define X_StoreNamedColor	90
#define X_QueryColors	91
#define X_LookupColor	92
#define X_CreateCursor	93
#define X_CreateGlyphCursor	94
#define X_FreeCursor	95
#define X_RecolorCursor	96
#define X_QueryBestSize	97
#define X_QueryExtension	98
#define X_ListExtensions	99

typedef struct _xEvent {
    union {
	struct {
	    BYTE type;
	    BYTE detail;
	    CARD16 sequenceNumber;
	} u;
	struct {
	    CARD32 pad00;
	    CARD32 time;
	    CARD32 root;
	    CARD32 event;
	    CARD32 child;
	    INT16 rootX;
	    INT16 rootY;
	    INT16 eventX;
	    INT16 eventY;
	    KeyButMask state;
	    BOOL sameScreen;
	    BYTE pad1;
	} keyButtonPointer;
	struct {
	    CARD32 pad00;
	    CARD32 time;
	    CARD32 root;
	    CARD32 event;
	    CARD32 child;
	    INT16 rootX;
	    INT16 rootY;
	    INT16 eventX;
	    INT16 eventY;
	    KeyButMask state;
	    BYTE mode;
	    BYTE flags;
	} enterLeave;
	struct {
	    CARD32 pad00;
	    CARD32 window;
	    BYTE mode;
	    BYTE pad1;
	    BYTE pad2;
	    BYTE pad3;
	} focus;
	struct {
	    CARD32 pad00;
	    CARD32 window;
	    CARD16 x;
	    CARD16 y;
	    CARD16 width;
	    CARD16 height;
	    CARD16 count;
	    CARD16 pad2;
	} expose;
	struct {
	    CARD32 pad00;
	    CARD32 drawable;
	    CARD16 x;
	    CARD16 y;
	    CARD16 width;
	    CARD16 height;
	    CARD16 minorEvent;
	    CARD16 count;
	    BYTE majorEvent;
	    BYTE pad1;
	    BYTE pad2;
	    BYTE pad3;
	} graphicsExposure;
	struct {
	    CARD32 pad00;
	    CARD32 drawable;
	    CARD16 minorEvent;
	    BYTE majorEvent;
	    BYTE bpad;
	} noExposure;
	struct {
	    CARD32 pad00;
	    CARD32 window;
	    CARD8 state;
	    BYTE pad1;
	    BYTE pad2;
	    BYTE pad3;
	} visibility;
	struct {
	    CARD32 pad00;
	    CARD32 parent;
	    CARD32 window;
	    INT16 x;
	    INT16 y;
	    CARD16 width;
	    CARD16 height;
	    CARD16 borderWidth;
	    BOOL override;
	    BYTE bpad;
	} createNotify;
	struct {
	    CARD32 pad00;
	    CARD32 event;
	    CARD32 window;
	} destroyNotify;
	struct {
	    CARD32 pad00;
	    CARD32 event;
	    CARD32 window;
	    BOOL fromConfigure;
	    BYTE pad1;
	    BYTE pad2;
	    BYTE pad3;
	} unmapNotify;
	struct {
	    CARD32 pad00;
	    CARD32 event;
	    CARD32 window;
	    BOOL override;
	    BYTE pad1;
	    BYTE pad2;
	    BYTE pad3;
	} mapNotify;
	struct {
	    CARD32 pad00;
	    CARD32 parent;
	    CARD32 window;
	} mapRequest;
	struct {
	    CARD32 pad00;
	    CARD32 event;
	    CARD32 window;
	    CARD32 parent;
	    INT16 x;
	    INT16 y;
	    BOOL override;
	    BYTE pad1;
	    BYTE pad2;
	    BYTE pad3;
	} reparent;
	struct {
	    CARD32 pad00;
	    CARD32 event;
	    CARD32 window;
	    CARD32 aboveSibling;
	    INT16 x;
	    INT16 y;
	    CARD16 width;
	    CARD16 height;
	    CARD16 borderWidth;
	    BOOL override;
	    BYTE bpad;
	} configureNotify;
	struct {
	    CARD32 pad00;
	    CARD32 parent;
	    CARD32 window;
	    CARD32 sibling;
	    INT16 x;
	    INT16 y;
	    CARD16 width;
	    CARD16 height;
	    CARD16 borderWidth;
	    CARD16 valueMask;
	    CARD32 pad1;
	} configureRequest;
	struct {
	    CARD32 pad00;
	    CARD32 event;
	    CARD32 window;
	    INT16 x;
	    INT16 y;
	    CARD32 pad1;
	    CARD32 pad2;
	    CARD32 pad3;
	    CARD32 pad4;
	} gravity;
	struct {
	    CARD32 pad00;
	    CARD32 window;
	    CARD16 width;
	    CARD16 height;
	} resizeRequest;
	struct {
	    CARD32 pad00;
	    CARD32 event;
	    CARD32 window;
	    CARD32 parent;
	    BYTE place;
	    BYTE pad1;
	    BYTE pad2;
	    BYTE pad3;
	} circulate;
	struct {
	    CARD32 pad00;
	    CARD32 window;
	    CARD32 atom;
	    CARD32 time;
	    BYTE state;
	    BYTE pad1;
	    CARD16 pad2;
	} property;
	struct {
	    CARD32 pad00;
	    CARD32 time;
	    CARD32 window;
	    CARD32 atom;
	} selectionClear;
	struct {
	    CARD32 pad00;
	    CARD32 time;
	    CARD32 owner;
	    CARD32 requestor;
	    CARD32 selection;
	    CARD32 target;
	    CARD32 property;
	} selectionRequest;
	struct {
	    CARD32 pad00;
	    CARD32 time;
	    CARD32 requestor;
	    CARD32 selection;
	    CARD32 target;
	    CARD32 property;
	} selectionNotify;
	struct {
	    CARD32 pad00;
	    CARD32 window;
	    CARD32 colormap;
	    BOOL c_new;
	    BYTE state;
	    BYTE pad1;
	    BYTE pad2;
	} colormap;
	struct {
	    CARD32 pad00;
	    CARD8 request;
	    CARD8 firstKeyCode;
	    CARD8 count;
	    BYTE pad1;
	} mappingNotify;
	struct {
	    CARD32 pad00;
	    CARD32 window;
	    union {
		struct {
		    CARD32 type;
		    INT32 longs0;
		    INT32 longs1;
		    INT32 longs2;
		    INT32 longs3;
		    INT32 longs4;
		} l;
		struct {
		    CARD32 type;
		    INT16 shorts0;
		    INT16 shorts1;
		    INT16 shorts2;
		    INT16 shorts3;
		    INT16 shorts4;
		    INT16 shorts5;
		    INT16 shorts6;
		    INT16 shorts7;
		    INT16 shorts8;
		    INT16 shorts9;
		} s;
		struct {
		    CARD32 type;
		    INT8 bytes[20];
		} b;
	    } u;
	} clientMessage;
    } u;
} xEvent;
typedef struct {
    BYTE type;
    BYTE errorCode;
    CARD16 sequenceNumber;
    CARD32 resourceID;
    CARD16 minorCode;
    CARD8 majorCode;
    BYTE pad1;
    CARD32 pad3;
    CARD32 pad4;
    CARD32 pad5;
    CARD32 pad6;
    CARD32 pad7;
} xError;
typedef CARD16 KeyButMask;
typedef struct {
    CARD8 byteOrder;
    BYTE pad;
    CARD16 majorVersion;
    CARD16 minorVersion;
    CARD16 nbytesAuthProto;
    CARD16 nbytesAuthString;
    CARD16 pad2;
} xConnClientPrefix;
typedef struct {
    CARD8 success;
    BYTE lengthReason;
    CARD16 majorVersion;
    CARD16 minorVersion;
    CARD16 length;
} xConnSetupPrefix;
typedef struct {
    CARD32 release;
    CARD32 ridBase;
    CARD32 ridMask;
    CARD32 motionBufferSize;
    CARD16 nbytesVendor;
    CARD16 maxRequestSize;
    CARD8 numRoots;
    CARD8 numFormats;
    CARD8 imageByteOrder;
    CARD8 bitmapBitOrder;
    CARD8 bitmapScanlineUnit;
    CARD8 bitmapScanlinePad;
    CARD8 minKeyCode;
    CARD8 maxKeyCode;
    CARD32 pad2;
} xConnSetup;
typedef struct {
    CARD8 depth;
    CARD8 bitsPerPixel;
    CARD8 scanLinePad;
    CARD8 pad1;
    CARD32 pad2;
} xPixmapFormat;
typedef struct {
    CARD8 depth;
    CARD8 pad1;
    CARD16 nVisuals;
    CARD32 pad2;
} xDepth;
typedef struct {
    CARD32 visualID;
    CARD8 c_class;
    CARD8 bitsPerRGB;
    CARD16 colormapEntries;
    CARD32 redMask;
    CARD32 greenMask;
    CARD32 blueMask;
    CARD32 pad;
} xVisualType;
typedef struct {
    CARD32 windowId;
    CARD32 defaultColormap;
    CARD32 whitePixel;
    CARD32 blackPixel;
    CARD32 currentInputMask;
    CARD16 pixWidth;
    CARD16 pixHeight;
    CARD16 mmWidth;
    CARD16 mmHeight;
    CARD16 minInstalledMaps;
    CARD16 maxInstalledMaps;
    CARD32 rootVisualID;
    CARD8 backingStore;
    BOOL saveUnders;
    CARD8 rootDepth;
    CARD8 nDepths;
} xWindowRoot;
typedef struct {
    CARD32 time;
    INT16 x;
    INT16 y;
} xTimecoord;
typedef struct {
    CARD8 family;
    BYTE pad;
    CARD16 length;
} xHostEntry;
typedef struct {
    INT16 leftSideBearing;
    INT16 rightSideBearing;
    INT16 characterWidth;
    INT16 ascent;
    INT16 descent;
    CARD16 attributes;
} xCharInfo;
typedef struct {
    CARD32 name;
    CARD32 value;
} xFontProp;
typedef struct {
    CARD8 len;
    INT8 delta;
} xTextElt;
typedef struct {
    CARD32 pixel;
    CARD16 red;
    CARD16 green;
    CARD16 blue;
    CARD8 flags;
    CARD8 pad;
} xColorItem;
typedef struct {
    CARD16 red;
    CARD16 green;
    CARD16 blue;
    CARD16 pad;
} xrgb;
typedef unsigned char KEYCODE;
typedef struct {
    BYTE type;
    BYTE data1;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD32 data00;
    CARD32 data01;
    CARD32 data02;
    CARD32 data03;
    CARD32 data04;
    CARD32 data05;
} xGenericReply;
typedef struct {
    BYTE type;
    CARD8 backingStore;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD32 visualID;
    CARD16 c_class;
    CARD8 bitGravity;
    CARD8 winGravity;
    CARD32 backingBitPlanes;
    CARD32 backingPixel;
    BOOL saveUnder;
    BOOL mapInstalled;
    CARD8 mapState;
    BOOL override;
    CARD32 colormap;
    CARD32 allEventMasks;
    CARD32 yourEventMask;
    CARD16 doNotPropagateMask;
    CARD16 pad;
} xGetWindowAttributesReply;
typedef struct {
    BYTE type;
    CARD8 depth;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD32 root;
    INT16 x;
    INT16 y;
    CARD16 width;
    CARD16 height;
    CARD16 borderWidth;
    CARD16 pad1;
    CARD32 pad2;
    CARD32 pad3;
} xGetGeometryReply;
typedef struct {
    BYTE type;
    BYTE pad1;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD32 root;
    CARD32 parent;
    CARD16 nChildren;
    CARD16 pad2;
    CARD32 pad3;
    CARD32 pad4;
    CARD32 pad5;
} xQueryTreeReply;
typedef struct {
    BYTE type;
    BYTE pad1;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD32 atom;
    CARD32 pad2;
    CARD32 pad3;
    CARD32 pad4;
    CARD32 pad5;
    CARD32 pad6;
} xInternAtomReply;
typedef struct {
    BYTE type;
    BYTE pad1;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD16 nameLength;
    CARD16 pad2;
    CARD32 pad3;
    CARD32 pad4;
    CARD32 pad5;
    CARD32 pad6;
    CARD32 pad7;
} xGetAtomNameReply;
typedef struct {
    BYTE type;
    CARD8 format;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD32 propertyType;
    CARD32 bytesAfter;
    CARD32 nItems;
    CARD32 pad1;
    CARD32 pad2;
    CARD32 pad3;
} xGetPropertyReply;
typedef struct {
    BYTE type;
    BYTE pad1;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD16 nProperties;
    CARD16 pad2;
    CARD32 pad3;
    CARD32 pad4;
    CARD32 pad5;
    CARD32 pad6;
    CARD32 pad7;
} xListPropertiesReply;
typedef struct {
    BYTE type;
    BYTE pad1;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD32 owner;
    CARD32 pad2;
    CARD32 pad3;
    CARD32 pad4;
    CARD32 pad5;
    CARD32 pad6;
} xGetSelectionOwnerReply;
typedef struct {
    BYTE type;
    BYTE status;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD32 pad1;
    CARD32 pad2;
    CARD32 pad3;
    CARD32 pad4;
    CARD32 pad5;
    CARD32 pad6;
} xGrabPointerReply;
typedef xGrabPointerReply xGrabKeyboardReply;
typedef struct {
    BYTE type;
    BOOL sameScreen;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD32 root;
    CARD32 child;
    INT16 rootX;
    INT16 rootY;
    INT16 winX;
    INT16 winY;
    CARD16 mask;
    CARD16 pad1;
    CARD32 pad;
} xQueryPointerReply;
typedef struct {
    BYTE type;
    BYTE pad1;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD32 nEvents;
    CARD32 pad2;
    CARD32 pad3;
    CARD32 pad4;
    CARD32 pad5;
    CARD32 pad6;
} xGetMotionEventsReply;
typedef struct {
    BYTE type;
    BOOL sameScreen;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD32 child;
    INT16 dstX;
    INT16 dstY;
    CARD32 pad2;
    CARD32 pad3;
    CARD32 pad4;
    CARD32 pad5;
} xTranslateCoordsReply;
typedef struct {
    BYTE type;
    CARD8 revertTo;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD32 focus;
    CARD32 pad1;
    CARD32 pad2;
    CARD32 pad3;
    CARD32 pad4;
    CARD32 pad5;
} xGetInputFocusReply;
typedef struct {
    BYTE type;
    BYTE pad1;
    CARD16 sequenceNumber;
    CARD32 length;
    BYTE map[32];
} xQueryKeymapReply;
typedef struct _xQueryFontReply {
    BYTE type;
    BYTE pad1;
    CARD16 sequenceNumber;
    CARD32 length;
    xCharInfo minBounds;
    CARD32 walign1;
    xCharInfo maxBounds;
    CARD32 walign2;
    CARD16 minCharOrByte2;
    CARD16 maxCharOrByte2;
    CARD16 defaultChar;
    CARD16 nFontProps;
    CARD8 drawDirection;
    CARD8 minByte1;
    CARD8 maxByte1;
    BOOL allCharsExist;
    INT16 fontAscent;
    INT16 fontDescent;
    CARD32 nCharInfos;
} xQueryFontReply;
typedef struct {
    BYTE type;
    CARD8 drawDirection;
    CARD16 sequenceNumber;
    CARD32 length;
    INT16 fontAscent;
    INT16 fontDescent;
    INT16 overallAscent;
    INT16 overallDescent;
    INT32 overallWidth;
    INT32 overallLeft;
    INT32 overallRight;
    CARD32 pad;
} xQueryTextExtentsReply;
typedef struct {
    BYTE type;
    BYTE pad1;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD16 nFonts;
    CARD16 pad2;
    CARD32 pad3;
    CARD32 pad4;
    CARD32 pad5;
    CARD32 pad6;
    CARD32 pad7;
} xListFontsReply;
typedef struct {
    BYTE type;
    CARD8 nameLength;
    CARD16 sequenceNumber;
    CARD32 length;
    xCharInfo minBounds;
    CARD32 walign1;
    xCharInfo maxBounds;
    CARD32 walign2;
    CARD16 minCharOrByte2;
    CARD16 maxCharOrByte2;
    CARD16 defaultChar;
    CARD16 nFontProps;
    CARD8 drawDirection;
    CARD8 minByte1;
    CARD8 maxByte1;
    BOOL allCharsExist;
    INT16 fontAscent;
    INT16 fontDescent;
    CARD32 nReplies;
} xListFontsWithInfoReply;
typedef struct {
    BYTE type;
    BYTE pad1;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD16 nPaths;
    CARD16 pad2;
    CARD32 pad3;
    CARD32 pad4;
    CARD32 pad5;
    CARD32 pad6;
    CARD32 pad7;
} xGetFontPathReply;
typedef struct {
    BYTE type;
    CARD8 depth;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD32 visual;
    CARD32 pad3;
    CARD32 pad4;
    CARD32 pad5;
    CARD32 pad6;
    CARD32 pad7;
} xGetImageReply;
typedef struct {
    BYTE type;
    BYTE pad1;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD16 nColormaps;
    CARD16 pad2;
    CARD32 pad3;
    CARD32 pad4;
    CARD32 pad5;
    CARD32 pad6;
    CARD32 pad7;
} xListInstalledColormapsReply;
typedef struct {
    BYTE type;
    BYTE pad1;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD16 red;
    CARD16 green;
    CARD16 blue;
    CARD16 pad2;
    CARD32 pixel;
    CARD32 pad3;
    CARD32 pad4;
    CARD32 pad5;
} xAllocColorReply;
typedef struct {
    BYTE type;
    BYTE pad1;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD32 pixel;
    CARD16 exactRed;
    CARD16 exactGreen;
    CARD16 exactBlue;
    CARD16 screenRed;
    CARD16 screenGreen;
    CARD16 screenBlue;
    CARD32 pad2;
    CARD32 pad3;
} xAllocNamedColorReply;
typedef struct {
    BYTE type;
    BYTE pad1;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD16 nPixels;
    CARD16 nMasks;
    CARD32 pad3;
    CARD32 pad4;
    CARD32 pad5;
    CARD32 pad6;
    CARD32 pad7;
} xAllocColorCellsReply;
typedef struct {
    BYTE type;
    BYTE pad1;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD16 nPixels;
    CARD16 pad2;
    CARD32 redMask;
    CARD32 greenMask;
    CARD32 blueMask;
    CARD32 pad3;
    CARD32 pad4;
} xAllocColorPlanesReply;
typedef struct {
    BYTE type;
    BYTE pad1;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD16 nColors;
    CARD16 pad2;
    CARD32 pad3;
    CARD32 pad4;
    CARD32 pad5;
    CARD32 pad6;
    CARD32 pad7;
} xQueryColorsReply;
typedef struct {
    BYTE type;
    BYTE pad1;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD16 exactRed;
    CARD16 exactGreen;
    CARD16 exactBlue;
    CARD16 screenRed;
    CARD16 screenGreen;
    CARD16 screenBlue;
    CARD32 pad3;
    CARD32 pad4;
    CARD32 pad5;
} xLookupColorReply;
typedef struct {
    BYTE type;
    BYTE pad1;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD16 width;
    CARD16 height;
    CARD32 pad3;
    CARD32 pad4;
    CARD32 pad5;
    CARD32 pad6;
    CARD32 pad7;
} xQueryBestSizeReply;
typedef struct {
    BYTE type;
    BYTE pad1;
    CARD16 sequenceNumber;
    CARD32 length;
    BOOL present;
    CARD8 major_opcode;
    CARD8 first_event;
    CARD8 first_error;
    CARD32 pad3;
    CARD32 pad4;
    CARD32 pad5;
    CARD32 pad6;
    CARD32 pad7;
} xQueryExtensionReply;
typedef struct {
    BYTE type;
    CARD8 nExtensions;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD32 pad2;
    CARD32 pad3;
    CARD32 pad4;
    CARD32 pad5;
    CARD32 pad6;
    CARD32 pad7;
} xListExtensionsReply;
typedef struct {
    BYTE type;
    CARD8 success;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD32 pad2;
    CARD32 pad3;
    CARD32 pad4;
    CARD32 pad5;
    CARD32 pad6;
    CARD32 pad7;
} xSetMappingReply;
typedef xSetMappingReply xSetPointerMappingReply;
typedef xSetMappingReply xSetModifierMappingReply;
typedef struct {
    BYTE type;
    CARD8 nElts;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD32 pad2;
    CARD32 pad3;
    CARD32 pad4;
    CARD32 pad5;
    CARD32 pad6;
    CARD32 pad7;
} xGetPointerMappingReply;
typedef struct {
    BYTE type;
    CARD8 keySymsPerKeyCode;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD32 pad2;
    CARD32 pad3;
    CARD32 pad4;
    CARD32 pad5;
    CARD32 pad6;
    CARD32 pad7;
} xGetKeyboardMappingReply;
typedef struct {
    BYTE type;
    CARD8 numKeyPerModifier;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD32 pad1;
    CARD32 pad2;
    CARD32 pad3;
    CARD32 pad4;
    CARD32 pad5;
    CARD32 pad6;
} xGetModifierMappingReply;
typedef struct {
    BYTE type;
    BOOL globalAutoRepeat;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD32 ledMask;
    CARD8 keyClickPercent;
    CARD8 bellPercent;
    CARD16 bellPitch;
    CARD16 bellDuration;
    CARD16 pad;
    BYTE map[32];
} xGetKeyboardControlReply;
typedef struct {
    BYTE type;
    BYTE pad1;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD16 accelNumerator;
    CARD16 accelDenominator;
    CARD16 threshold;
    CARD16 pad2;
    CARD32 pad3;
    CARD32 pad4;
    CARD32 pad5;
    CARD32 pad6;
} xGetPointerControlReply;
typedef struct {
    BYTE type;
    BYTE pad1;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD16 timeout;
    CARD16 interval;
    BOOL preferBlanking;
    BOOL allowExposures;
    CARD16 pad2;
    CARD32 pad3;
    CARD32 pad4;
    CARD32 pad5;
    CARD32 pad6;
} xGetScreenSaverReply;
typedef struct {
    BYTE type;
    BOOL enabled;
    CARD16 sequenceNumber;
    CARD32 length;
    CARD16 nHosts;
    CARD16 pad1;
    CARD32 pad3;
    CARD32 pad4;
    CARD32 pad5;
    CARD32 pad6;
    CARD32 pad7;
} xListHostsReply;
typedef struct {
    BYTE type;
    BYTE map[31];
} xKeymapEvent;
typedef struct _xReq {
    CARD8 reqType;
    CARD8 data;
    CARD16 length;
} xReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD32 id;
} xResourceReq;
typedef struct {
    CARD8 reqType;
    CARD8 depth;
    CARD16 length;
    CARD32 wid;
    CARD32 parent;
    INT16 x;
    INT16 y;
    CARD16 width;
    CARD16 height;
    CARD16 borderWidth;
    CARD16 c_class;
    CARD32 visual;
    CARD32 mask;
} xCreateWindowReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD32 window;
    CARD32 valueMask;
} xChangeWindowAttributesReq;
typedef struct {
    CARD8 reqType;
    BYTE mode;
    CARD16 length;
    CARD32 window;
} xChangeSaveSetReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD32 window;
    CARD32 parent;
    INT16 x;
    INT16 y;
} xReparentWindowReq;
typedef struct {
    CARD8 reqType;
    CARD8 pad;
    CARD16 length;
    CARD32 window;
    CARD16 mask;
    CARD16 pad2;
} xConfigureWindowReq;
typedef struct {
    CARD8 reqType;
    CARD8 direction;
    CARD16 length;
    CARD32 window;
} xCirculateWindowReq;
typedef struct {
    CARD8 reqType;
    BOOL onlyIfExists;
    CARD16 length;
    CARD16 nbytes;
    CARD16 pad;
} xInternAtomReq;
typedef struct {
    CARD8 reqType;
    CARD8 mode;
    CARD16 length;
    CARD32 window;
    CARD32 property;
    CARD32 type;
    CARD8 format;
    BYTE pad[3];
    CARD32 nUnits;
} xChangePropertyReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD32 window;
    CARD32 property;
} xDeletePropertyReq;
typedef struct {
    CARD8 reqType;
    BOOL c_delete;
    CARD16 length;
    CARD32 window;
    CARD32 property;
    CARD32 type;
    CARD32 longOffset;
    CARD32 longLength;
} xGetPropertyReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD32 window;
    CARD32 selection;
    CARD32 time;
} xSetSelectionOwnerReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD32 requestor;
    CARD32 selection;
    CARD32 target;
    CARD32 property;
    CARD32 time;
} xConvertSelectionReq;
typedef struct {
    CARD8 reqType;
    BOOL ownerEvents;
    CARD16 length;
    CARD32 grabWindow;
    CARD16 eventMask;
    BYTE pointerMode;
    BYTE keyboardMode;
    CARD32 confineTo;
    CARD32 cursor;
    CARD32 time;
} xGrabPointerReq;
typedef struct {
    CARD8 reqType;
    BOOL ownerEvents;
    CARD16 length;
    CARD32 grabWindow;
    CARD16 eventMask;
    BYTE pointerMode;
    BYTE keyboardMode;
    CARD32 confineTo;
    CARD32 cursor;
    CARD8 button;
    BYTE pad;
    CARD16 modifiers;
} xGrabButtonReq;
typedef struct {
    CARD8 reqType;
    CARD8 button;
    CARD16 length;
    CARD32 grabWindow;
    CARD16 modifiers;
    CARD16 pad;
} xUngrabButtonReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD32 cursor;
    CARD32 time;
    CARD16 eventMask;
    CARD16 pad2;
} xChangeActivePointerGrabReq;
typedef struct {
    CARD8 reqType;
    BOOL ownerEvents;
    CARD16 length;
    CARD32 grabWindow;
    CARD32 time;
    BYTE pointerMode;
    BYTE keyboardMode;
    CARD16 pad;
} xGrabKeyboardReq;
typedef struct {
    CARD8 reqType;
    BOOL ownerEvents;
    CARD16 length;
    CARD32 grabWindow;
    CARD16 modifiers;
    CARD8 key;
    BYTE pointerMode;
    BYTE keyboardMode;
    BYTE pad1;
    BYTE pad2;
    BYTE pad3;
} xGrabKeyReq;
typedef struct {
    CARD8 reqType;
    CARD8 key;
    CARD16 length;
    CARD32 grabWindow;
    CARD16 modifiers;
    CARD16 pad;
} xUngrabKeyReq;
typedef struct {
    CARD8 reqType;
    CARD8 mode;
    CARD16 length;
    CARD32 time;
} xAllowEventsReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD32 window;
    CARD32 start;
    CARD32 stop;
} xGetMotionEventsReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD32 srcWid;
    CARD32 dstWid;
    INT16 srcX;
    INT16 srcY;
} xTranslateCoordsReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD32 srcWid;
    CARD32 dstWid;
    INT16 srcX;
    INT16 srcY;
    CARD16 srcWidth;
    CARD16 srcHeight;
    INT16 dstX;
    INT16 dstY;
} xWarpPointerReq;
typedef struct {
    CARD8 reqType;
    CARD8 revertTo;
    CARD16 length;
    CARD32 focus;
    CARD32 time;
} xSetInputFocusReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD32 fid;
    CARD16 nbytes;
    BYTE pad1;
    BYTE pad2;
} xOpenFontReq;
typedef struct {
    CARD8 reqType;
    BOOL oddLength;
    CARD16 length;
    CARD32 fid;
} xQueryTextExtentsReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD16 maxNames;
    CARD16 nbytes;
} xListFontsReq;
typedef xListFontsReq xListFontsWithInfoReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD16 nFonts;
    BYTE pad1;
    BYTE pad2;
} xSetFontPathReq;
typedef struct {
    CARD8 reqType;
    CARD8 depth;
    CARD16 length;
    CARD32 pid;
    CARD32 drawable;
    CARD16 width;
    CARD16 height;
} xCreatePixmapReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD32 gc;
    CARD32 drawable;
    CARD32 mask;
} xCreateGCReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD32 gc;
    CARD32 mask;
} xChangeGCReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD32 srcGC;
    CARD32 dstGC;
    CARD32 mask;
} xCopyGCReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD32 gc;
    CARD16 dashOffset;
    CARD16 nDashes;
} xSetDashesReq;
typedef struct {
    CARD8 reqType;
    BYTE ordering;
    CARD16 length;
    CARD32 gc;
    INT16 xOrigin;
    INT16 yOrigin;
} xSetClipRectanglesReq;
typedef struct {
    CARD8 reqType;
    BOOL exposures;
    CARD16 length;
    CARD32 window;
    INT16 x;
    INT16 y;
    CARD16 width;
    CARD16 height;
} xClearAreaReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD32 srcDrawable;
    CARD32 dstDrawable;
    CARD32 gc;
    INT16 srcX;
    INT16 srcY;
    INT16 dstX;
    INT16 dstY;
    CARD16 width;
    CARD16 height;
} xCopyAreaReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD32 srcDrawable;
    CARD32 dstDrawable;
    CARD32 gc;
    INT16 srcX;
    INT16 srcY;
    INT16 dstX;
    INT16 dstY;
    CARD16 width;
    CARD16 height;
    CARD32 bitPlane;
} xCopyPlaneReq;
typedef struct {
    CARD8 reqType;
    BYTE coordMode;
    CARD16 length;
    CARD32 drawable;
    CARD32 gc;
} xPolyPointReq;
typedef xPolyPointReq xPolyLineReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD32 drawable;
    CARD32 gc;
} xPolySegmentReq;
typedef xPolySegmentReq xPolyArcReq;
typedef xPolySegmentReq xPolyRectangleReq;
typedef xPolySegmentReq xPolyFillRectangleReq;
typedef xPolySegmentReq xPolyFillArcReq;
typedef struct _FillPolyReq {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD32 drawable;
    CARD32 gc;
    BYTE shape;
    BYTE coordMode;
    CARD16 pad1;
} xFillPolyReq;
typedef struct _PutImageReq {
    CARD8 reqType;
    CARD8 format;
    CARD16 length;
    CARD32 drawable;
    CARD32 gc;
    CARD16 width;
    CARD16 height;
    INT16 dstX;
    INT16 dstY;
    CARD8 leftPad;
    CARD8 depth;
    CARD16 pad;
} xPutImageReq;
typedef struct {
    CARD8 reqType;
    CARD8 format;
    CARD16 length;
    CARD32 drawable;
    INT16 x;
    INT16 y;
    CARD16 width;
    CARD16 height;
    CARD32 planeMask;
} xGetImageReq;
typedef struct {
    CARD8 reqType;
    CARD8 pad;
    CARD16 length;
    CARD32 drawable;
    CARD32 gc;
    INT16 x;
    INT16 y;
} xPolyTextReq;
typedef xPolyTextReq xPolyText8Req;
typedef xPolyTextReq xPolyText16Req;
typedef struct {
    CARD8 reqType;
    BYTE nChars;
    CARD16 length;
    CARD32 drawable;
    CARD32 gc;
    INT16 x;
    INT16 y;
} xImageTextReq;
typedef xImageTextReq xImageText8Req;
typedef xImageTextReq xImageText16Req;
typedef struct {
    CARD8 reqType;
    BYTE alloc;
    CARD16 length;
    CARD32 mid;
    CARD32 window;
    CARD32 visual;
} xCreateColormapReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD32 mid;
    CARD32 srcCmap;
} xCopyColormapAndFreeReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD32 cmap;
    CARD16 red;
    CARD16 green;
    CARD16 blue;
    CARD16 pad2;
} xAllocColorReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD32 cmap;
    CARD16 nbytes;
    BYTE pad1;
    BYTE pad2;
} xAllocNamedColorReq;
typedef struct {
    CARD8 reqType;
    BOOL contiguous;
    CARD16 length;
    CARD32 cmap;
    CARD16 colors;
    CARD16 planes;
} xAllocColorCellsReq;
typedef struct {
    CARD8 reqType;
    BOOL contiguous;
    CARD16 length;
    CARD32 cmap;
    CARD16 colors;
    CARD16 red;
    CARD16 green;
    CARD16 blue;
} xAllocColorPlanesReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD32 cmap;
    CARD32 planeMask;
} xFreeColorsReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD32 cmap;
} xStoreColorsReq;
typedef struct {
    CARD8 reqType;
    CARD8 flags;
    CARD16 length;
    CARD32 cmap;
    CARD32 pixel;
    CARD16 nbytes;
    BYTE pad1;
    BYTE pad2;
} xStoreNamedColorReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD32 cmap;
} xQueryColorsReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD32 cmap;
    CARD16 nbytes;
    BYTE pad1;
    BYTE pad2;
} xLookupColorReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD32 cid;
    CARD32 source;
    CARD32 mask;
    CARD16 foreRed;
    CARD16 foreGreen;
    CARD16 foreBlue;
    CARD16 backRed;
    CARD16 backGreen;
    CARD16 backBlue;
    CARD16 x;
    CARD16 y;
} xCreateCursorReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD32 cid;
    CARD32 source;
    CARD32 mask;
    CARD16 sourceChar;
    CARD16 maskChar;
    CARD16 foreRed;
    CARD16 foreGreen;
    CARD16 foreBlue;
    CARD16 backRed;
    CARD16 backGreen;
    CARD16 backBlue;
} xCreateGlyphCursorReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD32 cursor;
    CARD16 foreRed;
    CARD16 foreGreen;
    CARD16 foreBlue;
    CARD16 backRed;
    CARD16 backGreen;
    CARD16 backBlue;
} xRecolorCursorReq;
typedef struct {
    CARD8 reqType;
    CARD8 c_class;
    CARD16 length;
    CARD32 drawable;
    CARD16 width;
    CARD16 height;
} xQueryBestSizeReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD16 nbytes;
    BYTE pad1;
    BYTE pad2;
} xQueryExtensionReq;
typedef struct {
    CARD8 reqType;
    CARD8 numKeyPerModifier;
    CARD16 length;
} xSetModifierMappingReq;
typedef struct {
    CARD8 reqType;
    CARD8 nElts;
    CARD16 length;
} xSetPointerMappingReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD8 firstKeyCode;
    CARD8 count;
    CARD16 pad1;
} xGetKeyboardMappingReq;
typedef struct {
    CARD8 reqType;
    CARD8 keyCodes;
    CARD16 length;
    CARD8 firstKeyCode;
    CARD8 keySymsPerKeyCode;
    CARD16 pad1;
} xChangeKeyboardMappingReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD32 mask;
} xChangeKeyboardControlReq;
typedef struct {
    CARD8 reqType;
    INT8 percent;
    CARD16 length;
} xBellReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    INT16 accelNum;
    INT16 accelDenum;
    INT16 threshold;
    BOOL doAccel;
    BOOL doThresh;
} xChangePointerControlReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    INT16 timeout;
    INT16 interval;
    BYTE preferBlank;
    BYTE allowExpose;
    CARD16 pad2;
} xSetScreenSaverReq;
typedef struct {
    CARD8 reqType;
    BYTE mode;
    CARD16 length;
    CARD8 hostFamily;
    BYTE pad;
    CARD16 hostLength;
} xChangeHostsReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
} xListHostsReq;
typedef struct {
    CARD8 reqType;
    BYTE mode;
    CARD16 length;
} xChangeModeReq;
typedef xChangeModeReq xSetAccessControlReq;
typedef xChangeModeReq xSetCloseDownModeReq;
typedef xChangeModeReq xForceScreenSaverReq;
typedef struct {
    CARD8 reqType;
    BYTE pad;
    CARD16 length;
    CARD32 window;
    CARD16 nAtoms;
    INT16 nPositions;
} xRotatePropertiesReq;

typedef union {
    xGenericReply generic;
    xGetGeometryReply geom;
    xQueryTreeReply tree;
    xInternAtomReply atom;
    xGetAtomNameReply atomName;
    xGetPropertyReply property;
    xListPropertiesReply listProperties;
    xGetSelectionOwnerReply selection;
    xGrabPointerReply grabPointer;
    xGrabKeyboardReply grabKeyboard;
    xQueryPointerReply pointer;
    xGetMotionEventsReply motionEvents;
    xTranslateCoordsReply coords;
    xGetInputFocusReply inputFocus;
    xQueryTextExtentsReply textExtents;
    xListFontsReply fonts;
    xGetFontPathReply fontPath;
    xGetImageReply image;
    xListInstalledColormapsReply colormaps;
    xAllocColorReply allocColor;
    xAllocNamedColorReply allocNamedColor;
    xAllocColorCellsReply colorCells;
    xAllocColorPlanesReply colorPlanes;
    xQueryColorsReply colors;
    xLookupColorReply lookupColor;
    xQueryBestSizeReply bestSize;
    xQueryExtensionReply extension;
    xListExtensionsReply extensions;
    xSetModifierMappingReply setModifierMapping;
    xGetModifierMappingReply getModifierMapping;
    xSetPointerMappingReply setPointerMapping;
    xGetKeyboardMappingReply getKeyboardMapping;
    xGetPointerMappingReply getPointerMapping;
    xGetPointerControlReply pointerControl;
    xGetScreenSaverReply screenSaver;
    xListHostsReply hosts;
    xError error;
    xEvent event;
} xReply;
typedef struct {
    CARD8 reqType;
    BOOL propagate;
    CARD16 length;
    CARD32 destination;
    CARD32 eventMask;
    xEvent event;
} xSendEventReq;
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/Xprotostr.h</TITLE>
<PARA>
</PARA>
<SCREEN>

typedef struct _xSegment {
    INT16 x1;
    INT16 y1;
    INT16 x2;
    INT16 y2;
} xSegment;
typedef struct _xPoint {
    INT16 x;
    INT16 y;
} xPoint;
typedef struct _xRectangle {
    INT16 x;
    INT16 y;
    CARD16 width;
    CARD16 height;
} xRectangle;
typedef struct _xArc {
    INT16 x;
    INT16 y;
    CARD16 width;
    CARD16 height;
    INT16 angle1;
    INT16 angle2;
} xArc;
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/Xresource.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define NULLQUARK	((XrmQuark) 0)

typedef int XrmQuark;
typedef int *XrmQuarkList;
typedef char *XrmString;
typedef enum {
    XrmBindTightly,
    XrmBindLoosely
} XrmBinding;
typedef enum *XrmBindingList;
typedef XrmQuark XrmName;
typedef XrmQuarkList XrmNameList;
typedef XrmQuark XrmClass;
typedef XrmQuarkList XrmClassList;
typedef XrmQuark XrmRepresentation;
typedef struct {
    unsigned int size;
    XPointer addr;
} XrmValue;
typedef struct {
    unsigned int size;
    XPointer addr;
} *XrmValuePtr;
typedef struct _XrmHashBucketRec *XrmHashBucket;
typedef XrmHashBucket *XrmHashTable;
typedef XrmHashTable XrmSearchList[];
typedef struct _XrmHashBucketRec *XrmDatabase;
typedef enum {
    XrmoptionNoArg,
    XrmoptionIsArg,
    XrmoptionStickyArg,
    XrmoptionSepArg,
    XrmoptionResArg,
    XrmoptionSkipArg,
    XrmoptionSkipLine,
    XrmoptionSkipNArgs
} XrmOptionKind;
typedef struct {
    char *option;
    char *specifier;
    XrmOptionKind argKind;
    XPointer value;
} XrmOptionDescRec;
typedef struct {
    char *option;
    char *specifier;
    XrmOptionKind argKind;
    XPointer value;
} *XrmOptionDescList;
extern void XrmCombineDatabase(XrmDatabase, XrmDatabase *, int);
extern int XrmCombineFileDatabase(const char *, XrmDatabase *, int);
extern void XrmDestroyDatabase(XrmDatabase);
extern int XrmEnumerateDatabase(XrmDatabase, XrmNameList, XrmClassList,
				int, int (*)(XrmDatabase *, XrmBindingList,
					     XrmQuarkList,
					     XrmRepresentation *,
					     XrmValue *, XPointer)
				, XPointer);
extern XrmDatabase XrmGetDatabase(Display *);
extern XrmDatabase XrmGetFileDatabase(const char *);
extern int XrmGetResource(XrmDatabase, const char *, const char *, char **,
			  XrmValue *);
extern XrmDatabase XrmGetStringDatabase(const char *);
extern const char *XrmLocaleOfDatabase(XrmDatabase);
extern void XrmMergeDatabases(XrmDatabase, XrmDatabase *);
extern void XrmParseCommand(XrmDatabase *, XrmOptionDescList, int,
			    const char *, int *, char **);
extern XrmQuark XrmPermStringToQuark(const char *);
extern void XrmPutFileDatabase(XrmDatabase, const char *);
extern void XrmPutLineResource(XrmDatabase *, const char *);
extern void XrmPutResource(XrmDatabase *, const char *, const char *,
			   XrmValue *);
extern void XrmPutStringResource(XrmDatabase *, const char *,
				 const char *);
extern int XrmQGetResource(XrmDatabase, XrmNameList, XrmClassList,
			   XrmRepresentation *, XrmValue *);
extern int XrmQGetSearchList(XrmDatabase, XrmNameList, XrmClassList,
			     XrmSearchList, int);
extern int XrmQGetSearchResource(XrmSearchList, XrmName, XrmClass,
				 XrmRepresentation *, XrmValue *);
extern void XrmQPutResource(XrmDatabase *, XrmBindingList, XrmQuarkList,
			    XrmRepresentation, XrmValue *);
extern void XrmQPutStringResource(XrmDatabase *, XrmBindingList,
				  XrmQuarkList, const char *);
extern XrmString XrmQuarkToString(XrmQuark);
extern void XrmSetDatabase(Display *, XrmDatabase);
extern void XrmStringToBindingQuarkList(const char *, XrmBindingList,
					XrmQuarkList);
extern XrmQuark XrmStringToQuark(const char *);
extern void XrmStringToQuarkList(const char *, XrmQuarkList);
extern XrmQuark XrmUniqueQuark(void);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/Xutil.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define IsModifierKey(keysym)	((((KeySym)(keysym)>=XK_Shift_L)&amp;&amp;((KeySym)(keysym)&lt;=XK_Hype
#define IsPrivateKeypadKey(keysym)	(((KeySym)(keysym)>=0x11000000)&amp;&amp;((KeySym)(keysym)&lt;=0x1100FF
#define IsFunctionKey(keysym)	(((KeySym)(keysym)>=XK_F1)&amp;&amp;((KeySym)(keysym)&lt;=XK_F35))
#define IsCursorKey(keysym)	(((KeySym)(keysym)>=XK_Home)&amp;&amp;((KeySym)(keysym)&lt;XK_Select))
#define IsPFKey(keysym)	(((KeySym)(keysym)>=XK_KP_F1)&amp;&amp;((KeySym)(keysym)&lt;=XK_KP_F4))
#define IsKeypadKey(keysym)	(((KeySym)(keysym)>=XK_KP_Space)&amp;&amp;((KeySym)(keysym)&lt;=XK_KP_E
#define IsMiscFunctionKey(keysym)	(((KeySym)(keysym)>=XK_Select)&amp;&amp;((KeySym)(keysym)&lt;=XK_Break)
#define XStringToContext(string)	((XContext)XrmStringToQuark(string))
#define XUniqueContext()	((XContext)XrmUniqueQuark())
#define ReleaseByFreeingColormap	((XID)1L)
#define InputHint	(1L&lt;&lt;0)
#define USPosition	(1L&lt;&lt;0)
#define StateHint	(1L&lt;&lt;1)
#define USSize	(1L&lt;&lt;1)
#define IconPixmapHint	(1L&lt;&lt;2)
#define PPosition	(1L&lt;&lt;2)
#define IconWindowHint	(1L&lt;&lt;3)
#define PSize	(1L&lt;&lt;3)
#define IconPositionHint	(1L&lt;&lt;4)
#define PMinSize	(1L&lt;&lt;4)
#define IconMaskHint	(1L&lt;&lt;5)
#define PMaxSize	(1L&lt;&lt;5)
#define PResizeInc	(1L&lt;&lt;6)
#define WindowGroupHint	(1L&lt;&lt;6)
#define PAspect	(1L&lt;&lt;7)
#define PBaseSize	(1L&lt;&lt;8)
#define XUrgencyHint	(1L&lt;&lt;8)
#define PWinGravity	(1L&lt;&lt;9)
#define AllHints	(InputHint|StateHint|IconPixmapHint|IconWindowHint|IconPositionHint|IconMaskHint|WindowGroupHint)
#define PAllHints	(PPosition|PSize|PMinSize|PMaxSize|PResizeInc|PAspect)
#define XNoMemory	-1
#define XLocaleNotSupported	-2
#define XConverterNotFound	-3
#define BitmapSuccess	0
#define DontCareState	0
#define RectangleOut	0
#define WithdrawnState	0
#define XCSUCCESS	0
#define VisualNoMask	0x0
#define NoValue	0x0000
#define XValue	0x0001
#define YValue	0x0002
#define WidthValue	0x0004
#define HeightValue	0x0008
#define AllValues	0x000F
#define XNegative	0x0010
#define YNegative	0x0020
#define VisualIDMask	0x1
#define VisualRedMaskMask	0x10
#define VisualBitsPerRGBMask	0x100
#define VisualAllMask	0x1FF
#define VisualScreenMask	0x2
#define VisualGreenMaskMask	0x20
#define VisualDepthMask	0x4
#define VisualBlueMaskMask	0x40
#define VisualClassMask	0x8
#define VisualColormapSizeMask	0x80
#define BitmapOpenFailed	1
#define NormalState	1
#define RectangleIn	1
#define XCNOMEM	1
#define BitmapFileInvalid	2
#define RectanglePart	2
#define XCNOENT	2
#define ZoomState	2
#define BitmapNoMemory	3
#define IconicState	3
#define InactiveState	4

typedef struct {
    long int flags;
    int x;
    int y;
    int width;
    int height;
    int min_width;
    int min_height;
    int max_width;
    int max_height;
    int width_inc;
    int height_inc;
    struct {
	int x;
	int y;
    } min_aspect;
    struct {
	int x;
	int y;
    } max_aspect;
    int base_width;
    int base_height;
    int win_gravity;
} XSizeHints;
typedef struct {
    long int flags;
    int input;
    int initial_state;
    Pixmap icon_pixmap;
    Window icon_window;
    int icon_x;
    int icon_y;
    Pixmap icon_mask;
    XID window_group;
} XWMHints;
typedef struct {
    unsigned char *value;
    Atom encoding;
    int format;
    unsigned long int nitems;
} XTextProperty;
typedef struct {
    int min_width;
    int min_height;
    int max_width;
    int max_height;
    int width_inc;
    int height_inc;
} XIconSize;
typedef struct {
    char *res_name;
    char *res_class;
} XClassHint;
typedef struct _XComposeStatus {
    XPointer compose_ptr;
    int chars_matched;
} XComposeStatus;
typedef struct _XRegion *Region;
typedef struct {
    Visual *visual;
    VisualID visualid;
    int screen;
    int depth;
    int c_class;
    unsigned long int red_mask;
    unsigned long int green_mask;
    unsigned long int blue_mask;
    int colormap_size;
    int bits_per_rgb;
} XVisualInfo;
typedef struct {
    Colormap colormap;
    unsigned long int red_max;
    unsigned long int red_mult;
    unsigned long int green_max;
    unsigned long int green_mult;
    unsigned long int blue_max;
    unsigned long int blue_mult;
    unsigned long int base_pixel;
    VisualID visualid;
    XID killid;
} XStandardColormap;
typedef int XContext;
typedef enum {
    XStringStyle = 0,
    XCompoundTextStyle = 1,
    XTextStyle = 2,
    XStdICCTextStyle = 3,
    XUTF8StringStyle = 4
} XICCEncodingStyle;
extern int XAddPixel(XImage *, long int);
extern XClassHint *XAllocClassHint(void);
extern XIconSize *XAllocIconSize(void);
extern XSizeHints *XAllocSizeHints(void);
extern XStandardColormap *XAllocStandardColormap(void);
extern XWMHints *XAllocWMHints(void);
extern int XClipBox(Region, XRectangle *);
extern void XConvertCase(KeySym, KeySym *, KeySym *);
extern Region XCreateRegion(void);
extern const char *XDefaultString(void);
extern int XDeleteContext(Display *, XID, XContext);
extern int XDestroyImage(XImage *);
extern int XDestroyRegion(Region);
extern int XEmptyRegion(Region);
extern int XEqualRegion(Region, Region);
extern int XFindContext(Display *, XID, XContext, XPointer *);
extern int XGetClassHint(Display *, Window, XClassHint *);
extern int XGetIconSizes(Display *, Window, XIconSize * *, int *);
extern int XGetNormalHints(Display *, Window, XSizeHints *);
extern unsigned long int XGetPixel(XImage *, int, int);
extern int XGetRGBColormaps(Display *, Window, XStandardColormap * *,
			    int *, Atom);
extern int XGetSizeHints(Display *, Window, XSizeHints *, Atom);
extern int XGetStandardColormap(Display *, Window, XStandardColormap *,
				Atom);
extern int XGetTextProperty(Display *, Window, XTextProperty *, Atom);
extern XVisualInfo *XGetVisualInfo(Display *, long int, XVisualInfo *,
				   int *);
extern int XGetWMClientMachine(Display *, Window, XTextProperty *);
extern XWMHints *XGetWMHints(Display *, Window);
extern int XGetWMIconName(Display *, Window, XTextProperty *);
extern int XGetWMName(Display *, Window, XTextProperty *);
extern int XGetWMNormalHints(Display *, Window, XSizeHints *, long int *);
extern int XGetWMSizeHints(Display *, Window, XSizeHints *, long int *,
			   Atom);
extern int XGetZoomHints(Display *, Window, XSizeHints *);
extern int XIntersectRegion(Region, Region, Region);
extern int XLookupString(XKeyEvent *, char *, int, KeySym *,
			 XComposeStatus *);
extern int XMatchVisualInfo(Display *, int, int, int, XVisualInfo *);
extern int XOffsetRegion(Region, int, int);
extern int XPointInRegion(Region, int, int);
extern Region XPolygonRegion(XPoint *, int, int);
extern int XPutPixel(XImage *, int, int, unsigned long int);
extern int XRectInRegion(Region, int, int, unsigned int, unsigned int);
extern int XSaveContext(Display *, XID, XContext, const char *);
extern int XSetClassHint(Display *, Window, XClassHint *);
extern int XSetIconSizes(Display *, Window, XIconSize *, int);
extern int XSetNormalHints(Display *, Window, XSizeHints *);
extern void XSetRGBColormaps(Display *, Window, XStandardColormap *, int,
			     Atom);
extern int XSetRegion(Display *, GC, Region);
extern int XSetSizeHints(Display *, Window, XSizeHints *, Atom);
extern void XSetStandardColormap(Display *, Window, XStandardColormap *,
				 Atom);
extern int XSetStandardProperties(Display *, Window, const char *,
				  const char *, Pixmap, char **, int,
				  XSizeHints *);
extern void XSetTextProperty(Display *, Window, XTextProperty *, Atom);
extern void XSetWMClientMachine(Display *, Window, XTextProperty *);
extern int XSetWMHints(Display *, Window, XWMHints *);
extern void XSetWMIconName(Display *, Window, XTextProperty *);
extern void XSetWMName(Display *, Window, XTextProperty *);
extern void XSetWMNormalHints(Display *, Window, XSizeHints *);
extern void XSetWMProperties(Display *, Window, XTextProperty *,
			     XTextProperty *, char **, int, XSizeHints *,
			     XWMHints *, XClassHint *);
extern void XSetWMSizeHints(Display *, Window, XSizeHints *, Atom);
extern int XSetZoomHints(Display *, Window, XSizeHints *);
extern int XShrinkRegion(Region, int, int);
extern int XStringListToTextProperty(char **, int, XTextProperty *);
extern XImage *XSubImage(XImage *, int, int, unsigned int, unsigned int);
extern int XSubtractRegion(Region, Region, Region);
extern int XTextPropertyToStringList(XTextProperty *, char ***, int *);
extern int XUnionRectWithRegion(XRectangle *, Region, Region);
extern int XUnionRegion(Region, Region, Region);
extern int XWMGeometry(Display *, int, const char *, const char *,
		       unsigned int, XSizeHints *, int *, int *, int *,
		       int *, int *);
extern int XXorRegion(Region, Region, Region);
extern void XmbSetWMProperties(Display *, Window, const char *,
			       const char *, char **, int, XSizeHints *,
			       XWMHints *, XClassHint *);
extern int XmbTextListToTextProperty(Display *, char **, int,
				     XICCEncodingStyle, XTextProperty *);
extern int XmbTextPropertyToTextList(Display *, const XTextProperty *,
				     char ***, int *);
extern void XwcFreeStringList(wchar_t * *);
extern int XwcTextListToTextProperty(Display *, wchar_t * *, int,
				     XICCEncodingStyle, XTextProperty *);
extern int XwcTextPropertyToTextList(Display *, const XTextProperty *,
				     wchar_t * **, int *);
extern int Xutf8TextPropertyToTextList(Display *, const XTextProperty *,
				       char ***, int *);
extern int Xutf8TextListToTextProperty(Display *, char **, int,
				       XICCEncodingStyle, XTextProperty *);
</SCREEN>
</SECT2>
</SECT1>
<SECT1 ID=libX11man>
<TITLE>Interface Definitions for libX11</TITLE>
<PARA>
The interfaces defined on the following pages are included in libX11 and are defined
by this specification.
Unless otherwise noted, these interfaces shall be included
in the source standard.
</PARA>
<PARA>
Other interfaces listed in <XREF LINKEND=libX11> shall behave as described
in the referenced base document.
</PARA>
<!-- MISSING DEFINITION FOR Xutf8TextListToTextProperty -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR Xutf8TextPropertyToTextList -->
<!-- Lets just hope nobody notices -->
</SECT1>
<!-- End of text generated from database -->
