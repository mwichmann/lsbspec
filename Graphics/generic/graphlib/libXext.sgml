<!-- Start of generated text - do not edit! -->
<!-- generated from the LSB specification database by mklibspec -->
<SECT1 ID=libXext>
<TITLE>Interfaces for libXext</TITLE>
<PARA>
<XREF LINKEND="lib-libXext-def"> defines the library name and shared object name
for the libXext library
</PARA>
<TABLE id="lib-libXext-def">
<TITLE>libXext Definition</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Library:</ENTRY>
<ENTRY>libXext</ENTRY>
</ROW>
<ROW>
<ENTRY>SONAME:</ENTRY>
<ENTRY>libXext.so.6</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The behavior of the interfaces in this library is specified by the following specifications:<SIMPLELIST COLUMNS=1>
<MEMBER ID='REFSTD.libXext.1'>
[X-dbe] <XREF LINKEND="std.X.dbe">
</MEMBER>
<MEMBER ID='REFSTD.libXext.2'>
[X-DPMS] <XREF LINKEND="std.X.DPMS">
</MEMBER>
<MEMBER ID='REFSTD.libXext.3'>
[X-evi] <XREF LINKEND="std.X.evi">
</MEMBER>
<MEMBER ID='REFSTD.libXext.4'>
[X-security] <XREF LINKEND="std.X.security">
</MEMBER>
<MEMBER ID='REFSTD.libXext.5'>
[X-shape] <XREF LINKEND="std.X.shape">
</MEMBER>
<MEMBER ID='REFSTD.libXext.6'>
[X-shm] <XREF LINKEND="std.X.shm">
</MEMBER>
<MEMBER ID='REFSTD.libXext.7'>
[X-sync] <XREF LINKEND="std.X.sync">
</MEMBER>
</SIMPLELIST>
</PARA>
<!-- debug: database interface name X Shape Extension -->
<SECT2>
<!--libgroup-->
<TITLE>X Shape Extension</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for X Shape Extension</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic functions
for X Shape Extension specified in <XREF linkend="tbl-libXext-x-sha-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<TABLE id="tbl-libXext-x-sha-ints">
<TITLE>libXext - X Shape Extension Function Interfaces</TITLE>
<TGROUP COLS=4>
<TBODY>
<ROW>
<ENTRY><indexterm><primary>XShapeCombineMask</primary></indexterm>XShapeCombineMask <LINK LINKEND="REFSTD.libXext.5">[X-shape]</LINK></ENTRY>
<ENTRY><indexterm><primary>XShapeCombineRectangles</primary></indexterm>XShapeCombineRectangles <LINK LINKEND="REFSTD.libXext.5">[X-shape]</LINK></ENTRY>
<ENTRY><indexterm><primary>XShapeCombineRegion</primary></indexterm>XShapeCombineRegion <LINK LINKEND="REFSTD.libXext.5">[X-shape]</LINK></ENTRY>
<ENTRY><indexterm><primary>XShapeCombineShape</primary></indexterm>XShapeCombineShape <LINK LINKEND="REFSTD.libXext.5">[X-shape]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XShapeGetRectangles</primary></indexterm>XShapeGetRectangles <LINK LINKEND="REFSTD.libXext.5">[X-shape]</LINK></ENTRY>
<ENTRY><indexterm><primary>XShapeInputSelected</primary></indexterm>XShapeInputSelected <LINK LINKEND="REFSTD.libXext.5">[X-shape]</LINK></ENTRY>
<ENTRY><indexterm><primary>XShapeOffsetShape</primary></indexterm>XShapeOffsetShape <LINK LINKEND="REFSTD.libXext.5">[X-shape]</LINK></ENTRY>
<ENTRY><indexterm><primary>XShapeQueryExtension</primary></indexterm>XShapeQueryExtension <LINK LINKEND="REFSTD.libXext.5">[X-shape]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XShapeQueryExtents</primary></indexterm>XShapeQueryExtents <LINK LINKEND="REFSTD.libXext.5">[X-shape]</LINK></ENTRY>
<ENTRY><indexterm><primary>XShapeQueryVersion</primary></indexterm>XShapeQueryVersion <LINK LINKEND="REFSTD.libXext.5">[X-shape]</LINK></ENTRY>
<ENTRY><indexterm><primary>XShapeSelectInput</primary></indexterm>XShapeSelectInput <LINK LINKEND="REFSTD.libXext.5">[X-shape]</LINK></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>
</SECT2>
<!-- debug: database interface name X Display Power Management Signaling Extension -->
<SECT2>
<!--libgroup-->
<TITLE>X Display Power Management Signaling Extension</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for X Display Power Management Signaling Extension</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic functions
for X Display Power Management Signaling Extension specified in <XREF linkend="tbl-libXext-x-dis-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<TABLE id="tbl-libXext-x-dis-ints">
<TITLE>libXext - X Display Power Management Signaling Extension Function Interfaces</TITLE>
<TGROUP COLS=4>
<TBODY>
<ROW>
<ENTRY><indexterm><primary>DPMSCapable</primary></indexterm>DPMSCapable <LINK LINKEND="REFSTD.libXext.2">[X-DPMS]</LINK></ENTRY>
<ENTRY><indexterm><primary>DPMSDisable</primary></indexterm>DPMSDisable <LINK LINKEND="REFSTD.libXext.2">[X-DPMS]</LINK></ENTRY>
<ENTRY><indexterm><primary>DPMSEnable</primary></indexterm>DPMSEnable <LINK LINKEND="REFSTD.libXext.2">[X-DPMS]</LINK></ENTRY>
<ENTRY><indexterm><primary>DPMSForceLevel</primary></indexterm>DPMSForceLevel <LINK LINKEND="REFSTD.libXext.2">[X-DPMS]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>DPMSGetTimeouts</primary></indexterm>DPMSGetTimeouts <LINK LINKEND="REFSTD.libXext.2">[X-DPMS]</LINK></ENTRY>
<ENTRY><indexterm><primary>DPMSGetVersion</primary></indexterm>DPMSGetVersion <LINK LINKEND="REFSTD.libXext.2">[X-DPMS]</LINK></ENTRY>
<ENTRY><indexterm><primary>DPMSInfo</primary></indexterm>DPMSInfo <LINK LINKEND="REFSTD.libXext.2">[X-DPMS]</LINK></ENTRY>
<ENTRY><indexterm><primary>DPMSQueryExtension</primary></indexterm>DPMSQueryExtension <LINK LINKEND="REFSTD.libXext.2">[X-DPMS]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>DPMSSetTimeouts</primary></indexterm>DPMSSetTimeouts <LINK LINKEND="REFSTD.libXext.2">[X-DPMS]</LINK></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>
</SECT2>
<!-- debug: database interface name X Shared Memory Extensions -->
<SECT2>
<!--libgroup-->
<TITLE>X Shared Memory Extensions</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for X Shared Memory Extensions</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic functions
for X Shared Memory Extensions specified in <XREF linkend="tbl-libXext-1-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<TABLE id="tbl-libXext-1-ints">
<TITLE>libXext - X Shared Memory Extensions Function Interfaces</TITLE>
<TGROUP COLS=4>
<TBODY>
<ROW>
<ENTRY><indexterm><primary>XShmAttach</primary></indexterm>XShmAttach <LINK LINKEND="REFSTD.libXext.6">[X-shm]</LINK></ENTRY>
<ENTRY><indexterm><primary>XShmCreateImage</primary></indexterm>XShmCreateImage <LINK LINKEND="REFSTD.libXext.6">[X-shm]</LINK></ENTRY>
<ENTRY><indexterm><primary>XShmCreatePixmap</primary></indexterm>XShmCreatePixmap <LINK LINKEND="REFSTD.libXext.6">[X-shm]</LINK></ENTRY>
<ENTRY><indexterm><primary>XShmDetach</primary></indexterm>XShmDetach <LINK LINKEND="REFSTD.libXext.6">[X-shm]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XShmGetEventBase</primary></indexterm>XShmGetEventBase <LINK LINKEND="REFSTD.libXext.6">[X-shm]</LINK></ENTRY>
<ENTRY><indexterm><primary>XShmGetImage</primary></indexterm>XShmGetImage <LINK LINKEND="REFSTD.libXext.6">[X-shm]</LINK></ENTRY>
<ENTRY><indexterm><primary>XShmPixmapFormat</primary></indexterm>XShmPixmapFormat <LINK LINKEND="REFSTD.libXext.6">[X-shm]</LINK></ENTRY>
<ENTRY><indexterm><primary>XShmPutImage</primary></indexterm>XShmPutImage <LINK LINKEND="REFSTD.libXext.6">[X-shm]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XShmQueryExtension</primary></indexterm>XShmQueryExtension <LINK LINKEND="REFSTD.libXext.6">[X-shm]</LINK></ENTRY>
<ENTRY><indexterm><primary>XShmQueryVersion</primary></indexterm>XShmQueryVersion <LINK LINKEND="REFSTD.libXext.6">[X-shm]</LINK></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>
</SECT2>
<!-- debug: database interface name MIT-MISC Extension -->
<SECT2>
<!--libgroup-->
<TITLE>MIT-MISC Extension</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for MIT-MISC Extension</TITLE>
<PARA>
No external functions are defined for libXext - MIT-MISC Extension
in this part of the specification. See also the relevant architecture specific part of this specification.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name X Synchronization Extension -->
<SECT2>
<!--libgroup-->
<TITLE>X Synchronization Extension</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for X Synchronization Extension</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic functions
for X Synchronization Extension specified in <XREF linkend="tbl-libXext-x-syn-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<TABLE id="tbl-libXext-x-syn-ints">
<TITLE>libXext - X Synchronization Extension Function Interfaces</TITLE>
<TGROUP COLS=4>
<TBODY>
<ROW>
<ENTRY><indexterm><primary>XSyncAwait</primary></indexterm>XSyncAwait <LINK LINKEND="REFSTD.libXext.7">[X-sync]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSyncChangeAlarm</primary></indexterm>XSyncChangeAlarm <LINK LINKEND="REFSTD.libXext.7">[X-sync]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSyncChangeCounter</primary></indexterm>XSyncChangeCounter <LINK LINKEND="REFSTD.libXext.7">[X-sync]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSyncCreateAlarm</primary></indexterm>XSyncCreateAlarm <LINK LINKEND="REFSTD.libXext.7">[X-sync]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XSyncCreateCounter</primary></indexterm>XSyncCreateCounter <LINK LINKEND="REFSTD.libXext.7">[X-sync]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSyncDestroyAlarm</primary></indexterm>XSyncDestroyAlarm <LINK LINKEND="REFSTD.libXext.7">[X-sync]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSyncDestroyCounter</primary></indexterm>XSyncDestroyCounter <LINK LINKEND="REFSTD.libXext.7">[X-sync]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSyncFreeSystemCounterList</primary></indexterm>XSyncFreeSystemCounterList <LINK LINKEND="REFSTD.libXext.7">[X-sync]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XSyncGetPriority</primary></indexterm>XSyncGetPriority <LINK LINKEND="REFSTD.libXext.7">[X-sync]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSyncInitialize</primary></indexterm>XSyncInitialize <LINK LINKEND="REFSTD.libXext.7">[X-sync]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSyncIntToValue</primary></indexterm>XSyncIntToValue <LINK LINKEND="REFSTD.libXext.7">[X-sync]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSyncIntsToValue</primary></indexterm>XSyncIntsToValue <LINK LINKEND="REFSTD.libXext.7">[X-sync]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XSyncListSystemCounters</primary></indexterm>XSyncListSystemCounters <LINK LINKEND="REFSTD.libXext.7">[X-sync]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSyncMaxValue</primary></indexterm>XSyncMaxValue <LINK LINKEND="REFSTD.libXext.7">[X-sync]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSyncMinValue</primary></indexterm>XSyncMinValue <LINK LINKEND="REFSTD.libXext.7">[X-sync]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSyncQueryAlarm</primary></indexterm>XSyncQueryAlarm <LINK LINKEND="REFSTD.libXext.7">[X-sync]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XSyncQueryCounter</primary></indexterm>XSyncQueryCounter <LINK LINKEND="REFSTD.libXext.7">[X-sync]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSyncQueryExtension</primary></indexterm>XSyncQueryExtension <LINK LINKEND="REFSTD.libXext.7">[X-sync]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSyncSetCounter</primary></indexterm>XSyncSetCounter <LINK LINKEND="REFSTD.libXext.7">[X-sync]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSyncSetPriority</primary></indexterm>XSyncSetPriority <LINK LINKEND="REFSTD.libXext.7">[X-sync]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XSyncValueAdd</primary></indexterm>XSyncValueAdd <LINK LINKEND="REFSTD.libXext.7">[X-sync]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSyncValueEqual</primary></indexterm>XSyncValueEqual <LINK LINKEND="REFSTD.libXext.7">[X-sync]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSyncValueGreaterOrEqual</primary></indexterm>XSyncValueGreaterOrEqual <LINK LINKEND="REFSTD.libXext.7">[X-sync]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSyncValueGreaterThan</primary></indexterm>XSyncValueGreaterThan <LINK LINKEND="REFSTD.libXext.7">[X-sync]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XSyncValueHigh32</primary></indexterm>XSyncValueHigh32 <LINK LINKEND="REFSTD.libXext.7">[X-sync]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSyncValueIsNegative</primary></indexterm>XSyncValueIsNegative <LINK LINKEND="REFSTD.libXext.7">[X-sync]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSyncValueIsPositive</primary></indexterm>XSyncValueIsPositive <LINK LINKEND="REFSTD.libXext.7">[X-sync]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSyncValueIsZero</primary></indexterm>XSyncValueIsZero <LINK LINKEND="REFSTD.libXext.7">[X-sync]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XSyncValueLessOrEqual</primary></indexterm>XSyncValueLessOrEqual <LINK LINKEND="REFSTD.libXext.7">[X-sync]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSyncValueLessThan</primary></indexterm>XSyncValueLessThan <LINK LINKEND="REFSTD.libXext.7">[X-sync]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSyncValueLow32</primary></indexterm>XSyncValueLow32 <LINK LINKEND="REFSTD.libXext.7">[X-sync]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSyncValueSubtract</primary></indexterm>XSyncValueSubtract <LINK LINKEND="REFSTD.libXext.7">[X-sync]</LINK></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>
</SECT2>
<!-- debug: database interface name X Security Extension -->
<SECT2>
<!--libgroup-->
<TITLE>X Security Extension</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for X Security Extension</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic functions
for X Security Extension specified in <XREF linkend="tbl-libXext-x-sec-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<TABLE id="tbl-libXext-x-sec-ints">
<TITLE>libXext - X Security Extension Function Interfaces</TITLE>
<TGROUP COLS=4>
<TBODY>
<ROW>
<ENTRY><indexterm><primary>XSecurityAllocXauth</primary></indexterm>XSecurityAllocXauth <LINK LINKEND="REFSTD.libXext.4">[X-security]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSecurityFreeXauth</primary></indexterm>XSecurityFreeXauth <LINK LINKEND="REFSTD.libXext.4">[X-security]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSecurityGenerateAuthorization</primary></indexterm>XSecurityGenerateAuthorization <LINK LINKEND="REFSTD.libXext.4">[X-security]</LINK></ENTRY>
<ENTRY><indexterm><primary>XSecurityQueryExtension</primary></indexterm>XSecurityQueryExtension <LINK LINKEND="REFSTD.libXext.4">[X-security]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XSecurityRevokeAuthorization</primary></indexterm>XSecurityRevokeAuthorization <LINK LINKEND="REFSTD.libXext.4">[X-security]</LINK></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>
</SECT2>
<!-- debug: database interface name X Double Buffer Extension -->
<SECT2>
<!--libgroup-->
<TITLE>X Double Buffer Extension</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for X Double Buffer Extension</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic functions
for X Double Buffer Extension specified in <XREF linkend="tbl-libXext-x-dou-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<TABLE id="tbl-libXext-x-dou-ints">
<TITLE>libXext - X Double Buffer Extension Function Interfaces</TITLE>
<TGROUP COLS=4>
<TBODY>
<ROW>
<ENTRY><indexterm><primary>XdbeAllocateBackBufferName</primary></indexterm>XdbeAllocateBackBufferName <LINK LINKEND="REFSTD.libXext.1">[X-dbe]</LINK></ENTRY>
<ENTRY><indexterm><primary>XdbeBeginIdiom</primary></indexterm>XdbeBeginIdiom <LINK LINKEND="REFSTD.libXext.1">[X-dbe]</LINK></ENTRY>
<ENTRY><indexterm><primary>XdbeDeallocateBackBufferName</primary></indexterm>XdbeDeallocateBackBufferName <LINK LINKEND="REFSTD.libXext.1">[X-dbe]</LINK></ENTRY>
<ENTRY><indexterm><primary>XdbeEndIdiom</primary></indexterm>XdbeEndIdiom <LINK LINKEND="REFSTD.libXext.1">[X-dbe]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XdbeFreeVisualInfo</primary></indexterm>XdbeFreeVisualInfo <LINK LINKEND="REFSTD.libXext.1">[X-dbe]</LINK></ENTRY>
<ENTRY><indexterm><primary>XdbeGetBackBufferAttributes</primary></indexterm>XdbeGetBackBufferAttributes <LINK LINKEND="REFSTD.libXext.1">[X-dbe]</LINK></ENTRY>
<ENTRY><indexterm><primary>XdbeGetVisualInfo</primary></indexterm>XdbeGetVisualInfo <LINK LINKEND="REFSTD.libXext.1">[X-dbe]</LINK></ENTRY>
<ENTRY><indexterm><primary>XdbeQueryExtension</primary></indexterm>XdbeQueryExtension <LINK LINKEND="REFSTD.libXext.1">[X-dbe]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XdbeSwapBuffers</primary></indexterm>XdbeSwapBuffers <LINK LINKEND="REFSTD.libXext.1">[X-dbe]</LINK></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>
</SECT2>
<!-- debug: database interface name X Extended Visual Interface Extension -->
<SECT2>
<!--libgroup-->
<TITLE>X Extended Visual Interface Extension</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for X Extended Visual Interface Extension</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic functions
for X Extended Visual Interface Extension specified in <XREF linkend="tbl-libXext-x-ext-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<TABLE id="tbl-libXext-x-ext-ints">
<TITLE>libXext - X Extended Visual Interface Extension Function Interfaces</TITLE>
<TGROUP COLS=4>
<TBODY>
<ROW>
<ENTRY><indexterm><primary>XeviGetVisualInfo</primary></indexterm>XeviGetVisualInfo <LINK LINKEND="REFSTD.libXext.3">[X-evi]</LINK></ENTRY>
<ENTRY><indexterm><primary>XeviQueryExtension</primary></indexterm>XeviQueryExtension <LINK LINKEND="REFSTD.libXext.3">[X-evi]</LINK></ENTRY>
<ENTRY><indexterm><primary>XeviQueryVersion</primary></indexterm>XeviQueryVersion <LINK LINKEND="REFSTD.libXext.3">[X-evi]</LINK></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>
</SECT2>
</SECT1>
<SECT1 ID=libXext-ddefs>
<TITLE>Data Definitions for libXext</TITLE>
<PARA>
This section defines global identifiers and their values that are associated
with interfaces contained in libXext.
These definitions are organized into groups that
correspond to system headers. This convention is used as a
convenience for the reader, and does not imply the existence
of these headers, or their content.
Where an interface is defined as requiring a particular system header file
all of the data definitions for that system header file presented here shall be in effect.
</PARA>
<PARA>
This section gives data definitions to promote binary application
portability, not to repeat source interface definitions available
elsewhere. System providers and application developers should use this ABI
to supplement - not to replace - source interface definition specifications.
</PARA>
<PARA>
This specification uses the <XREF LINKEND='std.ISOC99'> C Language as the reference programming language, and data definitions are specified in ISO C format. The C language is used here as a convenient notation. Using a C language description of these data objects does not preclude their use by other programming languages.</PARA>
<SECT2>
<TITLE>X11/extensions/XEVI.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define XEVI_TRANSPARENCY_NONE	0
#define XEVI_TRANSPARENCY_PIXEL	1
#define XEVI_TRANSPARENCY_MASK	2

typedef struct {
    VisualID core_visual_id;
    int screen;
    int level;
    unsigned int transparency_type;
    unsigned int transparency_value;
    unsigned int min_hw_colormaps;
    unsigned int max_hw_colormaps;
    unsigned int num_colormap_conflicts;
    VisualID *colormap_conflicts;
} ExtendedVisualInfo;
extern int XeviGetVisualInfo(Display *, Visual *, int,
			     ExtendedVisualInfo * *, int *);
extern int XeviQueryExtension(Display *);
extern int XeviQueryVersion(Display *, int *, int *);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/extensions/XKBgeom.h</TITLE>
<PARA>
</PARA>
<SCREEN>

typedef struct _XkbProperty {
    char *name;
    char *value;
} XkbPropertyRec;
typedef struct _XkbProperty *XkbPropertyPtr;
typedef struct _XkbColor {
    unsigned int pixel;
    char *spec;
} XkbColorRec;
typedef struct _XkbColor *XkbColorPtr;
typedef struct _XkbPoint {
    short x;
    short y;
} XkbPointRec;
typedef struct _XkbPoint *XkbPointPtr;
typedef struct _XkbBounds {
    short x1;
    short y1;
    short x2;
    short y2;
} XkbBoundsRec;
typedef struct _XkbBounds *XkbBoundsPtr;
typedef struct _XkbOutline {
    unsigned short num_points;
    unsigned short sz_points;
    unsigned short corner_radius;
    XkbPointPtr points;
} XkbOutlineRec;
typedef struct _XkbOutline *XkbOutlinePtr;
typedef struct _XkbShape {
    Atom name;
    unsigned short num_outlines;
    unsigned short sz_outlines;
    XkbOutlinePtr outlines;
    XkbOutlinePtr approx;
    XkbOutlinePtr primary;
    XkbBoundsRec bounds;
} XkbShapeRec;
typedef struct _XkbShape *XkbShapePtr;
typedef struct _XkbShapeDoodad {
    Atom name;
    unsigned char type;
    unsigned char priority;
    short top;
    short left;
    short angle;
    unsigned short color_ndx;
    unsigned short shape_ndx;
} XkbShapeDoodadRec;
typedef struct _XkbShapeDoodad *XkbShapeDoodadPtr;
typedef struct _XkbTextDoodad {
    Atom name;
    unsigned char type;
    unsigned char priority;
    short top;
    short left;
    short angle;
    short width;
    short height;
    unsigned short color_ndx;
    char *text;
    char *font;
} XkbTextDoodadRec;
typedef struct _XkbTextDoodad *XkbTextDoodadPtr;
typedef struct _XkbIndicatorDoodad {
    Atom name;
    unsigned char type;
    unsigned char priority;
    short top;
    short left;
    short angle;
    unsigned short shape_ndx;
    unsigned short on_color_ndx;
    unsigned short off_color_ndx;
} XkbIndicatorDoodadRec;
typedef struct _XkbIndicatorDoodad *XkbIndicatorDoodadPtr;
typedef struct _XkbLogoDoodad {
    Atom name;
    unsigned char type;
    unsigned char priority;
    short top;
    short left;
    short angle;
    unsigned short color_ndx;
    unsigned short shape_ndx;
    char *logo_name;
} XkbLogoDoodadRec;
typedef struct _XkbLogoDoodad *XkbLogoDoodadPtr;
typedef struct _XkbAnyDoodad {
    Atom name;
    unsigned char type;
    unsigned char priority;
    short top;
    short left;
    short angle;
} XkbAnyDoodadRec;
typedef struct _XkbAnyDoodad *XkbAnyDoodadPtr;
union _XkbDoodad {
    XkbAnyDoodadRec any;
    XkbShapeDoodadRec shape;
    XkbTextDoodadRec text;
    XkbIndicatorDoodadRec indicator;
    XkbLogoDoodadRec logo;
};
typedef union _XkbDoodad {
    XkbAnyDoodadRec any;
    XkbShapeDoodadRec shape;
    XkbTextDoodadRec text;
    XkbIndicatorDoodadRec indicator;
    XkbLogoDoodadRec logo;
} XkbDoodadRec;
typedef union _XkbDoodad *XkbDoodadPtr;
typedef struct _XkbKey {
    XkbKeyNameRecname;
    short gap;
    unsigned char shape_ndx;
    unsigned char color_ndx;
} XkbKeyRec;
typedef struct _XkbKey *XkbKeyPtr;
typedef struct _XkbRow {
    short top;
    short left;
    unsigned short num_keys;
    unsigned short sz_keys;
    int vertical;
    XkbKeyPtr keys;
    XkbBoundsRec bounds;
} XkbRowRec;
typedef struct _XkbRow *XkbRowPtr;
typedef struct _XkbSection {
    Atom name;
    unsigned char priority;
    short top;
    short left;
    unsigned short width;
    unsigned short height;
    short angle;
    unsigned short num_rows;
    unsigned short num_doodads;
    unsigned short num_overlays;
    unsigned short sz_rows;
    unsigned short sz_doodads;
    unsigned short sz_overlays;
    XkbRowPtr rows;
    XkbDoodadPtr doodads;
    XkbBoundsRec bounds;
    struct _XkbOverlay *overlays;
} XkbSectionRec;
typedef struct _XkbOverlay **XkbSectionPtr;
typedef struct _XkbOverlayKey {
    XkbKeyNameRecover;
    XkbKeyNameRecunder;
} XkbOverlayKeyRec;
typedef struct _XkbOverlayKey *XkbOverlayKeyPtr;
typedef struct _XkbOverlayRow {
    unsigned short row_under;
    unsigned short num_keys;
    unsigned short sz_keys;
    XkbOverlayKeyPtr keys;
} XkbOverlayRowRec;
typedef struct _XkbOverlayRow *XkbOverlayRowPtr;
typedef struct _XkbOverlay {
    Atom name;
    XkbSectionPtr section_under;
    unsigned short num_rows;
    unsigned short sz_rows;
    XkbOverlayRowPtr rows;
    XkbBoundsPtr bounds;
} XkbOverlayRec;
typedef struct _XkbOverlay *XkbOverlayPtr;
typedef struct _XkbGeometry {
    Atom name;
    unsigned short width_mm;
    unsigned short height_mm;
    char *label_font;
    XkbColorPtr label_color;
    XkbColorPtr base_color;
    unsigned short sz_properties;
    unsigned short sz_colors;
    unsigned short sz_shapes;
    unsigned short sz_sections;
    unsigned short sz_doodads;
    unsigned short sz_key_aliases;
    unsigned short num_properties;
    unsigned short num_colors;
    unsigned short num_shapes;
    unsigned short num_sections;
    unsigned short num_doodads;
    unsigned short num_key_aliases;
    XkbPropertyPtr properties;
    XkbColorPtr colors;
    XkbShapePtr shapes;
    XkbSectionPtr sections;
    XkbDoodadPtr doodads;
     XkbKeyAliasPtrkey_aliases;
} XkbGeometryRec;
typedef struct _XkbGeometrySizes {
    unsigned int which;
    unsigned short num_properties;
    unsigned short num_colors;
    unsigned short num_shapes;
    unsigned short num_sections;
    unsigned short num_doodads;
    unsigned short num_key_aliases;
} XkbGeometrySizesRec;
typedef struct _XkbGeometrySizes *XkbGeometrySizesPtr;
extern int XkbAllocGeomColors(XkbGeometryPtr, int);
extern int XkbAllocGeomDoodads(XkbGeometryPtr, int);
extern int XkbAllocGeomKeyAliases(XkbGeometryPtr, int);
extern int XkbAllocGeomKeys(XkbRowPtr, int);
extern int XkbAllocGeomOutlines(XkbShapePtr, int);
extern int XkbAllocGeomOverlayKeys(XkbOverlayRowPtr, int);
extern int XkbAllocGeomOverlayRows(XkbOverlayPtr, int);
extern int XkbAllocGeomOverlays(XkbSectionPtr, int);
extern int XkbAllocGeomPoints(XkbOutlinePtr, int);
extern int XkbAllocGeomProps(XkbGeometryPtr, int);
extern int XkbAllocGeomRows(XkbSectionPtr, int);
extern int XkbAllocGeomSectionDoodads(XkbSectionPtr, int);
extern int XkbAllocGeomSections(XkbGeometryPtr, int);
extern int XkbAllocGeomShapes(XkbGeometryPtr, int);
extern int XkbAllocGeometry(XkbDescPtr, XkbGeometrySizesPtr);
extern int XkbComputeRowBounds(XkbGeometryPtr, XkbSectionPtr, XkbRowPtr);
extern int XkbComputeSectionBounds(XkbGeometryPtr, XkbSectionPtr);
extern int XkbComputeShapeBounds(XkbShapePtr);
extern int XkbComputeShapeTop(XkbShapePtr, XkbBoundsPtr);
extern char *XkbFindOverlayForKey(XkbGeometryPtr, XkbSectionPtr, char *);
extern void XkbFreeGeomColors(XkbGeometryPtr, int, int, int);
extern void XkbFreeGeomDoodads(XkbDoodadPtr, int, int);
extern void XkbFreeGeomKeyAliases(XkbGeometryPtr, int, int, int);
extern void XkbFreeGeomKeys(XkbRowPtr, int, int, int);
extern void XkbFreeGeomOutlines(XkbShapePtr, int, int, int);
extern void XkbFreeGeomOverlayKeys(XkbOverlayRowPtr, int, int, int);
extern void XkbFreeGeomOverlayRows(XkbOverlayPtr, int, int, int);
extern void XkbFreeGeomOverlays(XkbSectionPtr, int, int, int);
extern void XkbFreeGeomPoints(XkbOutlinePtr, int, int, int);
extern void XkbFreeGeomProperties(XkbGeometryPtr, int, int, int);
extern void XkbFreeGeomRows(XkbSectionPtr, int, int, int);
extern void XkbFreeGeomSections(XkbGeometryPtr, int, int, int);
extern void XkbFreeGeomShapes(XkbGeometryPtr, int, int, int);
extern void XkbFreeGeometry(XkbGeometryPtr, unsigned int, int);
extern int XkbGetGeometry(Display *, XkbDescPtr);
extern int XkbGetNamedGeometry(Display *, XkbDescPtr, Atom);
extern int XkbSetGeometry(Display *, unsigned int, XkbGeometryPtr);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/extensions/XShm.h</TITLE>
<PARA>
</PARA>
<SCREEN>

typedef unsigned long int ShmSeg;
typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Drawable drawable;
    int major_code;
    int minor_code;
    ShmSeg shmseg;
    unsigned long int offset;
} XShmCompletionEvent;
typedef struct {
    ShmSeg shmseg;
    int shmid;
    char *shmaddr;
    int readOnly;
} XShmSegmentInfo;
extern int XShmAttach(Display *, XShmSegmentInfo *);
extern XImage *XShmCreateImage(Display *, Visual *, unsigned int, int,
			       char *, XShmSegmentInfo *, unsigned int,
			       unsigned int);
extern Pixmap XShmCreatePixmap(Display *, Drawable, char *,
			       XShmSegmentInfo *, unsigned int,
			       unsigned int, unsigned int);
extern int XShmDetach(Display *, XShmSegmentInfo *);
extern int XShmGetEventBase(Display *);
extern int XShmGetImage(Display *, Drawable, XImage *, int, int,
			unsigned long int);
extern int XShmPixmapFormat(Display *);
extern int XShmPutImage(Display *, Drawable, GC, XImage *, int, int, int,
			int, unsigned int, unsigned int, int);
extern int XShmQueryExtension(Display *);
extern int XShmQueryVersion(Display *, int *, int *, int *);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/extensions/Xdbe.h</TITLE>
<PARA>
</PARA>
<SCREEN>

typedef Drawable XdbeBackBuffer;
typedef unsigned char XdbeSwapAction;
typedef struct {
    Window swap_window;
    XdbeSwapAction swap_action;
} XdbeSwapInfo;
typedef struct {
    Window window;
} XdbeBackBufferAttributes;
typedef struct {
    int type;
    Display *display;
    XdbeBackBuffer buffer;
    unsigned long int serial;
    unsigned char error_code;
    unsigned char request_code;
    unsigned char minor_code;
} XdbeBufferError;
extern XdbeBackBuffer XdbeAllocateBackBufferName(Display *, Window,
						 XdbeSwapAction);
extern int XdbeBeginIdiom(Display *);
extern int XdbeDeallocateBackBufferName(Display *, XdbeBackBuffer);
extern int XdbeEndIdiom(Display *);
extern void XdbeFreeVisualInfo(XdbeScreenVisualInfo *);
extern XdbeBackBufferAttributes *XdbeGetBackBufferAttributes(Display *,
							     XdbeBackBuffer);
extern XdbeScreenVisualInfo *XdbeGetVisualInfo(Display *, Drawable *,
					       int *);
extern int XdbeQueryExtension(Display *, int *, int *);
extern int XdbeSwapBuffers(Display *, XdbeSwapInfo *, int);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/extensions/dpms.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define DPMSModeOn	0
#define DPMSModeStandby	1
#define DPMSModeSuspend	2
#define DPMSModeOff	3

extern int DPMSCapable(Display *);
extern int DPMSDisable(Display *);
extern int DPMSEnable(Display *);
extern int DPMSForceLevel(Display *, CARD16);
extern int DPMSGetTimeouts(Display *, CARD16 *, CARD16 *, CARD16 *);
extern int DPMSGetVersion(Display *, int *, int *);
extern int DPMSInfo(Display *, CARD16 *, BOOL *);
extern int DPMSQueryExtension(Display *, int *, int *);
extern int DPMSSetTimeouts(Display *, CARD16, CARD16, CARD16);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/extensions/security.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define XSecurityAuthorizationName	"XC-QUERY-SECURITY-1"
#define XSecurityAuthorizationRevokedMask	(1&lt;&lt;0)
#define XSecurityTimeout	(1&lt;&lt;0)
#define XSecurityTrustLevel	(1&lt;&lt;1)
#define XSecurityGroup	(1&lt;&lt;2)
#define XSecurityEventMask	(1&lt;&lt;3)
#define XSecurityAllAuthorizationAttributes	(XSecurityTimeout | XSecurityTrustLevel | XSecurityGroup | XSecurityEventMask)
#define XSecurityAuthorizationRevoked	0
#define XSecurityBadAuthorization	0
#define XSecurityClientTrusted	0
#define XSecurityBadAuthorizationProtocol	1
#define XSecurityClientUntrusted	1
#define XSecurityNumberEvents	1
#define XSecurityAuthorizationNameLen	19
#define XSecurityNumberErrors	2
#define XSecurityAllEventMasks	XSecurityAuthorizationRevokedMask

typedef unsigned long int XSecurityAuthorization;
typedef struct {
    unsigned int timeout;
    unsigned int trust_level;
    XID group;
    long int event_mask;
} XSecurityAuthorizationAttributes;
typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    XSecurityAuthorization auth_id;
} XSecurityAuthorizationRevokedEvent;
extern Xauth *XSecurityAllocXauth(void);
extern void XSecurityFreeXauth(Xauth *);
extern Xauth *XSecurityGenerateAuthorization(Display *, Xauth *,
					     unsigned long int,
					     XSecurityAuthorizationAttributes
					     *, XSecurityAuthorization *);
extern int XSecurityQueryExtension(Display *, int *, int *);
extern int XSecurityRevokeAuthorization(Display *, XSecurityAuthorization);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/extensions/shape.h</TITLE>
<PARA>
</PARA>
<SCREEN>

typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    Window window;
    int kind;
    int x;
    int y;
    unsigned int width;
    unsigned int height;
    Time time;
    int shaped;
} XShapeEvent;
extern void XShapeCombineMask(Display *, Window, int, int, int, Pixmap,
			      int);
extern void XShapeCombineRectangles(Display *, Window, int, int, int,
				    XRectangle *, int, int, int);
extern void XShapeCombineRegion(Display *, Window, int, int, int, Region,
				int);
extern void XShapeCombineShape(Display *, Window, int, int, int, Window,
			       int, int);
extern XRectangle *XShapeGetRectangles(Display *, Window, int, int *,
				       int *);
extern unsigned long int XShapeInputSelected(Display *, Window);
extern void XShapeOffsetShape(Display *, Window, int, int, int);
extern int XShapeQueryExtension(Display *, int *, int *);
extern int XShapeQueryExtents(Display *, Window, int *, int *, int *,
			      unsigned int *, unsigned int *, int *, int *,
			      int *, unsigned int *, unsigned int *);
extern int XShapeQueryVersion(Display *, int *, int *);
extern void XShapeSelectInput(Display *, Window, unsigned long int);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/extensions/sync.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define SYNC_NAME	"SYNC"
#define _XSyncValueIsPositive(v)	(((v).hi&amp;0x80000000)?0:1)
#define _XSyncValueIsNegative(v)	(((v).hi&amp;0x80000000)?1:0)
#define _XSyncValueLessThan(a,b)	((a).hi&lt;(b).hi||((a).hi==(b).hi&amp;&amp;(a).lo&lt;(b).lo)))
#define _XSyncValueLessOrEqual(a,b)	((a).hi&lt;(b).hi||((a).hi==(b).hi&amp;&amp;(a).lo&lt;=(b).lo)))
#define _XSyncValueGreaterThan(a,b)	((a).hi>(b).hi||((a).hi==(b).hi&amp;&amp;(a).lo>(b).lo)))
#define _XSyncValueGreaterOrEqual(a,b)	((a).hi>(b).hi||((a).hi==(b).hi&amp;&amp;(a).lo>=(b).lo)))
#define _XSyncValueEqual(a,b)	((a).lo==(b).lo&amp;&amp;(a).hi==(b).hi))
#define _XSyncValueIsZero(a)	((a).lo==0&amp;&amp;(a).hi==0)
#define _XSyncIntToValue(pv,i)	((pv)->hi=((i&lt;0)?~0:0),(pv)->lo=(i)))
#define _XSyncMaxValue(pv)	((pv)->hi=0x7fffffff,(pv)->lo=0xffffffff)
#define _XSyncMinValue(pv)	((pv)->hi=0x80000000,(pv)->lo=0)
#define _XSyncIntsToValue(pv,l,h)	((pv)->lo=(l),(pv)->hi=(h)))
#define _XSyncValueHigh32(v)	((v).hi)
#define _XSyncValueLow32(v)	((v).lo)
#define XSyncCACounter	(1L&lt;&lt;0)
#define XSyncCAValueType	(1L&lt;&lt;1)
#define XSyncCAValue	(1L&lt;&lt;2)
#define XSyncCATestType	(1L&lt;&lt;3)
#define XSyncCADelta	(1L&lt;&lt;4)
#define XSyncCAEvents	(1L&lt;&lt;5)
#define XSyncAlarmNotifyMask	(1L&lt;&lt;XSyncAlarmNotify)
#define XSyncNumberErrors	(XSyncBadAlarm+1)
#define SYNC_MINOR_VERSION	0
#define XSyncCounterNotify	0
#define X_SyncInitialize	0
#define XSyncBadCounter	0L
#define XSyncAlarmNotify	1
#define X_SyncListSystemCounters	1
#define X_SyncQueryAlarm	10
#define X_SyncDestroyAlarm	11
#define X_SyncSetPriority	12
#define X_SyncGetPriority	13
#define XSyncBadAlarm	1L
#define X_SyncCreateCounter	2
#define XSyncNumberEvents	2L
#define SYNC_MAJOR_VERSION	3
#define X_SyncSetCounter	3
#define X_SyncChangeCounter	4
#define X_SyncQueryCounter	5
#define X_SyncDestroyCounter	6
#define X_SyncAwait	7
#define X_SyncCreateAlarm	8
#define X_SyncChangeAlarm	9
#define XSyncIntsToValue(pv,l,h)	_XSyncIntsToValue(pv,l,h))
#define XSyncIntToValue(pv,i)	_XSyncIntToValue(pv,i))
#define XSyncMaxValue(pv)	_XSyncMaxValue(pv)
#define XSyncMinValue(pv)	_XSyncMinValue(pv)
#define XSyncValueAdd(presult,a,b,poverflow)	_XSyncValueAdd(presult,a,b,poverflow)
#define XSyncValueEqual(a,b)	_XSyncValueEqual(a,b))
#define XSyncValueGreaterOrEqual(a,b)	_XSyncValueGreaterOrEqual(a,b))
#define XSyncValueGreaterThan(a,b)	_XSyncValueGreaterThan(a,b))
#define XSyncValueHigh32(v)	_XSyncValueHigh32(v)
#define XSyncValueIsNegative(v)	_XSyncValueIsNegative(v)
#define XSyncValueIsPositive(v)	_XSyncValueIsPositive(v)
#define XSyncValueIsZero(a)	_XSyncValueIsZero(a)
#define XSyncValueLessOrEqual(a,b)	_XSyncValueLessOrEqual(a,b))
#define XSyncValueLessThan(a,b)	_XSyncValueLessThan(a,b))
#define XSyncValueLow32(v)	_XSyncValueLow32(v)
#define XSyncValueSubtract(presult,a,b,poverflow)	_XSyncValueSubtract(presult,a,b,poverflow)
#define _XSyncValueAdd(presult,a,b,poverflow)	{intt=(a).lo;Boolsigna=XSyncValueIsNegative(a);Boolsignb=XSyncValueIsNegative(b);((presult)->lo=(a).lo+(b).lo);((presult)->hi=(a
#define _XSyncValueSubtract(presult,a,b,poverflow)	{intt=(a).lo;Boolsigna=XSyncValueIsNegative(a);Boolsignb=XSyncValueIsNegative(b);((presult)->lo=(a).lo-(b).lo);((presult)->hi=(a

typedef struct _XSyncSystemCounter {
    char *name;
    XSyncCounter counter;
    XSyncValue resolution;
} XSyncSystemCounter;
typedef struct {
    XSyncCounter counter;
    XSyncValueType value_type;
    XSyncValue wait_value;
    XSyncTestType test_type;
} XSyncTrigger;
typedef struct {
    XSyncTrigger trigger;
    XSyncValue event_threshold;
} XSyncWaitCondition;
typedef struct {
    XSyncTrigger trigger;
    XSyncValue delta;
    int events;
    XSyncAlarmState state;
} XSyncAlarmAttributes;
typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    XSyncCounter counter;
    XSyncValue wait_value;
    XSyncValue counter_value;
    Time time;
    int count;
    int destroyed;
} XSyncCounterNotifyEvent;
typedef struct {
    int type;
    unsigned long int serial;
    int send_event;
    Display *display;
    XSyncAlarm alarm;
    XSyncValue counter_value;
    XSyncValue alarm_value;
    Time time;
    XSyncAlarmState state;
} XSyncAlarmNotifyEvent;
typedef struct {
    int type;
    Display *display;
    XSyncAlarm alarm;
    unsigned long int serial;
    unsigned char error_code;
    unsigned char request_code;
    unsigned char minor_code;
} XSyncAlarmError;
typedef struct {
    int type;
    Display *display;
    XSyncCounter counter;
    unsigned long int serial;
    unsigned char error_code;
    unsigned char request_code;
    unsigned char minor_code;
} XSyncCounterError;

typedef XID XSyncCounter;
typedef XID XSyncAlarm;
typedef struct _XSyncValue {
    int hi;
    unsigned int lo;
} XSyncValue;
enum {
    XSyncAbsolute,
    XSyncRelative
};
typedef enum {
    XSyncAbsolute,
    XSyncRelative
} XSyncValueType;
enum {
    XSyncPositiveTransition,
    XSyncNegativeTransition,
    XSyncPositiveComparison,
    XSyncNegativeComparison
};
typedef enum {
    XSyncPositiveTransition,
    XSyncNegativeTransition,
    XSyncPositiveComparison,
    XSyncNegativeComparison
} XSyncTestType;
enum {
    XSyncAlarmActive,
    XSyncAlarmInactive,
    XSyncAlarmDestroyed
};
typedef enum {
    XSyncAlarmActive,
    XSyncAlarmInactive,
    XSyncAlarmDestroyed
} XSyncAlarmState;
extern int XSyncAwait(Display *, XSyncWaitCondition *, int);
extern int XSyncChangeAlarm(Display *, XSyncAlarm, unsigned long int,
			    XSyncAlarmAttributes *);
extern int XSyncChangeCounter(Display *, XSyncCounter, XSyncValue);
extern XSyncAlarm XSyncCreateAlarm(Display *, unsigned long int,
				   XSyncAlarmAttributes *);
extern XSyncCounter XSyncCreateCounter(Display *, XSyncValue);
extern int XSyncDestroyAlarm(Display *, XSyncAlarm);
extern int XSyncDestroyCounter(Display *, XSyncCounter);
extern void XSyncFreeSystemCounterList(XSyncSystemCounter *);
extern int XSyncGetPriority(Display *, XID, int *);
extern int XSyncInitialize(Display *, int *, int *);
extern void XSyncIntToValue(XSyncValue *, int);
extern void XSyncIntsToValue(XSyncValue *, unsigned int, int);
extern XSyncSystemCounter *XSyncListSystemCounters(Display *, int *);
extern void XSyncMaxValue(XSyncValue *);
extern void XSyncMinValue(XSyncValue *);
extern int XSyncQueryAlarm(Display *, XSyncAlarm, XSyncAlarmAttributes *);
extern int XSyncQueryCounter(Display *, XSyncCounter, XSyncValue *);
extern int XSyncQueryExtension(Display *, int *, int *);
extern int XSyncSetCounter(Display *, XSyncCounter, XSyncValue);
extern int XSyncSetPriority(Display *, XID, int);
extern void XSyncValueAdd(XSyncValue *, XSyncValue, XSyncValue, int *);
extern int XSyncValueEqual(XSyncValue, XSyncValue);
extern int XSyncValueGreaterOrEqual(XSyncValue, XSyncValue);
extern int XSyncValueGreaterThan(XSyncValue, XSyncValue);
extern int XSyncValueHigh32(XSyncValue);
extern int XSyncValueIsNegative(XSyncValue);
extern int XSyncValueIsPositive(XSyncValue);
extern int XSyncValueIsZero(XSyncValue);
extern int XSyncValueLessOrEqual(XSyncValue, XSyncValue);
extern int XSyncValueLessThan(XSyncValue, XSyncValue);
extern unsigned int XSyncValueLow32(XSyncValue);
extern void XSyncValueSubtract(XSyncValue *, XSyncValue, XSyncValue,
			       int *);
</SCREEN>
</SECT2>
</SECT1>
<!-- End of text generated from database -->
