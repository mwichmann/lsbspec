<!-- Start of generated text - do not edit! -->
<!-- generated from the LSB specification database by mklibspec -->
<SECT1 ID=libXt>
<TITLE>Interfaces for libXt</TITLE>
<PARA>
<XREF LINKEND="lib-libXt-def"> defines the library name and shared object name
for the libXt library
</PARA>
<TABLE id="lib-libXt-def">
<TITLE>libXt Definition</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Library:</ENTRY>
<ENTRY>libXt</ENTRY>
</ROW>
<ROW>
<ENTRY>SONAME:</ENTRY>
<ENTRY>libXt.so.6</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The behavior of the interfaces in this library is specified by the following specifications:<SIMPLELIST COLUMNS=1>
<MEMBER ID='REFSTD.libXt.1'>
[LSB] <XREF LINKEND="std.LSB">
</MEMBER>
<MEMBER ID='REFSTD.libXt.2'>
[Xt] <XREF LINKEND="std.Xt">
</MEMBER>
</SIMPLELIST>
</PARA>
<!-- debug: database interface name X Toolkit -->
<SECT2>
<!--libgroup-->
<TITLE>X Toolkit</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for X Toolkit</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic functions
for X Toolkit specified in <XREF linkend="tbl-libXt-x-too-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<TABLE id="tbl-libXt-x-too-ints">
<TITLE>libXt - X Toolkit Function Interfaces</TITLE>
<TGROUP COLS=4>
<TBODY>
<ROW>
<ENTRY><indexterm><primary>XtAddActions</primary></indexterm>XtAddActions <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAddCallback</primary></indexterm>XtAddCallback <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAddCallbacks</primary></indexterm>XtAddCallbacks <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAddConverter</primary></indexterm>XtAddConverter <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtAddEventHandler</primary></indexterm>XtAddEventHandler <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAddExposureToRegion</primary></indexterm>XtAddExposureToRegion <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAddGrab</primary></indexterm>XtAddGrab <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAddInput</primary></indexterm>XtAddInput <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtAddRawEventHandler</primary></indexterm>XtAddRawEventHandler <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAddSignal</primary></indexterm>XtAddSignal <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAddTimeOut</primary></indexterm>XtAddTimeOut <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAddWorkProc</primary></indexterm>XtAddWorkProc <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtAllocateGC</primary></indexterm>XtAllocateGC <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAppAddActionHook</primary></indexterm>XtAppAddActionHook <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAppAddActions</primary></indexterm>XtAppAddActions <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAppAddBlockHook</primary></indexterm>XtAppAddBlockHook <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtAppAddConverter</primary></indexterm>XtAppAddConverter <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAppAddInput</primary></indexterm>XtAppAddInput <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAppAddSignal</primary></indexterm>XtAppAddSignal <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAppAddTimeOut</primary></indexterm>XtAppAddTimeOut <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtAppAddWorkProc</primary></indexterm>XtAppAddWorkProc <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAppCreateShell</primary></indexterm>XtAppCreateShell <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAppError</primary></indexterm>XtAppError <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAppErrorMsg</primary></indexterm>XtAppErrorMsg <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtAppGetErrorDatabase</primary></indexterm>XtAppGetErrorDatabase <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAppGetErrorDatabaseText</primary></indexterm>XtAppGetErrorDatabaseText <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAppGetExitFlag</primary></indexterm>XtAppGetExitFlag <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAppGetSelectionTimeout</primary></indexterm>XtAppGetSelectionTimeout <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtAppInitialize</primary></indexterm>XtAppInitialize <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAppLock</primary></indexterm>XtAppLock <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAppMainLoop</primary></indexterm>XtAppMainLoop <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAppNextEvent</primary></indexterm>XtAppNextEvent <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtAppPeekEvent</primary></indexterm>XtAppPeekEvent <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAppPending</primary></indexterm>XtAppPending <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAppProcessEvent</primary></indexterm>XtAppProcessEvent <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAppReleaseCacheRefs</primary></indexterm>XtAppReleaseCacheRefs <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtAppSetErrorHandler</primary></indexterm>XtAppSetErrorHandler <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAppSetErrorMsgHandler</primary></indexterm>XtAppSetErrorMsgHandler <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAppSetExitFlag</primary></indexterm>XtAppSetExitFlag <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAppSetFallbackResources</primary></indexterm>XtAppSetFallbackResources <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtAppSetSelectionTimeout</primary></indexterm>XtAppSetSelectionTimeout <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAppSetTypeConverter</primary></indexterm>XtAppSetTypeConverter <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAppSetWarningHandler</primary></indexterm>XtAppSetWarningHandler <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAppSetWarningMsgHandler</primary></indexterm>XtAppSetWarningMsgHandler <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtAppUnlock</primary></indexterm>XtAppUnlock <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAppWarning</primary></indexterm>XtAppWarning <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAppWarningMsg</primary></indexterm>XtAppWarningMsg <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtAugmentTranslations</primary></indexterm>XtAugmentTranslations <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtBuildEventMask</primary></indexterm>XtBuildEventMask <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCallAcceptFocus</primary></indexterm>XtCallAcceptFocus <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCallActionProc</primary></indexterm>XtCallActionProc <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCallCallbackList</primary></indexterm>XtCallCallbackList <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtCallCallbacks</primary></indexterm>XtCallCallbacks <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCallConverter</primary></indexterm>XtCallConverter <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCallbackExclusive</primary></indexterm>XtCallbackExclusive <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCallbackNone</primary></indexterm>XtCallbackNone <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtCallbackNonexclusive</primary></indexterm>XtCallbackNonexclusive <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCallbackPopdown</primary></indexterm>XtCallbackPopdown <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCallbackReleaseCacheRef</primary></indexterm>XtCallbackReleaseCacheRef <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCallbackReleaseCacheRefList</primary></indexterm>XtCallbackReleaseCacheRefList <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtCalloc</primary></indexterm>XtCalloc <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCancelSelectionRequest</primary></indexterm>XtCancelSelectionRequest <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtChangeManagedSet</primary></indexterm>XtChangeManagedSet <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtClass</primary></indexterm>XtClass <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtCloseDisplay</primary></indexterm>XtCloseDisplay <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtConfigureWidget</primary></indexterm>XtConfigureWidget <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtConvert</primary></indexterm>XtConvert <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtConvertAndStore</primary></indexterm>XtConvertAndStore <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtConvertCase</primary></indexterm>XtConvertCase <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCreateApplicationContext</primary></indexterm>XtCreateApplicationContext <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCreateApplicationShell</primary></indexterm>XtCreateApplicationShell <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCreateManagedWidget</primary></indexterm>XtCreateManagedWidget <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtCreatePopupShell</primary></indexterm>XtCreatePopupShell <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCreateSelectionRequest</primary></indexterm>XtCreateSelectionRequest <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCreateWidget</primary></indexterm>XtCreateWidget <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCreateWindow</primary></indexterm>XtCreateWindow <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtCvtColorToPixel</primary></indexterm>XtCvtColorToPixel <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCvtIntToBool</primary></indexterm>XtCvtIntToBool <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCvtIntToBoolean</primary></indexterm>XtCvtIntToBoolean <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCvtIntToColor</primary></indexterm>XtCvtIntToColor <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtCvtIntToFloat</primary></indexterm>XtCvtIntToFloat <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCvtIntToFont</primary></indexterm>XtCvtIntToFont <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCvtIntToPixel</primary></indexterm>XtCvtIntToPixel <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCvtIntToPixmap</primary></indexterm>XtCvtIntToPixmap <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtCvtIntToShort</primary></indexterm>XtCvtIntToShort <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCvtIntToUnsignedChar</primary></indexterm>XtCvtIntToUnsignedChar <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCvtStringToAcceleratorTable</primary></indexterm>XtCvtStringToAcceleratorTable <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCvtStringToAtom</primary></indexterm>XtCvtStringToAtom <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtCvtStringToBool</primary></indexterm>XtCvtStringToBool <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCvtStringToBoolean</primary></indexterm>XtCvtStringToBoolean <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCvtStringToCommandArgArray</primary></indexterm>XtCvtStringToCommandArgArray <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCvtStringToCursor</primary></indexterm>XtCvtStringToCursor <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtCvtStringToDimension</primary></indexterm>XtCvtStringToDimension <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCvtStringToDirectoryString</primary></indexterm>XtCvtStringToDirectoryString <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCvtStringToDisplay</primary></indexterm>XtCvtStringToDisplay <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCvtStringToFile</primary></indexterm>XtCvtStringToFile <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtCvtStringToFloat</primary></indexterm>XtCvtStringToFloat <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCvtStringToFont</primary></indexterm>XtCvtStringToFont <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCvtStringToFontSet</primary></indexterm>XtCvtStringToFontSet <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCvtStringToFontStruct</primary></indexterm>XtCvtStringToFontStruct <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtCvtStringToGravity</primary></indexterm>XtCvtStringToGravity <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCvtStringToInitialState</primary></indexterm>XtCvtStringToInitialState <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCvtStringToInt</primary></indexterm>XtCvtStringToInt <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCvtStringToPixel</primary></indexterm>XtCvtStringToPixel <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtCvtStringToRestartStyle</primary></indexterm>XtCvtStringToRestartStyle <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCvtStringToShort</primary></indexterm>XtCvtStringToShort <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCvtStringToTranslationTable</primary></indexterm>XtCvtStringToTranslationTable <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtCvtStringToUnsignedChar</primary></indexterm>XtCvtStringToUnsignedChar <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtCvtStringToVisual</primary></indexterm>XtCvtStringToVisual <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtDatabase</primary></indexterm>XtDatabase <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtDestroyApplicationContext</primary></indexterm>XtDestroyApplicationContext <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtDestroyGC</primary></indexterm>XtDestroyGC <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtDestroyWidget</primary></indexterm>XtDestroyWidget <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtDirectConvert</primary></indexterm>XtDirectConvert <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtDisownSelection</primary></indexterm>XtDisownSelection <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtDispatchEvent</primary></indexterm>XtDispatchEvent <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtDispatchEventToWidget</primary></indexterm>XtDispatchEventToWidget <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtDisplay</primary></indexterm>XtDisplay <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtDisplayInitialize</primary></indexterm>XtDisplayInitialize <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtDisplayOfObject</primary></indexterm>XtDisplayOfObject <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtDisplayStringConversionWarning</primary></indexterm>XtDisplayStringConversionWarning <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtDisplayToApplicationContext</primary></indexterm>XtDisplayToApplicationContext <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtError</primary></indexterm>XtError <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtErrorMsg</primary></indexterm>XtErrorMsg <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtFindFile</primary></indexterm>XtFindFile <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtFree</primary></indexterm>XtFree <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtGetActionKeysym</primary></indexterm>XtGetActionKeysym <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtGetActionList</primary></indexterm>XtGetActionList <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtGetApplicationNameAndClass</primary></indexterm>XtGetApplicationNameAndClass <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtGetApplicationResources</primary></indexterm>XtGetApplicationResources <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtGetClassExtension</primary></indexterm>XtGetClassExtension <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtGetConstraintResourceList</primary></indexterm>XtGetConstraintResourceList <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtGetDisplays</primary></indexterm>XtGetDisplays <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtGetErrorDatabase</primary></indexterm>XtGetErrorDatabase <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtGetErrorDatabaseText</primary></indexterm>XtGetErrorDatabaseText <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtGetGC</primary></indexterm>XtGetGC <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtGetKeyboardFocusWidget</primary></indexterm>XtGetKeyboardFocusWidget <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtGetKeysymTable</primary></indexterm>XtGetKeysymTable <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtGetMultiClickTime</primary></indexterm>XtGetMultiClickTime <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtGetResourceList</primary></indexterm>XtGetResourceList <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtGetSelectionParameters</primary></indexterm>XtGetSelectionParameters <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtGetSelectionRequest</primary></indexterm>XtGetSelectionRequest <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtGetSelectionTimeout</primary></indexterm>XtGetSelectionTimeout <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtGetSelectionValue</primary></indexterm>XtGetSelectionValue <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtGetSelectionValueIncremental</primary></indexterm>XtGetSelectionValueIncremental <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtGetSelectionValues</primary></indexterm>XtGetSelectionValues <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtGetSelectionValuesIncremental</primary></indexterm>XtGetSelectionValuesIncremental <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtGetSubresources</primary></indexterm>XtGetSubresources <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtGetSubvalues</primary></indexterm>XtGetSubvalues <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtGetValues</primary></indexterm>XtGetValues <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtGrabButton</primary></indexterm>XtGrabButton <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtGrabKey</primary></indexterm>XtGrabKey <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtGrabKeyboard</primary></indexterm>XtGrabKeyboard <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtGrabPointer</primary></indexterm>XtGrabPointer <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtHasCallbacks</primary></indexterm>XtHasCallbacks <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtHooksOfDisplay</primary></indexterm>XtHooksOfDisplay <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtInitialize</primary></indexterm>XtInitialize <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtInitializeWidgetClass</primary></indexterm>XtInitializeWidgetClass <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtInsertEventHandler</primary></indexterm>XtInsertEventHandler <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtInsertEventTypeHandler</primary></indexterm>XtInsertEventTypeHandler <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtInsertRawEventHandler</primary></indexterm>XtInsertRawEventHandler <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtInstallAccelerators</primary></indexterm>XtInstallAccelerators <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtInstallAllAccelerators</primary></indexterm>XtInstallAllAccelerators <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtIsApplicationShell</primary></indexterm>XtIsApplicationShell <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtIsComposite</primary></indexterm>XtIsComposite <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtIsConstraint</primary></indexterm>XtIsConstraint <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtIsManaged</primary></indexterm>XtIsManaged <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtIsObject</primary></indexterm>XtIsObject <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtIsOverrideShell</primary></indexterm>XtIsOverrideShell <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtIsRealized</primary></indexterm>XtIsRealized <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtIsRectObj</primary></indexterm>XtIsRectObj <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtIsSensitive</primary></indexterm>XtIsSensitive <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtIsSessionShell</primary></indexterm>XtIsSessionShell <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtIsShell</primary></indexterm>XtIsShell <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtIsSubclass</primary></indexterm>XtIsSubclass <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtIsTopLevelShell</primary></indexterm>XtIsTopLevelShell <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtIsTransientShell</primary></indexterm>XtIsTransientShell <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtIsVendorShell</primary></indexterm>XtIsVendorShell <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtIsWMShell</primary></indexterm>XtIsWMShell <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtIsWidget</primary></indexterm>XtIsWidget <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtKeysymToKeycodeList</primary></indexterm>XtKeysymToKeycodeList <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtLastEventProcessed</primary></indexterm>XtLastEventProcessed <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtLastTimestampProcessed</primary></indexterm>XtLastTimestampProcessed <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtMainLoop</primary></indexterm>XtMainLoop <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtMakeGeometryRequest</primary></indexterm>XtMakeGeometryRequest <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtMakeResizeRequest</primary></indexterm>XtMakeResizeRequest <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtMalloc</primary></indexterm>XtMalloc <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtManageChild</primary></indexterm>XtManageChild <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtManageChildren</primary></indexterm>XtManageChildren <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtMapWidget</primary></indexterm>XtMapWidget <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtMenuPopupAction</primary></indexterm>XtMenuPopupAction <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtMergeArgLists</primary></indexterm>XtMergeArgLists <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtMoveWidget</primary></indexterm>XtMoveWidget <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtName</primary></indexterm>XtName <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtNameToWidget</primary></indexterm>XtNameToWidget <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtNewString</primary></indexterm>XtNewString <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtNextEvent</primary></indexterm>XtNextEvent <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtNoticeSignal</primary></indexterm>XtNoticeSignal <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtOpenApplication</primary></indexterm>XtOpenApplication <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtOpenDisplay</primary></indexterm>XtOpenDisplay <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtOverrideTranslations</primary></indexterm>XtOverrideTranslations <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtOwnSelection</primary></indexterm>XtOwnSelection <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtOwnSelectionIncremental</primary></indexterm>XtOwnSelectionIncremental <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtParent</primary></indexterm>XtParent <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtParseAcceleratorTable</primary></indexterm>XtParseAcceleratorTable <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtParseTranslationTable</primary></indexterm>XtParseTranslationTable <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtPeekEvent</primary></indexterm>XtPeekEvent <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtPending</primary></indexterm>XtPending <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtPopdown</primary></indexterm>XtPopdown <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtPopup</primary></indexterm>XtPopup <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtPopupSpringLoaded</primary></indexterm>XtPopupSpringLoaded <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtProcessEvent</primary></indexterm>XtProcessEvent <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtProcessLock</primary></indexterm>XtProcessLock <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtProcessUnlock</primary></indexterm>XtProcessUnlock <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtQueryGeometry</primary></indexterm>XtQueryGeometry <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtRealizeWidget</primary></indexterm>XtRealizeWidget <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtRealloc</primary></indexterm>XtRealloc <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtRegisterCaseConverter</primary></indexterm>XtRegisterCaseConverter <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtRegisterDrawable</primary></indexterm>XtRegisterDrawable <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtRegisterExtensionSelector</primary></indexterm>XtRegisterExtensionSelector <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtRegisterGrabAction</primary></indexterm>XtRegisterGrabAction <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtReleaseGC</primary></indexterm>XtReleaseGC <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtReleasePropertyAtom</primary></indexterm>XtReleasePropertyAtom <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtRemoveActionHook</primary></indexterm>XtRemoveActionHook <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtRemoveAllCallbacks</primary></indexterm>XtRemoveAllCallbacks <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtRemoveBlockHook</primary></indexterm>XtRemoveBlockHook <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtRemoveCallback</primary></indexterm>XtRemoveCallback <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtRemoveCallbacks</primary></indexterm>XtRemoveCallbacks <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtRemoveEventHandler</primary></indexterm>XtRemoveEventHandler <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtRemoveEventTypeHandler</primary></indexterm>XtRemoveEventTypeHandler <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtRemoveGrab</primary></indexterm>XtRemoveGrab <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtRemoveInput</primary></indexterm>XtRemoveInput <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtRemoveRawEventHandler</primary></indexterm>XtRemoveRawEventHandler <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtRemoveSignal</primary></indexterm>XtRemoveSignal <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtRemoveTimeOut</primary></indexterm>XtRemoveTimeOut <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtRemoveWorkProc</primary></indexterm>XtRemoveWorkProc <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtReservePropertyAtom</primary></indexterm>XtReservePropertyAtom <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtResizeWidget</primary></indexterm>XtResizeWidget <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtResizeWindow</primary></indexterm>XtResizeWindow <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtResolvePathname</primary></indexterm>XtResolvePathname <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtScreen</primary></indexterm>XtScreen <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtScreenDatabase</primary></indexterm>XtScreenDatabase <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtScreenOfObject</primary></indexterm>XtScreenOfObject <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtSendSelectionRequest</primary></indexterm>XtSendSelectionRequest <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtSessionGetToken</primary></indexterm>XtSessionGetToken <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtSessionReturnToken</primary></indexterm>XtSessionReturnToken <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtSetErrorHandler</primary></indexterm>XtSetErrorHandler <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtSetErrorMsgHandler</primary></indexterm>XtSetErrorMsgHandler <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtSetEventDispatcher</primary></indexterm>XtSetEventDispatcher <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtSetKeyTranslator</primary></indexterm>XtSetKeyTranslator <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtSetKeyboardFocus</primary></indexterm>XtSetKeyboardFocus <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtSetLanguageProc</primary></indexterm>XtSetLanguageProc <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtSetMappedWhenManaged</primary></indexterm>XtSetMappedWhenManaged <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtSetMultiClickTime</primary></indexterm>XtSetMultiClickTime <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtSetSelectionParameters</primary></indexterm>XtSetSelectionParameters <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtSetSelectionTimeout</primary></indexterm>XtSetSelectionTimeout <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtSetSensitive</primary></indexterm>XtSetSensitive <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtSetSubvalues</primary></indexterm>XtSetSubvalues <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtSetTypeConverter</primary></indexterm>XtSetTypeConverter <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtSetValues</primary></indexterm>XtSetValues <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtSetWMColormapWindows</primary></indexterm>XtSetWMColormapWindows <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtSetWarningHandler</primary></indexterm>XtSetWarningHandler <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtSetWarningMsgHandler</primary></indexterm>XtSetWarningMsgHandler <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtStringConversionWarning</primary></indexterm>XtStringConversionWarning <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtSuperclass</primary></indexterm>XtSuperclass <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtToolkitInitialize</primary></indexterm>XtToolkitInitialize <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtToolkitThreadInitialize</primary></indexterm>XtToolkitThreadInitialize <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtTranslateCoords</primary></indexterm>XtTranslateCoords <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtTranslateKey</primary></indexterm>XtTranslateKey <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtTranslateKeycode</primary></indexterm>XtTranslateKeycode <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtUngrabButton</primary></indexterm>XtUngrabButton <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtUngrabKey</primary></indexterm>XtUngrabKey <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtUngrabKeyboard</primary></indexterm>XtUngrabKeyboard <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtUngrabPointer</primary></indexterm>XtUngrabPointer <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtUninstallTranslations</primary></indexterm>XtUninstallTranslations <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtUnmanageChild</primary></indexterm>XtUnmanageChild <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtUnmanageChildren</primary></indexterm>XtUnmanageChildren <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtUnmapWidget</primary></indexterm>XtUnmapWidget <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtUnrealizeWidget</primary></indexterm>XtUnrealizeWidget <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtUnregisterDrawable</primary></indexterm>XtUnregisterDrawable <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtVaAppCreateShell</primary></indexterm>XtVaAppCreateShell <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtVaAppInitialize</primary></indexterm>XtVaAppInitialize <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtVaCreateArgsList</primary></indexterm>XtVaCreateArgsList <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtVaCreateManagedWidget</primary></indexterm>XtVaCreateManagedWidget <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtVaCreatePopupShell</primary></indexterm>XtVaCreatePopupShell <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtVaCreateWidget</primary></indexterm>XtVaCreateWidget <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtVaGetApplicationResources</primary></indexterm>XtVaGetApplicationResources <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtVaGetSubresources</primary></indexterm>XtVaGetSubresources <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtVaGetSubvalues</primary></indexterm>XtVaGetSubvalues <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtVaGetValues</primary></indexterm>XtVaGetValues <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtVaOpenApplication</primary></indexterm>XtVaOpenApplication <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtVaSetSubvalues</primary></indexterm>XtVaSetSubvalues <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtVaSetValues</primary></indexterm>XtVaSetValues <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtWarning</primary></indexterm>XtWarning <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtWarningMsg</primary></indexterm>XtWarningMsg <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtWidgetToApplicationContext</primary></indexterm>XtWidgetToApplicationContext <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>XtWindow</primary></indexterm>XtWindow <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtWindowOfObject</primary></indexterm>XtWindowOfObject <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtWindowToWidget</primary></indexterm>XtWindowToWidget <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>_XtCheckSubclassFlag</primary></indexterm>_XtCheckSubclassFlag <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_XtCopyFromArg</primary></indexterm>_XtCopyFromArg <LINK LINKEND="REFSTD.libXt.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>_XtInherit</primary></indexterm>_XtInherit <LINK LINKEND="REFSTD.libXt.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>_XtIsSubclassOf</primary></indexterm>_XtIsSubclassOf <LINK LINKEND="REFSTD.libXt.1">[LSB]</LINK></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for X Toolkit specified in <XREF linkend="tbl-libXt-x-too-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<TABLE id="tbl-libXt-x-too-data">
<TITLE>libXt - X Toolkit Data Interfaces</TITLE>
<TGROUP COLS=4>
<TBODY>
<ROW>
<ENTRY><indexterm><primary>XtCXtToolkitError</primary></indexterm>XtCXtToolkitError <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtShellStrings</primary></indexterm>XtShellStrings <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>XtStrings</primary></indexterm>XtStrings <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>_XtInheritTranslations</primary></indexterm>_XtInheritTranslations <LINK LINKEND="REFSTD.libXt.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>applicationShellWidgetClass</primary></indexterm>applicationShellWidgetClass <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>compositeClassRec</primary></indexterm>compositeClassRec <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>compositeWidgetClass</primary></indexterm>compositeWidgetClass <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>constraintClassRec</primary></indexterm>constraintClassRec <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>constraintWidgetClass</primary></indexterm>constraintWidgetClass <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>coreWidgetClass</primary></indexterm>coreWidgetClass <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>objectClass</primary></indexterm>objectClass <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>objectClassRec</primary></indexterm>objectClassRec <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>overrideShellClassRec</primary></indexterm>overrideShellClassRec <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>overrideShellWidgetClass</primary></indexterm>overrideShellWidgetClass <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>rectObjClass</primary></indexterm>rectObjClass <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>rectObjClassRec</primary></indexterm>rectObjClassRec <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>sessionShellClassRec</primary></indexterm>sessionShellClassRec <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>sessionShellWidgetClass</primary></indexterm>sessionShellWidgetClass <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>shellClassRec</primary></indexterm>shellClassRec <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>shellWidgetClass</primary></indexterm>shellWidgetClass <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>topLevelShellClassRec</primary></indexterm>topLevelShellClassRec <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>topLevelShellWidgetClass</primary></indexterm>topLevelShellWidgetClass <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>transientShellClassRec</primary></indexterm>transientShellClassRec <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>transientShellWidgetClass</primary></indexterm>transientShellWidgetClass <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>widgetClass</primary></indexterm>widgetClass <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>widgetClassRec</primary></indexterm>widgetClassRec <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>wmShellClassRec</primary></indexterm>wmShellClassRec <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
<ENTRY><indexterm><primary>wmShellWidgetClass</primary></indexterm>wmShellWidgetClass <LINK LINKEND="REFSTD.libXt.2">[Xt]</LINK></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>
</SECT2>
</SECT1>
<SECT1 ID=libXt-ddefs>
<TITLE>Data Definitions for libXt</TITLE>
<PARA>
This section defines global identifiers and their values that are associated
with interfaces contained in libXt.
These definitions are organized into groups that
correspond to system headers. This convention is used as a
convenience for the reader, and does not imply the existence
of these headers, or their content.
Where an interface is defined as requiring a particular system header file
all of the data definitions for that system header file presented here shall be in effect.
</PARA>
<PARA>
This section gives data definitions to promote binary application
portability, not to repeat source interface definitions available
elsewhere. System providers and application developers should use this ABI
to supplement - not to replace - source interface definition specifications.
</PARA>
<PARA>
This specification uses the <XREF LINKEND='std.ISOC99'> C Language as the reference programming language, and data definitions are specified in ISO C format. The C language is used here as a convenient notation. Using a C language description of these data objects does not preclude their use by other programming languages.</PARA>
<SECT2>
<TITLE>X11/Composite.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define _XtComposite_h	1

typedef void (*XtDoChangeProc) (Widget, WidgetList, Cardinal *, WidgetList,
				Cardinal *, XtPointer);
typedef struct _CompositeClassRec *CompositeWidgetClass;
typedef Cardinal(*XtOrderProc) (Widget);
extern void XtChangeManagedSet(WidgetList, Cardinal, XtDoChangeProc,
			       XtPointer, WidgetList, Cardinal);
extern void XtManageChild(Widget);
extern void XtManageChildren(WidgetList, Cardinal);
extern void XtUnmanageChild(Widget);
extern void XtUnmanageChildren(WidgetList, Cardinal);
extern WidgetClass compositeWidgetClass;
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/CompositeP.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define XtInheritGeometryManager	((XtGeometryHandler) _XtInherit)
#define XtInheritDeleteChild	((XtWidgetProc) _XtInherit)
#define XtInheritInsertChild	((XtWidgetProc) _XtInherit)
#define _XtCompositeP_h	1
#define XtCompositeExtensionVersion	2L

typedef struct _CompositePart {
    WidgetList children;
    Cardinal num_children;
    Cardinal num_slots;
    XtOrderProc insert_position;
} CompositePart;
typedef struct _CompositeClassPart {
    XtGeometryHandler geometry_manager;
    XtWidgetProc change_managed;
    XtWidgetProc insert_child;
    XtWidgetProc delete_child;
    XtPointer extension;
} CompositeClassPart;
typedef struct _CompositePart *CompositePtr;
typedef struct _CompositeRec {
    CorePart core;
    CompositePart composite;
} CompositeRec;
typedef struct _CompositeClassPart *CompositePartPtr;
typedef struct {
    XtPointer next_extension;
    XrmQuark record_type;
    long int version;
    Cardinal record_size;
    Boolean accepts_objects;
    Boolean allows_change_managed_set;
} CompositeClassExtensionRec;
typedef CompositeClassExtensionRec *CompositeClassExtension;

typedef struct _CompositeClassRec CompositeClassRec;
extern CompositeClassRec compositeClassRec;
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/ConstrainP.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define XtConstraintExtensionVersion	1L

typedef struct _ConstraintPart {
    XtPointer mumble;
} ConstraintPart;
typedef struct _ConstraintClassRec *ConstraintClassRec;
typedef struct _ConstraintClassPart {
    XtResourceList resources;
    Cardinal num_resources;
    Cardinal constraint_size;
    XtInitProc initialize;
    XtWidgetProc destroy;
    XtSetValuesFunc set_values;
    XtPointer extension;
} ConstraintClassPart;
struct _ConstraintClassRec {
    CoreClassPart core_class;
    CompositeClassPart composite_class;
    ConstraintClassPart constraint_class;
};
typedef struct _ConstraintRec {
    CorePart core;
    CompositePart composite;
    ConstraintPart constraint;
} ConstraintRec;
typedef struct _ConstraintRec *ConstraintWidget;
typedef struct {
    XtPointer next_extension;
    XrmQuark record_type;
    long int version;
    Cardinal record_size;
    XtArgsProc get_values_hook;
} ConstraintClassExtensionRec;
typedef ConstraintClassExtensionRec *ConstraintClassExtension;
extern ConstraintClassRec constraintClassRec;
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/Constraint.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define _XtConstraint_h	1

typedef struct _ConstraintClassRec *ConstraintWidgetClass;
extern WidgetClass constraintWidgetClass;
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/Core.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define _XtCore_h	1

typedef struct _WidgetClassRec *CoreWidgetClass;
typedef struct _WidgetClassRec *CoreWidget;
extern WidgetClass coreWidgetClass;
extern widgetClass;
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/CoreP.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define _XtCoreP_h	1

typedef struct _CorePart {
    Widget self;
    WidgetClass widget_class;
    Widget parent;
    XrmName xrm_name;
    Boolean being_destroyed;
    XtCallbackList destroy_callbacks;
    XtPointer constraints;
    Position x;
    Position y;
    Dimension width;
    Dimension height;
    Dimension border_width;
    Boolean managed;
    Boolean sensitive;
    Boolean ancestor_sensitive;
    XtEventTable event_table;
    XtTMRec tm;
    XtTranslations accelerators;
    Pixel border_pixel;
    Pixmap border_pixmap;
    WidgetList popup_list;
    Cardinal num_popups;
    String name;
    Screen *screen;
    Colormap colormap;
    Window window;
    Cardinal depth;
    Pixel background_pixel;
    Pixmap background_pixmap;
    Boolean visible;
    Boolean mapped_when_managed;
} CorePart;
typedef struct _CoreClassPart {
    WidgetClass superclass;
    String class_name;
    Cardinal widget_size;
    XtProc class_initialize;
    XtWidgetClassProc class_part_initialize;
    XtEnum class_inited;
    XtInitProc initialize;
    XtArgsProc initialize_hook;
    XtRealizeProc realize;
    XtActionList actions;
    Cardinal num_actions;
    XtResourceList resources;
    Cardinal num_resources;
    XrmClass xrm_class;
    Boolean compress_motion;
    XtEnum compress_exposure;
    Boolean compress_enterleave;
    Boolean visible_interest;
    XtWidgetProc destroy;
    XtWidgetProc resize;
    XtExposeProc expose;
    XtSetValuesFunc set_values;
    XtArgsFunc set_values_hook;
    XtAlmostProc set_values_almost;
    XtArgsProc get_values_hook;
    XtAcceptFocusProc accept_focus;
    XtVersionType version;
    XtPointer callback_private;
    String tm_table;
    XtGeometryHandler query_geometry;
    XtStringProc display_accelerator;
    XtPointer extension;
} CoreClassPart;
typedef struct _WidgetRec {
    CorePart core;
} WidgetRec;
typedef struct _WidgetRec {
    CorePart core;
} CoreRec;
typedef struct _WidgetClassRec {
    CoreClassPart core_class;
} WidgetClassRec;
typedef struct _WidgetClassRec {
    CoreClassPart core_class;
} CoreClassRec;
extern int _XtInheritTranslations;
extern WidgetClassRec widgetClassRec;
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/Intrinsic.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define XtOffset(p_type,field)	((Cardinal) (((char *) (&amp;(((p_type)NULL)->field))) - ((char *) NULL)))
#define XtNumber(arr)	((Cardinal) (sizeof(arr) / sizeof(arr[0])))
#define XtAllEvents	((EventMask) -1L)
#define XtUnspecifiedPixmap	((Pixmap)2)
#define XtNew(type)	((type *) XtMalloc((unsigned) sizeof(type)))
#define XtSetArg(arg,n,d)	((void)( (arg).name = (n), (arg).value = (XtArgVal)(d) ))
#define XtUnspecifiedWindow	((Window)2)
#define XtUnspecifiedWindowGroup	((Window)3)
#define XtUnspecifiedShellInt	(-1)
#define XtCWQueryOnly	(1 &lt;&lt; 7)
#define XtInputReadMask	(1L&lt;&lt;0)
#define XtInputWriteMask	(1L&lt;&lt;1)
#define XtInputExceptMask	(1L&lt;&lt;2)
#define XT_CONVERT_FAIL	(Atom)0x80000001
#define XtIMAll	(XtIMXEvent | XtIMTimer | XtIMAlternateInput | XtIMSignal)
#define XtIsRectObj(object)	(_XtCheckSubclassFlag(object, (XtEnum)0x02))
#define XtIsWidget(object)	(_XtCheckSubclassFlag(object, (XtEnum)0x04))
#define XtIsComposite(widget)	(_XtCheckSubclassFlag(widget, (XtEnum)0x08))
#define XtIsConstraint(widget)	(_XtCheckSubclassFlag(widget, (XtEnum)0x10))
#define XtIsShell(widget)	(_XtCheckSubclassFlag(widget, (XtEnum)0x20))
#define XtIsWMShell(widget)	(_XtCheckSubclassFlag(widget, (XtEnum)0x40))
#define XtInputNoneMask	0L
#define XtCacheNone	0x001
#define XtCacheAll	0x002
#define XtCacheByDisplay	0x003
#define XtCacheRefCount	0x100
#define XtIMXEvent	1
#define _XtIntrinsic_h	1
#define XtIMTimer	2
#define XtIMAlternateInput	4
#define XtSMDontChange	5
#define XtSpecificationRelease	6
#define XtIMSignal	8
#define _XtString	char*
#define externalref	extern
#define _XtBoolean	int
#define _XtPosition	int
#define XtOffsetOf(s_type,field)	offsetof(s_type,field)
#define _XtDimension	unsigned int
#define _XtKeyCode	unsigned int
#define _XtXtEnum	unsigned int
#define XtCurrentDirectory	"XtCurrentDirectory"
#define XtCvtPixelToColor	"XtCvtIntToColor"
#define XtCvtIntToDimension	"XtCvtIntToShort"
#define XtCvtIntToPosition	"XtCvtIntToShort"
#define XtCvtStringToPosition	"XtCvtStringToShort"
#define XtDefaultBackground	"XtDefaultBackground"
#define XtDefaultFont	"XtDefaultFont"
#define XtDefaultFontSet	"XtDefaultFontSet"
#define XtDefaultForeground	"XtDefaultForeground"
#define XtVaNestedList	"XtVaNestedList"
#define XtVaTypedArg	"XtVaTypedArg"

typedef unsigned int Cardinal;
typedef void *XtPointer;
struct _WidgetRec;
typedef struct _WidgetRec *Widget;
typedef char *String;
typedef unsigned int XtGeometryMask;
typedef short int Position;
typedef short unsigned int Dimension;
typedef struct {
    XtGeometryMask request_mode;
    Position x;
    Position y;
    Dimension width;
    Dimension height;
    Dimension border_width;
    Widget sibling;
    int stack_mode;
} XtWidgetGeometry;
typedef unsigned int Modifiers;
typedef void *XtCacheRef;
typedef struct _XtResource *XtResourceList;
struct _XtAppStruct;
typedef struct _XtAppStruct *XtAppContext;
typedef void (*XtActionProc) (Widget, XEvent *, String *, Cardinal *);
typedef struct _XtActionsRec *XtActionList;
typedef char Boolean;
typedef int XtCacheType;
typedef long unsigned int XtGCMask;
typedef unsigned char XtEnum;
typedef long unsigned int XtSignalId;
typedef long unsigned int XtWorkProcId;
typedef long unsigned int XtInputId;
typedef long unsigned int XtIntervalId;
struct _WidgetClassRec;
typedef struct _WidgetClassRec *WidgetClass;
typedef Widget *WidgetList;
typedef struct _TranslationData *XtAccelerators;
typedef struct _TranslationData *XtTranslations;
typedef enum XtGeometryResult;
typedef enum XtAddressMode;
typedef struct {
    XtAddressMode address_mode;
    XtPointer address_id;
    Cardinal size;
} XtConvertArgRec;
typedef XtConvertArgRec *XtConvertArgList;
typedef long int XtArgVal;
typedef struct {
    String name;
    XtArgVal value;
} Arg;
typedef Arg *ArgList;
typedef void (*XtSignalCallbackProc) (XtPointer, XtSignalId *);
typedef enum XtCallbackStatus;
typedef void (*XtInputCallbackProc) (XtPointer, int *, XtInputId *);
typedef void (*XtTimerCallbackProc) (XtPointer, XtIntervalId *);
typedef long unsigned int XtInputMask;
typedef enum XtListPosition;
typedef void (*XtCallbackProc) (Widget, XtPointer, XtPointer);
typedef struct _XtCallbackRec *XtCallbackList;
typedef long unsigned int EventMask;
typedef void *XtVarArgsList;
typedef void (*XtEventHandler) (Widget, XtPointer, XEvent *, Boolean *);
typedef void (*XtCaseProc) (Display *, KeySym, KeySym *, KeySym *);
typedef void (*XtKeyProc) (Display *, KeyCode, Modifiers, Modifiers *,
			   KeySym *);
typedef void (*XtBlockHookProc) (XtPointer);
typedef long unsigned int XtBlockHookId;
typedef void (*XtActionHookProc) (Widget, XtPointer, String, XEvent *,
				  String *, Cardinal *);
typedef void *XtActionHookId;
typedef void (*XtDestructor) (XtAppContext, XrmValue *, XtPointer,
			      XrmValue *, Cardinal *);
typedef Boolean(*XtTypeConverter) (Display *, XrmValue *, Cardinal *,
				   XrmValue *, XrmValue *, XtPointer *);
typedef void (*XtConverter) (XrmValue *, Cardinal *, XrmValue *,
			     XrmValue *);
typedef void *XtRequestId;
typedef Boolean(*XtFilePredicate) (String);
typedef struct {
    char match;
    String substitution;
} SubstitutionRec;
typedef SubstitutionRec *Substitution;
typedef void (*XtSelectionCallbackProc) (Widget, XtPointer, Atom *, Atom *,
					 XtPointer, long unsigned int *,
					 int *);
typedef Boolean(*XtWorkProc) (XtPointer);
typedef void (*XtSelectionDoneProc) (Widget, Atom *, Atom *);
typedef void (*XtLoseSelectionProc) (Widget, Atom *);
typedef void (*XtErrorHandler) (String);
typedef Boolean(*XtConvertSelectionProc) (Widget, Atom *, Atom *, Atom *,
					  XtPointer *, long unsigned int *,
					  int *);
typedef void (*XtErrorMsgHandler) (String, String, String, String,
				   String *, Cardinal *);
typedef String(*XtLanguageProc) (Display *, String, XtPointer);
typedef enum XtGrabKind;
typedef struct _XtCheckpointTokenRec *XtCheckpointToken;
typedef void (*XtExtensionSelectProc) (Widget, int *, XtPointer *, int,
				       XtPointer);
typedef Boolean(*XtEventDispatchProc) (XEvent *);
typedef void (*XtCancelConvertSelectionProc) (Widget, Atom *, Atom *,
					      XtRequestId *, XtPointer);
typedef Boolean(*XtConvertSelectionIncrProc) (Widget, Atom *, Atom *,
					      Atom *, XtPointer *,
					      long unsigned int *, int *,
					      long unsigned int *,
					      XtPointer, XtRequestId *);
typedef void (*XtSelectionDoneIncrProc) (Widget, Atom *, Atom *,
					 XtRequestId *, XtPointer);
typedef void (*XtLoseSelectionIncrProc) (Widget, Atom *, XtPointer);
typedef long unsigned int XtValueMask;
typedef struct _XtEventRec *XtEventTable;
typedef XtActionProc *XtBoundActions;
typedef struct _XtResource {
    String resource_name;
    String resource_class;
    String resource_type;
    Cardinal resource_size;
    Cardinal resource_offset;
    String default_type;
    XtPointer default_addr;
} XtResource;
typedef struct _XtCallbackRec {
    XtCallbackProc callback;
    XtPointer closure;
} XtCallbackRec;
typedef struct _XtCheckpointTokenRec {
    int save_type;
    int interact_style;
    Boolean shutdown;
    Boolean fast;
    Boolean cancel_shutdown;
    int phase;
    int interact_dialog_type;
    Boolean request_cancel;
    Boolean request_next_phase;
    Boolean save_success;
    int type;
    Widget widget;
} XtCheckpointTokenRec;
typedef long unsigned int Pixel;
typedef struct _XtActionsRec {
    String string;
    XtActionProc proc;
} XtActionsRec;
typedef struct {
    Widget shell_widget;
    Widget enable_widget;
} XtPopdownIDRec;
typedef XtPopdownIDRec *XtPopdownID;
typedef struct {
    String type;
    Widget widget;
    ArgList args;
    Cardinal num_args;
} XtCreateHookDataRec;
typedef XtCreateHookDataRec *XtCreateHookData;
typedef struct {
    String type;
    Widget widget;
    XtPointer event_data;
    Cardinal num_event_data;
} XtChangeHookDataRec;
typedef XtChangeHookDataRec *XtChangeHookData;
typedef struct {
    Widget old;
    Widget req;
    ArgList args;
    Cardinal num_args;
} XtChangeHookSetValuesDataRec;
typedef XtChangeHookSetValuesDataRec *XtChangeHookSetValuesData;
typedef struct {
    String type;
    Widget widget;
    XtGeometryMask changeMask;
    XWindowChanges changes;
} XtConfigureHookDataRec;
typedef XtConfigureHookDataRec *XtConfigureHookData;
typedef struct {
    String type;
    Widget widget;
    XtWidgetGeometry *request;
    XtWidgetGeometry *reply;
    XtGeometryResult result;
} XtGeometryHookDataRec;
typedef XtGeometryHookDataRec *XtGeometryHookData;
typedef struct {
    String type;
    Widget widget;
} XtDestroyHookDataRec;
typedef XtDestroyHookDataRec *XtDestroyHookData;
extern void XtAddActions(XtActionList, Cardinal);
extern void XtAddCallback(Widget, const char *, XtCallbackProc, XtPointer);
extern void XtAddCallbacks(Widget, const char *, XtCallbackList);
extern void XtAddConverter(const char *, const char *, XtConverter,
			   XtConvertArgList, Cardinal);
extern void XtAddEventHandler(Widget, EventMask, Boolean, XtEventHandler,
			      XtPointer);
extern void XtAddExposureToRegion(XEvent *, Region);
extern void XtAddGrab(Widget, Boolean, Boolean);
extern XtInputId XtAddInput(int, XtPointer, XtInputCallbackProc,
			    XtPointer);
extern void XtAddRawEventHandler(Widget, EventMask, Boolean,
				 XtEventHandler, XtPointer);
extern XtSignalId XtAddSignal(XtSignalCallbackProc, XtPointer);
extern XtIntervalId XtAddTimeOut(long unsigned int, XtTimerCallbackProc,
				 XtPointer);
extern XtWorkProcId XtAddWorkProc(XtWorkProc, XtPointer);
extern GC XtAllocateGC(Widget, Cardinal, XtGCMask, XGCValues *, XtGCMask,
		       XtGCMask);
extern XtActionHookId XtAppAddActionHook(XtAppContext, XtActionHookProc,
					 XtPointer);
extern void XtAppAddActions(XtAppContext, XtActionList, Cardinal);
extern XtBlockHookId XtAppAddBlockHook(XtAppContext, XtBlockHookProc,
				       XtPointer);
extern void XtAppAddConverter(XtAppContext, const char *, const char *,
			      XtConverter, XtConvertArgList, Cardinal);
extern XtInputId XtAppAddInput(XtAppContext, int, XtPointer,
			       XtInputCallbackProc, XtPointer);
extern XtSignalId XtAppAddSignal(XtAppContext, XtSignalCallbackProc,
				 XtPointer);
extern XtIntervalId XtAppAddTimeOut(XtAppContext, long unsigned int,
				    XtTimerCallbackProc, XtPointer);
extern XtWorkProcId XtAppAddWorkProc(XtAppContext, XtWorkProc, XtPointer);
extern Widget XtAppCreateShell(const char *, const char *, WidgetClass,
			       Display *, ArgList, Cardinal);
extern void XtAppError(XtAppContext, const char *);
extern void XtAppErrorMsg(XtAppContext, const char *, const char *,
			  const char *, const char *, String *,
			  Cardinal *);
extern XrmDatabase *XtAppGetErrorDatabase(XtAppContext);
extern void XtAppGetErrorDatabaseText(XtAppContext, const char *,
				      const char *, const char *,
				      const char *, String, int,
				      XrmDatabase);
extern Boolean XtAppGetExitFlag(XtAppContext);
extern long unsigned int XtAppGetSelectionTimeout(XtAppContext);
extern Widget XtAppInitialize(XtAppContext *, const char *,
			      XrmOptionDescList, Cardinal, int *, String *,
			      String *, ArgList, Cardinal);
extern void XtAppLock(XtAppContext);
extern void XtAppMainLoop(XtAppContext);
extern void XtAppNextEvent(XtAppContext, XEvent *);
extern Boolean XtAppPeekEvent(XtAppContext, XEvent *);
extern XtInputMask XtAppPending(XtAppContext);
extern void XtAppProcessEvent(XtAppContext, XtInputMask);
extern void XtAppReleaseCacheRefs(XtAppContext, XtCacheRef *);
extern XtErrorHandler XtAppSetErrorHandler(XtAppContext, XtErrorHandler);
extern XtErrorMsgHandler XtAppSetErrorMsgHandler(XtAppContext,
						 XtErrorMsgHandler);
extern void XtAppSetExitFlag(XtAppContext);
extern void XtAppSetFallbackResources(XtAppContext, String *);
extern void XtAppSetSelectionTimeout(XtAppContext, long unsigned int);
extern void XtAppSetTypeConverter(XtAppContext, const char *, const char *,
				  XtTypeConverter, XtConvertArgList,
				  Cardinal, XtCacheType, XtDestructor);
extern XtErrorHandler XtAppSetWarningHandler(XtAppContext, XtErrorHandler);
extern XtErrorMsgHandler XtAppSetWarningMsgHandler(XtAppContext,
						   XtErrorMsgHandler);
extern void XtAppUnlock(XtAppContext);
extern void XtAppWarning(XtAppContext, const char *);
extern void XtAppWarningMsg(XtAppContext, const char *, const char *,
			    const char *, const char *, String *,
			    Cardinal *);
extern void XtAugmentTranslations(Widget, XtTranslations);
extern EventMask XtBuildEventMask(Widget);
extern String XtCXtToolkitError;
extern Boolean XtCallAcceptFocus(Widget, Time *);
extern void XtCallActionProc(Widget, const char *, XEvent *, String *,
			     Cardinal);
extern void XtCallCallbackList(Widget, XtCallbackList, XtPointer);
extern void XtCallCallbacks(Widget, const char *, XtPointer);
extern Boolean XtCallConverter(Display *, XtTypeConverter, XrmValuePtr,
			       Cardinal, XrmValuePtr, XrmValue *,
			       XtCacheRef *);
extern void XtCallbackExclusive(Widget, XtPointer, XtPointer);
extern void XtCallbackNone(Widget, XtPointer, XtPointer);
extern void XtCallbackNonexclusive(Widget, XtPointer, XtPointer);
extern void XtCallbackPopdown(Widget, XtPointer, XtPointer);
extern void XtCallbackReleaseCacheRef(Widget, XtPointer, XtPointer);
extern void XtCallbackReleaseCacheRefList(Widget, XtPointer, XtPointer);
extern char *XtCalloc(Cardinal, Cardinal);
extern void XtCancelSelectionRequest(Widget, Atom);
extern WidgetClass XtClass(Widget);
extern void XtCloseDisplay(Display *);
extern void XtConvert(Widget, const char *, XrmValue *, const char *,
		      XrmValue *);
extern Boolean XtConvertAndStore(Widget, const char *, XrmValue *,
				 const char *, XrmValue *);
extern void XtConvertCase(Display *, KeySym, KeySym *, KeySym *);
extern XtAppContext XtCreateApplicationContext(void);
extern Widget XtCreateApplicationShell(const char *, WidgetClass, ArgList,
				       Cardinal);
extern Widget XtCreateManagedWidget(const char *, WidgetClass, Widget,
				    ArgList, Cardinal);
extern Widget XtCreatePopupShell(const char *, WidgetClass, Widget,
				 ArgList, Cardinal);
extern void XtCreateSelectionRequest(Widget, Atom);
extern Widget XtCreateWidget(const char *, WidgetClass, Widget, ArgList,
			     Cardinal);
extern Boolean XtCvtColorToPixel(Display *, XrmValuePtr, Cardinal *,
				 XrmValuePtr, XrmValuePtr, XtPointer *);
extern Boolean XtCvtIntToBool(Display *, XrmValuePtr, Cardinal *,
			      XrmValuePtr, XrmValuePtr, XtPointer *);
extern Boolean XtCvtIntToBoolean(Display *, XrmValuePtr, Cardinal *,
				 XrmValuePtr, XrmValuePtr, XtPointer *);
extern Boolean XtCvtIntToColor(Display *, XrmValuePtr, Cardinal *,
			       XrmValuePtr, XrmValuePtr, XtPointer *);
extern Boolean XtCvtIntToFloat(Display *, XrmValuePtr, Cardinal *,
			       XrmValuePtr, XrmValuePtr, XtPointer *);
extern Boolean XtCvtIntToFont(Display *, XrmValuePtr, Cardinal *,
			      XrmValuePtr, XrmValuePtr, XtPointer *);
extern Boolean XtCvtIntToPixel(Display *, XrmValuePtr, Cardinal *,
			       XrmValuePtr, XrmValuePtr, XtPointer *);
extern Boolean XtCvtIntToPixmap(Display *, XrmValuePtr, Cardinal *,
				XrmValuePtr, XrmValuePtr, XtPointer *);
extern Boolean XtCvtIntToShort(Display *, XrmValuePtr, Cardinal *,
			       XrmValuePtr, XrmValuePtr, XtPointer *);
extern Boolean XtCvtIntToUnsignedChar(Display *, XrmValuePtr, Cardinal *,
				      XrmValuePtr, XrmValuePtr,
				      XtPointer *);
extern Boolean XtCvtStringToAcceleratorTable(Display *, XrmValuePtr,
					     Cardinal *, XrmValuePtr,
					     XrmValuePtr, XtPointer *);
extern Boolean XtCvtStringToAtom(Display *, XrmValuePtr, Cardinal *,
				 XrmValuePtr, XrmValuePtr, XtPointer *);
extern Boolean XtCvtStringToBool(Display *, XrmValuePtr, Cardinal *,
				 XrmValuePtr, XrmValuePtr, XtPointer *);
extern Boolean XtCvtStringToBoolean(Display *, XrmValuePtr, Cardinal *,
				    XrmValuePtr, XrmValuePtr, XtPointer *);
extern Boolean XtCvtStringToCommandArgArray(Display *, XrmValuePtr,
					    Cardinal *, XrmValuePtr,
					    XrmValuePtr, XtPointer *);
extern Boolean XtCvtStringToCursor(Display *, XrmValuePtr, Cardinal *,
				   XrmValuePtr, XrmValuePtr, XtPointer *);
extern Boolean XtCvtStringToDimension(Display *, XrmValuePtr, Cardinal *,
				      XrmValuePtr, XrmValuePtr,
				      XtPointer *);
extern Boolean XtCvtStringToDirectoryString(Display *, XrmValuePtr,
					    Cardinal *, XrmValuePtr,
					    XrmValuePtr, XtPointer *);
extern Boolean XtCvtStringToDisplay(Display *, XrmValuePtr, Cardinal *,
				    XrmValuePtr, XrmValuePtr, XtPointer *);
extern Boolean XtCvtStringToFile(Display *, XrmValuePtr, Cardinal *,
				 XrmValuePtr, XrmValuePtr, XtPointer *);
extern Boolean XtCvtStringToFloat(Display *, XrmValuePtr, Cardinal *,
				  XrmValuePtr, XrmValuePtr, XtPointer *);
extern Boolean XtCvtStringToFont(Display *, XrmValuePtr, Cardinal *,
				 XrmValuePtr, XrmValuePtr, XtPointer *);
extern Boolean XtCvtStringToFontSet(Display *, XrmValuePtr, Cardinal *,
				    XrmValuePtr, XrmValuePtr, XtPointer *);
extern Boolean XtCvtStringToFontStruct(Display *, XrmValuePtr, Cardinal *,
				       XrmValuePtr, XrmValuePtr,
				       XtPointer *);
extern Boolean XtCvtStringToGravity(Display *, XrmValuePtr, Cardinal *,
				    XrmValuePtr, XrmValuePtr, XtPointer *);
extern Boolean XtCvtStringToInitialState(Display *, XrmValuePtr,
					 Cardinal *, XrmValuePtr,
					 XrmValuePtr, XtPointer *);
extern Boolean XtCvtStringToInt(Display *, XrmValuePtr, Cardinal *,
				XrmValuePtr, XrmValuePtr, XtPointer *);
extern Boolean XtCvtStringToPixel(Display *, XrmValuePtr, Cardinal *,
				  XrmValuePtr, XrmValuePtr, XtPointer *);
extern Boolean XtCvtStringToRestartStyle(Display *, XrmValuePtr,
					 Cardinal *, XrmValuePtr,
					 XrmValuePtr, XtPointer *);
extern Boolean XtCvtStringToShort(Display *, XrmValuePtr, Cardinal *,
				  XrmValuePtr, XrmValuePtr, XtPointer *);
extern Boolean XtCvtStringToTranslationTable(Display *, XrmValuePtr,
					     Cardinal *, XrmValuePtr,
					     XrmValuePtr, XtPointer *);
extern Boolean XtCvtStringToUnsignedChar(Display *, XrmValuePtr,
					 Cardinal *, XrmValuePtr,
					 XrmValuePtr, XtPointer *);
extern Boolean XtCvtStringToVisual(Display *, XrmValuePtr, Cardinal *,
				   XrmValuePtr, XrmValuePtr, XtPointer *);
extern XrmDatabase XtDatabase(Display *);
extern void XtDestroyApplicationContext(XtAppContext);
extern void XtDestroyGC(GC);
extern void XtDestroyWidget(Widget);
extern void XtDirectConvert(XtConverter, XrmValuePtr, Cardinal,
			    XrmValuePtr, XrmValue *);
extern void XtDisownSelection(Widget, Atom, Time);
extern Boolean XtDispatchEvent(XEvent *);
extern Boolean XtDispatchEventToWidget(Widget, XEvent *);
extern Display *XtDisplay(Widget);
extern void XtDisplayInitialize(XtAppContext, Display *, const char *,
				const char *, XrmOptionDescRec *, Cardinal,
				int *, char **);
extern Display *XtDisplayOfObject(Widget);
extern void XtDisplayStringConversionWarning(Display *, const char *,
					     const char *);
extern XtAppContext XtDisplayToApplicationContext(Display *);
extern void XtError(const char *);
extern void XtErrorMsg(const char *, const char *, const char *,
		       const char *, String *, Cardinal *);
extern String XtFindFile(const char *, Substitution, Cardinal,
			 XtFilePredicate);
extern void XtFree(char *);
extern KeySym XtGetActionKeysym(XEvent *, Modifiers *);
extern void XtGetActionList(WidgetClass, XtActionList *, Cardinal *);
extern void XtGetApplicationNameAndClass(Display *, String *, String *);
extern void XtGetApplicationResources(Widget, XtPointer, XtResourceList,
				      Cardinal, ArgList, Cardinal);
extern XtPointer XtGetClassExtension(WidgetClass, Cardinal, XrmQuark,
				     long int, Cardinal);
extern void XtGetConstraintResourceList(WidgetClass, XtResourceList *,
					Cardinal *);
extern void XtGetDisplays(XtAppContext, Display * **, Cardinal *);
extern XrmDatabase *XtGetErrorDatabase(void);
extern void XtGetErrorDatabaseText(const char *, const char *,
				   const char *, const char *, String,
				   int);
extern GC XtGetGC(Widget, XtGCMask, XGCValues *);
extern Widget XtGetKeyboardFocusWidget(Widget);
extern KeySym *XtGetKeysymTable(Display *, KeyCode *, int *);
extern int XtGetMultiClickTime(Display *);
extern void XtGetResourceList(WidgetClass, XtResourceList *, Cardinal *);
extern void XtGetSelectionParameters(Widget, Atom, XtRequestId, Atom *,
				     XtPointer *, long unsigned int *,
				     int *);
extern XSelectionRequestEvent *XtGetSelectionRequest(Widget, Atom,
						     XtRequestId);
extern long unsigned int XtGetSelectionTimeout(void);
extern void XtGetSelectionValue(Widget, Atom, Atom,
				XtSelectionCallbackProc, XtPointer, Time);
extern void XtGetSelectionValueIncremental(Widget, Atom, Atom,
					   XtSelectionCallbackProc,
					   XtPointer, Time);
extern void XtGetSelectionValues(Widget, Atom, Atom *, int,
				 XtSelectionCallbackProc, XtPointer *,
				 Time);
extern void XtGetSelectionValuesIncremental(Widget, Atom, Atom *, int,
					    XtSelectionCallbackProc,
					    XtPointer *, Time);
extern void XtGetSubresources(Widget, XtPointer, const char *,
			      const char *, XtResourceList, Cardinal,
			      ArgList, Cardinal);
extern void XtGetSubvalues(XtPointer, XtResourceList, Cardinal, ArgList,
			   Cardinal);
extern void XtGetValues(Widget, ArgList, Cardinal);
extern void XtGrabButton(Widget, int, Modifiers, Boolean, unsigned int,
			 int, int, Window, Cursor);
extern void XtGrabKey(Widget, KeyCode, Modifiers, Boolean, int, int);
extern int XtGrabKeyboard(Widget, Boolean, int, int, Time);
extern int XtGrabPointer(Widget, Boolean, unsigned int, int, int, Window,
			 Cursor, Time);
extern XtCallbackStatus XtHasCallbacks(Widget, const char *);
extern Widget XtHooksOfDisplay(Display *);
extern Widget XtInitialize(const char *, const char *, XrmOptionDescRec *,
			   Cardinal, int *, char **);
extern void XtInitializeWidgetClass(WidgetClass);
extern void XtInsertEventHandler(Widget, EventMask, Boolean,
				 XtEventHandler, XtPointer,
				 XtListPosition);
extern void XtInsertEventTypeHandler(Widget, int, XtPointer,
				     XtEventHandler, XtPointer,
				     XtListPosition);
extern void XtInsertRawEventHandler(Widget, EventMask, Boolean,
				    XtEventHandler, XtPointer,
				    XtListPosition);
extern void XtInstallAccelerators(Widget, Widget);
extern void XtInstallAllAccelerators(Widget, Widget);
extern Boolean XtIsApplicationShell(Widget);
extern Boolean XtIsManaged(Widget);
extern Boolean XtIsObject(Widget);
extern Boolean XtIsOverrideShell(Widget);
extern Boolean XtIsRealized(Widget);
extern Boolean XtIsSensitive(Widget);
extern Boolean XtIsSessionShell(Widget);
extern Boolean XtIsSubclass(Widget, WidgetClass);
extern Boolean XtIsTransientShell(Widget);
extern Boolean XtIsVendorShell(Widget);
extern void XtKeysymToKeycodeList(Display *, KeySym, KeyCode * *,
				  Cardinal *);
extern XEvent *XtLastEventProcessed(Display *);
extern Time XtLastTimestampProcessed(Display *);
extern void XtMainLoop(void);
extern XtGeometryResult XtMakeGeometryRequest(Widget, XtWidgetGeometry *,
					      XtWidgetGeometry *);
extern XtGeometryResult XtMakeResizeRequest(Widget, Dimension, Dimension,
					    Dimension *, Dimension *);
extern char *XtMalloc(Cardinal);
extern void XtMapWidget(Widget);
extern void XtMenuPopupAction(Widget, XEvent *, String *, Cardinal *);
extern ArgList XtMergeArgLists(ArgList, Cardinal, ArgList, Cardinal);
extern String XtName(Widget);
extern Widget XtNameToWidget(Widget, const char *);
extern String XtNewString(String);
extern void XtNextEvent(XEvent *);
extern void XtNoticeSignal(XtSignalId);
extern Widget XtOpenApplication(XtAppContext *, const char *,
				XrmOptionDescList, Cardinal, int *,
				String *, String *, WidgetClass, ArgList,
				Cardinal);
extern Display *XtOpenDisplay(XtAppContext, const char *, const char *,
			      const char *, XrmOptionDescRec *, Cardinal,
			      int *, char **);
extern void XtOverrideTranslations(Widget, XtTranslations);
extern Boolean XtOwnSelection(Widget, Atom, Time, XtConvertSelectionProc,
			      XtLoseSelectionProc, XtSelectionDoneProc);
extern Boolean XtOwnSelectionIncremental(Widget, Atom, Time,
					 XtConvertSelectionIncrProc,
					 XtLoseSelectionIncrProc,
					 XtSelectionDoneIncrProc,
					 XtCancelConvertSelectionProc,
					 XtPointer);
extern Widget XtParent(Widget);
extern XtAccelerators XtParseAcceleratorTable(const char *);
extern XtTranslations XtParseTranslationTable(const char *);
extern Boolean XtPeekEvent(XEvent *);
extern Boolean XtPending(void);
extern void XtPopdown(Widget);
extern void XtPopup(Widget, XtGrabKind);
extern void XtPopupSpringLoaded(Widget);
extern void XtProcessEvent(XtInputMask);
extern XtGeometryResult XtQueryGeometry(Widget, XtWidgetGeometry *,
					XtWidgetGeometry *);
extern void XtRealizeWidget(Widget);
extern char *XtRealloc(char *, Cardinal);
extern void XtRegisterCaseConverter(Display *, XtCaseProc, KeySym, KeySym);
extern void XtRegisterDrawable(Display *, Drawable, Widget);
extern void XtRegisterExtensionSelector(Display *, int, int,
					XtExtensionSelectProc, XtPointer);
extern void XtRegisterGrabAction(XtActionProc, Boolean, unsigned int, int,
				 int);
extern void XtReleaseGC(Widget, GC);
extern void XtReleasePropertyAtom(Widget, Atom);
extern void XtRemoveActionHook(XtActionHookId);
extern void XtRemoveAllCallbacks(Widget, const char *);
extern void XtRemoveBlockHook(XtBlockHookId);
extern void XtRemoveCallback(Widget, const char *, XtCallbackProc,
			     XtPointer);
extern void XtRemoveCallbacks(Widget, const char *, XtCallbackList);
extern void XtRemoveEventHandler(Widget, EventMask, Boolean,
				 XtEventHandler, XtPointer);
extern void XtRemoveEventTypeHandler(Widget, int, XtPointer,
				     XtEventHandler, XtPointer);
extern void XtRemoveGrab(Widget);
extern void XtRemoveInput(XtInputId);
extern void XtRemoveRawEventHandler(Widget, EventMask, Boolean,
				    XtEventHandler, XtPointer);
extern void XtRemoveSignal(XtSignalId);
extern void XtRemoveTimeOut(XtIntervalId);
extern void XtRemoveWorkProc(XtWorkProcId);
extern Atom XtReservePropertyAtom(Widget);
extern String XtResolvePathname(Display *, const char *, const char *,
				const char *, const char *, Substitution,
				Cardinal, XtFilePredicate);
extern Screen *XtScreen(Widget);
extern XrmDatabase XtScreenDatabase(Screen *);
extern Screen *XtScreenOfObject(Widget);
extern void XtSendSelectionRequest(Widget, Atom, Time);
extern XtCheckpointToken XtSessionGetToken(Widget);
extern void XtSessionReturnToken(XtCheckpointToken);
extern void XtSetErrorHandler(XtErrorHandler);
extern void XtSetErrorMsgHandler(XtErrorMsgHandler);
extern XtEventDispatchProc XtSetEventDispatcher(Display *, int,
						XtEventDispatchProc);
extern void XtSetKeyTranslator(Display *, XtKeyProc);
extern void XtSetKeyboardFocus(Widget, Widget);
extern XtLanguageProc XtSetLanguageProc(XtAppContext, XtLanguageProc,
					XtPointer);
extern void XtSetMappedWhenManaged(Widget, Boolean);
extern void XtSetMultiClickTime(Display *, int);
extern void XtSetSelectionParameters(Widget, Atom, Atom, XtPointer,
				     long unsigned int, int);
extern void XtSetSelectionTimeout(long unsigned int);
extern void XtSetSensitive(Widget, Boolean);
extern void XtSetSubvalues(XtPointer, XtResourceList, Cardinal, ArgList,
			   Cardinal);
extern void XtSetTypeConverter(const char *, const char *, XtTypeConverter,
			       XtConvertArgList, Cardinal, XtCacheType,
			       XtDestructor);
extern void XtSetValues(Widget, ArgList, Cardinal);
extern void XtSetWMColormapWindows(Widget, Widget *, Cardinal);
extern void XtSetWarningHandler(XtErrorHandler);
extern void XtSetWarningMsgHandler(XtErrorMsgHandler);
extern void XtStringConversionWarning(const char *, const char *);
extern WidgetClass XtSuperclass(Widget);
extern void XtToolkitInitialize(void);
extern Boolean XtToolkitThreadInitialize(void);
extern void XtTranslateCoords(Widget, Position, Position, Position *,
			      Position *);
extern void XtTranslateKey(Display *, KeyCode, Modifiers, Modifiers *,
			   KeySym *);
extern void XtTranslateKeycode(Display *, KeyCode, Modifiers, Modifiers *,
			       KeySym *);
extern void XtUngrabButton(Widget, unsigned int, Modifiers);
extern void XtUngrabKey(Widget, KeyCode, Modifiers);
extern void XtUngrabKeyboard(Widget, Time);
extern void XtUngrabPointer(Widget, Time);
extern void XtUninstallTranslations(Widget);
extern void XtUnmapWidget(Widget);
extern void XtUnrealizeWidget(Widget);
extern void XtUnregisterDrawable(Display *, Drawable);
extern Widget XtVaAppCreateShell(const char *, const char *, WidgetClass,
				 Display *, ...);
extern Widget XtVaAppInitialize(XtAppContext *, const char *,
				XrmOptionDescList, Cardinal, int *,
				String *, String *, ...);
extern XtVarArgsList XtVaCreateArgsList(XtPointer, ...);
extern Widget XtVaCreateManagedWidget(const char *, WidgetClass, Widget,
				      ...);
extern Widget XtVaCreatePopupShell(const char *, WidgetClass, Widget, ...);
extern Widget XtVaCreateWidget(const char *, WidgetClass, Widget, ...);
extern void XtVaGetApplicationResources(Widget, XtPointer, XtResourceList,
					Cardinal, ...);
extern void XtVaGetSubresources(Widget, XtPointer, const char *,
				const char *, XtResourceList, Cardinal,
				...);
extern void XtVaGetSubvalues(XtPointer, XtResourceList, Cardinal, ...);
extern void XtVaGetValues(Widget, ...);
extern Widget XtVaOpenApplication(XtAppContext *, const char *,
				  XrmOptionDescList, Cardinal, int *,
				  String *, String *, WidgetClass, ...);
extern void XtVaSetSubvalues(XtPointer, XtResourceList, Cardinal, ...);
extern void XtVaSetValues(Widget, ...);
extern void XtWarning(const char *);
extern void XtWarningMsg(const char *, const char *, const char *,
			 const char *, String *, Cardinal *);
extern XtAppContext XtWidgetToApplicationContext(Widget);
extern Window XtWindow(Widget);
extern Window XtWindowOfObject(Widget);
extern Widget XtWindowToWidget(Display *, Window);
extern Boolean _XtCheckSubclassFlag(Widget, XtEnum);
extern Boolean _XtIsSubclassOf(Widget, WidgetClass, WidgetClass, XtEnum);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/IntrinsicP.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define _XtintrinsicP_h	1

typedef struct {
    long int xrm_name;
    long int xrm_class;
    long int xrm_type;
    Cardinal xrm_size;
    int xrm_offset;
    long int xrm_default_type;
    XtPointer xrm_default_addr;
} XrmResource;
typedef XrmResource *XrmResourceList;
typedef struct _XtTMRec *XtTM;
typedef struct {
    String name;
    String type;
    XtArgVal value;
    int size;
} XtTypedArg;
typedef XtTypedArg *XtTypedArgList;
typedef void (*XtProc) (void);
typedef void (*XtWidgetClassProc) (WidgetClass);
typedef void (*XtInitProc) (Widget, Widget, ArgList, Cardinal *);
typedef void (*XtArgsProc) (Widget, ArgList, Cardinal *);
typedef void (*XtRealizeProc) (Widget, XtValueMask *,
			       XSetWindowAttributes *);
typedef void (*XtWidgetProc) (Widget);
typedef void (*XtExposeProc) (Widget, XEvent *, Region);
typedef Boolean(*XtSetValuesFunc) (Widget, Widget, Widget, ArgList,
				   Cardinal *);
typedef Boolean(*XtArgsFunc) (Widget, ArgList, Cardinal *);
typedef void (*XtAlmostProc) (Widget, Widget, XtWidgetGeometry *,
			      XtWidgetGeometry *);
typedef Boolean(*XtAcceptFocusProc) (Widget, Time *);
typedef long unsigned int XtVersionType;
typedef XtGeometryResult(*XtGeometryHandler) (Widget, XtWidgetGeometry *,
					      XtWidgetGeometry *);
typedef void (*XtStringProc) (Widget, String);
typedef void (*XtAllocateProc) (WidgetClass, Cardinal *, Cardinal *,
				ArgList, Cardinal *, XtTypedArgList,
				Cardinal *, struct _WidgetRec * *,
				void **);
typedef void (*XtDeallocateProc) (struct _WidgetRec *, void *);
typedef struct _XtTMRec {
    XtTranslations translations;
    XtBoundActions proc_table;
    struct _XtStateRec *current_state;
    long unsigned int lastEventTime;
} XtTMRec;
extern void XtConfigureWidget(Widget, Position, Position, Dimension,
			      Dimension, Dimension);
extern void XtCreateWindow(Widget, unsigned int, Visual *, XtValueMask,
			   XSetWindowAttributes *);
extern Boolean XtIsComposite(Widget);
extern Boolean XtIsConstraint(Widget);
extern Boolean XtIsRectObj(Widget);
extern Boolean XtIsShell(Widget);
extern Boolean XtIsTopLevelShell(Widget);
extern Boolean XtIsWMShell(Widget);
extern Boolean XtIsWidget(Widget);
extern void XtMoveWidget(Widget, Position, Position);
extern void XtProcessLock(void);
extern void XtProcessUnlock(void);
extern void XtResizeWidget(Widget, Dimension, Dimension, Dimension);
extern void XtResizeWindow(Widget);
extern void _XtInherit(void);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/Object.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define _XtObject_h	1

typedef struct _ObjectClassRec *ObjectClass;
typedef struct _ObjectClassRec *Object;
extern WidgetClass objectClass;
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/ObjectP.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define XtInheritAllocate	((XtAllocateProc) _XtInherit)
#define XtInheritDeallocate	((XtDeallocateProc) _XtInherit)
#define _XtObjectP_h_	1
#define XtObjectExtensionVersion	1L

typedef struct _ObjectClassRec ObjectClassRec;
extern ObjectClassRec objectClassRec;
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/Shell.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define _XtShell_h	1

extern char XtShellStrings[];
extern WidgetClass applicationShellWidgetClass;
extern WidgetClass overrideShellWidgetClass;
extern WidgetClass sessionShellWidgetClass;
extern WidgetClass shellWidgetClass;
extern WidgetClass topLevelShellWidgetClass;
extern WidgetClass transientShellWidgetClass;
extern WidgetClass wmShellWidgetClass;
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/StringDefs.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define XtNaccelerators	((char*)&amp;XtStrings[0])
#define XtCFile	((char*)&amp;XtStrings[1012])
#define XtCFont	((char*)&amp;XtStrings[1017])
#define XtCForeground	((char*)&amp;XtStrings[1022])
#define XtCFraction	((char*)&amp;XtStrings[1033])
#define XtCFunction	((char*)&amp;XtStrings[1042])
#define XtCHeight	((char*)&amp;XtStrings[1051])
#define XtCHSpace	((char*)&amp;XtStrings[1058])
#define XtCIndex	((char*)&amp;XtStrings[1065])
#define XtCInitialResourcesPersistent	((char*)&amp;XtStrings[1071])
#define XtCInsertPosition	((char*)&amp;XtStrings[1098])
#define XtCInterval	((char*)&amp;XtStrings[1113])
#define XtNborderPixmap	((char*)&amp;XtStrings[111])
#define XtCJustify	((char*)&amp;XtStrings[1122])
#define XtCKnobIndent	((char*)&amp;XtStrings[1130])
#define XtCKnobPixel	((char*)&amp;XtStrings[1141])
#define XtCLabel	((char*)&amp;XtStrings[1151])
#define XtCLength	((char*)&amp;XtStrings[1157])
#define XtCMappedWhenManaged	((char*)&amp;XtStrings[1164])
#define XtCMargin	((char*)&amp;XtStrings[1182])
#define XtCMenuEntry	((char*)&amp;XtStrings[1189])
#define XtCNotify	((char*)&amp;XtStrings[1199])
#define XtCOrientation	((char*)&amp;XtStrings[1206])
#define XtCParameter	((char*)&amp;XtStrings[1218])
#define XtCPixmap	((char*)&amp;XtStrings[1228])
#define XtCPosition	((char*)&amp;XtStrings[1235])
#define XtCReadOnly	((char*)&amp;XtStrings[1244])
#define XtNborderWidth	((char*)&amp;XtStrings[124])
#define XtCResize	((char*)&amp;XtStrings[1253])
#define XtCReverseVideo	((char*)&amp;XtStrings[1260])
#define XtCScreen	((char*)&amp;XtStrings[1273])
#define XtCScrollProc	((char*)&amp;XtStrings[1280])
#define XtCScrollDCursor	((char*)&amp;XtStrings[1291])
#define XtCScrollHCursor	((char*)&amp;XtStrings[1305])
#define XtCScrollLCursor	((char*)&amp;XtStrings[1319])
#define XtCScrollRCursor	((char*)&amp;XtStrings[1333])
#define XtCScrollUCursor	((char*)&amp;XtStrings[1347])
#define XtCScrollVCursor	((char*)&amp;XtStrings[1361])
#define XtNcallback	((char*)&amp;XtStrings[136])
#define XtCSelection	((char*)&amp;XtStrings[1375])
#define XtCSensitive	((char*)&amp;XtStrings[1385])
#define XtCSelectionArray	((char*)&amp;XtStrings[1395])
#define XtNallowHoriz	((char*)&amp;XtStrings[13])
#define XtCSpace	((char*)&amp;XtStrings[1410])
#define XtCString	((char*)&amp;XtStrings[1416])
#define XtCTextOptions	((char*)&amp;XtStrings[1423])
#define XtCTextPosition	((char*)&amp;XtStrings[1435])
#define XtCTextSink	((char*)&amp;XtStrings[1448])
#define XtCTextSource	((char*)&amp;XtStrings[1457])
#define XtNchildren	((char*)&amp;XtStrings[145])
#define XtCThickness	((char*)&amp;XtStrings[1468])
#define XtCThumb	((char*)&amp;XtStrings[1478])
#define XtCTranslations	((char*)&amp;XtStrings[1484])
#define XtCValue	((char*)&amp;XtStrings[1497])
#define XtCVSpace	((char*)&amp;XtStrings[1503])
#define XtCWidth	((char*)&amp;XtStrings[1510])
#define XtCWindow	((char*)&amp;XtStrings[1516])
#define XtCX	((char*)&amp;XtStrings[1523])
#define XtCY	((char*)&amp;XtStrings[1525])
#define XtRAcceleratorTable	((char*)&amp;XtStrings[1527])
#define XtRAtom	((char*)&amp;XtStrings[1544])
#define XtRBitmap	((char*)&amp;XtStrings[1549])
#define XtNcolormap	((char*)&amp;XtStrings[154])
#define XtRBool	((char*)&amp;XtStrings[1556])
#define XtRBoolean	((char*)&amp;XtStrings[1561])
#define XtRCallback	((char*)&amp;XtStrings[1569])
#define XtRCallProc	((char*)&amp;XtStrings[1578])
#define XtRCardinal	((char*)&amp;XtStrings[1587])
#define XtRColor	((char*)&amp;XtStrings[1596])
#define XtRColormap	((char*)&amp;XtStrings[1602])
#define XtRCursor	((char*)&amp;XtStrings[1611])
#define XtRDimension	((char*)&amp;XtStrings[1618])
#define XtRDisplay	((char*)&amp;XtStrings[1628])
#define XtREditMode	((char*)&amp;XtStrings[1636])
#define XtNdepth	((char*)&amp;XtStrings[163])
#define XtREnum	((char*)&amp;XtStrings[1645])
#define XtRFile	((char*)&amp;XtStrings[1650])
#define XtRFloat	((char*)&amp;XtStrings[1655])
#define XtRFont	((char*)&amp;XtStrings[1661])
#define XtRFontStruct	((char*)&amp;XtStrings[1666])
#define XtRFunction	((char*)&amp;XtStrings[1677])
#define XtRGeometry	((char*)&amp;XtStrings[1686])
#define XtRImmediate	((char*)&amp;XtStrings[1695])
#define XtNdestroyCallback	((char*)&amp;XtStrings[169])
#define XtRInitialState	((char*)&amp;XtStrings[1705])
#define XtRInt	((char*)&amp;XtStrings[1718])
#define XtRJustify	((char*)&amp;XtStrings[1722])
#define XtRLongBoolean	((char*)&amp;XtStrings[1730])
#define XtRObject	((char*)&amp;XtStrings[1735])
#define XtROrientation	((char*)&amp;XtStrings[1742])
#define XtRPixel	((char*)&amp;XtStrings[1754])
#define XtRPixmap	((char*)&amp;XtStrings[1760])
#define XtRPointer	((char*)&amp;XtStrings[1767])
#define XtRPosition	((char*)&amp;XtStrings[1775])
#define XtRScreen	((char*)&amp;XtStrings[1784])
#define XtRShort	((char*)&amp;XtStrings[1791])
#define XtRString	((char*)&amp;XtStrings[1797])
#define XtRStringArray	((char*)&amp;XtStrings[1804])
#define XtRStringTable	((char*)&amp;XtStrings[1816])
#define XtRUnsignedChar	((char*)&amp;XtStrings[1828])
#define XtRTranslationTable	((char*)&amp;XtStrings[1841])
#define XtRVisual	((char*)&amp;XtStrings[1858])
#define XtNeditType	((char*)&amp;XtStrings[185])
#define XtRWidget	((char*)&amp;XtStrings[1865])
#define XtRWidgetClass	((char*)&amp;XtStrings[1872])
#define XtRWidgetList	((char*)&amp;XtStrings[1884])
#define XtRWindow	((char*)&amp;XtStrings[1895])
#define XtEoff	((char*)&amp;XtStrings[1902])
#define XtEfalse	((char*)&amp;XtStrings[1906])
#define XtEno	((char*)&amp;XtStrings[1912])
#define XtEon	((char*)&amp;XtStrings[1915])
#define XtEtrue	((char*)&amp;XtStrings[1918])
#define XtEyes	((char*)&amp;XtStrings[1923])
#define XtEvertical	((char*)&amp;XtStrings[1927])
#define XtEhorizontal	((char*)&amp;XtStrings[1936])
#define XtEtextRead	((char*)&amp;XtStrings[1947])
#define XtNfile	((char*)&amp;XtStrings[194])
#define XtEtextAppend	((char*)&amp;XtStrings[1952])
#define XtEtextEdit	((char*)&amp;XtStrings[1959])
#define XtExtdefaultbackground	((char*)&amp;XtStrings[1964])
#define XtExtdefaultforeground	((char*)&amp;XtStrings[1984])
#define XtNfont	((char*)&amp;XtStrings[199])
#define XtExtdefaultfont	((char*)&amp;XtStrings[2004])
#define XtNfontSet	((char*)&amp;XtStrings[2018])
#define XtRFontSet	((char*)&amp;XtStrings[2026])
#define XtCFontSet	((char*)&amp;XtStrings[2034])
#define XtRGravity	((char*)&amp;XtStrings[2042])
#define XtNforceBars	((char*)&amp;XtStrings[204])
#define XtNcreateHook	((char*)&amp;XtStrings[2050])
#define XtNchangeHook	((char*)&amp;XtStrings[2061])
#define XtNconfigureHook	((char*)&amp;XtStrings[2072])
#define XtNgeometryHook	((char*)&amp;XtStrings[2086])
#define XtNdestroyHook	((char*)&amp;XtStrings[2099])
#define XtNshells	((char*)&amp;XtStrings[2111])
#define XtNnumShells	((char*)&amp;XtStrings[2118])
#define XtRCommandArgArray	((char*)&amp;XtStrings[2128])
#define XtRDirectoryString	((char*)&amp;XtStrings[2144])
#define XtNforeground	((char*)&amp;XtStrings[214])
#define XtREnvironmentArray	((char*)&amp;XtStrings[2160])
#define XtRRestartStyle	((char*)&amp;XtStrings[2177])
#define XtRSmcConn	((char*)&amp;XtStrings[2190])
#define XtHcreate	((char*)&amp;XtStrings[2198])
#define XtHsetValues	((char*)&amp;XtStrings[2207])
#define XtHmanageChildren	((char*)&amp;XtStrings[2219])
#define XtHunmanageChildren	((char*)&amp;XtStrings[2236])
#define XtHmanageSet	((char*)&amp;XtStrings[2255])
#define XtNfunction	((char*)&amp;XtStrings[225])
#define XtHunmanageSet	((char*)&amp;XtStrings[2267])
#define XtHrealizeWidget	((char*)&amp;XtStrings[2281])
#define XtHunrealizeWidget	((char*)&amp;XtStrings[2297])
#define XtHaddCallback	((char*)&amp;XtStrings[2315])
#define XtHaddCallbacks	((char*)&amp;XtStrings[2329])
#define XtHremoveCallback	((char*)&amp;XtStrings[2344])
#define XtNheight	((char*)&amp;XtStrings[234])
#define XtHremoveCallbacks	((char*)&amp;XtStrings[2361])
#define XtHremoveAllCallbacks	((char*)&amp;XtStrings[2379])
#define XtHaugmentTranslations	((char*)&amp;XtStrings[2400])
#define XtNhighlight	((char*)&amp;XtStrings[241])
#define XtHoverrideTranslations	((char*)&amp;XtStrings[2422])
#define XtHuninstallTranslations	((char*)&amp;XtStrings[2445])
#define XtHsetKeyboardFocus	((char*)&amp;XtStrings[2469])
#define XtHsetWMColormapWindows	((char*)&amp;XtStrings[2488])
#define XtNallowVert	((char*)&amp;XtStrings[24])
#define XtHsetMappedWhenManaged	((char*)&amp;XtStrings[2511])
#define XtNhSpace	((char*)&amp;XtStrings[251])
#define XtHmapWidget	((char*)&amp;XtStrings[2534])
#define XtHunmapWidget	((char*)&amp;XtStrings[2546])
#define XtHpopup	((char*)&amp;XtStrings[2560])
#define XtHpopupSpringLoaded	((char*)&amp;XtStrings[2568])
#define XtHpopdown	((char*)&amp;XtStrings[2588])
#define XtNindex	((char*)&amp;XtStrings[258])
#define XtHconfigure	((char*)&amp;XtStrings[2598])
#define XtHpreGeometry	((char*)&amp;XtStrings[2610])
#define XtHpostGeometry	((char*)&amp;XtStrings[2624])
#define XtHdestroy	((char*)&amp;XtStrings[2639])
#define XtNinitialResourcesPersistent	((char*)&amp;XtStrings[264])
#define XtNinnerHeight	((char*)&amp;XtStrings[291])
#define XtNinnerWidth	((char*)&amp;XtStrings[303])
#define XtNinnerWindow	((char*)&amp;XtStrings[314])
#define XtNinsertPosition	((char*)&amp;XtStrings[326])
#define XtNinternalHeight	((char*)&amp;XtStrings[341])
#define XtNancestorSensitive	((char*)&amp;XtStrings[34])
#define XtNinternalWidth	((char*)&amp;XtStrings[356])
#define XtNjumpProc	((char*)&amp;XtStrings[370])
#define XtNjustify	((char*)&amp;XtStrings[379])
#define XtNknobHeight	((char*)&amp;XtStrings[387])
#define XtNknobIndent	((char*)&amp;XtStrings[398])
#define XtNknobPixel	((char*)&amp;XtStrings[409])
#define XtNknobWidth	((char*)&amp;XtStrings[419])
#define XtNlabel	((char*)&amp;XtStrings[429])
#define XtNlength	((char*)&amp;XtStrings[435])
#define XtNlowerRight	((char*)&amp;XtStrings[442])
#define XtNmappedWhenManaged	((char*)&amp;XtStrings[453])
#define XtNmenuEntry	((char*)&amp;XtStrings[471])
#define XtNname	((char*)&amp;XtStrings[481])
#define XtNnotify	((char*)&amp;XtStrings[486])
#define XtNnumChildren	((char*)&amp;XtStrings[493])
#define XtNorientation	((char*)&amp;XtStrings[505])
#define XtNparameter	((char*)&amp;XtStrings[517])
#define XtNpixmap	((char*)&amp;XtStrings[527])
#define XtNbackground	((char*)&amp;XtStrings[52])
#define XtNpopupCallback	((char*)&amp;XtStrings[534])
#define XtNpopdownCallback	((char*)&amp;XtStrings[548])
#define XtNresize	((char*)&amp;XtStrings[564])
#define XtNreverseVideo	((char*)&amp;XtStrings[571])
#define XtNscreen	((char*)&amp;XtStrings[584])
#define XtNscrollProc	((char*)&amp;XtStrings[591])
#define XtNscrollDCursor	((char*)&amp;XtStrings[602])
#define XtNscrollHCursor	((char*)&amp;XtStrings[616])
#define XtNscrollLCursor	((char*)&amp;XtStrings[630])
#define XtNbackgroundPixmap	((char*)&amp;XtStrings[63])
#define XtNscrollRCursor	((char*)&amp;XtStrings[644])
#define XtNscrollUCursor	((char*)&amp;XtStrings[658])
#define XtNscrollVCursor	((char*)&amp;XtStrings[672])
#define XtNselection	((char*)&amp;XtStrings[686])
#define XtNselectionArray	((char*)&amp;XtStrings[696])
#define XtNsensitive	((char*)&amp;XtStrings[711])
#define XtNshown	((char*)&amp;XtStrings[721])
#define XtNspace	((char*)&amp;XtStrings[727])
#define XtNstring	((char*)&amp;XtStrings[733])
#define XtNtextOptions	((char*)&amp;XtStrings[740])
#define XtNtextSink	((char*)&amp;XtStrings[752])
#define XtNtextSource	((char*)&amp;XtStrings[761])
#define XtNthickness	((char*)&amp;XtStrings[772])
#define XtNthumb	((char*)&amp;XtStrings[782])
#define XtNthumbProc	((char*)&amp;XtStrings[788])
#define XtNtop	((char*)&amp;XtStrings[798])
#define XtNtranslations	((char*)&amp;XtStrings[802])
#define XtNbitmap	((char*)&amp;XtStrings[80])
#define XtNunrealizeCallback	((char*)&amp;XtStrings[815])
#define XtNupdate	((char*)&amp;XtStrings[833])
#define XtNuseBottom	((char*)&amp;XtStrings[840])
#define XtNuseRight	((char*)&amp;XtStrings[850])
#define XtNvalue	((char*)&amp;XtStrings[859])
#define XtNvSpace	((char*)&amp;XtStrings[865])
#define XtNwidth	((char*)&amp;XtStrings[872])
#define XtNwindow	((char*)&amp;XtStrings[878])
#define XtNborderColor	((char*)&amp;XtStrings[87])
#define XtNx	((char*)&amp;XtStrings[885])
#define XtNy	((char*)&amp;XtStrings[887])
#define XtCAccelerators	((char*)&amp;XtStrings[889])
#define XtCBackground	((char*)&amp;XtStrings[902])
#define XtCBitmap	((char*)&amp;XtStrings[913])
#define XtCBoolean	((char*)&amp;XtStrings[920])
#define XtCBorderColor	((char*)&amp;XtStrings[928])
#define XtCBorderWidth	((char*)&amp;XtStrings[940])
#define XtCCallback	((char*)&amp;XtStrings[952])
#define XtCColormap	((char*)&amp;XtStrings[961])
#define XtCColor	((char*)&amp;XtStrings[970])
#define XtCCursor	((char*)&amp;XtStrings[976])
#define XtCDepth	((char*)&amp;XtStrings[983])
#define XtCEditType	((char*)&amp;XtStrings[989])
#define XtCEventBindings	((char*)&amp;XtStrings[998])
#define XtNborder	((char*)&amp;XtStrings[99])
#define _XtStringDefs_h_	1

extern char XtStrings[];
</SCREEN>
</SECT2>
<SECT2>
<TITLE>X11/TranslateI.h</TITLE>
<PARA>
</PARA>
<SCREEN>

struct _TranslationData {
    unsigned char hasBindings;
    unsigned char operation;
    TMShortCard numStateTrees;
    struct _TranslationData *composers[2];
    EventMask eventMask;
    TMStateTree stateTreeTbl[1];
};
typedef struct _ActionsRec *ActionPtr;
typedef struct _ActionsRec {
    int idx;
    String *params;
    Cardinal num_params;
    ActionPtr next;
} ActionRec;
typedef long unsigned int TMLongCard;
struct _LateBindings {
    unsigned int knot:1;
    unsigned int pair:1;
    short unsigned int ref_count;
    KeySym keysym;
};
typedef struct _LateBindings *LateBindingsPtr;
struct _TMTypeMatchRec {
    TMLongCard eventType;
    TMLongCard eventCode;
    TMLongCard eventCodeMask;
    MatchProc matchEvent;
};
typedef struct _TMTypeMatchRec *TMTypeMatch;
struct _TMModifierMatchRec {
    TMLongCard modifiers;
    TMLongCard modifierMask;
    LateBindingsPtr lateModifiers;
    Boolean standard;
};
typedef struct _TMModifierMatchRec *TMModifierMatch;
typedef struct _TMEventRec *TMEventPtr;
typedef Boolean(*MatchProc) (TMTypeMatch, TMModifierMatch, TMEventPtr);
struct _TMEventRec {
    XEvent *xev;
    Event event;
};
typedef struct _EventRec {
    TMLongCard modifiers;
    TMLongCard modifierMask;
    LateBindingsPtr lateModifiers;
    TMLongCard eventType;
    TMLongCard eventCode;
    TMLongCard eventCodeMask;
    MatchProc matchEvent;
    Boolean standard;
} Event;
typedef short unsigned int TMShortCard;
typedef struct _TMBranchHeadRec {
    unsigned int isSimple:1;
    unsigned int hasActions:1;
    unsigned int hasCycles:1;
    unsigned int more:13;
    TMShortCard typeIndex;
    TMShortCard modIndex;
} TMBranchHeadRec;
typedef struct _TMSimpleStateTreeRec {
    unsigned int isSimple:1;
    unsigned int isAccelerator:1;
    unsigned int mappingNotifyInterest:1;
    unsigned int refCount:13;
    TMShortCard numBranchHeads;
    TMShortCard numQuarks;
    TMShortCard unused;
    TMBranchHeadRec *branchHeadTbl;
    XrmQuark *quarkTbl;
} TMSimpleStateTreeRec;
struct _XtStateRec {
    unsigned int isCycleStart:1;
    unsigned int isCycleEnd:1;
    TMShortCard typeIndex;
    TMShortCard modIndex;
    ActionPtr actions;
    StatePtr nextLevel;
};
typedef struct _XtStateRec *StatePtr;
typedef struct _TMParseStateTreeRec {
    unsigned int isSimple:1;
    unsigned int isAccelerator:1;
    unsigned int mappingNotifyInterest:1;
    unsigned int isStackQuarks:1;
    unsigned int isStackBranchHeads:1;
    unsigned int isStackComplexBranchHeads:1;
    unsigned int unused:10;
    TMShortCard numBranchHeads;
    TMShortCard numQuarks;
    TMShortCard numComplexBranchHeads;
    TMBranchHeadRec *branchHeadTbl;
    XrmQuark *quarkTbl;
    StatePtr *complexBranchHeadTbl;
    TMShortCard branchHeadTblSize;
    TMShortCard quarkTblSize;
    TMShortCard complexBranchHeadTblSize;
    StatePtr head;
} TMParseStateTreeRec;
typedef struct _TMComplexStateTreeRec {
    unsigned int isSimple:1;
    unsigned int isAccelerator:1;
    unsigned int mappingNotifyInterest:1;
    unsigned int refCount:13;
    TMShortCard numBranchHeads;
    TMShortCard numQuarks;
    TMShortCard numComplexBranchHeads;
    TMBranchHeadRec *branchHeadTbl;
    XrmQuark *quarkTbl;
    StatePtr *complexBranchHeadTbl;
} TMComplexStateTreeRec;
union _TMStateTreeRec {
    TMSimpleStateTreeRec simple;
    TMParseStateTreeRec parse;
    TMComplexStateTreeRec complex;
};
typedef union _TMStateTreeRec *TMStateTree;
typedef Boolean(*_XtTraversalProc) (StatePtr, XtPointer);
typedef struct _TMSimpleBindProcsRec {
    XtActionProc *procs;
} TMSimpleBindProcsRec;
typedef struct _TMSimpleBindDataRec {
    unsigned int isComplex:1;
    TMSimpleBindProcsRec bindTbl[8];
} TMSimpleBindDataRec;
typedef struct _TMComplexBindProcsRec {
    Widget widget;
    XtTranslations aXlations;
    XtActionProc *procs;
} TMComplexBindProcsRec;
struct _ATranslationData {
    unsigned char hasBindings;
    unsigned char operation;
    struct _TranslationData *xlations;
    struct _ATranslationData *next;
    TMComplexBindProcsRec bindTbl[24];
};
typedef struct _TMComplexBindDataRec {
    unsigned int isComplex:1;
    struct _ATranslationData *accel_context;
    TMComplexBindProcsRec bindTbl[24];
} TMComplexBindDataRec;
union _TMBindDataRec {
    TMSimpleBindDataRec simple;
    TMComplexBindDataRec complex;
};
typedef union _TMBindDataRec *TMBindData;
typedef struct _TMParseStateTreeRec *TMParseStateTree;
struct _EventSeqRec {
    Event event;
    StatePtr state;
    EventSeqPtr next;
    ActionPtr actions;
};
typedef struct _EventSeqRec *EventSeqPtr;
typedef struct _TMBranchHeadRec *TMBranchHead;
typedef unsigned int _XtTranslateOp;
</SCREEN>
</SECT2>
</SECT1>
<SECT1 ID=libXtman>
<TITLE>Interface Definitions for libXt</TITLE>
<PARA>
The interfaces defined on the following pages are included in libXt and are defined
by this specification.
Unless otherwise noted, these interfaces shall be included
in the source standard.
</PARA>
<PARA>
Other interfaces listed in <XREF LINKEND=libXt> shall behave as described
in the referenced base document.
</PARA>
m4_include(_XtCopyFromArg.sgml)
m4_include(_XtInherit.sgml)
m4_include(_XtInheritTranslations.sgml)
m4_include(_XtIsSubclassOf.sgml)
</SECT1>
<!-- End of text generated from database -->
