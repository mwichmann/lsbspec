<!-- Start of generated text - do not edit! -->
<!-- generated from the LSB specification database by mklibspec -->
<SECT1 ID=libpng12>
<TITLE>Interfaces for libpng12</TITLE>
<PARA>
<xref linkend="lib-libpng12-def"> defines the library name and shared object name
for the libpng12 library
</PARA>
<TABLE id="lib-libpng12-def">
<TITLE>libpng12 Definition</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Library:</ENTRY>
<ENTRY>libpng12</ENTRY>
</ROW>
<ROW>
<ENTRY>SONAME:</ENTRY>
<ENTRY>libpng12.so.0</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The behavior of the interfaces in this library is specified by the following specifications:<SIMPLELIST COLUMNS=1>
<MEMBER ID='REFSTD.libpng12.1'>
[LSB] <xref linkend="std.LSB">
</MEMBER>
</SIMPLELIST>
</PARA>
<!-- debug: database interface name PNG Reference library -->
<SECT2>
<!--libgroup-->
<TITLE>PNG Reference library</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for PNG Reference library</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic functions
for PNG Reference library specified in <xref linkend="tbl-libpng12-png-r-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<TABLE id="tbl-libpng12-png-r-ints">
<TITLE>libpng12 - PNG Reference library Function Interfaces</TITLE>
<TGROUP COLS=3>
<TBODY>
<ROW>
<ENTRY><indexterm><primary>png_access_version_number</primary></indexterm>png_access_version_number(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_check_sig</primary></indexterm>png_check_sig(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_convert_from_struct_tm</primary></indexterm>png_convert_from_struct_tm(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_convert_from_time_t</primary></indexterm>png_convert_from_time_t(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_create_info_struct</primary></indexterm>png_create_info_struct(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_create_read_struct</primary></indexterm>png_create_read_struct(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_create_read_struct_2</primary></indexterm>png_create_read_struct_2(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_create_write_struct</primary></indexterm>png_create_write_struct(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_create_write_struct_2</primary></indexterm>png_create_write_struct_2(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_data_freer</primary></indexterm>png_data_freer(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_destroy_info_struct</primary></indexterm>png_destroy_info_struct(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_destroy_read_struct</primary></indexterm>png_destroy_read_struct(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_destroy_write_struct</primary></indexterm>png_destroy_write_struct(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_error</primary></indexterm>png_error(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_free</primary></indexterm>png_free(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_free_data</primary></indexterm>png_free_data(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_get_IHDR</primary></indexterm>png_get_IHDR(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_get_PLTE</primary></indexterm>png_get_PLTE(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_get_bKGD</primary></indexterm>png_get_bKGD(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_get_bit_depth</primary></indexterm>png_get_bit_depth(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_get_cHRM</primary></indexterm>png_get_cHRM(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_get_channels</primary></indexterm>png_get_channels(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_get_color_type</primary></indexterm>png_get_color_type(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_get_error_ptr</primary></indexterm>png_get_error_ptr(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_get_gAMA</primary></indexterm>png_get_gAMA(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_get_hIST</primary></indexterm>png_get_hIST(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_get_header_ver</primary></indexterm>png_get_header_ver(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_get_iCCP</primary></indexterm>png_get_iCCP(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_get_image_height</primary></indexterm>png_get_image_height(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_get_image_width</primary></indexterm>png_get_image_width(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_get_interlace_type</primary></indexterm>png_get_interlace_type(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_get_io_ptr</primary></indexterm>png_get_io_ptr(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_get_libpng_ver</primary></indexterm>png_get_libpng_ver(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_get_oFFs</primary></indexterm>png_get_oFFs(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_get_pHYs</primary></indexterm>png_get_pHYs(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_get_progressive_ptr</primary></indexterm>png_get_progressive_ptr(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_get_rowbytes</primary></indexterm>png_get_rowbytes(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_get_rows</primary></indexterm>png_get_rows(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_get_sBIT</primary></indexterm>png_get_sBIT(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_get_sRGB</primary></indexterm>png_get_sRGB(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_get_tIME</primary></indexterm>png_get_tIME(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_get_tRNS</primary></indexterm>png_get_tRNS(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_get_text</primary></indexterm>png_get_text(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_get_unknown_chunks</primary></indexterm>png_get_unknown_chunks(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_get_user_chunk_ptr</primary></indexterm>png_get_user_chunk_ptr(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_get_valid</primary></indexterm>png_get_valid(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_get_x_offset_pixels</primary></indexterm>png_get_x_offset_pixels(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_get_x_pixels_per_meter</primary></indexterm>png_get_x_pixels_per_meter(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_get_y_offset_pixels</primary></indexterm>png_get_y_offset_pixels(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_get_y_pixels_per_meter</primary></indexterm>png_get_y_pixels_per_meter(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_info_init_3</primary></indexterm>png_info_init_3(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_init_io</primary></indexterm>png_init_io(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_malloc</primary></indexterm>png_malloc(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_permit_mng_features</primary></indexterm>png_permit_mng_features(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_process_data</primary></indexterm>png_process_data(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_progressive_combine_row</primary></indexterm>png_progressive_combine_row(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_read_end</primary></indexterm>png_read_end(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_read_image</primary></indexterm>png_read_image(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_read_info</primary></indexterm>png_read_info(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_read_png</primary></indexterm>png_read_png(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_read_row</primary></indexterm>png_read_row(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_read_rows</primary></indexterm>png_read_rows(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_read_update_info</primary></indexterm>png_read_update_info(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_set_IHDR</primary></indexterm>png_set_IHDR(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_PLTE</primary></indexterm>png_set_PLTE(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_bKGD</primary></indexterm>png_set_bKGD(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_set_background</primary></indexterm>png_set_background(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_bgr</primary></indexterm>png_set_bgr(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_cHRM</primary></indexterm>png_set_cHRM(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_set_compression_buffer_size</primary></indexterm>png_set_compression_buffer_size(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_compression_level</primary></indexterm>png_set_compression_level(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_compression_mem_level</primary></indexterm>png_set_compression_mem_level(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_set_compression_method</primary></indexterm>png_set_compression_method(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_compression_strategy</primary></indexterm>png_set_compression_strategy(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_compression_window_bits</primary></indexterm>png_set_compression_window_bits(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_set_dither</primary></indexterm>png_set_dither(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_error_fn</primary></indexterm>png_set_error_fn(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_expand</primary></indexterm>png_set_expand(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_set_filler</primary></indexterm>png_set_filler(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_filter</primary></indexterm>png_set_filter(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_gAMA</primary></indexterm>png_set_gAMA(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_set_gamma</primary></indexterm>png_set_gamma(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_gray_1_2_4_to_8</primary></indexterm>png_set_gray_1_2_4_to_8(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_gray_to_rgb</primary></indexterm>png_set_gray_to_rgb(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_set_hIST</primary></indexterm>png_set_hIST(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_iCCP</primary></indexterm>png_set_iCCP(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_interlace_handling</primary></indexterm>png_set_interlace_handling(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_set_invert_alpha</primary></indexterm>png_set_invert_alpha(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_invert_mono</primary></indexterm>png_set_invert_mono(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_keep_unknown_chunks</primary></indexterm>png_set_keep_unknown_chunks(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_set_mem_fn</primary></indexterm>png_set_mem_fn(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_oFFs</primary></indexterm>png_set_oFFs(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_pHYs</primary></indexterm>png_set_pHYs(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_set_packing</primary></indexterm>png_set_packing(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_packswap</primary></indexterm>png_set_packswap(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_palette_to_rgb</primary></indexterm>png_set_palette_to_rgb(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_set_progressive_read_fn</primary></indexterm>png_set_progressive_read_fn(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_read_fn</primary></indexterm>png_set_read_fn(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_read_user_chunk_fn</primary></indexterm>png_set_read_user_chunk_fn(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_set_read_user_transform_fn</primary></indexterm>png_set_read_user_transform_fn(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_rgb_to_gray</primary></indexterm>png_set_rgb_to_gray(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_rows</primary></indexterm>png_set_rows(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_set_sBIT</primary></indexterm>png_set_sBIT(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_sRGB</primary></indexterm>png_set_sRGB(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_sRGB_gAMA_and_cHRM</primary></indexterm>png_set_sRGB_gAMA_and_cHRM(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_set_shift</primary></indexterm>png_set_shift(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_sig_bytes</primary></indexterm>png_set_sig_bytes(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_strip_16</primary></indexterm>png_set_strip_16(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_set_strip_alpha</primary></indexterm>png_set_strip_alpha(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_swap</primary></indexterm>png_set_swap(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_swap_alpha</primary></indexterm>png_set_swap_alpha(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_set_tIME</primary></indexterm>png_set_tIME(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_tRNS</primary></indexterm>png_set_tRNS(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_tRNS_to_alpha</primary></indexterm>png_set_tRNS_to_alpha(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_set_text</primary></indexterm>png_set_text(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_unknown_chunk_location</primary></indexterm>png_set_unknown_chunk_location(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_unknown_chunks</primary></indexterm>png_set_unknown_chunks(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_set_write_fn</primary></indexterm>png_set_write_fn(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_write_status_fn</primary></indexterm>png_set_write_status_fn(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_set_write_user_transform_fn</primary></indexterm>png_set_write_user_transform_fn(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_sig_cmp</primary></indexterm>png_sig_cmp(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_start_read_image</primary></indexterm>png_start_read_image(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_warning</primary></indexterm>png_warning(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_write_chunk</primary></indexterm>png_write_chunk(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_write_end</primary></indexterm>png_write_end(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_write_flush</primary></indexterm>png_write_flush(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_write_image</primary></indexterm>png_write_image(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_write_info</primary></indexterm>png_write_info(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_write_png</primary></indexterm>png_write_png(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>png_write_row</primary></indexterm>png_write_row(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>png_write_rows</primary></indexterm>png_write_rows(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for PNG Reference library specified in <xref linkend="tbl-libpng12-png-r-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<TABLE id="tbl-libpng12-png-r-data">
<TITLE>libpng12 - PNG Reference library Data Interfaces</TITLE>
<TGROUP COLS=3>
<TBODY>
<ROW>
<ENTRY><indexterm><primary>png_libpng_ver</primary></indexterm>png_libpng_ver(PNG12_0) <LINK LINKEND="REFSTD.libpng12.1">[LSB]</LINK></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>
</SECT2>
</SECT1>
<SECT1 ID=libpng12-ddefs>
<TITLE>Data Definitions for libpng12</TITLE>
<PARA>
This section defines global identifiers and their values that are associated
with interfaces contained in libpng12.
These definitions are organized into groups that
correspond to system headers. This convention is used as a
convenience for the reader, and does not imply the existence
of these headers, or their content.
Where an interface is defined as requiring a particular system header file
all of the data definitions for that system header file presented here shall be in effect.
</PARA>
<PARA>
This section gives data definitions to promote binary application
portability, not to repeat source interface definitions available
elsewhere. System providers and application developers should use this ABI
to supplement - not to replace - source interface definition specifications.
</PARA>
<PARA>
This specification uses the <xref linkend="std.ISOC99"> C Language as the reference programming language, and data definitions are specified in ISO C format. The C language is used here as a convenient notation. Using a C language description of these data objects does not preclude their use by other programming languages.</PARA>
<SECT2>
<TITLE>libpng12/png.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define FARDATA
#define PNGAPI
#define PNG_1_2_X
#define PNG_EASY_ACCESS_SUPPORTED
#define PNG_ERROR_NUMBERS_SUPPORTED
#define PNG_FIXED_POINT_SUPPORTED
#define PNG_FLOATING_POINT_SUPPORTED
#define PNG_FREE_ME_SUPPORTED
#define PNG_HANDLE_AS_UNKNOWN_SUPPORTED
#define PNG_IMPEXP
#define PNG_INFO_IMAGE_SUPPORTED
#define PNG_MMX_CODE_SUPPORTED
#define PNG_MNG_FEATURES_SUPPORTED
#define PNG_NO_READ_iTXt
#define PNG_NO_WRITE_iTXt
#define PNG_PROGRESSIVE_READ_SUPPORTED
#define PNG_READ_16_TO_8_SUPPORTED
#define PNG_READ_ANCILLARY_CHUNKS_SUPPORTED
#define PNG_READ_BACKGROUND_SUPPORTED
#define PNG_READ_BGR_SUPPORTED
#define PNG_READ_COMPOSITE_NODIV_SUPPORTED
#define PNG_READ_DITHER_SUPPORTED
#define PNG_READ_EMPTY_PLTE_SUPPORTED
#define PNG_READ_EXPAND_SUPPORTED
#define PNG_READ_FILLER_SUPPORTED
#define PNG_READ_GAMMA_SUPPORTED
#define PNG_READ_GRAY_TO_RGB_SUPPORTED
#define PNG_READ_INTERLACING_SUPPORTED
#define PNG_READ_INVERT_ALPHA_SUPPORTED
#define PNG_READ_INVERT_SUPPORTED
#define PNG_READ_OPT_PLTE_SUPPORTED
#define PNG_READ_PACKSWAP_SUPPORTED
#define PNG_READ_PACK_SUPPORTED
#define PNG_READ_RGB_TO_GRAY_SUPPORTED
#define PNG_READ_SHIFT_SUPPORTED
#define PNG_READ_STRIP_ALPHA_SUPPORTED
#define PNG_READ_SUPPORTED
#define PNG_READ_SWAP_ALPHA_SUPPORTED
#define PNG_READ_SWAP_SUPPORTED
#define PNG_READ_TEXT_SUPPORTED
#define PNG_READ_TRANSFORMS_SUPPORTED
#define PNG_READ_UNKNOWN_CHUNKS_SUPPORTED
#define PNG_READ_USER_CHUNKS_SUPPORTED
#define PNG_READ_USER_TRANSFORM_SUPPORTED
#define PNG_READ_bKGD_SUPPORTED
#define PNG_READ_cHRM_SUPPORTED
#define PNG_READ_gAMA_SUPPORTED
#define PNG_READ_hIST_SUPPORTED
#define PNG_READ_iCCP_SUPPORTED
#define PNG_READ_oFFs_SUPPORTED
#define PNG_READ_pCAL_SUPPORTED
#define PNG_READ_pHYs_SUPPORTED
#define PNG_READ_sBIT_SUPPORTED
#define PNG_READ_sCAL_SUPPORTED
#define PNG_READ_sPLT_SUPPORTED
#define PNG_READ_sRGB_SUPPORTED
#define PNG_READ_tEXt_SUPPORTED
#define PNG_READ_tIME_SUPPORTED
#define PNG_READ_tRNS_SUPPORTED
#define PNG_READ_zTXt_SUPPORTED
#define PNG_SETJMP_SUPPORTED
#define PNG_SET_USER_LIMITS_SUPPORTED
#define PNG_TEXT_SUPPORTED
#define PNG_TIME_RFC1123_SUPPORTED
#define PNG_UNKNOWN_CHUNKS_SUPPORTED
#define PNG_USER_CHUNKS_SUPPORTED
#define PNG_USER_MEM_SUPPORTED
#define PNG_USER_TRANSFORM_PTR_SUPPORTED
#define PNG_USE_GLOBAL_ARRAYS
#define PNG_WRITE_ANCILLARY_CHUNKS_SUPPORTED
#define PNG_WRITE_BGR_SUPPORTED
#define PNG_WRITE_EMPTY_PLTE_SUPPORTED
#define PNG_WRITE_FILLER_SUPPORTED
#define PNG_WRITE_FLUSH_SUPPORTED
#define PNG_WRITE_INTERLACING_SUPPORTED
#define PNG_WRITE_INVERT_ALPHA_SUPPORTED
#define PNG_WRITE_INVERT_SUPPORTED
#define PNG_WRITE_PACKSWAP_SUPPORTED
#define PNG_WRITE_PACK_SUPPORTED
#define PNG_WRITE_SHIFT_SUPPORTED
#define PNG_WRITE_SUPPORTED
#define PNG_WRITE_SWAP_ALPHA_SUPPORTED
#define PNG_WRITE_SWAP_SUPPORTED
#define PNG_WRITE_TEXT_SUPPORTED
#define PNG_WRITE_TRANSFORMS_SUPPORTED
#define PNG_WRITE_UNKNOWN_CHUNKS_SUPPORTED
#define PNG_WRITE_USER_TRANSFORM_SUPPORTED
#define PNG_WRITE_WEIGHTED_FILTER_SUPPORTED
#define PNG_WRITE_bKGD_SUPPORTED
#define PNG_WRITE_cHRM_SUPPORTED
#define PNG_WRITE_gAMA_SUPPORTED
#define PNG_WRITE_hIST_SUPPORTED
#define PNG_WRITE_iCCP_SUPPORTED
#define PNG_WRITE_oFFs_SUPPORTED
#define PNG_WRITE_pCAL_SUPPORTED
#define PNG_WRITE_pHYs_SUPPORTED
#define PNG_WRITE_sBIT_SUPPORTED
#define PNG_WRITE_sCAL_SUPPORTED
#define PNG_WRITE_sPLT_SUPPORTED
#define PNG_WRITE_sRGB_SUPPORTED
#define PNG_WRITE_tEXt_SUPPORTED
#define PNG_WRITE_tIME_SUPPORTED
#define PNG_WRITE_tRNS_SUPPORTED
#define PNG_WRITE_zTXt_SUPPORTED
#define PNG_bKGD_SUPPORTED
#define PNG_cHRM_SUPPORTED
#define PNG_gAMA_SUPPORTED
#define PNG_hIST_SUPPORTED
#define PNG_iCCP_SUPPORTED
#define PNG_oFFs_SUPPORTED
#define PNG_pCAL_SUPPORTED
#define PNG_pHYs_SUPPORTED
#define PNG_sBIT_SUPPORTED
#define PNG_sCAL_SUPPORTED
#define PNG_sPLT_SUPPORTED
#define PNG_sRGB_SUPPORTED
#define PNG_tEXt_SUPPORTED
#define PNG_tIME_SUPPORTED
#define PNG_tRNS_SUPPORTED
#define PNG_zTXt_SUPPORTED
#define PNG_MMX_READ_FLAGS	 \
	( PNG_ASM_FLAG_MMX_READ_COMBINE_ROW | PNG_ASM_FLAG_MMX_READ_INTERLACE \
	| PNG_ASM_FLAG_MMX_READ_FILTER_SUB | PNG_ASM_FLAG_MMX_READ_FILTER_UP | \
	PNG_ASM_FLAG_MMX_READ_FILTER_AVG | PNG_ASM_FLAG_MMX_READ_FILTER_PAETH \
	)
#define PNG_MMX_FLAGS	 \
	( PNG_ASM_FLAG_MMX_SUPPORT_COMPILED | PNG_ASM_FLAG_MMX_SUPPORT_IN_CPU \
	| PNG_MMX_READ_FLAGS | PNG_MMX_WRITE_FLAGS )
#define PNG_ALL_FILTERS	 \
	(PNG_FILTER_NONE | PNG_FILTER_SUB | PNG_FILTER_UP | PNG_FILTER_AVG | \
	PNG_FILTER_PAETH)
#define png_info_init(info_ptr)	 \
	png_info_init_3(&amp;info_ptr, png_sizeof(png_info));
#define png_composite(composite,fg,alpha,bg)	 \
	{ png_uint_16 temp = (png_uint_16)((png_uint_16)(fg) * \
	(png_uint_16)(alpha) + (png_uint_16)(bg)*(png_uint_16)(255 - \
	(png_uint_16)(alpha)) + (png_uint_16)128); (composite) = \
	(png_byte)((temp + (temp >> 8)) >> 8); }
#define png_composite_16(composite,fg,alpha,bg)	 \
	{ png_uint_32 temp = (png_uint_32)((png_uint_32)(fg) * \
	(png_uint_32)(alpha) + (png_uint_32)(bg)*(png_uint_32)(65535L - \
	(png_uint_32)(alpha)) + (png_uint_32)32768L); (composite) = \
	(png_uint_16)((temp + (temp >> 16)) >> 16); }
#define PNG_HEADER_VERSION_STRING	" libpng version 1.2.8 - December 3, 2004 (header)\n"
#define PNG_LIBPNG_VER_STRING	"1.2.8"
#define PNG_MMX_WRITE_FLAGS	( 0 )
#define png_jmpbuf(png_ptr)	((png_ptr)->jmpbuf)
#define PNG_SIZE_MAX	((png_size_t)(-1))
#define PNG_UINT_32_MAX	((png_uint_32)(-1))
#define PNG_UINT_31_MAX	((png_uint_32)0x7fffffffL)
#define int_p_NULL	(int *)NULL
#define png_bytep_NULL	(png_bytep)NULL
#define png_bytepp_NULL	(png_bytepp)NULL
#define PNG_COLOR_TYPE_GRAY_ALPHA	(PNG_COLOR_MASK_ALPHA)
#define PNG_COLOR_TYPE_RGB_ALPHA	(PNG_COLOR_MASK_COLOR | PNG_COLOR_MASK_ALPHA)
#define PNG_COLOR_TYPE_PALETTE	(PNG_COLOR_MASK_COLOR | PNG_COLOR_MASK_PALETTE)
#define PNG_COLOR_TYPE_RGB	(PNG_COLOR_MASK_COLOR)
#define png_doublep_NULL	(png_doublep)NULL
#define png_error_ptr_NULL	(png_error_ptr)NULL
#define png_flush_ptr_NULL	(png_flush_ptr)NULL
#define png_infopp_NULL	(png_infopp)NULL
#define png_rw_ptr_NULL	(png_rw_ptr)NULL
#define png_structp_NULL	(png_structp)NULL
#define png_uint_16p_NULL	(png_uint_16p)NULL
#define png_voidp_NULL	(png_voidp)NULL
#define CVT_PTR(ptr)	(ptr)
#define CVT_PTR_NOCHECK(ptr)	(ptr)
#define PNG_TEXT_COMPRESSION_NONE	-1
#define PNG_TEXT_COMPRESSION_zTXt_WR	-2
#define PNG_TEXT_COMPRESSION_NONE_WR	-3
#define PNG_BACKGROUND_GAMMA_UNKNOWN	0
#define PNG_COLOR_TYPE_GRAY	0
#define PNG_COMPRESSION_TYPE_BASE	0
#define PNG_CRC_DEFAULT	0
#define PNG_EQUATION_LINEAR	0
#define PNG_FILLER_BEFORE	0
#define PNG_FILTER_HEURISTIC_DEFAULT	0
#define PNG_FILTER_TYPE_BASE	0
#define PNG_FILTER_VALUE_NONE	0
#define PNG_HANDLE_CHUNK_AS_DEFAULT	0
#define PNG_INTERLACE_NONE	0
#define PNG_LIBPNG_VER_BUILD	0
#define PNG_LIBPNG_VER_SONUM	0
#define PNG_OFFSET_PIXEL	0
#define PNG_RESOLUTION_UNKNOWN	0
#define PNG_SCALE_UNKNOWN	0
#define PNG_TEXT_COMPRESSION_zTXt	0
#define PNG_sRGB_INTENT_PERCEPTUAL	0
#define PNG_NO_FILTERS	0x00
#define PNG_TRANSFORM_IDENTITY	0x0000
#define PNG_INFO_gAMA	0x0001
#define PNG_TRANSFORM_STRIP_16	0x0001
#define PNG_INFO_sBIT	0x0002
#define PNG_TRANSFORM_STRIP_ALPHA	0x0002
#define PNG_INFO_cHRM	0x0004
#define PNG_TRANSFORM_PACKING	0x0004
#define PNG_FREE_HIST	0x0008
#define PNG_INFO_PLTE	0x0008
#define PNG_TRANSFORM_PACKSWAP	0x0008
#define PNG_FREE_ICCP	0x0010
#define PNG_INFO_tRNS	0x0010
#define PNG_TRANSFORM_EXPAND	0x0010
#define PNG_FREE_SPLT	0x0020
#define PNG_INFO_bKGD	0x0020
#define PNG_TRANSFORM_INVERT_MONO	0x0020
#define PNG_FREE_ROWS	0x0040
#define PNG_INFO_hIST	0x0040
#define PNG_TRANSFORM_SHIFT	0x0040
#define PNG_FREE_PCAL	0x0080
#define PNG_INFO_pHYs	0x0080
#define PNG_TRANSFORM_BGR	0x0080
#define PNG_ASM_FLAG_MMX_SUPPORT_COMPILED	0x01
#define PNG_FLAG_MNG_EMPTY_PLTE	0x01
#define PNG_FREE_SCAL	0x0100
#define PNG_INFO_oFFs	0x0100
#define PNG_TRANSFORM_SWAP_ALPHA	0x0100
#define PNG_ASM_FLAG_MMX_SUPPORT_IN_CPU	0x02
#define PNG_FREE_UNKN	0x0200
#define PNG_INFO_tIME	0x0200
#define PNG_TRANSFORM_SWAP_ENDIAN	0x0200
#define PNG_ASM_FLAG_MMX_READ_COMBINE_ROW	0x04
#define PNG_FLAG_MNG_FILTER_64	0x04
#define PNG_FREE_LIST	0x0400
#define PNG_INFO_pCAL	0x0400
#define PNG_TRANSFORM_INVERT_ALPHA	0x0400
#define PNG_ALL_MNG_FEATURES	0x05
#define PNG_ASM_FLAG_MMX_READ_INTERLACE	0x08
#define PNG_FILTER_NONE	0x08
#define PNG_INFO_sRGB	0x0800
#define PNG_TRANSFORM_STRIP_FILLER	0x0800
#define PNG_ASM_FLAG_MMX_READ_FILTER_SUB	0x10
#define PNG_FILTER_SUB	0x10
#define PNG_FREE_PLTE	0x1000
#define PNG_INFO_iCCP	0x1000
#define PNG_ASM_FLAG_MMX_READ_FILTER_UP	0x20
#define PNG_FILTER_UP	0x20
#define PNG_FREE_TRNS	0x2000
#define PNG_INFO_sPLT	0x2000
#define PNG_ASM_FLAG_MMX_READ_FILTER_AVG	0x40
#define PNG_FILTER_AVG	0x40
#define PNG_FREE_TEXT	0x4000
#define PNG_INFO_sCAL	0x4000
#define PNG_FREE_MUL	0x4220
#define PNG_FREE_ALL	0x7fff
#define PNG_ASM_FLAG_MMX_READ_FILTER_PAETH	0x80
#define PNG_FILTER_PAETH	0x80
#define PNG_ASM_FLAGS_INITIALIZED	0x80000000
#define PNG_INFO_IDAT	0x8000L
#define PNG_BACKGROUND_GAMMA_SCREEN	1
#define PNG_COLOR_MASK_PALETTE	1
#define PNG_CRC_ERROR_QUIT	1
#define PNG_DESTROY_WILL_FREE_DATA	1
#define PNG_EQUATION_BASE_E	1
#define PNG_FILLER_AFTER	1
#define PNG_FILTER_HEURISTIC_UNWEIGHTED	1
#define PNG_FILTER_VALUE_SUB	1
#define PNG_HANDLE_CHUNK_NEVER	1
#define PNG_INTERLACE_ADAM7	1
#define PNG_ITXT_COMPRESSION_NONE	1
#define PNG_LIBPNG_BUILD_ALPHA	1
#define PNG_LIBPNG_VER_MAJOR	1
#define PNG_OFFSET_MICROMETER	1
#define PNG_RESOLUTION_METER	1
#define PNG_SCALE_METER	1
#define PNG_SELECT_READ	1
#define PNG_SET_WILL_FREE_DATA	1
#define PNG_sRGB_INTENT_RELATIVE	1
#define PNG_USER_HEIGHT_MAX	1000000L
#define PNG_USER_WIDTH_MAX	1000000L
#define PNG_LIBPNG_VER	10208
#define PNG_LIBPNG_VER_DLLNUM	13
#define PNG_LIBPNG_BUILD_PRIVATE	16
#define PNG_BACKGROUND_GAMMA_FILE	2
#define PNG_COLOR_MASK_COLOR	2
#define PNG_CRC_WARN_DISCARD	2
#define PNG_EQUATION_ARBITRARY	2
#define PNG_FILTER_HEURISTIC_WEIGHTED	2
#define PNG_FILTER_VALUE_UP	2
#define PNG_HANDLE_CHUNK_IF_SAFE	2
#define PNG_INTERLACE_LAST	2
#define PNG_ITXT_COMPRESSION_zTXt	2
#define PNG_LIBPNG_BUILD_BETA	2
#define PNG_LIBPNG_VER_MINOR	2
#define PNG_OFFSET_LAST	2
#define PNG_RESOLUTION_LAST	2
#define PNG_SCALE_RADIAN	2
#define PNG_SELECT_WRITE	2
#define PNG_USER_WILL_FREE_DATA	2
#define PNG_sRGB_INTENT_SATURATION	2
#define PNG_MAX_PALETTE_LENGTH	256
#define PNG_BACKGROUND_GAMMA_UNIQUE	3
#define PNG_CRC_WARN_USE	3
#define PNG_EQUATION_HYPERBOLIC	3
#define PNG_FILTER_HEURISTIC_LAST	3
#define PNG_FILTER_VALUE_AVG	3
#define PNG_HANDLE_CHUNK_ALWAYS	3
#define PNG_LIBPNG_BUILD_RC	3
#define PNG_SCALE_LAST	3
#define PNG_TEXT_COMPRESSION_LAST	3
#define PNG_sRGB_INTENT_ABSOLUTE	3
#define PNG_LIBPNG_BUILD_SPECIAL	32
#define PNG_COLOR_MASK_ALPHA	4
#define PNG_CRC_QUIET_USE	4
#define PNG_EQUATION_LAST	4
#define PNG_FILTER_VALUE_PAETH	4
#define PNG_LIBPNG_BUILD_STABLE	4
#define PNG_sRGB_INTENT_LAST	4
#define PNG_CRC_NO_CHANGE	5
#define PNG_FILTER_VALUE_LAST	5
#define PNG_INTRAPIXEL_DIFFERENCING	64
#define PNG_LIBPNG_BUILD_RELEASE_STATUS_MASK	7
#define PNG_KEYWORD_MAX_LENGTH	79
#define PNG_LIBPNG_BUILD_PATCH	8
#define PNG_LIBPNG_VER_RELEASE	8
#define PNG_ZBUF_SIZE	8192
#define PNG_ABORT()	abort()
#define PNG_CONST	const
#define PNG_EXPORT_VAR(type)	extern PNG_IMPEXP type
#define png_memcmp	memcmp
#define png_memcpy	memcpy
#define png_memset	memset
#define PNG_COLOR_TYPE_GA	PNG_COLOR_TYPE_GRAY_ALPHA
#define PNG_COLOR_TYPE_RGBA	PNG_COLOR_TYPE_RGB_ALPHA
#define PNG_COMPRESSION_TYPE_DEFAULT	PNG_COMPRESSION_TYPE_BASE
#define PNG_FILTER_TYPE_DEFAULT	PNG_FILTER_TYPE_BASE
#define PNG_EXPORT(type,symbol)	PNG_IMPEXP type PNGAPI symbol
#define PNG_LIBPNG_BUILD_TYPE	PNG_LIBPNG_BUILD_BASE_TYPE
#define PNG_LIBPNG_BUILD_BASE_TYPE	PNG_LIBPNG_BUILD_STABLE
#define PNG_MAX_UINT	PNG_UINT_31_MAX
#define png_sizeof(x)	sizeof (x)
#define png_strcpy	strcpy
#define png_strlen	strlen
#define png_strncpy	strncpy

typedef png_unknown_chunk **png_unknown_chunkpp;
typedef struct png_sPLT_entry_struct {
    png_uint_16 red;
    png_uint_16 green;
    png_uint_16 blue;
    png_uint_16 alpha;
    png_uint_16 frequency;
} png_sPLT_entry;
typedef png_sPLT_entry *png_sPLT_entryp;
typedef png_sPLT_entry **png_sPLT_entrypp;
typedef struct png_sPLT_struct {
    png_charp name;
    png_byte depth;
    png_sPLT_entryp entries;
    png_int_32 nentries;
} png_sPLT_t;
typedef png_sPLT_t *png_sPLT_tp;
typedef png_sPLT_t **png_sPLT_tpp;
typedef struct png_unknown_chunk_t {
    png_byte name[5];
    png_byte *data;
    png_size_t size;
    png_byte location;
} png_unknown_chunk;
typedef png_unknown_chunk *png_unknown_chunkp;
typedef struct png_struct_def {
    struct __jmp_buf_tag jmpbuf[1];
} png_struct;
typedef png_struct *png_structp;
typedef struct png_info_struct {
    png_uint_32 width;
    png_uint_32 height;
    png_uint_32 valid;
    png_uint_32 rowbytes;
    png_colorp palette;
    png_uint_16 num_palette;
    png_uint_16 num_trans;
    png_byte bit_depth;
    png_byte color_type;
    png_byte compression_type;
    png_byte filter_type;
    png_byte interlace_type;
    png_byte channels;
    png_byte pixel_depth;
    png_byte spare_byte;
    png_byte signature[8];
    float gamma;
    png_byte srgb_intent;
    int num_text;
    int max_text;
    png_textp text;
    png_time mod_time;
    png_color_8 sig_bit;
    png_bytep trans;
    png_color_16 trans_values;
    png_color_16 background;
    png_int_32 x_offset;
    png_int_32 y_offset;
    png_byte offset_unit_type;
    png_uint_32 x_pixels_per_unit;
    png_uint_32 y_pixels_per_unit;
    png_byte phys_unit_type;
    png_uint_16p hist;
    float x_white;
    float y_white;
    float x_red;
    float y_red;
    float x_green;
    float y_green;
    float x_blue;
    float y_blue;
    png_charp pcal_purpose;
    png_int_32 pcal_X0;
    png_int_32 pcal_X1;
    png_charp pcal_units;
    png_charpp pcal_params;
    png_byte pcal_type;
    png_byte pcal_nparams;
    png_uint_32 free_me;
    png_unknown_chunkp unknown_chunks;
    png_size_t unknown_chunks_num;
    png_charp iccp_name;
    png_charp iccp_profile;
    png_uint_32 iccp_proflen;
    png_byte iccp_compression;
    png_sPLT_tp splt_palettes;
    png_uint_32 splt_palettes_num;
    png_byte scal_unit;
    double scal_pixel_width;
    double scal_pixel_height;
    png_charp scal_s_width;
    png_charp scal_s_height;
    png_bytepp row_pointers;
    png_fixed_point int_gamma;
    png_fixed_point int_x_white;
    png_fixed_point int_y_white;
    png_fixed_point int_x_red;
    png_fixed_point int_y_red;
    png_fixed_point int_x_green;
    png_fixed_point int_y_green;
    png_fixed_point int_x_blue;
    png_fixed_point int_y_blue;
} png_info;
typedef png_info *png_infop;
typedef void *png_voidp;
typedef void (*png_progressive_info_ptr) (png_structp, png_infop);
typedef unsigned char png_byte;
typedef png_byte *png_bytep;
typedef unsigned long int png_uint_32;
typedef void (*png_progressive_row_ptr) (png_structp, png_bytep,
					 png_uint_32, int);
typedef void (*png_progressive_end_ptr) (png_structp, png_infop);
typedef struct png_color_8_struct {
    png_byte red;
    png_byte green;
    png_byte blue;
    png_byte gray;
    png_byte alpha;
} png_color_8;
typedef png_color_8 *png_color_8p;
typedef long int png_int_32;
typedef char *png_charp;
typedef size_t png_size_t;
typedef struct png_text_struct {
    int compression;
    png_charp key;
    png_charp text;
    png_size_t text_length;
} png_text;
typedef png_text *png_textp;
typedef png_byte **png_bytepp;
typedef unsigned short png_uint_16;
typedef struct png_color_16_struct {
    png_byte index;
    png_uint_16 red;
    png_uint_16 green;
    png_uint_16 blue;
    png_uint_16 gray;
} png_color_16;
typedef png_color_16 *png_color_16p;
typedef struct png_color_struct {
    png_byte red;
    png_byte green;
    png_byte blue;
} png_color;
typedef png_color *png_colorp;
typedef const char *png_const_charp;
typedef void (*png_error_ptr) (png_structp, png_const_charp);
typedef void (*png_rw_ptr) (png_structp, png_bytep, png_size_t);
typedef struct png_time_struct {
    png_uint_16 year;
    png_byte month;
    png_byte day;
    png_byte hour;
    png_byte minute;
    png_byte second;
} png_time;
typedef png_time *png_timep;
typedef png_uint_16 *png_uint_16p;
typedef void (*png_flush_ptr) (png_structp);
typedef char **png_charpp;
typedef png_struct **png_structpp;
typedef png_info **png_infopp;
typedef FILE *png_FILE_p;
typedef struct png_row_info_struct {
    png_uint_32 width;
    png_uint_32 rowbytes;
    png_byte color_type;
    png_byte bit_depth;
    png_byte channels;
    png_byte pixel_depth;
} png_row_info;
typedef png_row_info *png_row_infop;
typedef png_structp version_1_2_8;
typedef png_uint_32 *png_uint_32p;
typedef png_uint_16 **png_uint_16pp;
typedef png_int_32 png_fixed_point;
typedef double *png_doublep;
typedef charf *png_zcharp;
typedef png_fixed_point *png_fixed_point_p;
typedef png_int_32 *png_int_32p;
typedef z_stream *png_zstreamp;
typedef short png_int_16;
typedef png_int_16 *png_int_16p;
typedef png_int_16 **png_int_16pp;
typedef png_int_32 **png_int_32pp;
typedef png_uint_32 **png_uint_32pp;
typedef charf **png_zcharpp;
typedef char ***png_charppp;
typedef const char **png_const_charpp;
typedef double **png_doublepp;
typedef png_colorp *png_colorpp;
typedef png_color_16p *png_color_16pp;
typedef png_color_8p *png_color_8pp;
typedef png_fixed_point **png_fixed_point_pp;
typedef png_row_info **png_row_infopp;
typedef png_textp *png_textpp;
typedef png_timep *png_timepp;
typedef void (*png_user_transform_ptr) (png_structp, png_row_infop,
					png_bytep);
typedef void (*png_read_status_ptr) (png_structp, png_uint_32, int);
typedef void (*png_write_status_ptr) (png_structp, png_uint_32, int);
typedef int (*png_user_chunk_ptr) (png_structp, png_unknown_chunkp);
typedef png_voidp(*png_malloc_ptr) (png_structp, png_size_t);
typedef void (*png_free_ptr) (png_structp, png_voidp);
extern png_uint_32 png_access_version_number(void);
extern int png_check_sig(png_bytep sig, int num);
extern void png_convert_from_struct_tm(png_timep ptime, struct tm *ttime);
extern void png_convert_from_time_t(png_timep ptime, time_t ttime);
extern png_infop png_create_info_struct(png_structp png_ptr);
extern png_structp png_create_read_struct(png_const_charp user_png_ver,
					  png_voidp error_ptr,
					  png_error_ptr error_fn,
					  png_error_ptr warn_fn);
extern png_structp png_create_read_struct_2(png_const_charp user_png_ver,
					    png_voidp error_ptr,
					    png_error_ptr error_fn,
					    png_error_ptr warn_fn,
					    png_voidp mem_ptr,
					    png_malloc_ptr malloc_fn,
					    png_free_ptr free_fn);
extern png_structp png_create_write_struct(png_const_charp user_png_ver,
					   png_voidp error_ptr,
					   png_error_ptr error_fn,
					   png_error_ptr warn_fn);
extern png_structp png_create_write_struct_2(png_const_charp user_png_ver,
					     png_voidp error_ptr,
					     png_error_ptr error_fn,
					     png_error_ptr warn_fn,
					     png_voidp mem_ptr,
					     png_malloc_ptr malloc_fn,
					     png_free_ptr free_fn);
extern void png_data_freer(png_structp png_ptr, png_infop info_ptr,
			   int freer, png_uint_32 mask);
extern void png_destroy_info_struct(png_structp png_ptr,
				    png_infopp info_ptr_ptr);
extern void png_destroy_read_struct(png_structpp png_ptr_ptr,
				    png_infopp info_ptr_ptr,
				    png_infopp end_info_ptr_ptr);
extern void png_destroy_write_struct(png_structpp png_ptr_ptr,
				     png_infopp info_ptr_ptr);
extern void png_error(png_structp png_ptr, png_const_charp error_message);
extern void png_free(png_structp png_ptr, png_voidp ptr);
extern void png_free_data(png_structp png_ptr, png_infop info_ptr,
			  png_uint_32 free_me, int num);
extern png_uint_32 png_get_IHDR(png_structp png_ptr, png_infop info_ptr,
				png_uint_32 * width, png_uint_32 * height,
				int *bit_depth, int *color_type,
				int *interlace_method,
				int *compression_method,
				int *filter_method);
extern png_uint_32 png_get_PLTE(png_structp png_ptr, png_infop info_ptr,
				png_colorp * palette, int *num_palette);
extern png_uint_32 png_get_bKGD(png_structp png_ptr, png_infop info_ptr,
				png_color_16p * background);
extern png_byte png_get_bit_depth(png_structp png_ptr, png_infop info_ptr);
extern png_uint_32 png_get_cHRM(png_structp png_ptr, png_infop info_ptr,
				double *white_x, double *white_y,
				double *red_x, double *red_y,
				double *green_x, double *green_y,
				double *blue_x, double *blue_y);
extern png_byte png_get_channels(png_structp png_ptr, png_infop info_ptr);
extern png_byte png_get_color_type(png_structp png_ptr,
				   png_infop info_ptr);
extern png_voidp png_get_error_ptr(png_structp png_ptr);
extern png_uint_32 png_get_gAMA(png_structp png_ptr, png_infop info_ptr,
				double *file_gamma);
extern png_uint_32 png_get_hIST(png_structp png_ptr, png_infop info_ptr,
				png_uint_16p * hist);
extern png_charp png_get_header_ver(png_structp png_ptr);
extern png_uint_32 png_get_iCCP(png_structp png_ptr, png_infop info_ptr,
				png_charpp name, int *compression_type,
				png_charpp profile, png_uint_32 * proflen);
extern png_uint_32 png_get_image_height(png_structp png_ptr,
					png_infop info_ptr);
extern png_uint_32 png_get_image_width(png_structp png_ptr,
				       png_infop info_ptr);
extern png_byte png_get_interlace_type(png_structp png_ptr,
				       png_infop info_ptr);
extern png_voidp png_get_io_ptr(png_structp png_ptr);
extern png_charp png_get_libpng_ver(png_structp png_ptr);
extern png_uint_32 png_get_oFFs(png_structp png_ptr, png_infop info_ptr,
				png_int_32 * offset_x,
				png_int_32 * offset_y, int *unit_type);
extern png_uint_32 png_get_pHYs(png_structp png_ptr, png_infop info_ptr,
				png_uint_32 * res_x, png_uint_32 * res_y,
				int *unit_type);
extern png_voidp png_get_progressive_ptr(png_structp png_ptr);
extern png_uint_32 png_get_rowbytes(png_structp png_ptr,
				    png_infop info_ptr);
extern png_bytepp png_get_rows(png_structp png_ptr, png_infop info_ptr);
extern png_uint_32 png_get_sBIT(png_structp png_ptr, png_infop info_ptr,
				png_color_8p * sig_bit);
extern png_uint_32 png_get_sRGB(png_structp png_ptr, png_infop info_ptr,
				int *intent);
extern png_uint_32 png_get_tIME(png_structp png_ptr, png_infop info_ptr,
				png_timep * mod_time);
extern png_uint_32 png_get_tRNS(png_structp png_ptr, png_infop info_ptr,
				png_bytep * trans, int *num_trans,
				png_color_16p * trans_values);
extern png_uint_32 png_get_text(png_structp png_ptr, png_infop info_ptr,
				png_textp * text_ptr, int *num_text);
extern png_uint_32 png_get_unknown_chunks(png_structp png_ptr,
					  png_infop info_ptr,
					  png_unknown_chunkpp entries);
extern png_voidp png_get_user_chunk_ptr(png_structp png_ptr);
extern png_uint_32 png_get_valid(png_structp png_ptr, png_infop info_ptr,
				 png_uint_32 flag);
extern png_int_32 png_get_x_offset_pixels(png_structp png_ptr,
					  png_infop info_ptr);
extern png_uint_32 png_get_x_pixels_per_meter(png_structp png_ptr,
					      png_infop info_ptr);
extern png_int_32 png_get_y_offset_pixels(png_structp png_ptr,
					  png_infop info_ptr);
extern png_uint_32 png_get_y_pixels_per_meter(png_structp png_ptr,
					      png_infop info_ptr);
extern void png_info_init_3(png_infopp info_ptr,
			    png_size_t png_info_struct_size);
extern void png_init_io(png_structp png_ptr, png_FILE_p fp);
extern const char png_libpng_ver[];
extern png_voidp png_malloc(png_structp png_ptr, png_uint_32 size);
extern png_uint_32 png_permit_mng_features(png_structp png_ptr,
					   png_uint_32
					   mng_features_permitted);
extern void png_process_data(png_structp png_ptr, png_infop info_ptr,
			     png_bytep buffer, png_size_t buffer_size);
extern void png_progressive_combine_row(png_structp png_ptr,
					png_bytep old_row,
					png_bytep new_row);
extern void png_read_end(png_structp png_ptr, png_infop info_ptr);
extern void png_read_image(png_structp png_ptr, png_bytepp image);
extern void png_read_info(png_structp png_ptr, png_infop info_ptr);
extern void png_read_png(png_structp png_ptr, png_infop info_ptr,
			 int transforms, voidp params);
extern void png_read_row(png_structp png_ptr, png_bytep row,
			 png_bytep display_row);
extern void png_read_rows(png_structp png_ptr, png_bytepp row,
			  png_bytepp display_row, png_uint_32 num_rows);
extern void png_read_update_info(png_structp png_ptr, png_infop info_ptr);
extern void png_set_IHDR(png_structp png_ptr, png_infop info_ptr,
			 png_uint_32 width, png_uint_32 height,
			 int bit_depth, int color_type,
			 int interlace_method, int compression_method,
			 int filter_method);
extern void png_set_PLTE(png_structp png_ptr, png_infop info_ptr,
			 png_colorp palette, int num_palette);
extern void png_set_bKGD(png_structp png_ptr, png_infop info_ptr,
			 png_color_16p background);
extern void png_set_background(png_structp png_ptr,
			       png_color_16p background_color,
			       int background_gamma_code, int need_expand,
			       double background_gamma);
extern void png_set_bgr(png_structp png_ptr);
extern void png_set_cHRM(png_structp png_ptr, png_infop info_ptr,
			 double white_x, double white_y, double red_x,
			 double red_y, double green_x, double green_y,
			 double blue_x, double blue_y);
extern void png_set_compression_buffer_size(png_structp png_ptr,
					    png_uint_32 size);
extern void png_set_compression_level(png_structp png_ptr, int level);
extern void png_set_compression_mem_level(png_structp png_ptr,
					  int mem_level);
extern void png_set_compression_method(png_structp png_ptr, int method);
extern void png_set_compression_strategy(png_structp png_ptr,
					 int strategy);
extern void png_set_compression_window_bits(png_structp png_ptr,
					    int window_bits);
extern void png_set_dither(png_structp png_ptr, png_colorp palette,
			   int num_palette, int maximum_colors,
			   png_uint_16p histogram, int full_dither);
extern void png_set_error_fn(png_structp png_ptr, png_voidp error_ptr,
			     png_error_ptr error_fn,
			     png_error_ptr warning_fn);
extern void png_set_expand(png_structp png_ptr);
extern void png_set_filler(png_structp png_ptr, png_uint_32 filler,
			   int flags);
extern void png_set_filter(png_structp png_ptr, int method, int filters);
extern void png_set_gAMA(png_structp png_ptr, png_infop info_ptr,
			 double file_gamma);
extern void png_set_gamma(png_structp png_ptr, double screen_gamma,
			  double default_file_gamma);
extern void png_set_gray_1_2_4_to_8(png_structp png_ptr);
extern void png_set_gray_to_rgb(png_structp png_ptr);
extern void png_set_hIST(png_structp png_ptr, png_infop info_ptr,
			 png_uint_16p hist);
extern void png_set_iCCP(png_structp png_ptr, png_infop info_ptr,
			 png_charp name, int compression_type,
			 png_charp profile, png_uint_32 proflen);
extern int png_set_interlace_handling(png_structp png_ptr);
extern void png_set_invert_alpha(png_structp png_ptr);
extern void png_set_invert_mono(png_structp png_ptr);
extern void png_set_keep_unknown_chunks(png_structp png_ptr, int keep,
					png_bytep chunk_list,
					int num_chunks);
extern void png_set_mem_fn(png_structp png_ptr, png_voidp mem_ptr,
			   png_malloc_ptr malloc_fn, png_free_ptr free_fn);
extern void png_set_oFFs(png_structp png_ptr, png_infop info_ptr,
			 png_int_32 offset_x, png_int_32 offset_y,
			 int unit_type);
extern void png_set_pHYs(png_structp png_ptr, png_infop info_ptr,
			 png_uint_32 res_x, png_uint_32 res_y,
			 int unit_type);
extern void png_set_packing(png_structp png_ptr);
extern void png_set_packswap(png_structp png_ptr);
extern void png_set_palette_to_rgb(png_structp png_ptr);
extern void png_set_progressive_read_fn(png_structp png_ptr,
					png_voidp progressive_ptr,
					png_progressive_info_ptr info_fn,
					png_progressive_row_ptr row_fn,
					png_progressive_end_ptr end_fn);
extern void png_set_read_fn(png_structp png_ptr, png_voidp io_ptr,
			    png_rw_ptr read_data_fn);
extern void png_set_read_user_chunk_fn(png_structp png_ptr,
				       png_voidp user_chunk_ptr,
				       png_user_chunk_ptr
				       read_user_chunk_fn);
extern void png_set_read_user_transform_fn(png_structp png_ptr,
					   png_user_transform_ptr
					   read_user_transform_fn);
extern void png_set_rgb_to_gray(png_structp png_ptr, int error_action,
				double red, double green);
extern void png_set_rows(png_structp png_ptr, png_infop info_ptr,
			 png_bytepp row_pointers);
extern void png_set_sBIT(png_structp png_ptr, png_infop info_ptr,
			 png_color_8p sig_bit);
extern void png_set_sRGB(png_structp png_ptr, png_infop info_ptr,
			 int intent);
extern void png_set_sRGB_gAMA_and_cHRM(png_structp png_ptr,
				       png_infop info_ptr, int intent);
extern void png_set_shift(png_structp png_ptr, png_color_8p true_bits);
extern void png_set_sig_bytes(png_structp png_ptr, int num_bytes);
extern void png_set_strip_16(png_structp png_ptr);
extern void png_set_strip_alpha(png_structp png_ptr);
extern void png_set_swap(png_structp png_ptr);
extern void png_set_swap_alpha(png_structp png_ptr);
extern void png_set_tIME(png_structp png_ptr, png_infop info_ptr,
			 png_timep mod_time);
extern void png_set_tRNS(png_structp png_ptr, png_infop info_ptr,
			 png_bytep trans, int num_trans,
			 png_color_16p trans_values);
extern void png_set_tRNS_to_alpha(png_structp png_ptr);
extern void png_set_text(png_structp png_ptr, png_infop info_ptr,
			 png_textp text_ptr, int num_text);
extern void png_set_unknown_chunk_location(png_structp png_ptr,
					   png_infop info_ptr, int chunk,
					   int location);
extern void png_set_unknown_chunks(png_structp png_ptr, png_infop info_ptr,
				   png_unknown_chunkp unknowns,
				   int num_unknowns);
extern void png_set_write_fn(png_structp png_ptr, png_voidp io_ptr,
			     png_rw_ptr write_data_fn,
			     png_flush_ptr output_flush_fn);
extern void png_set_write_status_fn(png_structp png_ptr,
				    png_write_status_ptr write_row_fn);
extern void png_set_write_user_transform_fn(png_structp png_ptr,
					    png_user_transform_ptr
					    write_user_transform_fn);
extern int png_sig_cmp(png_bytep sig, png_size_t start,
		       png_size_t num_to_check);
extern void png_start_read_image(png_structp png_ptr);
extern void png_warning(png_structp png_ptr,
			png_const_charp warning_message);
extern void png_write_chunk(png_structp png_ptr, png_bytep chunk_name,
			    png_bytep data, png_size_t length);
extern void png_write_end(png_structp png_ptr, png_infop info_ptr);
extern void png_write_flush(png_structp png_ptr);
extern void png_write_image(png_structp png_ptr, png_bytepp image);
extern void png_write_info(png_structp png_ptr, png_infop info_ptr);
extern void png_write_png(png_structp png_ptr, png_infop info_ptr,
			  int transforms, voidp params);
extern void png_write_row(png_structp png_ptr, png_bytep row);
extern void png_write_rows(png_structp png_ptr, png_bytepp row,
			   png_uint_32 num_rows);
</SCREEN>
</SECT2>
</SECT1>
<SECT1 ID=libpng12man>
<TITLE>Interface Definitions for libpng12</TITLE>
<PARA>
The interfaces defined on the following pages are included in libpng12 and are defined
by this specification.
Unless otherwise noted, these interfaces shall be included
in the source standard.
</PARA>
<PARA>
Other interfaces listed in <xref linkend="libpng12"> shall behave as described
in the referenced base document.
</PARA>
m4_sinclude(m4_ifdef('png_access_version_number','',png_access_version_number.sgml))
m4_define('png_access_version_number','1')
m4_sinclude(m4_ifdef('png_check_sig','',png_check_sig.sgml))
m4_define('png_check_sig','1')
m4_sinclude(m4_ifdef('png_convert_from_struct_tm','',png_convert_from_struct_tm.sgml))
m4_define('png_convert_from_struct_tm','1')
m4_sinclude(m4_ifdef('png_convert_from_time_t','',png_convert_from_time_t.sgml))
m4_define('png_convert_from_time_t','1')
m4_sinclude(m4_ifdef('png_create_info_struct','',png_create_info_struct.sgml))
m4_define('png_create_info_struct','1')
m4_sinclude(m4_ifdef('png_create_read_struct','',png_create_read_struct.sgml))
m4_define('png_create_read_struct','1')
m4_sinclude(m4_ifdef('png_create_read_struct_2','',png_create_read_struct_2.sgml))
m4_define('png_create_read_struct_2','1')
m4_sinclude(m4_ifdef('png_create_write_struct','',png_create_write_struct.sgml))
m4_define('png_create_write_struct','1')
m4_sinclude(m4_ifdef('png_create_write_struct_2','',png_create_write_struct_2.sgml))
m4_define('png_create_write_struct_2','1')
m4_sinclude(m4_ifdef('png_data_freer','',png_data_freer.sgml))
m4_define('png_data_freer','1')
m4_sinclude(m4_ifdef('png_destroy_info_struct','',png_destroy_info_struct.sgml))
m4_define('png_destroy_info_struct','1')
m4_sinclude(m4_ifdef('png_destroy_read_struct','',png_destroy_read_struct.sgml))
m4_define('png_destroy_read_struct','1')
m4_sinclude(m4_ifdef('png_destroy_write_struct','',png_destroy_write_struct.sgml))
m4_define('png_destroy_write_struct','1')
m4_sinclude(m4_ifdef('png_error','',png_error.sgml))
m4_define('png_error','1')
m4_sinclude(m4_ifdef('png_free','',png_free.sgml))
m4_define('png_free','1')
m4_sinclude(m4_ifdef('png_free_data','',png_free_data.sgml))
m4_define('png_free_data','1')
m4_sinclude(m4_ifdef('png_get_IHDR','',png_get_IHDR.sgml))
m4_define('png_get_IHDR','1')
m4_sinclude(m4_ifdef('png_get_PLTE','',png_get_PLTE.sgml))
m4_define('png_get_PLTE','1')
m4_sinclude(m4_ifdef('png_get_bKGD','',png_get_bKGD.sgml))
m4_define('png_get_bKGD','1')
m4_sinclude(m4_ifdef('png_get_bit_depth','',png_get_bit_depth.sgml))
m4_define('png_get_bit_depth','1')
m4_sinclude(m4_ifdef('png_get_cHRM','',png_get_cHRM.sgml))
m4_define('png_get_cHRM','1')
m4_sinclude(m4_ifdef('png_get_channels','',png_get_channels.sgml))
m4_define('png_get_channels','1')
m4_sinclude(m4_ifdef('png_get_color_type','',png_get_color_type.sgml))
m4_define('png_get_color_type','1')
m4_sinclude(m4_ifdef('png_get_error_ptr','',png_get_error_ptr.sgml))
m4_define('png_get_error_ptr','1')
m4_sinclude(m4_ifdef('png_get_gAMA','',png_get_gAMA.sgml))
m4_define('png_get_gAMA','1')
m4_sinclude(m4_ifdef('png_get_hIST','',png_get_hIST.sgml))
m4_define('png_get_hIST','1')
m4_sinclude(m4_ifdef('png_get_header_ver','',png_get_header_ver.sgml))
m4_define('png_get_header_ver','1')
m4_sinclude(m4_ifdef('png_get_iCCP','',png_get_iCCP.sgml))
m4_define('png_get_iCCP','1')
m4_sinclude(m4_ifdef('png_get_image_height','',png_get_image_height.sgml))
m4_define('png_get_image_height','1')
m4_sinclude(m4_ifdef('png_get_image_width','',png_get_image_width.sgml))
m4_define('png_get_image_width','1')
m4_sinclude(m4_ifdef('png_get_interlace_type','',png_get_interlace_type.sgml))
m4_define('png_get_interlace_type','1')
m4_sinclude(m4_ifdef('png_get_io_ptr','',png_get_io_ptr.sgml))
m4_define('png_get_io_ptr','1')
m4_sinclude(m4_ifdef('png_get_libpng_ver','',png_get_libpng_ver.sgml))
m4_define('png_get_libpng_ver','1')
m4_sinclude(m4_ifdef('png_get_oFFs','',png_get_oFFs.sgml))
m4_define('png_get_oFFs','1')
m4_sinclude(m4_ifdef('png_get_pHYs','',png_get_pHYs.sgml))
m4_define('png_get_pHYs','1')
m4_sinclude(m4_ifdef('png_get_progressive_ptr','',png_get_progressive_ptr.sgml))
m4_define('png_get_progressive_ptr','1')
m4_sinclude(m4_ifdef('png_get_rowbytes','',png_get_rowbytes.sgml))
m4_define('png_get_rowbytes','1')
m4_sinclude(m4_ifdef('png_get_rows','',png_get_rows.sgml))
m4_define('png_get_rows','1')
m4_sinclude(m4_ifdef('png_get_sBIT','',png_get_sBIT.sgml))
m4_define('png_get_sBIT','1')
m4_sinclude(m4_ifdef('png_get_sRGB','',png_get_sRGB.sgml))
m4_define('png_get_sRGB','1')
m4_sinclude(m4_ifdef('png_get_tIME','',png_get_tIME.sgml))
m4_define('png_get_tIME','1')
m4_sinclude(m4_ifdef('png_get_tRNS','',png_get_tRNS.sgml))
m4_define('png_get_tRNS','1')
m4_sinclude(m4_ifdef('png_get_text','',png_get_text.sgml))
m4_define('png_get_text','1')
m4_sinclude(m4_ifdef('png_get_unknown_chunks','',png_get_unknown_chunks.sgml))
m4_define('png_get_unknown_chunks','1')
m4_sinclude(m4_ifdef('png_get_user_chunk_ptr','',png_get_user_chunk_ptr.sgml))
m4_define('png_get_user_chunk_ptr','1')
m4_sinclude(m4_ifdef('png_get_valid','',png_get_valid.sgml))
m4_define('png_get_valid','1')
m4_sinclude(m4_ifdef('png_get_x_offset_pixels','',png_get_x_offset_pixels.sgml))
m4_define('png_get_x_offset_pixels','1')
m4_sinclude(m4_ifdef('png_get_x_pixels_per_meter','',png_get_x_pixels_per_meter.sgml))
m4_define('png_get_x_pixels_per_meter','1')
m4_sinclude(m4_ifdef('png_get_y_offset_pixels','',png_get_y_offset_pixels.sgml))
m4_define('png_get_y_offset_pixels','1')
m4_sinclude(m4_ifdef('png_get_y_pixels_per_meter','',png_get_y_pixels_per_meter.sgml))
m4_define('png_get_y_pixels_per_meter','1')
m4_sinclude(m4_ifdef('png_info_init_3','',png_info_init_3.sgml))
m4_define('png_info_init_3','1')
m4_sinclude(m4_ifdef('png_init_io','',png_init_io.sgml))
m4_define('png_init_io','1')
m4_sinclude(m4_ifdef('png_libpng_ver','',png_libpng_ver.sgml))
m4_define('png_libpng_ver','1')
m4_sinclude(m4_ifdef('png_malloc','',png_malloc.sgml))
m4_define('png_malloc','1')
m4_sinclude(m4_ifdef('png_permit_mng_features','',png_permit_mng_features.sgml))
m4_define('png_permit_mng_features','1')
m4_sinclude(m4_ifdef('png_process_data','',png_process_data.sgml))
m4_define('png_process_data','1')
m4_sinclude(m4_ifdef('png_progressive_combine_row','',png_progressive_combine_row.sgml))
m4_define('png_progressive_combine_row','1')
m4_sinclude(m4_ifdef('png_read_end','',png_read_end.sgml))
m4_define('png_read_end','1')
m4_sinclude(m4_ifdef('png_read_image','',png_read_image.sgml))
m4_define('png_read_image','1')
m4_sinclude(m4_ifdef('png_read_info','',png_read_info.sgml))
m4_define('png_read_info','1')
m4_sinclude(m4_ifdef('png_read_png','',png_read_png.sgml))
m4_define('png_read_png','1')
m4_sinclude(m4_ifdef('png_read_row','',png_read_row.sgml))
m4_define('png_read_row','1')
m4_sinclude(m4_ifdef('png_read_rows','',png_read_rows.sgml))
m4_define('png_read_rows','1')
m4_sinclude(m4_ifdef('png_read_update_info','',png_read_update_info.sgml))
m4_define('png_read_update_info','1')
m4_sinclude(m4_ifdef('png_set_IHDR','',png_set_IHDR.sgml))
m4_define('png_set_IHDR','1')
m4_sinclude(m4_ifdef('png_set_PLTE','',png_set_PLTE.sgml))
m4_define('png_set_PLTE','1')
m4_sinclude(m4_ifdef('png_set_bKGD','',png_set_bKGD.sgml))
m4_define('png_set_bKGD','1')
m4_sinclude(m4_ifdef('png_set_background','',png_set_background.sgml))
m4_define('png_set_background','1')
m4_sinclude(m4_ifdef('png_set_bgr','',png_set_bgr.sgml))
m4_define('png_set_bgr','1')
m4_sinclude(m4_ifdef('png_set_cHRM','',png_set_cHRM.sgml))
m4_define('png_set_cHRM','1')
m4_sinclude(m4_ifdef('png_set_compression_buffer_size','',png_set_compression_buffer_size.sgml))
m4_define('png_set_compression_buffer_size','1')
m4_sinclude(m4_ifdef('png_set_compression_level','',png_set_compression_level.sgml))
m4_define('png_set_compression_level','1')
m4_sinclude(m4_ifdef('png_set_compression_mem_level','',png_set_compression_mem_level.sgml))
m4_define('png_set_compression_mem_level','1')
m4_sinclude(m4_ifdef('png_set_compression_method','',png_set_compression_method.sgml))
m4_define('png_set_compression_method','1')
m4_sinclude(m4_ifdef('png_set_compression_strategy','',png_set_compression_strategy.sgml))
m4_define('png_set_compression_strategy','1')
m4_sinclude(m4_ifdef('png_set_compression_window_bits','',png_set_compression_window_bits.sgml))
m4_define('png_set_compression_window_bits','1')
m4_sinclude(m4_ifdef('png_set_dither','',png_set_dither.sgml))
m4_define('png_set_dither','1')
m4_sinclude(m4_ifdef('png_set_error_fn','',png_set_error_fn.sgml))
m4_define('png_set_error_fn','1')
m4_sinclude(m4_ifdef('png_set_expand','',png_set_expand.sgml))
m4_define('png_set_expand','1')
m4_sinclude(m4_ifdef('png_set_filler','',png_set_filler.sgml))
m4_define('png_set_filler','1')
m4_sinclude(m4_ifdef('png_set_filter','',png_set_filter.sgml))
m4_define('png_set_filter','1')
m4_sinclude(m4_ifdef('png_set_gAMA','',png_set_gAMA.sgml))
m4_define('png_set_gAMA','1')
m4_sinclude(m4_ifdef('png_set_gamma','',png_set_gamma.sgml))
m4_define('png_set_gamma','1')
m4_sinclude(m4_ifdef('png_set_gray_1_2_4_to_8','',png_set_gray_1_2_4_to_8.sgml))
m4_define('png_set_gray_1_2_4_to_8','1')
m4_sinclude(m4_ifdef('png_set_gray_to_rgb','',png_set_gray_to_rgb.sgml))
m4_define('png_set_gray_to_rgb','1')
m4_sinclude(m4_ifdef('png_set_hIST','',png_set_hIST.sgml))
m4_define('png_set_hIST','1')
m4_sinclude(m4_ifdef('png_set_iCCP','',png_set_iCCP.sgml))
m4_define('png_set_iCCP','1')
m4_sinclude(m4_ifdef('png_set_interlace_handling','',png_set_interlace_handling.sgml))
m4_define('png_set_interlace_handling','1')
m4_sinclude(m4_ifdef('png_set_invert_alpha','',png_set_invert_alpha.sgml))
m4_define('png_set_invert_alpha','1')
m4_sinclude(m4_ifdef('png_set_invert_mono','',png_set_invert_mono.sgml))
m4_define('png_set_invert_mono','1')
m4_sinclude(m4_ifdef('png_set_keep_unknown_chunks','',png_set_keep_unknown_chunks.sgml))
m4_define('png_set_keep_unknown_chunks','1')
m4_sinclude(m4_ifdef('png_set_mem_fn','',png_set_mem_fn.sgml))
m4_define('png_set_mem_fn','1')
m4_sinclude(m4_ifdef('png_set_oFFs','',png_set_oFFs.sgml))
m4_define('png_set_oFFs','1')
m4_sinclude(m4_ifdef('png_set_pHYs','',png_set_pHYs.sgml))
m4_define('png_set_pHYs','1')
m4_sinclude(m4_ifdef('png_set_packing','',png_set_packing.sgml))
m4_define('png_set_packing','1')
m4_sinclude(m4_ifdef('png_set_packswap','',png_set_packswap.sgml))
m4_define('png_set_packswap','1')
m4_sinclude(m4_ifdef('png_set_palette_to_rgb','',png_set_palette_to_rgb.sgml))
m4_define('png_set_palette_to_rgb','1')
m4_sinclude(m4_ifdef('png_set_progressive_read_fn','',png_set_progressive_read_fn.sgml))
m4_define('png_set_progressive_read_fn','1')
m4_sinclude(m4_ifdef('png_set_read_fn','',png_set_read_fn.sgml))
m4_define('png_set_read_fn','1')
m4_sinclude(m4_ifdef('png_set_read_user_chunk_fn','',png_set_read_user_chunk_fn.sgml))
m4_define('png_set_read_user_chunk_fn','1')
m4_sinclude(m4_ifdef('png_set_read_user_transform_fn','',png_set_read_user_transform_fn.sgml))
m4_define('png_set_read_user_transform_fn','1')
m4_sinclude(m4_ifdef('png_set_rgb_to_gray','',png_set_rgb_to_gray.sgml))
m4_define('png_set_rgb_to_gray','1')
m4_sinclude(m4_ifdef('png_set_rows','',png_set_rows.sgml))
m4_define('png_set_rows','1')
m4_sinclude(m4_ifdef('png_set_sBIT','',png_set_sBIT.sgml))
m4_define('png_set_sBIT','1')
m4_sinclude(m4_ifdef('png_set_sRGB','',png_set_sRGB.sgml))
m4_define('png_set_sRGB','1')
m4_sinclude(m4_ifdef('png_set_sRGB_gAMA_and_cHRM','',png_set_sRGB_gAMA_and_cHRM.sgml))
m4_define('png_set_sRGB_gAMA_and_cHRM','1')
m4_sinclude(m4_ifdef('png_set_shift','',png_set_shift.sgml))
m4_define('png_set_shift','1')
m4_sinclude(m4_ifdef('png_set_sig_bytes','',png_set_sig_bytes.sgml))
m4_define('png_set_sig_bytes','1')
m4_sinclude(m4_ifdef('png_set_strip_16','',png_set_strip_16.sgml))
m4_define('png_set_strip_16','1')
m4_sinclude(m4_ifdef('png_set_strip_alpha','',png_set_strip_alpha.sgml))
m4_define('png_set_strip_alpha','1')
m4_sinclude(m4_ifdef('png_set_swap','',png_set_swap.sgml))
m4_define('png_set_swap','1')
m4_sinclude(m4_ifdef('png_set_swap_alpha','',png_set_swap_alpha.sgml))
m4_define('png_set_swap_alpha','1')
m4_sinclude(m4_ifdef('png_set_tIME','',png_set_tIME.sgml))
m4_define('png_set_tIME','1')
m4_sinclude(m4_ifdef('png_set_tRNS','',png_set_tRNS.sgml))
m4_define('png_set_tRNS','1')
m4_sinclude(m4_ifdef('png_set_tRNS_to_alpha','',png_set_tRNS_to_alpha.sgml))
m4_define('png_set_tRNS_to_alpha','1')
m4_sinclude(m4_ifdef('png_set_text','',png_set_text.sgml))
m4_define('png_set_text','1')
m4_sinclude(m4_ifdef('png_set_unknown_chunk_location','',png_set_unknown_chunk_location.sgml))
m4_define('png_set_unknown_chunk_location','1')
m4_sinclude(m4_ifdef('png_set_unknown_chunks','',png_set_unknown_chunks.sgml))
m4_define('png_set_unknown_chunks','1')
m4_sinclude(m4_ifdef('png_set_write_fn','',png_set_write_fn.sgml))
m4_define('png_set_write_fn','1')
m4_sinclude(m4_ifdef('png_set_write_status_fn','',png_set_write_status_fn.sgml))
m4_define('png_set_write_status_fn','1')
m4_sinclude(m4_ifdef('png_set_write_user_transform_fn','',png_set_write_user_transform_fn.sgml))
m4_define('png_set_write_user_transform_fn','1')
m4_sinclude(m4_ifdef('png_sig_cmp','',png_sig_cmp.sgml))
m4_define('png_sig_cmp','1')
m4_sinclude(m4_ifdef('png_start_read_image','',png_start_read_image.sgml))
m4_define('png_start_read_image','1')
m4_sinclude(m4_ifdef('png_warning','',png_warning.sgml))
m4_define('png_warning','1')
m4_sinclude(m4_ifdef('png_write_chunk','',png_write_chunk.sgml))
m4_define('png_write_chunk','1')
m4_sinclude(m4_ifdef('png_write_end','',png_write_end.sgml))
m4_define('png_write_end','1')
m4_sinclude(m4_ifdef('png_write_flush','',png_write_flush.sgml))
m4_define('png_write_flush','1')
m4_sinclude(m4_ifdef('png_write_image','',png_write_image.sgml))
m4_define('png_write_image','1')
m4_sinclude(m4_ifdef('png_write_info','',png_write_info.sgml))
m4_define('png_write_info','1')
m4_sinclude(m4_ifdef('png_write_png','',png_write_png.sgml))
m4_define('png_write_png','1')
m4_sinclude(m4_ifdef('png_write_row','',png_write_row.sgml))
m4_define('png_write_row','1')
m4_sinclude(m4_ifdef('png_write_rows','',png_write_rows.sgml))
m4_define('png_write_rows','1')
</SECT1>
<!-- End of text generated from database -->
