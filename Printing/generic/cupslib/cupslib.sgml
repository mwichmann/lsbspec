<PART ID="toccupslib">
<TITLE>LSB Printing Libraries</TITLE>

<CHAPTER id=libcupslib>
<TITLE>Libraries</TITLE>

<!-- Start of generated text - do not edit! -->
<!-- generated from the LSB specification database by mklibspec -->
<SECT1 ID=libcups>
<TITLE>Interfaces for libcups</TITLE>
<PARA>
<XREF LINKEND="lib-libcups-def"> defines the library name and shared object name
for the libcups library
</PARA>
<TABLE id="lib-libcups-def">
<TITLE>libcups Definition</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Library:</ENTRY>
<ENTRY>libcups</ENTRY>
</ROW>
<ROW>
<ENTRY>SONAME:</ENTRY>
<ENTRY>libcups.so.2</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The behavior of the interfaces in this library is specified by the following specifications:<SIMPLELIST COLUMNS=1>
<MEMBER ID='REFSTD.libcups.1'>
[CUPS 1.2] <XREF LINKEND="std.CUPS.1.2">
</MEMBER>
<MEMBER ID='REFSTD.libcups.2'>
[LSB] <XREF LINKEND="std.LSB">
</MEMBER>
</SIMPLELIST>
</PARA>
<!-- debug: database interface name CUPS Convenience ABI -->
<SECT2>
<!--libgroup-->
<TITLE>CUPS Convenience ABI</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for CUPS Convenience ABI</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic functions
for CUPS Convenience ABI specified in <XREF linkend="tbl-libcups-cups-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<TABLE id="tbl-libcups-cups-ints">
<TITLE>libcups - CUPS Convenience ABI Function Interfaces</TITLE>
<TGROUP COLS=4>
<TBODY>
<ROW>
<ENTRY><indexterm><primary>cupsAddDest</primary></indexterm>cupsAddDest <LINK LINKEND="REFSTD.libcups.2">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>cupsAddOption</primary></indexterm>cupsAddOption <LINK LINKEND="REFSTD.libcups.2">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>cupsCancelJob</primary></indexterm>cupsCancelJob <LINK LINKEND="REFSTD.libcups.2">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>cupsDoAuthentication</primary></indexterm>cupsDoAuthentication <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>cupsDoFileRequest</primary></indexterm>cupsDoFileRequest <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
<ENTRY><indexterm><primary>cupsEncodeOptions</primary></indexterm>cupsEncodeOptions <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
<ENTRY><indexterm><primary>cupsEncryption</primary></indexterm>cupsEncryption <LINK LINKEND="REFSTD.libcups.2">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>cupsFreeDests</primary></indexterm>cupsFreeDests <LINK LINKEND="REFSTD.libcups.2">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>cupsFreeJobs</primary></indexterm>cupsFreeJobs <LINK LINKEND="REFSTD.libcups.2">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>cupsFreeOptions</primary></indexterm>cupsFreeOptions <LINK LINKEND="REFSTD.libcups.2">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>cupsGetDefault</primary></indexterm>cupsGetDefault <LINK LINKEND="REFSTD.libcups.2">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>cupsGetDefault2</primary></indexterm>cupsGetDefault2 <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>cupsGetDest</primary></indexterm>cupsGetDest <LINK LINKEND="REFSTD.libcups.2">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>cupsGetDests</primary></indexterm>cupsGetDests <LINK LINKEND="REFSTD.libcups.2">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>cupsGetDests2</primary></indexterm>cupsGetDests2 <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
<ENTRY><indexterm><primary>cupsGetFd</primary></indexterm>cupsGetFd <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>cupsGetFile</primary></indexterm>cupsGetFile <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
<ENTRY><indexterm><primary>cupsGetJobs</primary></indexterm>cupsGetJobs <LINK LINKEND="REFSTD.libcups.2">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>cupsGetJobs2</primary></indexterm>cupsGetJobs2 <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
<ENTRY><indexterm><primary>cupsGetOption</primary></indexterm>cupsGetOption <LINK LINKEND="REFSTD.libcups.2">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>cupsGetPPD</primary></indexterm>cupsGetPPD <LINK LINKEND="REFSTD.libcups.2">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>cupsGetPPD2</primary></indexterm>cupsGetPPD2 <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
<ENTRY><indexterm><primary>cupsGetPassword</primary></indexterm>cupsGetPassword <LINK LINKEND="REFSTD.libcups.2">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>cupsLangEncoding</primary></indexterm>cupsLangEncoding <LINK LINKEND="REFSTD.libcups.2">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>cupsLangFlush</primary></indexterm>cupsLangFlush <LINK LINKEND="REFSTD.libcups.2">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>cupsLangFree</primary></indexterm>cupsLangFree <LINK LINKEND="REFSTD.libcups.2">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>cupsLangGet</primary></indexterm>cupsLangGet <LINK LINKEND="REFSTD.libcups.2">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>cupsLastError</primary></indexterm>cupsLastError <LINK LINKEND="REFSTD.libcups.2">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>cupsMarkOptions</primary></indexterm>cupsMarkOptions <LINK LINKEND="REFSTD.libcups.2">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>cupsParseOptions</primary></indexterm>cupsParseOptions <LINK LINKEND="REFSTD.libcups.2">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>cupsPrintFile</primary></indexterm>cupsPrintFile <LINK LINKEND="REFSTD.libcups.2">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>cupsPrintFile2</primary></indexterm>cupsPrintFile2 <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>cupsPrintFiles</primary></indexterm>cupsPrintFiles <LINK LINKEND="REFSTD.libcups.2">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>cupsPrintFiles2</primary></indexterm>cupsPrintFiles2 <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
<ENTRY><indexterm><primary>cupsPutFd</primary></indexterm>cupsPutFd <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
<ENTRY><indexterm><primary>cupsPutFile</primary></indexterm>cupsPutFile <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>cupsServer</primary></indexterm>cupsServer <LINK LINKEND="REFSTD.libcups.2">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>cupsSetDests</primary></indexterm>cupsSetDests <LINK LINKEND="REFSTD.libcups.2">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>cupsSetDests2</primary></indexterm>cupsSetDests2 <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
<ENTRY><indexterm><primary>cupsSetEncryption</primary></indexterm>cupsSetEncryption <LINK LINKEND="REFSTD.libcups.2">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>cupsSetPasswordCB</primary></indexterm>cupsSetPasswordCB <LINK LINKEND="REFSTD.libcups.2">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>cupsSetServer</primary></indexterm>cupsSetServer <LINK LINKEND="REFSTD.libcups.2">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>cupsSetUser</primary></indexterm>cupsSetUser <LINK LINKEND="REFSTD.libcups.2">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>cupsTempFd</primary></indexterm>cupsTempFd <LINK LINKEND="REFSTD.libcups.2">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>cupsUser</primary></indexterm>cupsUser <LINK LINKEND="REFSTD.libcups.2">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>httpBlocking</primary></indexterm>httpBlocking <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
<ENTRY><indexterm><primary>httpCheck</primary></indexterm>httpCheck <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
<ENTRY><indexterm><primary>httpClearCookie</primary></indexterm>httpClearCookie <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>httpClearFields</primary></indexterm>httpClearFields <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
<ENTRY><indexterm><primary>httpClose</primary></indexterm>httpClose <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
<ENTRY><indexterm><primary>httpConnect</primary></indexterm>httpConnect <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
<ENTRY><indexterm><primary>httpConnectEncrypt</primary></indexterm>httpConnectEncrypt <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>httpDecode64_2</primary></indexterm>httpDecode64_2 <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
<ENTRY><indexterm><primary>httpDelete</primary></indexterm>httpDelete <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
<ENTRY><indexterm><primary>httpEncode64_2</primary></indexterm>httpEncode64_2 <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
<ENTRY><indexterm><primary>httpEncryption</primary></indexterm>httpEncryption <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>httpError</primary></indexterm>httpError <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
<ENTRY><indexterm><primary>httpFlush</primary></indexterm>httpFlush <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
<ENTRY><indexterm><primary>httpGet</primary></indexterm>httpGet <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
<ENTRY><indexterm><primary>httpGetCookie</primary></indexterm>httpGetCookie <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>httpGetDateString</primary></indexterm>httpGetDateString <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
<ENTRY><indexterm><primary>httpGetDateTime</primary></indexterm>httpGetDateTime <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
<ENTRY><indexterm><primary>httpGetField</primary></indexterm>httpGetField <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
<ENTRY><indexterm><primary>httpGetHostByName</primary></indexterm>httpGetHostByName <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>httpGetSubField</primary></indexterm>httpGetSubField <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
<ENTRY><indexterm><primary>httpGets</primary></indexterm>httpGets <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
<ENTRY><indexterm><primary>httpHead</primary></indexterm>httpHead <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
<ENTRY><indexterm><primary>httpInitialize</primary></indexterm>httpInitialize <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>httpMD5</primary></indexterm>httpMD5 <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
<ENTRY><indexterm><primary>httpMD5Final</primary></indexterm>httpMD5Final <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
<ENTRY><indexterm><primary>httpMD5String</primary></indexterm>httpMD5String <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
<ENTRY><indexterm><primary>httpOptions</primary></indexterm>httpOptions <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>httpPost</primary></indexterm>httpPost <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
<ENTRY><indexterm><primary>httpPut</primary></indexterm>httpPut <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
<ENTRY><indexterm><primary>httpReconnect</primary></indexterm>httpReconnect <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
<ENTRY><indexterm><primary>httpSetCookie</primary></indexterm>httpSetCookie <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>httpSetField</primary></indexterm>httpSetField <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
<ENTRY><indexterm><primary>httpStatus</primary></indexterm>httpStatus <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
<ENTRY><indexterm><primary>httpTrace</primary></indexterm>httpTrace <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
<ENTRY><indexterm><primary>httpUpdate</primary></indexterm>httpUpdate <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>httpWait</primary></indexterm>httpWait <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
<ENTRY><indexterm><primary>ippAddBoolean</primary></indexterm>ippAddBoolean <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
<ENTRY><indexterm><primary>ippAddBooleans</primary></indexterm>ippAddBooleans <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
<ENTRY><indexterm><primary>ippAddCollection</primary></indexterm>ippAddCollection <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>ippAddCollections</primary></indexterm>ippAddCollections <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
<ENTRY><indexterm><primary>ippAddDate</primary></indexterm>ippAddDate <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
<ENTRY><indexterm><primary>ippAddInteger</primary></indexterm>ippAddInteger <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
<ENTRY><indexterm><primary>ippAddIntegers</primary></indexterm>ippAddIntegers <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>ippAddRange</primary></indexterm>ippAddRange <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
<ENTRY><indexterm><primary>ippAddRanges</primary></indexterm>ippAddRanges <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
<ENTRY><indexterm><primary>ippAddResolution</primary></indexterm>ippAddResolution <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
<ENTRY><indexterm><primary>ippAddResolutions</primary></indexterm>ippAddResolutions <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>ippAddSeparator</primary></indexterm>ippAddSeparator <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
<ENTRY><indexterm><primary>ippAddString</primary></indexterm>ippAddString <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
<ENTRY><indexterm><primary>ippAddStrings</primary></indexterm>ippAddStrings <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
<ENTRY><indexterm><primary>ippDateToTime</primary></indexterm>ippDateToTime <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>ippDelete</primary></indexterm>ippDelete <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
<ENTRY><indexterm><primary>ippDeleteAttribute</primary></indexterm>ippDeleteAttribute <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
<ENTRY><indexterm><primary>ippErrorString</primary></indexterm>ippErrorString <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
<ENTRY><indexterm><primary>ippFindAttribute</primary></indexterm>ippFindAttribute <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>ippFindNextAttribute</primary></indexterm>ippFindNextAttribute <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
<ENTRY><indexterm><primary>ippLength</primary></indexterm>ippLength <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
<ENTRY><indexterm><primary>ippNew</primary></indexterm>ippNew <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
<ENTRY><indexterm><primary>ippPort</primary></indexterm>ippPort <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>ippRead</primary></indexterm>ippRead <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
<ENTRY><indexterm><primary>ippReadFile</primary></indexterm>ippReadFile <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
<ENTRY><indexterm><primary>ippReadIO</primary></indexterm>ippReadIO <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
<ENTRY><indexterm><primary>ippSetPort</primary></indexterm>ippSetPort <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>ippTimeToDate</primary></indexterm>ippTimeToDate <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
<ENTRY><indexterm><primary>ippWrite</primary></indexterm>ippWrite <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
<ENTRY><indexterm><primary>ippWriteFile</primary></indexterm>ippWriteFile <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
<ENTRY><indexterm><primary>ippWriteIO</primary></indexterm>ippWriteIO <LINK LINKEND="REFSTD.libcups.1">[CUPS 1.2]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>ppdClose</primary></indexterm>ppdClose <LINK LINKEND="REFSTD.libcups.2">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>ppdCollect</primary></indexterm>ppdCollect <LINK LINKEND="REFSTD.libcups.2">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>ppdConflicts</primary></indexterm>ppdConflicts <LINK LINKEND="REFSTD.libcups.2">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>ppdEmit</primary></indexterm>ppdEmit <LINK LINKEND="REFSTD.libcups.2">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>ppdEmitFd</primary></indexterm>ppdEmitFd <LINK LINKEND="REFSTD.libcups.2">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>ppdEmitJCL</primary></indexterm>ppdEmitJCL <LINK LINKEND="REFSTD.libcups.2">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>ppdErrorString</primary></indexterm>ppdErrorString <LINK LINKEND="REFSTD.libcups.2">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>ppdFindAttr</primary></indexterm>ppdFindAttr <LINK LINKEND="REFSTD.libcups.2">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>ppdFindChoice</primary></indexterm>ppdFindChoice <LINK LINKEND="REFSTD.libcups.2">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>ppdFindMarkedChoice</primary></indexterm>ppdFindMarkedChoice <LINK LINKEND="REFSTD.libcups.2">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>ppdFindNextAttr</primary></indexterm>ppdFindNextAttr <LINK LINKEND="REFSTD.libcups.2">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>ppdFindOption</primary></indexterm>ppdFindOption <LINK LINKEND="REFSTD.libcups.2">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>ppdIsMarked</primary></indexterm>ppdIsMarked <LINK LINKEND="REFSTD.libcups.2">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>ppdLastError</primary></indexterm>ppdLastError <LINK LINKEND="REFSTD.libcups.2">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>ppdMarkDefaults</primary></indexterm>ppdMarkDefaults <LINK LINKEND="REFSTD.libcups.2">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>ppdMarkOption</primary></indexterm>ppdMarkOption <LINK LINKEND="REFSTD.libcups.2">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>ppdOpen</primary></indexterm>ppdOpen <LINK LINKEND="REFSTD.libcups.2">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>ppdOpenFd</primary></indexterm>ppdOpenFd <LINK LINKEND="REFSTD.libcups.2">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>ppdOpenFile</primary></indexterm>ppdOpenFile <LINK LINKEND="REFSTD.libcups.2">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>ppdPageLength</primary></indexterm>ppdPageLength <LINK LINKEND="REFSTD.libcups.2">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>ppdPageSize</primary></indexterm>ppdPageSize <LINK LINKEND="REFSTD.libcups.2">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>ppdPageWidth</primary></indexterm>ppdPageWidth <LINK LINKEND="REFSTD.libcups.2">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>ppdSetConformance</primary></indexterm>ppdSetConformance <LINK LINKEND="REFSTD.libcups.2">[LSB]</LINK></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>
</SECT2>
</SECT1>
<SECT1 ID=libcups-ddefs>
<TITLE>Data Definitions for libcups</TITLE>
<PARA>
This section defines global identifiers and their values that are associated
with interfaces contained in libcups.
These definitions are organized into groups that
correspond to system headers. This convention is used as a
convenience for the reader, and does not imply the existence
of these headers, or their content.
Where an interface is defined as requiring a particular system header file
all of the data definitions for that system header file presented here shall be in effect.
</PARA>
<PARA>
This section gives data definitions to promote binary application
portability, not to repeat source interface definitions available
elsewhere. System providers and application developers should use this ABI
to supplement - not to replace - source interface definition specifications.
</PARA>
<PARA>
This specification uses the <XREF LINKEND='std.ISOC99'> C Language as the reference programming language, and data definitions are specified in ISO C format. The C language is used here as a convenient notation. Using a C language description of these data objects does not preclude their use by other programming languages.</PARA>
<SECT2>
<TITLE>cups/cups.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define _CUPS_CUPS_H_
#define CUPS_VERSION_MAJOR	1
#define CUPS_VERSION_MINOR	1
#define CUPS_VERSION	1.0123
#define CUPS_VERSION_PATCH	23
#define cupsLangDefault()	cupsLangGet(NULL)

typedef enum {
    CUPS_AUTO_ENCODING = -1,
    CUPS_US_ASCII = 0,
    CUPS_ISO8859_1 = 1,
    CUPS_ISO8859_2 = 2,
    CUPS_ISO8859_3 = 3,
    CUPS_ISO8859_4 = 4,
    CUPS_ISO8859_5 = 5,
    CUPS_ISO8859_6 = 6,
    CUPS_ISO8859_7 = 7,
    CUPS_ISO8859_8 = 8,
    CUPS_ISO8859_9 = 9,
    CUPS_ISO8859_10 = 10,
    CUPS_UTF8 = 11,
    CUPS_ISO8859_13 = 12,
    CUPS_ISO8859_14 = 13,
    CUPS_ISO8859_15 = 14,
    CUPS_WINDOWS_874 = 15,
    CUPS_WINDOWS_1250 = 16,
    CUPS_WINDOWS_1251 = 17,
    CUPS_WINDOWS_1252 = 18,
    CUPS_WINDOWS_1253 = 19,
    CUPS_WINDOWS_1254 = 20,
    CUPS_WINDOWS_1255 = 21,
    CUPS_WINDOWS_1256 = 22,
    CUPS_WINDOWS_1257 = 23,
    CUPS_WINDOWS_1258 = 24,
    CUPS_KOI8_R = 25,
    CUPS_KOI8_U = 26
} cups_encoding_t;
typedef struct cups_lang_s {
    struct cups_lang_s *next;
    int used;
    cups_encoding_t encoding;
    char language[16];
    cups_array_t *strings;
} cups_lang_t;
typedef enum {
    HTTP_ENCRYPT_IF_REQUESTED = 0,
    HTTP_ENCRYPT_NEVER = 1,
    HTTP_ENCRYPT_REQUIRED = 2,
    HTTP_ENCRYPT_ALWAYS = 3
} http_encryption_t;
typedef struct {
    char *name;
    char *value;
} cups_option_t;
typedef struct {
    char *name;
    char *instance;
    int is_default;
    int num_options;
    cups_option_t *options;
} cups_dest_t;
typedef enum {
    HTTP_WAITING = 0,
    HTTP_OPTIONS = 1,
    HTTP_GET = 2,
    HTTP_GET_SEND = 3,
    HTTP_HEAD = 4,
    HTTP_POST = 5,
    HTTP_POST_RECV = 6,
    HTTP_POST_SEND = 7,
    HTTP_PUT = 8,
    HTTP_PUT_RECV = 9,
    HTTP_DELETE = 10,
    HTTP_TRACE = 11,
    HTTP_CLOSE = 12,
    HTTP_STATUS = 13
} http_state_t;
typedef enum {
    HTTP_ERROR = -1,
    HTTP_CONTINUE = 100,
    HTTP_SWITCHING_PROTOCOLS = 101,
    HTTP_OK = 200,
    HTTP_CREATED = 201,
    HTTP_ACCEPTED = 202,
    HTTP_NOT_AUTHORITATIVE = 203,
    HTTP_NO_CONTENT = 204,
    HTTP_RESET_CONTENT = 205,
    HTTP_PARTIAL_CONTENT = 206,
    HTTP_MULTIPLE_CHOICES = 300,
    HTTP_MOVED_PERMANENTLY = 301,
    HTTP_MOVED_TEMPORARILY = 302,
    HTTP_SEE_OTHER = 303,
    HTTP_NOT_MODIFIED = 304,
    HTTP_USE_PROXY = 305,
    HTTP_BAD_REQUEST = 400,
    HTTP_UNAUTHORIZED = 401,
    HTTP_PAYMENT_REQUIRED = 402,
    HTTP_FORBIDDEN = 403,
    HTTP_NOT_FOUND = 404,
    HTTP_METHOD_NOT_ALLOWED = 405,
    HTTP_NOT_ACCEPTABLE = 406,
    HTTP_PROXY_AUTHENTICATION = 407,
    HTTP_REQUEST_TIMEOUT = 408,
    HTTP_CONFLICT = 409,
    HTTP_GONE = 410,
    HTTP_LENGTH_REQUIRED = 411,
    HTTP_PRECONDITION = 412,
    HTTP_REQUEST_TOO_LARGE = 413,
    HTTP_URI_TOO_LONG = 414,
    HTTP_UNSUPPORTED_MEDIATYPE = 415,
    HTTP_UPGRADE_REQUIRED = 426,
    HTTP_SERVER_ERROR = 500,
    HTTP_NOT_IMPLEMENTED = 501,
    HTTP_BAD_GATEWAY = 502,
    HTTP_SERVICE_UNAVAILABLE = 503,
    HTTP_GATEWAY_TIMEOUT = 504,
    HTTP_NOT_SUPPORTED = 505
} http_status_t;
typedef enum {
    HTTP_0_9 = 9,
    HTTP_1_0 = 100,
    HTTP_1_1 = 101
} http_version_t;
typedef enum {
    HTTP_KEEPALIVE_OFF = 0,
    HTTP_KEEPALIVE_ON = 1
} http_keepalive_t;
typedef enum {
    HTTP_ENCODE_LENGTH = 0,
    HTTP_ENCODE_CHUNKED = 1
} http_encoding_t;
typedef enum {
    IPP_JOB_PENDING = 3,
    IPP_JOB_HELD = 4,
    IPP_JOB_PROCESSING = 5,
    IPP_JOB_STOPPED = 6,
    IPP_JOB_CANCELLED = 7,
    IPP_JOB_ABORTED = 8,
    IPP_JOB_COMPLETED = 9
} ipp_jstate_t;
typedef struct {
    int id;
    char *dest;
    char *title;
    char *user;
    char *format;
    ipp_jstate_t state;
    int size;
    int priority;
    time_t completed_time;
    time_t creation_time;
    time_t processing_time;
} cups_job_t;
typedef struct _cups_array_s cups_array_t;

typedef struct _http_s http_t;
extern int cupsAddDest(const char *name, const char *instance,
		       int num_dests, cups_dest_t * *dests);
extern int cupsAddOption(const char *name, const char *value,
			 int num_options, cups_option_t * *options);
extern int cupsCancelJob(const char *printer, int job);
extern int cupsDoAuthentication(http_t * http, const char *method,
				const char *resource);
extern ipp_t *cupsDoFileRequest(http_t * http, ipp_t * request,
				const char *resource,
				const char *filename);
extern void cupsEncodeOptions(ipp_t * ipp, int num_options,
			      cups_option_t * options);
extern http_encryption_t cupsEncryption(void);
extern void cupsFreeDests(int num_dests, cups_dest_t * dests);
extern void cupsFreeJobs(int num_jobs, cups_job_t * jobs);
extern void cupsFreeOptions(int num_options, cups_option_t * options);
extern const char *cupsGetDefault(void);
extern const char *cupsGetDefault2(http_t * http);
extern cups_dest_t *cupsGetDest(const char *name, const char *instance,
				int num_dests, cups_dest_t * dests);
extern int cupsGetDests(cups_dest_t * *dests);
extern int cupsGetDests2(http_t * http, cups_dest_t * *dests);
extern http_status_t cupsGetFd(http_t * http, const char *resource,
			       int fd);
extern http_status_t cupsGetFile(http_t * http, const char *resource,
				 const char *filename);
extern int cupsGetJobs(cups_job_t * *jobs, const char *dest, int myjobs,
		       int completed);
extern int cupsGetJobs2(http_t * http, cups_job_t * *jobs,
			const char *dest, int myjobs, int completed);
extern const char *cupsGetOption(const char *name, int num_options,
				 cups_option_t * options);
extern const char *cupsGetPPD(const char *printer);
extern const char *cupsGetPPD2(http_t * http, const char *printer);
extern const char *cupsGetPassword(const char *prompt);
extern const char *cupsLangEncoding(cups_lang_t * lang);
extern void cupsLangFlush(void);
extern void cupsLangFree(cups_lang_t * lang);
extern cups_lang_t *cupsLangGet(const char *language);
extern ipp_status_t cupsLastError(void);
extern int cupsMarkOptions(ppd_file_t * ppd, int num_options,
			   cups_option_t * options);
extern int cupsParseOptions(const char *arg, int num_options,
			    cups_option_t * *options);
extern int cupsPrintFile(const char *printer, const char *filename,
			 const char *title, int num_options,
			 cups_option_t * options);
extern int cupsPrintFile2(http_t * http, const char *printer,
			  const char *filename, const char *title,
			  int num_options, cups_option_t * options);
extern int cupsPrintFiles(const char *printer, int num_files,
			  const char **files, const char *title,
			  int num_options, cups_option_t * options);
extern int cupsPrintFiles2(http_t * http, const char *printer,
			   int num_files, const char **files,
			   const char *title, int num_options,
			   cups_option_t * options);
extern http_status_t cupsPutFd(http_t * http, const char *resource,
			       int fd);
extern http_status_t cupsPutFile(http_t * http, const char *resource,
				 const char *filename);
extern const char *cupsServer(void);
extern void cupsSetDests(int num_dests, cups_dest_t * dests);
extern int cupsSetDests2(http_t * http, int num_dests,
			 cups_dest_t * dests);
extern void cupsSetEncryption(http_encryption_t e);
extern void cupsSetPasswordCB(const char *(*cb) (const char *));
extern void cupsSetServer(const char *server);
extern void cupsSetUser(const char *user);
extern int cupsTempFd(char *filename, int len);
extern const char *cupsUser(void);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>cups/http.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define HTTP_MAX_URI	1024
#define HTTP_MAX_BUFFER	2048
#define HTTP_MAX_HOST	256
#define HTTP_MAX_VALUE	256

typedef enum http_auth_e {
    HTTP_AUTH_NONE,
    HTTP_AUTH_BASIC,
    HTTP_AUTH_MD5,
    HTTP_AUTH_MD5_SESS,
    HTTP_AUTH_MD5_INT,
    HTTP_AUTH_MD5_SESS_INT,
    HTTP_AUTH_NEGOTIATE
} http_auth_t;
typedef enum http_field_e {
    HTTP_FIELD_UNKNOWN,
    HTTP_FIELD_ACCEPT_LANGUAGE,
    HTTP_FIELD_ACCEPT_RANGES,
    HTTP_FIELD_AUTHORIZATION,
    HTTP_FIELD_CONNECTION,
    HTTP_FIELD_CONTENT_ENCODING,
    HTTP_FIELD_CONTENT_LANGUAGE,
    HTTP_FIELD_CONTENT_LENGTH,
    HTTP_FIELD_CONTENT_LOCATION,
    HTTP_FIELD_CONTENT_MD5,
    HTTP_FIELD_CONTENT_RANGE,
    HTTP_FIELD_CONTENT_TYPE,
    HTTP_FIELD_CONTENT_VERSION,
    HTTP_FIELD_DATE,
    HTTP_FIELD_HOST,
    HTTP_FIELD_IF_MODIFIED_SINCE,
    HTTP_FIELD_IF_UNMODIFIED_SINCE,
    HTTP_FIELD_KEEP_ALIVE,
    HTTP_FIELD_LAST_MODIFIED,
    HTTP_FIELD_LINK,
    HTTP_FIELD_LOCATION,
    HTTP_FIELD_RANGE,
    HTTP_FIELD_REFERER,
    HTTP_FIELD_RETRY_AFTER,
    HTTP_FIELD_TRANSFER_ENCODING,
    HTTP_FIELD_UPGRADE,
    HTTP_FIELD_USER_AGENT,
    HTTP_FIELD_WWW_AUTHENTICATE,
    HTTP_FIELD_MAX
} http_field_t;
typedef enum http_uri_status_e {
    HTTP_URI_OVERFLOW,
    HTTP_URI_BAD_ARGUMENTS,
    HTTP_URI_BAD_RESOURCE,
    HTTP_URI_BAD_PORT,
    HTTP_URI_BAD_HOSTNAME,
    HTTP_URI_BAD_USERNAME,
    HTTP_URI_BAD_SCHEME,
    HTTP_URI_BAD_URI,
    HTTP_URI_OK,
    HTTP_URI_MISSING_SCHEME,
    HTTP_URI_UNKNOWN_SCHEME,
    HTTP_URI_MISSING_RESOURCE
} http_uri_status_t;
typedef enum http_uri_coding_e {
    HTTP_URI_CODING_NONE,
    HTTP_URI_CODING_USERNAME,
    HTTP_URI_CODING_HOSTNAME,
    HTTP_URI_CODING_RESOURCE,
    HTTP_URI_CODING_MOST,
    HTTP_URI_CODING_QUERY,
    HTTP_URI_CODING_ALL
} http_uri_coding_t;
typedef union _http_addr_u {
    struct sockaddr addr;
    struct sockaddr_in ipv4;
    struct sockaddr_in6 ipv6;
    struct sockaddr_un un;
    char pad[256];
} http_addr_t;
typedef struct http_addrlist_s {
    struct http_addrlist_s *next;
    http_addr_t addr;
} http_addrlist_t;
extern void httpBlocking(http_t * http, int b);
extern int httpCheck(http_t * http);
extern void httpClearCookie(http_t * http);
extern void httpClearFields(http_t * http);
extern void httpClose(http_t * http);
extern http_t *httpConnect(const char *host, int port);
extern http_t *httpConnectEncrypt(const char *host, int port,
				  http_encryption_t encryption);
extern char *httpDecode64_2(char *out, int *outlen, const char *in);
extern int httpDelete(http_t * http, const char *uri);
extern char *httpEncode64_2(char *out, int outlen, const char *in,
			    int inlen);
extern int httpEncryption(http_t * http, http_encryption_t e);
extern int httpError(http_t * http);
extern void httpFlush(http_t * http);
extern int httpGet(http_t * http, const char *uri);
extern const char *httpGetCookie(http_t * http);
extern const char *httpGetDateString(time_t t);
extern time_t httpGetDateTime(const char *s);
extern const char *httpGetField(http_t * http, http_field_t field);
extern struct hostent *httpGetHostByName(const char *name);
extern char *httpGetSubField(http_t * http, http_field_t field,
			     const char *name, char *value);
extern char *httpGets(char *line, int length, http_t * http);
extern int httpHead(http_t * http, const char *uri);
extern void httpInitialize(void);
extern char *httpMD5(const char *, const char *, const char *, char *);
extern char *httpMD5Final(const char *, const char *, const char *,
			  char *);
extern char *httpMD5String(const unsigned char *, char *);
extern int httpOptions(http_t * http, const char *uri);
extern int httpPost(http_t * http, const char *uri);
extern int httpPut(http_t * http, const char *uri);
extern int httpReconnect(http_t * http);
extern void httpSetCookie(http_t * http, const char *cookie);
extern void httpSetField(http_t * http, http_field_t field,
			 const char *value);
extern const char *httpStatus(http_status_t status);
extern int httpTrace(http_t * http, const char *uri);
extern http_status_t httpUpdate(http_t * http);
extern int httpWait(http_t * http, int msec);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>cups/ipp.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define IPP_MAX_NAME	256
#define IPP_MAX_LENGTH	32767
#define IPP_PORT	631
#define IPP_MAX_VALUES	8
#define CUPS_ADD_CLASS	CUPS_ADD_MODIFY_CLASS
#define CUPS_ADD_PRINTER	CUPS_ADD_MODIFY_PRINTER
#define IPP_ERROR_JOB_CANCELLED	IPP_ERROR_JOB_CANCELED
#define IPP_JOB_CANCELLED	IPP_JOB_CANCELED
#define IPP_VERSION	"\001\001"

typedef enum {
    IPP_OK = 0,
    IPP_OK_SUBST = 1,
    IPP_OK_CONFLICT = 2,
    IPP_OK_IGNORED_SUBSCRIPTIONS = 3,
    IPP_OK_IGNORED_NOTIFICATIONS = 4,
    IPP_OK_TOO_MANY_EVENTS = 5,
    IPP_OK_BUT_CANCEL_SUBSCRIPTION = 6,
    IPP_REDIRECTION_OTHER_SITE = 768,
    IPP_BAD_REQUEST = 1024,
    IPP_FORBIDDEN = 1025,
    IPP_NOT_AUTHENTICATED = 1026,
    IPP_NOT_AUTHORIZED = 1027,
    IPP_NOT_POSSIBLE = 1028,
    IPP_TIMEOUT = 1029,
    IPP_NOT_FOUND = 1030,
    IPP_GONE = 1031,
    IPP_REQUEST_ENTITY = 1032,
    IPP_REQUEST_VALUE = 1033,
    IPP_DOCUMENT_FORMAT = 1034,
    IPP_ATTRIBUTES = 1035,
    IPP_URI_SCHEME = 1036,
    IPP_CHARSET = 1037,
    IPP_CONFLICT = 1038,
    IPP_COMPRESSION_NOT_SUPPORTED = 1039,
    IPP_COMPRESSION_ERROR = 1040,
    IPP_DOCUMENT_FORMAT_ERROR = 1041,
    IPP_DOCUMENT_ACCESS_ERROR = 1042,
    IPP_ATTRIBUTES_NOT_SETTABLE = 1043,
    IPP_IGNORED_ALL_SUBSCRIPTIONS = 1044,
    IPP_TOO_MANY_SUBSCRIPTIONS = 1045,
    IPP_IGNORED_ALL_NOTIFICATIONS = 1046,
    IPP_PRINT_SUPPORT_FILE_NOT_FOUND = 1047,
    IPP_INTERNAL_ERROR = 1280,
    IPP_OPERATION_NOT_SUPPORTED = 1281,
    IPP_SERVICE_UNAVAILABLE = 1282,
    IPP_VERSION_NOT_SUPPORTED = 1283,
    IPP_DEVICE_ERROR = 1284,
    IPP_TEMPORARY_ERROR = 1285,
    IPP_NOT_ACCEPTING = 1286,
    IPP_PRINTER_BUSY = 1287,
    IPP_ERROR_JOB_CANCELLED = 1288,
    IPP_MULTIPLE_JOBS_NOT_SUPPORTED = 1289,
    IPP_PRINTER_IS_DEACTIVATED = 1290
} ipp_status_t;
typedef enum ipp_tag_e {
    IPP_TAG_ZERO,
    IPP_TAG_OPERATION,
    IPP_TAG_JOB,
    IPP_TAG_END,
    IPP_TAG_PRINTER,
    IPP_TAG_UNSUPPORTED_GROUP,
    IPP_TAG_SUBSCRIPTION,
    IPP_TAG_EVENT_NOTIFICATION,
    IPP_TAG_UNSUPPORTED_VALUE,
    IPP_TAG_DEFAULT,
    IPP_TAG_UNKNOWN,
    IPP_TAG_NOVALUE,
    IPP_TAG_NOTSETTABLE,
    IPP_TAG_DELETEATTR,
    IPP_TAG_ADMINDEFINE,
    IPP_TAG_INTEGER,
    IPP_TAG_BOOLEAN,
    IPP_TAG_ENUM,
    IPP_TAG_STRING,
    IPP_TAG_DATE,
    IPP_TAG_RESOLUTION,
    IPP_TAG_RANGE,
    IPP_TAG_BEGIN_COLLECTION,
    IPP_TAG_TEXTLANG,
    IPP_TAG_NAMELANG,
    IPP_TAG_END_COLLECTION,
    IPP_TAG_TEXT,
    IPP_TAG_NAME,
    IPP_TAG_KEYWORD,
    IPP_TAG_URI,
    IPP_TAG_URISCHEME,
    IPP_TAG_CHARSET,
    IPP_TAG_LANGUAGE,
    IPP_TAG_MIMETYPE,
    IPP_TAG_MEMBERNAME,
    IPP_TAG_MASK,
    IPP_TAG_COPY
} ipp_tag_t;
typedef enum ipp_res_e {
    IPP_RES_PER_INCH,
    IPP_RES_PER_CM
} ipp_res_t;
typedef enum ipp_finish_e {
    IPP_FINISHINGS_NONE,
    IPP_FINISHINGS_STAPLE,
    IPP_FINISHINGS_PUNCH,
    IPP_FINISHINGS_COVER,
    IPP_FINISHINGS_BIND,
    IPP_FINISHINGS_SADDLE_STITCH,
    IPP_FINISHINGS_EDGE_STITCH,
    IPP_FINISHINGS_FOLD,
    IPP_FINISHINGS_TRIM,
    IPP_FINISHINGS_BALE,
    IPP_FINISHINGS_BOOKLET_MAKER,
    IPP_FINISHINGS_JOB_OFFSET,
    IPP_FINISHINGS_STAPLE_TOP_LEFT,
    IPP_FINISHINGS_STAPLE_BOTTOM_LEFT,
    IPP_FINISHINGS_STAPLE_TOP_RIGHT,
    IPP_FINISHINGS_STAPLE_BOTTOM_RIGHT,
    IPP_FINISHINGS_EDGE_STITCH_LEFT,
    IPP_FINISHINGS_EDGE_STITCH_TOP,
    IPP_FINISHINGS_EDGE_STITCH_RIGHT,
    IPP_FINISHINGS_EDGE_STITCH_BOTTOM,
    IPP_FINISHINGS_STAPLE_DUAL_LEFT,
    IPP_FINISHINGS_STAPLE_DUAL_TOP,
    IPP_FINISHINGS_STAPLE_DUAL_RIGHT,
    IPP_FINISHINGS_STAPLE_DUAL_BOTTOM,
    IPP_FINISHINGS_BIND_LEFT,
    IPP_FINISHINGS_BIND_TOP,
    IPP_FINISHINGS_BIND_RIGHT,
    IPP_FINISHINGS_BIND_BOTTOM
} ipp_finish_t;
typedef enum ipp_orient_e {
    IPP_PORTRAIT,
    IPP_LANDSCAPE,
    IPP_REVERSE_LANDSCAPE,
    IPP_REVERSE_PORTRAIT
} ipp_orient_t;
typedef enum ipp_quality_e {
    IPP_QUALITY_DRAFT,
    IPP_QUALITY_NORMAL,
    IPP_QUALITY_HIGH
} ipp_quality_t;
typedef enum ipp_pstate_e {
    IPP_PRINTER_IDLE,
    IPP_PRINTER_PROCESSING,
    IPP_PRINTER_STOPPED
} ipp_pstate_t;
typedef enum ipp_state_e {
    IPP_ERROR,
    IPP_IDLE,
    IPP_HEADER,
    IPP_ATTRIBUTE,
    IPP_DATA
} ipp_state_t;
typedef enum ipp_op_e {
    IPP_PRINT_JOB,
    IPP_PRINT_URI,
    IPP_VALIDATE_JOB,
    IPP_CREATE_JOB,
    IPP_SEND_DOCUMENT,
    IPP_SEND_URI,
    IPP_CANCEL_JOB,
    IPP_GET_JOB_ATTRIBUTES,
    IPP_GET_JOBS,
    IPP_GET_PRINTER_ATTRIBUTES,
    IPP_HOLD_JOB,
    IPP_RELEASE_JOB,
    IPP_RESTART_JOB,
    IPP_PAUSE_PRINTER,
    IPP_RESUME_PRINTER,
    IPP_PURGE_JOBS,
    IPP_SET_PRINTER_ATTRIBUTES,
    IPP_SET_JOB_ATTRIBUTES,
    IPP_GET_PRINTER_SUPPORTED_VALUES,
    IPP_CREATE_PRINTER_SUBSCRIPTION,
    IPP_CREATE_JOB_SUBSCRIPTION,
    IPP_GET_SUBSCRIPTION_ATTRIBUTES,
    IPP_GET_SUBSCRIPTIONS,
    IPP_RENEW_SUBSCRIPTION,
    IPP_CANCEL_SUBSCRIPTION,
    IPP_GET_NOTIFICATIONS,
    IPP_SEND_NOTIFICATIONS,
    IPP_GET_PRINT_SUPPORT_FILES,
    IPP_ENABLE_PRINTER,
    IPP_DISABLE_PRINTER,
    IPP_PAUSE_PRINTER_AFTER_CURRENT_JOB,
    IPP_HOLD_NEW_JOBS,
    IPP_RELEASE_HELD_NEW_JOBS,
    IPP_DEACTIVATE_PRINTER,
    IPP_ACTIVATE_PRINTER,
    IPP_RESTART_PRINTER,
    IPP_SHUTDOWN_PRINTER,
    IPP_STARTUP_PRINTER,
    IPP_REPROCESS_JOB,
    IPP_CANCEL_CURRENT_JOB,
    IPP_SUSPEND_CURRENT_JOB,
    IPP_RESUME_JOB,
    IPP_PROMOTE_JOB,
    IPP_SCHEDULE_JOB_AFTER,
    IPP_PRIVATE,
    CUPS_GET_DEFAULT,
    CUPS_GET_PRINTERS,
    CUPS_ADD_MODIFY_PRINTER,
    CUPS_DELETE_PRINTER,
    CUPS_GET_CLASSES,
    CUPS_ADD_MODIFY_CLASS,
    CUPS_DELETE_CLASS,
    CUPS_ACCEPT_JOBS,
    CUPS_REJECT_JOBS,
    CUPS_SET_DEFAULT,
    CUPS_GET_DEVICES,
    CUPS_GET_PPDS,
    CUPS_MOVE_JOB,
    CUPS_AUTHENTICATE_JOB,
    CUPS_GET_PPD
} ipp_op_t;
typedef unsigned char ipp_uchar_t;
typedef ssize_t(*ipp_iocb_t) (void *, ipp_uchar_t *, size_t);
typedef union ipp_request_u {
    struct {
	ipp_uchar_t version[2];
	int op_status;
	int request_id;
    } any;
    struct {
	ipp_uchar_t version[2];
	ipp_op_t operation_id;
	int request_id;
    } op;
    struct {
	ipp_uchar_t version[2];
	ipp_status_t status_code;
	int request_id;
    } status;
    struct {
	ipp_uchar_t version[2];
	ipp_status_t status_code;
	int request_id;
    } event;
} ipp_request_t;
typedef struct ipp_s {
    ipp_state_t state;
    ipp_request_t request;
    ipp_attribute_t *attrs;
    ipp_attribute_t *last;
    ipp_attribute_t *current;
    ipp_tag_t curtag;
} ipp_t;
typedef union ipp_value_u {
    int integer;
    char boolean;
    ipp_uchar_t date[11];
    struct {
	int xres;
	int yres;
	ipp_res_t units;
    } resolution;
    struct {
	int lower;
	int upper;
    } range;
    struct {
	char *charset;
	char *text;
    } string;
    struct {
	int length;
	void *data;
    } unknown;
    ipp_t *collection;
} ipp_value_t;
typedef struct ipp_attribute_s {
    struct ipp_attribute_s *next;
    ipp_tag_t group_tag;
    ipp_tag_t value_tag;
    char *name;
    int num_values;
    ipp_value_t values[1];
} ipp_attribute_t;
extern ipp_attribute_t *ippAddBoolean(ipp_t * ipp, ipp_tag_t group,
				      const char *name, char value);
extern ipp_attribute_t *ippAddBooleans(ipp_t * ipp, ipp_tag_t group,
				       const char *name, int num_values,
				       const char *values);
extern ipp_attribute_t *ippAddCollection(ipp_t * ipp, ipp_tag_t group,
					 const char *name, ipp_t * value);
extern ipp_attribute_t *ippAddCollections(ipp_t * ipp, ipp_tag_t group,
					  const char *name, int num_values,
					  const ipp_t * *values);
extern ipp_attribute_t *ippAddDate(ipp_t * ipp, ipp_tag_t group,
				   const char *name,
				   const ipp_uchar_t * value);
extern ipp_attribute_t *ippAddInteger(ipp_t * ipp, ipp_tag_t group,
				      ipp_tag_t type, const char *name,
				      int value);
extern ipp_attribute_t *ippAddIntegers(ipp_t * ipp, ipp_tag_t group,
				       ipp_tag_t type, const char *name,
				       int num_values, const int *values);
extern ipp_attribute_t *ippAddRange(ipp_t * ipp, ipp_tag_t group,
				    const char *name, int lower,
				    int upper);
extern ipp_attribute_t *ippAddRanges(ipp_t * ipp, ipp_tag_t group,
				     const char *name, int num_values,
				     const int *lower, const int *upper);
extern ipp_attribute_t *ippAddResolution(ipp_t * ipp, ipp_tag_t group,
					 const char *name, ipp_res_t units,
					 int xres, int yres);
extern ipp_attribute_t *ippAddResolutions(ipp_t * ipp, ipp_tag_t group,
					  const char *name, int num_values,
					  ipp_res_t units, const int *xres,
					  const int *yres);
extern ipp_attribute_t *ippAddSeparator(ipp_t * ipp);
extern ipp_attribute_t *ippAddString(ipp_t * ipp, ipp_tag_t group,
				     ipp_tag_t type, const char *name,
				     const char *charset,
				     const char *value);
extern ipp_attribute_t *ippAddStrings(ipp_t * ipp, ipp_tag_t group,
				      ipp_tag_t type, const char *name,
				      int num_values, const char *charset,
				      const char *const *values);
extern time_t ippDateToTime(const ipp_uchar_t * date);
extern void ippDelete(ipp_t * ipp);
extern void ippDeleteAttribute(ipp_t * ipp, ipp_attribute_t * attr);
extern const char *ippErrorString(ipp_status_t error);
extern ipp_attribute_t *ippFindAttribute(ipp_t * ipp, const char *name,
					 ipp_tag_t type);
extern ipp_attribute_t *ippFindNextAttribute(ipp_t * ipp, const char *name,
					     ipp_tag_t type);
extern size_t ippLength(ipp_t * ipp);
extern ipp_t *ippNew(void);
extern int ippPort(void);
extern ipp_state_t ippRead(http_t * http, ipp_t * ipp);
extern ipp_state_t ippReadFile(int fd, ipp_t * ipp);
extern ipp_state_t ippReadIO(void *src, ipp_iocb_t cb, int blocking,
			     ipp_t * parent, ipp_t * ipp);
extern void ippSetPort(int p);
extern const ipp_uchar_t *ippTimeToDate(time_t t);
extern ipp_state_t ippWrite(http_t * http, ipp_t * ipp);
extern ipp_state_t ippWriteFile(int fd, ipp_t * ipp);
extern ipp_state_t ippWriteIO(void *dst, ipp_iocb_t cb, int blocking,
			      ipp_t * parent, ipp_t * ipp);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>cups/ppd.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define _CUPS_PPD_H_
#define PPD_MAX_LINE	256
#define PPD_VERSION	4.3
#define PPD_MAX_NAME	41
#define PPD_MAX_TEXT	81

typedef enum {
    PPD_CS_CMYK = -4,
    PPD_CS_CMY = -3,
    PPD_CS_GRAY = 1,
    PPD_CS_RGB = 3,
    PPD_CS_RGBK = 4,
    PPD_CS_N = 5
} ppd_cs_t;
typedef struct {
    char name[41];
    char *start;
    char *stop;
} ppd_emul_t;
typedef enum {
    PPD_UI_BOOLEAN = 0,
    PPD_UI_PICKONE = 1,
    PPD_UI_PICKMANY = 2
} ppd_ui_t;
typedef enum {
    PPD_ORDER_ANY = 0,
    PPD_ORDER_DOCUMENT = 1,
    PPD_ORDER_EXIT = 2,
    PPD_ORDER_JCL = 3,
    PPD_ORDER_PAGE = 4,
    PPD_ORDER_PROLOG = 5
} ppd_section_t;
typedef struct {
    char marked;
    char choice[41];
    char text[81];
    char *code;
    void *option;
} ppd_choice_t;
typedef struct {
    char conflicted;
    char keyword[41];
    char defchoice[41];
    char text[81];
    ppd_ui_t ui;
    ppd_section_t section;
    float order;
    int num_choices;
    ppd_choice_t *choices;
} ppd_option_t;
typedef struct ppd_group_str {
    char text[40];
    char name[41];
    int num_options;
    ppd_option_t *options;
    int num_subgroups;
    struct ppd_group_str *subgroups;
} ppd_group_t;
typedef struct {
    int marked;
    char name[41];
    float width;
    float length;
    float left;
    float bottom;
    float right;
    float top;
} ppd_size_t;
typedef struct {
    char option1[41];
    char choice1[41];
    char option2[41];
    char choice2[41];
} ppd_const_t;
typedef struct {
    char resolution[41];
    char media_type[41];
    float density;
    float gamma;
    float matrix[3][3];
} ppd_profile_t;
typedef struct {
    char name[41];
    char spec[41];
    char text[81];
    char *value;
} ppd_attr_t;
typedef struct {
    int language_level;
    int color_device;
    int variable_sizes;
    int accurate_screens;
    int contone_only;
    int landscape;
    int model_number;
    int manual_copies;
    int throughput;
    ppd_cs_t colorspace;
    char *patches;
    int num_emulations;
    ppd_emul_t *emulations;
    char *jcl_begin;
    char *jcl_ps;
    char *jcl_end;
    char *lang_encoding;
    char *lang_version;
    char *modelname;
    char *ttrasterizer;
    char *manufacturer;
    char *product;
    char *nickname;
    char *shortnickname;
    int num_groups;
    ppd_group_t *groups;
    int num_sizes;
    ppd_size_t *sizes;
    float custom_min[2];
    float custom_max[2];
    float custom_margins[4];
    int num_consts;
    ppd_const_t *consts;
    int num_fonts;
    char **fonts;
    int num_profiles;
    ppd_profile_t *profiles;
    int num_filters;
    char **filters;
    int flip_duplex;
    char *protocols;
    char *pcfilename;
    int num_attrs;
    int cur_attr;
    ppd_attr_t **attrs;
} ppd_file_t;
typedef enum {
    PPD_OK = 0,
    PPD_FILE_OPEN_ERROR = 1,
    PPD_NULL_FILE = 2,
    PPD_ALLOC_ERROR = 3,
    PPD_MISSING_PPDADOBE4 = 4,
    PPD_MISSING_VALUE = 5,
    PPD_INTERNAL_ERROR = 6,
    PPD_BAD_OPEN_GROUP = 7,
    PPD_NESTED_OPEN_GROUP = 8,
    PPD_BAD_OPEN_UI = 9,
    PPD_NESTED_OPEN_UI = 10,
    PPD_BAD_ORDER_DEPENDENCY = 11,
    PPD_BAD_UI_CONSTRAINTS = 12,
    PPD_MISSING_ASTERISK = 13,
    PPD_LINE_TOO_LONG = 14,
    PPD_ILLEGAL_CHARACTER = 15,
    PPD_ILLEGAL_MAIN_KEYWORD = 16,
    PPD_ILLEGAL_OPTION_KEYWORD = 17,
    PPD_ILLEGAL_TRANSLATION = 18,
    PPD_ILLEGAL_WHITESPACE = 19
} ppd_status_t;
typedef enum {
    PPD_CONFORM_RELAXED = 0,
    PPD_CONFORM_STRICT = 1
} ppd_conform_t;
extern void ppdClose(ppd_file_t * ppd);
extern int ppdCollect(ppd_file_t * ppd, ppd_section_t section,
		      ppd_choice_t * **choices);
extern int ppdConflicts(ppd_file_t * ppd);
extern int ppdEmit(ppd_file_t * ppd, FILE * fp, ppd_section_t section);
extern int ppdEmitFd(ppd_file_t * ppd, int fd, ppd_section_t section);
extern int ppdEmitJCL(ppd_file_t * ppd, FILE * fp, int job_id,
		      const char *user, const char *title);
extern const char *ppdErrorString(ppd_status_t status);
extern ppd_attr_t *ppdFindAttr(ppd_file_t * ppd, const char *name,
			       const char *spec);
extern ppd_choice_t *ppdFindChoice(ppd_option_t * o, const char *option);
extern ppd_choice_t *ppdFindMarkedChoice(ppd_file_t * ppd,
					 const char *keyword);
extern ppd_attr_t *ppdFindNextAttr(ppd_file_t * ppd, const char *name,
				   const char *spec);
extern ppd_option_t *ppdFindOption(ppd_file_t * ppd, const char *keyword);
extern int ppdIsMarked(ppd_file_t * ppd, const char *keyword,
		       const char *option);
extern ppd_status_t ppdLastError(int *line);
extern void ppdMarkDefaults(ppd_file_t * ppd);
extern int ppdMarkOption(ppd_file_t * ppd, const char *keyword,
			 const char *option);
extern ppd_file_t *ppdOpen(FILE * fp);
extern ppd_file_t *ppdOpenFd(int fd);
extern ppd_file_t *ppdOpenFile(const char *filename);
extern float ppdPageLength(ppd_file_t * ppd, const char *name);
extern ppd_size_t *ppdPageSize(ppd_file_t * ppd, const char *name);
extern float ppdPageWidth(ppd_file_t * ppd, const char *name);
extern void ppdSetConformance(ppd_conform_t c);
</SCREEN>
</SECT2>
</SECT1>
<SECT1 ID=libcupsman>
<TITLE>Interface Definitions for libcups</TITLE>
<PARA>
The interfaces defined on the following pages are included in libcups and are defined
by this specification.
Unless otherwise noted, these interfaces shall be included
in the source standard.
</PARA>
<PARA>
Other interfaces listed in <XREF LINKEND=libcups> shall behave as described
in the referenced base document.
</PARA>
<!-- This file is generated from the CUPS mxmldoc API documentation. -->
<!-- See api-*.xml in this directory.  Changes to this file may be   -->
<!-- overwritten; edit the XML file or, ideally, upstream source.    -->
<refentry id="libcups.cupsAddDest.1">
<refmeta>
<refentrytitle>cupsAddDest</refentrytitle>
<refmiscinfo>libcups</refmiscinfo>
</refmeta>

<refnamediv>
<refname>cupsAddDest</refname>
<indexterm id="ix.libcups.cupsAddDest.1">	<primary>cupsAddDest</primary></indexterm>
<refpurpose>Add a destination to the list of destinations.
</refpurpose>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;cups/cups.h&gt;
</funcsynopsisinfo>
<funcprototype>
<funcdef>int
<function>cupsAddDest</function>
</funcdef>
<paramdef>const char *
<parameter>name</parameter>
</paramdef>
<paramdef>const char *
<parameter>instance</parameter>
</paramdef>
<paramdef>int
<parameter>num_dests</parameter>
</paramdef>
<paramdef>cups_dest_t **
<parameter>dests</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Add a destination to the list of destinations.
</para>
<para>
This function cannot be used to add a new class or printer queue,
it only adds a new container of saved options for the named
destination or instance.
</para>
<para>
If the named destination already exists, the destination list is
returned unchanged.  Adding a new instance of a destination creates
a copy of that destination's options.
</para>
<para>
Use the cupsSaveDests() function to save the updated list of
destinations to the user's lpoptions file.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>New number of destinations</para>
</refsect1>
</refentry>


<!-- This file is generated from the CUPS mxmldoc API documentation. -->
<!-- See api-*.xml in this directory.  Changes to this file may be   -->
<!-- overwritten; edit the XML file or, ideally, upstream source.    -->
<refentry id="libcups.cupsAddOption.1">
<refmeta>
<refentrytitle>cupsAddOption</refentrytitle>
<refmiscinfo>libcups</refmiscinfo>
</refmeta>

<refnamediv>
<refname>cupsAddOption</refname>
<indexterm id="ix.libcups.cupsAddOption.1">	<primary>cupsAddOption</primary></indexterm>
<refpurpose>Add an option to an option array.</refpurpose>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;cups/cups.h&gt;
</funcsynopsisinfo>
<funcprototype>
<funcdef>int
<function>cupsAddOption</function>
</funcdef>
<paramdef>const char *
<parameter>name</parameter>
</paramdef>
<paramdef>const char *
<parameter>value</parameter>
</paramdef>
<paramdef>int
<parameter>num_options</parameter>
</paramdef>
<paramdef>cups_option_t **
<parameter>options</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Add an option to an option array.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>Number of options</para>
</refsect1>
</refentry>


<!-- This file is generated from the CUPS mxmldoc API documentation. -->
<!-- See api-*.xml in this directory.  Changes to this file may be   -->
<!-- overwritten; edit the XML file or, ideally, upstream source.    -->
<refentry id="libcups.cupsCancelJob.1">
<refmeta>
<refentrytitle>cupsCancelJob</refentrytitle>
<refmiscinfo>libcups</refmiscinfo>
</refmeta>

<refnamediv>
<refname>cupsCancelJob</refname>
<indexterm id="ix.libcups.cupsCancelJob.1">	<primary>cupsCancelJob</primary></indexterm>
<refpurpose>Cancel a print job on the default server.
</refpurpose>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;cups/cups.h&gt;
</funcsynopsisinfo>
<funcprototype>
<funcdef>int
<function>cupsCancelJob</function>
</funcdef>
<paramdef>const char *
<parameter>name</parameter>
</paramdef>
<paramdef>int
<parameter>job</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Cancel a print job on the default server.
</para>
<para>
Use the cupsLastError() and cupsLastErrorString() functions to get
the cause of any failure.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>1 on success, 0 on failure</para>
</refsect1>
</refentry>


<!-- This file is generated from the CUPS mxmldoc API documentation. -->
<!-- See api-*.xml in this directory.  Changes to this file may be   -->
<!-- overwritten; edit the XML file or, ideally, upstream source.    -->
<refentry id="libcups.cupsEncryption.1">
<refmeta>
<refentrytitle>cupsEncryption</refentrytitle>
<refmiscinfo>libcups</refmiscinfo>
</refmeta>

<refnamediv>
<refname>cupsEncryption</refname>
<indexterm id="ix.libcups.cupsEncryption.1">	<primary>cupsEncryption</primary></indexterm>
<refpurpose>Get the default encryption settings.
</refpurpose>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;cups/cups.h&gt;
</funcsynopsisinfo>
<funcprototype>
<funcdef>http_encryption_t
<function>cupsEncryption</function>
</funcdef>
<void>
</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Get the default encryption settings.
</para>
<para>
The default encryption setting comes from the CUPS_ENCRYPTION
environment variable, then the ~/.cupsrc file, and finally the
/etc/cups/client.conf file. If not set, the default is
HTTP_ENCRYPT_IF_REQUESTED.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>Encryption settings</para>
</refsect1>
</refentry>


<!-- This file is generated from the CUPS mxmldoc API documentation. -->
<!-- See api-*.xml in this directory.  Changes to this file may be   -->
<!-- overwritten; edit the XML file or, ideally, upstream source.    -->
<refentry id="libcups.cupsFreeDests.1">
<refmeta>
<refentrytitle>cupsFreeDests</refentrytitle>
<refmiscinfo>libcups</refmiscinfo>
</refmeta>

<refnamediv>
<refname>cupsFreeDests</refname>
<indexterm id="ix.libcups.cupsFreeDests.1">	<primary>cupsFreeDests</primary></indexterm>
<refpurpose>Free the memory used by the list of destinations.</refpurpose>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;cups/cups.h&gt;
</funcsynopsisinfo>
<funcprototype>
<funcdef>void
<function>cupsFreeDests</function>
</funcdef>
<paramdef>int
<parameter>num_dests</parameter>
</paramdef>
<paramdef>cups_dest_t *
<parameter>dests</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Free the memory used by the list of destinations.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>This function does not return a value.</para>
</refsect1>
</refentry>


<!-- This file is generated from the CUPS mxmldoc API documentation. -->
<!-- See api-*.xml in this directory.  Changes to this file may be   -->
<!-- overwritten; edit the XML file or, ideally, upstream source.    -->
<refentry id="libcups.cupsFreeJobs.1">
<refmeta>
<refentrytitle>cupsFreeJobs</refentrytitle>
<refmiscinfo>libcups</refmiscinfo>
</refmeta>

<refnamediv>
<refname>cupsFreeJobs</refname>
<indexterm id="ix.libcups.cupsFreeJobs.1">	<primary>cupsFreeJobs</primary></indexterm>
<refpurpose>Free memory used by job data.</refpurpose>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;cups/cups.h&gt;
</funcsynopsisinfo>
<funcprototype>
<funcdef>void
<function>cupsFreeJobs</function>
</funcdef>
<paramdef>int
<parameter>num_jobs</parameter>
</paramdef>
<paramdef>cups_job_t *
<parameter>jobs</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Free memory used by job data.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>This function does not return a value.</para>
</refsect1>
</refentry>


<!-- This file is generated from the CUPS mxmldoc API documentation. -->
<!-- See api-*.xml in this directory.  Changes to this file may be   -->
<!-- overwritten; edit the XML file or, ideally, upstream source.    -->
<refentry id="libcups.cupsFreeOptions.1">
<refmeta>
<refentrytitle>cupsFreeOptions</refentrytitle>
<refmiscinfo>libcups</refmiscinfo>
</refmeta>

<refnamediv>
<refname>cupsFreeOptions</refname>
<indexterm id="ix.libcups.cupsFreeOptions.1">	<primary>cupsFreeOptions</primary></indexterm>
<refpurpose>Free all memory used by options.</refpurpose>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;cups/cups.h&gt;
</funcsynopsisinfo>
<funcprototype>
<funcdef>void
<function>cupsFreeOptions</function>
</funcdef>
<paramdef>int
<parameter>num_options</parameter>
</paramdef>
<paramdef>cups_option_t *
<parameter>options</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Free all memory used by options.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>This function does not return a value.</para>
</refsect1>
</refentry>


<!-- This file is generated from the CUPS mxmldoc API documentation. -->
<!-- See api-*.xml in this directory.  Changes to this file may be   -->
<!-- overwritten; edit the XML file or, ideally, upstream source.    -->
<refentry id="libcups.cupsGetDefault.1">
<refmeta>
<refentrytitle>cupsGetDefault</refentrytitle>
<refmiscinfo>libcups</refmiscinfo>
</refmeta>

<refnamediv>
<refname>cupsGetDefault</refname>
<indexterm id="ix.libcups.cupsGetDefault.1">	<primary>cupsGetDefault</primary></indexterm>
<refpurpose>Get the default printer or class for the default server.
</refpurpose>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;cups/cups.h&gt;
</funcsynopsisinfo>
<funcprototype>
<funcdef>const char *
<function>cupsGetDefault</function>
</funcdef>
<void>
</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Get the default printer or class for the default server.
</para>
<para>
This function returns the default printer or class as defined by
the LPDEST or PRINTER environment variables. If these environment
variables are not set, the server default destination is returned.
Applications should use the cupsGetDests() and cupsGetDest() functions
to get the user-defined default printer, as this function does not
support the lpoptions-defined default printer.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>Default printer or NULL</para>
</refsect1>
</refentry>


<!-- This file is generated from the CUPS mxmldoc API documentation. -->
<!-- See api-*.xml in this directory.  Changes to this file may be   -->
<!-- overwritten; edit the XML file or, ideally, upstream source.    -->
<refentry id="libcups.cupsGetDest.1">
<refmeta>
<refentrytitle>cupsGetDest</refentrytitle>
<refmiscinfo>libcups</refmiscinfo>
</refmeta>

<refnamediv>
<refname>cupsGetDest</refname>
<indexterm id="ix.libcups.cupsGetDest.1">	<primary>cupsGetDest</primary></indexterm>
<refpurpose>Get the named destination from the list.
</refpurpose>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;cups/cups.h&gt;
</funcsynopsisinfo>
<funcprototype>
<funcdef>cups_dest_t *
<function>cupsGetDest</function>
</funcdef>
<paramdef>const char *
<parameter>name</parameter>
</paramdef>
<paramdef>const char *
<parameter>instance</parameter>
</paramdef>
<paramdef>int
<parameter>num_dests</parameter>
</paramdef>
<paramdef>cups_dest_t *
<parameter>dests</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Get the named destination from the list.
</para>
<para>
Use the cupsGetDests() or cupsGetDests2() functions to get a
list of supported destinations for the current user.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>Destination pointer or NULL</para>
</refsect1>
</refentry>


<!-- This file is generated from the CUPS mxmldoc API documentation. -->
<!-- See api-*.xml in this directory.  Changes to this file may be   -->
<!-- overwritten; edit the XML file or, ideally, upstream source.    -->
<refentry id="libcups.cupsGetDests.1">
<refmeta>
<refentrytitle>cupsGetDests</refentrytitle>
<refmiscinfo>libcups</refmiscinfo>
</refmeta>

<refnamediv>
<refname>cupsGetDests</refname>
<indexterm id="ix.libcups.cupsGetDests.1">	<primary>cupsGetDests</primary></indexterm>
<refpurpose>Get the list of destinations from the default server.
</refpurpose>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;cups/cups.h&gt;
</funcsynopsisinfo>
<funcprototype>
<funcdef>int
<function>cupsGetDests</function>
</funcdef>
<paramdef>cups_dest_t **
<parameter>dests</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Get the list of destinations from the default server.
</para>
<para>
Starting with CUPS 1.2, the returned list of destinations include the
printer-info, printer-is-accepting-jobs, printer-is-shared,
printer-make-and-model, printer-state, printer-state-change-time,
printer-state-reasons, and printer-type attributes as options.
</para>
<para>
Use the cupsFreeDests() function to free the destination list and
the cupsGetDest() function to find a particular destination.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>Number of destinations</para>
</refsect1>
</refentry>


<!-- This file is generated from the CUPS mxmldoc API documentation. -->
<!-- See api-*.xml in this directory.  Changes to this file may be   -->
<!-- overwritten; edit the XML file or, ideally, upstream source.    -->
<refentry id="libcups.cupsGetJobs.1">
<refmeta>
<refentrytitle>cupsGetJobs</refentrytitle>
<refmiscinfo>libcups</refmiscinfo>
</refmeta>

<refnamediv>
<refname>cupsGetJobs</refname>
<indexterm id="ix.libcups.cupsGetJobs.1">	<primary>cupsGetJobs</primary></indexterm>
<refpurpose>Get the jobs from the default server.</refpurpose>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;cups/cups.h&gt;
</funcsynopsisinfo>
<funcprototype>
<funcdef>int
<function>cupsGetJobs</function>
</funcdef>
<paramdef>cups_job_t **
<parameter>jobs</parameter>
</paramdef>
<paramdef>const char *
<parameter>mydest</parameter>
</paramdef>
<paramdef>int
<parameter>myjobs</parameter>
</paramdef>
<paramdef>int
<parameter>completed</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Get the jobs from the default server.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>Number of jobs</para>
</refsect1>
</refentry>


<!-- This file is generated from the CUPS mxmldoc API documentation. -->
<!-- See api-*.xml in this directory.  Changes to this file may be   -->
<!-- overwritten; edit the XML file or, ideally, upstream source.    -->
<refentry id="libcups.cupsGetOption.1">
<refmeta>
<refentrytitle>cupsGetOption</refentrytitle>
<refmiscinfo>libcups</refmiscinfo>
</refmeta>

<refnamediv>
<refname>cupsGetOption</refname>
<indexterm id="ix.libcups.cupsGetOption.1">	<primary>cupsGetOption</primary></indexterm>
<refpurpose>Get an option value.</refpurpose>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;cups/cups.h&gt;
</funcsynopsisinfo>
<funcprototype>
<funcdef>const char *
<function>cupsGetOption</function>
</funcdef>
<paramdef>const char *
<parameter>name</parameter>
</paramdef>
<paramdef>int
<parameter>num_options</parameter>
</paramdef>
<paramdef>cups_option_t *
<parameter>options</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Get an option value.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>Option value or NULL</para>
</refsect1>
</refentry>


<!-- This file is generated from the CUPS mxmldoc API documentation. -->
<!-- See api-*.xml in this directory.  Changes to this file may be   -->
<!-- overwritten; edit the XML file or, ideally, upstream source.    -->
<refentry id="libcups.cupsGetPPD.1">
<refmeta>
<refentrytitle>cupsGetPPD</refentrytitle>
<refmiscinfo>libcups</refmiscinfo>
</refmeta>

<refnamediv>
<refname>cupsGetPPD</refname>
<indexterm id="ix.libcups.cupsGetPPD.1">	<primary>cupsGetPPD</primary></indexterm>
<refpurpose>Get the PPD file for a printer on the default server.
</refpurpose>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;cups/cups.h&gt;
</funcsynopsisinfo>
<funcprototype>
<funcdef>const char *
<function>cupsGetPPD</function>
</funcdef>
<paramdef>const char *
<parameter>name</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Get the PPD file for a printer on the default server.
</para>
<para>
For classes, cupsGetPPD() returns the PPD file for the first printer
in the class.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>Filename for PPD file</para>
</refsect1>
</refentry>


<!-- This file is generated from the CUPS mxmldoc API documentation. -->
<!-- See api-*.xml in this directory.  Changes to this file may be   -->
<!-- overwritten; edit the XML file or, ideally, upstream source.    -->
<refentry id="libcups.cupsGetPassword.1">
<refmeta>
<refentrytitle>cupsGetPassword</refentrytitle>
<refmiscinfo>libcups</refmiscinfo>
</refmeta>

<refnamediv>
<refname>cupsGetPassword</refname>
<indexterm id="ix.libcups.cupsGetPassword.1">	<primary>cupsGetPassword</primary></indexterm>
<refpurpose>Get a password from the user.
</refpurpose>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;cups/cups.h&gt;
</funcsynopsisinfo>
<funcprototype>
<funcdef>const char *
<function>cupsGetPassword</function>
</funcdef>
<paramdef>const char *
<parameter>prompt</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Get a password from the user.
</para>
<para>
Uses the current password callback function. Returns NULL if the
user does not provide a password.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>Password</para>
</refsect1>
</refentry>


<!-- This file is generated from the CUPS mxmldoc API documentation. -->
<!-- See api-*.xml in this directory.  Changes to this file may be   -->
<!-- overwritten; edit the XML file or, ideally, upstream source.    -->
<refentry id="libcups.cupsLangEncoding.1">
<refmeta>
<refentrytitle>cupsLangEncoding</refentrytitle>
<refmiscinfo>libcups</refmiscinfo>
</refmeta>

<refnamediv>
<refname>cupsLangEncoding</refname>
<indexterm id="ix.libcups.cupsLangEncoding.1">	<primary>cupsLangEncoding</primary></indexterm>
<refpurpose>Return the character encoding (us-ascii, etc.)
</refpurpose>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;cups/cups.h&gt;
</funcsynopsisinfo>
<funcprototype>
<funcdef>const char *
<function>cupsLangEncoding</function>
</funcdef>
<paramdef>cups_lang_t *
<parameter>lang</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Return the character encoding (us-ascii, etc.)
for the given language.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>Character encoding</para>
</refsect1>
</refentry>


<!-- This file is generated from the CUPS mxmldoc API documentation. -->
<!-- See api-*.xml in this directory.  Changes to this file may be   -->
<!-- overwritten; edit the XML file or, ideally, upstream source.    -->
<refentry id="libcups.cupsLangFlush.1">
<refmeta>
<refentrytitle>cupsLangFlush</refentrytitle>
<refmiscinfo>libcups</refmiscinfo>
</refmeta>

<refnamediv>
<refname>cupsLangFlush</refname>
<indexterm id="ix.libcups.cupsLangFlush.1">	<primary>cupsLangFlush</primary></indexterm>
<refpurpose>Flush all language data out of the cache.</refpurpose>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;cups/cups.h&gt;
</funcsynopsisinfo>
<funcprototype>
<funcdef>void
<function>cupsLangFlush</function>
</funcdef>
<void>
</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Flush all language data out of the cache.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>This function does not return a value.</para>
</refsect1>
</refentry>


<!-- This file is generated from the CUPS mxmldoc API documentation. -->
<!-- See api-*.xml in this directory.  Changes to this file may be   -->
<!-- overwritten; edit the XML file or, ideally, upstream source.    -->
<refentry id="libcups.cupsLangFree.1">
<refmeta>
<refentrytitle>cupsLangFree</refentrytitle>
<refmiscinfo>libcups</refmiscinfo>
</refmeta>

<refnamediv>
<refname>cupsLangFree</refname>
<indexterm id="ix.libcups.cupsLangFree.1">	<primary>cupsLangFree</primary></indexterm>
<refpurpose>Free language data.
</refpurpose>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;cups/cups.h&gt;
</funcsynopsisinfo>
<funcprototype>
<funcdef>void
<function>cupsLangFree</function>
</funcdef>
<paramdef>cups_lang_t *
<parameter>lang</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Free language data.
</para>
<para>
This does not actually free anything; use cupsLangFlush() for that.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>This function does not return a value.</para>
</refsect1>
</refentry>


<!-- This file is generated from the CUPS mxmldoc API documentation. -->
<!-- See api-*.xml in this directory.  Changes to this file may be   -->
<!-- overwritten; edit the XML file or, ideally, upstream source.    -->
<refentry id="libcups.cupsLangGet.1">
<refmeta>
<refentrytitle>cupsLangGet</refentrytitle>
<refmiscinfo>libcups</refmiscinfo>
</refmeta>

<refnamediv>
<refname>cupsLangGet</refname>
<indexterm id="ix.libcups.cupsLangGet.1">	<primary>cupsLangGet</primary></indexterm>
<refpurpose>Get a language.</refpurpose>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;cups/cups.h&gt;
</funcsynopsisinfo>
<funcprototype>
<funcdef>cups_lang_t *
<function>cupsLangGet</function>
</funcdef>
<paramdef>const char *
<parameter>language</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Get a language.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>Language data</para>
</refsect1>
</refentry>


<!-- This file is generated from the CUPS mxmldoc API documentation. -->
<!-- See api-*.xml in this directory.  Changes to this file may be   -->
<!-- overwritten; edit the XML file or, ideally, upstream source.    -->
<refentry id="libcups.cupsLastError.1">
<refmeta>
<refentrytitle>cupsLastError</refentrytitle>
<refmiscinfo>libcups</refmiscinfo>
</refmeta>

<refnamediv>
<refname>cupsLastError</refname>
<indexterm id="ix.libcups.cupsLastError.1">	<primary>cupsLastError</primary></indexterm>
<refpurpose>Return the last IPP status code.</refpurpose>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;cups/cups.h&gt;
</funcsynopsisinfo>
<funcprototype>
<funcdef>ipp_status_t
<function>cupsLastError</function>
</funcdef>
<void>
</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Return the last IPP status code.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>IPP status code from last request</para>
</refsect1>
</refentry>


<!-- This file is generated from the CUPS mxmldoc API documentation. -->
<!-- See api-*.xml in this directory.  Changes to this file may be   -->
<!-- overwritten; edit the XML file or, ideally, upstream source.    -->
<refentry id="libcups.cupsMarkOptions.1">
<refmeta>
<refentrytitle>cupsMarkOptions</refentrytitle>
<refmiscinfo>libcups</refmiscinfo>
</refmeta>

<refnamediv>
<refname>cupsMarkOptions</refname>
<indexterm id="ix.libcups.cupsMarkOptions.1">	<primary>cupsMarkOptions</primary></indexterm>
<refpurpose>Mark command-line options in a PPD file.</refpurpose>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;cups/cups.h&gt;
</funcsynopsisinfo>
<funcprototype>
<funcdef>int
<function>cupsMarkOptions</function>
</funcdef>
<paramdef>ppd_file_t *
<parameter>ppd</parameter>
</paramdef>
<paramdef>int
<parameter>num_options</parameter>
</paramdef>
<paramdef>cups_option_t *
<parameter>options</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Mark command-line options in a PPD file.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>1 if conflicting</para>
</refsect1>
</refentry>


<!-- This file is generated from the CUPS mxmldoc API documentation. -->
<!-- See api-*.xml in this directory.  Changes to this file may be   -->
<!-- overwritten; edit the XML file or, ideally, upstream source.    -->
<refentry id="libcups.cupsParseOptions.1">
<refmeta>
<refentrytitle>cupsParseOptions</refentrytitle>
<refmiscinfo>libcups</refmiscinfo>
</refmeta>

<refnamediv>
<refname>cupsParseOptions</refname>
<indexterm id="ix.libcups.cupsParseOptions.1">	<primary>cupsParseOptions</primary></indexterm>
<refpurpose>Parse options from a command-line argument.
</refpurpose>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;cups/cups.h&gt;
</funcsynopsisinfo>
<funcprototype>
<funcdef>int
<function>cupsParseOptions</function>
</funcdef>
<paramdef>const char *
<parameter>arg</parameter>
</paramdef>
<paramdef>int
<parameter>num_options</parameter>
</paramdef>
<paramdef>cups_option_t **
<parameter>options</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Parse options from a command-line argument.
</para>
<para>
This function converts space-delimited name/value pairs according
to the PAPI text option ABNF specification. Collection values
("name={a=... b=... c=...}") are stored with the curley brackets
intact - use cupsParseOptions() on the value to extract the collection
attributes.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>Number of options found</para>
</refsect1>
</refentry>


<!-- This file is generated from the CUPS mxmldoc API documentation. -->
<!-- See api-*.xml in this directory.  Changes to this file may be   -->
<!-- overwritten; edit the XML file or, ideally, upstream source.    -->
<refentry id="libcups.cupsPrintFile.1">
<refmeta>
<refentrytitle>cupsPrintFile</refentrytitle>
<refmiscinfo>libcups</refmiscinfo>
</refmeta>

<refnamediv>
<refname>cupsPrintFile</refname>
<indexterm id="ix.libcups.cupsPrintFile.1">	<primary>cupsPrintFile</primary></indexterm>
<refpurpose>Print a file to a printer or class on the default server.</refpurpose>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;cups/cups.h&gt;
</funcsynopsisinfo>
<funcprototype>
<funcdef>int
<function>cupsPrintFile</function>
</funcdef>
<paramdef>const char *
<parameter>name</parameter>
</paramdef>
<paramdef>const char *
<parameter>filename</parameter>
</paramdef>
<paramdef>const char *
<parameter>title</parameter>
</paramdef>
<paramdef>int
<parameter>num_options</parameter>
</paramdef>
<paramdef>cups_option_t *
<parameter>options</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Print a file to a printer or class on the default server.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>Job ID</para>
</refsect1>
</refentry>


<!-- This file is generated from the CUPS mxmldoc API documentation. -->
<!-- See api-*.xml in this directory.  Changes to this file may be   -->
<!-- overwritten; edit the XML file or, ideally, upstream source.    -->
<refentry id="libcups.cupsPrintFiles.1">
<refmeta>
<refentrytitle>cupsPrintFiles</refentrytitle>
<refmiscinfo>libcups</refmiscinfo>
</refmeta>

<refnamediv>
<refname>cupsPrintFiles</refname>
<indexterm id="ix.libcups.cupsPrintFiles.1">	<primary>cupsPrintFiles</primary></indexterm>
<refpurpose>Print one or more files to a printer or class on the
</refpurpose>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;cups/cups.h&gt;
</funcsynopsisinfo>
<funcprototype>
<funcdef>int
<function>cupsPrintFiles</function>
</funcdef>
<paramdef>const char *
<parameter>name</parameter>
</paramdef>
<paramdef>int
<parameter>num_files</parameter>
</paramdef>
<paramdef>const char **
<parameter>files</parameter>
</paramdef>
<paramdef>const char *
<parameter>title</parameter>
</paramdef>
<paramdef>int
<parameter>num_options</parameter>
</paramdef>
<paramdef>cups_option_t *
<parameter>options</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Print one or more files to a printer or class on the
default server.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>Job ID</para>
</refsect1>
</refentry>


<!-- This file is generated from the CUPS mxmldoc API documentation. -->
<!-- See api-*.xml in this directory.  Changes to this file may be   -->
<!-- overwritten; edit the XML file or, ideally, upstream source.    -->
<refentry id="libcups.cupsServer.1">
<refmeta>
<refentrytitle>cupsServer</refentrytitle>
<refmiscinfo>libcups</refmiscinfo>
</refmeta>

<refnamediv>
<refname>cupsServer</refname>
<indexterm id="ix.libcups.cupsServer.1">	<primary>cupsServer</primary></indexterm>
<refpurpose>Return the hostname/address of the default server.
</refpurpose>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;cups/cups.h&gt;
</funcsynopsisinfo>
<funcprototype>
<funcdef>const char *
<function>cupsServer</function>
</funcdef>
<void>
</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Return the hostname/address of the default server.
</para>
<para>
The returned value can be a fully-qualified hostname, a numeric
IPv4 or IPv6 address, or a domain socket pathname.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>Server name</para>
</refsect1>
</refentry>


<!-- This file is generated from the CUPS mxmldoc API documentation. -->
<!-- See api-*.xml in this directory.  Changes to this file may be   -->
<!-- overwritten; edit the XML file or, ideally, upstream source.    -->
<refentry id="libcups.cupsSetDests.1">
<refmeta>
<refentrytitle>cupsSetDests</refentrytitle>
<refmiscinfo>libcups</refmiscinfo>
</refmeta>

<refnamediv>
<refname>cupsSetDests</refname>
<indexterm id="ix.libcups.cupsSetDests.1">	<primary>cupsSetDests</primary></indexterm>
<refpurpose>Save the list of destinations for the default server.
</refpurpose>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;cups/cups.h&gt;
</funcsynopsisinfo>
<funcprototype>
<funcdef>void
<function>cupsSetDests</function>
</funcdef>
<paramdef>int
<parameter>num_dests</parameter>
</paramdef>
<paramdef>cups_dest_t *
<parameter>dests</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Save the list of destinations for the default server.
</para>
<para>
This function saves the destinations to /etc/cups/lpoptions when run
as root and ~/.cups/lpoptions when run as a normal user.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>This function does not return a value.</para>
</refsect1>
</refentry>


<!-- This file is generated from the CUPS mxmldoc API documentation. -->
<!-- See api-*.xml in this directory.  Changes to this file may be   -->
<!-- overwritten; edit the XML file or, ideally, upstream source.    -->
<refentry id="libcups.cupsSetEncryption.1">
<refmeta>
<refentrytitle>cupsSetEncryption</refentrytitle>
<refmiscinfo>libcups</refmiscinfo>
</refmeta>

<refnamediv>
<refname>cupsSetEncryption</refname>
<indexterm id="ix.libcups.cupsSetEncryption.1">	<primary>cupsSetEncryption</primary></indexterm>
<refpurpose>Set the encryption preference.</refpurpose>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;cups/cups.h&gt;
</funcsynopsisinfo>
<funcprototype>
<funcdef>void
<function>cupsSetEncryption</function>
</funcdef>
<paramdef>http_encryption_t
<parameter>e</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Set the encryption preference.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>This function does not return a value.</para>
</refsect1>
</refentry>


<!-- This file is generated from the CUPS mxmldoc API documentation. -->
<!-- See api-*.xml in this directory.  Changes to this file may be   -->
<!-- overwritten; edit the XML file or, ideally, upstream source.    -->
<refentry id="libcups.cupsSetPasswordCB.1">
<refmeta>
<refentrytitle>cupsSetPasswordCB</refentrytitle>
<refmiscinfo>libcups</refmiscinfo>
</refmeta>

<refnamediv>
<refname>cupsSetPasswordCB</refname>
<indexterm id="ix.libcups.cupsSetPasswordCB.1">	<primary>cupsSetPasswordCB</primary></indexterm>
<refpurpose>Set the password callback for CUPS.
</refpurpose>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;cups/cups.h&gt;
</funcsynopsisinfo>
<funcprototype>
<funcdef>void
<function>cupsSetPasswordCB</function>
</funcdef>
<paramdef>cups_password_cb_t
<parameter>cb</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Set the password callback for CUPS.
</para>
<para>
Pass NULL to restore the default (console) password callback.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>This function does not return a value.</para>
</refsect1>
</refentry>


<!-- This file is generated from the CUPS mxmldoc API documentation. -->
<!-- See api-*.xml in this directory.  Changes to this file may be   -->
<!-- overwritten; edit the XML file or, ideally, upstream source.    -->
<refentry id="libcups.cupsSetServer.1">
<refmeta>
<refentrytitle>cupsSetServer</refentrytitle>
<refmiscinfo>libcups</refmiscinfo>
</refmeta>

<refnamediv>
<refname>cupsSetServer</refname>
<indexterm id="ix.libcups.cupsSetServer.1">	<primary>cupsSetServer</primary></indexterm>
<refpurpose>Set the default server name.
</refpurpose>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;cups/cups.h&gt;
</funcsynopsisinfo>
<funcprototype>
<funcdef>void
<function>cupsSetServer</function>
</funcdef>
<paramdef>const char *
<parameter>server</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Set the default server name.
</para>
<para>
The "server" string can be a fully-qualified hostname, a numeric
IPv4 or IPv6 address, or a domain socket pathname. Pass NULL to
restore the default server name.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>This function does not return a value.</para>
</refsect1>
</refentry>


<!-- This file is generated from the CUPS mxmldoc API documentation. -->
<!-- See api-*.xml in this directory.  Changes to this file may be   -->
<!-- overwritten; edit the XML file or, ideally, upstream source.    -->
<refentry id="libcups.cupsSetUser.1">
<refmeta>
<refentrytitle>cupsSetUser</refentrytitle>
<refmiscinfo>libcups</refmiscinfo>
</refmeta>

<refnamediv>
<refname>cupsSetUser</refname>
<indexterm id="ix.libcups.cupsSetUser.1">	<primary>cupsSetUser</primary></indexterm>
<refpurpose>Set the default user name.
</refpurpose>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;cups/cups.h&gt;
</funcsynopsisinfo>
<funcprototype>
<funcdef>void
<function>cupsSetUser</function>
</funcdef>
<paramdef>const char *
<parameter>user</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Set the default user name.
</para>
<para>
Pass NULL to restore the default user name.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>This function does not return a value.</para>
</refsect1>
</refentry>


<!-- This file is generated from the CUPS mxmldoc API documentation. -->
<!-- See api-*.xml in this directory.  Changes to this file may be   -->
<!-- overwritten; edit the XML file or, ideally, upstream source.    -->
<refentry id="libcups.cupsTempFd.1">
<refmeta>
<refentrytitle>cupsTempFd</refentrytitle>
<refmiscinfo>libcups</refmiscinfo>
</refmeta>

<refnamediv>
<refname>cupsTempFd</refname>
<indexterm id="ix.libcups.cupsTempFd.1">	<primary>cupsTempFd</primary></indexterm>
<refpurpose>Creates a temporary file.
</refpurpose>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;cups/cups.h&gt;
</funcsynopsisinfo>
<funcprototype>
<funcdef>int
<function>cupsTempFd</function>
</funcdef>
<paramdef>char *
<parameter>filename</parameter>
</paramdef>
<paramdef>int
<parameter>len</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Creates a temporary file.
</para>
<para>
The temporary filename is returned in the filename buffer.
The temporary file is opened for reading and writing.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>New file descriptor or -1 on error</para>
</refsect1>
</refentry>


<!-- This file is generated from the CUPS mxmldoc API documentation. -->
<!-- See api-*.xml in this directory.  Changes to this file may be   -->
<!-- overwritten; edit the XML file or, ideally, upstream source.    -->
<refentry id="libcups.cupsUser.1">
<refmeta>
<refentrytitle>cupsUser</refentrytitle>
<refmiscinfo>libcups</refmiscinfo>
</refmeta>

<refnamediv>
<refname>cupsUser</refname>
<indexterm id="ix.libcups.cupsUser.1">	<primary>cupsUser</primary></indexterm>
<refpurpose>Return the current user's name.</refpurpose>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;cups/cups.h&gt;
</funcsynopsisinfo>
<funcprototype>
<funcdef>const char *
<function>cupsUser</function>
</funcdef>
<void>
</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Return the current user's name.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>User name</para>
</refsect1>
</refentry>


<!-- This file is generated from the CUPS mxmldoc API documentation. -->
<!-- See api-*.xml in this directory.  Changes to this file may be   -->
<!-- overwritten; edit the XML file or, ideally, upstream source.    -->
<refentry id="libcups.ppdClose.1">
<refmeta>
<refentrytitle>ppdClose</refentrytitle>
<refmiscinfo>libcups</refmiscinfo>
</refmeta>

<refnamediv>
<refname>ppdClose</refname>
<indexterm id="ix.libcups.ppdClose.1">	<primary>ppdClose</primary></indexterm>
<refpurpose>Free all memory used by the PPD file.</refpurpose>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;cups/cups.h&gt;
</funcsynopsisinfo>
<funcprototype>
<funcdef>void
<function>ppdClose</function>
</funcdef>
<paramdef>ppd_file_t *
<parameter>ppd</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Free all memory used by the PPD file.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>This function does not return a value.</para>
</refsect1>
</refentry>


<!-- This file is generated from the CUPS mxmldoc API documentation. -->
<!-- See api-*.xml in this directory.  Changes to this file may be   -->
<!-- overwritten; edit the XML file or, ideally, upstream source.    -->
<refentry id="libcups.ppdCollect.1">
<refmeta>
<refentrytitle>ppdCollect</refentrytitle>
<refmiscinfo>libcups</refmiscinfo>
</refmeta>

<refnamediv>
<refname>ppdCollect</refname>
<indexterm id="ix.libcups.ppdCollect.1">	<primary>ppdCollect</primary></indexterm>
<refpurpose>Collect all marked options that reside in the specified
</refpurpose>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;cups/cups.h&gt;
</funcsynopsisinfo>
<funcprototype>
<funcdef>int
<function>ppdCollect</function>
</funcdef>
<paramdef>ppd_file_t *
<parameter>ppd</parameter>
</paramdef>
<paramdef>ppd_section_t
<parameter>section</parameter>
</paramdef>
<paramdef>ppd_choice_t ***
<parameter>choices</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Collect all marked options that reside in the specified
section.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>Number of options marked</para>
</refsect1>
</refentry>


<!-- This file is generated from the CUPS mxmldoc API documentation. -->
<!-- See api-*.xml in this directory.  Changes to this file may be   -->
<!-- overwritten; edit the XML file or, ideally, upstream source.    -->
<refentry id="libcups.ppdConflicts.1">
<refmeta>
<refentrytitle>ppdConflicts</refentrytitle>
<refmiscinfo>libcups</refmiscinfo>
</refmeta>

<refnamediv>
<refname>ppdConflicts</refname>
<indexterm id="ix.libcups.ppdConflicts.1">	<primary>ppdConflicts</primary></indexterm>
<refpurpose>Check to see if there are any conflicts.</refpurpose>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;cups/cups.h&gt;
</funcsynopsisinfo>
<funcprototype>
<funcdef>int
<function>ppdConflicts</function>
</funcdef>
<paramdef>ppd_file_t *
<parameter>ppd</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Check to see if there are any conflicts.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>Number of conflicts found</para>
</refsect1>
</refentry>


<!-- This file is generated from the CUPS mxmldoc API documentation. -->
<!-- See api-*.xml in this directory.  Changes to this file may be   -->
<!-- overwritten; edit the XML file or, ideally, upstream source.    -->
<refentry id="libcups.ppdEmit.1">
<refmeta>
<refentrytitle>ppdEmit</refentrytitle>
<refmiscinfo>libcups</refmiscinfo>
</refmeta>

<refnamediv>
<refname>ppdEmit</refname>
<indexterm id="ix.libcups.ppdEmit.1">	<primary>ppdEmit</primary></indexterm>
<refpurpose>Emit code for marked options to a file.</refpurpose>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;cups/cups.h&gt;
</funcsynopsisinfo>
<funcprototype>
<funcdef>int
<function>ppdEmit</function>
</funcdef>
<paramdef>ppd_file_t *
<parameter>ppd</parameter>
</paramdef>
<paramdef>FILE *
<parameter>fp</parameter>
</paramdef>
<paramdef>ppd_section_t
<parameter>section</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Emit code for marked options to a file.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>0 on success, -1 on failure</para>
</refsect1>
</refentry>


<!-- This file is generated from the CUPS mxmldoc API documentation. -->
<!-- See api-*.xml in this directory.  Changes to this file may be   -->
<!-- overwritten; edit the XML file or, ideally, upstream source.    -->
<refentry id="libcups.ppdEmitFd.1">
<refmeta>
<refentrytitle>ppdEmitFd</refentrytitle>
<refmiscinfo>libcups</refmiscinfo>
</refmeta>

<refnamediv>
<refname>ppdEmitFd</refname>
<indexterm id="ix.libcups.ppdEmitFd.1">	<primary>ppdEmitFd</primary></indexterm>
<refpurpose>Emit code for marked options to a file.</refpurpose>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;cups/cups.h&gt;
</funcsynopsisinfo>
<funcprototype>
<funcdef>int
<function>ppdEmitFd</function>
</funcdef>
<paramdef>ppd_file_t *
<parameter>ppd</parameter>
</paramdef>
<paramdef>int
<parameter>fd</parameter>
</paramdef>
<paramdef>ppd_section_t
<parameter>section</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Emit code for marked options to a file.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>0 on success, -1 on failure</para>
</refsect1>
</refentry>


<!-- This file is generated from the CUPS mxmldoc API documentation. -->
<!-- See api-*.xml in this directory.  Changes to this file may be   -->
<!-- overwritten; edit the XML file or, ideally, upstream source.    -->
<refentry id="libcups.ppdEmitJCL.1">
<refmeta>
<refentrytitle>ppdEmitJCL</refentrytitle>
<refmiscinfo>libcups</refmiscinfo>
</refmeta>

<refnamediv>
<refname>ppdEmitJCL</refname>
<indexterm id="ix.libcups.ppdEmitJCL.1">	<primary>ppdEmitJCL</primary></indexterm>
<refpurpose>Emit code for JCL options to a file.</refpurpose>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;cups/cups.h&gt;
</funcsynopsisinfo>
<funcprototype>
<funcdef>int
<function>ppdEmitJCL</function>
</funcdef>
<paramdef>ppd_file_t *
<parameter>ppd</parameter>
</paramdef>
<paramdef>FILE *
<parameter>fp</parameter>
</paramdef>
<paramdef>int
<parameter>job_id</parameter>
</paramdef>
<paramdef>const char *
<parameter>user</parameter>
</paramdef>
<paramdef>const char *
<parameter>title</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Emit code for JCL options to a file.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>0 on success, -1 on failure</para>
</refsect1>
</refentry>


<!-- This file is generated from the CUPS mxmldoc API documentation. -->
<!-- See api-*.xml in this directory.  Changes to this file may be   -->
<!-- overwritten; edit the XML file or, ideally, upstream source.    -->
<refentry id="libcups.ppdErrorString.1">
<refmeta>
<refentrytitle>ppdErrorString</refentrytitle>
<refmiscinfo>libcups</refmiscinfo>
</refmeta>

<refnamediv>
<refname>ppdErrorString</refname>
<indexterm id="ix.libcups.ppdErrorString.1">	<primary>ppdErrorString</primary></indexterm>
<refpurpose>Returns the text assocated with a status.
</refpurpose>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;cups/cups.h&gt;
</funcsynopsisinfo>
<funcprototype>
<funcdef>const char *
<function>ppdErrorString</function>
</funcdef>
<paramdef>ppd_status_t
<parameter>status</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Returns the text assocated with a status.
</para>
<para>

</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>Status string</para>
</refsect1>
</refentry>


<!-- This file is generated from the CUPS mxmldoc API documentation. -->
<!-- See api-*.xml in this directory.  Changes to this file may be   -->
<!-- overwritten; edit the XML file or, ideally, upstream source.    -->
<refentry id="libcups.ppdFindAttr.1">
<refmeta>
<refentrytitle>ppdFindAttr</refentrytitle>
<refmiscinfo>libcups</refmiscinfo>
</refmeta>

<refnamediv>
<refname>ppdFindAttr</refname>
<indexterm id="ix.libcups.ppdFindAttr.1">	<primary>ppdFindAttr</primary></indexterm>
<refpurpose>Find the first matching attribute...
</refpurpose>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;cups/cups.h&gt;
</funcsynopsisinfo>
<funcprototype>
<funcdef>ppd_attr_t *
<function>ppdFindAttr</function>
</funcdef>
<paramdef>ppd_file_t *
<parameter>ppd</parameter>
</paramdef>
<paramdef>const char *
<parameter>name</parameter>
</paramdef>
<paramdef>const char *
<parameter>spec</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Find the first matching attribute...
</para>
<para>

</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>Attribute or NULL if not found</para>
</refsect1>
</refentry>


<!-- This file is generated from the CUPS mxmldoc API documentation. -->
<!-- See api-*.xml in this directory.  Changes to this file may be   -->
<!-- overwritten; edit the XML file or, ideally, upstream source.    -->
<refentry id="libcups.ppdFindChoice.1">
<refmeta>
<refentrytitle>ppdFindChoice</refentrytitle>
<refmiscinfo>libcups</refmiscinfo>
</refmeta>

<refnamediv>
<refname>ppdFindChoice</refname>
<indexterm id="ix.libcups.ppdFindChoice.1">	<primary>ppdFindChoice</primary></indexterm>
<refpurpose>Return a pointer to an option choice.</refpurpose>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;cups/cups.h&gt;
</funcsynopsisinfo>
<funcprototype>
<funcdef>ppd_choice_t *
<function>ppdFindChoice</function>
</funcdef>
<paramdef>ppd_option_t *
<parameter>o</parameter>
</paramdef>
<paramdef>const char *
<parameter>choice</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Return a pointer to an option choice.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>Choice pointer or NULL</para>
</refsect1>
</refentry>


<!-- This file is generated from the CUPS mxmldoc API documentation. -->
<!-- See api-*.xml in this directory.  Changes to this file may be   -->
<!-- overwritten; edit the XML file or, ideally, upstream source.    -->
<refentry id="libcups.ppdFindMarkedChoice.1">
<refmeta>
<refentrytitle>ppdFindMarkedChoice</refentrytitle>
<refmiscinfo>libcups</refmiscinfo>
</refmeta>

<refnamediv>
<refname>ppdFindMarkedChoice</refname>
<indexterm id="ix.libcups.ppdFindMarkedChoice.1">	<primary>ppdFindMarkedChoice</primary></indexterm>
<refpurpose>Return the marked choice for the specified option.</refpurpose>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;cups/cups.h&gt;
</funcsynopsisinfo>
<funcprototype>
<funcdef>ppd_choice_t *
<function>ppdFindMarkedChoice</function>
</funcdef>
<paramdef>ppd_file_t *
<parameter>ppd</parameter>
</paramdef>
<paramdef>const char *
<parameter>option</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Return the marked choice for the specified option.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>Pointer to choice or NULL</para>
</refsect1>
</refentry>


<!-- This file is generated from the CUPS mxmldoc API documentation. -->
<!-- See api-*.xml in this directory.  Changes to this file may be   -->
<!-- overwritten; edit the XML file or, ideally, upstream source.    -->
<refentry id="libcups.ppdFindNextAttr.1">
<refmeta>
<refentrytitle>ppdFindNextAttr</refentrytitle>
<refmiscinfo>libcups</refmiscinfo>
</refmeta>

<refnamediv>
<refname>ppdFindNextAttr</refname>
<indexterm id="ix.libcups.ppdFindNextAttr.1">	<primary>ppdFindNextAttr</primary></indexterm>
<refpurpose>Find the next matching attribute...
</refpurpose>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;cups/cups.h&gt;
</funcsynopsisinfo>
<funcprototype>
<funcdef>ppd_attr_t *
<function>ppdFindNextAttr</function>
</funcdef>
<paramdef>ppd_file_t *
<parameter>ppd</parameter>
</paramdef>
<paramdef>const char *
<parameter>name</parameter>
</paramdef>
<paramdef>const char *
<parameter>spec</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Find the next matching attribute...
</para>
<para>

</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>Attribute or NULL if not found</para>
</refsect1>
</refentry>


<!-- This file is generated from the CUPS mxmldoc API documentation. -->
<!-- See api-*.xml in this directory.  Changes to this file may be   -->
<!-- overwritten; edit the XML file or, ideally, upstream source.    -->
<refentry id="libcups.ppdFindOption.1">
<refmeta>
<refentrytitle>ppdFindOption</refentrytitle>
<refmiscinfo>libcups</refmiscinfo>
</refmeta>

<refnamediv>
<refname>ppdFindOption</refname>
<indexterm id="ix.libcups.ppdFindOption.1">	<primary>ppdFindOption</primary></indexterm>
<refpurpose>Return a pointer to the specified option.</refpurpose>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;cups/cups.h&gt;
</funcsynopsisinfo>
<funcprototype>
<funcdef>ppd_option_t *
<function>ppdFindOption</function>
</funcdef>
<paramdef>ppd_file_t *
<parameter>ppd</parameter>
</paramdef>
<paramdef>const char *
<parameter>option</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Return a pointer to the specified option.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>Pointer to option or NULL</para>
</refsect1>
</refentry>


<!-- This file is generated from the CUPS mxmldoc API documentation. -->
<!-- See api-*.xml in this directory.  Changes to this file may be   -->
<!-- overwritten; edit the XML file or, ideally, upstream source.    -->
<refentry id="libcups.ppdIsMarked.1">
<refmeta>
<refentrytitle>ppdIsMarked</refentrytitle>
<refmiscinfo>libcups</refmiscinfo>
</refmeta>

<refnamediv>
<refname>ppdIsMarked</refname>
<indexterm id="ix.libcups.ppdIsMarked.1">	<primary>ppdIsMarked</primary></indexterm>
<refpurpose>Check to see if an option is marked...</refpurpose>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;cups/cups.h&gt;
</funcsynopsisinfo>
<funcprototype>
<funcdef>int
<function>ppdIsMarked</function>
</funcdef>
<paramdef>ppd_file_t *
<parameter>ppd</parameter>
</paramdef>
<paramdef>const char *
<parameter>option</parameter>
</paramdef>
<paramdef>const char *
<parameter>choice</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Check to see if an option is marked...
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>Non-zero if option is marked</para>
</refsect1>
</refentry>


<!-- This file is generated from the CUPS mxmldoc API documentation. -->
<!-- See api-*.xml in this directory.  Changes to this file may be   -->
<!-- overwritten; edit the XML file or, ideally, upstream source.    -->
<refentry id="libcups.ppdLastError.1">
<refmeta>
<refentrytitle>ppdLastError</refentrytitle>
<refmiscinfo>libcups</refmiscinfo>
</refmeta>

<refnamediv>
<refname>ppdLastError</refname>
<indexterm id="ix.libcups.ppdLastError.1">	<primary>ppdLastError</primary></indexterm>
<refpurpose>Return the status from the last ppdOpen*().
</refpurpose>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;cups/cups.h&gt;
</funcsynopsisinfo>
<funcprototype>
<funcdef>ppd_status_t
<function>ppdLastError</function>
</funcdef>
<paramdef>int *
<parameter>line</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Return the status from the last ppdOpen*().
</para>
<para>

</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>Status code</para>
</refsect1>
</refentry>


<!-- This file is generated from the CUPS mxmldoc API documentation. -->
<!-- See api-*.xml in this directory.  Changes to this file may be   -->
<!-- overwritten; edit the XML file or, ideally, upstream source.    -->
<refentry id="libcups.ppdMarkDefaults.1">
<refmeta>
<refentrytitle>ppdMarkDefaults</refentrytitle>
<refmiscinfo>libcups</refmiscinfo>
</refmeta>

<refnamediv>
<refname>ppdMarkDefaults</refname>
<indexterm id="ix.libcups.ppdMarkDefaults.1">	<primary>ppdMarkDefaults</primary></indexterm>
<refpurpose>Mark all default options in the PPD file.</refpurpose>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;cups/cups.h&gt;
</funcsynopsisinfo>
<funcprototype>
<funcdef>void
<function>ppdMarkDefaults</function>
</funcdef>
<paramdef>ppd_file_t *
<parameter>ppd</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Mark all default options in the PPD file.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>This function does not return a value.</para>
</refsect1>
</refentry>


<!-- This file is generated from the CUPS mxmldoc API documentation. -->
<!-- See api-*.xml in this directory.  Changes to this file may be   -->
<!-- overwritten; edit the XML file or, ideally, upstream source.    -->
<refentry id="libcups.ppdMarkOption.1">
<refmeta>
<refentrytitle>ppdMarkOption</refentrytitle>
<refmiscinfo>libcups</refmiscinfo>
</refmeta>

<refnamediv>
<refname>ppdMarkOption</refname>
<indexterm id="ix.libcups.ppdMarkOption.1">	<primary>ppdMarkOption</primary></indexterm>
<refpurpose>Mark an option in a PPD file.
</refpurpose>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;cups/cups.h&gt;
</funcsynopsisinfo>
<funcprototype>
<funcdef>int
<function>ppdMarkOption</function>
</funcdef>
<paramdef>ppd_file_t *
<parameter>ppd</parameter>
</paramdef>
<paramdef>const char *
<parameter>option</parameter>
</paramdef>
<paramdef>const char *
<parameter>choice</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Mark an option in a PPD file.
</para>
<para>
Notes:
</para>
<para>
-1 is returned if the given option would conflict with any currently
selected option.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>Number of conflicts</para>
</refsect1>
</refentry>


<!-- This file is generated from the CUPS mxmldoc API documentation. -->
<!-- See api-*.xml in this directory.  Changes to this file may be   -->
<!-- overwritten; edit the XML file or, ideally, upstream source.    -->
<refentry id="libcups.ppdOpen.1">
<refmeta>
<refentrytitle>ppdOpen</refentrytitle>
<refmiscinfo>libcups</refmiscinfo>
</refmeta>

<refnamediv>
<refname>ppdOpen</refname>
<indexterm id="ix.libcups.ppdOpen.1">	<primary>ppdOpen</primary></indexterm>
<refpurpose>Read a PPD file into memory.</refpurpose>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;cups/cups.h&gt;
</funcsynopsisinfo>
<funcprototype>
<funcdef>ppd_file_t *
<function>ppdOpen</function>
</funcdef>
<paramdef>FILE *
<parameter>fp</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Read a PPD file into memory.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>PPD file record</para>
</refsect1>
</refentry>


<!-- This file is generated from the CUPS mxmldoc API documentation. -->
<!-- See api-*.xml in this directory.  Changes to this file may be   -->
<!-- overwritten; edit the XML file or, ideally, upstream source.    -->
<refentry id="libcups.ppdOpenFd.1">
<refmeta>
<refentrytitle>ppdOpenFd</refentrytitle>
<refmiscinfo>libcups</refmiscinfo>
</refmeta>

<refnamediv>
<refname>ppdOpenFd</refname>
<indexterm id="ix.libcups.ppdOpenFd.1">	<primary>ppdOpenFd</primary></indexterm>
<refpurpose>Read a PPD file into memory.</refpurpose>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;cups/cups.h&gt;
</funcsynopsisinfo>
<funcprototype>
<funcdef>ppd_file_t *
<function>ppdOpenFd</function>
</funcdef>
<paramdef>int
<parameter>fd</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Read a PPD file into memory.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>PPD file record</para>
</refsect1>
</refentry>


<!-- This file is generated from the CUPS mxmldoc API documentation. -->
<!-- See api-*.xml in this directory.  Changes to this file may be   -->
<!-- overwritten; edit the XML file or, ideally, upstream source.    -->
<refentry id="libcups.ppdOpenFile.1">
<refmeta>
<refentrytitle>ppdOpenFile</refentrytitle>
<refmiscinfo>libcups</refmiscinfo>
</refmeta>

<refnamediv>
<refname>ppdOpenFile</refname>
<indexterm id="ix.libcups.ppdOpenFile.1">	<primary>ppdOpenFile</primary></indexterm>
<refpurpose>Read a PPD file into memory.</refpurpose>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;cups/cups.h&gt;
</funcsynopsisinfo>
<funcprototype>
<funcdef>ppd_file_t *
<function>ppdOpenFile</function>
</funcdef>
<paramdef>const char *
<parameter>filename</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Read a PPD file into memory.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>PPD file record</para>
</refsect1>
</refentry>


<!-- This file is generated from the CUPS mxmldoc API documentation. -->
<!-- See api-*.xml in this directory.  Changes to this file may be   -->
<!-- overwritten; edit the XML file or, ideally, upstream source.    -->
<refentry id="libcups.ppdPageLength.1">
<refmeta>
<refentrytitle>ppdPageLength</refentrytitle>
<refmiscinfo>libcups</refmiscinfo>
</refmeta>

<refnamediv>
<refname>ppdPageLength</refname>
<indexterm id="ix.libcups.ppdPageLength.1">	<primary>ppdPageLength</primary></indexterm>
<refpurpose>Get the page length for the given size.</refpurpose>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;cups/cups.h&gt;
</funcsynopsisinfo>
<funcprototype>
<funcdef>float
<function>ppdPageLength</function>
</funcdef>
<paramdef>ppd_file_t *
<parameter>ppd</parameter>
</paramdef>
<paramdef>const char *
<parameter>name</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Get the page length for the given size.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>Length of page in points or 0.0</para>
</refsect1>
</refentry>


<!-- This file is generated from the CUPS mxmldoc API documentation. -->
<!-- See api-*.xml in this directory.  Changes to this file may be   -->
<!-- overwritten; edit the XML file or, ideally, upstream source.    -->
<refentry id="libcups.ppdPageSize.1">
<refmeta>
<refentrytitle>ppdPageSize</refentrytitle>
<refmiscinfo>libcups</refmiscinfo>
</refmeta>

<refnamediv>
<refname>ppdPageSize</refname>
<indexterm id="ix.libcups.ppdPageSize.1">	<primary>ppdPageSize</primary></indexterm>
<refpurpose>Get the page size record for the given size.</refpurpose>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;cups/cups.h&gt;
</funcsynopsisinfo>
<funcprototype>
<funcdef>ppd_size_t *
<function>ppdPageSize</function>
</funcdef>
<paramdef>ppd_file_t *
<parameter>ppd</parameter>
</paramdef>
<paramdef>const char *
<parameter>name</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Get the page size record for the given size.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>Size record for page or NULL</para>
</refsect1>
</refentry>


<!-- This file is generated from the CUPS mxmldoc API documentation. -->
<!-- See api-*.xml in this directory.  Changes to this file may be   -->
<!-- overwritten; edit the XML file or, ideally, upstream source.    -->
<refentry id="libcups.ppdPageWidth.1">
<refmeta>
<refentrytitle>ppdPageWidth</refentrytitle>
<refmiscinfo>libcups</refmiscinfo>
</refmeta>

<refnamediv>
<refname>ppdPageWidth</refname>
<indexterm id="ix.libcups.ppdPageWidth.1">	<primary>ppdPageWidth</primary></indexterm>
<refpurpose>Get the page width for the given size.</refpurpose>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;cups/cups.h&gt;
</funcsynopsisinfo>
<funcprototype>
<funcdef>float
<function>ppdPageWidth</function>
</funcdef>
<paramdef>ppd_file_t *
<parameter>ppd</parameter>
</paramdef>
<paramdef>const char *
<parameter>name</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Get the page width for the given size.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>Width of page in points or 0.0</para>
</refsect1>
</refentry>


<!-- This file is generated from the CUPS mxmldoc API documentation. -->
<!-- See api-*.xml in this directory.  Changes to this file may be   -->
<!-- overwritten; edit the XML file or, ideally, upstream source.    -->
<refentry id="libcups.ppdSetConformance.1">
<refmeta>
<refentrytitle>ppdSetConformance</refentrytitle>
<refmiscinfo>libcups</refmiscinfo>
</refmeta>

<refnamediv>
<refname>ppdSetConformance</refname>
<indexterm id="ix.libcups.ppdSetConformance.1">	<primary>ppdSetConformance</primary></indexterm>
<refpurpose>Set the conformance level for PPD files.
</refpurpose>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;cups/cups.h&gt;
</funcsynopsisinfo>
<funcprototype>
<funcdef>void
<function>ppdSetConformance</function>
</funcdef>
<paramdef>ppd_conform_t
<parameter>c</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Set the conformance level for PPD files.
</para>
<para>

</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>This function does not return a value.</para>
</refsect1>
</refentry>


</SECT1>
<!-- End of text generated from database -->

<!-- Start of generated text - do not edit! -->
<!-- generated from the LSB specification database by mklibspec -->
<SECT1 ID=libcupsimage>
<TITLE>Interfaces for libcupsimage</TITLE>
<PARA>
<XREF LINKEND="lib-libcupsimage-def"> defines the library name and shared object name
for the libcupsimage library
</PARA>
<TABLE id="lib-libcupsimage-def">
<TITLE>libcupsimage Definition</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Library:</ENTRY>
<ENTRY>libcupsimage</ENTRY>
</ROW>
<ROW>
<ENTRY>SONAME:</ENTRY>
<ENTRY>libcupsimage.so.2</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The behavior of the interfaces in this library is specified by the following specifications:<SIMPLELIST COLUMNS=1>
<MEMBER ID='REFSTD.libcupsimage.1'>
[LSB] <XREF LINKEND="std.LSB">
</MEMBER>
</SIMPLELIST>
</PARA>
<!-- debug: database interface name CUPS Raster ABI -->
<SECT2>
<!--libgroup-->
<TITLE>CUPS Raster ABI</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for CUPS Raster ABI</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic functions
for CUPS Raster ABI specified in <XREF linkend="tbl-libcupsimage-cups-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<TABLE id="tbl-libcupsimage-cups-ints">
<TITLE>libcupsimage - CUPS Raster ABI Function Interfaces</TITLE>
<TGROUP COLS=4>
<TBODY>
<ROW>
<ENTRY><indexterm><primary>cupsRasterClose</primary></indexterm>cupsRasterClose <LINK LINKEND="REFSTD.libcupsimage.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>cupsRasterOpen</primary></indexterm>cupsRasterOpen <LINK LINKEND="REFSTD.libcupsimage.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>cupsRasterReadHeader</primary></indexterm>cupsRasterReadHeader <LINK LINKEND="REFSTD.libcupsimage.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>cupsRasterReadPixels</primary></indexterm>cupsRasterReadPixels <LINK LINKEND="REFSTD.libcupsimage.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>cupsRasterWriteHeader</primary></indexterm>cupsRasterWriteHeader <LINK LINKEND="REFSTD.libcupsimage.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>cupsRasterWritePixels</primary></indexterm>cupsRasterWritePixels <LINK LINKEND="REFSTD.libcupsimage.1">[LSB]</LINK></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>
</SECT2>
</SECT1>
<SECT1 ID=libcupsimage-ddefs>
<TITLE>Data Definitions for libcupsimage</TITLE>
<PARA>
This section defines global identifiers and their values that are associated
with interfaces contained in libcupsimage.
These definitions are organized into groups that
correspond to system headers. This convention is used as a
convenience for the reader, and does not imply the existence
of these headers, or their content.
Where an interface is defined as requiring a particular system header file
all of the data definitions for that system header file presented here shall be in effect.
</PARA>
<PARA>
This section gives data definitions to promote binary application
portability, not to repeat source interface definitions available
elsewhere. System providers and application developers should use this ABI
to supplement - not to replace - source interface definition specifications.
</PARA>
<PARA>
This specification uses the <XREF LINKEND='std.ISOC99'> C Language as the reference programming language, and data definitions are specified in ISO C format. The C language is used here as a convenient notation. Using a C language description of these data objects does not preclude their use by other programming languages.</PARA>
<SECT2>
<TITLE>cups/raster.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define _CUPS_RASTER_H_
#define CUPS_RASTER_SYNC	0x52615374
#define CUPS_RASTER_REVSYNC	0x74536152
#define CUPS_RASTER_HAVE_COLORIMETRIC	1

typedef enum {
    CUPS_RASTER_READ = 0,
    CUPS_RASTER_WRITE = 1
} cups_mode_t;
typedef struct _cups_raster_s cups_raster_t;
typedef enum {
    CUPS_ADVANCE_NONE = 0,
    CUPS_ADVANCE_FILE = 1,
    CUPS_ADVANCE_JOB = 2,
    CUPS_ADVANCE_SET = 3,
    CUPS_ADVANCE_PAGE = 4
} cups_adv_t;
typedef enum {
    CUPS_FALSE = 0,
    CUPS_TRUE = 1
} cups_bool_t;
typedef enum {
    CUPS_CUT_NONE = 0,
    CUPS_CUT_FILE = 1,
    CUPS_CUT_JOB = 2,
    CUPS_CUT_SET = 3,
    CUPS_CUT_PAGE = 4
} cups_cut_t;
typedef enum {
    CUPS_JOG_NONE = 0,
    CUPS_JOG_FILE = 1,
    CUPS_JOG_JOB = 2,
    CUPS_JOG_SET = 3
} cups_jog_t;
typedef enum {
    CUPS_EDGE_TOP = 0,
    CUPS_EDGE_RIGHT = 1,
    CUPS_EDGE_BOTTOM = 2,
    CUPS_EDGE_LEFT = 3
} cups_edge_t;
typedef enum {
    CUPS_ORIENT_0 = 0,
    CUPS_ORIENT_90 = 1,
    CUPS_ORIENT_180 = 2,
    CUPS_ORIENT_270 = 3
} cups_orient_t;
typedef enum {
    CUPS_ORDER_CHUNKED = 0,
    CUPS_ORDER_BANDED = 1,
    CUPS_ORDER_PLANAR = 2
} cups_order_t;
typedef enum {
    CUPS_CSPACE_W = 0,
    CUPS_CSPACE_RGB = 1,
    CUPS_CSPACE_RGBA = 2,
    CUPS_CSPACE_K = 3,
    CUPS_CSPACE_CMY = 4,
    CUPS_CSPACE_YMC = 5,
    CUPS_CSPACE_CMYK = 6,
    CUPS_CSPACE_YMCK = 7,
    CUPS_CSPACE_KCMY = 8,
    CUPS_CSPACE_KCMYcm = 9,
    CUPS_CSPACE_GMCK = 10,
    CUPS_CSPACE_GMCS = 11,
    CUPS_CSPACE_WHITE = 12,
    CUPS_CSPACE_GOLD = 13,
    CUPS_CSPACE_SILVER = 14,
    CUPS_CSPACE_CIEXYZ = 15,
    CUPS_CSPACE_CIELab = 16,
    CUPS_CSPACE_ICC1 = 32,
    CUPS_CSPACE_ICC2 = 33,
    CUPS_CSPACE_ICC3 = 34,
    CUPS_CSPACE_ICC4 = 35,
    CUPS_CSPACE_ICC5 = 36,
    CUPS_CSPACE_ICC6 = 37,
    CUPS_CSPACE_ICC7 = 38,
    CUPS_CSPACE_ICC8 = 39,
    CUPS_CSPACE_ICC9 = 40,
    CUPS_CSPACE_ICCA = 41,
    CUPS_CSPACE_ICCB = 42,
    CUPS_CSPACE_ICCC = 43,
    CUPS_CSPACE_ICCD = 44,
    CUPS_CSPACE_ICCE = 45,
    CUPS_CSPACE_ICCF = 46
} cups_cspace_t;
typedef struct {
    char MediaClass[64];
    char MediaColor[64];
    char MediaType[64];
    char OutputType[64];
    unsigned int AdvanceDistance;
    cups_adv_t AdvanceMedia;
    cups_bool_t Collate;
    cups_cut_t CutMedia;
    cups_bool_t Duplex;
    unsigned int HWResolution[2];
    unsigned int ImagingBoundingBox[4];
    cups_bool_t InsertSheet;
    cups_jog_t Jog;
    cups_edge_t LeadingEdge;
    unsigned int Margins[2];
    cups_bool_t ManualFeed;
    unsigned int MediaPosition;
    unsigned int MediaWeight;
    cups_bool_t MirrorPrint;
    cups_bool_t NegativePrint;
    unsigned int NumCopies;
    cups_orient_t Orientation;
    cups_bool_t OutputFaceUp;
    unsigned int PageSize[2];
    cups_bool_t Separations;
    cups_bool_t TraySwitch;
    cups_bool_t Tumble;
    unsigned int cupsWidth;
    unsigned int cupsHeight;
    unsigned int cupsMediaType;
    unsigned int cupsBitsPerColor;
    unsigned int cupsBitsPerPixel;
    unsigned int cupsBytesPerLine;
    cups_order_t cupsColorOrder;
    cups_cspace_t cupsColorSpace;
    unsigned int cupsCompression;
    unsigned int cupsRowCount;
    unsigned int cupsRowFeed;
    unsigned int cupsRowStep;
} cups_page_header_t;
typedef struct cups_page_header2_s {
    char MediaClass[64];
    char MediaColor[64];
    char MediaType[64];
    char OutputType[64];
    unsigned int AdvanceDistance;
    cups_adv_t AdvanceMedia;
    cups_bool_t Collate;
    cups_cut_t CutMedia;
    cups_bool_t Duplex;
    unsigned int HWResolution[3];
    unsigned int ImagingBoundingBox[4];
    cups_bool_t InsertSheet;
    cups_jog_t Jog;
    cups_edge_t LeadingEdge;
    unsigned int Margins[3];
    cups_bool_t ManualFeed;
    unsigned int MediaPosition;
    unsigned int MediaWeight;
    cups_bool_t MirrorPrint;
    cups_bool_t NegativePrint;
    unsigned int NumCopies;
    cups_orient_t Orientation;
    cups_bool_t OutputFaceUp;
    unsigned int PageSize[3];
    cups_bool_t Separations;
    cups_bool_t TraySwitch;
    cups_bool_t Tumble;
    unsigned int cupsWidth;
    unsigned int cupsHeight;
    unsigned int cupsMediaType;
    unsigned int cupsBitsPerColor;
    unsigned int cupsBitsPerPixel;
    unsigned int cupsBytesPerLine;
    cups_order_t cupsColorOrder;
    cups_cspace_t cupsColorSpace;
    unsigned int cupsCompression;
    unsigned int cupsRowCount;
    unsigned int cupsRowFeed;
    unsigned int cupsRowStep;
    unsigned int cupsNumColors;
    float cupsBorderlessScalingFactor;
    float cupsPageSize[2];
    float cupsImagingBBox[4];
    unsigned int cupsInteger[16];
    float cupsReal[16];
    char cupsString[16][64];
    char cupsMarkerType[64];
    char cupsRenderingIntent[64];
    char cupsPageSizeName[64];
} cups_page_header2_t;
typedef int (*cups_interpret_cb_t) (cups_page_header2_t *, int);
extern void cupsRasterClose(cups_raster_t * r);
extern cups_raster_t *cupsRasterOpen(int fd, cups_mode_t mode);
extern unsigned int cupsRasterReadHeader(cups_raster_t * r,
					 cups_page_header_t * h);
extern unsigned int cupsRasterReadHeader2(cups_raster_t * r,
					  cups_page_header2_t * h);
extern unsigned int cupsRasterReadPixels(cups_raster_t * r,
					 unsigned char *p,
					 unsigned int len);
extern unsigned int cupsRasterWriteHeader(cups_raster_t * r,
					  cups_page_header_t * h);
extern unsigned int cupsRasterWriteHeader2(cups_raster_t * r,
					   cups_page_header2_t * h);
extern unsigned int cupsRasterWritePixels(cups_raster_t * r,
					  unsigned char *p,
					  unsigned int len);
</SCREEN>
</SECT2>
</SECT1>
<SECT1 ID=libcupsimageman>
<TITLE>Interface Definitions for libcupsimage</TITLE>
<PARA>
The interfaces defined on the following pages are included in libcupsimage and are defined
by this specification.
Unless otherwise noted, these interfaces shall be included
in the source standard.
</PARA>
<PARA>
Other interfaces listed in <XREF LINKEND=libcupsimage> shall behave as described
in the referenced base document.
</PARA>
<!-- This file is generated from the CUPS mxmldoc API documentation. -->
<!-- See api-*.xml in this directory.  Changes to this file may be   -->
<!-- overwritten; edit the XML file or, ideally, upstream source.    -->
<refentry id="libcupsimage.cupsRasterClose.1">
<refmeta>
<refentrytitle>cupsRasterClose</refentrytitle>
<refmiscinfo>libcupsimage</refmiscinfo>
</refmeta>

<refnamediv>
<refname>cupsRasterClose</refname>
<indexterm id="ix.libcupsimage.cupsRasterClose.1">	<primary>cupsRasterClose</primary></indexterm>
<refpurpose>Close a raster stream.</refpurpose>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;cups/raster.h&gt;
</funcsynopsisinfo>
<funcprototype>
<funcdef>void
<function>cupsRasterClose</function>
</funcdef>
<paramdef>cups_raster_t *
<parameter>r</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Close a raster stream.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>This function does not return a value.</para>
</refsect1>
</refentry>


<!-- This file is generated from the CUPS mxmldoc API documentation. -->
<!-- See api-*.xml in this directory.  Changes to this file may be   -->
<!-- overwritten; edit the XML file or, ideally, upstream source.    -->
<refentry id="libcupsimage.cupsRasterOpen.1">
<refmeta>
<refentrytitle>cupsRasterOpen</refentrytitle>
<refmiscinfo>libcupsimage</refmiscinfo>
</refmeta>

<refnamediv>
<refname>cupsRasterOpen</refname>
<indexterm id="ix.libcupsimage.cupsRasterOpen.1">	<primary>cupsRasterOpen</primary></indexterm>
<refpurpose>Open a raster stream.</refpurpose>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;cups/raster.h&gt;
</funcsynopsisinfo>
<funcprototype>
<funcdef>cups_raster_t *
<function>cupsRasterOpen</function>
</funcdef>
<paramdef>int
<parameter>fd</parameter>
</paramdef>
<paramdef>cups_mode_t
<parameter>mode</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Open a raster stream.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>New stream</para>
</refsect1>
</refentry>


<!-- This file is generated from the CUPS mxmldoc API documentation. -->
<!-- See api-*.xml in this directory.  Changes to this file may be   -->
<!-- overwritten; edit the XML file or, ideally, upstream source.    -->
<refentry id="libcupsimage.cupsRasterReadHeader.1">
<refmeta>
<refentrytitle>cupsRasterReadHeader</refentrytitle>
<refmiscinfo>libcupsimage</refmiscinfo>
</refmeta>

<refnamediv>
<refname>cupsRasterReadHeader</refname>
<indexterm id="ix.libcupsimage.cupsRasterReadHeader.1">	<primary>cupsRasterReadHeader</primary></indexterm>
<refpurpose>Read a raster page header and store it in a
</refpurpose>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;cups/raster.h&gt;
</funcsynopsisinfo>
<funcprototype>
<funcdef>unsigned
<function>cupsRasterReadHeader</function>
</funcdef>
<paramdef>cups_raster_t *
<parameter>r</parameter>
</paramdef>
<paramdef>cups_page_header_t *
<parameter>h</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Read a raster page header and store it in a
V1 page header structure.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>1 on success, 0 on fail</para>
</refsect1>
</refentry>


<!-- This file is generated from the CUPS mxmldoc API documentation. -->
<!-- See api-*.xml in this directory.  Changes to this file may be   -->
<!-- overwritten; edit the XML file or, ideally, upstream source.    -->
<refentry id="libcupsimage.cupsRasterReadPixels.1">
<refmeta>
<refentrytitle>cupsRasterReadPixels</refentrytitle>
<refmiscinfo>libcupsimage</refmiscinfo>
</refmeta>

<refnamediv>
<refname>cupsRasterReadPixels</refname>
<indexterm id="ix.libcupsimage.cupsRasterReadPixels.1">	<primary>cupsRasterReadPixels</primary></indexterm>
<refpurpose>Read raster pixels.</refpurpose>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;cups/raster.h&gt;
</funcsynopsisinfo>
<funcprototype>
<funcdef>unsigned
<function>cupsRasterReadPixels</function>
</funcdef>
<paramdef>cups_raster_t *
<parameter>r</parameter>
</paramdef>
<paramdef>unsigned char *
<parameter>p</parameter>
</paramdef>
<paramdef>unsigned
<parameter>len</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Read raster pixels.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>Number of bytes read</para>
</refsect1>
</refentry>


<!-- This file is generated from the CUPS mxmldoc API documentation. -->
<!-- See api-*.xml in this directory.  Changes to this file may be   -->
<!-- overwritten; edit the XML file or, ideally, upstream source.    -->
<refentry id="libcupsimage.cupsRasterWriteHeader.1">
<refmeta>
<refentrytitle>cupsRasterWriteHeader</refentrytitle>
<refmiscinfo>libcupsimage</refmiscinfo>
</refmeta>

<refnamediv>
<refname>cupsRasterWriteHeader</refname>
<indexterm id="ix.libcupsimage.cupsRasterWriteHeader.1">	<primary>cupsRasterWriteHeader</primary></indexterm>
<refpurpose>Write a raster page header from a V1 page
</refpurpose>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;cups/raster.h&gt;
</funcsynopsisinfo>
<funcprototype>
<funcdef>unsigned
<function>cupsRasterWriteHeader</function>
</funcdef>
<paramdef>cups_raster_t *
<parameter>r</parameter>
</paramdef>
<paramdef>cups_page_header_t *
<parameter>h</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Write a raster page header from a V1 page
header structure.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>1 on success, 0 on failure</para>
</refsect1>
</refentry>


<!-- This file is generated from the CUPS mxmldoc API documentation. -->
<!-- See api-*.xml in this directory.  Changes to this file may be   -->
<!-- overwritten; edit the XML file or, ideally, upstream source.    -->
<refentry id="libcupsimage.cupsRasterWritePixels.1">
<refmeta>
<refentrytitle>cupsRasterWritePixels</refentrytitle>
<refmiscinfo>libcupsimage</refmiscinfo>
</refmeta>

<refnamediv>
<refname>cupsRasterWritePixels</refname>
<indexterm id="ix.libcupsimage.cupsRasterWritePixels.1">	<primary>cupsRasterWritePixels</primary></indexterm>
<refpurpose>Write raster pixels.</refpurpose>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;cups/raster.h&gt;
</funcsynopsisinfo>
<funcprototype>
<funcdef>unsigned
<function>cupsRasterWritePixels</function>
</funcdef>
<paramdef>cups_raster_t *
<parameter>r</parameter>
</paramdef>
<paramdef>unsigned char *
<parameter>p</parameter>
</paramdef>
<paramdef>unsigned
<parameter>len</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Write raster pixels.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>Number of bytes written</para>
</refsect1>
</refentry>


</SECT1>
<!-- End of text generated from database -->


</CHAPTER>

</PART>
