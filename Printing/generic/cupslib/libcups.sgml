<!-- Start of text generated from database -->
<!-- generated from the LSB specification database -->
<!--    by $Header: mklibspec 1.82 2006/03/29 19:10:18 mats Exp 0 -->
<!--    at Mon Nov 26 13:34:36 2007 -->
<SECT1 ID=libcups>
<TITLE>Interfaces for libcups</TITLE>
<PARA>
<XREF LINKEND="lib-libcups-def"> defines the library name and shared object name
for the libcups library
</PARA>
<TABLE id="lib-libcups-def">
<TITLE>libcups Definition</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Library:</ENTRY>
<ENTRY>libcups</ENTRY>
</ROW>
<ROW>
<ENTRY>SONAME:</ENTRY>
<ENTRY>libcups.so.2</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The behavior of the interfaces in this library is specified by the following specifications:<SIMPLELIST COLUMNS=1>
<MEMBER ID='REFSTD.libcups.1'>
[LSB] <XREF LINKEND="std.LSB">
</MEMBER>
</SIMPLELIST>
</PARA>
<!-- debug: database interface name CUPS Convenience ABI -->
<SECT2>
<!--libgroup-->
<TITLE>CUPS Convenience ABI</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for CUPS Convenience ABI</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic functions
for CUPS Convenience ABI specified in <XREF linkend="tbl-libcups-cups-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<TABLE id="tbl-libcups-cups-ints">
<TITLE>libcups - CUPS Convenience ABI Function Interfaces</TITLE>
<TGROUP COLS=4>
<TBODY>
<ROW>
<ENTRY><indexterm><primary>cupsAddDest</primary></indexterm>cupsAddDest <LINK LINKEND="REFSTD.libcups.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>cupsAddOption</primary></indexterm>cupsAddOption <LINK LINKEND="REFSTD.libcups.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>cupsCancelJob</primary></indexterm>cupsCancelJob <LINK LINKEND="REFSTD.libcups.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>cupsEncryption</primary></indexterm>cupsEncryption <LINK LINKEND="REFSTD.libcups.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>cupsFreeDests</primary></indexterm>cupsFreeDests <LINK LINKEND="REFSTD.libcups.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>cupsFreeJobs</primary></indexterm>cupsFreeJobs <LINK LINKEND="REFSTD.libcups.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>cupsFreeOptions</primary></indexterm>cupsFreeOptions <LINK LINKEND="REFSTD.libcups.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>cupsGetDefault</primary></indexterm>cupsGetDefault <LINK LINKEND="REFSTD.libcups.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>cupsGetDefault2</primary></indexterm>cupsGetDefault2 <LINK LINKEND="REFSTD.libcups.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>cupsGetDest</primary></indexterm>cupsGetDest <LINK LINKEND="REFSTD.libcups.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>cupsGetDests</primary></indexterm>cupsGetDests <LINK LINKEND="REFSTD.libcups.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>cupsGetDests2</primary></indexterm>cupsGetDests2 <LINK LINKEND="REFSTD.libcups.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>cupsGetFd</primary></indexterm>cupsGetFd <LINK LINKEND="REFSTD.libcups.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>cupsGetFile</primary></indexterm>cupsGetFile <LINK LINKEND="REFSTD.libcups.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>cupsGetJobs</primary></indexterm>cupsGetJobs <LINK LINKEND="REFSTD.libcups.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>cupsGetJobs2</primary></indexterm>cupsGetJobs2 <LINK LINKEND="REFSTD.libcups.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>cupsGetOption</primary></indexterm>cupsGetOption <LINK LINKEND="REFSTD.libcups.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>cupsGetPPD</primary></indexterm>cupsGetPPD <LINK LINKEND="REFSTD.libcups.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>cupsGetPPD2</primary></indexterm>cupsGetPPD2 <LINK LINKEND="REFSTD.libcups.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>cupsGetPassword</primary></indexterm>cupsGetPassword <LINK LINKEND="REFSTD.libcups.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>cupsLangEncoding</primary></indexterm>cupsLangEncoding <LINK LINKEND="REFSTD.libcups.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>cupsLangFlush</primary></indexterm>cupsLangFlush <LINK LINKEND="REFSTD.libcups.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>cupsLangFree</primary></indexterm>cupsLangFree <LINK LINKEND="REFSTD.libcups.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>cupsLangGet</primary></indexterm>cupsLangGet <LINK LINKEND="REFSTD.libcups.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>cupsLastError</primary></indexterm>cupsLastError <LINK LINKEND="REFSTD.libcups.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>cupsMarkOptions</primary></indexterm>cupsMarkOptions <LINK LINKEND="REFSTD.libcups.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>cupsParseOptions</primary></indexterm>cupsParseOptions <LINK LINKEND="REFSTD.libcups.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>cupsPrintFile</primary></indexterm>cupsPrintFile <LINK LINKEND="REFSTD.libcups.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>cupsPrintFile2</primary></indexterm>cupsPrintFile2 <LINK LINKEND="REFSTD.libcups.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>cupsPrintFiles</primary></indexterm>cupsPrintFiles <LINK LINKEND="REFSTD.libcups.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>cupsPrintFiles2</primary></indexterm>cupsPrintFiles2 <LINK LINKEND="REFSTD.libcups.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>cupsPutFd</primary></indexterm>cupsPutFd <LINK LINKEND="REFSTD.libcups.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>cupsPutFile</primary></indexterm>cupsPutFile <LINK LINKEND="REFSTD.libcups.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>cupsServer</primary></indexterm>cupsServer <LINK LINKEND="REFSTD.libcups.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>cupsSetDests</primary></indexterm>cupsSetDests <LINK LINKEND="REFSTD.libcups.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>cupsSetDests2</primary></indexterm>cupsSetDests2 <LINK LINKEND="REFSTD.libcups.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>cupsSetEncryption</primary></indexterm>cupsSetEncryption <LINK LINKEND="REFSTD.libcups.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>cupsSetPasswordCB</primary></indexterm>cupsSetPasswordCB <LINK LINKEND="REFSTD.libcups.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>cupsSetServer</primary></indexterm>cupsSetServer <LINK LINKEND="REFSTD.libcups.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>cupsSetUser</primary></indexterm>cupsSetUser <LINK LINKEND="REFSTD.libcups.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>cupsTempFd</primary></indexterm>cupsTempFd <LINK LINKEND="REFSTD.libcups.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>cupsUser</primary></indexterm>cupsUser <LINK LINKEND="REFSTD.libcups.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>ppdClose</primary></indexterm>ppdClose <LINK LINKEND="REFSTD.libcups.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>ppdCollect</primary></indexterm>ppdCollect <LINK LINKEND="REFSTD.libcups.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>ppdConflicts</primary></indexterm>ppdConflicts <LINK LINKEND="REFSTD.libcups.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>ppdEmit</primary></indexterm>ppdEmit <LINK LINKEND="REFSTD.libcups.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>ppdEmitFd</primary></indexterm>ppdEmitFd <LINK LINKEND="REFSTD.libcups.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>ppdEmitJCL</primary></indexterm>ppdEmitJCL <LINK LINKEND="REFSTD.libcups.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>ppdErrorString</primary></indexterm>ppdErrorString <LINK LINKEND="REFSTD.libcups.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>ppdFindAttr</primary></indexterm>ppdFindAttr <LINK LINKEND="REFSTD.libcups.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>ppdFindChoice</primary></indexterm>ppdFindChoice <LINK LINKEND="REFSTD.libcups.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>ppdFindMarkedChoice</primary></indexterm>ppdFindMarkedChoice <LINK LINKEND="REFSTD.libcups.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>ppdFindNextAttr</primary></indexterm>ppdFindNextAttr <LINK LINKEND="REFSTD.libcups.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>ppdFindOption</primary></indexterm>ppdFindOption <LINK LINKEND="REFSTD.libcups.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>ppdIsMarked</primary></indexterm>ppdIsMarked <LINK LINKEND="REFSTD.libcups.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>ppdLastError</primary></indexterm>ppdLastError <LINK LINKEND="REFSTD.libcups.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>ppdMarkDefaults</primary></indexterm>ppdMarkDefaults <LINK LINKEND="REFSTD.libcups.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>ppdMarkOption</primary></indexterm>ppdMarkOption <LINK LINKEND="REFSTD.libcups.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>ppdOpen</primary></indexterm>ppdOpen <LINK LINKEND="REFSTD.libcups.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>ppdOpenFd</primary></indexterm>ppdOpenFd <LINK LINKEND="REFSTD.libcups.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>ppdOpenFile</primary></indexterm>ppdOpenFile <LINK LINKEND="REFSTD.libcups.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>ppdPageLength</primary></indexterm>ppdPageLength <LINK LINKEND="REFSTD.libcups.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>ppdPageSize</primary></indexterm>ppdPageSize <LINK LINKEND="REFSTD.libcups.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>ppdPageWidth</primary></indexterm>ppdPageWidth <LINK LINKEND="REFSTD.libcups.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>ppdSetConformance</primary></indexterm>ppdSetConformance <LINK LINKEND="REFSTD.libcups.1">[LSB]</LINK></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>
</SECT2>
</SECT1>
<SECT1 ID=libcups-ddefs>
<TITLE>Data Definitions for libcups</TITLE>
<PARA>
This section defines global identifiers and their values that are associated
with interfaces contained in libcups.
These definitions are organized into groups that
correspond to system headers. This convention is used as a
convenience for the reader, and does not imply the existence
of these headers, or their content.
Where an interface is defined as requiring a particular system header file
all of the data definitions for that system header file presented here shall be in effect.
</PARA>
<PARA>
This section gives data definitions to promote binary application
portability, not to repeat source interface definitions available
elsewhere. System providers and application developers should use this ABI
to supplement - not to replace - source interface definition specifications.
</PARA>
<PARA>
This specification uses the <XREF LINKEND='std.ISOC99'> C Language as the reference programming language, and data definitions are specified in ISO C format. The C language is used here as a convenient notation. Using a C language description of these data objects does not preclude their use by other programming languages.</PARA>
<SECT2>
<TITLE>cups/cups.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define _CUPS_CUPS_H_
#define CUPS_VERSION_MAJOR	1
#define CUPS_VERSION_MINOR	1
#define CUPS_VERSION	1.0123
#define CUPS_VERSION_PATCH	23
#define cupsLangDefault()	cupsLangGet(NULL)

typedef enum {
    CUPS_AUTO_ENCODING = -1,
    CUPS_US_ASCII = 0,
    CUPS_ISO8859_1 = 1,
    CUPS_ISO8859_2 = 2,
    CUPS_ISO8859_3 = 3,
    CUPS_ISO8859_4 = 4,
    CUPS_ISO8859_5 = 5,
    CUPS_ISO8859_6 = 6,
    CUPS_ISO8859_7 = 7,
    CUPS_ISO8859_8 = 8,
    CUPS_ISO8859_9 = 9,
    CUPS_ISO8859_10 = 10,
    CUPS_UTF8 = 11,
    CUPS_ISO8859_13 = 12,
    CUPS_ISO8859_14 = 13,
    CUPS_ISO8859_15 = 14,
    CUPS_WINDOWS_874 = 15,
    CUPS_WINDOWS_1250 = 16,
    CUPS_WINDOWS_1251 = 17,
    CUPS_WINDOWS_1252 = 18,
    CUPS_WINDOWS_1253 = 19,
    CUPS_WINDOWS_1254 = 20,
    CUPS_WINDOWS_1255 = 21,
    CUPS_WINDOWS_1256 = 22,
    CUPS_WINDOWS_1257 = 23,
    CUPS_WINDOWS_1258 = 24,
    CUPS_KOI8_R = 25,
    CUPS_KOI8_U = 26
} cups_encoding_t;
typedef struct cups_lang_str {
    struct cups_lang_str *next;
    int used;
    cups_encoding_t encoding;
    char language[16];
    char *messages[506];
} cups_lang_t;
typedef enum {
    HTTP_ENCRYPT_IF_REQUESTED = 0,
    HTTP_ENCRYPT_NEVER = 1,
    HTTP_ENCRYPT_REQUIRED = 2,
    HTTP_ENCRYPT_ALWAYS = 3
} http_encryption_t;
typedef struct {
    char *name;
    char *value;
} cups_option_t;
typedef struct {
    char *name;
    char *instance;
    int is_default;
    int num_options;
    cups_option_t *options;
} cups_dest_t;
typedef enum {
    HTTP_WAITING = 0,
    HTTP_OPTIONS = 1,
    HTTP_GET = 2,
    HTTP_GET_SEND = 3,
    HTTP_HEAD = 4,
    HTTP_POST = 5,
    HTTP_POST_RECV = 6,
    HTTP_POST_SEND = 7,
    HTTP_PUT = 8,
    HTTP_PUT_RECV = 9,
    HTTP_DELETE = 10,
    HTTP_TRACE = 11,
    HTTP_CLOSE = 12,
    HTTP_STATUS = 13
} http_state_t;
typedef enum {
    HTTP_ERROR = -1,
    HTTP_CONTINUE = 100,
    HTTP_SWITCHING_PROTOCOLS = 101,
    HTTP_OK = 200,
    HTTP_CREATED = 201,
    HTTP_ACCEPTED = 202,
    HTTP_NOT_AUTHORITATIVE = 203,
    HTTP_NO_CONTENT = 204,
    HTTP_RESET_CONTENT = 205,
    HTTP_PARTIAL_CONTENT = 206,
    HTTP_MULTIPLE_CHOICES = 300,
    HTTP_MOVED_PERMANENTLY = 301,
    HTTP_MOVED_TEMPORARILY = 302,
    HTTP_SEE_OTHER = 303,
    HTTP_NOT_MODIFIED = 304,
    HTTP_USE_PROXY = 305,
    HTTP_BAD_REQUEST = 400,
    HTTP_UNAUTHORIZED = 401,
    HTTP_PAYMENT_REQUIRED = 402,
    HTTP_FORBIDDEN = 403,
    HTTP_NOT_FOUND = 404,
    HTTP_METHOD_NOT_ALLOWED = 405,
    HTTP_NOT_ACCEPTABLE = 406,
    HTTP_PROXY_AUTHENTICATION = 407,
    HTTP_REQUEST_TIMEOUT = 408,
    HTTP_CONFLICT = 409,
    HTTP_GONE = 410,
    HTTP_LENGTH_REQUIRED = 411,
    HTTP_PRECONDITION = 412,
    HTTP_REQUEST_TOO_LARGE = 413,
    HTTP_URI_TOO_LONG = 414,
    HTTP_UNSUPPORTED_MEDIATYPE = 415,
    HTTP_UPGRADE_REQUIRED = 426,
    HTTP_SERVER_ERROR = 500,
    HTTP_NOT_IMPLEMENTED = 501,
    HTTP_BAD_GATEWAY = 502,
    HTTP_SERVICE_UNAVAILABLE = 503,
    HTTP_GATEWAY_TIMEOUT = 504,
    HTTP_NOT_SUPPORTED = 505
} http_status_t;
typedef enum {
    HTTP_0_9 = 9,
    HTTP_1_0 = 100,
    HTTP_1_1 = 101
} http_version_t;
typedef enum {
    HTTP_KEEPALIVE_OFF = 0,
    HTTP_KEEPALIVE_ON = 1
} http_keepalive_t;
typedef enum {
    HTTP_ENCODE_LENGTH = 0,
    HTTP_ENCODE_CHUNKED = 1
} http_encoding_t;
typedef unsigned int md5_word_t;
typedef unsigned char md5_byte_t;
typedef struct md5_state_s {
    md5_word_t count[2];
    md5_word_t abcd[4];
    md5_byte_t buf[64];
} md5_state_t;
typedef enum {
    IPP_JOB_PENDING = 3,
    IPP_JOB_HELD = 4,
    IPP_JOB_PROCESSING = 5,
    IPP_JOB_STOPPED = 6,
    IPP_JOB_CANCELLED = 7,
    IPP_JOB_ABORTED = 8,
    IPP_JOB_COMPLETED = 9
} ipp_jstate_t;
typedef struct {
    int id;
    char *dest;
    char *title;
    char *user;
    char *format;
    ipp_jstate_t state;
    int size;
    int priority;
    time_t completed_time;
    time_t creation_time;
    time_t processing_time;
} cups_job_t;
typedef enum {
    IPP_OK = 0,
    IPP_OK_SUBST = 1,
    IPP_OK_CONFLICT = 2,
    IPP_OK_IGNORED_SUBSCRIPTIONS = 3,
    IPP_OK_IGNORED_NOTIFICATIONS = 4,
    IPP_OK_TOO_MANY_EVENTS = 5,
    IPP_OK_BUT_CANCEL_SUBSCRIPTION = 6,
    IPP_REDIRECTION_OTHER_SITE = 768,
    IPP_BAD_REQUEST = 1024,
    IPP_FORBIDDEN = 1025,
    IPP_NOT_AUTHENTICATED = 1026,
    IPP_NOT_AUTHORIZED = 1027,
    IPP_NOT_POSSIBLE = 1028,
    IPP_TIMEOUT = 1029,
    IPP_NOT_FOUND = 1030,
    IPP_GONE = 1031,
    IPP_REQUEST_ENTITY = 1032,
    IPP_REQUEST_VALUE = 1033,
    IPP_DOCUMENT_FORMAT = 1034,
    IPP_ATTRIBUTES = 1035,
    IPP_URI_SCHEME = 1036,
    IPP_CHARSET = 1037,
    IPP_CONFLICT = 1038,
    IPP_COMPRESSION_NOT_SUPPORTED = 1039,
    IPP_COMPRESSION_ERROR = 1040,
    IPP_DOCUMENT_FORMAT_ERROR = 1041,
    IPP_DOCUMENT_ACCESS_ERROR = 1042,
    IPP_ATTRIBUTES_NOT_SETTABLE = 1043,
    IPP_IGNORED_ALL_SUBSCRIPTIONS = 1044,
    IPP_TOO_MANY_SUBSCRIPTIONS = 1045,
    IPP_IGNORED_ALL_NOTIFICATIONS = 1046,
    IPP_PRINT_SUPPORT_FILE_NOT_FOUND = 1047,
    IPP_INTERNAL_ERROR = 1280,
    IPP_OPERATION_NOT_SUPPORTED = 1281,
    IPP_SERVICE_UNAVAILABLE = 1282,
    IPP_VERSION_NOT_SUPPORTED = 1283,
    IPP_DEVICE_ERROR = 1284,
    IPP_TEMPORARY_ERROR = 1285,
    IPP_NOT_ACCEPTING = 1286,
    IPP_PRINTER_BUSY = 1287,
    IPP_ERROR_JOB_CANCELLED = 1288,
    IPP_MULTIPLE_JOBS_NOT_SUPPORTED = 1289,
    IPP_PRINTER_IS_DEACTIVATED = 1290
} ipp_status_t;

typedef struct {
    int fd;
    int blocking;
    int error;
    time_t activity;
    http_state_t state;
    http_status_t status;
    http_version_t version;
    http_keepalive_t keep_alive;
    struct sockaddr_in hostaddr;
    char hostname[256];
    char fields[27];
    char *data;
    http_encoding_t data_encoding;
    int data_remaining;
    int used;
    char buffer[2048];
    int auth_type;
    md5_state_t md5_state;
    char nonce[256];
    int nonce_count;
    void *tls;
    http_encryption_t encryption;
    fd_set *input_set;
    http_status_t expect;
    char *cookie;
    char authstring[256];
    char userpass[256];
    int digest_tries;
} http_t;
extern void cupsLangFree(cups_lang_t *);
extern void cupsSetEncryption(http_encryption_t);
extern cups_dest_t *cupsGetDest(const char *, const char *, int,
				cups_dest_t *);
extern int cupsPrintFiles2(http_t *, const char *, int, const char **,
			   const char *, int, cups_option_t *);
extern int cupsGetJobs(cups_job_t * *, const char *, int, int);
extern http_encryption_t cupsEncryption(void);
extern void cupsFreeJobs(int, cups_job_t *);
extern void cupsFreeOptions(int, cups_option_t *);
extern int cupsPrintFile2(http_t *, const char *, const char *,
			  const char *, int, cups_option_t *);
extern const char *cupsGetOption(const char *, int, cups_option_t *);
extern int cupsSetDests2(http_t *, int, cups_dest_t *);
extern http_status_t cupsGetFile(http_t *, const char *, const char *);
extern int cupsMarkOptions(ppd_file_t *, int, cups_option_t *);
extern int cupsAddOption(const char *, const char *, int,
			 cups_option_t * *);
extern const char *cupsGetDefault2(http_t *);
extern int cupsGetDests(cups_dest_t * *);
extern void cupsSetServer(const char *);
extern const char *cupsGetPassword(const char *);
extern void cupsSetDests(int, cups_dest_t *);
extern int cupsParseOptions(const char *, int, cups_option_t * *);
extern void cupsSetPasswordCB(const char *(*digest_tries) (const char *)
    );
extern void cupsSetUser(const char *);
extern cups_lang_t *cupsLangGet(const char *);
extern int cupsGetDests2(http_t *, cups_dest_t * *);
extern int cupsGetJobs2(http_t *, cups_job_t * *, const char *, int, int);
extern void cupsLangFlush(void);
extern int cupsPrintFiles(const char *, int, const char **, const char *,
			  int, cups_option_t *);
extern int cupsCancelJob(const char *, int);
extern char *cupsLangEncoding(cups_lang_t *);
extern void cupsFreeDests(int, cups_dest_t *);
extern http_status_t cupsPutFile(http_t *, const char *, const char *);
extern http_status_t cupsPutFd(http_t *, const char *, int);
extern ipp_status_t cupsLastError(void);
extern const char *cupsGetDefault(void);
extern const char *cupsGetPPD(const char *);
extern const char *cupsServer(void);
extern const char *cupsUser(void);
extern const char *cupsGetPPD2(http_t *, const char *);
extern int cupsTempFd(char *, int);
extern int cupsPrintFile(const char *, const char *, const char *, int,
			 cups_option_t *);
extern http_status_t cupsGetFd(http_t *, const char *, int);
extern int cupsAddDest(const char *, const char *, int, cups_dest_t * *);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>cups/ppd.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define _CUPS_PPD_H_
#define PPD_MAX_LINE	256
#define PPD_VERSION	4.3
#define PPD_MAX_NAME	41
#define PPD_MAX_TEXT	81

typedef enum {
    PPD_CS_CMYK = -4,
    PPD_CS_CMY = -3,
    PPD_CS_GRAY = 1,
    PPD_CS_RGB = 3,
    PPD_CS_RGBK = 4,
    PPD_CS_N = 5
} ppd_cs_t;
typedef struct {
    char name[41];
    char *start;
    char *stop;
} ppd_emul_t;
typedef enum {
    PPD_UI_BOOLEAN = 0,
    PPD_UI_PICKONE = 1,
    PPD_UI_PICKMANY = 2
} ppd_ui_t;
typedef enum {
    PPD_ORDER_ANY = 0,
    PPD_ORDER_DOCUMENT = 1,
    PPD_ORDER_EXIT = 2,
    PPD_ORDER_JCL = 3,
    PPD_ORDER_PAGE = 4,
    PPD_ORDER_PROLOG = 5
} ppd_section_t;
typedef struct {
    char marked;
    char choice[41];
    char text[81];
    char *code;
    void *option;
} ppd_choice_t;
typedef struct {
    char conflicted;
    char keyword[41];
    char defchoice[41];
    char text[81];
    ppd_ui_t ui;
    ppd_section_t section;
    float order;
    int num_choices;
    ppd_choice_t *choices;
} ppd_option_t;
typedef struct ppd_group_str {
    char text[40];
    char name[41];
    int num_options;
    ppd_option_t *options;
    int num_subgroups;
    struct ppd_group_str *subgroups;
} ppd_group_t;
typedef struct {
    int marked;
    char name[41];
    float width;
    float length;
    float left;
    float bottom;
    float right;
    float top;
} ppd_size_t;
typedef struct {
    char option1[41];
    char choice1[41];
    char option2[41];
    char choice2[41];
} ppd_const_t;
typedef struct {
    char resolution[41];
    char media_type[41];
    float density;
    float gamma;
    float matrix[3];
} ppd_profile_t;
typedef struct {
    char name[41];
    char spec[41];
    char text[81];
    char *value;
} ppd_attr_t;
typedef struct {
    int language_level;
    int color_device;
    int variable_sizes;
    int accurate_screens;
    int contone_only;
    int landscape;
    int model_number;
    int manual_copies;
    int throughput;
    ppd_cs_t colorspace;
    char *patches;
    int num_emulations;
    ppd_emul_t *emulations;
    char *jcl_begin;
    char *jcl_ps;
    char *jcl_end;
    char *lang_encoding;
    char *lang_version;
    char *modelname;
    char *ttrasterizer;
    char *manufacturer;
    char *product;
    char *nickname;
    char *shortnickname;
    int num_groups;
    ppd_group_t *groups;
    int num_sizes;
    ppd_size_t *sizes;
    float custom_min[2];
    float custom_max[2];
    float custom_margins[4];
    int num_consts;
    ppd_const_t *consts;
    int num_fonts;
    char **fonts;
    int num_profiles;
    ppd_profile_t *profiles;
    int num_filters;
    char **filters;
    int flip_duplex;
    char *protocols;
    char *pcfilename;
    int num_attrs;
    int cur_attr;
    ppd_attr_t **attrs;
} ppd_file_t;
typedef enum {
    PPD_OK = 0,
    PPD_FILE_OPEN_ERROR = 1,
    PPD_NULL_FILE = 2,
    PPD_ALLOC_ERROR = 3,
    PPD_MISSING_PPDADOBE4 = 4,
    PPD_MISSING_VALUE = 5,
    PPD_INTERNAL_ERROR = 6,
    PPD_BAD_OPEN_GROUP = 7,
    PPD_NESTED_OPEN_GROUP = 8,
    PPD_BAD_OPEN_UI = 9,
    PPD_NESTED_OPEN_UI = 10,
    PPD_BAD_ORDER_DEPENDENCY = 11,
    PPD_BAD_UI_CONSTRAINTS = 12,
    PPD_MISSING_ASTERISK = 13,
    PPD_LINE_TOO_LONG = 14,
    PPD_ILLEGAL_CHARACTER = 15,
    PPD_ILLEGAL_MAIN_KEYWORD = 16,
    PPD_ILLEGAL_OPTION_KEYWORD = 17,
    PPD_ILLEGAL_TRANSLATION = 18,
    PPD_ILLEGAL_WHITESPACE = 19
} ppd_status_t;
typedef enum {
    PPD_CONFORM_RELAXED = 0,
    PPD_CONFORM_STRICT = 1
} ppd_conform_t;
extern float ppdPageLength(ppd_file_t *, const char *);
extern ppd_status_t ppdLastError(int *);
extern int ppdEmitFd(ppd_file_t *, int, ppd_section_t);
extern int ppdMarkOption(ppd_file_t *, const char *, const char *);
extern int ppdEmitJCL(ppd_file_t *, FILE *, int, const char *,
		      const char *);
extern ppd_choice_t *ppdFindChoice(ppd_option_t *, const char *);
extern ppd_file_t *ppdOpenFile(const char *);
extern int ppdEmit(ppd_file_t *, FILE *, ppd_section_t);
extern int ppdCollect(ppd_file_t *, ppd_section_t, ppd_choice_t * **);
extern ppd_option_t *ppdFindOption(ppd_file_t *, const char *);
extern void ppdMarkDefaults(ppd_file_t *);
extern ppd_file_t *ppdOpenFd(int);
extern ppd_attr_t *ppdFindNextAttr(ppd_file_t *, const char *,
				   const char *);
extern const char *ppdErrorString(ppd_status_t);
extern ppd_attr_t *ppdFindAttr(ppd_file_t *, const char *, const char *);
extern ppd_size_t *ppdPageSize(ppd_file_t *, const char *);
extern ppd_file_t *ppdOpen(FILE *);
extern int ppdIsMarked(ppd_file_t *, const char *, const char *);
extern float ppdPageWidth(ppd_file_t *, const char *);
extern int ppdConflicts(ppd_file_t *);
extern ppd_choice_t *ppdFindMarkedChoice(ppd_file_t *, const char *);
extern void ppdClose(ppd_file_t *);
extern void ppdSetConformance(ppd_conform_t);
</SCREEN>
</SECT2>
</SECT1>
<SECT1 ID=libcupsman>
<TITLE>Interface Definitions for libcups</TITLE>
<PARA>
The interfaces defined on the following pages are included in libcups and are defined
by this specification.
Unless otherwise noted, these interfaces shall be included
in the source standard.
</PARA>
<PARA>
Other interfaces listed in <XREF LINKEND=libcups> shall behave as described
in the referenced base document.
</PARA>
<!-- MISSING DEFINITION FOR cupsAddDest -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR cupsAddOption -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR cupsCancelJob -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR cupsEncryption -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR cupsFreeDests -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR cupsFreeJobs -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR cupsFreeOptions -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR cupsGetDefault -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR cupsGetDefault2 -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR cupsGetDest -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR cupsGetDests -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR cupsGetDests2 -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR cupsGetFd -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR cupsGetFile -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR cupsGetJobs -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR cupsGetJobs2 -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR cupsGetOption -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR cupsGetPPD -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR cupsGetPPD2 -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR cupsGetPassword -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR cupsLangEncoding -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR cupsLangFlush -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR cupsLangFree -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR cupsLangGet -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR cupsLastError -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR cupsMarkOptions -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR cupsParseOptions -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR cupsPrintFile -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR cupsPrintFile2 -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR cupsPrintFiles -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR cupsPrintFiles2 -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR cupsPutFd -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR cupsPutFile -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR cupsServer -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR cupsSetDests -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR cupsSetDests2 -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR cupsSetEncryption -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR cupsSetPasswordCB -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR cupsSetServer -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR cupsSetUser -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR cupsTempFd -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR cupsUser -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR ppdClose -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR ppdCollect -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR ppdConflicts -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR ppdEmit -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR ppdEmitFd -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR ppdEmitJCL -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR ppdErrorString -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR ppdFindAttr -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR ppdFindChoice -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR ppdFindMarkedChoice -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR ppdFindNextAttr -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR ppdFindOption -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR ppdIsMarked -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR ppdLastError -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR ppdMarkDefaults -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR ppdMarkOption -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR ppdOpen -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR ppdOpenFd -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR ppdOpenFile -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR ppdPageLength -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR ppdPageSize -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR ppdPageWidth -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR ppdSetConformance -->
<!-- Lets just hope nobody notices -->
</SECT1>
<!-- End of text generated from database -->
<!--    by $Header: mklibspec 1.82 2006/03/29 19:10:18 mats Exp 0 -->
