#!/usr/bin/perl

use Getopt::Long;
use Mysql;

use Env qw(LSBUSER LSBDBPASSWD LSBDB LSBDBHOST);

sub usage()
{
print STDERR "mkintlist -a <archname>\n";
die;
}

# Uncomment to trace SQL statments
#$trace=1;

#
# 1) process the arguments
#
GetOptions("a=s" => \$archname);

if( !$archname ) { usage(); }

#
# 2) Establish connection to the database
#
$Dbh = Mysql->connect($LSBDBHOST,$LSBDB,$LSBUSER, $LSBDBPASSWD) || die $Mysql::db_errstr;

#
# 3) get & print the architecture info
#
$select = "SELECT * FROM Architecture WHERE ";
$select.= "Architecture.Aname=".$Dbh->quote($archname);
print STDERR $select,"\n" if $trace;
$sth = $Dbh->query($select) || die $select."\n".$Dbh->errmsg();

%entry=$sth->fetchhash;
$Aid=$entry{'Aid'};
$Aname=$entry{'Aname'};

#print "<APPENDIX ID=app-A>\n";
#print "<TITLE>Alphabetical Listing of Interfaces</TITLE>\n";
#print "<PARA>\n";
#print "</PARA>\n";
#
# 4) get & print the library info
#
$select = "SELECT * FROM Library WHERE ";
$select.= "Library.Lstdstatus='Included'";
print STDERR $select,"\n" if $trace;
$lth = $Dbh->query($select) || die $select."\n".$Dbh->errmsg();
for(1..$lth->numrows) {

%entry=$lth->fetchhash;
$Lid=$entry{'Lid'};
$Lname=$entry{'Lname'};

$select = "SELECT Iname,Istandard,Istdstatus,Iisdeprecated,Vname ";
#$select.= "FROM Interface,LGInt,LibGroup ";
$select.= "FROM Interface ";
$select.= "INNER JOIN LGInt ON LGIint=Iid ";
$select.= "INNER JOIN LibGroup ON LGlib=$Lid ";
$select.= "LEFT JOIN Version ON Vid=Iversion ";
#$select.= "WHERE Iid=LGIint AND LGIlibg=LGid AND Itype='Function' ";
$select.= "WHERE LGIlibg=LGid AND Itype='Function' ";
#$select.= "AND LGlib=$Lid AND Iarch=$Aid ";
$select.= "AND Iarch=$Aid ";
#$select.= "AND ( Istdstatus='Included' OR Istdstatus='Deprecated' )";
$select.= "AND Istdstatus='Included' ";
$select.= "ORDER BY Iname";
$inh = $Dbh->query($select) || die $select."\n".$Dbh->errmsg();
if( $inh->numrows == 0) { next; }

print "$Lname Function Interfaces\n";

#
# 7) Get a list of the interfaces in the library
#
{
	local(*std);
	local(*symver);
	local(*entry);
	print STDERR $select,"\n" if $trace;
	for(1..$inh->numrows) {
		%entry=$inh->fetchhash;
		print $entry{'Iname'}."(".$entry{'Vname'}.")";
#		if( $entry{'Istdstatus'} eq "Deprecated" ) {
		if( ($entry{'Iisdeprecated'} eq "Yes") && ($entry{'Istdstatus'} eq "Included") ) {
			print " *Deprecated*";
			}
		print "\n";
	}
}

#
# 8) Make a table of data interfaces
#
{
	local(*datasym);
	local(*std);
	$select = "SELECT * FROM Interface,LGInt,LibGroup ";
	$select.= "WHERE Iid=LGIint AND LGIlibg=LGid AND Itype='Data' ";
	$select.= "AND LGlib=$Lid AND Iarch=$Aid AND Istdstatus='Included' ";
	$select.= "ORDER BY Iname";
	print STDERR $select,"\n" if $trace;
	$sth = $Dbh->query($select) || die $select."\n".$Dbh->errmsg();
	if ($sth->numrows > 0 ) {
	print "$Lname Data Interfaces\n";
		for(1..$sth->numrows) {
			%datasym=$sth->fetchhash;
			print $datasym{'Iname'}."(".$datasym{'Vname'}.")\n";
		}
	}
}
}
