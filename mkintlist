#!/usr/bin/perl

use Getopt::Long;
use DBI;

use Env qw(LSBUSER LSBDBPASSWD LSBDB LSBDBHOST);

sub usage()
{
print STDERR "mkintlist -a <archname> -v <lsbversion>\n";
die;
}

# Uncomment to trace SQL statments
#$trace=1;

#
# 1) process the arguments
#
GetOptions("a=s" => \$archname,
			"v=s" => \$lsbversion);

if( !$archname ) { usage(); }
if( !$lsbversion ) { usage(); }

#
# 2) Establish connection to the database
#
$dbh = DBI->connect('DBI:mysql:database='.$LSBDB.';host='.$LSBDBHOST, $LSBUSER, $LSBDBPASSWD)
    or die "Couldn't connect to database: ".DBI->errstr;

#
# 3) get & print the architecture info
#
$select = "SELECT * FROM Architecture WHERE ";
$select.= "Architecture.Aname=".$dbh->quote($archname);
print STDERR $select,"\n" if $trace;
$sth = $dbh->prepare($select) or die "Couldn't prepare $select query: ".DBI->errstr;
$sth->execute or die "Couldn't execute $select query: ".DBI->errstr;

$entry=$sth->fetchrow_hashref;
$Aid=$entry->{'Aid'};
$Aname=$entry->{'Aname'};
$sth->finish;

#print "<APPENDIX ID=app-A>\n";
#print "<TITLE>Alphabetical Listing of Interfaces</TITLE>\n";
#print "<PARA>\n";
#print "</PARA>\n";
#
# 4) get & print the library info
#
$select = "SELECT * FROM Library LEFT JOIN ArchLib ON ALlid=Lid WHERE ";
$select.= "(ALappearedin <= '$lsbversion' AND ALappearedin<>'' ";
$select.= "AND (ALwithdrawnin IS NULL OR ALwithdrawnin > '$lsbversion') ) ";
$select.= "AND ALaid=$Aid ";
print STDERR $select,"\n" if $trace;
$lth = $dbh->prepare($select) or die "Couldn't prepare $select query: ".DBI->errstr;
$lth->execute or die "Couldn't execute $select query: ".DBI->errstr;

for(1..$lth->rows) {

$entry=$lth->fetchrow_hashref;
$Lid=$entry->{'Lid'};
$Lname=$entry->{'Lname'};

$select = "SELECT Iname,Istandard,Isrcbin,Ideprecatedsince,Vname ";
#$select.= "FROM Interface,LGInt,LibGroup ";
$select.= "FROM Interface ";
$select.= "INNER JOIN LGInt ON LGIint=Iid ";
$select.= "INNER JOIN LibGroup ON LGlib=$Lid ";
$select.= "LEFT JOIN ArchInt ON Iid=AIint ";
$select.= "LEFT JOIN Version ON Vid=AIversion ";
#$select.= "WHERE Iid=LGIint AND LGIlibg=LGid AND Itype='Function' ";
$select.= "WHERE LGIlibg=LGid AND Itype='Function' ";
#$select.= "AND LGlib=$Lid AND Iarch=$Aid ";
$select.= "AND AIarch=$Aid ";
$select.= "AND (AIappearedin <= '$lsbversion' and AIappearedin<>'') ";
$select.= "AND (AIwithdrawnin IS NULL OR AIwithdrawnin >'$lsbversion') ";
# Include only arch specific interfaces
if( $Aid!=1 ) {
	$select.= "AND Iid NOT IN ";
	$select.= "(SELECT Iid FROM Interface";
	$select.= " LEFT JOIN ArchInt ON Iid=AIint";
	$select.= " WHERE AIarch=1 ";
	$select.= "AND (AIappearedin <= '$lsbversion' and AIappearedin<>'') ";
	$select.= "AND (AIwithdrawnin IS NULL OR AIwithdrawnin >'$lsbversion') )";
}
$select.= "ORDER BY Iname";
$inh = $dbh->prepare($select) or die "Couldn't prepare $select query: ".DBI->errstr;
$inh->execute or die "Couldn't execute $select query: ".DBI->errstr;
if( $inh->rows == 0) {
	$inh->finish;
	next;
}

print "$Lname Function Interfaces\n";

#
# 7) Get a list of the interfaces in the library
#
{
	local(*std);
	local(*symver);
	local(*entry);
	print STDERR $select,"\n" if $trace;
	for(1..$inh->rows) {
		$entry=$inh->fetchrow_hashref;
		print $entry->{'Iname'}."(".$entry->{'Vname'}.")";
		if( $entry->{'Ideprecatedsince'} and $entry->{'Ideprecatedsince'} le $lsbversion ) {
			print " *Deprecated*";
			}
		print "\n";
	}
}
$inh->finish;

#
# 8) Make a table of data interfaces
#
{
	local(*datasym);
	local(*std);

	$select = "SELECT * FROM Interface ";
	$select.= "LEFT JOIN LGInt ON Iid=LGIint ";
	$select.= "LEFT JOIN LibGroup ON LGIlibg=LGid ";
	$select.= "LEFT JOIN ArchInt ON Iid=AIint ";
	$select.= "WHERE Itype='Data' AND LGlib=$Lid AND AIarch=$Aid ";
	$select.= "AND (AIappearedin <= '$lsbversion' and AIappearedin<>'') ";
	$select.= "AND (AIwithdrawnin IS NULL OR AIwithdrawnin >'$lsbversion') ";
	if( $Aid!=1 ) {
		$select.= "AND Iid NOT IN ";
		$select.= "(SELECT Iid FROM Interface";
		$select.= " LEFT JOIN ArchInt ON Iid=AIint";
		$select.= " WHERE AIarch=1 ";
		$select.= "AND (AIappearedin <= '$lsbversion' and AIappearedin<>'') ";
		$select.= "AND (AIwithdrawnin IS NULL OR AIwithdrawnin >'$lsbversion') ) ";
	}
	$select.= "ORDER BY Iname";
	
	print STDERR $select,"\n" if $trace;
	$sth = $dbh->prepare($select) or die "Couldn't prepare $select query: ".DBI->errstr;
	$sth->execute or die "Couldn't execute $select query: ".DBI->errstr;
	if ($sth->rows > 0 ) {
	print "$Lname Data Interfaces\n";
		for(1..$sth->rows) {
			$datasym=$sth->fetchrow_hashref;
			print $datasym->{'Iname'}."(".$datasym->{'Vname'}.")\n";
		}
	}
	$sth->finish;
}
}
$lth->finish;
$dbh->disconnect;
