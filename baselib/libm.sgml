<SECT1 ID=libm>
<TITLE>libm</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Library:</ENTRY>
<ENTRY>libm</ENTRY>
</ROW>
<ROW>
<ENTRY>Runtime Path:</ENTRY>
<ENTRY>libm.so.lsb.1</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The behaviour of the interfaces in this library is specified by the following Standards.<SIMPLELIST COLUMNS=1>
<MEMBER>
CAE Specification, January 1997, System Interfaces and Headers (XSH),
Issue 5 (ISBN: 1-85912-181-0, C606)<FOOTNOTE ID="std-13-5">
<PARA>
CAE Specification, January 1997, System Interfaces and Headers (XSH),
Issue 5 (ISBN: 1-85912-181-0, C606)</PARA>
</FOOTNOTE>
</MEMBER>
</SIMPLELIST>
</PARA>
<SECT2>
<TITLE>Math</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>acos<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY>cos<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY>frexp<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY>log<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY>sinh<FOOTNOTEREF LINKEND="std-13-5"></ENTRY></ROW>
<ROW><ENTRY>acosh<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY>cosh<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY>gamma<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY>log10<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY>sqrt<FOOTNOTEREF LINKEND="std-13-5"></ENTRY></ROW>
<ROW><ENTRY>asin<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY>drem</ENTRY><ENTRY>gcvt<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY>log1p<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY>tan<FOOTNOTEREF LINKEND="std-13-5"></ENTRY></ROW>
<ROW><ENTRY>asinh<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY>erf<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY>hypot<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY>logb<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY>tanh<FOOTNOTEREF LINKEND="std-13-5"></ENTRY></ROW>
<ROW><ENTRY>atan<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY>erfc<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY>ilogb<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY>modf<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY>y0<FOOTNOTEREF LINKEND="std-13-5"></ENTRY></ROW>
<ROW><ENTRY>atan2<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY>exp<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY>isinf</ENTRY><ENTRY>nextafter<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY>y1<FOOTNOTEREF LINKEND="std-13-5"></ENTRY></ROW>
<ROW><ENTRY>atanh<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY>expm1<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY>j0<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY>pow<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY>yn<FOOTNOTEREF LINKEND="std-13-5"></ENTRY></ROW>
<ROW><ENTRY>cabs</ENTRY><ENTRY>fabs<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY>j1</ENTRY><ENTRY>remainder<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>cbrt<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY>finite</ENTRY><ENTRY>jn</ENTRY><ENTRY>rint<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>ceil<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY>floor<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY>ldexp<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY>scalb<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>copysign</ENTRY><ENTRY>fmod<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY>lgamma<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY>sin<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>Data Symbols</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>signgam<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY></ENTRY><ENTRY></ENTRY><ENTRY></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
</SECT1>
<SECT1 ID=libm-ddefs>
<TITLE> Data Definitions for libm</TITLE>
<PARA>
</PARA>
<SECT2>
<TITLE>math.h</TITLE>
<PARA>
</PARA>
<SCREEN>

/* IEEE positive infinity (-HUGE_VAL is negative infinity).  */

#define	__HUGE_VAL_bytes	{ 0, 0, 0, 0, 0, 0, 0xf0, 0x7f }

#define __huge_val_t	union { unsigned char __c[8]; double __d; }
#ifdef	__GNUC__
#define	HUGE_VAL	(__extension__ \
			 ((__huge_val_t) { __c: __HUGE_VAL_bytes }).__d)
#else	/* Not GCC.  */
static __huge_val_t __huge_val = { __HUGE_VAL_bytes };
#define	HUGE_VAL	(__huge_val.__d)
#endif	/* GCC.  */

#define MAXFLOAT        (-1) /* Didn't find this one */
#define M_1_PI		0.31830988618379067154
#define M_2_PI		0.63661977236758134308
#define M_2_SQRTPI      1.12837916709551257390
#define M_E		2.7182818284590452354
#define M_LN10		2.30258509299404568402
#define M_LN2		0.69314718055994530942
#define M_LOG10E        0.43429448190325182765
#define M_LOG2E		1.4426950408889634074
#define M_PI		3.14159265358979323846
#define M_PI_2		1.57079632679489661923
#define M_PI_4		0.78539816339744830962
#define M_SQRT1_2	0.70710678118654752440
#define M_SQRT2		1.41421356237309504880


int matherr(struct exception);

</SCREEN>
</SECT2>
<SECT2>
<TITLE>stdlib.h</TITLE>
<PARA>
</PARA>
<SCREEN>
#define EXIT_FAILURE    1
#define EXIT_SUCCESS    0
#define NULL    	0
#define RAND_MAX        2147483647


int __on_exit(void (, void);
char __secure_getenv(char);
double __strtod_internal(char, char, int);
float __strtof_internal(char, char, int);
long __strtol_internal(char, char, int, int);
long double __strtold_internal(char, char, int);
long long __strtoll_internal(char, char, int, int);
unsigned long __strtoul_internal(char, char, int, int);
unsigned long long __strtoull_internal(char, char, int, int);
long a64l(char);
void abort(void);
int abs(int);
int atexit(void ();
double atof(char);
int atoi(char);
long atol(char);
long long atoll(char);
void bsearch(void, void, size_t, size_t, __compar_fn_t);
div_t div(int, int);
double drand48(void);
int drand48_r(struct drand48_data, double);
char ecvt(double, int, int, int);
int ecvt_r(double, int, int, int, char, size_t);
double erand48(unsigned short);
void exit(int);
char fcvt(double, int, int, int);
int fcvt_r(double, int, int, int, char, size_t);
char gcvt(double, int, char);
char getenv(char);
long jrand48(unsigned short);
char l64a(long);
long labs(long);
void lcong48(unsigned short);
ldiv_t ldiv(long, long);
long lrand48(void);
int lrand48_r(struct drand48_data, long);
int mblen(char, size_t);
size_t mbstowcs(wchar_t, char, size_t);
int mbtowc(wchar_t, char, size_t);
int mkstemp(char);
char mktemp(char);
long mrand48(void);
int mrand48_r(struct drand48_data, long);
long nrand48(unsigned short);
int putenv(char);
char qecvt(long double, int, int, int);
int qecvt_r(long double, int, int, int, char, size_t);
char qfcvt(long double, int, int, int);
int qfcvt_r(long double, int, int, int, char, size_t);
char qgcvt(long double, int, char);
void qsort(void, size_t, size_t, __compar_fn_t);
int rand(void);
int rand_r(unsigned int);
int rpmatch(char);
unsigned short seed48(unsigned short);
void srand48(long);
size_t wcstombs(char, wchar_t, size_t);
int wctomb(char, wchar_t);
int system(char);
void calloc(size_t, size_t);
void free(void);
void initstate(unsigned int, void, size_t);
void malloc(size_t);
void realloc(void, size_t);
void setstate(void);
void srand(unsigned int);
void srandom(unsigned int);
double strtod(char, char);
long strtol(char, char, int);
long long strtoll(char, char, int);
long long strtoq(char, char, int);
unsigned long strtoul(char, char, int);
unsigned long long strtoull(char, char, int);
unsigned long long strtouq(char, char, int);
size_t __ctype_get_mb_cur_max(void);
void cfree(void);
int clearenv(void);
int erand48_r(unsigned short, struct drand48_data, double);
int initstate_r(unsigned int, void, size_t, struct random_data);
int jrand48_r(unsigned short, struct drand48_data, long);
int lcong48_r(unsigned short, struct drand48_data);
int nrand48_r(unsigned short, struct drand48_data, long);
int on_exit(void (, void);
int random_r(struct random_data);
char realpath(char, char);
int seed48_r(unsigned short, struct drand48_data);
int setenv(char, char, int);
int setstate_r(void, struct random_data);
int srand48_r(long, struct drand48_data);
int srandom_r(unsigned int, struct random_data);
void unsetenv(char);
void valloc(size_t);

</SCREEN>
</SECT2>
</SECT1>
