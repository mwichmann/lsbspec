<SECT1>
<TITLE>arpa/inet.h</TITLE>
<PARA></PARA>
<SCREEN>

uint32_t htonl(uint32_t hostlong);
unsigned long int inet_addr (const char *);
int inet_aton (const char *, struct in_addr *);
int inet_lnaof (struct in_addr );
struct in_addr inet_makeaddr (int , int );
int inet_netof (struct in_addr );
unsigned long int inet_network (const char *);
char * inet_ntoa (struct in_addr );
uint32_t ntohl(uint32_t netlong);


</SCREEN>
</SECT1>
<SECT1>
<TITLE>assert.h</TITLE>
<PARA></PARA>
<SCREEN>

void assert (int );


</SCREEN>
</SECT1>
<SECT1>
<TITLE>cpio.h</TITLE>
<PARA></PARA>
<SCREEN>
#define C_IRGRP         0000040
#define C_IROTH         0000004
#define C_IRUSR         0000400
#define C_ISBLK         0060000
#define C_ISCHR         0020000
#define C_ISCTG         0110000
#define C_ISDIR         0040000
#define C_ISFIFO        0010000
#define C_ISGID         0002000
#define C_ISLNK         0120000
#define C_ISREG         0100000
#define C_ISSOCK        0140000
#define C_ISUID         0004000
#define C_ISVTX         0001000
#define C_IWGRP         0000020
#define C_IWOTH         0000002
#define C_IWUSR         0000200
#define C_IXGRP         0000010
#define C_IXOTH         0000001
#define C_IXUSR         0000100
#define MAGIC           "070707"




</SCREEN>
</SECT1>
<SECT1>
<TITLE>ctype.h</TITLE>
<PARA></PARA>
<SCREEN>

int _tolower(int c);
int _toupper(int c);
int isalnum (int );
int isalpha (int );
int isascii(int c);
int iscntrl (int );
int isdigit (int );
int isgraph (int );
int islower (int );
int isprint (int );
int ispunct (int );
int isspace (int );
int isupper (int );
int isxdigit (int );
int toascii(int c);
int tolower (int );
int toupper (int );


</SCREEN>
</SECT1>
<SECT1>
<TITLE>dirent.h</TITLE>
<PARA></PARA>
<SCREEN>

int closedir (DIR *);
 DIR* opendir (const char *);
struct dirent * readdir (DIR *);
int readdir_r(DIR *dirp, struct dirent *entry, struct dirent **result);
void rewinddir (DIR *);
void seekdir (DIR *, off_t );
off_t telldir (DIR *);


</SCREEN>
</SECT1>
<SECT1>
<TITLE>errno.h</TITLE>
<PARA></PARA>
<SCREEN>
#define	EPERM		 1	/* Operation not permitted */
#define	ENOENT		 2	/* No such file or directory */
#define	ESRCH		 3	/* No such process */
#define	EINTR		 4	/* Interrupted system call */
#define	EIO		 5	/* I/O error */
#define	ENXIO		 6	/* No such device or address */
#define	E2BIG		 7	/* Arg list too long */
#define	ENOEXEC		 8	/* Exec format error */
#define	EBADF		 9	/* Bad file number */
#define	ECHILD		10	/* No child processes */
#define	EDEADLK		11	/* Resource deadlock would occur */
#define	ENOMEM		12	/* Out of memory */
#define	EACCES		13	/* Permission denied */
#define	EFAULT		14	/* Bad address */
#define	ENOTBLK		15	/* Block device required */
#define	EBUSY		16	/* Device or resource busy */
#define	EEXIST		17	/* File exists */
#define	EXDEV		18	/* Cross-device link */
#define	ENODEV		19	/* No such device */
#define	ENOTDIR		20	/* Not a directory */
#define	EISDIR		21	/* Is a directory */
#define	EINVAL		22	/* Invalid argument */
#define	ENFILE		23	/* File table overflow */
#define	EMFILE		24	/* Too many open files */
#define	ENOTTY		25	/* Not a typewriter */
#define	ETXTBSY		26	/* Text file busy */
#define	EFBIG		27	/* File too large */
#define	ENOSPC		28	/* No space left on device */
#define	ESPIPE		29	/* Illegal seek */
#define	EROFS		30	/* Read-only file system */
#define	EMLINK		31	/* Too many links */
#define	EPIPE		32	/* Broken pipe */
#define	EDOM		33	/* Math argument out of domain of func */
#define	ERANGE		34	/* Math result not representable */
#define	EAGAIN		35	/* Try again */
#define	ENAMETOOLONG	63	/* File name too long */
#define	ENOTEMPTY	66	/* Directory not empty */
#define	ENOLCK		77	/* No record locks available */
#define	ENOSYS		78	/* Function not implemented */
#define	ENOMSG		80	/* No message of desired type */
#define	EIDRM		81	/* Identifier removed */
#define	EBADFD		114	/* File descriptor in bad state */
#define	EILSEQ		116	/* Illegal byte sequence */
#define	EREMOTEIO	121	/* Remote I/O error */
#define	EWOULDBLOCK	EAGAIN	/* Operation would block */
#define	EDEADLOCK	EDEADLK

int *__errno_location();
int errno;


</SCREEN>
</SECT1>
<SECT1>
<TITLE>fcntl.h</TITLE>
<PARA></PARA>
<SCREEN>
#define O_ACCMODE	  0003
#define O_RDONLY	    00
#define O_WRONLY	    01
#define O_RDWR		    02
#define O_CREAT		  0100	/* not fcntl */
#define O_EXCL		  0200	/* not fcntl */
#define O_NOCTTY	  0400	/* not fcntl */
#define O_TRUNC		 01000	/* not fcntl */
#define O_APPEND	 02000
#define O_NONBLOCK	 04000
#define O_NDELAY	O_NONBLOCK
#define O_SYNC		010000
#define O_FSYNC		O_SYNC
#define O_ASYNC		020000

#define F_DUPFD		0	/* dup */
#define F_GETFD		1	/* get f_flags */
#define F_SETFD		2	/* set f_flags */
#define F_GETFL		3	/* more flags (cloexec) */
#define F_SETFL		4
#define F_GETLK		5
#define F_SETLK		6
#define F_SETLKW	7

/* for F_[GET|SET]FL */
#define FD_CLOEXEC	1	/* actually anything with low bit set goes */

/* for posix fcntl() and lockf() */
#define F_RDLCK		0
#define F_WRLCK		1
#define F_UNLCK		2

struct flock {
	short int l_type;
	short int l_whence;
	off_t l_start;
	off_t l_len;
	pid_t l_pid;
};

int creat (const char *, mode_t );
int fcntl (int , int , ...);


</SCREEN>
</SECT1>
<SECT1>
<TITLE>float.h</TITLE>
<PARA></PARA>
<SCREEN>



</SCREEN>
</SECT1>
<SECT1>
<TITLE>fnmatch.h</TITLE>
<PARA></PARA>
<SCREEN>

int fnmatch (const char *, const char *, int );


</SCREEN>
</SECT1>
<SECT1>
<TITLE>ftw.h</TITLE>
<PARA></PARA>
<SCREEN>
#define FTW_F   0
#define FTW_D   1
#define FTW_DNR 2
#define FTW_NS  3

ftw(const char *, int (*)(const char *, const struct stat*, int) int);


</SCREEN>
</SECT1>
<SECT1>
<TITLE>glob.h</TITLE>
<PARA></PARA>
<SCREEN>

int glob (const char *, int , int (*) (const char * , int ), glob_t *);
void globfree(glob_t *pglob);


</SCREEN>
</SECT1>
<SECT1>
<TITLE>grp.h</TITLE>
<PARA></PARA>
<SCREEN>

void endgrent(void);
struct group *getgrent(void);
struct group * getgrgid (gid_t );
int getgrgid_r(gid_t gid, struct group *grp, char *buffer, size_t bufsize, struct group **result);
struct group *getgrnam(const char *name);
int getgrnam_r(const char *name, struct group *grp, char *buffer, size_t bufsize, struct group **result);
int initgroups (const char *, gid_t );
void setgrent(void);
int setgroups (size_t , gid_t *);


</SCREEN>
</SECT1>
<SECT1>
<TITLE>iconv.h</TITLE>
<PARA></PARA>
<SCREEN>

size_t iconv(iconv_t cd, const char **inbuf, size_t *inbytesleft, char **outbuf, size_t *outbytesleft);
int iconv_close(iconv_t cd);
iconv_t iconv_open(const char *tocode, const char *fromcode);


</SCREEN>
</SECT1>
<SECT1>
<TITLE>langinfo.h</TITLE>
<PARA></PARA>
<SCREEN>

#define _NL_ITEM(category, index)	(((category) << 16) | (index))

/* Enumeration of locale items that can be queried with nl_langinfo.  */
typedef enum
{
  /* LC_TIME category: date and time formatting.  */

  /* Abbreviated days of the week. */
  ABDAY_1 = _NL_ITEM (LC_TIME, 0), /* Sun */
  ABDAY_2,
  ABDAY_3,
  ABDAY_4,
  ABDAY_5,
  ABDAY_6,
  ABDAY_7,

  /* Long-named days of the week. */
  DAY_1,			/* Sunday */
  DAY_2,			/* Monday */
  DAY_3,			/* Tuesday */
  DAY_4,			/* Wednesday */
  DAY_5,			/* Thursday */
  DAY_6,			/* Friday */
  DAY_7,			/* Saturday */

  /* Abbreviated month names.  */
  ABMON_1,			/* Jan */
  ABMON_2,
  ABMON_3,
  ABMON_4,
  ABMON_5,
  ABMON_6,
  ABMON_7,
  ABMON_8,
  ABMON_9,
  ABMON_10,
  ABMON_11,
  ABMON_12,

  /* Long month names.  */
  MON_1,			/* January */
  MON_2,
  MON_3,
  MON_4,
  MON_5,
  MON_6,
  MON_7,
  MON_8,
  MON_9,
  MON_10,
  MON_11,
  MON_12,

  AM_STR,			/* Ante meridian string.  */
  PM_STR,			/* Post meridian string.  */

  D_T_FMT,			/* Date and time  for strftime.  */
  D_FMT,			/* Date  for strftime.  */
  T_FMT,			/* Time  for strftime.  */
  T_FMT_AMPM,			/* 12-hour time  for strftime.  */

  ERA,				/* Alternate era.  */
  ERA_YEAR,			/* Year in alternate era .  */
  ERA_D_FMT,			/* Date in alternate era .  */
  ALT_DIGITS,			/* Alternate symbols for digits.  */
  ERA_D_T_FMT,			/* Date and time in alternate era .  */
  ERA_T_FMT,			/* Time in alternate era .  */

  _NL_TIME_NUM_ALT_DIGITS,	/* Number entries in the alt_digits arrays.  */

  _NL_TIME_ERA_NUM_ENTRIES,	/* Number entries in the era arrays.  */
  _NL_TIME_ERA_ENTRIES_EB,	/* Structure with era entries in usable form.*/
  _NL_TIME_ERA_ENTRIES_EL,

  _NL_NUM_LC_TIME,		/* Number of indices in LC_TIME category.  */

  /* LC_COLLATE category: text sorting.
     This information is accessed by the strcoll and strxfrm functions.
     These nl_langinfo names are used only internally.  */
  _NL_COLLATE_NRULES = _NL_ITEM (LC_COLLATE, 0),
  _NL_COLLATE_RULES,
  _NL_COLLATE_HASH_SIZE,
  _NL_COLLATE_HASH_LAYERS,
  _NL_COLLATE_TABLE_EB,
  _NL_COLLATE_TABLE_EL,
  _NL_COLLATE_UNDEFINED,
  _NL_COLLATE_EXTRA_EB,
  _NL_COLLATE_EXTRA_EL,
  _NL_COLLATE_ELEM_HASH_SIZE,
  _NL_COLLATE_ELEM_HASH_EB,
  _NL_COLLATE_ELEM_HASH_EL,
  _NL_COLLATE_ELEM_STR_POOL,
  _NL_COLLATE_ELEM_VAL_EB,
  _NL_COLLATE_ELEM_VAL_EL,
  _NL_COLLATE_SYMB_HASH_SIZE,
  _NL_COLLATE_SYMB_HASH_EB,
  _NL_COLLATE_SYMB_HASH_EL,
  _NL_COLLATE_SYMB_STR_POOL,
  _NL_COLLATE_SYMB_CLASS_EB,
  _NL_COLLATE_SYMB_CLASS_EL,
  _NL_NUM_LC_COLLATE,

  /* LC_CTYPE category: character classification.
     This information is accessed by the functions in "ctype.h".
     These nl_langinfo names are used only internally.  */
  _NL_CTYPE_CLASS = _NL_ITEM (LC_CTYPE, 0),
  _NL_CTYPE_TOUPPER_EB,
  _NL_CTYPE_TOLOWER_EB,
  _NL_CTYPE_TOUPPER_EL,
  _NL_CTYPE_TOLOWER_EL,
  _NL_CTYPE_CLASS32,
  _NL_CTYPE_NAMES_EB,
  _NL_CTYPE_NAMES_EL,
  _NL_CTYPE_HASH_SIZE,
  _NL_CTYPE_HASH_LAYERS,
  _NL_CTYPE_CLASS_NAMES,
  _NL_CTYPE_MAP_NAMES,
  _NL_CTYPE_WIDTH,
  _NL_CTYPE_MB_CUR_MAX,
  _NL_CTYPE_CODESET_NAME,
  _NL_NUM_LC_CTYPE,

  /* LC_MONETARY category: formatting of monetary quantities.
     These items each correspond to a member of struct lconv,
     defined in "locale.h".  */
  INT_CURR_SYMBOL = _NL_ITEM (LC_MONETARY, 0),
  CURRENCY_SYMBOL,
  MON_DECIMAL_POINT,
  MON_THOUSANDS_SEP,
  MON_GROUPING,
  POSITIVE_SIGN,
  NEGATIVE_SIGN,
  INT_FRAC_DIGITS,
  FRAC_DIGITS,
  P_CS_PRECEDES,
  P_SEP_BY_SPACE,
  N_CS_PRECEDES,
  N_SEP_BY_SPACE,
  P_SIGN_POSN,
  N_SIGN_POSN,
  _NL_NUM_LC_MONETARY,

  /* LC_NUMERIC category: formatting of numbers.
     These also correspond to members of struct lconv; see "locale.h".  */
  DECIMAL_POINT = _NL_ITEM (LC_NUMERIC, 0),
  THOUSANDS_SEP,
  GROUPING,
  _NL_NUM_LC_NUMERIC,

  YESEXPR = _NL_ITEM (LC_MESSAGES, 0), /* Regex matching yes input.  */
  NOEXPR,			/* Regex matching no input.  */
  YESSTR,			/* Output string for yes.  */
  NOSTR,			/* Output string for no.  */
  _NL_NUM_LC_MESSAGES,

  /* This marks the highest value used.  */
  _NL_NUM
} nl_item;

#define CRNCYSTR        (-1)	/* These don't seem to exist yet */
#define RADIXCHAR       (-1)	/* These don't seem to exist yet */
#define THOUSEP 	(-1)	/* These don't seem to exist yet */


char *nl_langinfo(nl_item item);


</SCREEN>
</SECT1>
<SECT1>
<TITLE>libgen.h</TITLE>
<PARA></PARA>
<SCREEN>

char *basename(char *path);
char *dirname(char *path);
char *regcmp (const char *string1 , ... /*, (char *)0 */);
char *regex (const char *re, const char *subject , ... );


</SCREEN>
</SECT1>
<SECT1>
<TITLE>limits.h</TITLE>
<PARA></PARA>
<SCREEN>
#define CHAR_BIT	8
#define SCHAR_MAX	127
#define UCHAR_MAX	255
#define CHAR_MAX	UCHAR_MAX
#define SCHAR_MIN	(-128)
#define CHAR_MIN	0
#define INT_MIN		(- INT_MAX - 1)
#define INT_MAX		2147483647
#define UINT_MAX	4294967295U
#define INT_MIN		(- INT_MAX - 1)
#define LONG_MAX	2147483647L
#define LONG_MIN	(- LONG_MAX - 1L)
#define ULONG_MAX	4294967295UL
#define LONG_MIN	(- LONG_MAX - 1L)
#define MB_LEN_MAX	6
#define SCHAR_MAX	127
#define SHRT_MAX	32767
#define USHRT_MAX	65535
#define SHRT_MIN	(-32768)
#define UCHAR_MAX	255
#define CHAR_MAX	UCHAR_MAX
#define ULONG_MAX	4294967295UL
#define USHRT_MAX	65535
#define SSIZE_MAX       INT_MAX
#define _POSIX_ARG_MAX          4096
#define _POSIX_CHILD_MAX        6
#define _POSIX_LINK_MAX         8
#define _POSIX_MAX_CANON        255
#define _POSIX_MAX_INPUT        255
#define _POSIX_NAME_MAX         14
#define _POSIX_NGROUPS_MAX      0
#define _POSIX_OPEN_MAX         16
#define _POSIX_PATH_MAX         255
#define _POSIX_PIPE_BUF         512
#define _POSIX_SSIZE_MAX        32767
#define _POSIX_STREAM_MAX       8
#define _POSIX_TZNAME_MAX       3

#define DBL_DIG         (-1)
#define DBL_MAX         (-1)
#define DBL_MIN         (-1)
#define FLT_DIG         (-1)
#define FLT_MAX         (-1)
#define FLT_MIN         (-1)
#define LONG_BIT        (-1)
#define NL_ARGMAX       4096
#define NL_LANGMAX      2048
#define NL_MSGMAX       INT_MAX
#define NL_NMAX         INT_MAX
#define NL_SETMAX       INT_MAX
#define NL_TEXTMAX      INT_MAX
#define NZERO           20
#define TMP_MAX         238328
#define WORD_BIT        (-1)




</SCREEN>
</SECT1>
<SECT1>
<TITLE>locale.h</TITLE>
<PARA></PARA>
<SCREEN>
#define LC_CTYPE        0
#define LC_NUMERIC      1
#define LC_TIME         2
#define LC_COLLATE      3
#define LC_MONETARY     4
#define LC_MESSAGES     5
#define	LC_ALL		6


/* Structure giving information about numeric and monetary notation.  */
struct lconv
{
  /* Numeric (non-monetary) information.  */

  char *decimal_point;		/* Decimal point character.  */
  char *thousands_sep;		/* Thousands separator.  */
  /* Each element is the number of digits in each group;
     elements with higher indices are farther left.
     An element with value CHAR_MAX means that no further grouping is done.
     An element with value 0 means that the previous element is used
     for all groups farther left.  */
  char *grouping;

  /* Monetary information.  */

  /* First three chars are a currency symbol from ISO 4217.
     Fourth char is the separator.  Fifth char is '\0'.  */
  char *int_curr_symbol;
  char *currency_symbol;	/* Local currency symbol.  */
  char *mon_decimal_point;	/* Decimal point character.  */
  char *mon_thousands_sep;	/* Thousands separator.  */
  char *mon_grouping;		/* Like grouping element (above).  */
  char *positive_sign;		/* Sign for positive values.  */
  char *negative_sign;		/* Sign for negative values.  */
  char int_frac_digits;		/* Int'l fractional digits.  */
  char frac_digits;		/* Local fractional digits.  */
  /* 1 if currency_symbol precedes a positive value, 0 if succeeds.  */
  char p_cs_precedes;
  /* 1 iff a space separates currency_symbol from a positive value.  */
  char p_sep_by_space;
  /* 1 if currency_symbol precedes a negative value, 0 if succeeds.  */
  char n_cs_precedes;
  /* 1 iff a space separates currency_symbol from a negative value.  */
  char n_sep_by_space;
  /* Positive and negative sign positions:
     0 Parentheses surround the quantity and currency_symbol.
     1 The sign string precedes the quantity and currency_symbol.
     2 The sign string follows the quantity and currency_symbol.
     3 The sign string immediately precedes the currency_symbol.
     4 The sign string immediately follows the currency_symbol.  */
  char p_sign_posn;
  char n_sign_posn;
};

struct lconv * localeconv (void);
char * setlocale (int , const char *);


</SCREEN>
</SECT1>
<SECT1>
<TITLE>math.h</TITLE>
<PARA></PARA>
<SCREEN>

/* IEEE positive infinity (-HUGE_VAL is negative infinity).  */

#define	__HUGE_VAL_bytes	{ 0, 0, 0, 0, 0, 0, 0xf0, 0x7f }

#define __huge_val_t	union { unsigned char __c[8]; double __d; }
#ifdef	__GNUC__
#define	HUGE_VAL	(__extension__ \
			 ((__huge_val_t) { __c: __HUGE_VAL_bytes }).__d)
#else	/* Not GCC.  */
static __huge_val_t __huge_val = { __HUGE_VAL_bytes };
#define	HUGE_VAL	(__huge_val.__d)
#endif	/* GCC.  */

#define MAXFLOAT        (-1) /* Didn't find this one */
#define M_1_PI		0.31830988618379067154
#define M_2_PI		0.63661977236758134308
#define M_2_SQRTPI      1.12837916709551257390
#define M_E		2.7182818284590452354
#define M_LN10		2.30258509299404568402
#define M_LN2		0.69314718055994530942
#define M_LOG10E        0.43429448190325182765
#define M_LOG2E		1.4426950408889634074
#define M_PI		3.14159265358979323846
#define M_PI_2		1.57079632679489661923
#define M_PI_4		0.78539816339744830962
#define M_SQRT1_2	0.70710678118654752440
#define M_SQRT2		1.41421356237309504880


double copysign (double , double );
int finite (double );
double frexp (double , int *);
int isinf (double );
int isnan (double );
double ldexp (double , int );
double modf (double , double *);
double acos (double );
double acosh (double );
double asinh (double );
double atanh (double );
double asin (double );
double atan (double );
double atan2 (double , double );
double cbrt (double );
double ceil (double );
double cos (double );
double cosh (double );
double erf(double x);
double erfc(double x);
double exp (double );
double expm1 (double );
double fabs (double );
double floor (double );
double fmod (double , double );
double gamma(double x);
double hypot (double , double );
int ilogb (double x);
double j0(double x);
double j1(double x);
double jn(int n, double x);
double lgamma(double x);
double log (double );
double log10 (double );
double log1p (double );
double logb (double );
double nextafter(double x, double y);
double pow (double , double );
double remainder(double x, double y);
double rint (double );
double scalb (double , int );
double sin (double );
double sinh (double );
double sqrt (double );
double tan (double );
double tanh (double );
double y0(double x);
double y1 (double x);
double yn (int n, double x);
double cabs (struct { double real, imag; } );
double drem (double , double );
double infnan (int );
extern int signgam;


</SCREEN>
</SECT1>
<SECT1>
<TITLE>monetary.h</TITLE>
<PARA></PARA>
<SCREEN>

ssize_t strfmon(char *s, size_t maxsize, const char *, ...);


</SCREEN>
</SECT1>
<SECT1>
<TITLE>netdb.h</TITLE>
<PARA></PARA>
<SCREEN>

void endnetent (void);
void endprotoent (void);
void endservent (void);
struct hostent * gethostbyaddr (const char *, int , int );
struct hostent * gethostbyname (const char *);
struct netent * getnetbyaddr (long , int );
struct netent * getnetbyname (const char *);
struct netent * getnetent (void);
struct protoent * getprotobyname (const char *);
struct protoent * getprotobynumber (int );
struct protoent * getprotoent (void);
struct servent * getservbyname (const char *, const char *);
struct servent * getservbyport (int , const char *);
struct servent * getservent (void);
void sethostent (int );
void setnetent (int );
void setprotoent (int );
void setservent (int );


</SCREEN>
</SECT1>
<SECT1>
<TITLE>nl_types.h</TITLE>
<PARA></PARA>
<SCREEN>
#define NL_SETD 1


int catclose(nl_catd catd);
char *catgets(nl_catd catd, int set_id, int msg_id, const char *s);
nl_catd catopen(const char *name, int oflag);


</SCREEN>
</SECT1>
<SECT1>
<TITLE>poll.h</TITLE>
<PARA></PARA>
<SCREEN>

int poll(struct pollfd fds[], nfds_t nfds, int timeout);


</SCREEN>
</SECT1>
<SECT1>
<TITLE>pthread.h</TITLE>
<PARA></PARA>
<SCREEN>

int pthread_attr_destroy(pthread_attr_t *attr);
int pthread_attr_getdetachstate(const pthread_attr_t *attr, int *detachstate);
int pthread_attr_getinheritsched(const pthread_attr_t *attr, int *inheritsched);
int pthread_attr_getschedparam(const pthread_attr_t *attr, struct sched_param *param);
int pthread_attr_getschedpolicy(const pthread_attr_t *attr, int *policy);
int pthread_attr_getscope(const pthread_attr_t *attr, int *contentionscope);
int pthread_attr_init(pthread_attr_t *attr);
int pthread_attr_setdetachstate(pthread_attr_t *attr, int detachstate);
int pthread_attr_setinheritsched(pthread_attr_t *attr, int inheritsched);
int pthread_attr_setschedparam(pthread_attr_t *attr, const struct sched_param *param);
int pthread_attr_setschedpolicy(pthread_attr_t *attr, int policy);
int pthread_attr_setscope(pthread_attr_t *attr, int contentionscope);
int pthread_cond_broadcast(pthread_cond_t *cond);
int pthread_cond_destroy(pthread_cond_t *cond);
int pthread_cond_init(pthread_cond_t *cond, const pthread_condattr_t *attr);
int pthread_cond_signal(pthread_cond_t *cond);
int pthread_cond_wait(pthread_cond_t *cond, pthread_mutex_t *mutex);
int pthread_condattr_destroy(pthread_condattr_t *attr);
int pthread_condattr_init(pthread_condattr_t *attr);
int pthread_equal(pthread_t t1, pthread_t t2);
void pthread_exit(void *value_ptr);
int pthread_getschedparam(pthread_t thread, int *policy, struct sched_param *param);
int pthread_mutex_destroy(pthread_mutex_t *mutex);
int pthread_mutex_init(pthread_mutex_t *mutex, const pthread_mutexattr_t *attr);
int pthread_mutex_lock(pthread_mutex_t *mutex);
int pthread_mutex_unlock(pthread_mutex_t *mutex);
pthread_t pthread_self(void);
int pthread_setcancelstate(int state, int *oldstate);
int pthread_setcanceltype(int type, int *oldtype);
int pthread_setschedparam(pthread_t thread, int policy, const struct sched_param *param);
int pthread_attr_getguardsize(const pthread_attr_t *attr, size_t *guardsize);
int pthread_attr_setguardsize(pthread_attr_t *attr, size_t guardsize);
int pthread_attr_setstackaddr(pthread_attr_t *attr, void *stackaddr);
int pthread_attr_getstackaddr(const pthread_attr_t *attr, void **stackaddr);
int pthread_attr_setstacksize(pthread_attr_t *attr, size_t stacksize);
int pthread_attr_getstacksize(const pthread_attr_t *attr, size_t *stacksize);
int pthread_cancel(pthread_t thread);
void pthread_cleanup_push(void (*routine)(void*), void *arg);
void pthread_cleanup_pop(int execute);
int pthread_cond_timedwait(pthread_cond_t *cond, pthread_mutex_t *mutex, const struct timespec *abstime);
int pthread_condattr_getpshared(const pthread_condattr_t *attr, int *pshared);
int pthread_condattr_setpshared(pthread_condattr_t *attr, int pshared);
int pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*start_routine)(void*), void *arg);
int pthread_detach(pthread_t thread);
int pthread_getconcurrency(void);
int pthread_setconcurrency(int new_level);
int pthread_setspecific(pthread_key_t key, const void *value);
void *pthread_getspecific(pthread_key_t key);
int pthread_join(pthread_t thread, void **value_ptr);
int pthread_key_delete(pthread_key_t key);
int pthread_mutex_setprioceiling(pthread_mutex_t *mutex, int prioceiling, int *old_ceiling);
int pthread_mutex_getprioceiling(const pthread_mutex_t *mutex, int *prioceiling);
int pthread_mutex_trylock(pthread_mutex_t *mutex);
int pthread_mutexattr_init(pthread_mutexattr_t *attr);
int pthread_mutexattr_destroy(pthread_mutexattr_t *attr);
int pthread_mutexattr_setprioceiling(pthread_mutexattr_t *attr, int prioceiling);
int pthread_mutexattr_getprioceiling(const pthread_mutexattr_t *attr, int *prioceiling);
int pthread_mutexattr_setprotocol(pthread_mutexattr_t *attr, int protocol);
int pthread_mutexattr_getprotocol(const pthread_mutexattr_t *attr, int *protocol);
int pthread_mutexattr_getpshared(const pthread_mutexattr_t *attr, int *pshared);
int pthread_mutexattr_setpshared(pthread_mutexattr_t *attr, int pshared);
int pthread_mutexattr_gettype(const pthread_mutexattr_t *attr, int *type);
int pthread_mutexattr_settype(pthread_mutexattr_t *attr, int type);
int pthread_rwlock_init(pthread_rwlock_t *rwlock, const pthread_rwlockattr_t *attr);
int pthread_rwlock_destroy(pthread_rwlock_t *rwlock);
int pthread_rwlock_rdlock(pthread_rwlock_t *rwlock);
int pthread_rwlock_tryrdlock(pthread_rwlock_t *rwlock);
int pthread_rwlock_wrlock(pthread_rwlock_t *rwlock);
int pthread_rwlock_trywrlock(pthread_rwlock_t *rwlock);
int pthread_rwlock_unlock(pthread_rwlock_t *rwlock);
int pthread_rwlockattr_init(pthread_rwlockattr_t *attr);
int pthread_rwlockattr_destroy(pthread_rwlockattr_t *attr);
int pthread_rwlockattr_getpshared(const pthread_rwlockattr_t *attr, int *pshared);
int pthread_rwlockattr_setpshared(pthread_rwlockattr_t *attr, int pshared);
void pthread_testcancel(void);


</SCREEN>
</SECT1>
<SECT1>
<TITLE>pwd.h</TITLE>
<PARA></PARA>
<SCREEN>

void endpwent(void);
struct passwd * getpwent (void);
struct passwd * getpwnam (const char *);
int getpwnam_r(const char *nam, struct passwd *pwd, char *buffer, size_t bufsize, struct passwd **result);
struct passwd * getpwuid (uid_t );
int getpwuid_r(uid_t uid, struct passwd *pwd, char *buffer, size_t bufsize, struct passwd **result);
void setpwent(void);


</SCREEN>
</SECT1>
<SECT1>
<TITLE>re_comp.h</TITLE>
<PARA></PARA>
<SCREEN>

char *re_comp(const char *string);
int re_exec(const char *string);


</SCREEN>
</SECT1>
<SECT1>
<TITLE>regexp.h</TITLE>
<PARA></PARA>
<SCREEN>

int advance(const char *string, const char *expbuf);
extern char* loc1;
extern char *loc2;
char *locs;
int step(const char *string, const char *expbuf);
char *compile(char *instring, char *expbuf, const char *endbuf, int eof);


</SCREEN>
</SECT1>
<SECT1>
<TITLE>sched.h</TITLE>
<PARA></PARA>
<SCREEN>

int sched_get_priority_max(int policy);
int sched_get_priority_min(int policy);
int sched_getparam(pid_t pid, struct sched_param *param);
int sched_getscheduler(pid_t pid);
int sched_rr_get_interval(pid_t pid, struct timespec *interval);
int sched_setparam(pid_t pid, const struct sched_param *param);
int sched_setscheduler(pid_t pid, int policy, const struct sched_param *param);
int sched_yield(void);


</SCREEN>
</SECT1>
<SECT1>
<TITLE>search.h</TITLE>
<PARA></PARA>
<SCREEN>

int hcreate(size_t nel);
void hdestroy(void);
ENTRY *hsearch (ENTRY item, ACTION action);
void insque(void *element, void *pred);
void remque(void *element);


</SCREEN>
</SECT1>
<SECT1>
<TITLE>setjmp.h</TITLE>
<PARA></PARA>
<SCREEN>

void _longjmp(jmp_buf env, int val);
int _setjmp(jmp_buf env);
void longjmp (jmp_buf , int );
int setjmp (jmp_buf );
void siglongjmp (sigjmp_buf , int );
int sigsetjmp (sigjmp_buf , int );


</SCREEN>
</SECT1>
<SECT1>
<TITLE>signal.h</TITLE>
<PARA></PARA>
<SCREEN>
/* Signals.  */
#define	SIGHUP		1	/* Hangup (POSIX).  */
#define	SIGINT		2	/* Interrupt (ANSI).  */
#define	SIGQUIT		3	/* Quit (POSIX).  */
#define	SIGILL		4	/* Illegal instruction (ANSI).  */
#define	SIGTRAP		5	/* Trace trap (POSIX).  */
#define	SIGABRT		6	/* Abort (ANSI).  */
#define	SIGIOT		6	/* IOT trap (4.2 BSD).  */
#define	SIGBUS		7	/* BUS error (4.2 BSD).  */
#define	SIGFPE		8	/* Floating-point exception (ANSI).  */
#define	SIGKILL		9	/* Kill, unblockable (POSIX).  */
#define	SIGUSR1		10	/* User-defined signal 1 (POSIX).  */
#define	SIGSEGV		11	/* Segmentation violation (ANSI).  */
#define	SIGUSR2		12	/* User-defined signal 2 (POSIX).  */
#define	SIGPIPE		13	/* Broken pipe (POSIX).  */
#define	SIGALRM		14	/* Alarm clock (POSIX).  */
#define	SIGTERM		15	/* Termination (ANSI).  */
#define	SIGSTKFLT	16	/* ??? */
#define	SIGCLD		SIGCHLD	/* Same as SIGCHLD (System V).  */
#define	SIGCHLD		17	/* Child status has changed (POSIX).  */
#define	SIGCONT		18	/* Continue (POSIX).  */
#define	SIGSTOP		19	/* Stop, unblockable (POSIX).  */
#define	SIGTSTP		20	/* Keyboard stop (POSIX).  */
#define	SIGTTIN		21	/* Background read from tty (POSIX).  */
#define	SIGTTOU		22	/* Background write to tty (POSIX).  */
#define	SIGURG		23	/* Urgent condition on socket (4.2 BSD).  */
#define	SIGXCPU		24	/* CPU limit exceeded (4.2 BSD).  */
#define	SIGXFSZ		25	/* File size limit exceeded (4.2 BSD).  */
#define	SIGVTALRM	26	/* Virtual alarm clock (4.2 BSD).  */
#define	SIGPROF		27	/* Profiling alarm clock (4.2 BSD).  */
#define	SIGWINCH	28	/* Window size change (4.3 BSD, Sun).  */
#define	SIGPOLL		SIGIO	/* Pollable event occurred (System V).  */
#define	SIGIO		29	/* I/O now possible (4.2 BSD).  */
#define	SIGPWR		30	/* Power failure restart (System V).  */
#define SIGUNUSED	31

#define	_NSIG		32	/* Biggest signal number + 1.  */

#define SIG_DFL		((__sighandler_t) 0)
#define SIG_IGN 	((__sighandler_t) 1)
#define SIG_ERR 	((__sighandler_t) -1)

#define SIG_BLOCK       0
#define SIG_UNBLOCK     1

#define SA_NOCLDSTOP    1
#define SIG_SETMASK     2


int kill (pid_t , int );
int killpg (int , int );
void psignal (int , const char *);
int raise (int );
int sigaction (int , const struct sigaction *, struct sigaction *);
int sigaddset (sigset_t *, int );
int sigaltstack (const struct sigaltstack *, struct sigaltstack *);
int sigblock (int );
int sigdelset (sigset_t *, int );
int sigemptyset (sigset_t *);
int sigfillset (sigset_t *);
int siginterrupt (int , int );
int sigismember (const sigset_t *, int );
sighandler_t signal (int , sighandler_t );
int sigpause (int );
int sigpending (sigset_t *);
int sigprocmask (int , const sigset_t *, sigset_t *);
int sigsetmask (int );
int sigstack (const struct sigstack *, struct sigstack *);
int sigsuspend (const sigset_t *);
int sigvec (int , const struct sigvec *,struct sigvec *);
int sigwait(const sigset_t *set, int *sig);
int pthread_kill(pthread_t thread, int sig);
int pthread_sigmask(int how, const sigset_t *set, sigset_t *oset);
int sighold(int sig);
int sigignore(int sig);
int sigrelse(int sig);
int sigqueue(pid_t pid, int signo, const union sigval value);
int sigwaitinfo(const sigset_t *set, siginfo *info);
int sigtimedwait(const sigset_t *set, siginfo_t *info, const struct timespec *timeout);
int timer_create(clockid_t clockid, struct sigevent *evp, timer_t *timerid);
int sigmask (int );


</SCREEN>
</SECT1>
<SECT1>
<TITLE>stdarg.h</TITLE>
<PARA></PARA>
<SCREEN>

 va_arg (va_list , );
void va_end (va_list );
void va_start (va_list , );


</SCREEN>
</SECT1>
<SECT1>
<TITLE>stdio.h</TITLE>
<PARA></PARA>
<SCREEN>
#define NULL    	0

#define BUFSIZ  	8192
#define EOF     	(-1)
#define FOPEN_MAX       255

#define L_ctermid       9
#define L_cuserid       9
#define L_tmpnam        9
#define P_tmpdir        "/tmp"

#define SEEK_SET        0
#define SEEK_CUR        1
#define SEEK_END        2

#define _IOFBF          0
#define _IOLBF          1
#define _IONBF          2

#define TMP_MAX 	238328

extern FILE *stderr;
extern FILE *stdin;
extern FILE *stdout;


void clearerr ( FILE *);
char * ctermid (char *);
char * cuserid (char *);
int fclose (FILE *);
 FILE* fdopen (int , const char *);
int feof ( FILE *);
int ferror ( FILE *);
int fflush ( *);
int fgetc ( *);
int fgetpos ( *, fpos_t *);
char * fgets (char *, int ,  *);
int fileno ( *);
void flockfile(FILE *file);
 FILE* fopen (const char *, const char *);
int fprintf ( *, const char *, ...);
int fputc (int ,  *);
int fputs (const char *,  *);
size_t fread (void *, size_t , size_t ,  *);
 * freopen (const char *, const char *,  *);
int fscanf ( *, const char *, ...);
int fseek ( *, long int , int );
int fsetpos ( *, const fpos_t );
long int ftell ( *);
int ftrylockfile(FILE *file);
void funlockfile(FILE *file);
size_t fwrite (const void *, size_t , size_t ,  *);
int getc ( *);
int getc_unlocked(FILE *stream);
int getchar (void);
int getchar_unlocked(void);
char * gets (char *);
int getw(FILE *stream);
int pclose(FILE *stream);
void perror (const char *);
FILE *popen(const char *command, const char *mode);
int printf (const char *, ...);
int putc (int ,  *);
int putc_unlocked(int c, FILE *stream);
int putchar (int );
int putchar_unlocked(int c);
int puts (const char *);
int putw(int w, FILE *stream);
int remove (const char *);
int rename (const char *, const char *);
void rewind ( *);
int scanf (const char *, ...);
void setbuf ( *, char *);
void setbuffer ( *, char *, size_t );
void setlinebuf ( *);
int setvbuf ( *, char *, int , size_t );
int snprintf(char *s, size_t n, const char *, ...);
int sprintf (char *, const char *, ...);
int sscanf (const char *, const char *, ...);
char *tempnam(const char *dir, const char *pfx);
 * tmpfile (void);
char * tmpnam (char *);
int ungetc (int ,  *);
int vfprintf ( *, const char *, va_list );
int vprintf (const char *, va_list );
int vsnprintf(char *s, size_t n, const char *, va_list ap);
int vsprintf (char *, const char *, va_list );
size_t wcrtomb(char *s, wchar_t wc, mbstate_t *ps);
int fseeko(FILE *stream, off_t offset, int whence);
off_t ftello(FILE *stream);


</SCREEN>
</SECT1>
<SECT1>
<TITLE>stdlib.h</TITLE>
<PARA></PARA>
<SCREEN>
#define EXIT_FAILURE    1
#define EXIT_SUCCESS    0
#define NULL    	0
#define RAND_MAX        2147483647


long a64l(const char *s);
void abort (void);
int abs (int );
int atexit (void (*) (void));
double atof (const char *);
int atoi (const char *);
long int atol (const char *);
void * bsearch (const void *, const void *, size_t , size_t , comparison_fn_t );
void *calloc(size_t nelem, size_t elsize);
div_t div (int , int );
double drand48(void);
char *ecvt(double value, int ndigit, int *decpt, int *sign);
double erand48(unsigned short int xsubi[3]);
void exit (int );
char *fcvt(double value, int ndigit, int *decpt, int *sign);
void free(void *ptr);
char *gcvt(double value, int ndigit, char *buf);
char * getenv (const char *);
int getsubopt(char **optionp, char * const *tokens, char **valuep);
void * initstate (unsigned int , void *, size_t );
long int jrand48(unsigned short int xsubi[3]);
char *l64a(long value);
long int labs (long int );
void lcong48(unsigned short int param[7]);
ldiv_t ldiv (long int , long int );
long int lrand48(void);
void *malloc(size_t size);
int mblen (const char *, size_t );
size_t mbstowcs (wchar_t *, const char *, size_t );
int mbtowc (wchar_t *, const char *, size_t );
int mkstemp(char *template);
char *mktemp(char *template);
long int mrand48(void);
long int nrand48(unsigned short int xsubi[3]);
int putenv(char *string);
void qsort (void *, size_t , size_t , comparison_fn_t );
int rand (void);
int rand_r(unsigned int *seed);
long random(void);
void *realloc(void *ptr, size_t size);
char *realpath(const char *file_name, char *resolved_name);
unsigned short int *seed48(unsigned short int seed16v[3]);
void * setstate (void *);
void srand (unsigned int );
void srand48(long int seedval);
void srandom (unsigned int );
double strtod (const char *, char **);
long int strtol (const char *, char **, int );
long long int strtoq (const char *, char **, int );
unsigned long int strtoul (const char *, char **, int );
unsigned long long int strtouq (const char *, char **, int );
int system (const char *);
int ttyslot(void);
void *valloc(size_t size);
size_t wcstombs (char *, const wchar_t , size_t );
int wctomb (char *, wchar_t );
int grantpt(int fildes);
char *ptsname(int fildes);
void setkey(const char *key);
int unlockpt(int fildes);


</SCREEN>
</SECT1>
<SECT1>
<TITLE>string.h</TITLE>
<PARA></PARA>
<SCREEN>
#define NULL    0

void *memccpy(void *s1, const void *s2, int c, size_t n);
void * memchr (const void *, int , size_t );
int memcmp (const void *1, const void *2, size_t );
void * memcpy (void *, const void *, size_t );
void * memmove (void *, const void *, size_t );
void * memset (void *, int , size_t );
char * strcat (char *, const char *);
char * strchr (const char *, int );
int strcmp (const char *1, const char *2);
int strcoll (const char *1, const char *2);
char * strcpy (char *, const char *);
size_t strcspn (const char *, const char *);
char *strdup(const char *s1);
char * strerror (int );
size_t strlen (const char *);
char * strncat (char *, const char *, size_t );
int strncmp (const char *1, const char *2, size_t );
char * strncpy (char *, const char *, size_t );
char * strpbrk (const char *, const char *);
char * strrchr (const char *, int );
char * strsep (char **_, const char *);
size_t strspn (const char *, const char *);
char * strstr (const char *, const char *);
char * strtok (char *, const char *);
char *strtok_r(char *s, const char *sep, char **lasts);
size_t strxfrm (char *, const char *, size_t );


</SCREEN>
</SECT1>
<SECT1>
<TITLE>strings.h</TITLE>
<PARA></PARA>
<SCREEN>

int bcmp(const void *s1, const void *s2, size_t n);
void bcopy(const void *s1, void *s2, size_t n);
void bzero(void *s, size_t n);
int ffs(int i);
char *-1;
char *rindex(const char *s, int c);
int strcasecmp(const char *s1, const char *s2);
int strncasecmp(const char *s1, const char *s2, size_t n);


</SCREEN>
</SECT1>
<SECT1>
<TITLE>stropts.h</TITLE>
<PARA></PARA>
<SCREEN>

int ioctl(int fildes, int request, ... /* arg */);
int fattach(int fildes, const char *path);
int fdetach(const char *path);
int getmsg(int fildes, struct strbuf *ctlptr, struct strbuf *dataptr, int *flagsp);
int getpmsg(int fildes, struct strbuf *ctlptr, struct strbuf *dataptr, int *bandp, int *flagsp);
int isastream(int fildes);
int putmsg(int fildes, const struct strbuf *ctlptr, const struct strbuf *dataptr, int flags);
int putpmsg(int fildes, const struct strbuf *ctlptr, const struct strbuf *dataptr, int band, int flags);


</SCREEN>
</SECT1>
<SECT1>
<TITLE>sys/ipc.h</TITLE>
<PARA></PARA>
<SCREEN>

key_t ftok(const char *path, int id);


</SCREEN>
</SECT1>
<SECT1>
<TITLE>sys/mman.h</TITLE>
<PARA></PARA>
<SCREEN>

int mlock(const void * addr, size_t len);
int mlockall(int flags);
void *mmap(void *addr, size_t len, int prot, int flags, int fildes, off_t off);
int mprotect(void *addr, size_t len, int prot);
int msync(void *addr, size_t len, int flags);
int munlock(const void * addr, size_t len);
int munlockall(void);
int munmap(void *addr, size_t len);
int shm_open(const char *name, int oflag, mode_t mode);
int shm_unlink(const char * name);


</SCREEN>
</SECT1>
<SECT1>
<TITLE>sys/msg.h</TITLE>
<PARA></PARA>
<SCREEN>

int msgctl(int msqid, int cmd, struct msqid_ds *buf);
int msgget(key_t key, int msgflg);
ssize_t msgrcv(int msqid, void *msgp, size_t msgsz, long int msgtyp, int msgflg);
int msgsnd(int msqid, const void *msgp, size_t msgsz, int msgflg);


</SCREEN>
</SECT1>
<SECT1>
<TITLE>sys/resource.h</TITLE>
<PARA></PARA>
<SCREEN>

int getpriority (int , int );
int getrlimit (int , struct rlimit *);
int getrusage (int , struct rusage *);
int setpriority (int , int , int );
int setrlimit (int , struct rlimit *);


</SCREEN>
</SECT1>
<SECT1>
<TITLE>sys/sem.h</TITLE>
<PARA></PARA>
<SCREEN>

int semctl(int semid, int semnum, int cmd, ...);
int semget(key_t key, int nsems, int semflg);
int semop(int semid, struct sembuf *sops, size_t nsops);


</SCREEN>
</SECT1>
<SECT1>
<TITLE>sys/shm.h</TITLE>
<PARA></PARA>
<SCREEN>

void *shmat(int shmid, const void *shmaddr, int shmflg);
int shmctl(int shmid, int cmd, struct shmid_ds *buf);
int shmdt(const void *shmaddr);
int shmget(key_t key, size_t size, int shmflg);


</SCREEN>
</SECT1>
<SECT1>
<TITLE>sys/socket.h</TITLE>
<PARA></PARA>
<SCREEN>

int accept (int , struct sockaddr *, socklen_t *);
int bind (int , struct sockaddr *, socklen_t );
int connect (int , struct sockaddr *, socklen_t );
int getpeername (int , struct sockaddr *, size_t *);
int getsockname (int , struct sockaddr *, socklen_t *);
int getsockopt (int , int , int , void *, socklen_t *);
int listen (int , unsigned int );
int recv (int , void *, size_t , int );
int recvfrom (int , void *, size_t , int , struct sockaddr *, socklen_t *);
int recvmsg (int , struct msghdr *, int );
int send (int , void *, size_t , int );
int sendmsg (int , const struct msghdr *, int );
int sendto (int , void *. size_t , int , struct sockaddr *, socklen_t );
int setsockopt (int , int , int , void *, socklen_t );
int shutdown (int , int );
int socket (int , int , int );
int socketpair (int , int , int , int [2]);


</SCREEN>
</SECT1>
<SECT1>
<TITLE>sys/stat.h</TITLE>
<PARA></PARA>
<SCREEN>
#define S_IRGRP 00040
#define S_IROTH 00004
#define S_IRUSR 00400
#define S_IRWXG 00070
#define S_IRWXO 00007
#define S_IRWXU 00700
#define S_ISBLK(x)      (((x) & S_IFMT) == S_IFBLK)
#define S_ISCHR(x)      (((x) & S_IFMT) == S_IFCHR)
#define S_ISDIR(x)      (((x) & S_IFMT) == S_IFDIR)
#define S_ISFIFO(x)     (((x) & S_IFMT) == S_IFIFO)
#define S_ISGID 0002000
#define S_ISREG(x)      (((x) & S_IFMT) == S_IFREG)
#define S_ISUID 0004000
#define S_IWGRP 00020
#define S_IWOTH 00002
#define S_IWUSR 00200
#define S_IXGRP 00010
#define S_IXOTH 00001
#define S_IXUSR 00100
#define S_IFBLK 0060000
#define S_IFCHR 0020000
#define S_IFDIR 0040000
#define S_IFIFO 0010000
#define S_IFMT  0170000
#define S_IFREG 0100000


int chmod (const char *, mode_t );
int fchmod (int , int );
int mkdir (const char *, mode_t );
int mkfifo (const char *, mode_t );
mode_t umask (mode_t );
int fstat (int , struct stat *);
int lstat (const char *, struct stat *);
int mknod (const char *, int , int );
int stat (const char *, struct stat *);


</SCREEN>
</SECT1>
<SECT1>
<TITLE>sys/time.h</TITLE>
<PARA></PARA>
<SCREEN>

int adjtime (const struct timeval *, struct timeval *);
int getitimer (int , struct itimerval *);
int gettimeofday (struct timeval *, struct timezone *);
int select(int nfds, fd_set *readfds, fd_set *writefds, fd_set *errorfds, struct timeval *timeout);
int setitimer (int , struct itimerval *, struct itimerval *);
int settimeofday (const struct timeval *, const struct timezone *);
int utimes (const char *, struct timeval [2]);
void FD_CLR(int fd, fd_set *fdset);
int FD_ISSET(int fd, fd_set *fdset);
void FD_SET(int fd, fd_set *fdset);
void FD_ZERO(fd_set *fdset);


</SCREEN>
</SECT1>
<SECT1>
<TITLE>sys/timeb.h</TITLE>
<PARA></PARA>
<SCREEN>

int ftime(struct timeb *tp);


</SCREEN>
</SECT1>
<SECT1>
<TITLE>sys/times.h</TITLE>
<PARA></PARA>
<SCREEN>

clock_t times (struct tms *);


</SCREEN>
</SECT1>
<SECT1>
<TITLE>sys/types.h</TITLE>
<PARA></PARA>
<SCREEN>
typedef long long	dev_t;
typedef unsigned int	gid_t;
typedef unsigned long	ino_t;
typedef unsigned int	mode_t;
typedef unsigned int	nlink_t;
typedef long		off_t;
typedef int		pid_t;
typedef unsigned int	size_t;
typedef int		ssize_t;
typedef long		time_t; 
typedef long		clock_t; 
typedef int		uid_t;




</SCREEN>
</SECT1>
<SECT1>
<TITLE>sys/uio.h</TITLE>
<PARA></PARA>
<SCREEN>

ssize_t readv(int fildes, const struct iovec *iov, int iovcnt);


</SCREEN>
</SECT1>
<SECT1>
<TITLE>sys/utsname.h</TITLE>
<PARA></PARA>
<SCREEN>

int uname (struct utsname *);


</SCREEN>
</SECT1>
<SECT1>
<TITLE>sys/wait.h</TITLE>
<PARA></PARA>
<SCREEN>
#define WEXITSTATUS(s)  (((s) & 0xff00) >> 8)
#define WIFEXITED(s)    ( (s) & 0xff )
#define WIFSTOPPED(s)   (((status) & 0xff) == 0x7f)
#define WIFSIGNALED(s)  (!WIFSTOPPED(s) && !WIFEXITED(s))

#define WNOHANG         1
#define WUNTRACED       2

#define WSTOPSIG(s)     (-1)
#define WTERMSIG(s)     ((s) & 0x7f)


pid_t wait (int *);
pid_t wait3 (union wait *, int , struct rusage *);
pid_t wait4 (pid_t , int *, int , struct rusage *);
pid_t waitpid (pid_t , int *, int );
int waitid(idtype_t idtype, id_t id, siginfo_t *infop, int options);
int  (int );
int  (int );
int  (int );
int  (int );
int  (int );
int  (int );
int  (int );


</SCREEN>
</SECT1>
<SECT1>
<TITLE>syslog.h</TITLE>
<PARA></PARA>
<SCREEN>

void closelog(void);
void openlog(const char *ident, int logopt, int facility);
int setlogmask(int maskpri);
void syslog(int priority, const char *message, ... /* arguments */);


</SCREEN>
</SECT1>
<SECT1>
<TITLE>tar.h</TITLE>
<PARA></PARA>
<SCREEN>
#define AREGTYPE        '\0'
#define BLKTYPE         '4'
#define CHRTYPE         '3'
#define CONTTYPE        '7'
#define DIRTYPE         '5'
#define FIFOTYPE        '6'
#define LNKTYPE         '1'
#define REGTYPE         '0'
#define SYMTYPE         '2'
#define TGEXEC          00010
#define TGREAD          00040
#define TGWRITE         00020
#define TMAGIC          "ustar"
#define TMAGLEN         6
#define TOEXEC          00001
#define TOREAD          00004
#define TOWRITE         00002
#define TSGID           02000
#define TSUID           04000
#define TSVTX           01000
#define TUEXEC          00100
#define TUREAD          00400
#define TUWRITE         00200
#define TVERSION        "00"
#define TVERSLEN        2




</SCREEN>
</SECT1>
<SECT1>
<TITLE>termios.h</TITLE>
<PARA></PARA>
<SCREEN>
#define B0      0000000
#define B50     0000001
#define B75     0000002
#define B110    0000003
#define B134    0000004
#define B150    0000005
#define B200    0000006
#define B300    0000007
#define B600    0000010
#define B1200   0000011
#define B1800   0000012
#define B2400   0000013
#define B4800   0000014
#define B9600   0000015
#define B38400  0000017
#define B19200  0000016

#define CSIZE   0000060
#define CS5     0000000
#define CS6     0000020
#define CS7     0000040
#define CS8     0000060 

#define CSTOPB  0000100
#define CREAD   0000200
#define PARENB  0000400
#define PARODD  0001000
#define HUPCL   0002000
#define CLOCAL  0004000

/* c_iflag bits */
#define IGNBRK  0000001
#define BRKINT  0000002
#define IGNPAR  0000004
#define PARMRK  0000010
#define INPCK   0000020
#define ISTRIP  0000040
#define INLCR   0000100
#define IGNCR   0000200
#define ICRNL   0000400
#define IXON    0002000
#define IXOFF   0010000

/* c_oflag bits */
#define OPOST   0000001

/* c_lflag bits */
#define ISIG    0000001
#define ICANON  0000002
#define ECHO    0000010
#define ECHOE   0000020
#define ECHOK   0000040
#define ECHONL  0000100
#define NOFLSH  0000200
#define TOSTOP  0000400
#define IEXTEN  0100000

/* c_cc */
#define VINTR   0
#define VQUIT   1
#define VERASE  2
#define VKILL   3
#define VEOF    4
#define VTIME   5
#define VMIN    6
#define VSTART  8
#define VSTOP   9
#define VSUSP   10
#define VEOL    11

#define NCCS    32

/* tflow() */
#define TCOOFF  0
#define TCOON   1
#define TCIOFF  2
#define TCION   3

/* tcflush() */
#define TCIFLUSH        0
#define TCOFLUSH        1
#define TCIOFLUSH       2

/* tcsetattr */
#define TCSANOW 	0
#define TCSADRAIN       1
#define TCSAFLUSH       2

typedef unsigned char cc_t;
typedef unsigned int  tcflag_t;


speed_t cfgetispeed (const struct termios *);
speed_t cfgetospeed (const struct termios *);
int cfmakeraw (struct termios *);
int cfsetispeed (struct termios *, speed_t );
int cfsetospeed (struct termios *, speed_t );
int cfsetspeed (struct termios *, speed_t );
int tcdrain (int );
int tcflow (int , int );
int tcflush (int , int );
int tcgetattr (int , struct termios *);
int tcsendbreak (int , int );
int tcsetattr (int , int , const struct termios *);
pid_t tcgetsid(int fildes);


</SCREEN>
</SECT1>
<SECT1>
<TITLE>time.h</TITLE>
<PARA></PARA>
<SCREEN>
#define NULL    0

char * asctime (const struct tm *);
char *asctime_r(const struct tm *tm, char *buf);
clock_t clock (void);
char * ctime (const time_t *);
char *ctime_r(const time_t *clock, char *buf);
double difftime (time_t, time_t);
struct tm * gmtime (const time_t *);
struct tm *gmtime_r(const time_t *clock, struct tm *result);
struct tm * localtime (const time_t *);
struct tm *localtime_r(const time_t *clock, struct tm *result);
time_t mktime (struct tm *);
int nanosleep(const struct timespec *rqtp, struct timespec *rmtp);
size_t strftime (char *, size_t , const char *, const struct tm *);
char *strptime(const char *buf, const char *, struct tm *tm);
time_t time (time_t *);
char *tzname[];
void tzset (void);
int clock_settime(clockid_t clock_id, const struct timespec *tp);
int clock_gettime(clockid_t clock_id, struct timespec *tp);
int clock_getres(clockid_t clock_id, struct timespec *res);
struct tm *getdate(const char *string);
int timer_delete(timer_t timerid);
int timer_settime(timer_t timerid, int flags, const struct itimerspec *value, struct itimerspec *ovalue);
int timer_gettime(timer_t timerid, struct itimerspec *value);
int timer_getoverrun(timer_t timerid);


</SCREEN>
</SECT1>
<SECT1>
<TITLE>ulimit.h</TITLE>
<PARA></PARA>
<SCREEN>
#define UL_GETFSIZE     (-1)	/* unable to find these */
#define UL_SETFSIZE     (-1)	/* unable to find these */

long int ulimit(int cmd, ...);


</SCREEN>
</SECT1>
<SECT1>
<TITLE>unistd.h</TITLE>
<PARA></PARA>
<SCREEN>

#define	NULL	0

#define	_XOPEN_CRYPT	1
#define	_XOPEN_ENH_I18N	1
#define	STDIN_FILENO	0	/* Standard input.  */
#define	STDOUT_FILENO	1	/* Standard output.  */
#define	STDERR_FILENO	2	/* Standard error output.  */
#define	R_OK	4		/* Test for read permission.  */
#define	W_OK	2		/* Test for write permission.  */
#define	X_OK	1		/* Test for execute permission.  */
#define	F_OK	0		/* Test for existence.  */
#define	SEEK_SET	0	/* Seek from beginning of file.  */
#define	SEEK_CUR	1	/* Seek from current position.  */
#define	SEEK_END	2	/* Seek from end of file.  */

#define	L_SET		SEEK_SET
#define	L_INCR		SEEK_CUR
#define	L_XTND		SEEK_END
#define F_ULOCK 0       /* Unlock a previously locked region.  */
#define F_LOCK  1       /* Lock a region for exclusive use.  */
#define F_TLOCK 2       /* Test and lock a region for exclusive use.  */
#define F_TEST  3       /* Test a region for other processes locks.  */
#define	__USE_ANSI	1
#define	_POSIX_SOURCE	1
#ifdef _POSIX_C_SOURCE
#define	_POSIX_C_SOURCE	199506L
#endif
#define	_XOPEN_SOURCE	1
#define	_XOPEN_SOURCE_EXTENDED	1
#define	_BSD_SOURCE	1
#define	_SVID_SOURCE	1
#define	_BSD_SOURCE	1
#define	_SVID_SOURCE	1
#define	__USE_POSIX	1
#define	__USE_POSIX2	1
#define	__USE_POSIX199309	1
#define	__USE_XOPEN	1
#define	__USE_XOPEN_EXTENDED	1
#define	__USE_MISC	1
#define	__USE_BSD	1
#define	__USE_SVID	1
#define	__USE_GNU	1
#define __USE_REENTRANT	1
#define __GNU_LIBRARY__ 6
#define	__GLIBC__	2
#define	__GLIBC_MINOR__	0

/* Version Test Macros */

#define _POSIX_VERSION		199506L	/* version of ISO POSIX-1 */
#undef _POSIX2_VERSION
#define _POSIX2_C_VERSION	199209L /* version of ISO POSIX-2 */

#define _XOPEN_VERSION		500	/* version pf XPG */
#define _XOPEN_XCU_VERSION	4

#define	_POSIX2_C_BIND		1
#define _POSIX2_LOCALEDEF       1


/*        X/Open Portability Guide, Volume 2, January 1987, XVS System
          Calls and Libraries (ISBN: 0-444-70175-3). */
#define _XOPEN_XPG2	1

     _XOPEN_XPG3

/*        X/Open Specification, February 1992, System Interfaces and
          Headers, Issue 3 (ISBN: 1-872630-37-5, C212); this
          specification was formerly X/Open Portability Guide, Issue 3,
          Volume 2, January 1989, XSI System Interface and Headers
          (ISBN: 0-13-685843-0, XO/XPG/89/003). */
#define _XOPEN_XPG3	1

/*        X/Open CAE Specification, July 1992, System Interfaces and
          Headers, Issue 4 (ISBN: 1-872630-47-2, C202). */
#define _XOPEN_XPG4	1

/*        X/Open CAE Specification, January 1997, System Interfaces and
          Headers, Issue 5 (ISBN: 1-85912-181-0, C606). */
#define _XOPEN_UNIX	1

/*   Mandatory Symbolic Constants

     Although all implementations conforming to this specification
     support all of the FIPS features described below, there may be
     system-dependent or file-system-dependent configuration procedures
     that can remove or modify any or all of these features. Such
     configurations should not be made if strict FIPS compliance is
     required.

     The following symbolic constants are either undefined or defined
     with a value other than -1. If a constant is undefined, an
     application should use the sysconf(), pathconf() or fpathconf()
     functions to determine which features are present on the system at
     that time or for the particular pathname in question. */

#define	_POSIX_CHOWN_RESTRICTED	1
#define	_POSIX_NO_TRUNC		1
#define	_POSIX_VDISABLE		'\0'
#define	_POSIX_SAVED_IDS	1
#define	_POSIX_JOB_CONTROL	1

#define _POSIX_THREADS	1
#define _POSIX_REENTRANT_FUNCTIONS      1
#define _POSIX_THREAD_SAFE_FUNCTIONS	1
#define	_POSIX_THREAD_PRIORITY_SCHEDULING	1

/* pathconf() */

#define	_PC_CHOWN_RESTRICTED	6
#define	_PC_LINK_MAX	0
#define	_PC_MAX_CANON	1
#define	_PC_MAX_INPUT	2
#define	_PC_NAME_MAX	3
#define	_PC_NO_TRUNC	7
#define	_PC_PATH_MAX	4
#define	_PC_PIPE_BUF	5
#define	_PC_VDISABLE	8

/* sysconf() */
#define	_SC_ARG_MAX	0
#define	_SC_CHILD_MAX	1
#define	_SC_CLK_TCK	2
#define	_SC_JOB_CONTROL	7
#define	_SC_NGROUPS_MAX	3
#define	_SC_OPEN_MAX	4
#define	_SC_SAVED_IDS	8
#define	_SC_STREAM_MAX	5
#define	_SC_TZNAME_MAX	6
#define	_SC_VERSION	29


void _exit (int );
int access (const char *, int );
unsigned int alarm (unsigned int );
int brk(void *addr);
int chdir (const char *);
int chown (const char *, uid_t , gid_t );
int chroot(const char *path);
int close (int );
size_t confstr (int , char *, size_t );
int dup (int );
int dup2 (int , int );
int execl (const char *, const char *, ...);
int execle (const char *, const char *, char *const [], ...);
int execlp (const char *, const char *, ...);
int execv (const char *, char *const []);
int execve (const char *, char *const [], char *const []);
int execvp (const char *, char *const []);
int fchdir(int fildes);
int fchown (int , int , int );
int fdatasync(int fildes);
pid_t fork (void);
long int fpathconf (int , int );
int fsync(int fildes);
int ftruncate(int fildes, off_t length);
char * getcwd (char *, size_t );
int getdtablesize(void);
gid_t getegid (void);
uid_t geteuid (void);
gid_t getgid (void);
int getgroups (int , gid_t *);
long int gethostid (void);
int gethostname (char *, size_t );
char * getlogin (void);
int getlogin_r(char *name, size_t namesize);
int getopt (int , char **, const char *);
int getpagesize(void);
char *getpass(const char *prompt);
pid_t getpgid(pid_t pid);
pid_t getpgrp (void);
pid_t getpid (void);
pid_t getppid (void);
pid_t getsid(pid_t pid);
uid_t getuid (void);
char * getwd (char *);
int isatty (int );
int lchown(const char *path, uid_t owner, gid_t group);
int link (const char *, const char *);
int lockf(int fildes, int function, off_t size);
off_t lseek (int , off_t , int );
int nice(int incr);
long int pathconf (const char *, int );
int pause(void);
int pipe (int [2]);
ssize_t read (int , void *, size_t );
int readlink (const char *, char *, size_t );
int rmdir (const char *);
void *sbrk(intptr_t incr);
int setgid (gid_t );
int sethostid (long int );
int sethostname (const char *, size_t );
int setpgid (pid_t , pid_t );
int setpgrp (pid_t , pid_t );
int setregid (gid_t , fid_t );
int setreuid (uid_t , uid_t );
pid_t setsid (void);
int setuid (uid_t );
unsigned int sleep (unsigned int );
void swab(const void *src, void *dest, ssize_t nbytes);
int symlink (const char *, const char *);
void sync(void);
long int sysconf (int );
pid_t tcgetpgrp (int );
int tcsetpgrp (int , pid_t );
int truncate(const char *path, off_t length);
char * ttyname (int );
int ttyname_r(int fildes, char *name, size_t namesize);
useconds_t ualarm(useconds_t useconds, useconds_t interval);
int unlink (const char *);
int usleep(useconds_t useconds);
pid_t vfork (void);
ssize_t write (int , const void *, size_t );
char *crypt (const char *key, const char *salt);
void encrypt(char block[64], int edflag);
ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);


</SCREEN>
</SECT1>
<SECT1>
<TITLE>utime.h</TITLE>
<PARA></PARA>
<SCREEN>
struct utimbuf {
	time_t actime;            /* Access time.  */
	time_t modtime;           /* Modification time.  */
};

int utime(const char *path, const struct utimbuf *times);


</SCREEN>
</SECT1>
<SECT1>
<TITLE>wchar.h</TITLE>
<PARA></PARA>
<SCREEN>

wint_t btowc(int c);
size_t mbrlen(const char *s, size_t n, mbstate_t *ps);
size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps);
int mbsinit(const mbstate_t *ps);
size_t mbsrtowcs(wchar_t *dst, const char **src, size_t len, mbstate_t *ps);
wchar_t *wcscat(wchar_t *ws1, const wchar_t *ws2);
wchar_t *wcschr(const wchar_t *ws, wchar_t wc);
int wcscmp(const wchar_t *ws1, const wchar_t *ws2);
int wcscoll(const wchar_t *ws1, const wchar_t *ws2);
wchar_t *wcscpy(wchar_t *ws1, const wchar_t *ws2);
size_t wcscspn(const wchar_t *ws1, const wchar_t *ws2);
size_t wcslen(const wchar_t *ws);
wchar_t *wcsncat(wchar_t *ws1, const wchar_t *ws2, size_t n);
int wcsncmp(const wchar_t *ws1, const wchar_t *ws2, size_t n);
wchar_t *wcsncpy(wchar_t *ws1, const wchar_t *ws2, size_t n);
wchar_t *wcspbrk(const wchar_t *ws1, const wchar_t *ws2);
wchar_t *wcsrchr(const wchar_t *ws, wchar_t wc);
size_t wcsrtombs(char *dst, const wchar_t **src, size_t len, mbstate_t *ps);
size_t wcsspn(const wchar_t *ws1, const wchar_t *ws2);
wchar_t *wcsstr(const wchar_t *ws1, const wchar_t *ws2);
double wcstod(const wchar_t *nptr, wchar_t **endptr);
wchar_t *wcstok(wchar_t *ws1, const wchar_t *ws2, wchar_t **ptr);
long int wcstol(const wchar_t *nptr, wchar_t **endptr, int base);
unsigned long int wcstoul(const wchar_t *nptr, wchar_t **endptr, int base);
int wcswidth(const wchar_t *pwcs, size_t n);
size_t wcsxfrm(wchar_t *ws1, const wchar_t *ws2, size_t n);
int wctob(wint_t c);
int wcwidth(wchar_t wc);
wchar_t *wmemchr(const wchar_t *ws, wchar_t wc, size_t n);
int wmemcmp(const wchar_t *ws1, const wchar_t *ws2, size_t n);
wchar_t *wmemcpy(wchar_t *ws1, const wchar_t *ws2, size_t n);
wchar_t *wmemmove(wchar_t *ws1, const wchar_t *ws2, size_t n);
wchar_t *wmemset(wchar_t *ws, wchar_t wc, size_t n);
wint_t fgetwc(FILE *stream);
wchar_t *fgetws(wchar_t *ws, int n, FILE *stream);
wint_t fputwc(wchar_t wc, FILE *stream);
int fputws(const wchar_t *ws, FILE *stream);
int fwide(FILE *stream, int mode);
int fwprintf(FILE *stream, const wchar_t *, ...);
int wprintf(const wchar_t *, ...);
int swprintf(wchar_t *s, size_t n, const wchar_t *, ...);
int fwscanf(FILE *stream, const wchar_t *, ... );
int wscanf(const wchar_t *, ... );
int swscanf(const wchar_t *s, const wchar_t *, ... );
wint_t getwc(FILE *stream);
wint_t getwchar(void);
wint_t putwc(wchar_t wc, FILE *stream);
wint_t putwchar(wchar_t wc);
wint_t ungetwc(wint_t wc, FILE *stream);
int vwprintf(const wchar_t *, va_list arg);
int vfwprintf(FILE *stream, const wchar_t *, va_list arg);
int vswprintf(wchar_t *s, size_t n, const wchar_t *, va_list arg);
size_t wcsftime(wchar_t *wcs, size_t maxsize, const wchar_t *, const struct tm *timptr);
wchar_t *wcswcs(const wchar_t *ws1, const wchar_t *ws2);


</SCREEN>
</SECT1>
<SECT1>
<TITLE>wctype.h</TITLE>
<PARA></PARA>
<SCREEN>

int iswalnum(wint_t wc);
int iswalpha(wint_t wc);
int iswcntrl(wint_t wc);
int iswctype(wint_t wc, wctype_t charclass);
int iswdigit(wint_t wc);
int iswgraph(wint_t wc);
int iswlower(wint_t wc);
int iswprint(wint_t wc);
int iswpunct(wint_t wc);
int iswspace(wint_t wc);
int iswupper(wint_t wc);
int iswxdigit(wint_t wc);
wint_t towctrans(wint_t wc, wctrans_t desc);
wint_t towlower(wint_t wc);
wint_t towupper(wint_t wc);
wctrans_t wctrans(const char *charclass);
wctype_t wctype(const char *property);


</SCREEN>
</SECT1>

