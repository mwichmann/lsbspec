<PART>
<TITLE>Base Libraries</TITLE>

<CHAPTER id=baselib>
<TITLE>Libraries</TITLE>

<PARA>
The Base libraries correspond to those libraries needed to implement
the Single Unix Specification.
</PARA>

<SECT1>
<TITLE>libc</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Library:</ENTRY>
<ENTRY>libc</ENTRY>
</ROW>
<ROW>
<ENTRY>Runtime Path:</ENTRY>
<ENTRY>libc.lsb.1</ENTRY>
</ROW>
<ROW>
<ENTRY>Development Name:</ENTRY>
<ENTRY>libc</ENTRY>
</ROW>
<ROW>
<ENTRY>Header Location:</ENTRY>
<ENTRY>/usr/include</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The behaviour of the interfaces in this library is specified by the following Standards.<SIMPLELIST COLUMNS=1>
<MEMBER>
RFC 1831 & 1832<FOOTNOTE ID="std-3-8">
<PARA>
RFC 1831 & 1832</PARA>
</FOOTNOTE>
</MEMBER>
<MEMBER>
The Single UNIX® Specification, Version 2 Networking Services<FOOTNOTE ID="std-3-15">
<PARA>
The Single UNIX® Specification, Version 2 Networking Services</PARA>
</FOOTNOTE>
</MEMBER>
<MEMBER>
The Single UNIX Specification Version 2 (UNIX 98) System Interfaces & Headers<FOOTNOTE ID="std-3-5">
<PARA>
The Single UNIX Specification Version 2 (UNIX 98) System Interfaces & Headers</PARA>
</FOOTNOTE>
</MEMBER>
<MEMBER>
Unknown<FOOTNOTE ID="std-3-1">
<PARA>
Unknown</PARA>
</FOOTNOTE>
</MEMBER>
</SIMPLELIST>
</PARA>
<SECT2>
<TITLE>System Calls</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>access<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>fdatasync<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>lseek<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>readdir<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>setsid<FOOTNOTEREF LINKEND="std-3-5"></ENTRY></ROW>
<ROW><ENTRY>acct<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>flock<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>lstat<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>readlink<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>setuid<FOOTNOTEREF LINKEND="std-3-5"></ENTRY></ROW>
<ROW><ENTRY>alarm<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>fork<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>mkdir<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>readv<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>sleep<FOOTNOTEREF LINKEND="std-3-5"></ENTRY></ROW>
<ROW><ENTRY>brk<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>fstatfs<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>mkfifo<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>rename<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>statfs<FOOTNOTEREF LINKEND="std-3-1"></ENTRY></ROW>
<ROW><ENTRY>chdir<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>fsync<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>mknod<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>rmdir<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>statvfs<FOOTNOTEREF LINKEND="std-3-5"></ENTRY></ROW>
<ROW><ENTRY>chmod<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>getegid<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>mlock<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>sbrk<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>symlink<FOOTNOTEREF LINKEND="std-3-5"></ENTRY></ROW>
<ROW><ENTRY>chown<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>geteuid<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>mlockall<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>sched_getparam<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>sync<FOOTNOTEREF LINKEND="std-3-5"></ENTRY></ROW>
<ROW><ENTRY>chroot<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>getgid<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>mmap<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>sched_getscheduler<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>sysconf<FOOTNOTEREF LINKEND="std-3-5"></ENTRY></ROW>
<ROW><ENTRY>clock<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>getgroups<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>mprotect<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>sched_get_priority_max<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>time<FOOTNOTEREF LINKEND="std-3-5"></ENTRY></ROW>
<ROW><ENTRY>close<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>getitimer<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>msync<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>sched_get_priority_min<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>times<FOOTNOTEREF LINKEND="std-3-5"></ENTRY></ROW>
<ROW><ENTRY>closedir<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>getmsg<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>munlock<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>sched_rr_get_interval<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>truncate<FOOTNOTEREF LINKEND="std-3-5"></ENTRY></ROW>
<ROW><ENTRY>creat<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>getpgid<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>munlockall<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>sched_setparam<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>ulimit<FOOTNOTEREF LINKEND="std-3-5"></ENTRY></ROW>
<ROW><ENTRY>dup<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>getpgrp<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>munmap<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>sched_setscheduler<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>umask<FOOTNOTEREF LINKEND="std-3-5"></ENTRY></ROW>
<ROW><ENTRY>dup2<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>getpid<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>nanosleep<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>sched_yield<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>uname<FOOTNOTEREF LINKEND="std-3-5"></ENTRY></ROW>
<ROW><ENTRY>execl<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>getpriority<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>nice<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>select<FOOTNOTEREF LINKEND="std-3-15"></ENTRY><ENTRY>unlink<FOOTNOTEREF LINKEND="std-3-5"></ENTRY></ROW>
<ROW><ENTRY>execle<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>getrlimit<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>open<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>setegid<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>utime<FOOTNOTEREF LINKEND="std-3-5"></ENTRY></ROW>
<ROW><ENTRY>execlp<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>getrusage<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>opendir<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>seteuid<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>vfork<FOOTNOTEREF LINKEND="std-3-5"></ENTRY></ROW>
<ROW><ENTRY>execv<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>getsid<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>pathconf<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>setgid<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>wait<FOOTNOTEREF LINKEND="std-3-5"></ENTRY></ROW>
<ROW><ENTRY>execve<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>getuid<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>pause<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>setitimer<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>wait3<FOOTNOTEREF LINKEND="std-3-5"></ENTRY></ROW>
<ROW><ENTRY>execvp<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>initgroups<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>pipe<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>setpgid<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>wait4<FOOTNOTEREF LINKEND="std-3-1"></ENTRY></ROW>
<ROW><ENTRY>exit<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>ioctl<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>poll<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>setpgrp<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>waitid<FOOTNOTEREF LINKEND="std-3-5"></ENTRY></ROW>
<ROW><ENTRY>fchdir<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>kill<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>pread<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>setpriority<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>waitpid<FOOTNOTEREF LINKEND="std-3-5"></ENTRY></ROW>
<ROW><ENTRY>fchmod<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>killpg<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>putmsg<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>setregid<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>write<FOOTNOTEREF LINKEND="std-3-5"></ENTRY></ROW>
<ROW><ENTRY>fchown<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>lchown<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>pwrite<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>setreuid<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>writev<FOOTNOTEREF LINKEND="std-3-5"></ENTRY></ROW>
<ROW><ENTRY>fcntl<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>link<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>read<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>setrlimit<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>Standard I/O</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>clearerr<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>fileno<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>ftell<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>putw<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>sscanf<FOOTNOTEREF LINKEND="std-3-5"></ENTRY></ROW>
<ROW><ENTRY>ctermid<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>fopen<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>fwrite<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>remove<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>telldir<FOOTNOTEREF LINKEND="std-3-5"></ENTRY></ROW>
<ROW><ENTRY>fclose<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>fprintf<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>getc<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>rewind<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>tempnam<FOOTNOTEREF LINKEND="std-3-5"></ENTRY></ROW>
<ROW><ENTRY>fdopen<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>fputc<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>getchar<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>rewinddir<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>ungetc<FOOTNOTEREF LINKEND="std-3-5"></ENTRY></ROW>
<ROW><ENTRY>feof<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>fputs<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>gets<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>scanf<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>vfprintf<FOOTNOTEREF LINKEND="std-3-5"></ENTRY></ROW>
<ROW><ENTRY>ferror<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>fread<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>getw<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>seekdir<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>vprintf<FOOTNOTEREF LINKEND="std-3-5"></ENTRY></ROW>
<ROW><ENTRY>fflush<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>freopen<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>printf<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>setbuf<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>vsnprintf<FOOTNOTEREF LINKEND="std-3-5"></ENTRY></ROW>
<ROW><ENTRY>fgetc<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>fscanf<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>putc<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>setvbuf<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>vsprintf<FOOTNOTEREF LINKEND="std-3-5"></ENTRY></ROW>
<ROW><ENTRY>fgetpos<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>fseek<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>putchar<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>snprintf<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>fgets<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>fsetpos<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>puts<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>sprintf<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>Signal Handling</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>raise<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>sigemptyset<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>sigismember<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>sigprocmask<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>sigstack<FOOTNOTEREF LINKEND="std-3-5"></ENTRY></ROW>
<ROW><ENTRY>sigaction<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>sigfillset<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>siglongjmp<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>sigqueue<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>sigsuspend<FOOTNOTEREF LINKEND="std-3-5"></ENTRY></ROW>
<ROW><ENTRY>sigaddset<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>siggetmask<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>sigmask<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>sigrelse<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>sigtimedwait<FOOTNOTEREF LINKEND="std-3-5"></ENTRY></ROW>
<ROW><ENTRY>sigaltstack<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>sighold<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>signal<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>sigreturn<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>sigvec<FOOTNOTEREF LINKEND="std-3-1"></ENTRY></ROW>
<ROW><ENTRY>sigandset<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>sigignore<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>sigorset<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>sigset<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>sigwait<FOOTNOTEREF LINKEND="std-3-5"></ENTRY></ROW>
<ROW><ENTRY>sigblock<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>siginterrupt<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>sigpause<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>sigsetjmp<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>sigwaitinfo<FOOTNOTEREF LINKEND="std-3-1"></ENTRY></ROW>
<ROW><ENTRY>sigdelset<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>sigisemptyset<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>sigpending<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>sigsetmask<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>Standard Library</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>abort<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>div<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>insque<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>mrand48<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>seed48<FOOTNOTEREF LINKEND="std-3-5"></ENTRY></ROW>
<ROW><ENTRY>abs<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>drand48<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>jrand48<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>nrand48<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>setstate<FOOTNOTEREF LINKEND="std-3-5"></ENTRY></ROW>
<ROW><ENTRY>atexit<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>ecvt<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>labs<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>putenv<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>srand<FOOTNOTEREF LINKEND="std-3-5"></ENTRY></ROW>
<ROW><ENTRY>atof<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>erand48<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>ldiv<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>qsort<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>srand48<FOOTNOTEREF LINKEND="std-3-5"></ENTRY></ROW>
<ROW><ENTRY>atoi<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>fcvt<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>lrand48<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>rand<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>srandom<FOOTNOTEREF LINKEND="std-3-5"></ENTRY></ROW>
<ROW><ENTRY>atol<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>free<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>malloc<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>random<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>strtod<FOOTNOTEREF LINKEND="std-3-5"></ENTRY></ROW>
<ROW><ENTRY>bsearch<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>getenv<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>mkstemp<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>realloc<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>strtol<FOOTNOTEREF LINKEND="std-3-5"></ENTRY></ROW>
<ROW><ENTRY>calloc<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>initstate<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>mktemp<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>remque<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>strtoul<FOOTNOTEREF LINKEND="std-3-5"></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>Localization Functions</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>catclose<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>catgets<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>catopen<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>setlocale<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>Socket Interface</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>accept<FOOTNOTEREF LINKEND="std-3-15"></ENTRY><ENTRY>getpeername<FOOTNOTEREF LINKEND="std-3-15"></ENTRY><ENTRY>recvfrom<FOOTNOTEREF LINKEND="std-3-15"></ENTRY><ENTRY>sethostid<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>socketpair<FOOTNOTEREF LINKEND="std-3-15"></ENTRY></ROW>
<ROW><ENTRY>bind<FOOTNOTEREF LINKEND="std-3-15"></ENTRY><ENTRY>getsockname<FOOTNOTEREF LINKEND="std-3-15"></ENTRY><ENTRY>recvmsg<FOOTNOTEREF LINKEND="std-3-15"></ENTRY><ENTRY>sethostname<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>connect<FOOTNOTEREF LINKEND="std-3-15"></ENTRY><ENTRY>getsockopt<FOOTNOTEREF LINKEND="std-3-15"></ENTRY><ENTRY>send<FOOTNOTEREF LINKEND="std-3-15"></ENTRY><ENTRY>setsockopt<FOOTNOTEREF LINKEND="std-3-15"></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>gethostid<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>listen<FOOTNOTEREF LINKEND="std-3-15"></ENTRY><ENTRY>sendmsg<FOOTNOTEREF LINKEND="std-3-15"></ENTRY><ENTRY>shutdown<FOOTNOTEREF LINKEND="std-3-15"></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>gethostname<FOOTNOTEREF LINKEND="std-3-15"></ENTRY><ENTRY>recv<FOOTNOTEREF LINKEND="std-3-15"></ENTRY><ENTRY>sendto<FOOTNOTEREF LINKEND="std-3-15"></ENTRY><ENTRY>socket<FOOTNOTEREF LINKEND="std-3-15"></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>RPC Interfaces</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>authdes_create<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>pmap_unset<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>svc_register<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>xdr_des_block<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>xdr_rejected_reply<FOOTNOTEREF LINKEND="std-3-8"></ENTRY></ROW>
<ROW><ENTRY>authdes_getucred<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>registerrpc<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>svc_run<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>xdr_double<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>xdr_replymsg<FOOTNOTEREF LINKEND="std-3-8"></ENTRY></ROW>
<ROW><ENTRY>authdes_pk_create<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>rpc_createerr<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>svc_sendreply<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>xdr_enum<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>xdr_rmtcallres<FOOTNOTEREF LINKEND="std-3-8"></ENTRY></ROW>
<ROW><ENTRY>authnone_create<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>svcauthdes_stats<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>svc_unregister<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>xdr_float<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>xdr_rmtcall_args<FOOTNOTEREF LINKEND="std-3-8"></ENTRY></ROW>
<ROW><ENTRY>authunix_create<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>svcerr_auth<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>xdrmem_create<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>xdr_free<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>xdr_short<FOOTNOTEREF LINKEND="std-3-8"></ENTRY></ROW>
<ROW><ENTRY>authunix_create_default<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>svcerr_decode<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>xdrrec_create<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>xdr_getcredres<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>xdr_sizeof<FOOTNOTEREF LINKEND="std-3-8"></ENTRY></ROW>
<ROW><ENTRY>clntraw_create<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>svcerr_noproc<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>xdrrec_endofrecord<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>xdr_int<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>xdr_string<FOOTNOTEREF LINKEND="std-3-8"></ENTRY></ROW>
<ROW><ENTRY>clnttcp_create<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>svcerr_noprog<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>xdrrec_eof<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>xdr_int16_t<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>xdr_uint16_t<FOOTNOTEREF LINKEND="std-3-8"></ENTRY></ROW>
<ROW><ENTRY>clntudp_bufcreate<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>svcerr_progvers<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>xdrrec_skiprecord<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>xdr_int32_t<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>xdr_uint32_t<FOOTNOTEREF LINKEND="std-3-8"></ENTRY></ROW>
<ROW><ENTRY>clntudp_create<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>svcerr_systemerr<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>xdrstdio_create<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>xdr_int8_t<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>xdr_uint8_t<FOOTNOTEREF LINKEND="std-3-8"></ENTRY></ROW>
<ROW><ENTRY>clntunix_create<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>svcerr_weakauth<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>xdr_accepted_reply<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>xdr_keybuf<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>xdr_union<FOOTNOTEREF LINKEND="std-3-8"></ENTRY></ROW>
<ROW><ENTRY>clnt_broadcast<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>svcfd_create<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>xdr_array<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>xdr_keystatus<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>xdr_unixcred<FOOTNOTEREF LINKEND="std-3-8"></ENTRY></ROW>
<ROW><ENTRY>clnt_create<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>svcraw_create<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>xdr_authdes_cred<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>xdr_key_netstarg<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>xdr_u_char<FOOTNOTEREF LINKEND="std-3-8"></ENTRY></ROW>
<ROW><ENTRY>clnt_pcreateerror<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>svctcp_create<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>xdr_authdes_verf<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>xdr_key_netstres<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>xdr_u_int<FOOTNOTEREF LINKEND="std-3-8"></ENTRY></ROW>
<ROW><ENTRY>clnt_perrno<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>svcudp_bufcreate<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>xdr_authunix_parms<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>xdr_long<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>xdr_u_long<FOOTNOTEREF LINKEND="std-3-8"></ENTRY></ROW>
<ROW><ENTRY>clnt_perror<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>svcudp_create<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>xdr_bool<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>xdr_netnamestr<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>xdr_u_short<FOOTNOTEREF LINKEND="std-3-8"></ENTRY></ROW>
<ROW><ENTRY>clnt_spcreateerror<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>svcudp_enablecache<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>xdr_bytes<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>xdr_netobj<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>xdr_vector<FOOTNOTEREF LINKEND="std-3-8"></ENTRY></ROW>
<ROW><ENTRY>clnt_sperrno<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>svcunixfd_create<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>xdr_callhdr<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>xdr_opaque<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>xdr_void<FOOTNOTEREF LINKEND="std-3-8"></ENTRY></ROW>
<ROW><ENTRY>clnt_sperror<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>svcunix_create<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>xdr_callmsg<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>xdr_opaque_auth<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>xdr_wrapstring<FOOTNOTEREF LINKEND="std-3-8"></ENTRY></ROW>
<ROW><ENTRY>pmap_getmaps<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>svc_exit<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>xdr_char<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>xdr_pmap<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>pmap_getport<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>svc_fdset<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>xdr_cryptkeyarg<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>xdr_pmaplist<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>pmap_rmtcall<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>svc_getreq<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>xdr_cryptkeyarg2<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>xdr_pointer<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>pmap_set<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>svc_getreqset<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>xdr_cryptkeyres<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY>xdr_reference<FOOTNOTEREF LINKEND="std-3-8"></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>Wide Characters</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>mblen<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>wcscasecmp<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>wcsncmp<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>wcstoimax<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>wcswcs<FOOTNOTEREF LINKEND="std-3-1"></ENTRY></ROW>
<ROW><ENTRY>mbrlen<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>wcscat<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>wcsncpy<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>wcstok<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>wcswidth<FOOTNOTEREF LINKEND="std-3-5"></ENTRY></ROW>
<ROW><ENTRY>mbrtowc<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>wcschr<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>wcsnlen<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>wcstol<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>wcsxfrm<FOOTNOTEREF LINKEND="std-3-5"></ENTRY></ROW>
<ROW><ENTRY>mbsinit<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>wcscmp<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>wcsnrtombs<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>wcstold<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>wctob<FOOTNOTEREF LINKEND="std-3-5"></ENTRY></ROW>
<ROW><ENTRY>mbsnrtowcs<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>wcscoll<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>wcspbrk<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>wcstoll<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>wctomb<FOOTNOTEREF LINKEND="std-3-5"></ENTRY></ROW>
<ROW><ENTRY>mbsrtowcs<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>wcscpy<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>wcsrchr<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>wcstombs<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>wctrans<FOOTNOTEREF LINKEND="std-3-5"></ENTRY></ROW>
<ROW><ENTRY>mbstowcs<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>wcscspn<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>wcsrtombs<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>wcstoq<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>wctype<FOOTNOTEREF LINKEND="std-3-5"></ENTRY></ROW>
<ROW><ENTRY>mbtowc<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>wcsdup<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>wcsspn<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>wcstoul<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>wcwidth<FOOTNOTEREF LINKEND="std-3-5"></ENTRY></ROW>
<ROW><ENTRY>wcpcpy<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>wcslen<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>wcsstr<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>wcstoull<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>wcpncpy<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>wcsncasecmp<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>wcstod<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>wcstoumax<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>wcrtomb<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>wcsncat<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>wcstof<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>wcstouq<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>String Functions</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>bcmp<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>strcasecmp<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>strfmon<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>strptime<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>strtoll<FOOTNOTEREF LINKEND="std-3-1"></ENTRY></ROW>
<ROW><ENTRY>bcopy<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>strcasestr<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>strfry<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>strrchr<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>strtoq<FOOTNOTEREF LINKEND="std-3-1"></ENTRY></ROW>
<ROW><ENTRY>bzero<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>strcat<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>strftime<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>strsep<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>strtoull<FOOTNOTEREF LINKEND="std-3-1"></ENTRY></ROW>
<ROW><ENTRY>ffs<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>strchr<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>strlen<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>strsignal<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>strtoumax<FOOTNOTEREF LINKEND="std-3-1"></ENTRY></ROW>
<ROW><ENTRY>index<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>strcmp<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>strncasecmp<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>strspn<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>strtouq<FOOTNOTEREF LINKEND="std-3-1"></ENTRY></ROW>
<ROW><ENTRY>memccpy<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>strcoll<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>strncat<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>strstr<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>strverscmp<FOOTNOTEREF LINKEND="std-3-1"></ENTRY></ROW>
<ROW><ENTRY>memchr<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>strcpy<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>strncmp<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>strtof<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>strxfrm<FOOTNOTEREF LINKEND="std-3-5"></ENTRY></ROW>
<ROW><ENTRY>memcmp<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>strcspn<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>strncpy<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>strtoimax<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>swab<FOOTNOTEREF LINKEND="std-3-5"></ENTRY></ROW>
<ROW><ENTRY>memcpy<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>strdup<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>strndup<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>strtok<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>memset<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>strerror<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>strnlen<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>strtok_r<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>rindex<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>strerror_r<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>strpbrk<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>strtold<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>IPC Functions</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>msgctl<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>msgsnd<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>semop<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>shmdt<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>msgget<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>semctl<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>shmat<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>shmget<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>msgrcv<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>semget<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>shmctl<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>Regular Expressions</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>loc1<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>regerror<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>rexec<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>re_exec<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>re_search_2<FOOTNOTEREF LINKEND="std-3-1"></ENTRY></ROW>
<ROW><ENTRY>loc2<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>regex<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>rexecoptions<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>re_match<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>re_set_registers<FOOTNOTEREF LINKEND="std-3-1"></ENTRY></ROW>
<ROW><ENTRY>locs<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>regexec<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>re_comp<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>re_match_2<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>re_set_syntax<FOOTNOTEREF LINKEND="std-3-1"></ENTRY></ROW>
<ROW><ENTRY>regcmp<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>regfree<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>re_compile_fastmap<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>re_max_failures<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>re_syntax_options<FOOTNOTEREF LINKEND="std-3-1"></ENTRY></ROW>
<ROW><ENTRY>regcomp<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>res_init<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>re_compile_pattern<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>re_search<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>Character Type Functions</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>isalnum<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>islower<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>iswalpha<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>iswlower<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>isxdigit<FOOTNOTEREF LINKEND="std-3-5"></ENTRY></ROW>
<ROW><ENTRY>isalpha<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>isprint<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>iswblank<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>iswprint<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>tolower<FOOTNOTEREF LINKEND="std-3-5"></ENTRY></ROW>
<ROW><ENTRY>isascii<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>ispunct<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>iswcntrl<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>iswpunct<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>toupper<FOOTNOTEREF LINKEND="std-3-5"></ENTRY></ROW>
<ROW><ENTRY>iscntrl<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>isspace<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>iswctype<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>iswspace<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>isdigit<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>isupper<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>iswdigit<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>iswupper<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>isgraph<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>iswalnum<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>iswgraph<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>iswxdigit<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>Time Function</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>asctime<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>daylight<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>gmtime<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>mktime<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>tzname<FOOTNOTEREF LINKEND="std-3-5"></ENTRY></ROW>
<ROW><ENTRY>ctime<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>difftime<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>localtime<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>timezone<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>tzset<FOOTNOTEREF LINKEND="std-3-5"></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>Terminal Interface Functions</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>cfgetispeed<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>cfsetospeed<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>tcflow<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>tcgetpgrp<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>tcsetattr<FOOTNOTEREF LINKEND="std-3-5"></ENTRY></ROW>
<ROW><ENTRY>cfgetospeed<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>cfsetspeed<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>tcflush<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>tcgetsid<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>tcsetpgrp<FOOTNOTEREF LINKEND="std-3-5"></ENTRY></ROW>
<ROW><ENTRY>cfsetispeed<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>tcdrain<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>tcgetattr<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>tcsendbreak<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>System Database Interface</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>endaliasent<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>ether_aton<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>getgrnam_r<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>getpwuid_r<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>setgrent<FOOTNOTEREF LINKEND="std-3-5"></ENTRY></ROW>
<ROW><ENTRY>endfsent<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>ether_hostton<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>gethostbyaddr<FOOTNOTEREF LINKEND="std-3-15"></ENTRY><ENTRY>getrpcbyname<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>sethostent<FOOTNOTEREF LINKEND="std-3-15"></ENTRY></ROW>
<ROW><ENTRY>endgrent<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>ether_line<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>gethostbyname<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>getrpcbynumber<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>setmntent<FOOTNOTEREF LINKEND="std-3-1"></ENTRY></ROW>
<ROW><ENTRY>endhostent<FOOTNOTEREF LINKEND="std-3-15"></ENTRY><ENTRY>ether_ntoa<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>gethostent<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>getrpcent<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>setnetent<FOOTNOTEREF LINKEND="std-3-15"></ENTRY></ROW>
<ROW><ENTRY>endmntent<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>ether_ntoa_r<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>getmntent<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>getrpcport<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>setnetgrent<FOOTNOTEREF LINKEND="std-3-1"></ENTRY></ROW>
<ROW><ENTRY>endnetent<FOOTNOTEREF LINKEND="std-3-15"></ENTRY><ENTRY>ether_ntohost<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>getnetbyaddr<FOOTNOTEREF LINKEND="std-3-15"></ENTRY><ENTRY>getservbyname<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>setprotoent<FOOTNOTEREF LINKEND="std-3-15"></ENTRY></ROW>
<ROW><ENTRY>endnetgrent<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>fgetgrent<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>getnetbyname<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>getservbyport<FOOTNOTEREF LINKEND="std-3-15"></ENTRY><ENTRY>setpwent<FOOTNOTEREF LINKEND="std-3-5"></ENTRY></ROW>
<ROW><ENTRY>endprotoent<FOOTNOTEREF LINKEND="std-3-15"></ENTRY><ENTRY>fgetspent<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>getnetent<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>getservent<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>setrpcent<FOOTNOTEREF LINKEND="std-3-1"></ENTRY></ROW>
<ROW><ENTRY>endpwent<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>getaliasbyname<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>getnetgrent<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>getspent<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>setservent<FOOTNOTEREF LINKEND="std-3-15"></ENTRY></ROW>
<ROW><ENTRY>endrpcent<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>getaliasent<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>getprotobyname<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>getspnam<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>setspent<FOOTNOTEREF LINKEND="std-3-1"></ENTRY></ROW>
<ROW><ENTRY>endservent<FOOTNOTEREF LINKEND="std-3-15"></ENTRY><ENTRY>getfsent<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>getprotobynumber<FOOTNOTEREF LINKEND="std-3-15"></ENTRY><ENTRY>getttyent<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>setttyent<FOOTNOTEREF LINKEND="std-3-1"></ENTRY></ROW>
<ROW><ENTRY>endspent<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>getgrent<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>getprotoent<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>getutent<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>setutent<FOOTNOTEREF LINKEND="std-3-1"></ENTRY></ROW>
<ROW><ENTRY>endttyent<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>getgrgid<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>getpwent<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>getutxent<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>setutxent<FOOTNOTEREF LINKEND="std-3-5"></ENTRY></ROW>
<ROW><ENTRY>endutent<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>getgrgid_r<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>getpwnam_r<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>setaliasent<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>endutxent<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>getgrnam<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY>getpwuid<FOOTNOTEREF LINKEND="std-3-5"></ENTRY><ENTRY>setfsent<FOOTNOTEREF LINKEND="std-3-1"></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>Mangled Symbols</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>assert</ENTRY><ENTRY>void __assert_fail(const char *, const char *, unsigned int, const char *)</ENTRY></ROW>
<ROW><ENTRY>compile</ENTRY><ENTRY>int regcomp(regex_t *, const char *, int)</ENTRY></ROW>
<ROW><ENTRY>fstat</ENTRY><ENTRY>int __fxstat(int, struct stat *)</ENTRY></ROW>
<ROW><ENTRY>lstat</ENTRY><ENTRY>int __lxstat(int, const char *, struct stat *)</ENTRY></ROW>
<ROW><ENTRY>mknod</ENTRY><ENTRY>int __xmknod(int, const char *, mode_t, dev_t *)</ENTRY></ROW>
<ROW><ENTRY>stat</ENTRY><ENTRY>int __xstat@@GLIBC_2.0(int, const char *, struct stat *)</ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>Leftovers</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>confstr</ENTRY><ENTRY>getcwd</ENTRY><ENTRY>glob</ENTRY><ENTRY>perror</ENTRY><ENTRY>_exit</ENTRY></ROW>
<ROW><ENTRY>cuserid</ENTRY><ENTRY>getlogin</ENTRY><ENTRY>isatty</ENTRY><ENTRY>setjmp</ENTRY><ENTRY>__errno_location</ENTRY></ROW>
<ROW><ENTRY>fnmatch</ENTRY><ENTRY>getopt</ENTRY><ENTRY>localeconv</ENTRY><ENTRY>system</ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>fpathconf</ENTRY><ENTRY>getppid</ENTRY><ENTRY>longjmp</ENTRY><ENTRY>tmpfile</ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>ftw</ENTRY><ENTRY>getpwnam</ENTRY><ENTRY>memmove</ENTRY><ENTRY>ttyname</ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
</SECT1>
<SECT1>
<TITLE> Data Definitions for libc</TITLE>
<PARA>
</PARA>
<SECT2>
<TITLE>ctype.h</TITLE>
<PARA>
</PARA>
<SCREEN>

int _tolower(int c);
int _toupper(int c);
int isalnum (int );
int isalpha (int );
int isascii(int c);
int iscntrl (int );
int isdigit (int );
int isgraph (int );
int islower (int );
int isprint (int );
int ispunct (int );
int isspace (int );
int isupper (int );
int isxdigit (int );
int toascii(int c);
int tolower (int );
int toupper (int );

</SCREEN>
</SECT2>
<SECT2>
<TITLE>dirent.h</TITLE>
<PARA>
</PARA>
<SCREEN>

int closedir (DIR *);
 DIR* opendir (const char *);
struct dirent * readdir (DIR *);
int readdir_r(DIR *dirp, struct dirent *entry, struct dirent **result);
void rewinddir (DIR *);
void seekdir (DIR *, off_t );
off_t telldir (DIR *);

</SCREEN>
</SECT2>
<SECT2>
<TITLE>errno.h</TITLE>
<PARA>
</PARA>
<SCREEN>
#define	EPERM		 1	/* Operation not permitted */
#define	ENOENT		 2	/* No such file or directory */
#define	ESRCH		 3	/* No such process */
#define	EINTR		 4	/* Interrupted system call */
#define	EIO		 5	/* I/O error */
#define	ENXIO		 6	/* No such device or address */
#define	E2BIG		 7	/* Arg list too long */
#define	ENOEXEC		 8	/* Exec format error */
#define	EBADF		 9	/* Bad file number */
#define	ECHILD		10	/* No child processes */
#define	EDEADLK		11	/* Resource deadlock would occur */
#define	ENOMEM		12	/* Out of memory */
#define	EACCES		13	/* Permission denied */
#define	EFAULT		14	/* Bad address */
#define	ENOTBLK		15	/* Block device required */
#define	EBUSY		16	/* Device or resource busy */
#define	EEXIST		17	/* File exists */
#define	EXDEV		18	/* Cross-device link */
#define	ENODEV		19	/* No such device */
#define	ENOTDIR		20	/* Not a directory */
#define	EISDIR		21	/* Is a directory */
#define	EINVAL		22	/* Invalid argument */
#define	ENFILE		23	/* File table overflow */
#define	EMFILE		24	/* Too many open files */
#define	ENOTTY		25	/* Not a typewriter */
#define	ETXTBSY		26	/* Text file busy */
#define	EFBIG		27	/* File too large */
#define	ENOSPC		28	/* No space left on device */
#define	ESPIPE		29	/* Illegal seek */
#define	EROFS		30	/* Read-only file system */
#define	EMLINK		31	/* Too many links */
#define	EPIPE		32	/* Broken pipe */
#define	EDOM		33	/* Math argument out of domain of func */
#define	ERANGE		34	/* Math result not representable */
#define	EAGAIN		35	/* Try again */
#define	ENAMETOOLONG	63	/* File name too long */
#define	ENOTEMPTY	66	/* Directory not empty */
#define	ENOLCK		77	/* No record locks available */
#define	ENOSYS		78	/* Function not implemented */
#define	ENOMSG		80	/* No message of desired type */
#define	EIDRM		81	/* Identifier removed */
#define	EBADFD		114	/* File descriptor in bad state */
#define	EILSEQ		116	/* Illegal byte sequence */
#define	EREMOTEIO	121	/* Remote I/O error */
#define	EWOULDBLOCK	EAGAIN	/* Operation would block */
#define	EDEADLOCK	EDEADLK

int *__errno_location();
int errno;

</SCREEN>
</SECT2>
<SECT2>
<TITLE>fcntl.h</TITLE>
<PARA>
</PARA>
<SCREEN>
#define O_ACCMODE	  0003
#define O_RDONLY	    00
#define O_WRONLY	    01
#define O_RDWR		    02
#define O_CREAT		  0100	/* not fcntl */
#define O_EXCL		  0200	/* not fcntl */
#define O_NOCTTY	  0400	/* not fcntl */
#define O_TRUNC		 01000	/* not fcntl */
#define O_APPEND	 02000
#define O_NONBLOCK	 04000
#define O_NDELAY	O_NONBLOCK
#define O_SYNC		010000
#define O_FSYNC		O_SYNC
#define O_ASYNC		020000

#define F_DUPFD		0	/* dup */
#define F_GETFD		1	/* get f_flags */
#define F_SETFD		2	/* set f_flags */
#define F_GETFL		3	/* more flags (cloexec) */
#define F_SETFL		4
#define F_GETLK		5
#define F_SETLK		6
#define F_SETLKW	7

/* for F_[GET|SET]FL */
#define FD_CLOEXEC	1	/* actually anything with low bit set goes */

/* for posix fcntl() and lockf() */
#define F_RDLCK		0
#define F_WRLCK		1
#define F_UNLCK		2

struct flock {
	short int l_type;
	short int l_whence;
	off_t l_start;
	off_t l_len;
	pid_t l_pid;
};

int creat (const char *, mode_t );
int fcntl (int , int , ...);
int open (const char *, int, mode_t );

</SCREEN>
</SECT2>
<SECT2>
<TITLE>limits.h</TITLE>
<PARA>
</PARA>
<SCREEN>
#define CHAR_BIT	8
#define SCHAR_MAX	127
#define UCHAR_MAX	255
#define CHAR_MAX	UCHAR_MAX
#define SCHAR_MIN	(-128)
#define CHAR_MIN	0
#define INT_MIN		(- INT_MAX - 1)
#define INT_MAX		2147483647
#define UINT_MAX	4294967295U
#define INT_MIN		(- INT_MAX - 1)
#define LONG_MAX	2147483647L
#define LONG_MIN	(- LONG_MAX - 1L)
#define ULONG_MAX	4294967295UL
#define LONG_MIN	(- LONG_MAX - 1L)
#define MB_LEN_MAX	6
#define SCHAR_MAX	127
#define SHRT_MAX	32767
#define USHRT_MAX	65535
#define SHRT_MIN	(-32768)
#define UCHAR_MAX	255
#define CHAR_MAX	UCHAR_MAX
#define ULONG_MAX	4294967295UL
#define USHRT_MAX	65535
#define SSIZE_MAX       INT_MAX
#define _POSIX_ARG_MAX          4096
#define _POSIX_CHILD_MAX        6
#define _POSIX_LINK_MAX         8
#define _POSIX_MAX_CANON        255
#define _POSIX_MAX_INPUT        255
#define _POSIX_NAME_MAX         14
#define _POSIX_NGROUPS_MAX      0
#define _POSIX_OPEN_MAX         16
#define _POSIX_PATH_MAX         255
#define _POSIX_PIPE_BUF         512
#define _POSIX_SSIZE_MAX        32767
#define _POSIX_STREAM_MAX       8
#define _POSIX_TZNAME_MAX       3

#define DBL_DIG         (-1)
#define DBL_MAX         (-1)
#define DBL_MIN         (-1)
#define FLT_DIG         (-1)
#define FLT_MAX         (-1)
#define FLT_MIN         (-1)
#define LONG_BIT        (-1)
#define NL_ARGMAX       4096
#define NL_LANGMAX      2048
#define NL_MSGMAX       INT_MAX
#define NL_NMAX         INT_MAX
#define NL_SETMAX       INT_MAX
#define NL_TEXTMAX      INT_MAX
#define NZERO           20
#define TMP_MAX         238328
#define WORD_BIT        (-1)



</SCREEN>
</SECT2>
<SECT2>
<TITLE>netdb.h</TITLE>
<PARA>
</PARA>
<SCREEN>

void endnetent (void);
void endprotoent (void);
void endservent (void);
struct hostent * gethostbyaddr (const char *, int , int );
struct hostent * gethostbyname (const char *);
struct netent * getnetbyaddr (long , int );
struct netent * getnetbyname (const char *);
struct netent * getnetent (void);
struct protoent * getprotobyname (const char *);
struct protoent * getprotobynumber (int );
struct protoent * getprotoent (void);
struct servent * getservbyname (const char *, const char *);
struct servent * getservbyport (int , const char *);
struct servent * getservent (void);
void sethostent (int );
void setnetent (int );
void setprotoent (int );
void setservent (int );

</SCREEN>
</SECT2>
<SECT2>
<TITLE>regexp.h</TITLE>
<PARA>
</PARA>
<SCREEN>

int advance(const char *string, const char *expbuf);
extern char* loc1;
extern char *loc2;
char *locs;
int step(const char *string, const char *expbuf);
char *compile(char *instring, char *expbuf, const char *endbuf, int eof);

</SCREEN>
</SECT2>
<SECT2>
<TITLE>signal.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/* Signals.  */
#define	SIGHUP		1	/* Hangup (POSIX).  */
#define	SIGINT		2	/* Interrupt (ANSI).  */
#define	SIGQUIT		3	/* Quit (POSIX).  */
#define	SIGILL		4	/* Illegal instruction (ANSI).  */
#define	SIGTRAP		5	/* Trace trap (POSIX).  */
#define	SIGABRT		6	/* Abort (ANSI).  */
#define	SIGIOT		6	/* IOT trap (4.2 BSD).  */
#define	SIGBUS		7	/* BUS error (4.2 BSD).  */
#define	SIGFPE		8	/* Floating-point exception (ANSI).  */
#define	SIGKILL		9	/* Kill, unblockable (POSIX).  */
#define	SIGUSR1		10	/* User-defined signal 1 (POSIX).  */
#define	SIGSEGV		11	/* Segmentation violation (ANSI).  */
#define	SIGUSR2		12	/* User-defined signal 2 (POSIX).  */
#define	SIGPIPE		13	/* Broken pipe (POSIX).  */
#define	SIGALRM		14	/* Alarm clock (POSIX).  */
#define	SIGTERM		15	/* Termination (ANSI).  */
#define	SIGSTKFLT	16	/* ??? */
#define	SIGCLD		SIGCHLD	/* Same as SIGCHLD (System V).  */
#define	SIGCHLD		17	/* Child status has changed (POSIX).  */
#define	SIGCONT		18	/* Continue (POSIX).  */
#define	SIGSTOP		19	/* Stop, unblockable (POSIX).  */
#define	SIGTSTP		20	/* Keyboard stop (POSIX).  */
#define	SIGTTIN		21	/* Background read from tty (POSIX).  */
#define	SIGTTOU		22	/* Background write to tty (POSIX).  */
#define	SIGURG		23	/* Urgent condition on socket (4.2 BSD).  */
#define	SIGXCPU		24	/* CPU limit exceeded (4.2 BSD).  */
#define	SIGXFSZ		25	/* File size limit exceeded (4.2 BSD).  */
#define	SIGVTALRM	26	/* Virtual alarm clock (4.2 BSD).  */
#define	SIGPROF		27	/* Profiling alarm clock (4.2 BSD).  */
#define	SIGWINCH	28	/* Window size change (4.3 BSD, Sun).  */
#define	SIGPOLL		SIGIO	/* Pollable event occurred (System V).  */
#define	SIGIO		29	/* I/O now possible (4.2 BSD).  */
#define	SIGPWR		30	/* Power failure restart (System V).  */
#define SIGUNUSED	31

#define	_NSIG		32	/* Biggest signal number + 1.  */

#define SIG_DFL		((__sighandler_t) 0)
#define SIG_IGN 	((__sighandler_t) 1)
#define SIG_ERR 	((__sighandler_t) -1)

#define SIG_BLOCK       0
#define SIG_UNBLOCK     1

#define SA_NOCLDSTOP    1
#define SIG_SETMASK     2


int kill (pid_t , int );
int killpg (int , int );
void psignal (int , const char *);
int raise (int );
int sigaction (int , const struct sigaction *, struct sigaction *);
int sigaddset (sigset_t *, int );
int sigaltstack (const struct sigaltstack *, struct sigaltstack *);
int sigblock (int );
int sigdelset (sigset_t *, int );
int sigemptyset (sigset_t *);
int sigfillset (sigset_t *);
int siginterrupt (int , int );
int sigismember (const sigset_t *, int );
sighandler_t signal (int , sighandler_t );
int sigpause (int );
int sigpending (sigset_t *);
int sigprocmask (int , const sigset_t *, sigset_t *);
int sigsetmask (int );
int sigstack (const struct sigstack *, struct sigstack *);
int sigsuspend (const sigset_t *);
int sigvec (int , const struct sigvec *,struct sigvec *);
int sigwait(const sigset_t *set, int *sig);
int pthread_kill(pthread_t thread, int sig);
int pthread_sigmask(int how, const sigset_t *set, sigset_t *oset);
int sighold(int sig);
int sigignore(int sig);
int sigrelse(int sig);
int sigqueue(pid_t pid, int signo, const union sigval value);
int sigwaitinfo(const sigset_t *set, siginfo *info);
int sigtimedwait(const sigset_t *set, siginfo_t *info, const struct timespec *timeout);
int timer_create(clockid_t clockid, struct sigevent *evp, timer_t *timerid);
int sigmask (int );

</SCREEN>
</SECT2>
<SECT2>
<TITLE>stdarg.h</TITLE>
<PARA>
</PARA>
<SCREEN>

 va_arg (va_list , );
void va_end (va_list );
void va_start (va_list , );

</SCREEN>
</SECT2>
<SECT2>
<TITLE>stddef.h</TITLE>
<PARA>
</PARA>
<SCREEN>

</SCREEN>
</SECT2>
<SECT2>
<TITLE>stdio.h</TITLE>
<PARA>
</PARA>
<SCREEN>
#define NULL    	0

#define BUFSIZ  	8192
#define EOF     	(-1)
#define FOPEN_MAX       255

#define L_ctermid       9
#define L_cuserid       9
#define L_tmpnam        9
#define P_tmpdir        "/tmp"

#define SEEK_SET        0
#define SEEK_CUR        1
#define SEEK_END        2

#define _IOFBF          0
#define _IOLBF          1
#define _IONBF          2

#define TMP_MAX 	238328

extern FILE *stderr;
extern FILE *stdin;
extern FILE *stdout;


void clearerr ( FILE *);
char * ctermid (char *);
char * cuserid (char *);
int fclose (FILE *);
 FILE* fdopen (int , const char *);
int feof ( FILE *);
int ferror ( FILE *);
int fflush ( *);
int fgetc ( *);
int fgetpos ( *, fpos_t *);
char * fgets (char *, int ,  *);
int fileno ( *);
void flockfile(FILE *file);
 FILE* fopen (const char *, const char *);
int fprintf ( *, const char *, ...);
int fputc (int ,  *);
int fputs (const char *,  *);
size_t fread (void *, size_t , size_t ,  *);
 * freopen (const char *, const char *,  *);
int fscanf ( *, const char *, ...);
int fseek ( *, long int , int );
int fsetpos ( *, const fpos_t );
long int ftell ( *);
int ftrylockfile(FILE *file);
void funlockfile(FILE *file);
size_t fwrite (const void *, size_t , size_t ,  *);
int getc ( *);
int getc_unlocked(FILE *stream);
int getchar (void);
int getchar_unlocked(void);
char * gets (char *);
int getw(FILE *stream);
int pclose(FILE *stream);
void perror (const char *);
FILE *popen(const char *command, const char *mode);
int printf (const char *, ...);
int putc (int ,  *);
int putc_unlocked(int c, FILE *stream);
int putchar (int );
int putchar_unlocked(int c);
int puts (const char *);
int putw(int w, FILE *stream);
int remove (const char *);
int rename (const char *, const char *);
void rewind ( *);
int scanf (const char *, ...);
void setbuf ( *, char *);
void setbuffer ( *, char *, size_t );
void setlinebuf ( *);
int setvbuf ( *, char *, int , size_t );
int snprintf(char *s, size_t n, const char *, ...);
int sprintf (char *, const char *, ...);
int sscanf (const char *, const char *, ...);
char *tempnam(const char *dir, const char *pfx);
 * tmpfile (void);
char * tmpnam (char *);
int ungetc (int ,  *);
int vfprintf ( *, const char *, va_list );
int vprintf (const char *, va_list );
int vsnprintf(char *s, size_t n, const char *, va_list ap);
int vsprintf (char *, const char *, va_list );
size_t wcrtomb(char *s, wchar_t wc, mbstate_t *ps);
int fseeko(FILE *stream, off_t offset, int whence);
off_t ftello(FILE *stream);

</SCREEN>
</SECT2>
<SECT2>
<TITLE>stdlib.h</TITLE>
<PARA>
</PARA>
<SCREEN>
#define EXIT_FAILURE    1
#define EXIT_SUCCESS    0
#define NULL    	0
#define RAND_MAX        2147483647


long a64l(const char *s);
void abort (void);
int abs (int );
int atexit (void (*) (void));
double atof (const char *);
int atoi (const char *);
long int atol (const char *);
void * bsearch (const void *, const void *, size_t , size_t , comparison_fn_t );
void *calloc(size_t nelem, size_t elsize);
div_t div (int , int );
double drand48(void);
char *ecvt(double value, int ndigit, int *decpt, int *sign);
double erand48(unsigned short int xsubi[3]);
void exit (int );
char *fcvt(double value, int ndigit, int *decpt, int *sign);
void free(void *ptr);
char *gcvt(double value, int ndigit, char *buf);
char * getenv (const char *);
int getsubopt(char **optionp, char * const *tokens, char **valuep);
void * initstate (unsigned int , void *, size_t );
long int jrand48(unsigned short int xsubi[3]);
char *l64a(long value);
long int labs (long int );
void lcong48(unsigned short int param[7]);
ldiv_t ldiv (long int , long int );
long int lrand48(void);
void *malloc(size_t size);
int mblen (const char *, size_t );
size_t mbstowcs (wchar_t *, const char *, size_t );
int mbtowc (wchar_t *, const char *, size_t );
int mkstemp(char *template);
char *mktemp(char *template);
long int mrand48(void);
long int nrand48(unsigned short int xsubi[3]);
int putenv(char *string);
void qsort (void *, size_t , size_t , comparison_fn_t );
int rand (void);
int rand_r(unsigned int *seed);
long random(void);
void *realloc(void *ptr, size_t size);
char *realpath(const char *file_name, char *resolved_name);
unsigned short int *seed48(unsigned short int seed16v[3]);
void * setstate (void *);
void srand (unsigned int );
void srand48(long int seedval);
void srandom (unsigned int );
double strtod (const char *, char **);
long int strtol (const char *, char **, int );
long long int strtoq (const char *, char **, int );
unsigned long int strtoul (const char *, char **, int );
unsigned long long int strtouq (const char *, char **, int );
int system (const char *);
int ttyslot(void);
void *valloc(size_t size);
size_t wcstombs (char *, const wchar_t , size_t );
int wctomb (char *, wchar_t );
int grantpt(int fildes);
char *ptsname(int fildes);
void setkey(const char *key);
int unlockpt(int fildes);

</SCREEN>
</SECT2>
<SECT2>
<TITLE>string.h</TITLE>
<PARA>
</PARA>
<SCREEN>
#define NULL    0

void *memccpy(void *s1, const void *s2, int c, size_t n);
void * memchr (const void *, int , size_t );
int memcmp (const void *1, const void *2, size_t );
void * memcpy (void *, const void *, size_t );
void * memmove (void *, const void *, size_t );
void * memset (void *, int , size_t );
char * strcat (char *, const char *);
char * strchr (const char *, int );
int strcmp (const char *1, const char *2);
int strcoll (const char *1, const char *2);
char * strcpy (char *, const char *);
size_t strcspn (const char *, const char *);
char *strdup(const char *s1);
char * strerror (int );
size_t strlen (const char *);
char * strncat (char *, const char *, size_t );
int strncmp (const char *1, const char *2, size_t );
char * strncpy (char *, const char *, size_t );
char * strpbrk (const char *, const char *);
char * strrchr (const char *, int );
char * strsep (char **_, const char *);
size_t strspn (const char *, const char *);
char * strstr (const char *, const char *);
char * strtok (char *, const char *);
char *strtok_r(char *s, const char *sep, char **lasts);
size_t strxfrm (char *, const char *, size_t );

</SCREEN>
</SECT2>
<SECT2>
<TITLE>strings.h</TITLE>
<PARA>
</PARA>
<SCREEN>

int bcmp(const void *s1, const void *s2, size_t n);
void bcopy(const void *s1, void *s2, size_t n);
void bzero(void *s, size_t n);
int ffs(int i);
char *-1;
char *rindex(const char *s, int c);
int strcasecmp(const char *s1, const char *s2);
int strncasecmp(const char *s1, const char *s2, size_t n);

</SCREEN>
</SECT2>
<SECT2>
<TITLE>sys/ipc.h</TITLE>
<PARA>
</PARA>
<SCREEN>

key_t ftok(const char *path, int id);

</SCREEN>
</SECT2>
<SECT2>
<TITLE>sys/mman.h</TITLE>
<PARA>
</PARA>
<SCREEN>

int mlock(const void * addr, size_t len);
int mlockall(int flags);
void *mmap(void *addr, size_t len, int prot, int flags, int fildes, off_t off);
int mprotect(void *addr, size_t len, int prot);
int msync(void *addr, size_t len, int flags);
int munlock(const void * addr, size_t len);
int munlockall(void);
int munmap(void *addr, size_t len);
int shm_open(const char *name, int oflag, mode_t mode);
int shm_unlink(const char * name);

</SCREEN>
</SECT2>
<SECT2>
<TITLE>sys/sem.h</TITLE>
<PARA>
</PARA>
<SCREEN>

int semctl(int semid, int semnum, int cmd, ...);
int semget(key_t key, int nsems, int semflg);
int semop(int semid, struct sembuf *sops, size_t nsops);

</SCREEN>
</SECT2>
<SECT2>
<TITLE>sys/shm.h</TITLE>
<PARA>
</PARA>
<SCREEN>

void *shmat(int shmid, const void *shmaddr, int shmflg);
int shmctl(int shmid, int cmd, struct shmid_ds *buf);
int shmdt(const void *shmaddr);
int shmget(key_t key, size_t size, int shmflg);

</SCREEN>
</SECT2>
<SECT2>
<TITLE>sys/socket.h</TITLE>
<PARA>
</PARA>
<SCREEN>

int accept (int , struct sockaddr *, socklen_t *);
int bind (int , struct sockaddr *, socklen_t );
int connect (int , struct sockaddr *, socklen_t );
int getpeername (int , struct sockaddr *, size_t *);
int getsockname (int , struct sockaddr *, socklen_t *);
int getsockopt (int , int , int , void *, socklen_t *);
int listen (int , unsigned int );
int recv (int , void *, size_t , int );
int recvfrom (int , void *, size_t , int , struct sockaddr *, socklen_t *);
int recvmsg (int , struct msghdr *, int );
int send (int , void *, size_t , int );
int sendmsg (int , const struct msghdr *, int );
int sendto (int , void *. size_t , int , struct sockaddr *, socklen_t );
int setsockopt (int , int , int , void *, socklen_t );
int shutdown (int , int );
int socket (int , int , int );
int socketpair (int , int , int , int [2]);

</SCREEN>
</SECT2>
<SECT2>
<TITLE>sys/stat.h</TITLE>
<PARA>
</PARA>
<SCREEN>
#define S_IRGRP 00040
#define S_IROTH 00004
#define S_IRUSR 00400
#define S_IRWXG 00070
#define S_IRWXO 00007
#define S_IRWXU 00700
#define S_ISBLK(x)      (((x) & S_IFMT) == S_IFBLK)
#define S_ISCHR(x)      (((x) & S_IFMT) == S_IFCHR)
#define S_ISDIR(x)      (((x) & S_IFMT) == S_IFDIR)
#define S_ISFIFO(x)     (((x) & S_IFMT) == S_IFIFO)
#define S_ISGID 0002000
#define S_ISREG(x)      (((x) & S_IFMT) == S_IFREG)
#define S_ISUID 0004000
#define S_IWGRP 00020
#define S_IWOTH 00002
#define S_IWUSR 00200
#define S_IXGRP 00010
#define S_IXOTH 00001
#define S_IXUSR 00100
#define S_IFBLK 0060000
#define S_IFCHR 0020000
#define S_IFDIR 0040000
#define S_IFIFO 0010000
#define S_IFMT  0170000
#define S_IFREG 0100000


int chmod (const char *, mode_t );
int fchmod (int , int );
int mkdir (const char *, mode_t );
int mkfifo (const char *, mode_t );
mode_t umask (mode_t );
int fstat (int , struct stat *);
int lstat (const char *, struct stat *);
int mknod (const char *, int , int );
int stat (const char *, struct stat *);

</SCREEN>
</SECT2>
<SECT2>
<TITLE>sys/time.h</TITLE>
<PARA>
</PARA>
<SCREEN>

int adjtime (const struct timeval *, struct timeval *);
int getitimer (int , struct itimerval *);
int gettimeofday (struct timeval *, struct timezone *);
int select(int nfds, fd_set *readfds, fd_set *writefds, fd_set *errorfds, struct timeval *timeout);
int setitimer (int , struct itimerval *, struct itimerval *);
int settimeofday (const struct timeval *, const struct timezone *);
int utimes (const char *, struct timeval [2]);
void FD_CLR(int fd, fd_set *fdset);
int FD_ISSET(int fd, fd_set *fdset);
void FD_SET(int fd, fd_set *fdset);
void FD_ZERO(fd_set *fdset);

</SCREEN>
</SECT2>
<SECT2>
<TITLE>sys/timeb.h</TITLE>
<PARA>
</PARA>
<SCREEN>

int ftime(struct timeb *tp);

</SCREEN>
</SECT2>
<SECT2>
<TITLE>sys/times.h</TITLE>
<PARA>
</PARA>
<SCREEN>

clock_t times (struct tms *);

</SCREEN>
</SECT2>
<SECT2>
<TITLE>sys/types.h</TITLE>
<PARA>
</PARA>
<SCREEN>
typedef long long	dev_t;
typedef unsigned int	gid_t;
typedef unsigned long	ino_t;
typedef unsigned int	mode_t;
typedef unsigned int	nlink_t;
typedef long		off_t;
typedef int		pid_t;
typedef unsigned int	size_t;
typedef int		ssize_t;
typedef long		time_t; 
typedef long		clock_t; 
typedef int		uid_t;



</SCREEN>
</SECT2>
<SECT2>
<TITLE>syslog.h</TITLE>
<PARA>
</PARA>
<SCREEN>

void closelog(void);
void openlog(const char *ident, int logopt, int facility);
int setlogmask(int maskpri);
void syslog(int priority, const char *message, ... /* arguments */);

</SCREEN>
</SECT2>
<SECT2>
<TITLE>termios.h</TITLE>
<PARA>
</PARA>
<SCREEN>
#define B0      0000000
#define B50     0000001
#define B75     0000002
#define B110    0000003
#define B134    0000004
#define B150    0000005
#define B200    0000006
#define B300    0000007
#define B600    0000010
#define B1200   0000011
#define B1800   0000012
#define B2400   0000013
#define B4800   0000014
#define B9600   0000015
#define B38400  0000017
#define B19200  0000016

#define CSIZE   0000060
#define CS5     0000000
#define CS6     0000020
#define CS7     0000040
#define CS8     0000060 

#define CSTOPB  0000100
#define CREAD   0000200
#define PARENB  0000400
#define PARODD  0001000
#define HUPCL   0002000
#define CLOCAL  0004000

/* c_iflag bits */
#define IGNBRK  0000001
#define BRKINT  0000002
#define IGNPAR  0000004
#define PARMRK  0000010
#define INPCK   0000020
#define ISTRIP  0000040
#define INLCR   0000100
#define IGNCR   0000200
#define ICRNL   0000400
#define IXON    0002000
#define IXOFF   0010000

/* c_oflag bits */
#define OPOST   0000001

/* c_lflag bits */
#define ISIG    0000001
#define ICANON  0000002
#define ECHO    0000010
#define ECHOE   0000020
#define ECHOK   0000040
#define ECHONL  0000100
#define NOFLSH  0000200
#define TOSTOP  0000400
#define IEXTEN  0100000

/* c_cc */
#define VINTR   0
#define VQUIT   1
#define VERASE  2
#define VKILL   3
#define VEOF    4
#define VTIME   5
#define VMIN    6
#define VSTART  8
#define VSTOP   9
#define VSUSP   10
#define VEOL    11

#define NCCS    32

/* tflow() */
#define TCOOFF  0
#define TCOON   1
#define TCIOFF  2
#define TCION   3

/* tcflush() */
#define TCIFLUSH        0
#define TCOFLUSH        1
#define TCIOFLUSH       2

/* tcsetattr */
#define TCSANOW 	0
#define TCSADRAIN       1
#define TCSAFLUSH       2

typedef unsigned char cc_t;
typedef unsigned int  tcflag_t;


speed_t cfgetispeed (const struct termios *);
speed_t cfgetospeed (const struct termios *);
int cfmakeraw (struct termios *);
int cfsetispeed (struct termios *, speed_t );
int cfsetospeed (struct termios *, speed_t );
int cfsetspeed (struct termios *, speed_t );
int tcdrain (int );
int tcflow (int , int );
int tcflush (int , int );
int tcgetattr (int , struct termios *);
int tcsendbreak (int , int );
int tcsetattr (int , int , const struct termios *);
pid_t tcgetsid(int fildes);

</SCREEN>
</SECT2>
<SECT2>
<TITLE>time.h</TITLE>
<PARA>
</PARA>
<SCREEN>
#define NULL    0

char * asctime (const struct tm *);
char *asctime_r(const struct tm *tm, char *buf);
clock_t clock (void);
char * ctime (const time_t *);
char *ctime_r(const time_t *clock, char *buf);
double difftime (time_t, time_t);
struct tm * gmtime (const time_t *);
struct tm *gmtime_r(const time_t *clock, struct tm *result);
struct tm * localtime (const time_t *);
struct tm *localtime_r(const time_t *clock, struct tm *result);
time_t mktime (struct tm *);
int nanosleep(const struct timespec *rqtp, struct timespec *rmtp);
size_t strftime (char *, size_t , const char *, const struct tm *);
char *strptime(const char *buf, const char *, struct tm *tm);
time_t time (time_t *);
char *tzname[];
void tzset (void);
int clock_settime(clockid_t clock_id, const struct timespec *tp);
int clock_gettime(clockid_t clock_id, struct timespec *tp);
int clock_getres(clockid_t clock_id, struct timespec *res);
struct tm *getdate(const char *string);
int timer_delete(timer_t timerid);
int timer_settime(timer_t timerid, int flags, const struct itimerspec *value, struct itimerspec *ovalue);
int timer_gettime(timer_t timerid, struct itimerspec *value);
int timer_getoverrun(timer_t timerid);

</SCREEN>
</SECT2>
<SECT2>
<TITLE>ulimit.h</TITLE>
<PARA>
</PARA>
<SCREEN>
#define UL_GETFSIZE     (-1)	/* unable to find these */
#define UL_SETFSIZE     (-1)	/* unable to find these */

long int ulimit(int cmd, ...);

</SCREEN>
</SECT2>
<SECT2>
<TITLE>unistd.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define	NULL	0

#define	_XOPEN_CRYPT	1
#define	_XOPEN_ENH_I18N	1
#define	STDIN_FILENO	0	/* Standard input.  */
#define	STDOUT_FILENO	1	/* Standard output.  */
#define	STDERR_FILENO	2	/* Standard error output.  */
#define	R_OK	4		/* Test for read permission.  */
#define	W_OK	2		/* Test for write permission.  */
#define	X_OK	1		/* Test for execute permission.  */
#define	F_OK	0		/* Test for existence.  */
#define	SEEK_SET	0	/* Seek from beginning of file.  */
#define	SEEK_CUR	1	/* Seek from current position.  */
#define	SEEK_END	2	/* Seek from end of file.  */

#define	L_SET		SEEK_SET
#define	L_INCR		SEEK_CUR
#define	L_XTND		SEEK_END
#define F_ULOCK 0       /* Unlock a previously locked region.  */
#define F_LOCK  1       /* Lock a region for exclusive use.  */
#define F_TLOCK 2       /* Test and lock a region for exclusive use.  */
#define F_TEST  3       /* Test a region for other processes locks.  */
#define	__USE_ANSI	1
#define	_POSIX_SOURCE	1
#ifdef _POSIX_C_SOURCE
#define	_POSIX_C_SOURCE	199506L
#endif
#define	_XOPEN_SOURCE	1
#define	_XOPEN_SOURCE_EXTENDED	1
#define	_BSD_SOURCE	1
#define	_SVID_SOURCE	1
#define	_BSD_SOURCE	1
#define	_SVID_SOURCE	1
#define	__USE_POSIX	1
#define	__USE_POSIX2	1
#define	__USE_POSIX199309	1
#define	__USE_XOPEN	1
#define	__USE_XOPEN_EXTENDED	1
#define	__USE_MISC	1
#define	__USE_BSD	1
#define	__USE_SVID	1
#define	__USE_GNU	1
#define __USE_REENTRANT	1
#define __GNU_LIBRARY__ 6
#define	__GLIBC__	2
#define	__GLIBC_MINOR__	0

/* Version Test Macros */

#define _POSIX_VERSION		199506L	/* version of ISO POSIX-1 */
#undef _POSIX2_VERSION
#define _POSIX2_C_VERSION	199209L /* version of ISO POSIX-2 */

#define _XOPEN_VERSION		500	/* version pf XPG */
#define _XOPEN_XCU_VERSION	4

#define	_POSIX2_C_BIND		1
#define _POSIX2_LOCALEDEF       1


/*        X/Open Portability Guide, Volume 2, January 1987, XVS System
          Calls and Libraries (ISBN: 0-444-70175-3). */
#define _XOPEN_XPG2	1

     _XOPEN_XPG3

/*        X/Open Specification, February 1992, System Interfaces and
          Headers, Issue 3 (ISBN: 1-872630-37-5, C212); this
          specification was formerly X/Open Portability Guide, Issue 3,
          Volume 2, January 1989, XSI System Interface and Headers
          (ISBN: 0-13-685843-0, XO/XPG/89/003). */
#define _XOPEN_XPG3	1

/*        X/Open CAE Specification, July 1992, System Interfaces and
          Headers, Issue 4 (ISBN: 1-872630-47-2, C202). */
#define _XOPEN_XPG4	1

/*        X/Open CAE Specification, January 1997, System Interfaces and
          Headers, Issue 5 (ISBN: 1-85912-181-0, C606). */
#define _XOPEN_UNIX	1

/*   Mandatory Symbolic Constants

     Although all implementations conforming to this specification
     support all of the FIPS features described below, there may be
     system-dependent or file-system-dependent configuration procedures
     that can remove or modify any or all of these features. Such
     configurations should not be made if strict FIPS compliance is
     required.

     The following symbolic constants are either undefined or defined
     with a value other than -1. If a constant is undefined, an
     application should use the sysconf(), pathconf() or fpathconf()
     functions to determine which features are present on the system at
     that time or for the particular pathname in question. */

#define	_POSIX_CHOWN_RESTRICTED	1
#define	_POSIX_NO_TRUNC		1
#define	_POSIX_VDISABLE		'\0'
#define	_POSIX_SAVED_IDS	1
#define	_POSIX_JOB_CONTROL	1

#define _POSIX_THREADS	1
#define _POSIX_REENTRANT_FUNCTIONS      1
#define _POSIX_THREAD_SAFE_FUNCTIONS	1
#define	_POSIX_THREAD_PRIORITY_SCHEDULING	1

/* pathconf() */

#define	_PC_CHOWN_RESTRICTED	6
#define	_PC_LINK_MAX	0
#define	_PC_MAX_CANON	1
#define	_PC_MAX_INPUT	2
#define	_PC_NAME_MAX	3
#define	_PC_NO_TRUNC	7
#define	_PC_PATH_MAX	4
#define	_PC_PIPE_BUF	5
#define	_PC_VDISABLE	8

/* sysconf() */
#define	_SC_ARG_MAX	0
#define	_SC_CHILD_MAX	1
#define	_SC_CLK_TCK	2
#define	_SC_JOB_CONTROL	7
#define	_SC_NGROUPS_MAX	3
#define	_SC_OPEN_MAX	4
#define	_SC_SAVED_IDS	8
#define	_SC_STREAM_MAX	5
#define	_SC_TZNAME_MAX	6
#define	_SC_VERSION	29


void _exit (int );
int access (const char *, int );
unsigned int alarm (unsigned int );
int brk(void *addr);
int chdir (const char *);
int chown (const char *, uid_t , gid_t );
int chroot(const char *path);
int close (int );
size_t confstr (int , char *, size_t );
int dup (int );
int dup2 (int , int );
int execl (const char *, const char *, ...);
int execle (const char *, const char *, char *const [], ...);
int execlp (const char *, const char *, ...);
int execv (const char *, char *const []);
int execve (const char *, char *const [], char *const []);
int execvp (const char *, char *const []);
int fchdir(int fildes);
int fchown (int , int , int );
int fdatasync(int fildes);
pid_t fork (void);
long int fpathconf (int , int );
int fsync(int fildes);
int ftruncate(int fildes, off_t length);
char * getcwd (char *, size_t );
int getdtablesize(void);
gid_t getegid (void);
uid_t geteuid (void);
gid_t getgid (void);
int getgroups (int , gid_t *);
long int gethostid (void);
int gethostname (char *, size_t );
char * getlogin (void);
int getlogin_r(char *name, size_t namesize);
int getopt (int , char **, const char *);
int getpagesize(void);
char *getpass(const char *prompt);
pid_t getpgid(pid_t pid);
pid_t getpgrp (void);
pid_t getpid (void);
pid_t getppid (void);
pid_t getsid(pid_t pid);
uid_t getuid (void);
char * getwd (char *);
int isatty (int );
int lchown(const char *path, uid_t owner, gid_t group);
int link (const char *, const char *);
int lockf(int fildes, int function, off_t size);
off_t lseek (int , off_t , int );
int nice(int );
long int pathconf (const char *, int );
int pause(void);
int pipe (int [2]);
ssize_t read (int , void *, size_t );
int readlink (const char *, char *, size_t );
int rmdir (const char *);
void *sbrk(intptr_t );
int setgid (gid_t );
int sethostid (long int );
int sethostname (const char *, size_t );
int setpgid (pid_t , pid_t );
int setpgrp (pid_t , pid_t );
int setregid (gid_t , fid_t );
int setreuid (uid_t , uid_t );
pid_t setsid (void);
int setuid (uid_t );
unsigned int sleep (unsigned int );
void swab(const void *src, void *dest, ssize_t nbytes);
int symlink (const char *, const char *);
void sync(void);
long int sysconf (int );
pid_t tcgetpgrp (int );
int tcsetpgrp (int , pid_t );
int truncate(const char *path, off_t length);
char * ttyname (int );
int ttyname_r(int fildes, char *name, size_t namesize);
useconds_t ualarm(useconds_t useconds, useconds_t interval);
int unlink (const char *);
int usleep(useconds_t useconds);
pid_t vfork (void);
ssize_t write (int , const void *, size_t );
char *crypt (const char *key, const char *salt);
void encrypt(char block[64], int edflag);
ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);

</SCREEN>
</SECT2>
</SECT1>

<SECT1>
<TITLE>Interface Definitions for libc</TITLE>
<PARA>
</PARA>
<REFENTRY ID="baselib-assert-fail-1"> <REFMETA>
<REFENTRYTITLE>__assert_fail</REFENTRYTITLE>
<REFMISCINFO>Base Libraries</REFMISCINFO>
</REFMETA>
<REFNAMEDIV>
<REFNAME>__assert_fail
</REFNAME>
<REFPURPOSE>Abort the program after false assertion
</REFPURPOSE>
</REFNAMEDIV>
<REFSYNOPSISDIV>
<REFSYNOPSISDIVINFO>
<DATE>30 January 2000</DATE>
</REFSYNOPSISDIVINFO>
<SYNOPSIS>
void
__assert_fail (const char *<REPLACEABLE CLASS="PARAMETER">assertion</REPLACEABLE>,
               const char *<REPLACEABLE CLASS="PARAMETER">file</REPLACEABLE>,
               unsigned int <REPLACEABLE CLASS="PARAMETER">line</REPLACEABLE>,
               const char *<REPLACEABLE CLASS="PARAMETER">function</REPLACEABLE>)
</SYNOPSIS>
</REFSYNOPSISDIV>
<REFSECT1>
<REFSECT1INFO>
<DATE>30 January 2000</DATE>
</REFSECT1INFO>
<TITLE>Description
</TITLE>
<PARA>
This function, when passed a string containing an asserted
expression, a filename, and a line number, prints a message
on the standard error stream such as:
<BLOCKQUOTE>
<PARA>
a.c:10: foobar: Assertion a == b failed.
</PARA>
</BLOCKQUOTE>
It then aborts program execution via a call to <FUNCTION>abort</FUNCTION>.  The
exact form of the message is up to the implementation.
</PARA>

<PARA>
If FUNCTION is NULL, then omit information about the function.
FILE, LINE, and ASSERTION must be non-NULL.
</PARA>

<PARA>
This function is part of the ABI, and not the API.
</PARA>
</REFSECT1>
</REFENTRY>

<REFENTRY ID="baselib-clone-1"> <REFMETA>
<REFENTRYTITLE>__clone</REFENTRYTITLE>
<REFMISCINFO>Base Libraries</REFMISCINFO>
</REFMETA>
<REFNAMEDIV>
<REFNAME>__clone
</REFNAME>
<REFPURPOSE>create a thread
</REFPURPOSE>
<INDEXTERM ID="ix-baselib-clone-2"><PRIMARY>__clone</PRIMARY></INDEXTERM>
</REFNAMEDIV>
<REFSYNOPSISDIV>
<REFSYNOPSISDIVINFO>
<DATE>27 February 2000</DATE>
</REFSYNOPSISDIVINFO>
<SYNOPSIS>
int __clone (int (* <replaceable class="parameter" >fn</replaceable>) (void *<replaceable class="parameter" >arg</replaceable>),
             void *<replaceable class="parameter" >child_stack</replaceable>,
             int <replaceable class="parameter" >flags</replaceable>,
             void *<replaceable class="parameter" >arg</replaceable>)
</SYNOPSIS>
</REFSYNOPSISDIV>
<REFSECT1>
<REFSECT1INFO>
<DATE>27 February 2000</DATE>
</REFSECT1INFO>
<TITLE>Description
</TITLE>
<PARA>
__clone creates a new process like fork does.  Unlike fork, __clone
allows the child process to share parts of its execution context with
its parent process, such as the memory space, the table of file
descriptors, and the table of signal handlers.  The main use of
__clone is to implement threads: multiple threads of control in a
program that run concurrently in a shared memory space.
</PARA>
<PARA>
When the child process is created, it executes the function
application fn(arg).  The fn argument is a pointer to a function that
is called by the child process at the beginning of its execution.  The
arg argument is passed back to the fn function.
</PARA>
<PARA>
When the fn(arg) function application returns,  the  child
process  terminates.   The  integer  returned by fn is the
exit code for the child process.  The  child  process  may
also  terminate  explicitely  by  calling exit() or after
receiving a fatal signal.
</PARA>
<PARA>
The child_stack argument specifies the location of the stack used by
the child process.  Since the child and parent processes share memory,
it is not possible in general for the child process to execute in the
same stack as the parent process.  The parent process must therefore
set up memory space for the child stack and pass a pointer to this
space to __clone.  Stacks grow downwards on all processors that run
Linux (except the HP PA processors), so child_stack usually points to
the topmost address of the memory space set up for the child stack.
</PARA>
<PARA>
The low byte of flags contains the number of the signal sent to the
parent when the child dies.  flags must also be bitwise-or'ed with
exactly the following constants (FIXME: are these in our constant
database?): CLONE_VM | CLONE_FS | CLONE_FILES | CLONE_SIGHAND.
No other combination of flags is supported by this standard.
The parent and child share memory space, mappings and unmappings
performed with mmap, root of the file system, the current working
directory, umask, file descriptor table, and signal handlers.  If the
parent or child changes these resources, the other process is also
affected.
</PARA>
</REFSECT1>
<refsect1>
<title>
Return value
</title>
<para>
On success, the PID of the child process  is  returned  in
the  parent's  thread of execution.  On failure, a -1 will
be returned in the parent's context, no child process will
be created, and errno will be set appropriately.
</para>
</refsect1>
<refsect1>
<title>
Errors
</title>
<para>
EAGAIN Too many processes are already running.
</para>
<para>
ENOMEM __clone cannot allocate sufficient memory to allocate a task
structure for the child, or to copy those parts of the parent's
context that need to be copied.
</para>
</refsect1>
<REFSECT1>
<TITLE>Notes/rationale
</TITLE>
<PARA>
This subset of clone is sufficient to implement the LinuxThreads
package (as of this writing).  FIXME: someone should check pth.
</PARA>
<PARA>
Although portability to non-Linux systems is a secondary goal for the
Linux Standard Base, it is believed that this subset of clone can be
implemented on top of a variety of threads API's.
</PARA>
<PARA>
FIXME: What about __WCLONE flag to waitpid()?
</PARA>
</REFSECT1>
</REFENTRY>

<REFENTRY ID="baselib-errno-location-1"> <REFMETA>
<REFENTRYTITLE>__errno_location</REFENTRYTITLE>
<REFMISCINFO>Base Libraries</REFMISCINFO>
</REFMETA>
<REFNAMEDIV>
<REFNAME>__errno_location
</REFNAME>
<REFPURPOSE>address of errno variable
</REFPURPOSE>
</REFNAMEDIV>
<REFSYNOPSISDIV>
<REFSYNOPSISDIVINFO>
<DATE>15 February 2000</DATE>
</REFSYNOPSISDIVINFO>
<SYNOPSIS>
int *__errno_location (void);
</SYNOPSIS>
</REFSYNOPSISDIV>
<REFSECT1>
<REFSECT1INFO>
<DATE>15 February 2000</DATE>
</REFSECT1INFO>
<TITLE>Description
</TITLE>
<PARA>
Return the address of the errno variable.  Only in the binary
standard, not the source standard.  Note that errno itself is only in
the source standard, not the binary standard.
</PARA>
</REFSECT1>
</REFENTRY>

<REFENTRY ID="baselib-h-errno-location-1"> <REFMETA>
<REFENTRYTITLE>__h_errno_location</REFENTRYTITLE>
<REFMISCINFO>Base Libraries</REFMISCINFO>
</REFMETA>
<REFNAMEDIV>
<REFNAME>__h_errno_location
</REFNAME>
<REFPURPOSE>address of h_errno variable
</REFPURPOSE>
</REFNAMEDIV>
<REFSYNOPSISDIV>
<REFSYNOPSISDIVINFO>
<DATE>15 February 2000</DATE>
</REFSYNOPSISDIVINFO>
<SYNOPSIS>
int *__h_errno_location (void);
</SYNOPSIS>
</REFSYNOPSISDIV>
<REFSECT1>
<REFSECT1INFO>
<DATE>15 February 2000</DATE>
</REFSECT1INFO>
<TITLE>Description
</TITLE>
<PARA>
Return the address of the h_errno variable, where h_errno is as
specified in the Single Unix Specification.  Only in the binary
standard, not the source standard.  Note that h_errno itself
is only in the source standard, not the binary standard.
</PARA>
</REFSECT1>
</REFENTRY>

<REFENTRY ID="baselib-strtod-internal-1"> <REFMETA>
<REFENTRYTITLE>__strtod_internal</REFENTRYTITLE>
<REFMISCINFO>Base Libraries</REFMISCINFO>
</REFMETA>
<REFNAMEDIV>
<REFNAME>__strtod_internal
</REFNAME>
<REFPURPOSE>mangle of strtod
</REFPURPOSE>
</REFNAMEDIV>
<REFSYNOPSISDIV>
<REFSYNOPSISDIVINFO>
<DATE>15 February 2000</DATE>
</REFSYNOPSISDIVINFO>
<SYNOPSIS>
double __strtod_internal (const char *<REPLACEABLE CLASS="PARAMETER">__nptr</REPLACEABLE>,
                          char **<REPLACEABLE CLASS="PARAMETER">__endptr</REPLACEABLE>,
                          int <REPLACEABLE CLASS="PARAMETER">__group</REPLACEABLE>);
</SYNOPSIS>
</REFSYNOPSISDIV>
<REFSECT1>
<REFSECT1INFO>
<DATE>15 February 2000</DATE>
</REFSECT1INFO>
<TITLE>Description
</TITLE>
<PARA>
The __GROUP argument must be 0 or the behavior is undefined.
Otherwise the same as

<BLOCKQUOTE>
<PARA>
strtod (__nptr, __endptr).
</PARA>
</BLOCKQUOTE>

Only in the binary standard, not the source standard.
</PARA>
</REFSECT1>
</REFENTRY>

<REFENTRY ID="baselib-strtof-internal-1"> <REFMETA>
<REFENTRYTITLE>__strtof_internal</REFENTRYTITLE>
<REFMISCINFO>Base Libraries</REFMISCINFO>
</REFMETA>
<REFNAMEDIV>
<REFNAME>__strtof_internal
</REFNAME>
<REFPURPOSE>mangle of strtof
</REFPURPOSE>
</REFNAMEDIV>
<REFSYNOPSISDIV>
<REFSYNOPSISDIVINFO>
<DATE>15 February 2000</DATE>
</REFSYNOPSISDIVINFO>
<SYNOPSIS>
float __strtof_internal (const char *__nptr,
                         char **__endptr, int __group);
</SYNOPSIS>
</REFSYNOPSISDIV>
<REFSECT1>
<REFSECT1INFO>
<DATE>15 February 2000</DATE>
</REFSECT1INFO>
<TITLE>Description
</TITLE>
<PARA>
__GROUP must be 0 or the behavior is undefined.  Otherwise the same as
strtof (__nptr, __endptr).  Only in the binary standard, not the
source standard.
</PARA>
</REFSECT1>
</REFENTRY>

<REFENTRY ID="baselib-strtol-internal-1"> <REFMETA>
<REFENTRYTITLE>__strtol_internal</REFENTRYTITLE>
<REFMISCINFO>Base Libraries</REFMISCINFO>
</REFMETA>
<REFNAMEDIV>
<REFNAME>__strtol_internal
</REFNAME>
<REFPURPOSE>mangle of strtol
</REFPURPOSE>
</REFNAMEDIV>
<REFSYNOPSISDIV>
<REFSYNOPSISDIVINFO>
<DATE>15 February 2000</DATE>
</REFSYNOPSISDIVINFO>
<SYNOPSIS>
long int __strtol_internal (const char *__nptr, char **__endptr,
                            int __base, int __group);
</SYNOPSIS>
</REFSYNOPSISDIV>
<REFSECT1>
<REFSECT1INFO>
<DATE>15 February 2000</DATE>
</REFSECT1INFO>
<TITLE>Description
</TITLE>
<PARA>
__GROUP must be 0 or the behavior is undefined.  Otherwise the same as
strtol (__nptr, __endptr, __base).  Only in the binary standard, not the
source standard.
</PARA>
</REFSECT1>
</REFENTRY>

<REFENTRY ID="baselib-strtoul-internal-1"> <REFMETA>
<REFENTRYTITLE>__strtoul_internal</REFENTRYTITLE>
<REFMISCINFO>Base Libraries</REFMISCINFO>
</REFMETA>
<REFNAMEDIV>
<REFNAME>__strtoul_internal
</REFNAME>
<REFPURPOSE>mangle of strtoul
</REFPURPOSE>
</REFNAMEDIV>
<REFSYNOPSISDIV>
<REFSYNOPSISDIVINFO>
<DATE>15 February 2000</DATE>
</REFSYNOPSISDIVINFO>
<SYNOPSIS>
unsigned long int __strtoul_internal (const char *__nptr,
                                      char **__endptr, int __base,
                                      int __group));
</SYNOPSIS>
</REFSYNOPSISDIV>
<REFSECT1>
<REFSECT1INFO>
<DATE>15 February 2000</DATE>
</REFSECT1INFO>
<TITLE>Description
</TITLE>
<PARA>
__GROUP must be 0 or the behavior is undefined.  Otherwise the same as
strtoul (__nptr, __endptr, __base).  Only in the binary standard, not the
source standard.
</PARA>
</REFSECT1>
</REFENTRY>

<REFENTRY ID="baselib-xstat-1"> <REFMETA>
<REFENTRYTITLE>__xstat</REFENTRYTITLE>
<REFMISCINFO>Base Libraries</REFMISCINFO>
</REFMETA>
<REFNAMEDIV>
<REFNAME>__xstat
</REFNAME>
<REFPURPOSE>provide inode information
</REFPURPOSE>
<INDEXTERM ID="ix-baselib-xstat-1"><PRIMARY>stat</PRIMARY></INDEXTERM>
<INDEXTERM ID="ix-baselib-xstat-2"><PRIMARY>xstat</PRIMARY></INDEXTERM>
</REFNAMEDIV>
<REFSYNOPSISDIV>
<REFSYNOPSISDIVINFO>
<DATE>4 March 1996</DATE>
</REFSYNOPSISDIVINFO>
<SYNOPSIS>
#include &lt;sys/stat.h>
#include &lt;unistd.h>

int __xstat (int <REPLACEABLE CLASS="PARAMETER">__ver</REPLACEABLE>,
             const char *<REPLACEABLE CLASS="PARAMETER">__filename</REPLACEABLE>,
             struct stat *<REPLACEABLE CLASS="PARAMETER">__stat_buf</REPLACEABLE>)
</SYNOPSIS>
<REFSECT2>
<TITLE>Inputs
</TITLE>
<VARIABLELIST>
<VARLISTENTRY>
<TERM><REPLACEABLE CLASS="PARAMETER">__ver</REPLACEABLE>
</TERM>
<LISTITEM>
<PARA>Must be 3 or the behavior is undefined.
</PARA>
</LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM><REPLACEABLE CLASS="PARAMETER">__filename</REPLACEABLE>
</TERM>
<LISTITEM>
<PARA>As in POSIX.
</PARA>
</LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM><REPLACEABLE CLASS="PARAMETER">__stat_buf</REPLACEABLE>
</TERM>
<LISTITEM>
<PARA>As in POSIX.
</PARA>
</LISTITEM>
</VARLISTENTRY>
</VARIABLELIST>
</REFSECT2></REFSYNOPSISDIV>
<REFSECT1>
<REFSECT1INFO>
<DATE>5 March 1996</DATE>
</REFSECT1INFO>
<TITLE>Description
</TITLE>
<PARA><FUNCTION>__xstat()</FUNCTION> has the same behavior as stat
(__filename, __stat_buf) as specified by POSIX.
</PARA>
<PARA>FIXME: are we clear on specifying the correct struct stat,
rather than the kernel one?
</PARA>
</REFSECT1>
<REFSECT1>
<TITLE>Usage
</TITLE>
<PARA>
This function is not called directly, but rather <FUNCTION>stat()</FUNCTION>
is called instead and the header mangles things.
<FUNCTION>__xstat</FUNCTION> is not in the source standard;
<FUNCTION>stat</FUNCTION> is not in the binary standard.
</PARA>
</REFSECT1>
</REFENTRY>

<REFENTRY ID="baselib-select-1"> <REFMETA>
<REFENTRYTITLE>select</REFENTRYTITLE>
<REFMISCINFO>Base Libraries</REFMISCINFO>
</REFMETA>
<REFNAMEDIV>
<REFNAME>select
</REFNAME>
<REFPURPOSE>synchronous I/O multiplexing
</REFPURPOSE>
</REFNAMEDIV>
<REFSECT1>
<REFSECT1INFO>
<DATE>26 January 2000</DATE>
</REFSECT1INFO>
<TITLE>Description
</TITLE>
<PARA>
Specified as in the Single Unix Specification.  But note the text "On
successful completion, the object pointed to by the timeout argument
may be modified."
</PARA>

<PARA>
Linux systems currently modify the timeval structure to reflect the
amount of time not slept; most other implementations do not do this.
This causes problems both when Linux code which reads the timeval
structure is ported to other operating systems, and when code is
ported to Linux that reuses the timeval structure for multiple selects
in a loop without reinitializing it.  Consider timeout to be undefined
after select returns and reinitialize it before each call to select.
</PARA>

<PARA>
This behavior may be deprecated in the future.
</PARA>
</REFSECT1>
</REFENTRY>

</SECT1>


<SECT1>
<TITLE>libm</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Library:</ENTRY>
<ENTRY>libm</ENTRY>
</ROW>
<ROW>
<ENTRY>Runtime Path:</ENTRY>
<ENTRY>libm.lsb.1</ENTRY>
</ROW>
<ROW>
<ENTRY>Development Name:</ENTRY>
<ENTRY>libm</ENTRY>
</ROW>
<ROW>
<ENTRY>Header Location:</ENTRY>
<ENTRY>/usr/include</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The behaviour of the interfaces in this library is specified by the following Standards.<SIMPLELIST COLUMNS=1>
<MEMBER>
The Single UNIX Specification Version 2 (UNIX 98) System Interfaces & Headers<FOOTNOTE ID="std-13-5">
<PARA>
The Single UNIX Specification Version 2 (UNIX 98) System Interfaces & Headers</PARA>
</FOOTNOTE>
</MEMBER>
<MEMBER>
Unknown<FOOTNOTE ID="std-13-1">
<PARA>
Unknown</PARA>
</FOOTNOTE>
</MEMBER>
</SIMPLELIST>
</PARA>
<SECT2>
<TITLE>Math</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>acos<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY>cos<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY>frexp<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY>log<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY>sin<FOOTNOTEREF LINKEND="std-13-5"></ENTRY></ROW>
<ROW><ENTRY>acosh<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY>cosh<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY>gamma<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY>log10<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY>sinh<FOOTNOTEREF LINKEND="std-13-5"></ENTRY></ROW>
<ROW><ENTRY>asin<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY>drem<FOOTNOTEREF LINKEND="std-13-1"></ENTRY><ENTRY>gcvt<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY>log1p<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY>sqrt<FOOTNOTEREF LINKEND="std-13-5"></ENTRY></ROW>
<ROW><ENTRY>asinh<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY>erf<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY>hypot<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY>logb<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY>tan<FOOTNOTEREF LINKEND="std-13-5"></ENTRY></ROW>
<ROW><ENTRY>atan<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY>erfc<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY>ilogb<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY>modf<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY>tanh<FOOTNOTEREF LINKEND="std-13-5"></ENTRY></ROW>
<ROW><ENTRY>atan2<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY>exp<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY>isinf<FOOTNOTEREF LINKEND="std-13-1"></ENTRY><ENTRY>nextafter<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY>y0<FOOTNOTEREF LINKEND="std-13-5"></ENTRY></ROW>
<ROW><ENTRY>atanh<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY>expm1<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY>j0<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY>pow<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY>y1<FOOTNOTEREF LINKEND="std-13-5"></ENTRY></ROW>
<ROW><ENTRY>cabs<FOOTNOTEREF LINKEND="std-13-1"></ENTRY><ENTRY>fabs<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY>j1<FOOTNOTEREF LINKEND="std-13-1"></ENTRY><ENTRY>remainder<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY>yn<FOOTNOTEREF LINKEND="std-13-5"></ENTRY></ROW>
<ROW><ENTRY>cbrt<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY>finite<FOOTNOTEREF LINKEND="std-13-1"></ENTRY><ENTRY>jn<FOOTNOTEREF LINKEND="std-13-1"></ENTRY><ENTRY>rint<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>ceil<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY>floor<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY>ldexp<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY>scalb<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>copysign<FOOTNOTEREF LINKEND="std-13-1"></ENTRY><ENTRY>fmod<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY>lgamma<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY>signgam<FOOTNOTEREF LINKEND="std-13-5"></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
</SECT1>
<SECT1>
<TITLE> Data Definitions for libm</TITLE>
<PARA>
</PARA>
<SECT2>
<TITLE>math.h</TITLE>
<PARA>
</PARA>
<SCREEN>

/* IEEE positive infinity (-HUGE_VAL is negative infinity).  */

#define	__HUGE_VAL_bytes	{ 0, 0, 0, 0, 0, 0, 0xf0, 0x7f }

#define __huge_val_t	union { unsigned char __c[8]; double __d; }
#ifdef	__GNUC__
#define	HUGE_VAL	(__extension__ \
			 ((__huge_val_t) { __c: __HUGE_VAL_bytes }).__d)
#else	/* Not GCC.  */
static __huge_val_t __huge_val = { __HUGE_VAL_bytes };
#define	HUGE_VAL	(__huge_val.__d)
#endif	/* GCC.  */

#define MAXFLOAT        (-1) /* Didn't find this one */
#define M_1_PI		0.31830988618379067154
#define M_2_PI		0.63661977236758134308
#define M_2_SQRTPI      1.12837916709551257390
#define M_E		2.7182818284590452354
#define M_LN10		2.30258509299404568402
#define M_LN2		0.69314718055994530942
#define M_LOG10E        0.43429448190325182765
#define M_LOG2E		1.4426950408889634074
#define M_PI		3.14159265358979323846
#define M_PI_2		1.57079632679489661923
#define M_PI_4		0.78539816339744830962
#define M_SQRT1_2	0.70710678118654752440
#define M_SQRT2		1.41421356237309504880


double copysign (double , double );
int finite (double );
double frexp (double , int *);
int isinf (double );
int isnan (double );
double ldexp (double , int );
double modf (double , double *);
double acos (double );
double acosh (double );
double asinh (double );
double atanh (double );
double asin (double );
double atan (double );
double atan2 (double , double );
double cbrt (double );
double ceil (double );
double cos (double );
double cosh (double );
double erf(double x);
double erfc(double x);
double exp (double );
double expm1 (double );
double fabs (double );
double floor (double );
double fmod (double , double );
double gamma(double x);
double hypot (double , double );
int ilogb (double x);
double j0(double x);
double j1(double x);
double jn(int n, double x);
double lgamma(double x);
double log (double );
double log10 (double );
double log1p (double );
double logb (double );
double nextafter(double x, double y);
double pow (double , double );
double remainder(double x, double y);
double rint (double );
double scalb (double , int );
double sin (double );
double sinh (double );
double sqrt (double );
double tan (double );
double tanh (double );
double y0(double x);
double y1 (double x);
double yn (int n, double x);
double cabs (struct { double real, imag; } );
double drem (double , double );
double infnan (int );
extern int signgam;

</SCREEN>
</SECT2>
</SECT1>


<SECT1>
<TITLE>libpthread</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Library:</ENTRY>
<ENTRY>libpthread</ENTRY>
</ROW>
<ROW>
<ENTRY>Runtime Path:</ENTRY>
<ENTRY>libpthread.lsb.1</ENTRY>
</ROW>
<ROW>
<ENTRY>Development Name:</ENTRY>
<ENTRY></ENTRY>
</ROW>
<ROW>
<ENTRY>Header Location:</ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The behaviour of the interfaces in this library is specified by the following Standards.<SIMPLELIST COLUMNS=1>
<MEMBER>
The Single UNIX Specification Version 2 (UNIX 98) System Interfaces & Headers<FOOTNOTE ID="std-5-5">
<PARA>
The Single UNIX Specification Version 2 (UNIX 98) System Interfaces & Headers</PARA>
</FOOTNOTE>
</MEMBER>
</SIMPLELIST>
</PARA>
<SECT2>
<TITLE>Posix Threads</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>pthread_attr_destroy<FOOTNOTEREF LINKEND="std-5-5"></ENTRY><ENTRY>pthread_attr_setscope<FOOTNOTEREF LINKEND="std-5-5"></ENTRY><ENTRY>pthread_exit<FOOTNOTEREF LINKEND="std-5-5"></ENTRY><ENTRY>pthread_once<FOOTNOTEREF LINKEND="std-5-5"></ENTRY><ENTRY>pthread_setschedparam<FOOTNOTEREF LINKEND="std-5-5"></ENTRY></ROW>
<ROW><ENTRY>pthread_attr_getdetachstate<FOOTNOTEREF LINKEND="std-5-5"></ENTRY><ENTRY>pthread_attr_setstackaddr<FOOTNOTEREF LINKEND="std-5-5"></ENTRY><ENTRY>pthread_getschedparam<FOOTNOTEREF LINKEND="std-5-5"></ENTRY><ENTRY>pthread_rwlockattr_destroy<FOOTNOTEREF LINKEND="std-5-5"></ENTRY><ENTRY>pthread_setspecific<FOOTNOTEREF LINKEND="std-5-5"></ENTRY></ROW>
<ROW><ENTRY>pthread_attr_getguardsize<FOOTNOTEREF LINKEND="std-5-5"></ENTRY><ENTRY>pthread_attr_setstacksize<FOOTNOTEREF LINKEND="std-5-5"></ENTRY><ENTRY>pthread_getspecific<FOOTNOTEREF LINKEND="std-5-5"></ENTRY><ENTRY>pthread_rwlockattr_getpshared<FOOTNOTEREF LINKEND="std-5-5"></ENTRY><ENTRY>pthread_sigmask<FOOTNOTEREF LINKEND="std-5-5"></ENTRY></ROW>
<ROW><ENTRY>pthread_attr_getinheritsched<FOOTNOTEREF LINKEND="std-5-5"></ENTRY><ENTRY>pthread_cancel<FOOTNOTEREF LINKEND="std-5-5"></ENTRY><ENTRY>pthread_join<FOOTNOTEREF LINKEND="std-5-5"></ENTRY><ENTRY>pthread_rwlockattr_init<FOOTNOTEREF LINKEND="std-5-5"></ENTRY><ENTRY>pthread_testcancel<FOOTNOTEREF LINKEND="std-5-5"></ENTRY></ROW>
<ROW><ENTRY>pthread_attr_getschedparam<FOOTNOTEREF LINKEND="std-5-5"></ENTRY><ENTRY>pthread_condattr_destroy<FOOTNOTEREF LINKEND="std-5-5"></ENTRY><ENTRY>pthread_key_create<FOOTNOTEREF LINKEND="std-5-5"></ENTRY><ENTRY>pthread_rwlockattr_setpshared<FOOTNOTEREF LINKEND="std-5-5"></ENTRY><ENTRY>sem_destroy<FOOTNOTEREF LINKEND="std-5-5"></ENTRY></ROW>
<ROW><ENTRY>pthread_attr_getschedpolicy<FOOTNOTEREF LINKEND="std-5-5"></ENTRY><ENTRY>pthread_condattr_init<FOOTNOTEREF LINKEND="std-5-5"></ENTRY><ENTRY>pthread_key_delete<FOOTNOTEREF LINKEND="std-5-5"></ENTRY><ENTRY>pthread_rwlock_destroy<FOOTNOTEREF LINKEND="std-5-5"></ENTRY><ENTRY>sem_getvalue<FOOTNOTEREF LINKEND="std-5-5"></ENTRY></ROW>
<ROW><ENTRY>pthread_attr_getscope<FOOTNOTEREF LINKEND="std-5-5"></ENTRY><ENTRY>pthread_cond_broadcast<FOOTNOTEREF LINKEND="std-5-5"></ENTRY><ENTRY>pthread_kill<FOOTNOTEREF LINKEND="std-5-5"></ENTRY><ENTRY>pthread_rwlock_init<FOOTNOTEREF LINKEND="std-5-5"></ENTRY><ENTRY>sem_init<FOOTNOTEREF LINKEND="std-5-5"></ENTRY></ROW>
<ROW><ENTRY>pthread_attr_getstackaddr<FOOTNOTEREF LINKEND="std-5-5"></ENTRY><ENTRY>pthread_cond_destroy<FOOTNOTEREF LINKEND="std-5-5"></ENTRY><ENTRY>pthread_mutexattr_destroy<FOOTNOTEREF LINKEND="std-5-5"></ENTRY><ENTRY>pthread_rwlock_rdlock<FOOTNOTEREF LINKEND="std-5-5"></ENTRY><ENTRY>sem_post<FOOTNOTEREF LINKEND="std-5-5"></ENTRY></ROW>
<ROW><ENTRY>pthread_attr_getstacksize<FOOTNOTEREF LINKEND="std-5-5"></ENTRY><ENTRY>pthread_cond_init<FOOTNOTEREF LINKEND="std-5-5"></ENTRY><ENTRY>pthread_mutexattr_gettype<FOOTNOTEREF LINKEND="std-5-5"></ENTRY><ENTRY>pthread_rwlock_tryrdlock<FOOTNOTEREF LINKEND="std-5-5"></ENTRY><ENTRY>sem_trywait<FOOTNOTEREF LINKEND="std-5-5"></ENTRY></ROW>
<ROW><ENTRY>pthread_attr_init<FOOTNOTEREF LINKEND="std-5-5"></ENTRY><ENTRY>pthread_cond_signal<FOOTNOTEREF LINKEND="std-5-5"></ENTRY><ENTRY>pthread_mutexattr_settype<FOOTNOTEREF LINKEND="std-5-5"></ENTRY><ENTRY>pthread_rwlock_trywrlock<FOOTNOTEREF LINKEND="std-5-5"></ENTRY><ENTRY>sem_unlink<FOOTNOTEREF LINKEND="std-5-5"></ENTRY></ROW>
<ROW><ENTRY>pthread_attr_setdetachstate<FOOTNOTEREF LINKEND="std-5-5"></ENTRY><ENTRY>pthread_cond_timedwait<FOOTNOTEREF LINKEND="std-5-5"></ENTRY><ENTRY>pthread_mutex_destroy<FOOTNOTEREF LINKEND="std-5-5"></ENTRY><ENTRY>pthread_rwlock_unlock<FOOTNOTEREF LINKEND="std-5-5"></ENTRY><ENTRY>sem_wait<FOOTNOTEREF LINKEND="std-5-5"></ENTRY></ROW>
<ROW><ENTRY>pthread_attr_setguardsize<FOOTNOTEREF LINKEND="std-5-5"></ENTRY><ENTRY>pthread_cond_wait<FOOTNOTEREF LINKEND="std-5-5"></ENTRY><ENTRY>pthread_mutex_init<FOOTNOTEREF LINKEND="std-5-5"></ENTRY><ENTRY>pthread_rwlock_wrlock<FOOTNOTEREF LINKEND="std-5-5"></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>pthread_attr_setinheritsched<FOOTNOTEREF LINKEND="std-5-5"></ENTRY><ENTRY>pthread_create<FOOTNOTEREF LINKEND="std-5-5"></ENTRY><ENTRY>pthread_mutex_lock<FOOTNOTEREF LINKEND="std-5-5"></ENTRY><ENTRY>pthread_self<FOOTNOTEREF LINKEND="std-5-5"></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>pthread_attr_setschedparam<FOOTNOTEREF LINKEND="std-5-5"></ENTRY><ENTRY>pthread_detach<FOOTNOTEREF LINKEND="std-5-5"></ENTRY><ENTRY>pthread_mutex_trylock<FOOTNOTEREF LINKEND="std-5-5"></ENTRY><ENTRY>pthread_setcancelstate<FOOTNOTEREF LINKEND="std-5-5"></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>pthread_attr_setschedpolicy<FOOTNOTEREF LINKEND="std-5-5"></ENTRY><ENTRY>pthread_equal<FOOTNOTEREF LINKEND="std-5-5"></ENTRY><ENTRY>pthread_mutex_unlock<FOOTNOTEREF LINKEND="std-5-5"></ENTRY><ENTRY>pthread_setcanceltype<FOOTNOTEREF LINKEND="std-5-5"></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>Mangled Symbols</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>pthread_cleanup_pop</ENTRY><ENTRY>void _pthread_cleanup_pop(struct _pthread_cleanup_buffer *, int)</ENTRY></ROW>
<ROW><ENTRY>pthread_cleanup_push</ENTRY><ENTRY>void _pthread_cleanup(struct _pthread_cleanup_buffer *, void (*)(void), void *)</ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>Leftovers</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>pthread_mutexattr_getkind_np</ENTRY><ENTRY>pthread_mutexattr_init</ENTRY><ENTRY>pthread_mutexattr_setkind_np</ENTRY><ENTRY></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
</SECT1>
<SECT1>
<TITLE> Data Definitions for libpthread</TITLE>
<PARA>
</PARA>
<SECT2>
<TITLE>pthread.h</TITLE>
<PARA>
</PARA>
<SCREEN>

int pthread_attr_destroy(pthread_attr_t *attr);
int pthread_attr_getdetachstate(const pthread_attr_t *attr, int *detachstate);
int pthread_attr_getinheritsched(const pthread_attr_t *attr, int *inheritsched);
int pthread_attr_getschedparam(const pthread_attr_t *attr, struct sched_param *param);
int pthread_attr_getschedpolicy(const pthread_attr_t *attr, int *policy);
int pthread_attr_getscope(const pthread_attr_t *attr, int *contentionscope);
int pthread_attr_init(pthread_attr_t *attr);
int pthread_attr_setdetachstate(pthread_attr_t *attr, int detachstate);
int pthread_attr_setinheritsched(pthread_attr_t *attr, int inheritsched);
int pthread_attr_setschedparam(pthread_attr_t *attr, const struct sched_param *param);
int pthread_attr_setschedpolicy(pthread_attr_t *attr, int policy);
int pthread_attr_setscope(pthread_attr_t *attr, int contentionscope);
int pthread_cond_broadcast(pthread_cond_t *cond);
int pthread_cond_destroy(pthread_cond_t *cond);
int pthread_cond_init(pthread_cond_t *cond, const pthread_condattr_t *attr);
int pthread_cond_signal(pthread_cond_t *cond);
int pthread_cond_wait(pthread_cond_t *cond, pthread_mutex_t *mutex);
int pthread_condattr_destroy(pthread_condattr_t *attr);
int pthread_condattr_init(pthread_condattr_t *attr);
int pthread_equal(pthread_t t1, pthread_t t2);
void pthread_exit(void *value_ptr);
int pthread_getschedparam(pthread_t thread, int *policy, struct sched_param *param);
int pthread_mutex_destroy(pthread_mutex_t *mutex);
int pthread_mutex_init(pthread_mutex_t *mutex, const pthread_mutexattr_t *attr);
int pthread_mutex_lock(pthread_mutex_t *mutex);
int pthread_mutex_unlock(pthread_mutex_t *mutex);
pthread_t pthread_self(void);
int pthread_setcancelstate(int state, int *oldstate);
int pthread_setcanceltype(int type, int *oldtype);
int pthread_setschedparam(pthread_t thread, int policy, const struct sched_param *param);
int pthread_attr_getguardsize(const pthread_attr_t *attr, size_t *guardsize);
int pthread_attr_setguardsize(pthread_attr_t *attr, size_t guardsize);
int pthread_attr_setstackaddr(pthread_attr_t *attr, void *stackaddr);
int pthread_attr_getstackaddr(const pthread_attr_t *attr, void **stackaddr);
int pthread_attr_setstacksize(pthread_attr_t *attr, size_t stacksize);
int pthread_attr_getstacksize(const pthread_attr_t *attr, size_t *stacksize);
int pthread_cancel(pthread_t thread);
void pthread_cleanup_push(void (*routine)(void*), void *arg);
void pthread_cleanup_pop(int execute);
int pthread_cond_timedwait(pthread_cond_t *cond, pthread_mutex_t *mutex, const struct timespec *abstime);
int pthread_condattr_getpshared(const pthread_condattr_t *attr, int *pshared);
int pthread_condattr_setpshared(pthread_condattr_t *attr, int pshared);
int pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*start_routine)(void*), void *arg);
int pthread_detach(pthread_t thread);
int pthread_getconcurrency(void);
int pthread_setconcurrency(int new_level);
int pthread_setspecific(pthread_key_t key, const void *value);
void *pthread_getspecific(pthread_key_t key);
int pthread_join(pthread_t thread, void **value_ptr);
int pthread_key_delete(pthread_key_t key);
int pthread_mutex_setprioceiling(pthread_mutex_t *mutex, int prioceiling, int *old_ceiling);
int pthread_mutex_getprioceiling(const pthread_mutex_t *mutex, int *prioceiling);
int pthread_mutex_trylock(pthread_mutex_t *mutex);
int pthread_mutexattr_init(pthread_mutexattr_t *attr);
int pthread_mutexattr_destroy(pthread_mutexattr_t *attr);
int pthread_mutexattr_setprioceiling(pthread_mutexattr_t *attr, int prioceiling);
int pthread_mutexattr_getprioceiling(const pthread_mutexattr_t *attr, int *prioceiling);
int pthread_mutexattr_setprotocol(pthread_mutexattr_t *attr, int protocol);
int pthread_mutexattr_getprotocol(const pthread_mutexattr_t *attr, int *protocol);
int pthread_mutexattr_getpshared(const pthread_mutexattr_t *attr, int *pshared);
int pthread_mutexattr_setpshared(pthread_mutexattr_t *attr, int pshared);
int pthread_mutexattr_gettype(const pthread_mutexattr_t *attr, int *type);
int pthread_mutexattr_settype(pthread_mutexattr_t *attr, int type);
int pthread_rwlock_init(pthread_rwlock_t *rwlock, const pthread_rwlockattr_t *attr);
int pthread_rwlock_destroy(pthread_rwlock_t *rwlock);
int pthread_rwlock_rdlock(pthread_rwlock_t *rwlock);
int pthread_rwlock_tryrdlock(pthread_rwlock_t *rwlock);
int pthread_rwlock_wrlock(pthread_rwlock_t *rwlock);
int pthread_rwlock_trywrlock(pthread_rwlock_t *rwlock);
int pthread_rwlock_unlock(pthread_rwlock_t *rwlock);
int pthread_rwlockattr_init(pthread_rwlockattr_t *attr);
int pthread_rwlockattr_destroy(pthread_rwlockattr_t *attr);
int pthread_rwlockattr_getpshared(const pthread_rwlockattr_t *attr, int *pshared);
int pthread_rwlockattr_setpshared(pthread_rwlockattr_t *attr, int pshared);
void pthread_testcancel(void);

</SCREEN>
</SECT2>
</SECT1>


<SECT1>
<TITLE>libdb</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Library:</ENTRY>
<ENTRY>libdb</ENTRY>
</ROW>
<ROW>
<ENTRY>Runtime Path:</ENTRY>
<ENTRY>libdb.lsb.1</ENTRY>
</ROW>
<ROW>
<ENTRY>Development Name:</ENTRY>
<ENTRY>libdb</ENTRY>
</ROW>
<ROW>
<ENTRY>Header Location:</ENTRY>
<ENTRY>/usr/include</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The behaviour of the interfaces in this library is specified by the following Standards.<SIMPLELIST COLUMNS=1>
<MEMBER>
The Single UNIX Specification Version 2 (UNIX 98) System Interfaces & Headers<FOOTNOTE ID="std-23-5">
<PARA>
The Single UNIX Specification Version 2 (UNIX 98) System Interfaces & Headers</PARA>
</FOOTNOTE>
</MEMBER>
<MEMBER>
Unknown<FOOTNOTE ID="std-23-1">
<PARA>
Unknown</PARA>
</FOOTNOTE>
</MEMBER>
</SIMPLELIST>
</PARA>
<SECT2>
<TITLE>DBM Functions</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>dbm_clearerr<FOOTNOTEREF LINKEND="std-23-5"></ENTRY><ENTRY>dbm_delete<FOOTNOTEREF LINKEND="std-23-5"></ENTRY><ENTRY>dbm_error<FOOTNOTEREF LINKEND="std-23-5"></ENTRY><ENTRY>dbm_firstkey<FOOTNOTEREF LINKEND="std-23-5"></ENTRY><ENTRY>dbm_open<FOOTNOTEREF LINKEND="std-23-5"></ENTRY></ROW>
<ROW><ENTRY>dbm_close<FOOTNOTEREF LINKEND="std-23-5"></ENTRY><ENTRY>dbm_dirfno<FOOTNOTEREF LINKEND="std-23-1"></ENTRY><ENTRY>dbm_fetch<FOOTNOTEREF LINKEND="std-23-5"></ENTRY><ENTRY>dbm_nextkey<FOOTNOTEREF LINKEND="std-23-5"></ENTRY><ENTRY>dbm_store<FOOTNOTEREF LINKEND="std-23-5"></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
</SECT1>


<SECT1>
<TITLE>libdl</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Library:</ENTRY>
<ENTRY>libdl</ENTRY>
</ROW>
<ROW>
<ENTRY>Runtime Path:</ENTRY>
<ENTRY>libdl.lsb.1</ENTRY>
</ROW>
<ROW>
<ENTRY>Development Name:</ENTRY>
<ENTRY>libdl</ENTRY>
</ROW>
<ROW>
<ENTRY>Header Location:</ENTRY>
<ENTRY>/usr/include</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The behaviour of the interfaces in this library is specified by the following Standards.<SIMPLELIST COLUMNS=1>
<MEMBER>
The Single UNIX Specification Version 2 (UNIX 98) System Interfaces & Headers<FOOTNOTE ID="std-27-5">
<PARA>
The Single UNIX Specification Version 2 (UNIX 98) System Interfaces & Headers</PARA>
</FOOTNOTE>
</MEMBER>
</SIMPLELIST>
</PARA>
<SECT2>
<TITLE>Dynamic Loader</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>dlclose<FOOTNOTEREF LINKEND="std-27-5"></ENTRY><ENTRY>dlerror<FOOTNOTEREF LINKEND="std-27-5"></ENTRY><ENTRY>dlopen<FOOTNOTEREF LINKEND="std-27-5"></ENTRY><ENTRY>dlsym<FOOTNOTEREF LINKEND="std-27-5"></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
</SECT1>


<SECT1>
<TITLE>libcrypt</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Library:</ENTRY>
<ENTRY>libcrypt</ENTRY>
</ROW>
<ROW>
<ENTRY>Runtime Path:</ENTRY>
<ENTRY>libcrypt.lsb.1</ENTRY>
</ROW>
<ROW>
<ENTRY>Development Name:</ENTRY>
<ENTRY>libcrypt</ENTRY>
</ROW>
<ROW>
<ENTRY>Header Location:</ENTRY>
<ENTRY>/usr/include</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The behaviour of the interfaces in this library is specified by the following Standards.<SIMPLELIST COLUMNS=1>
<MEMBER>
The Single UNIX Specification Version 2 (UNIX 98) System Interfaces & Headers<FOOTNOTE ID="std-29-5">
<PARA>
The Single UNIX Specification Version 2 (UNIX 98) System Interfaces & Headers</PARA>
</FOOTNOTE>
</MEMBER>
</SIMPLELIST>
</PARA>
<SECT2>
<TITLE>Encryption</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>crypt<FOOTNOTEREF LINKEND="std-29-5"></ENTRY><ENTRY>encrypt<FOOTNOTEREF LINKEND="std-29-5"></ENTRY><ENTRY>setkey<FOOTNOTEREF LINKEND="std-29-5"></ENTRY><ENTRY></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
</SECT1>


</CHAPTER>

</PART>
