<PART ID=tocbaselib>
<TITLE>Base Libraries</TITLE>

<CHAPTER id=baselib>
<TITLE>Libraries</TITLE>

<PARA>
An LSB-conforming implementation shall support base libraries which
provide interfaces for accessing the operating system, processor and other
hardware in the system.
</PARA>

<PARA>
Only those interfaces that are unique to the &specarchitecture;
platform are defined here. This
section should be used in conjunction with the corresponding section in
the Linux Standard Base Specification.
</PARA>

<!-- Start of text generated from database -->
<!-- generated from the LSB specification database -->
<!--    by $Header: mklibspec 1.82 2006/03/29 19:10:18 mats Exp 0 -->
<!--    at Thu Nov  1 23:22:30 2007 -->
<SECT1 ID=libstdcxx>
<TITLE>Interfaces for libstdcxx</TITLE>
<PARA>
<XREF LINKEND="lib-libstdcxx-def"> defines the library name and shared object name
for the libstdcxx library
</PARA>
<TABLE id="lib-libstdcxx-def">
<TITLE>libstdcxx Definition</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Library:</ENTRY>
<ENTRY>libstdcxx</ENTRY>
</ROW>
<ROW>
<ENTRY>SONAME:</ENTRY>
<ENTRY>libstdc++.so.6</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The behavior of the interfaces in this library is specified by the following specifications:<SIMPLELIST COLUMNS=1>
<MEMBER ID='REFSTD.libstdcxx.1'>
[CXXABI] <XREF LINKEND="std.CXXABI">
</MEMBER>
<MEMBER ID='REFSTD.libstdcxx.2'>
[ISOCXX] <XREF LINKEND="std.ISOCXX">
</MEMBER>
<MEMBER ID='REFSTD.libstdcxx.3'>
[LSB] <XREF LINKEND="std.LSB">
</MEMBER>
</SIMPLELIST>
</PARA>
<!-- debug: database interface name C++ Runtime Support -->
<SECT2>
<!--libgroup-->
<TITLE>C++ Runtime Support</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for C++ Runtime Support</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for C++ Runtime Support specified in <XREF linkend="tbl-libstdcxx-c-r-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-c-r-ints">
<TITLE>libstdcxx - C++ Runtime Support Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>operator new&lsqb;](unsigned long)</primary></indexterm>operator new&lsqb;](unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>operator new&lsqb;](unsigned long, nothrow_t const&)</primary></indexterm>operator new&lsqb;](unsigned long, nothrow_t const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>operator new(unsigned long)</primary></indexterm>operator new(unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>operator new(unsigned long, nothrow_t const&)</primary></indexterm>operator new(unsigned long, nothrow_t const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name C++ type descriptors for built-in types -->
<SECT2>
<!--libgroup-->
<TITLE>C++ type descriptors for built-in types</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for C++ type descriptors for built-in types</TITLE>
<PARA>
No external methods are defined for libstdcxx - C++ type descriptors for built-in types
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name C++ _Rb_tree -->
<SECT2>
<!--libgroup-->
<TITLE>C++ _Rb_tree</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for C++ _Rb_tree</TITLE>
<PARA>
No external methods are defined for libstdcxx - C++ _Rb_tree
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::type_info -->
<SECT2>
<!--libgroup-->
<TITLE>Class type_info</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for type_info</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::type_info class
is described by <XREF LINKEND="cls-24325-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24325-0">
<TITLE>Primary vtable for type_info</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for type_info</primary></indexterm>typeinfo for type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::~type_info()</primary></indexterm>type_info::~type_info()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::~type_info()</primary></indexterm>type_info::~type_info()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__is_pointer_p() const</primary></indexterm>type_info::__is_pointer_p() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__is_function_p() const</primary></indexterm>type_info::__is_function_p() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__do_catch(type_info const*, void**, unsigned int) const</primary></indexterm>type_info::__do_catch(type_info const*, void**, unsigned int) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const</primary></indexterm>type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::type_info  class
is described by <XREF LINKEND="rtti-24030">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24030">
<TITLE>typeinfo for type_info</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__class_type_info</primary></indexterm>vtable for __cxxabiv1::__class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for type_info</primary></indexterm>typeinfo name for type_info</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class type_info</TITLE>
<PARA>
No external methods are defined for libstdcxx - Class std::type_info
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name Class __cxxabiv1::__enum_type_info -->
<SECT2>
<!--libgroup-->
<TITLE>Class __cxxabiv1::__enum_type_info</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for __cxxabiv1::__enum_type_info</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the __cxxabiv1::__enum_type_info class
is described by <XREF LINKEND="cls-24328-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24328-0">
<TITLE>Primary vtable for __cxxabiv1::__enum_type_info</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for __cxxabiv1::__enum_type_info</primary></indexterm>typeinfo for __cxxabiv1::__enum_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__enum_type_info::~__enum_type_info()</primary></indexterm>__cxxabiv1::__enum_type_info::~__enum_type_info()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__enum_type_info::~__enum_type_info()</primary></indexterm>__cxxabiv1::__enum_type_info::~__enum_type_info()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__is_pointer_p() const</primary></indexterm>type_info::__is_pointer_p() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__is_function_p() const</primary></indexterm>type_info::__is_function_p() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__do_catch(type_info const*, void**, unsigned int) const</primary></indexterm>type_info::__do_catch(type_info const*, void**, unsigned int) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const</primary></indexterm>type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the __cxxabiv1::__enum_type_info  class
is described by <XREF LINKEND="rtti-24099">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24099">
<TITLE>typeinfo for __cxxabiv1::__enum_type_info</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for __cxxabiv1::__enum_type_info</primary></indexterm>typeinfo name for __cxxabiv1::__enum_type_info</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class __cxxabiv1::__enum_type_info</TITLE>
<PARA>
No external methods are defined for libstdcxx - Class __cxxabiv1::__enum_type_info
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name Class __cxxabiv1::__array_type_info -->
<SECT2>
<!--libgroup-->
<TITLE>Class __cxxabiv1::__array_type_info</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for __cxxabiv1::__array_type_info</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the __cxxabiv1::__array_type_info class
is described by <XREF LINKEND="cls-24330-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24330-0">
<TITLE>Primary vtable for __cxxabiv1::__array_type_info</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for __cxxabiv1::__array_type_info</primary></indexterm>typeinfo for __cxxabiv1::__array_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__array_type_info::~__array_type_info()</primary></indexterm>__cxxabiv1::__array_type_info::~__array_type_info()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__array_type_info::~__array_type_info()</primary></indexterm>__cxxabiv1::__array_type_info::~__array_type_info()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__is_pointer_p() const</primary></indexterm>type_info::__is_pointer_p() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__is_function_p() const</primary></indexterm>type_info::__is_function_p() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__do_catch(type_info const*, void**, unsigned int) const</primary></indexterm>type_info::__do_catch(type_info const*, void**, unsigned int) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const</primary></indexterm>type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the __cxxabiv1::__array_type_info  class
is described by <XREF LINKEND="rtti-24101">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24101">
<TITLE>typeinfo for __cxxabiv1::__array_type_info</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for __cxxabiv1::__array_type_info</primary></indexterm>typeinfo name for __cxxabiv1::__array_type_info</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class __cxxabiv1::__array_type_info</TITLE>
<PARA>
No external methods are defined for libstdcxx - Class __cxxabiv1::__array_type_info
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name Class __cxxabiv1::__class_type_info -->
<SECT2>
<!--libgroup-->
<TITLE>Class __cxxabiv1::__class_type_info</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for __cxxabiv1::__class_type_info</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the __cxxabiv1::__class_type_info class
is described by <XREF LINKEND="cls-23981-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-23981-0">
<TITLE>Primary vtable for __cxxabiv1::__class_type_info</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for __cxxabiv1::__class_type_info</primary></indexterm>typeinfo for __cxxabiv1::__class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__class_type_info::~__class_type_info()</primary></indexterm>__cxxabiv1::__class_type_info::~__class_type_info()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__class_type_info::~__class_type_info()</primary></indexterm>__cxxabiv1::__class_type_info::~__class_type_info()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__is_pointer_p() const</primary></indexterm>type_info::__is_pointer_p() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__is_function_p() const</primary></indexterm>type_info::__is_function_p() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__class_type_info::__do_catch(type_info const*, void**, unsigned int) const</primary></indexterm>__cxxabiv1::__class_type_info::__do_catch(type_info const*, void**, unsigned int) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const</primary></indexterm>__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const</primary></indexterm>__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const</primary></indexterm>__cxxabiv1::__class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__class_type_info::__do_find_public_src(long, void const*, __cxxabiv1::__class_type_info const*, void const*) const</primary></indexterm>__cxxabiv1::__class_type_info::__do_find_public_src(long, void const*, __cxxabiv1::__class_type_info const*, void const*) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the __cxxabiv1::__class_type_info  class
is described by <XREF LINKEND="rtti-24031">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24031">
<TITLE>typeinfo for __cxxabiv1::__class_type_info</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for __cxxabiv1::__class_type_info</primary></indexterm>typeinfo name for __cxxabiv1::__class_type_info</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class __cxxabiv1::__class_type_info</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class __cxxabiv1::__class_type_info specified in <XREF linkend="tbl-libstdcxx-class-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-class-ints">
<TITLE>libstdcxx - Class __cxxabiv1::__class_type_info Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const</primary></indexterm>__cxxabiv1::__class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__class_type_info::__do_find_public_src(long, void const*, __cxxabiv1::__class_type_info const*, void const*) const</primary></indexterm>__cxxabiv1::__class_type_info::__do_find_public_src(long, void const*, __cxxabiv1::__class_type_info const*, void const*) const(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class __cxxabiv1::__pbase_type_info -->
<SECT2>
<!--libgroup-->
<TITLE>Class __cxxabiv1::__pbase_type_info</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for __cxxabiv1::__pbase_type_info</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the __cxxabiv1::__pbase_type_info class
is described by <XREF LINKEND="cls-24327-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24327-0">
<TITLE>Primary vtable for __cxxabiv1::__pbase_type_info</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for __cxxabiv1::__pbase_type_info</primary></indexterm>typeinfo for __cxxabiv1::__pbase_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__pbase_type_info::~__pbase_type_info()</primary></indexterm>__cxxabiv1::__pbase_type_info::~__pbase_type_info()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__pbase_type_info::~__pbase_type_info()</primary></indexterm>__cxxabiv1::__pbase_type_info::~__pbase_type_info()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__is_pointer_p() const</primary></indexterm>type_info::__is_pointer_p() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__is_function_p() const</primary></indexterm>type_info::__is_function_p() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__pbase_type_info::__do_catch(type_info const*, void**, unsigned int) const</primary></indexterm>__cxxabiv1::__pbase_type_info::__do_catch(type_info const*, void**, unsigned int) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const</primary></indexterm>type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__pbase_type_info::__pointer_catch(__cxxabiv1::__pbase_type_info const*, void**, unsigned int) const</primary></indexterm>__cxxabiv1::__pbase_type_info::__pointer_catch(__cxxabiv1::__pbase_type_info const*, void**, unsigned int) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the __cxxabiv1::__pbase_type_info  class
is described by <XREF LINKEND="rtti-24032">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24032">
<TITLE>typeinfo for __cxxabiv1::__pbase_type_info</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for __cxxabiv1::__pbase_type_info</primary></indexterm>typeinfo name for __cxxabiv1::__pbase_type_info</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class __cxxabiv1::__pbase_type_info</TITLE>
<PARA>
No external methods are defined for libstdcxx - Class __cxxabiv1::__pbase_type_info
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name Class __cxxabiv1::__pointer_type_info -->
<SECT2>
<!--libgroup-->
<TITLE>Class __cxxabiv1::__pointer_type_info</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for __cxxabiv1::__pointer_type_info</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the __cxxabiv1::__pointer_type_info class
is described by <XREF LINKEND="cls-23983-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-23983-0">
<TITLE>Primary vtable for __cxxabiv1::__pointer_type_info</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for __cxxabiv1::__pointer_type_info</primary></indexterm>typeinfo for __cxxabiv1::__pointer_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__pointer_type_info::~__pointer_type_info()</primary></indexterm>__cxxabiv1::__pointer_type_info::~__pointer_type_info()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__pointer_type_info::~__pointer_type_info()</primary></indexterm>__cxxabiv1::__pointer_type_info::~__pointer_type_info()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__pointer_type_info::__is_pointer_p() const</primary></indexterm>__cxxabiv1::__pointer_type_info::__is_pointer_p() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__is_function_p() const</primary></indexterm>type_info::__is_function_p() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__pbase_type_info::__do_catch(type_info const*, void**, unsigned int) const</primary></indexterm>__cxxabiv1::__pbase_type_info::__do_catch(type_info const*, void**, unsigned int) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const</primary></indexterm>type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__pointer_type_info::__pointer_catch(__cxxabiv1::__pbase_type_info const*, void**, unsigned int) const</primary></indexterm>__cxxabiv1::__pointer_type_info::__pointer_catch(__cxxabiv1::__pbase_type_info const*, void**, unsigned int) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the __cxxabiv1::__pointer_type_info  class
is described by <XREF LINKEND="rtti-24098">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24098">
<TITLE>typeinfo for __cxxabiv1::__pointer_type_info</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for __cxxabiv1::__pointer_type_info</primary></indexterm>typeinfo name for __cxxabiv1::__pointer_type_info</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class __cxxabiv1::__pointer_type_info</TITLE>
<PARA>
No external methods are defined for libstdcxx - Class __cxxabiv1::__pointer_type_info
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name Class __cxxabiv1::__function_type_info -->
<SECT2>
<!--libgroup-->
<TITLE>Class __cxxabiv1::__function_type_info</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for __cxxabiv1::__function_type_info</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the __cxxabiv1::__function_type_info class
is described by <XREF LINKEND="cls-24329-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24329-0">
<TITLE>Primary vtable for __cxxabiv1::__function_type_info</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for __cxxabiv1::__function_type_info</primary></indexterm>typeinfo for __cxxabiv1::__function_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__function_type_info::~__function_type_info()</primary></indexterm>__cxxabiv1::__function_type_info::~__function_type_info()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__function_type_info::~__function_type_info()</primary></indexterm>__cxxabiv1::__function_type_info::~__function_type_info()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__is_pointer_p() const</primary></indexterm>type_info::__is_pointer_p() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__function_type_info::__is_function_p() const</primary></indexterm>__cxxabiv1::__function_type_info::__is_function_p() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__do_catch(type_info const*, void**, unsigned int) const</primary></indexterm>type_info::__do_catch(type_info const*, void**, unsigned int) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const</primary></indexterm>type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the __cxxabiv1::__function_type_info  class
is described by <XREF LINKEND="rtti-24100">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24100">
<TITLE>typeinfo for __cxxabiv1::__function_type_info</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for __cxxabiv1::__function_type_info</primary></indexterm>typeinfo name for __cxxabiv1::__function_type_info</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class __cxxabiv1::__function_type_info</TITLE>
<PARA>
No external methods are defined for libstdcxx - Class __cxxabiv1::__function_type_info
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name Class __cxxabiv1::__si_class_type_info -->
<SECT2>
<!--libgroup-->
<TITLE>Class __cxxabiv1::__si_class_type_info</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for __cxxabiv1::__si_class_type_info</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the __cxxabiv1::__si_class_type_info class
is described by <XREF LINKEND="cls-23979-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-23979-0">
<TITLE>Primary vtable for __cxxabiv1::__si_class_type_info</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for __cxxabiv1::__si_class_type_info</primary></indexterm>typeinfo for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__si_class_type_info::~__si_class_type_info()</primary></indexterm>__cxxabiv1::__si_class_type_info::~__si_class_type_info()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__si_class_type_info::~__si_class_type_info()</primary></indexterm>__cxxabiv1::__si_class_type_info::~__si_class_type_info()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__is_pointer_p() const</primary></indexterm>type_info::__is_pointer_p() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__is_function_p() const</primary></indexterm>type_info::__is_function_p() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__class_type_info::__do_catch(type_info const*, void**, unsigned int) const</primary></indexterm>__cxxabiv1::__class_type_info::__do_catch(type_info const*, void**, unsigned int) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const</primary></indexterm>__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__si_class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const</primary></indexterm>__cxxabiv1::__si_class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__si_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const</primary></indexterm>__cxxabiv1::__si_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__si_class_type_info::__do_find_public_src(long, void const*, __cxxabiv1::__class_type_info const*, void const*) const</primary></indexterm>__cxxabiv1::__si_class_type_info::__do_find_public_src(long, void const*, __cxxabiv1::__class_type_info const*, void const*) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the __cxxabiv1::__si_class_type_info  class
is described by <XREF LINKEND="rtti-24094">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24094">
<TITLE>typeinfo for __cxxabiv1::__si_class_type_info</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for __cxxabiv1::__si_class_type_info</primary></indexterm>typeinfo name for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class __cxxabiv1::__si_class_type_info</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class __cxxabiv1::__si_class_type_info specified in <XREF linkend="tbl-libstdcxx-clast-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clast-ints">
<TITLE>libstdcxx - Class __cxxabiv1::__si_class_type_info Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__si_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const</primary></indexterm>__cxxabiv1::__si_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__si_class_type_info::__do_find_public_src(long, void const*, __cxxabiv1::__class_type_info const*, void const*) const</primary></indexterm>__cxxabiv1::__si_class_type_info::__do_find_public_src(long, void const*, __cxxabiv1::__class_type_info const*, void const*) const(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class __cxxabiv1::__vmi_class_type_info -->
<SECT2>
<!--libgroup-->
<TITLE>Class __cxxabiv1::__vmi_class_type_info</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for __cxxabiv1::__vmi_class_type_info</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the __cxxabiv1::__vmi_class_type_info class
is described by <XREF LINKEND="cls-23980-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-23980-0">
<TITLE>Primary vtable for __cxxabiv1::__vmi_class_type_info</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for __cxxabiv1::__vmi_class_type_info</primary></indexterm>typeinfo for __cxxabiv1::__vmi_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__vmi_class_type_info::~__vmi_class_type_info()</primary></indexterm>__cxxabiv1::__vmi_class_type_info::~__vmi_class_type_info()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__vmi_class_type_info::~__vmi_class_type_info()</primary></indexterm>__cxxabiv1::__vmi_class_type_info::~__vmi_class_type_info()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__is_pointer_p() const</primary></indexterm>type_info::__is_pointer_p() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__is_function_p() const</primary></indexterm>type_info::__is_function_p() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__class_type_info::__do_catch(type_info const*, void**, unsigned int) const</primary></indexterm>__cxxabiv1::__class_type_info::__do_catch(type_info const*, void**, unsigned int) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const</primary></indexterm>__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__vmi_class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const</primary></indexterm>__cxxabiv1::__vmi_class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__vmi_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const</primary></indexterm>__cxxabiv1::__vmi_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__vmi_class_type_info::__do_find_public_src(long, void const*, __cxxabiv1::__class_type_info const*, void const*) const</primary></indexterm>__cxxabiv1::__vmi_class_type_info::__do_find_public_src(long, void const*, __cxxabiv1::__class_type_info const*, void const*) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the __cxxabiv1::__vmi_class_type_info  class
is described by <XREF LINKEND="rtti-24093">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24093">
<TITLE>typeinfo for __cxxabiv1::__vmi_class_type_info</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for __cxxabiv1::__vmi_class_type_info</primary></indexterm>typeinfo name for __cxxabiv1::__vmi_class_type_info</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class __cxxabiv1::__vmi_class_type_info</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class __cxxabiv1::__vmi_class_type_info specified in <XREF linkend="tbl-libstdcxx-clasu-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clasu-ints">
<TITLE>libstdcxx - Class __cxxabiv1::__vmi_class_type_info Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__vmi_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const</primary></indexterm>__cxxabiv1::__vmi_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__vmi_class_type_info::__do_find_public_src(long, void const*, __cxxabiv1::__class_type_info const*, void const*) const</primary></indexterm>__cxxabiv1::__vmi_class_type_info::__do_find_public_src(long, void const*, __cxxabiv1::__class_type_info const*, void const*) const(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class __cxxabiv1::__fundamental_type_info -->
<SECT2>
<!--libgroup-->
<TITLE>Class __cxxabiv1::__fundamental_type_info</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for __cxxabiv1::__fundamental_type_info</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the __cxxabiv1::__fundamental_type_info class
is described by <XREF LINKEND="cls-23982-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-23982-0">
<TITLE>Primary vtable for __cxxabiv1::__fundamental_type_info</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for __cxxabiv1::__fundamental_type_info</primary></indexterm>typeinfo for __cxxabiv1::__fundamental_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__fundamental_type_info::~__fundamental_type_info()</primary></indexterm>__cxxabiv1::__fundamental_type_info::~__fundamental_type_info()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__fundamental_type_info::~__fundamental_type_info()</primary></indexterm>__cxxabiv1::__fundamental_type_info::~__fundamental_type_info()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__is_pointer_p() const</primary></indexterm>type_info::__is_pointer_p() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__is_function_p() const</primary></indexterm>type_info::__is_function_p() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__do_catch(type_info const*, void**, unsigned int) const</primary></indexterm>type_info::__do_catch(type_info const*, void**, unsigned int) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const</primary></indexterm>type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the __cxxabiv1::__fundamental_type_info  class
is described by <XREF LINKEND="rtti-24102">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24102">
<TITLE>typeinfo for __cxxabiv1::__fundamental_type_info</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for __cxxabiv1::__fundamental_type_info</primary></indexterm>typeinfo name for __cxxabiv1::__fundamental_type_info</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class __cxxabiv1::__fundamental_type_info</TITLE>
<PARA>
No external methods are defined for libstdcxx - Class __cxxabiv1::__fundamental_type_info
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name Class __cxxabiv1::__pointer_to_member_type_info -->
<SECT2>
<!--libgroup-->
<TITLE>Class __cxxabiv1::__pointer_to_member_type_info</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for __cxxabiv1::__pointer_to_member_type_info</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the __cxxabiv1::__pointer_to_member_type_info class
is described by <XREF LINKEND="cls-24326-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24326-0">
<TITLE>Primary vtable for __cxxabiv1::__pointer_to_member_type_info</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for __cxxabiv1::__pointer_to_member_type_info</primary></indexterm>typeinfo for __cxxabiv1::__pointer_to_member_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__pointer_to_member_type_info::~__pointer_to_member_type_info()</primary></indexterm>__cxxabiv1::__pointer_to_member_type_info::~__pointer_to_member_type_info()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__pointer_to_member_type_info::~__pointer_to_member_type_info()</primary></indexterm>__cxxabiv1::__pointer_to_member_type_info::~__pointer_to_member_type_info()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__is_pointer_p() const</primary></indexterm>type_info::__is_pointer_p() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__is_function_p() const</primary></indexterm>type_info::__is_function_p() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__pbase_type_info::__do_catch(type_info const*, void**, unsigned int) const</primary></indexterm>__cxxabiv1::__pbase_type_info::__do_catch(type_info const*, void**, unsigned int) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const</primary></indexterm>type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__pointer_to_member_type_info::__pointer_catch(__cxxabiv1::__pbase_type_info const*, void**, unsigned int) const</primary></indexterm>__cxxabiv1::__pointer_to_member_type_info::__pointer_catch(__cxxabiv1::__pbase_type_info const*, void**, unsigned int) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the __cxxabiv1::__pointer_to_member_type_info  class
is described by <XREF LINKEND="rtti-24097">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24097">
<TITLE>typeinfo for __cxxabiv1::__pointer_to_member_type_info</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for __cxxabiv1::__pointer_to_member_type_info</primary></indexterm>typeinfo name for __cxxabiv1::__pointer_to_member_type_info</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class __cxxabiv1::__pointer_to_member_type_info</TITLE>
<PARA>
No external methods are defined for libstdcxx - Class __cxxabiv1::__pointer_to_member_type_info
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name Class __gnu_cxx::stdio_filebuf<char, std::char_traits<char> > -->
<SECT2>
<!--libgroup-->
<TITLE>Class __gnu_cxx::stdio_filebuf&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for __gnu_cxx::stdio_filebuf&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the __gnu_cxx::stdio_filebuf&lt;char, std::char_traits&lt;char&gt; &gt; class
is described by <XREF LINKEND="cls-29351-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-29351-0">
<TITLE>Primary vtable for __gnu_cxx::stdio_sync_filebuf&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for __gnu_cxx::stdio_sync_filebuf&lt;char, char_traits&lt;char&gt; &gt;</primary></indexterm>typeinfo for __gnu_cxx::stdio_sync_filebuf&lt;char, char_traits&lt;char&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>Unspecified</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>Unspecified</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::imbue(locale const&)</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::imbue(locale const&)</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::setbuf(char*, long)</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::setbuf(char*, long)</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>Unspecified</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>Unspecified</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>Unspecified</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::showmanyc()</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::showmanyc()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>Unspecified</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>Unspecified</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>Unspecified</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;11&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>Unspecified</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;12&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>Unspecified</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;13&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>Unspecified</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class __gnu_cxx::stdio_filebuf&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
No external methods are defined for libstdcxx - Class __gnu_cxx::stdio_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name Class __gnu_cxx::stdio_filebuf<wchar_t, std::char_traits<wchar_t> > -->
<SECT2>
<!--libgroup-->
<TITLE>Class __gnu_cxx::stdio_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for __gnu_cxx::stdio_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the __gnu_cxx::stdio_filebuf&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; class
is described by <XREF LINKEND="cls-29211-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-29211-0">
<TITLE>Primary vtable for __gnu_cxx::stdio_sync_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for __gnu_cxx::stdio_sync_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</primary></indexterm>typeinfo for __gnu_cxx::stdio_sync_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>Unspecified</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>Unspecified</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::imbue(locale const&)</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::imbue(locale const&)</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::setbuf(wchar_t*, long)</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::setbuf(wchar_t*, long)</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>Unspecified</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>Unspecified</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>Unspecified</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::showmanyc()</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::showmanyc()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>Unspecified</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>Unspecified</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>Unspecified</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;11&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>Unspecified</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;12&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>Unspecified</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;13&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>Unspecified</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class __gnu_cxx::stdio_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
No external methods are defined for libstdcxx - Class __gnu_cxx::stdio_filebuf&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt;
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name Class __gnu_cxx::__pool_alloc_base -->
<SECT2>
<!--libgroup-->
<TITLE>Class __gnu_cxx::__pool_alloc_base</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for Class __gnu_cxx::__pool_alloc_base</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class __gnu_cxx::__pool_alloc_base specified in <XREF linkend="tbl-libstdcxx-clasv-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clasv-ints">
<TITLE>libstdcxx - Class __gnu_cxx::__pool_alloc_base Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__gnu_cxx::__pool_alloc_base::_M_get_free_list(unsigned long)</primary></indexterm>__gnu_cxx::__pool_alloc_base::_M_get_free_list(unsigned long)(GLIBCXX_3.4.2) <LINK LINKEND="REFSTD.libstdcxx.3">&lsqb;LSB]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__gnu_cxx::__pool_alloc_base::_M_refill(unsigned long)</primary></indexterm>__gnu_cxx::__pool_alloc_base::_M_refill(unsigned long)(GLIBCXX_3.4.2) <LINK LINKEND="REFSTD.libstdcxx.3">&lsqb;LSB]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class __gnu_cxx::stdio_sync_filebuf<char, std::char_traits<char> > -->
<SECT2>
<!--libgroup-->
<TITLE>Class __gnu_cxx::stdio_sync_filebuf&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for Class __gnu_cxx::stdio_sync_filebuf&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
No external methods are defined for libstdcxx - Class __gnu_cxx::stdio_sync_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name Class __gnu_cxx::stdio_sync_filebuf<wchar_t, std::char_traits<wchar_t> > -->
<SECT2>
<!--libgroup-->
<TITLE>Class __gnu_cxx::stdio_sync_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for Class __gnu_cxx::stdio_sync_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
No external methods are defined for libstdcxx - Class __gnu_cxx::stdio_sync_filebuf&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt;
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::exception -->
<SECT2>
<!--libgroup-->
<TITLE>Class exception</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for exception</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::exception class
is described by <XREF LINKEND="cls-24321-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24321-0">
<TITLE>Primary vtable for exception</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for exception</primary></indexterm>typeinfo for exception</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>exception::~exception()</primary></indexterm>exception::~exception()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>exception::~exception()</primary></indexterm>exception::~exception()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>exception::what() const</primary></indexterm>exception::what() const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::exception  class
is described by <XREF LINKEND="rtti-24002">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24002">
<TITLE>typeinfo for exception</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__class_type_info</primary></indexterm>vtable for __cxxabiv1::__class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for exception</primary></indexterm>typeinfo name for exception</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class exception</TITLE>
<PARA>
No external methods are defined for libstdcxx - Class std::exception
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::bad_typeid -->
<SECT2>
<!--libgroup-->
<TITLE>Class bad_typeid</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for bad_typeid</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::bad_typeid class
is described by <XREF LINKEND="cls-24323-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24323-0">
<TITLE>Primary vtable for bad_typeid</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for bad_typeid</primary></indexterm>typeinfo for bad_typeid</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>bad_typeid::~bad_typeid()</primary></indexterm>bad_typeid::~bad_typeid()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>bad_typeid::~bad_typeid()</primary></indexterm>bad_typeid::~bad_typeid()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>exception::what() const</primary></indexterm>exception::what() const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::bad_typeid  class
is described by <XREF LINKEND="rtti-24095">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24095">
<TITLE>typeinfo for bad_typeid</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for bad_typeid</primary></indexterm>typeinfo name for bad_typeid</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class bad_typeid</TITLE>
<PARA>
No external methods are defined for libstdcxx - Class std::bad_typeid
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::logic_error -->
<SECT2>
<!--libgroup-->
<TITLE>Class logic_error</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for logic_error</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::logic_error class
is described by <XREF LINKEND="cls-24313-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24313-0">
<TITLE>Primary vtable for logic_error</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for logic_error</primary></indexterm>typeinfo for logic_error</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>logic_error::~logic_error()</primary></indexterm>logic_error::~logic_error()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>logic_error::~logic_error()</primary></indexterm>logic_error::~logic_error()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>logic_error::what() const</primary></indexterm>logic_error::what() const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::logic_error  class
is described by <XREF LINKEND="rtti-23998">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-23998">
<TITLE>typeinfo for logic_error</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for logic_error</primary></indexterm>typeinfo name for logic_error</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class logic_error</TITLE>
<PARA>
No external methods are defined for libstdcxx - Class std::logic_error
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::range_error -->
<SECT2>
<!--libgroup-->
<TITLE>Class range_error</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for range_error</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::range_error class
is described by <XREF LINKEND="cls-24243-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24243-0">
<TITLE>Primary vtable for range_error</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for range_error</primary></indexterm>typeinfo for range_error</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>range_error::~range_error()</primary></indexterm>range_error::~range_error()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>range_error::~range_error()</primary></indexterm>range_error::~range_error()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>runtime_error::what() const</primary></indexterm>runtime_error::what() const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::range_error  class
is described by <XREF LINKEND="rtti-24054">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24054">
<TITLE>typeinfo for range_error</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for range_error</primary></indexterm>typeinfo name for range_error</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class range_error</TITLE>
<PARA>
No external methods are defined for libstdcxx - Class std::range_error
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::domain_error -->
<SECT2>
<!--libgroup-->
<TITLE>Class domain_error</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for domain_error</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::domain_error class
is described by <XREF LINKEND="cls-24247-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24247-0">
<TITLE>Primary vtable for domain_error</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for domain_error</primary></indexterm>typeinfo for domain_error</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>domain_error::~domain_error()</primary></indexterm>domain_error::~domain_error()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>domain_error::~domain_error()</primary></indexterm>domain_error::~domain_error()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>logic_error::what() const</primary></indexterm>logic_error::what() const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::domain_error  class
is described by <XREF LINKEND="rtti-24058">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24058">
<TITLE>typeinfo for domain_error</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for domain_error</primary></indexterm>typeinfo name for domain_error</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class domain_error</TITLE>
<PARA>
No external methods are defined for libstdcxx - Class std::domain_error
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::length_error -->
<SECT2>
<!--libgroup-->
<TITLE>Class length_error</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for length_error</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::length_error class
is described by <XREF LINKEND="cls-24245-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24245-0">
<TITLE>Primary vtable for length_error</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for length_error</primary></indexterm>typeinfo for length_error</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>length_error::~length_error()</primary></indexterm>length_error::~length_error()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>length_error::~length_error()</primary></indexterm>length_error::~length_error()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>logic_error::what() const</primary></indexterm>logic_error::what() const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::length_error  class
is described by <XREF LINKEND="rtti-24056">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24056">
<TITLE>typeinfo for length_error</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for length_error</primary></indexterm>typeinfo name for length_error</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class length_error</TITLE>
<PARA>
No external methods are defined for libstdcxx - Class std::length_error
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::out_of_range -->
<SECT2>
<!--libgroup-->
<TITLE>Class out_of_range</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for out_of_range</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::out_of_range class
is described by <XREF LINKEND="cls-24244-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24244-0">
<TITLE>Primary vtable for out_of_range</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for out_of_range</primary></indexterm>typeinfo for out_of_range</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>out_of_range::~out_of_range()</primary></indexterm>out_of_range::~out_of_range()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>out_of_range::~out_of_range()</primary></indexterm>out_of_range::~out_of_range()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>logic_error::what() const</primary></indexterm>logic_error::what() const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::out_of_range  class
is described by <XREF LINKEND="rtti-24055">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24055">
<TITLE>typeinfo for out_of_range</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for out_of_range</primary></indexterm>typeinfo name for out_of_range</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class out_of_range</TITLE>
<PARA>
No external methods are defined for libstdcxx - Class std::out_of_range
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::bad_exception -->
<SECT2>
<!--libgroup-->
<TITLE>Class bad_exception</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for bad_exception</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::bad_exception class
is described by <XREF LINKEND="cls-24320-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24320-0">
<TITLE>Primary vtable for bad_exception</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for bad_exception</primary></indexterm>typeinfo for bad_exception</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>bad_exception::~bad_exception()</primary></indexterm>bad_exception::~bad_exception()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>bad_exception::~bad_exception()</primary></indexterm>bad_exception::~bad_exception()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>exception::what() const</primary></indexterm>exception::what() const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::bad_exception  class
is described by <XREF LINKEND="rtti-24091">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24091">
<TITLE>typeinfo for bad_exception</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for bad_exception</primary></indexterm>typeinfo name for bad_exception</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class bad_exception</TITLE>
<PARA>
No external methods are defined for libstdcxx - Class std::bad_exception
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::runtime_error -->
<SECT2>
<!--libgroup-->
<TITLE>Class runtime_error</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for runtime_error</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::runtime_error class
is described by <XREF LINKEND="cls-24312-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24312-0">
<TITLE>Primary vtable for runtime_error</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for runtime_error</primary></indexterm>typeinfo for runtime_error</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>runtime_error::~runtime_error()</primary></indexterm>runtime_error::~runtime_error()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>runtime_error::~runtime_error()</primary></indexterm>runtime_error::~runtime_error()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>runtime_error::what() const</primary></indexterm>runtime_error::what() const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::runtime_error  class
is described by <XREF LINKEND="rtti-23999">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-23999">
<TITLE>typeinfo for runtime_error</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for runtime_error</primary></indexterm>typeinfo name for runtime_error</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class runtime_error</TITLE>
<PARA>
No external methods are defined for libstdcxx - Class std::runtime_error
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::overflow_error -->
<SECT2>
<!--libgroup-->
<TITLE>Class overflow_error</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for overflow_error</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::overflow_error class
is described by <XREF LINKEND="cls-24242-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24242-0">
<TITLE>Primary vtable for overflow_error</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for overflow_error</primary></indexterm>typeinfo for overflow_error</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>overflow_error::~overflow_error()</primary></indexterm>overflow_error::~overflow_error()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>overflow_error::~overflow_error()</primary></indexterm>overflow_error::~overflow_error()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>runtime_error::what() const</primary></indexterm>runtime_error::what() const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::overflow_error  class
is described by <XREF LINKEND="rtti-24053">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24053">
<TITLE>typeinfo for overflow_error</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for overflow_error</primary></indexterm>typeinfo name for overflow_error</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class overflow_error</TITLE>
<PARA>
No external methods are defined for libstdcxx - Class std::overflow_error
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::underflow_error -->
<SECT2>
<!--libgroup-->
<TITLE>Class underflow_error</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for underflow_error</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::underflow_error class
is described by <XREF LINKEND="cls-24241-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24241-0">
<TITLE>Primary vtable for underflow_error</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for underflow_error</primary></indexterm>typeinfo for underflow_error</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>underflow_error::~underflow_error()</primary></indexterm>underflow_error::~underflow_error()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>underflow_error::~underflow_error()</primary></indexterm>underflow_error::~underflow_error()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>runtime_error::what() const</primary></indexterm>runtime_error::what() const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::underflow_error  class
is described by <XREF LINKEND="rtti-24052">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24052">
<TITLE>typeinfo for underflow_error</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for underflow_error</primary></indexterm>typeinfo name for underflow_error</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class underflow_error</TITLE>
<PARA>
No external methods are defined for libstdcxx - Class std::underflow_error
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::invalid_argument -->
<SECT2>
<!--libgroup-->
<TITLE>Class invalid_argument</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for invalid_argument</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::invalid_argument class
is described by <XREF LINKEND="cls-24246-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24246-0">
<TITLE>Primary vtable for invalid_argument</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for invalid_argument</primary></indexterm>typeinfo for invalid_argument</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>invalid_argument::~invalid_argument()</primary></indexterm>invalid_argument::~invalid_argument()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>invalid_argument::~invalid_argument()</primary></indexterm>invalid_argument::~invalid_argument()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>logic_error::what() const</primary></indexterm>logic_error::what() const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::invalid_argument  class
is described by <XREF LINKEND="rtti-24057">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24057">
<TITLE>typeinfo for invalid_argument</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for invalid_argument</primary></indexterm>typeinfo name for invalid_argument</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class invalid_argument</TITLE>
<PARA>
No external methods are defined for libstdcxx - Class std::invalid_argument
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::bad_cast -->
<SECT2>
<!--libgroup-->
<TITLE>Class bad_cast</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for bad_cast</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::bad_cast class
is described by <XREF LINKEND="cls-24324-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24324-0">
<TITLE>Primary vtable for bad_cast</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for bad_cast</primary></indexterm>typeinfo for bad_cast</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>bad_cast::~bad_cast()</primary></indexterm>bad_cast::~bad_cast()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>bad_cast::~bad_cast()</primary></indexterm>bad_cast::~bad_cast()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>exception::what() const</primary></indexterm>exception::what() const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::bad_cast  class
is described by <XREF LINKEND="rtti-24096">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24096">
<TITLE>typeinfo for bad_cast</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for bad_cast</primary></indexterm>typeinfo name for bad_cast</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class bad_cast</TITLE>
<PARA>
No external methods are defined for libstdcxx - Class std::bad_cast
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::bad_alloc -->
<SECT2>
<!--libgroup-->
<TITLE>Class bad_alloc</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for bad_alloc</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::bad_alloc class
is described by <XREF LINKEND="cls-24322-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24322-0">
<TITLE>Primary vtable for bad_alloc</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for bad_alloc</primary></indexterm>typeinfo for bad_alloc</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>bad_alloc::~bad_alloc()</primary></indexterm>bad_alloc::~bad_alloc()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>bad_alloc::~bad_alloc()</primary></indexterm>bad_alloc::~bad_alloc()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>exception::what() const</primary></indexterm>exception::what() const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::bad_alloc  class
is described by <XREF LINKEND="rtti-24092">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24092">
<TITLE>typeinfo for bad_alloc</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for bad_alloc</primary></indexterm>typeinfo name for bad_alloc</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class bad_alloc</TITLE>
<PARA>
No external methods are defined for libstdcxx - Class std::bad_alloc
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name struct __numeric_limits_base -->
<SECT2>
<!--libgroup-->
<TITLE>struct __numeric_limits_base</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for struct __numeric_limits_base</TITLE>
<PARA>
No external methods are defined for libstdcxx - struct __numeric_limits_base
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name struct numeric_limits<long double> -->
<SECT2>
<!--libgroup-->
<TITLE>struct numeric_limits&lt;long double&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for struct numeric_limits&lt;long double&gt;</TITLE>
<PARA>
No external methods are defined for libstdcxx - struct numeric_limits&lt;long double&gt;
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name struct numeric_limits<long long> -->
<SECT2>
<!--libgroup-->
<TITLE>struct numeric_limits&lt;long long&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for struct numeric_limits&lt;long long&gt;</TITLE>
<PARA>
No external methods are defined for libstdcxx - struct numeric_limits&lt;long long&gt;
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name struct numeric_limits<unsigned long long> -->
<SECT2>
<!--libgroup-->
<TITLE>struct numeric_limits&lt;unsigned long long&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for struct numeric_limits&lt;unsigned long long&gt;</TITLE>
<PARA>
No external methods are defined for libstdcxx - struct numeric_limits&lt;unsigned long long&gt;
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name struct numeric_limits<float> -->
<SECT2>
<!--libgroup-->
<TITLE>struct numeric_limits&lt;float&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for struct numeric_limits&lt;float&gt;</TITLE>
<PARA>
No external methods are defined for libstdcxx - struct numeric_limits&lt;float&gt;
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name struct numeric_limits<double> -->
<SECT2>
<!--libgroup-->
<TITLE>struct numeric_limits&lt;double&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for struct numeric_limits&lt;double&gt;</TITLE>
<PARA>
No external methods are defined for libstdcxx - struct numeric_limits&lt;double&gt;
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name struct numeric_limits<short> -->
<SECT2>
<!--libgroup-->
<TITLE>struct numeric_limits&lt;short&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for struct numeric_limits&lt;short&gt;</TITLE>
<PARA>
No external methods are defined for libstdcxx - struct numeric_limits&lt;short&gt;
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name struct numeric_limits<unsigned short> -->
<SECT2>
<!--libgroup-->
<TITLE>struct numeric_limits&lt;unsigned short&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for struct numeric_limits&lt;unsigned short&gt;</TITLE>
<PARA>
No external methods are defined for libstdcxx - struct numeric_limits&lt;unsigned short&gt;
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name struct numeric_limits<int> -->
<SECT2>
<!--libgroup-->
<TITLE>struct numeric_limits&lt;int&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for struct numeric_limits&lt;int&gt;</TITLE>
<PARA>
No external methods are defined for libstdcxx - struct numeric_limits&lt;int&gt;
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name struct numeric_limits<unsigned int> -->
<SECT2>
<!--libgroup-->
<TITLE>struct numeric_limits&lt;unsigned int&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for struct numeric_limits&lt;unsigned int&gt;</TITLE>
<PARA>
No external methods are defined for libstdcxx - struct numeric_limits&lt;unsigned int&gt;
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name struct numeric_limits<long> -->
<SECT2>
<!--libgroup-->
<TITLE>struct numeric_limits&lt;long&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for struct numeric_limits&lt;long&gt;</TITLE>
<PARA>
No external methods are defined for libstdcxx - struct numeric_limits&lt;long&gt;
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name struct numeric_limits<unsigned long> -->
<SECT2>
<!--libgroup-->
<TITLE>struct numeric_limits&lt;unsigned long&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for struct numeric_limits&lt;unsigned long&gt;</TITLE>
<PARA>
No external methods are defined for libstdcxx - struct numeric_limits&lt;unsigned long&gt;
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name struct numeric_limits<wchar_t> -->
<SECT2>
<!--libgroup-->
<TITLE>struct numeric_limits&lt;wchar_t&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for struct numeric_limits&lt;wchar_t&gt;</TITLE>
<PARA>
No external methods are defined for libstdcxx - struct numeric_limits&lt;wchar_t&gt;
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name struct numeric_limits<unsigned char> -->
<SECT2>
<!--libgroup-->
<TITLE>struct numeric_limits&lt;unsigned char&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for struct numeric_limits&lt;unsigned char&gt;</TITLE>
<PARA>
No external methods are defined for libstdcxx - struct numeric_limits&lt;unsigned char&gt;
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name struct numeric_limits<signed char> -->
<SECT2>
<!--libgroup-->
<TITLE>struct numeric_limits&lt;signed char&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for struct numeric_limits&lt;signed char&gt;</TITLE>
<PARA>
No external methods are defined for libstdcxx - struct numeric_limits&lt;signed char&gt;
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name struct numeric_limits<char> -->
<SECT2>
<!--libgroup-->
<TITLE>struct numeric_limits&lt;char&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for struct numeric_limits&lt;char&gt;</TITLE>
<PARA>
No external methods are defined for libstdcxx - struct numeric_limits&lt;char&gt;
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name struct numeric_limits<bool> -->
<SECT2>
<!--libgroup-->
<TITLE>struct numeric_limits&lt;bool&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for struct numeric_limits&lt;bool&gt;</TITLE>
<PARA>
No external methods are defined for libstdcxx - struct numeric_limits&lt;bool&gt;
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::ctype_base -->
<SECT2>
<!--libgroup-->
<TITLE>Class ctype_base</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for ctype_base</TITLE>
<PARA>
</PARA>
<PARA>
The Run Time Type Information for the std::ctype_base  class
is described by <XREF LINKEND="rtti-24006">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24006">
<TITLE>typeinfo for ctype_base</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__class_type_info</primary></indexterm>vtable for __cxxabiv1::__class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for ctype_base</primary></indexterm>typeinfo name for ctype_base</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class ctype_base</TITLE>
<PARA>
No external methods are defined for libstdcxx - Class std::ctype_base
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::__ctype_abstract_base<char> -->
<SECT2>
<!--libgroup-->
<TITLE>Class __ctype_abstract_base&lt;char&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for __ctype_abstract_base&lt;char&gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::__ctype_abstract_base&lt;char&gt; class
is described by <XREF LINKEND="cls-24301-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24301-0">
<TITLE>Primary vtable for __ctype_abstract_base&lt;char&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for __ctype_abstract_base&lt;char&gt;</primary></indexterm>typeinfo for __ctype_abstract_base&lt;char&gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary></primary></indexterm></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary></primary></indexterm></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;11&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;12&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;13&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class __ctype_abstract_base&lt;char&gt;</TITLE>
<PARA>
No external methods are defined for libstdcxx - Class std::__ctype_abstract_base&lt;char&gt;
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::__ctype_abstract_base<wchar_t> -->
<SECT2>
<!--libgroup-->
<TITLE>Class __ctype_abstract_base&lt;wchar_t&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for __ctype_abstract_base&lt;wchar_t&gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::__ctype_abstract_base&lt;wchar_t&gt; class
is described by <XREF LINKEND="cls-24300-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24300-0">
<TITLE>Primary vtable for __ctype_abstract_base&lt;wchar_t&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for __ctype_abstract_base&lt;wchar_t&gt;</primary></indexterm>typeinfo for __ctype_abstract_base&lt;wchar_t&gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary></primary></indexterm></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary></primary></indexterm></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;11&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;12&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;13&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class __ctype_abstract_base&lt;wchar_t&gt;</TITLE>
<PARA>
No external methods are defined for libstdcxx - Class std::__ctype_abstract_base&lt;wchar_t&gt;
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::ctype<char> -->
<SECT2>
<!--libgroup-->
<TITLE>Class ctype&lt;char&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for ctype&lt;char&gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::ctype&lt;char&gt; class
is described by <XREF LINKEND="cls-24230-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24230-0">
<TITLE>Primary vtable for ctype&lt;char&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for ctype&lt;char&gt;</primary></indexterm>typeinfo for ctype&lt;char&gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;char&gt;::~ctype()</primary></indexterm>ctype&lt;char&gt;::~ctype()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;char&gt;::~ctype()</primary></indexterm>ctype&lt;char&gt;::~ctype()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;char&gt;::do_toupper(char) const</primary></indexterm>ctype&lt;char&gt;::do_toupper(char) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;char&gt;::do_toupper(char*, char const*) const</primary></indexterm>ctype&lt;char&gt;::do_toupper(char*, char const*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;char&gt;::do_tolower(char) const</primary></indexterm>ctype&lt;char&gt;::do_tolower(char) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;char&gt;::do_tolower(char*, char const*) const</primary></indexterm>ctype&lt;char&gt;::do_tolower(char*, char const*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;char&gt;::do_widen(char) const</primary></indexterm>ctype&lt;char&gt;::do_widen(char) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;char&gt;::do_widen(char const*, char const*, char*) const</primary></indexterm>ctype&lt;char&gt;::do_widen(char const*, char const*, char*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;char&gt;::do_narrow(char, char) const</primary></indexterm>ctype&lt;char&gt;::do_narrow(char, char) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;char&gt;::do_narrow(char const*, char const*, char, char*) const</primary></indexterm>ctype&lt;char&gt;::do_narrow(char const*, char const*, char, char*) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class ctype&lt;char&gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::ctype&lt;char&gt; specified in <XREF linkend="tbl-libstdcxx-clasw-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clasw-ints">
<TITLE>libstdcxx - Class ctype&lt;char&gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;char&gt;::ctype(__locale_struct*, unsigned short const*, bool, unsigned long)</primary></indexterm>ctype&lt;char&gt;::ctype(__locale_struct*, unsigned short const*, bool, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;char&gt;::ctype(unsigned short const*, bool, unsigned long)</primary></indexterm>ctype&lt;char&gt;::ctype(unsigned short const*, bool, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;char&gt;::ctype(__locale_struct*, unsigned short const*, bool, unsigned long)</primary></indexterm>ctype&lt;char&gt;::ctype(__locale_struct*, unsigned short const*, bool, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;char&gt;::ctype(unsigned short const*, bool, unsigned long)</primary></indexterm>ctype&lt;char&gt;::ctype(unsigned short const*, bool, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::ctype<wchar_t> -->
<SECT2>
<!--libgroup-->
<TITLE>Class ctype&lt;wchar_t&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for ctype&lt;wchar_t&gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::ctype&lt;wchar_t&gt; class
is described by <XREF LINKEND="cls-24229-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24229-0">
<TITLE>Primary vtable for ctype&lt;wchar_t&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for ctype&lt;wchar_t&gt;</primary></indexterm>typeinfo for ctype&lt;wchar_t&gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;wchar_t&gt;::~ctype()</primary></indexterm>ctype&lt;wchar_t&gt;::~ctype()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;wchar_t&gt;::~ctype()</primary></indexterm>ctype&lt;wchar_t&gt;::~ctype()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;wchar_t&gt;::do_is(unsigned short, wchar_t) const</primary></indexterm>ctype&lt;wchar_t&gt;::do_is(unsigned short, wchar_t) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;wchar_t&gt;::do_is(wchar_t const*, wchar_t const*, unsigned short*) const</primary></indexterm>ctype&lt;wchar_t&gt;::do_is(wchar_t const*, wchar_t const*, unsigned short*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;wchar_t&gt;::do_scan_is(unsigned short, wchar_t const*, wchar_t const*) const</primary></indexterm>ctype&lt;wchar_t&gt;::do_scan_is(unsigned short, wchar_t const*, wchar_t const*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;wchar_t&gt;::do_scan_not(unsigned short, wchar_t const*, wchar_t const*) const</primary></indexterm>ctype&lt;wchar_t&gt;::do_scan_not(unsigned short, wchar_t const*, wchar_t const*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;wchar_t&gt;::do_toupper(wchar_t) const</primary></indexterm>ctype&lt;wchar_t&gt;::do_toupper(wchar_t) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;wchar_t&gt;::do_toupper(wchar_t*, wchar_t const*) const</primary></indexterm>ctype&lt;wchar_t&gt;::do_toupper(wchar_t*, wchar_t const*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;wchar_t&gt;::do_tolower(wchar_t) const</primary></indexterm>ctype&lt;wchar_t&gt;::do_tolower(wchar_t) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;wchar_t&gt;::do_tolower(wchar_t*, wchar_t const*) const</primary></indexterm>ctype&lt;wchar_t&gt;::do_tolower(wchar_t*, wchar_t const*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;wchar_t&gt;::do_widen(char) const</primary></indexterm>ctype&lt;wchar_t&gt;::do_widen(char) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;11&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;wchar_t&gt;::do_widen(char const*, char const*, wchar_t*) const</primary></indexterm>ctype&lt;wchar_t&gt;::do_widen(char const*, char const*, wchar_t*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;12&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;wchar_t&gt;::do_narrow(wchar_t, char) const</primary></indexterm>ctype&lt;wchar_t&gt;::do_narrow(wchar_t, char) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;13&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;wchar_t&gt;::do_narrow(wchar_t const*, wchar_t const*, char, char*) const</primary></indexterm>ctype&lt;wchar_t&gt;::do_narrow(wchar_t const*, wchar_t const*, char, char*) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::ctype&lt;wchar_t&gt;  class
is described by <XREF LINKEND="rtti-24008">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24008">
<TITLE>typeinfo for ctype&lt;wchar_t&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for ctype&lt;wchar_t&gt;</primary></indexterm>typeinfo name for ctype&lt;wchar_t&gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class ctype&lt;wchar_t&gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::ctype&lt;wchar_t&gt; specified in <XREF linkend="tbl-libstdcxx-clasx-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clasx-ints">
<TITLE>libstdcxx - Class ctype&lt;wchar_t&gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;wchar_t&gt;::ctype(__locale_struct*, unsigned long)</primary></indexterm>ctype&lt;wchar_t&gt;::ctype(__locale_struct*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;wchar_t&gt;::ctype(unsigned long)</primary></indexterm>ctype&lt;wchar_t&gt;::ctype(unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;wchar_t&gt;::ctype(__locale_struct*, unsigned long)</primary></indexterm>ctype&lt;wchar_t&gt;::ctype(__locale_struct*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;wchar_t&gt;::ctype(unsigned long)</primary></indexterm>ctype&lt;wchar_t&gt;::ctype(unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::ctype_byname<char> -->
<SECT2>
<!--libgroup-->
<TITLE>Class ctype_byname&lt;char&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for ctype_byname&lt;char&gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::ctype_byname&lt;char&gt; class
is described by <XREF LINKEND="cls-24299-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24299-0">
<TITLE>Primary vtable for ctype_byname&lt;char&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for ctype_byname&lt;char&gt;</primary></indexterm>typeinfo for ctype_byname&lt;char&gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype_byname&lt;char&gt;::~ctype_byname()</primary></indexterm>ctype_byname&lt;char&gt;::~ctype_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype_byname&lt;char&gt;::~ctype_byname()</primary></indexterm>ctype_byname&lt;char&gt;::~ctype_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;char&gt;::do_toupper(char) const</primary></indexterm>ctype&lt;char&gt;::do_toupper(char) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;char&gt;::do_toupper(char*, char const*) const</primary></indexterm>ctype&lt;char&gt;::do_toupper(char*, char const*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;char&gt;::do_tolower(char) const</primary></indexterm>ctype&lt;char&gt;::do_tolower(char) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;char&gt;::do_tolower(char*, char const*) const</primary></indexterm>ctype&lt;char&gt;::do_tolower(char*, char const*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;char&gt;::do_widen(char) const</primary></indexterm>ctype&lt;char&gt;::do_widen(char) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;char&gt;::do_widen(char const*, char const*, char*) const</primary></indexterm>ctype&lt;char&gt;::do_widen(char const*, char const*, char*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;char&gt;::do_narrow(char, char) const</primary></indexterm>ctype&lt;char&gt;::do_narrow(char, char) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;char&gt;::do_narrow(char const*, char const*, char, char*) const</primary></indexterm>ctype&lt;char&gt;::do_narrow(char const*, char const*, char, char*) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::ctype_byname&lt;char&gt;  class
is described by <XREF LINKEND="rtti-24087">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24087">
<TITLE>typeinfo for ctype_byname&lt;char&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for ctype_byname&lt;char&gt;</primary></indexterm>typeinfo name for ctype_byname&lt;char&gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class ctype_byname&lt;char&gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::ctype_byname&lt;char&gt; specified in <XREF linkend="tbl-libstdcxx-clasy-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clasy-ints">
<TITLE>libstdcxx - Class ctype_byname&lt;char&gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ctype_byname&lt;char&gt;::ctype_byname(char const*, unsigned long)</primary></indexterm>ctype_byname&lt;char&gt;::ctype_byname(char const*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ctype_byname&lt;char&gt;::ctype_byname(char const*, unsigned long)</primary></indexterm>ctype_byname&lt;char&gt;::ctype_byname(char const*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::ctype_byname<wchar_t> -->
<SECT2>
<!--libgroup-->
<TITLE>Class ctype_byname&lt;wchar_t&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for Class ctype_byname&lt;wchar_t&gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::ctype_byname&lt;wchar_t&gt; specified in <XREF linkend="tbl-libstdcxx-clasz-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clasz-ints">
<TITLE>libstdcxx - Class ctype_byname&lt;wchar_t&gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ctype_byname&lt;wchar_t&gt;::ctype_byname(char const*, unsigned long)</primary></indexterm>ctype_byname&lt;wchar_t&gt;::ctype_byname(char const*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ctype_byname&lt;wchar_t&gt;::ctype_byname(char const*, unsigned long)</primary></indexterm>ctype_byname&lt;wchar_t&gt;::ctype_byname(char const*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::basic_string<char, std::char_traits<char>, std::allocator<char> > -->
<SECT2>
<!--libgroup-->
<TITLE>Class basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for Class basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clata-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clata-ints">
<TITLE>libstdcxx - Class basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::find_last_of(char const*, unsigned long) const</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::find_last_of(char const*, unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::find_last_of(char const*, unsigned long, unsigned long) const</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::find_last_of(char const*, unsigned long, unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::find_last_of(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, unsigned long) const</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::find_last_of(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::find_last_of(char, unsigned long) const</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::find_last_of(char, unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::find_first_of(char const*, unsigned long) const</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::find_first_of(char const*, unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::find_first_of(char const*, unsigned long, unsigned long) const</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::find_first_of(char const*, unsigned long, unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::find_first_of(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, unsigned long) const</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::find_first_of(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::find_first_of(char, unsigned long) const</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::find_first_of(char, unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::find_last_not_of(char const*, unsigned long) const</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::find_last_not_of(char const*, unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::find_last_not_of(char const*, unsigned long, unsigned long) const</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::find_last_not_of(char const*, unsigned long, unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::find_last_not_of(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, unsigned long) const</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::find_last_not_of(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::find_last_not_of(char, unsigned long) const</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::find_last_not_of(char, unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::find_first_not_of(char const*, unsigned long) const</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::find_first_not_of(char const*, unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::find_first_not_of(char const*, unsigned long, unsigned long) const</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::find_first_not_of(char const*, unsigned long, unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::find_first_not_of(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, unsigned long) const</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::find_first_not_of(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::find_first_not_of(char, unsigned long) const</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::find_first_not_of(char, unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::at(unsigned long) const</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::at(unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::copy(char*, unsigned long, unsigned long) const</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::copy(char*, unsigned long, unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::find(char const*, unsigned long) const</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::find(char const*, unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::find(char const*, unsigned long, unsigned long) const</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::find(char const*, unsigned long, unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::find(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, unsigned long) const</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::find(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::find(char, unsigned long) const</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::find(char, unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::rfind(char const*, unsigned long) const</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::rfind(char const*, unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::rfind(char const*, unsigned long, unsigned long) const</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::rfind(char const*, unsigned long, unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::rfind(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, unsigned long) const</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::rfind(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::rfind(char, unsigned long) const</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::rfind(char, unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::substr(unsigned long, unsigned long) const</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::substr(unsigned long, unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::compare(unsigned long, unsigned long, char const*) const</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::compare(unsigned long, unsigned long, char const*) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::compare(unsigned long, unsigned long, char const*, unsigned long) const</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::compare(unsigned long, unsigned long, char const*, unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::compare(unsigned long, unsigned long, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&) const</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::compare(unsigned long, unsigned long, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::compare(unsigned long, unsigned long, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, unsigned long, unsigned long) const</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::compare(unsigned long, unsigned long, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, unsigned long, unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_M_check(unsigned long, char const*) const</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_M_check(unsigned long, char const*) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_M_limit(unsigned long, unsigned long) const</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_M_limit(unsigned long, unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::operator&lsqb;](unsigned long) const</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::operator&lsqb;](unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_S_construct(unsigned long, char, allocator&lt;char&gt; const&)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_S_construct(unsigned long, char, allocator&lt;char&gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_M_replace_safe(unsigned long, unsigned long, char const*, unsigned long)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_M_replace_safe(unsigned long, unsigned long, char const*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::at(unsigned long)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::at(unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_Rep::_M_clone(allocator&lt;char&gt; const&, unsigned long)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_Rep::_M_clone(allocator&lt;char&gt; const&, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_Rep::_S_create(unsigned long, unsigned long, allocator&lt;char&gt; const&)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_Rep::_S_create(unsigned long, unsigned long, allocator&lt;char&gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::erase(unsigned long, unsigned long)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::erase(unsigned long, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::append(char const*, unsigned long)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::append(char const*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::append(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, unsigned long, unsigned long)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::append(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, unsigned long, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::append(unsigned long, char)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::append(unsigned long, char)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::assign(char const*, unsigned long)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::assign(char const*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::assign(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, unsigned long, unsigned long)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::assign(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, unsigned long, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::assign(unsigned long, char)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::assign(unsigned long, char)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::insert(__gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt;, unsigned long, char)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::insert(__gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt;, unsigned long, char)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::insert(unsigned long, char const*)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::insert(unsigned long, char const*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::insert(unsigned long, char const*, unsigned long)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::insert(unsigned long, char const*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::insert(unsigned long, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::insert(unsigned long, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::insert(unsigned long, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, unsigned long, unsigned long)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::insert(unsigned long, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, unsigned long, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::insert(unsigned long, unsigned long, char)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::insert(unsigned long, unsigned long, char)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::resize(unsigned long)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::resize(unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::resize(unsigned long, char)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::resize(unsigned long, char)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::replace(__gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt;, char const*, unsigned long)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::replace(__gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt;, char const*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::replace(__gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt;, unsigned long, char)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::replace(__gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt;, unsigned long, char)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::replace(unsigned long, unsigned long, char const*)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::replace(unsigned long, unsigned long, char const*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::replace(unsigned long, unsigned long, char const*, unsigned long)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::replace(unsigned long, unsigned long, char const*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::replace(unsigned long, unsigned long, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::replace(unsigned long, unsigned long, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::replace(unsigned long, unsigned long, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, unsigned long, unsigned long)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::replace(unsigned long, unsigned long, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, unsigned long, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::replace(unsigned long, unsigned long, unsigned long, char)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::replace(unsigned long, unsigned long, unsigned long, char)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::reserve(unsigned long)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::reserve(unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_M_mutate(unsigned long, unsigned long, unsigned long)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_M_mutate(unsigned long, unsigned long, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_string(char const*, unsigned long, allocator&lt;char&gt; const&)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_string(char const*, unsigned long, allocator&lt;char&gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_string(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, unsigned long, unsigned long)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_string(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, unsigned long, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_string(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, unsigned long, unsigned long, allocator&lt;char&gt; const&)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_string(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, unsigned long, unsigned long, allocator&lt;char&gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_string(unsigned long, char, allocator&lt;char&gt; const&)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_string(unsigned long, char, allocator&lt;char&gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_string(char const*, unsigned long, allocator&lt;char&gt; const&)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_string(char const*, unsigned long, allocator&lt;char&gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_string(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, unsigned long, unsigned long)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_string(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, unsigned long, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_string(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, unsigned long, unsigned long, allocator&lt;char&gt; const&)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_string(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, unsigned long, unsigned long, allocator&lt;char&gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_string(unsigned long, char, allocator&lt;char&gt; const&)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_string(unsigned long, char, allocator&lt;char&gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::operator&lsqb;](unsigned long)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::operator&lsqb;](unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > -->
<SECT2>
<!--libgroup-->
<TITLE>Class basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for Class basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::basic_string&lt;wchar_t, std::char_traits&lt;wchar_t&gt;, std::allocator&lt;wchar_t&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clatb-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clatb-ints">
<TITLE>libstdcxx - Class basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::find_last_of(wchar_t const*, unsigned long) const</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::find_last_of(wchar_t const*, unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::find_last_of(wchar_t const*, unsigned long, unsigned long) const</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::find_last_of(wchar_t const*, unsigned long, unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::find_last_of(basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&, unsigned long) const</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::find_last_of(basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&, unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::find_last_of(wchar_t, unsigned long) const</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::find_last_of(wchar_t, unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::find_first_of(wchar_t const*, unsigned long) const</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::find_first_of(wchar_t const*, unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::find_first_of(wchar_t const*, unsigned long, unsigned long) const</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::find_first_of(wchar_t const*, unsigned long, unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::find_first_of(basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&, unsigned long) const</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::find_first_of(basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&, unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::find_first_of(wchar_t, unsigned long) const</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::find_first_of(wchar_t, unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::find_last_not_of(wchar_t const*, unsigned long) const</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::find_last_not_of(wchar_t const*, unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::find_last_not_of(wchar_t const*, unsigned long, unsigned long) const</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::find_last_not_of(wchar_t const*, unsigned long, unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::find_last_not_of(basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&, unsigned long) const</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::find_last_not_of(basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&, unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::find_last_not_of(wchar_t, unsigned long) const</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::find_last_not_of(wchar_t, unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::find_first_not_of(wchar_t const*, unsigned long) const</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::find_first_not_of(wchar_t const*, unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::find_first_not_of(wchar_t const*, unsigned long, unsigned long) const</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::find_first_not_of(wchar_t const*, unsigned long, unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::find_first_not_of(basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&, unsigned long) const</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::find_first_not_of(basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&, unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::find_first_not_of(wchar_t, unsigned long) const</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::find_first_not_of(wchar_t, unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::at(unsigned long) const</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::at(unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::copy(wchar_t*, unsigned long, unsigned long) const</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::copy(wchar_t*, unsigned long, unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::find(wchar_t const*, unsigned long) const</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::find(wchar_t const*, unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::find(wchar_t const*, unsigned long, unsigned long) const</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::find(wchar_t const*, unsigned long, unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::find(basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&, unsigned long) const</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::find(basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&, unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::find(wchar_t, unsigned long) const</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::find(wchar_t, unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::rfind(wchar_t const*, unsigned long) const</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::rfind(wchar_t const*, unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::rfind(wchar_t const*, unsigned long, unsigned long) const</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::rfind(wchar_t const*, unsigned long, unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::rfind(basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&, unsigned long) const</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::rfind(basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&, unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::rfind(wchar_t, unsigned long) const</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::rfind(wchar_t, unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::substr(unsigned long, unsigned long) const</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::substr(unsigned long, unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::compare(unsigned long, unsigned long, wchar_t const*) const</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::compare(unsigned long, unsigned long, wchar_t const*) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::compare(unsigned long, unsigned long, wchar_t const*, unsigned long) const</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::compare(unsigned long, unsigned long, wchar_t const*, unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::compare(unsigned long, unsigned long, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&) const</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::compare(unsigned long, unsigned long, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::compare(unsigned long, unsigned long, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&, unsigned long, unsigned long) const</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::compare(unsigned long, unsigned long, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&, unsigned long, unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_M_check(unsigned long, char const*) const</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_M_check(unsigned long, char const*) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_M_limit(unsigned long, unsigned long) const</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_M_limit(unsigned long, unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::operator&lsqb;](unsigned long) const</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::operator&lsqb;](unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_S_construct(unsigned long, wchar_t, allocator&lt;wchar_t&gt; const&)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_S_construct(unsigned long, wchar_t, allocator&lt;wchar_t&gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_M_replace_aux(unsigned long, unsigned long, unsigned long, wchar_t)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_M_replace_aux(unsigned long, unsigned long, unsigned long, wchar_t)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_M_replace_safe(unsigned long, unsigned long, wchar_t const*, unsigned long)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_M_replace_safe(unsigned long, unsigned long, wchar_t const*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::at(unsigned long)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::at(unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_Rep::_M_clone(allocator&lt;wchar_t&gt; const&, unsigned long)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_Rep::_M_clone(allocator&lt;wchar_t&gt; const&, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_Rep::_S_create(unsigned long, unsigned long, allocator&lt;wchar_t&gt; const&)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_Rep::_S_create(unsigned long, unsigned long, allocator&lt;wchar_t&gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::erase(unsigned long, unsigned long)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::erase(unsigned long, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::append(wchar_t const*, unsigned long)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::append(wchar_t const*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::append(basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&, unsigned long, unsigned long)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::append(basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&, unsigned long, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::append(unsigned long, wchar_t)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::append(unsigned long, wchar_t)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::assign(wchar_t const*, unsigned long)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::assign(wchar_t const*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::assign(basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&, unsigned long, unsigned long)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::assign(basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&, unsigned long, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::assign(unsigned long, wchar_t)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::assign(unsigned long, wchar_t)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::insert(__gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt;, unsigned long, wchar_t)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::insert(__gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt;, unsigned long, wchar_t)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::insert(unsigned long, wchar_t const*)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::insert(unsigned long, wchar_t const*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::insert(unsigned long, wchar_t const*, unsigned long)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::insert(unsigned long, wchar_t const*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::insert(unsigned long, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::insert(unsigned long, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::insert(unsigned long, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&, unsigned long, unsigned long)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::insert(unsigned long, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&, unsigned long, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::insert(unsigned long, unsigned long, wchar_t)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::insert(unsigned long, unsigned long, wchar_t)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::resize(unsigned long)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::resize(unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::resize(unsigned long, wchar_t)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::resize(unsigned long, wchar_t)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::replace(__gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt;, wchar_t const*, unsigned long)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::replace(__gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt;, wchar_t const*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::replace(__gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt;, unsigned long, wchar_t)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::replace(__gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt;, unsigned long, wchar_t)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::replace(unsigned long, unsigned long, wchar_t const*)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::replace(unsigned long, unsigned long, wchar_t const*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::replace(unsigned long, unsigned long, wchar_t const*, unsigned long)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::replace(unsigned long, unsigned long, wchar_t const*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::replace(unsigned long, unsigned long, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::replace(unsigned long, unsigned long, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::replace(unsigned long, unsigned long, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&, unsigned long, unsigned long)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::replace(unsigned long, unsigned long, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&, unsigned long, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::replace(unsigned long, unsigned long, unsigned long, wchar_t)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::replace(unsigned long, unsigned long, unsigned long, wchar_t)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::reserve(unsigned long)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::reserve(unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_M_mutate(unsigned long, unsigned long, unsigned long)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_M_mutate(unsigned long, unsigned long, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_string(wchar_t const*, unsigned long, allocator&lt;wchar_t&gt; const&)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_string(wchar_t const*, unsigned long, allocator&lt;wchar_t&gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_string(basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&, unsigned long, unsigned long)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_string(basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&, unsigned long, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_string(basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&, unsigned long, unsigned long, allocator&lt;wchar_t&gt; const&)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_string(basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&, unsigned long, unsigned long, allocator&lt;wchar_t&gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_string(unsigned long, wchar_t, allocator&lt;wchar_t&gt; const&)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_string(unsigned long, wchar_t, allocator&lt;wchar_t&gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_string(wchar_t const*, unsigned long, allocator&lt;wchar_t&gt; const&)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_string(wchar_t const*, unsigned long, allocator&lt;wchar_t&gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_string(basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&, unsigned long, unsigned long)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_string(basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&, unsigned long, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_string(basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&, unsigned long, unsigned long, allocator&lt;wchar_t&gt; const&)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_string(basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&, unsigned long, unsigned long, allocator&lt;wchar_t&gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_string(unsigned long, wchar_t, allocator&lt;wchar_t&gt; const&)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_string(unsigned long, wchar_t, allocator&lt;wchar_t&gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::operator&lsqb;](unsigned long)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::operator&lsqb;](unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> > -->
<SECT2>
<!--libgroup-->
<TITLE>Class basic_stringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for basic_stringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::basic_stringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; class
is described by <XREF LINKEND="cls-24308-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24308-0">
<TITLE>Primary vtable for basic_stringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>104</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_stringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</primary></indexterm>typeinfo for basic_stringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_stringstream()</primary></indexterm>basic_stringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_stringstream()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_stringstream()</primary></indexterm>basic_stringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_stringstream()</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<!--classdata-->
<!--table start-->
<TABLE id="cls-24308-1">
<TITLE>Secondary vtable for basic_stringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>-16</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>88</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_stringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</primary></indexterm>typeinfo for basic_stringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>non-virtual thunk to basic_stringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_stringstream()</primary></indexterm>non-virtual thunk to basic_stringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_stringstream()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>non-virtual thunk to basic_stringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_stringstream()</primary></indexterm>non-virtual thunk to basic_stringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_stringstream()</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<!--classdata-->
<!--table start-->
<TABLE id="cls-24308-2">
<TITLE>Secondary vtable for basic_stringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>-104</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>-104</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_stringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</primary></indexterm>typeinfo for basic_stringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_stringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_stringstream()</primary></indexterm>virtual thunk to basic_stringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_stringstream()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_stringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_stringstream()</primary></indexterm>virtual thunk to basic_stringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_stringstream()</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The VTT for the std::basic_stringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;  class
is described by <XREF LINKEND="vtt-24742">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="vtt-24742">
<TITLE>VTT for basic_stringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>VTT Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>_ZTTSt18basic_stringstreamIcSt11char_traitsIcESaIcEE</primary></indexterm>_ZTTSt18basic_stringstreamIcSt11char_traitsIcESaIcEE</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Number of Entries</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>10</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class basic_stringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::basic_stringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clatc-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clatc-ints">
<TITLE>libstdcxx - Class basic_stringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>non-virtual thunk to basic_stringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_stringstream()</primary></indexterm>non-virtual thunk to basic_stringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_stringstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>non-virtual thunk to basic_stringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_stringstream()</primary></indexterm>non-virtual thunk to basic_stringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_stringstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_stringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_stringstream()</primary></indexterm>virtual thunk to basic_stringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_stringstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_stringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_stringstream()</primary></indexterm>virtual thunk to basic_stringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_stringstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > -->
<SECT2>
<!--libgroup-->
<TITLE>Class basic_stringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for basic_stringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::basic_stringstream&lt;wchar_t, std::char_traits&lt;wchar_t&gt;, std::allocator&lt;wchar_t&gt; &gt; class
is described by <XREF LINKEND="cls-24304-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24304-0">
<TITLE>Primary vtable for basic_stringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>104</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_stringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</primary></indexterm>typeinfo for basic_stringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_stringstream()</primary></indexterm>basic_stringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_stringstream()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_stringstream()</primary></indexterm>basic_stringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_stringstream()</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<!--classdata-->
<!--table start-->
<TABLE id="cls-24304-1">
<TITLE>Secondary vtable for basic_stringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>-16</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>88</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_stringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</primary></indexterm>typeinfo for basic_stringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>non-virtual thunk to basic_stringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_stringstream()</primary></indexterm>non-virtual thunk to basic_stringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_stringstream()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>non-virtual thunk to basic_stringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_stringstream()</primary></indexterm>non-virtual thunk to basic_stringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_stringstream()</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<!--classdata-->
<!--table start-->
<TABLE id="cls-24304-2">
<TITLE>Secondary vtable for basic_stringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>-104</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>-104</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_stringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</primary></indexterm>typeinfo for basic_stringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_stringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_stringstream()</primary></indexterm>virtual thunk to basic_stringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_stringstream()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_stringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_stringstream()</primary></indexterm>virtual thunk to basic_stringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_stringstream()</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The VTT for the std::basic_stringstream&lt;wchar_t, std::char_traits&lt;wchar_t&gt;, std::allocator&lt;wchar_t&gt; &gt;  class
is described by <XREF LINKEND="vtt-24743">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="vtt-24743">
<TITLE>VTT for basic_stringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>VTT Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>_ZTTSt18basic_stringstreamIwSt11char_traitsIwESaIwEE</primary></indexterm>_ZTTSt18basic_stringstreamIwSt11char_traitsIwESaIwEE</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Number of Entries</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>10</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class basic_stringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::basic_stringstream&lt;wchar_t, std::char_traits&lt;wchar_t&gt;, std::allocator&lt;wchar_t&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clatd-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clatd-ints">
<TITLE>libstdcxx - Class basic_stringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>non-virtual thunk to basic_stringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_stringstream()</primary></indexterm>non-virtual thunk to basic_stringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_stringstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>non-virtual thunk to basic_stringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_stringstream()</primary></indexterm>non-virtual thunk to basic_stringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_stringstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_stringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_stringstream()</primary></indexterm>virtual thunk to basic_stringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_stringstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_stringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_stringstream()</primary></indexterm>virtual thunk to basic_stringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_stringstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::basic_istringstream<char, std::char_traits<char>, std::allocator<char> > -->
<SECT2>
<!--libgroup-->
<TITLE>Class basic_istringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for basic_istringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::basic_istringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; class
is described by <XREF LINKEND="cls-24310-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24310-0">
<TITLE>Primary vtable for basic_istringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>96</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_istringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</primary></indexterm>typeinfo for basic_istringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_istringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_istringstream()</primary></indexterm>basic_istringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_istringstream()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_istringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_istringstream()</primary></indexterm>basic_istringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_istringstream()</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<!--classdata-->
<!--table start-->
<TABLE id="cls-24310-1">
<TITLE>Secondary vtable for basic_istringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>-96</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>-96</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_istringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</primary></indexterm>typeinfo for basic_istringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_istringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_istringstream()</primary></indexterm>virtual thunk to basic_istringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_istringstream()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_istringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_istringstream()</primary></indexterm>virtual thunk to basic_istringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_istringstream()</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The VTT for the std::basic_istringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;  class
is described by <XREF LINKEND="vtt-24394">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="vtt-24394">
<TITLE>VTT for basic_istringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>VTT Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>_ZTTSt19basic_istringstreamIcSt11char_traitsIcESaIcEE</primary></indexterm>_ZTTSt19basic_istringstreamIcSt11char_traitsIcESaIcEE</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Number of Entries</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>4</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class basic_istringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::basic_istringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clate-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clate-ints">
<TITLE>libstdcxx - Class basic_istringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_istringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_istringstream()</primary></indexterm>virtual thunk to basic_istringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_istringstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_istringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_istringstream()</primary></indexterm>virtual thunk to basic_istringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_istringstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > -->
<SECT2>
<!--libgroup-->
<TITLE>Class basic_istringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for basic_istringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::basic_istringstream&lt;wchar_t, std::char_traits&lt;wchar_t&gt;, std::allocator&lt;wchar_t&gt; &gt; class
is described by <XREF LINKEND="cls-24306-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24306-0">
<TITLE>Primary vtable for basic_istringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>96</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_istringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</primary></indexterm>typeinfo for basic_istringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_istringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_istringstream()</primary></indexterm>basic_istringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_istringstream()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_istringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_istringstream()</primary></indexterm>basic_istringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_istringstream()</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<!--classdata-->
<!--table start-->
<TABLE id="cls-24306-1">
<TITLE>Secondary vtable for basic_istringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>-96</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>-96</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_istringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</primary></indexterm>typeinfo for basic_istringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_istringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_istringstream()</primary></indexterm>virtual thunk to basic_istringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_istringstream()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_istringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_istringstream()</primary></indexterm>virtual thunk to basic_istringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_istringstream()</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The VTT for the std::basic_istringstream&lt;wchar_t, std::char_traits&lt;wchar_t&gt;, std::allocator&lt;wchar_t&gt; &gt;  class
is described by <XREF LINKEND="vtt-24395">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="vtt-24395">
<TITLE>VTT for basic_istringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>VTT Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>_ZTTSt19basic_istringstreamIwSt11char_traitsIwESaIwEE</primary></indexterm>_ZTTSt19basic_istringstreamIwSt11char_traitsIwESaIwEE</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Number of Entries</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>4</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class basic_istringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::basic_istringstream&lt;wchar_t, std::char_traits&lt;wchar_t&gt;, std::allocator&lt;wchar_t&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clatf-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clatf-ints">
<TITLE>libstdcxx - Class basic_istringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_istringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_istringstream()</primary></indexterm>virtual thunk to basic_istringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_istringstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_istringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_istringstream()</primary></indexterm>virtual thunk to basic_istringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_istringstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> > -->
<SECT2>
<!--libgroup-->
<TITLE>Class basic_ostringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for basic_ostringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; class
is described by <XREF LINKEND="cls-24309-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24309-0">
<TITLE>Primary vtable for basic_ostringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>88</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_ostringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</primary></indexterm>typeinfo for basic_ostringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_ostringstream()</primary></indexterm>basic_ostringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_ostringstream()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_ostringstream()</primary></indexterm>basic_ostringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_ostringstream()</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<!--classdata-->
<!--table start-->
<TABLE id="cls-24309-1">
<TITLE>Secondary vtable for basic_ostringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>-88</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>-88</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_ostringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</primary></indexterm>typeinfo for basic_ostringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_ostringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_ostringstream()</primary></indexterm>virtual thunk to basic_ostringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_ostringstream()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_ostringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_ostringstream()</primary></indexterm>virtual thunk to basic_ostringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_ostringstream()</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The VTT for the std::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;  class
is described by <XREF LINKEND="vtt-24396">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="vtt-24396">
<TITLE>VTT for basic_ostringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>VTT Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>_ZTTSt19basic_ostringstreamIcSt11char_traitsIcESaIcEE</primary></indexterm>_ZTTSt19basic_ostringstreamIcSt11char_traitsIcESaIcEE</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Number of Entries</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>4</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class basic_ostringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clatg-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clatg-ints">
<TITLE>libstdcxx - Class basic_ostringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_ostringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_ostringstream()</primary></indexterm>virtual thunk to basic_ostringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_ostringstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_ostringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_ostringstream()</primary></indexterm>virtual thunk to basic_ostringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_ostringstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > -->
<SECT2>
<!--libgroup-->
<TITLE>Class basic_ostringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for basic_ostringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::basic_ostringstream&lt;wchar_t, std::char_traits&lt;wchar_t&gt;, std::allocator&lt;wchar_t&gt; &gt; class
is described by <XREF LINKEND="cls-24305-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24305-0">
<TITLE>Primary vtable for basic_ostringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>88</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_ostringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</primary></indexterm>typeinfo for basic_ostringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_ostringstream()</primary></indexterm>basic_ostringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_ostringstream()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_ostringstream()</primary></indexterm>basic_ostringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_ostringstream()</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<!--classdata-->
<!--table start-->
<TABLE id="cls-24305-1">
<TITLE>Secondary vtable for basic_ostringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>-88</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>-88</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_ostringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</primary></indexterm>typeinfo for basic_ostringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_ostringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_ostringstream()</primary></indexterm>virtual thunk to basic_ostringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_ostringstream()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_ostringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_ostringstream()</primary></indexterm>virtual thunk to basic_ostringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_ostringstream()</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The VTT for the std::basic_ostringstream&lt;wchar_t, std::char_traits&lt;wchar_t&gt;, std::allocator&lt;wchar_t&gt; &gt;  class
is described by <XREF LINKEND="vtt-24397">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="vtt-24397">
<TITLE>VTT for basic_ostringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>VTT Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>_ZTTSt19basic_ostringstreamIwSt11char_traitsIwESaIwEE</primary></indexterm>_ZTTSt19basic_ostringstreamIwSt11char_traitsIwESaIwEE</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Number of Entries</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>4</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class basic_ostringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::basic_ostringstream&lt;wchar_t, std::char_traits&lt;wchar_t&gt;, std::allocator&lt;wchar_t&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clath-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clath-ints">
<TITLE>libstdcxx - Class basic_ostringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_ostringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_ostringstream()</primary></indexterm>virtual thunk to basic_ostringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_ostringstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_ostringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_ostringstream()</primary></indexterm>virtual thunk to basic_ostringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_ostringstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> > -->
<SECT2>
<!--libgroup-->
<TITLE>Class basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; class
is described by <XREF LINKEND="cls-24311-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24311-0">
<TITLE>Primary vtable for basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</primary></indexterm>typeinfo for basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_stringbuf()</primary></indexterm>basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_stringbuf()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_stringbuf()</primary></indexterm>basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_stringbuf()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::imbue(locale const&)</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::imbue(locale const&)</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::setbuf(char*, long)</primary></indexterm>basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::setbuf(char*, long)</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::seekoff(long, _Ios_Seekdir, _Ios_Openmode)</primary></indexterm>basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::seekoff(long, _Ios_Seekdir, _Ios_Openmode)</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::seekpos(fpos&lt;__mbstate_t&gt;, _Ios_Openmode)</primary></indexterm>basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::seekpos(fpos&lt;__mbstate_t&gt;, _Ios_Openmode)</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::sync()</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::sync()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::showmanyc()</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::showmanyc()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::xsgetn(char*, long)</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::xsgetn(char*, long)</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::underflow()</primary></indexterm>basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::underflow()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::uflow()</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::uflow()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;11&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::pbackfail(int)</primary></indexterm>basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::pbackfail(int)</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;12&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::xsputn(char const*, long)</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::xsputn(char const*, long)</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;13&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::overflow(int)</primary></indexterm>basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::overflow(int)</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;  class
is described by <XREF LINKEND="rtti-24089">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24089">
<TITLE>typeinfo for basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</primary></indexterm>typeinfo name for basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clati-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clati-ints">
<TITLE>libstdcxx - Class basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::setbuf(char*, long)</primary></indexterm>basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::setbuf(char*, long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_M_sync(char*, unsigned long, unsigned long)</primary></indexterm>basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_M_sync(char*, unsigned long, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::seekoff(long, _Ios_Seekdir, _Ios_Openmode)</primary></indexterm>basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::seekoff(long, _Ios_Seekdir, _Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > -->
<SECT2>
<!--libgroup-->
<TITLE>Class basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::basic_stringbuf&lt;wchar_t, std::char_traits&lt;wchar_t&gt;, std::allocator&lt;wchar_t&gt; &gt; class
is described by <XREF LINKEND="cls-24307-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24307-0">
<TITLE>Primary vtable for basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</primary></indexterm>typeinfo for basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_stringbuf()</primary></indexterm>basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_stringbuf()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_stringbuf()</primary></indexterm>basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_stringbuf()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::imbue(locale const&)</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::imbue(locale const&)</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::setbuf(wchar_t*, long)</primary></indexterm>basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::setbuf(wchar_t*, long)</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::seekoff(long, _Ios_Seekdir, _Ios_Openmode)</primary></indexterm>basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::seekoff(long, _Ios_Seekdir, _Ios_Openmode)</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::seekpos(fpos&lt;__mbstate_t&gt;, _Ios_Openmode)</primary></indexterm>basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::seekpos(fpos&lt;__mbstate_t&gt;, _Ios_Openmode)</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::sync()</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::sync()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::showmanyc()</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::showmanyc()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::xsgetn(wchar_t*, long)</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::xsgetn(wchar_t*, long)</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::underflow()</primary></indexterm>basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::underflow()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::uflow()</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::uflow()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;11&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::pbackfail(unsigned int)</primary></indexterm>basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::pbackfail(unsigned int)</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;12&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::xsputn(wchar_t const*, long)</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::xsputn(wchar_t const*, long)</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;13&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::overflow(unsigned int)</primary></indexterm>basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::overflow(unsigned int)</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::basic_stringbuf&lt;wchar_t, std::char_traits&lt;wchar_t&gt;, std::allocator&lt;wchar_t&gt; &gt;  class
is described by <XREF LINKEND="rtti-24088">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24088">
<TITLE>typeinfo for basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</primary></indexterm>typeinfo name for basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::basic_stringbuf&lt;wchar_t, std::char_traits&lt;wchar_t&gt;, std::allocator&lt;wchar_t&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clatj-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clatj-ints">
<TITLE>libstdcxx - Class basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::setbuf(wchar_t*, long)</primary></indexterm>basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::setbuf(wchar_t*, long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_M_sync(wchar_t*, unsigned long, unsigned long)</primary></indexterm>basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_M_sync(wchar_t*, unsigned long, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::seekoff(long, _Ios_Seekdir, _Ios_Openmode)</primary></indexterm>basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::seekoff(long, _Ios_Seekdir, _Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::basic_iostream<char, std::char_traits<char> > -->
<SECT2>
<!--libgroup-->
<TITLE>Class basic_iostream&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for basic_iostream&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::basic_iostream&lt;char, std::char_traits&lt;char&gt; &gt; class
is described by <XREF LINKEND="cls-24249-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24249-0">
<TITLE>Primary vtable for basic_iostream&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>24</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_iostream&lt;char, char_traits&lt;char&gt; &gt;</primary></indexterm>typeinfo for basic_iostream&lt;char, char_traits&lt;char&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_iostream&lt;char, char_traits&lt;char&gt; &gt;::~basic_iostream()</primary></indexterm>basic_iostream&lt;char, char_traits&lt;char&gt; &gt;::~basic_iostream()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_iostream&lt;char, char_traits&lt;char&gt; &gt;::~basic_iostream()</primary></indexterm>basic_iostream&lt;char, char_traits&lt;char&gt; &gt;::~basic_iostream()</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<!--classdata-->
<!--table start-->
<TABLE id="cls-24249-1">
<TITLE>Secondary vtable for basic_iostream&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>-16</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>8</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_iostream&lt;char, char_traits&lt;char&gt; &gt;</primary></indexterm>typeinfo for basic_iostream&lt;char, char_traits&lt;char&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>non-virtual thunk to basic_iostream&lt;char, char_traits&lt;char&gt; &gt;::~basic_iostream()</primary></indexterm>non-virtual thunk to basic_iostream&lt;char, char_traits&lt;char&gt; &gt;::~basic_iostream()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>non-virtual thunk to basic_iostream&lt;char, char_traits&lt;char&gt; &gt;::~basic_iostream()</primary></indexterm>non-virtual thunk to basic_iostream&lt;char, char_traits&lt;char&gt; &gt;::~basic_iostream()</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<!--classdata-->
<!--table start-->
<TABLE id="cls-24249-2">
<TITLE>Secondary vtable for basic_iostream&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>-24</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>-24</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_iostream&lt;char, char_traits&lt;char&gt; &gt;</primary></indexterm>typeinfo for basic_iostream&lt;char, char_traits&lt;char&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_iostream&lt;char, char_traits&lt;char&gt; &gt;::~basic_iostream()</primary></indexterm>virtual thunk to basic_iostream&lt;char, char_traits&lt;char&gt; &gt;::~basic_iostream()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_iostream&lt;char, char_traits&lt;char&gt; &gt;::~basic_iostream()</primary></indexterm>virtual thunk to basic_iostream&lt;char, char_traits&lt;char&gt; &gt;::~basic_iostream()</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The VTT for the std::basic_iostream&lt;char, std::char_traits&lt;char&gt; &gt;  class
is described by <XREF LINKEND="vtt-24660">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="vtt-24660">
<TITLE>VTT for basic_iostream&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>VTT Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>_ZTTSd</primary></indexterm>_ZTTSd</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Number of Entries</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>7</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class basic_iostream&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::basic_iostream&lt;char, std::char_traits&lt;char&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clatk-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clatk-ints">
<TITLE>libstdcxx - Class basic_iostream&lt;char, char_traits&lt;char&gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>non-virtual thunk to basic_iostream&lt;char, char_traits&lt;char&gt; &gt;::~basic_iostream()</primary></indexterm>non-virtual thunk to basic_iostream&lt;char, char_traits&lt;char&gt; &gt;::~basic_iostream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>non-virtual thunk to basic_iostream&lt;char, char_traits&lt;char&gt; &gt;::~basic_iostream()</primary></indexterm>non-virtual thunk to basic_iostream&lt;char, char_traits&lt;char&gt; &gt;::~basic_iostream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_iostream&lt;char, char_traits&lt;char&gt; &gt;::~basic_iostream()</primary></indexterm>virtual thunk to basic_iostream&lt;char, char_traits&lt;char&gt; &gt;::~basic_iostream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_iostream&lt;char, char_traits&lt;char&gt; &gt;::~basic_iostream()</primary></indexterm>virtual thunk to basic_iostream&lt;char, char_traits&lt;char&gt; &gt;::~basic_iostream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::basic_iostream<wchar_t, std::char_traits<wchar_t> > -->
<SECT2>
<!--libgroup-->
<TITLE>Class basic_iostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for basic_iostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::basic_iostream&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; class
is described by <XREF LINKEND="cls-24248-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24248-0">
<TITLE>Primary vtable for basic_iostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>24</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_iostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</primary></indexterm>typeinfo for basic_iostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_iostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_iostream()</primary></indexterm>basic_iostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_iostream()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_iostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_iostream()</primary></indexterm>basic_iostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_iostream()</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<!--classdata-->
<!--table start-->
<TABLE id="cls-24248-1">
<TITLE>Secondary vtable for basic_iostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>-16</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>8</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_iostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</primary></indexterm>typeinfo for basic_iostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>non-virtual thunk to basic_iostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_iostream()</primary></indexterm>non-virtual thunk to basic_iostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_iostream()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>non-virtual thunk to basic_iostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_iostream()</primary></indexterm>non-virtual thunk to basic_iostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_iostream()</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<!--classdata-->
<!--table start-->
<TABLE id="cls-24248-2">
<TITLE>Secondary vtable for basic_iostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>-24</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>-24</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_iostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</primary></indexterm>typeinfo for basic_iostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_iostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_iostream()</primary></indexterm>virtual thunk to basic_iostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_iostream()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_iostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_iostream()</primary></indexterm>virtual thunk to basic_iostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_iostream()</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The VTT for the std::basic_iostream&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt;  class
is described by <XREF LINKEND="vtt-24661">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="vtt-24661">
<TITLE>VTT for basic_iostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>VTT Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>_ZTTSt14basic_iostreamIwSt11char_traitsIwEE</primary></indexterm>_ZTTSt14basic_iostreamIwSt11char_traitsIwEE</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Number of Entries</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>7</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class basic_iostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::basic_iostream&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clatl-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clatl-ints">
<TITLE>libstdcxx - Class basic_iostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>non-virtual thunk to basic_iostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_iostream()</primary></indexterm>non-virtual thunk to basic_iostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_iostream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>non-virtual thunk to basic_iostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_iostream()</primary></indexterm>non-virtual thunk to basic_iostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_iostream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_iostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_iostream()</primary></indexterm>virtual thunk to basic_iostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_iostream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_iostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_iostream()</primary></indexterm>virtual thunk to basic_iostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_iostream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::basic_istream<char, std::char_traits<char> > -->
<SECT2>
<!--libgroup-->
<TITLE>Class basic_istream&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for basic_istream&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt; class
is described by <XREF LINKEND="cls-24254-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24254-0">
<TITLE>Primary vtable for basic_istream&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>16</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_istream&lt;char, char_traits&lt;char&gt; &gt;</primary></indexterm>typeinfo for basic_istream&lt;char, char_traits&lt;char&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::~basic_istream()</primary></indexterm>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::~basic_istream()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::~basic_istream()</primary></indexterm>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::~basic_istream()</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<!--classdata-->
<!--table start-->
<TABLE id="cls-24254-1">
<TITLE>Secondary vtable for basic_istream&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>-16</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>-16</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_istream&lt;char, char_traits&lt;char&gt; &gt;</primary></indexterm>typeinfo for basic_istream&lt;char, char_traits&lt;char&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_istream&lt;char, char_traits&lt;char&gt; &gt;::~basic_istream()</primary></indexterm>virtual thunk to basic_istream&lt;char, char_traits&lt;char&gt; &gt;::~basic_istream()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_istream&lt;char, char_traits&lt;char&gt; &gt;::~basic_istream()</primary></indexterm>virtual thunk to basic_istream&lt;char, char_traits&lt;char&gt; &gt;::~basic_istream()</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The VTT for the std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;  class
is described by <XREF LINKEND="vtt-24999">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="vtt-24999">
<TITLE>VTT for basic_istream&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>VTT Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>_ZTTSi</primary></indexterm>_ZTTSi</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Number of Entries</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>2</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class basic_istream&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clatm-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clatm-ints">
<TITLE>libstdcxx - Class basic_istream&lt;char, char_traits&lt;char&gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::get(char*, long)</primary></indexterm>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::get(char*, long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::get(char*, long, char)</primary></indexterm>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::get(char*, long, char)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::read(char*, long)</primary></indexterm>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::read(char*, long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::seekg(long, _Ios_Seekdir)</primary></indexterm>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::seekg(long, _Ios_Seekdir)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::ignore(long, int)</primary></indexterm>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::ignore(long, int)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::getline(char*, long)</primary></indexterm>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::getline(char*, long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::getline(char*, long, char)</primary></indexterm>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::getline(char*, long, char)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::readsome(char*, long)</primary></indexterm>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::readsome(char*, long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_istream&lt;char, char_traits&lt;char&gt; &gt;::~basic_istream()</primary></indexterm>virtual thunk to basic_istream&lt;char, char_traits&lt;char&gt; &gt;::~basic_istream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_istream&lt;char, char_traits&lt;char&gt; &gt;::~basic_istream()</primary></indexterm>virtual thunk to basic_istream&lt;char, char_traits&lt;char&gt; &gt;::~basic_istream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::basic_istream<wchar_t, std::char_traits<wchar_t> > -->
<SECT2>
<!--libgroup-->
<TITLE>Class basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::basic_istream&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; class
is described by <XREF LINKEND="cls-24253-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24253-0">
<TITLE>Primary vtable for basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>16</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</primary></indexterm>typeinfo for basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_istream()</primary></indexterm>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_istream()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_istream()</primary></indexterm>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_istream()</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<!--classdata-->
<!--table start-->
<TABLE id="cls-24253-1">
<TITLE>Secondary vtable for basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>-16</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>-16</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</primary></indexterm>typeinfo for basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_istream()</primary></indexterm>virtual thunk to basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_istream()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_istream()</primary></indexterm>virtual thunk to basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_istream()</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The VTT for the std::basic_istream&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt;  class
is described by <XREF LINKEND="vtt-25001">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="vtt-25001">
<TITLE>VTT for basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>VTT Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>_ZTTSt13basic_istreamIwSt11char_traitsIwEE</primary></indexterm>_ZTTSt13basic_istreamIwSt11char_traitsIwEE</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Number of Entries</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>2</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::basic_istream&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clatn-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clatn-ints">
<TITLE>libstdcxx - Class basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::get(wchar_t*, long)</primary></indexterm>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::get(wchar_t*, long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::get(wchar_t*, long, wchar_t)</primary></indexterm>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::get(wchar_t*, long, wchar_t)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::read(wchar_t*, long)</primary></indexterm>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::read(wchar_t*, long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::seekg(long, _Ios_Seekdir)</primary></indexterm>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::seekg(long, _Ios_Seekdir)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::ignore(long, unsigned int)</primary></indexterm>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::ignore(long, unsigned int)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::getline(wchar_t*, long)</primary></indexterm>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::getline(wchar_t*, long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::getline(wchar_t*, long, wchar_t)</primary></indexterm>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::getline(wchar_t*, long, wchar_t)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::readsome(wchar_t*, long)</primary></indexterm>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::readsome(wchar_t*, long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_istream()</primary></indexterm>virtual thunk to basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_istream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_istream()</primary></indexterm>virtual thunk to basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_istream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > -->
<SECT2>
<!--libgroup-->
<TITLE>Class istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for Class istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
No external methods are defined for libstdcxx - Class std::istreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt;
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::istreambuf_iterator<char, std::char_traits<char> > -->
<SECT2>
<!--libgroup-->
<TITLE>Class istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for Class istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
No external methods are defined for libstdcxx - Class std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt;
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::basic_ostream<char, std::char_traits<char> > -->
<SECT2>
<!--libgroup-->
<TITLE>Class basic_ostream&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for basic_ostream&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt; class
is described by <XREF LINKEND="cls-24303-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24303-0">
<TITLE>Primary vtable for basic_ostream&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>8</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_ostream&lt;char, char_traits&lt;char&gt; &gt;</primary></indexterm>typeinfo for basic_ostream&lt;char, char_traits&lt;char&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::~basic_ostream()</primary></indexterm>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::~basic_ostream()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::~basic_ostream()</primary></indexterm>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::~basic_ostream()</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<!--classdata-->
<!--table start-->
<TABLE id="cls-24303-1">
<TITLE>Secondary vtable for basic_ostream&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>-8</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>-8</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_ostream&lt;char, char_traits&lt;char&gt; &gt;</primary></indexterm>typeinfo for basic_ostream&lt;char, char_traits&lt;char&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::~basic_ostream()</primary></indexterm>virtual thunk to basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::~basic_ostream()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::~basic_ostream()</primary></indexterm>virtual thunk to basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::~basic_ostream()</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The VTT for the std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;  class
is described by <XREF LINKEND="vtt-25000">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="vtt-25000">
<TITLE>VTT for basic_ostream&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>VTT Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>_ZTTSo</primary></indexterm>_ZTTSo</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Number of Entries</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>2</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class basic_ostream&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clato-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clato-ints">
<TITLE>libstdcxx - Class basic_ostream&lt;char, char_traits&lt;char&gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::seekp(long, _Ios_Seekdir)</primary></indexterm>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::seekp(long, _Ios_Seekdir)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::write(char const*, long)</primary></indexterm>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::write(char const*, long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::_M_write(char const*, long)</primary></indexterm>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::_M_write(char const*, long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::~basic_ostream()</primary></indexterm>virtual thunk to basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::~basic_ostream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::~basic_ostream()</primary></indexterm>virtual thunk to basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::~basic_ostream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::basic_ostream<wchar_t, std::char_traits<wchar_t> > -->
<SECT2>
<!--libgroup-->
<TITLE>Class basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::basic_ostream&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; class
is described by <XREF LINKEND="cls-24302-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24302-0">
<TITLE>Primary vtable for basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>8</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</primary></indexterm>typeinfo for basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_ostream()</primary></indexterm>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_ostream()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_ostream()</primary></indexterm>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_ostream()</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<!--classdata-->
<!--table start-->
<TABLE id="cls-24302-1">
<TITLE>Secondary vtable for basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>-8</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>-8</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</primary></indexterm>typeinfo for basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_ostream()</primary></indexterm>virtual thunk to basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_ostream()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_ostream()</primary></indexterm>virtual thunk to basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_ostream()</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The VTT for the std::basic_ostream&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt;  class
is described by <XREF LINKEND="vtt-25002">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="vtt-25002">
<TITLE>VTT for basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>VTT Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>_ZTTSt13basic_ostreamIwSt11char_traitsIwEE</primary></indexterm>_ZTTSt13basic_ostreamIwSt11char_traitsIwEE</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Number of Entries</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>2</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::basic_ostream&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clatp-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clatp-ints">
<TITLE>libstdcxx - Class basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::seekp(long, _Ios_Seekdir)</primary></indexterm>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::seekp(long, _Ios_Seekdir)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::write(wchar_t const*, long)</primary></indexterm>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::write(wchar_t const*, long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_ostream()</primary></indexterm>virtual thunk to basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_ostream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_ostream()</primary></indexterm>virtual thunk to basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_ostream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::basic_fstream<char, std::char_traits<char> > -->
<SECT2>
<!--libgroup-->
<TITLE>Class basic_fstream&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for basic_fstream&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::basic_fstream&lt;char, std::char_traits&lt;char&gt; &gt; class
is described by <XREF LINKEND="cls-24236-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24236-0">
<TITLE>Primary vtable for basic_fstream&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>264</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_fstream&lt;char, char_traits&lt;char&gt; &gt;</primary></indexterm>typeinfo for basic_fstream&lt;char, char_traits&lt;char&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_fstream&lt;char, char_traits&lt;char&gt; &gt;::~basic_fstream()</primary></indexterm>basic_fstream&lt;char, char_traits&lt;char&gt; &gt;::~basic_fstream()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_fstream&lt;char, char_traits&lt;char&gt; &gt;::~basic_fstream()</primary></indexterm>basic_fstream&lt;char, char_traits&lt;char&gt; &gt;::~basic_fstream()</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<!--classdata-->
<!--table start-->
<TABLE id="cls-24236-1">
<TITLE>Secondary vtable for basic_fstream&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>-16</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>248</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_fstream&lt;char, char_traits&lt;char&gt; &gt;</primary></indexterm>typeinfo for basic_fstream&lt;char, char_traits&lt;char&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>non-virtual thunk to basic_fstream&lt;char, char_traits&lt;char&gt; &gt;::~basic_fstream()</primary></indexterm>non-virtual thunk to basic_fstream&lt;char, char_traits&lt;char&gt; &gt;::~basic_fstream()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>non-virtual thunk to basic_fstream&lt;char, char_traits&lt;char&gt; &gt;::~basic_fstream()</primary></indexterm>non-virtual thunk to basic_fstream&lt;char, char_traits&lt;char&gt; &gt;::~basic_fstream()</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<!--classdata-->
<!--table start-->
<TABLE id="cls-24236-2">
<TITLE>Secondary vtable for basic_fstream&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>-264</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>-264</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_fstream&lt;char, char_traits&lt;char&gt; &gt;</primary></indexterm>typeinfo for basic_fstream&lt;char, char_traits&lt;char&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_fstream&lt;char, char_traits&lt;char&gt; &gt;::~basic_fstream()</primary></indexterm>virtual thunk to basic_fstream&lt;char, char_traits&lt;char&gt; &gt;::~basic_fstream()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_fstream&lt;char, char_traits&lt;char&gt; &gt;::~basic_fstream()</primary></indexterm>virtual thunk to basic_fstream&lt;char, char_traits&lt;char&gt; &gt;::~basic_fstream()</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The VTT for the std::basic_fstream&lt;char, std::char_traits&lt;char&gt; &gt;  class
is described by <XREF LINKEND="vtt-24740">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="vtt-24740">
<TITLE>VTT for basic_fstream&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>VTT Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>_ZTTSt13basic_fstreamIcSt11char_traitsIcEE</primary></indexterm>_ZTTSt13basic_fstreamIcSt11char_traitsIcEE</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Number of Entries</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>10</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class basic_fstream&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::basic_fstream&lt;char, std::char_traits&lt;char&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clatq-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clatq-ints">
<TITLE>libstdcxx - Class basic_fstream&lt;char, char_traits&lt;char&gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>non-virtual thunk to basic_fstream&lt;char, char_traits&lt;char&gt; &gt;::~basic_fstream()</primary></indexterm>non-virtual thunk to basic_fstream&lt;char, char_traits&lt;char&gt; &gt;::~basic_fstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>non-virtual thunk to basic_fstream&lt;char, char_traits&lt;char&gt; &gt;::~basic_fstream()</primary></indexterm>non-virtual thunk to basic_fstream&lt;char, char_traits&lt;char&gt; &gt;::~basic_fstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_fstream&lt;char, char_traits&lt;char&gt; &gt;::~basic_fstream()</primary></indexterm>virtual thunk to basic_fstream&lt;char, char_traits&lt;char&gt; &gt;::~basic_fstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_fstream&lt;char, char_traits&lt;char&gt; &gt;::~basic_fstream()</primary></indexterm>virtual thunk to basic_fstream&lt;char, char_traits&lt;char&gt; &gt;::~basic_fstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::basic_fstream<wchar_t, std::char_traits<wchar_t> > -->
<SECT2>
<!--libgroup-->
<TITLE>Class basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::basic_fstream&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; class
is described by <XREF LINKEND="cls-24233-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24233-0">
<TITLE>Primary vtable for basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>264</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</primary></indexterm>typeinfo for basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_fstream()</primary></indexterm>basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_fstream()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_fstream()</primary></indexterm>basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_fstream()</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<!--classdata-->
<!--table start-->
<TABLE id="cls-24233-1">
<TITLE>Secondary vtable for basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>-16</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>248</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</primary></indexterm>typeinfo for basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>non-virtual thunk to basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_fstream()</primary></indexterm>non-virtual thunk to basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_fstream()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>non-virtual thunk to basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_fstream()</primary></indexterm>non-virtual thunk to basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_fstream()</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<!--classdata-->
<!--table start-->
<TABLE id="cls-24233-2">
<TITLE>Secondary vtable for basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>-264</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>-264</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</primary></indexterm>typeinfo for basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_fstream()</primary></indexterm>virtual thunk to basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_fstream()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_fstream()</primary></indexterm>virtual thunk to basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_fstream()</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The VTT for the std::basic_fstream&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt;  class
is described by <XREF LINKEND="vtt-24741">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="vtt-24741">
<TITLE>VTT for basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>VTT Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>_ZTTSt13basic_fstreamIwSt11char_traitsIwEE</primary></indexterm>_ZTTSt13basic_fstreamIwSt11char_traitsIwEE</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Number of Entries</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>10</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::basic_fstream&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clatr-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clatr-ints">
<TITLE>libstdcxx - Class basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>non-virtual thunk to basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_fstream()</primary></indexterm>non-virtual thunk to basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_fstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>non-virtual thunk to basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_fstream()</primary></indexterm>non-virtual thunk to basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_fstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_fstream()</primary></indexterm>virtual thunk to basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_fstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::basic_ifstream<char, std::char_traits<char> > -->
<SECT2>
<!--libgroup-->
<TITLE>Class basic_ifstream&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for basic_ifstream&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::basic_ifstream&lt;char, std::char_traits&lt;char&gt; &gt; class
is described by <XREF LINKEND="cls-24238-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24238-0">
<TITLE>Primary vtable for basic_ifstream&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>256</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_ifstream&lt;char, char_traits&lt;char&gt; &gt;</primary></indexterm>typeinfo for basic_ifstream&lt;char, char_traits&lt;char&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_ifstream&lt;char, char_traits&lt;char&gt; &gt;::~basic_ifstream()</primary></indexterm>basic_ifstream&lt;char, char_traits&lt;char&gt; &gt;::~basic_ifstream()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_ifstream&lt;char, char_traits&lt;char&gt; &gt;::~basic_ifstream()</primary></indexterm>basic_ifstream&lt;char, char_traits&lt;char&gt; &gt;::~basic_ifstream()</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<!--classdata-->
<!--table start-->
<TABLE id="cls-24238-1">
<TITLE>Secondary vtable for basic_ifstream&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>-256</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>-256</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_ifstream&lt;char, char_traits&lt;char&gt; &gt;</primary></indexterm>typeinfo for basic_ifstream&lt;char, char_traits&lt;char&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_ifstream&lt;char, char_traits&lt;char&gt; &gt;::~basic_ifstream()</primary></indexterm>virtual thunk to basic_ifstream&lt;char, char_traits&lt;char&gt; &gt;::~basic_ifstream()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_ifstream&lt;char, char_traits&lt;char&gt; &gt;::~basic_ifstream()</primary></indexterm>virtual thunk to basic_ifstream&lt;char, char_traits&lt;char&gt; &gt;::~basic_ifstream()</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The VTT for the std::basic_ifstream&lt;char, std::char_traits&lt;char&gt; &gt;  class
is described by <XREF LINKEND="vtt-24390">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="vtt-24390">
<TITLE>VTT for basic_ifstream&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>VTT Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>_ZTTSt14basic_ifstreamIcSt11char_traitsIcEE</primary></indexterm>_ZTTSt14basic_ifstreamIcSt11char_traitsIcEE</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Number of Entries</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>4</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class basic_ifstream&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::basic_ifstream&lt;char, std::char_traits&lt;char&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clats-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clats-ints">
<TITLE>libstdcxx - Class basic_ifstream&lt;char, char_traits&lt;char&gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_ifstream&lt;char, char_traits&lt;char&gt; &gt;::~basic_ifstream()</primary></indexterm>virtual thunk to basic_ifstream&lt;char, char_traits&lt;char&gt; &gt;::~basic_ifstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_ifstream&lt;char, char_traits&lt;char&gt; &gt;::~basic_ifstream()</primary></indexterm>virtual thunk to basic_ifstream&lt;char, char_traits&lt;char&gt; &gt;::~basic_ifstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::basic_ifstream<wchar_t, std::char_traits<wchar_t> > -->
<SECT2>
<!--libgroup-->
<TITLE>Class basic_ifstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for basic_ifstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::basic_ifstream&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; class
is described by <XREF LINKEND="cls-24235-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24235-0">
<TITLE>Primary vtable for basic_ifstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>256</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_ifstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</primary></indexterm>typeinfo for basic_ifstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_ifstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_ifstream()</primary></indexterm>basic_ifstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_ifstream()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_ifstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_ifstream()</primary></indexterm>basic_ifstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_ifstream()</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<!--classdata-->
<!--table start-->
<TABLE id="cls-24235-1">
<TITLE>Secondary vtable for basic_ifstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>-256</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>-256</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_ifstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</primary></indexterm>typeinfo for basic_ifstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_ifstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_ifstream()</primary></indexterm>virtual thunk to basic_ifstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_ifstream()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_ifstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_ifstream()</primary></indexterm>virtual thunk to basic_ifstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_ifstream()</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The VTT for the std::basic_ifstream&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt;  class
is described by <XREF LINKEND="vtt-24391">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="vtt-24391">
<TITLE>VTT for basic_ifstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>VTT Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>_ZTTSt14basic_ifstreamIwSt11char_traitsIwEE</primary></indexterm>_ZTTSt14basic_ifstreamIwSt11char_traitsIwEE</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Number of Entries</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>4</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class basic_ifstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::basic_ifstream&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clatt-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clatt-ints">
<TITLE>libstdcxx - Class basic_ifstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_ifstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_ifstream()</primary></indexterm>virtual thunk to basic_ifstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_ifstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_ifstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_ifstream()</primary></indexterm>virtual thunk to basic_ifstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_ifstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::basic_ofstream<char, std::char_traits<char> > -->
<SECT2>
<!--libgroup-->
<TITLE>Class basic_ofstream&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for basic_ofstream&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::basic_ofstream&lt;char, std::char_traits&lt;char&gt; &gt; class
is described by <XREF LINKEND="cls-24237-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24237-0">
<TITLE>Primary vtable for basic_ofstream&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>248</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_ofstream&lt;char, char_traits&lt;char&gt; &gt;</primary></indexterm>typeinfo for basic_ofstream&lt;char, char_traits&lt;char&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_ofstream&lt;char, char_traits&lt;char&gt; &gt;::~basic_ofstream()</primary></indexterm>basic_ofstream&lt;char, char_traits&lt;char&gt; &gt;::~basic_ofstream()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_ofstream&lt;char, char_traits&lt;char&gt; &gt;::~basic_ofstream()</primary></indexterm>basic_ofstream&lt;char, char_traits&lt;char&gt; &gt;::~basic_ofstream()</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<!--classdata-->
<!--table start-->
<TABLE id="cls-24237-1">
<TITLE>Secondary vtable for basic_ofstream&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>-248</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>-248</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_ofstream&lt;char, char_traits&lt;char&gt; &gt;</primary></indexterm>typeinfo for basic_ofstream&lt;char, char_traits&lt;char&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_ofstream&lt;char, char_traits&lt;char&gt; &gt;::~basic_ofstream()</primary></indexterm>virtual thunk to basic_ofstream&lt;char, char_traits&lt;char&gt; &gt;::~basic_ofstream()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_ofstream&lt;char, char_traits&lt;char&gt; &gt;::~basic_ofstream()</primary></indexterm>virtual thunk to basic_ofstream&lt;char, char_traits&lt;char&gt; &gt;::~basic_ofstream()</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The VTT for the std::basic_ofstream&lt;char, std::char_traits&lt;char&gt; &gt;  class
is described by <XREF LINKEND="vtt-24392">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="vtt-24392">
<TITLE>VTT for basic_ofstream&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>VTT Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>_ZTTSt14basic_ofstreamIcSt11char_traitsIcEE</primary></indexterm>_ZTTSt14basic_ofstreamIcSt11char_traitsIcEE</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Number of Entries</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>4</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class basic_ofstream&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::basic_ofstream&lt;char, std::char_traits&lt;char&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clatu-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clatu-ints">
<TITLE>libstdcxx - Class basic_ofstream&lt;char, char_traits&lt;char&gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_ofstream&lt;char, char_traits&lt;char&gt; &gt;::~basic_ofstream()</primary></indexterm>virtual thunk to basic_ofstream&lt;char, char_traits&lt;char&gt; &gt;::~basic_ofstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_ofstream&lt;char, char_traits&lt;char&gt; &gt;::~basic_ofstream()</primary></indexterm>virtual thunk to basic_ofstream&lt;char, char_traits&lt;char&gt; &gt;::~basic_ofstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::basic_ofstream<wchar_t, std::char_traits<wchar_t> > -->
<SECT2>
<!--libgroup-->
<TITLE>Class basic_ofstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for basic_ofstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::basic_ofstream&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; class
is described by <XREF LINKEND="cls-24234-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24234-0">
<TITLE>Primary vtable for basic_ofstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>248</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_ofstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</primary></indexterm>typeinfo for basic_ofstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_ofstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_ofstream()</primary></indexterm>basic_ofstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_ofstream()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_ofstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_ofstream()</primary></indexterm>basic_ofstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_ofstream()</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<!--classdata-->
<!--table start-->
<TABLE id="cls-24234-1">
<TITLE>Secondary vtable for basic_ofstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>-248</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>-248</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_ofstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</primary></indexterm>typeinfo for basic_ofstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_ofstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_ofstream()</primary></indexterm>virtual thunk to basic_ofstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_ofstream()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_ofstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_ofstream()</primary></indexterm>virtual thunk to basic_ofstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_ofstream()</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The VTT for the std::basic_ofstream&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt;  class
is described by <XREF LINKEND="vtt-24393">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="vtt-24393">
<TITLE>VTT for basic_ofstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>VTT Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>_ZTTSt14basic_ofstreamIwSt11char_traitsIwEE</primary></indexterm>_ZTTSt14basic_ofstreamIwSt11char_traitsIwEE</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Number of Entries</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>4</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class basic_ofstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::basic_ofstream&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clatv-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clatv-ints">
<TITLE>libstdcxx - Class basic_ofstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_ofstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_ofstream()</primary></indexterm>virtual thunk to basic_ofstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_ofstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_ofstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_ofstream()</primary></indexterm>virtual thunk to basic_ofstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_ofstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::basic_streambuf<char, std::char_traits<char> > -->
<SECT2>
<!--libgroup-->
<TITLE>Class basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt; class
is described by <XREF LINKEND="cls-24315-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24315-0">
<TITLE>Primary vtable for basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;</primary></indexterm>typeinfo for basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::~basic_streambuf()</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::~basic_streambuf()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::~basic_streambuf()</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::~basic_streambuf()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::imbue(locale const&)</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::imbue(locale const&)</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::setbuf(char*, long)</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::setbuf(char*, long)</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::seekoff(long, _Ios_Seekdir, _Ios_Openmode)</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::seekoff(long, _Ios_Seekdir, _Ios_Openmode)</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::seekpos(fpos&lt;__mbstate_t&gt;, _Ios_Openmode)</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::seekpos(fpos&lt;__mbstate_t&gt;, _Ios_Openmode)</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::sync()</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::sync()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::showmanyc()</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::showmanyc()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::xsgetn(char*, long)</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::xsgetn(char*, long)</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::underflow()</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::underflow()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::uflow()</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::uflow()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;11&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::pbackfail(int)</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::pbackfail(int)</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;12&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::xsputn(char const*, long)</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::xsputn(char const*, long)</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;13&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::overflow(int)</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::overflow(int)</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;  class
is described by <XREF LINKEND="rtti-23990">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-23990">
<TITLE>typeinfo for basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__class_type_info</primary></indexterm>vtable for __cxxabiv1::__class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;</primary></indexterm>typeinfo name for basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clatw-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clatw-ints">
<TITLE>libstdcxx - Class basic_streambuf&lt;char, char_traits&lt;char&gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::pubseekoff(long, _Ios_Seekdir, _Ios_Openmode)</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::pubseekoff(long, _Ios_Seekdir, _Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::sgetn(char*, long)</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::sgetn(char*, long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::sputn(char const*, long)</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::sputn(char const*, long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::setbuf(char*, long)</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::setbuf(char*, long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::xsgetn(char*, long)</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::xsgetn(char*, long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::xsputn(char const*, long)</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::xsputn(char const*, long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::seekoff(long, _Ios_Seekdir, _Ios_Openmode)</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::seekoff(long, _Ios_Seekdir, _Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::pubsetbuf(char*, long)</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::pubsetbuf(char*, long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::basic_streambuf<wchar_t, std::char_traits<wchar_t> > -->
<SECT2>
<!--libgroup-->
<TITLE>Class basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::basic_streambuf&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; class
is described by <XREF LINKEND="cls-24314-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24314-0">
<TITLE>Primary vtable for basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</primary></indexterm>typeinfo for basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_streambuf()</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_streambuf()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_streambuf()</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_streambuf()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::imbue(locale const&)</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::imbue(locale const&)</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::setbuf(wchar_t*, long)</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::setbuf(wchar_t*, long)</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::seekoff(long, _Ios_Seekdir, _Ios_Openmode)</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::seekoff(long, _Ios_Seekdir, _Ios_Openmode)</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::seekpos(fpos&lt;__mbstate_t&gt;, _Ios_Openmode)</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::seekpos(fpos&lt;__mbstate_t&gt;, _Ios_Openmode)</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::sync()</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::sync()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::showmanyc()</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::showmanyc()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::xsgetn(wchar_t*, long)</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::xsgetn(wchar_t*, long)</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::underflow()</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::underflow()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::uflow()</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::uflow()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;11&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::pbackfail(unsigned int)</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::pbackfail(unsigned int)</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;12&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::xsputn(wchar_t const*, long)</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::xsputn(wchar_t const*, long)</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;13&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::overflow(unsigned int)</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::overflow(unsigned int)</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::basic_streambuf&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt;  class
is described by <XREF LINKEND="rtti-23991">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-23991">
<TITLE>typeinfo for basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__class_type_info</primary></indexterm>vtable for __cxxabiv1::__class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</primary></indexterm>typeinfo name for basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::basic_streambuf&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clatx-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clatx-ints">
<TITLE>libstdcxx - Class basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::pubseekoff(long, _Ios_Seekdir, _Ios_Openmode)</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::pubseekoff(long, _Ios_Seekdir, _Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::sgetn(wchar_t*, long)</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::sgetn(wchar_t*, long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::sputn(wchar_t const*, long)</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::sputn(wchar_t const*, long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::setbuf(wchar_t*, long)</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::setbuf(wchar_t*, long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::xsgetn(wchar_t*, long)</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::xsgetn(wchar_t*, long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::xsputn(wchar_t const*, long)</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::xsputn(wchar_t const*, long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::seekoff(long, _Ios_Seekdir, _Ios_Openmode)</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::seekoff(long, _Ios_Seekdir, _Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::pubsetbuf(wchar_t*, long)</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::pubsetbuf(wchar_t*, long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::basic_filebuf<char, std::char_traits<char> > -->
<SECT2>
<!--libgroup-->
<TITLE>Class basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt; class
is described by <XREF LINKEND="cls-24240-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24240-0">
<TITLE>Primary vtable for basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;</primary></indexterm>typeinfo for basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::~basic_filebuf()</primary></indexterm>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::~basic_filebuf()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::~basic_filebuf()</primary></indexterm>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::~basic_filebuf()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::imbue(locale const&)</primary></indexterm>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::imbue(locale const&)</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::setbuf(char*, long)</primary></indexterm>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::setbuf(char*, long)</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::seekoff(long, _Ios_Seekdir, _Ios_Openmode)</primary></indexterm>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::seekoff(long, _Ios_Seekdir, _Ios_Openmode)</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::seekpos(fpos&lt;__mbstate_t&gt;, _Ios_Openmode)</primary></indexterm>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::seekpos(fpos&lt;__mbstate_t&gt;, _Ios_Openmode)</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::sync()</primary></indexterm>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::sync()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::showmanyc()</primary></indexterm>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::showmanyc()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::xsgetn(char*, long)</primary></indexterm>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::xsgetn(char*, long)</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::underflow()</primary></indexterm>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::underflow()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::uflow()</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::uflow()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;11&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::pbackfail(int)</primary></indexterm>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::pbackfail(int)</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;12&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::xsputn(char const*, long)</primary></indexterm>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::xsputn(char const*, long)</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;13&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::overflow(int)</primary></indexterm>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::overflow(int)</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;  class
is described by <XREF LINKEND="rtti-23988">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-23988">
<TITLE>typeinfo for basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;</primary></indexterm>typeinfo name for basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-claty-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-claty-ints">
<TITLE>libstdcxx - Class basic_filebuf&lt;char, char_traits&lt;char&gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::_M_set_buffer(long)</primary></indexterm>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::_M_set_buffer(long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::_M_convert_to_external(char*, long)</primary></indexterm>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::_M_convert_to_external(char*, long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::setbuf(char*, long)</primary></indexterm>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::setbuf(char*, long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::xsgetn(char*, long)</primary></indexterm>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::xsgetn(char*, long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::xsputn(char const*, long)</primary></indexterm>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::xsputn(char const*, long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::_M_seek(long, _Ios_Seekdir, __mbstate_t)</primary></indexterm>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::_M_seek(long, _Ios_Seekdir, __mbstate_t)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::seekoff(long, _Ios_Seekdir, _Ios_Openmode)</primary></indexterm>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::seekoff(long, _Ios_Seekdir, _Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::basic_filebuf<wchar_t, std::char_traits<wchar_t> > -->
<SECT2>
<!--libgroup-->
<TITLE>Class basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::basic_filebuf&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; class
is described by <XREF LINKEND="cls-24239-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24239-0">
<TITLE>Primary vtable for basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</primary></indexterm>typeinfo for basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_filebuf()</primary></indexterm>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_filebuf()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_filebuf()</primary></indexterm>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_filebuf()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::imbue(locale const&)</primary></indexterm>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::imbue(locale const&)</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::setbuf(wchar_t*, long)</primary></indexterm>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::setbuf(wchar_t*, long)</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::seekoff(long, _Ios_Seekdir, _Ios_Openmode)</primary></indexterm>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::seekoff(long, _Ios_Seekdir, _Ios_Openmode)</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::seekpos(fpos&lt;__mbstate_t&gt;, _Ios_Openmode)</primary></indexterm>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::seekpos(fpos&lt;__mbstate_t&gt;, _Ios_Openmode)</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::sync()</primary></indexterm>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::sync()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::showmanyc()</primary></indexterm>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::showmanyc()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::xsgetn(wchar_t*, long)</primary></indexterm>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::xsgetn(wchar_t*, long)</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::underflow()</primary></indexterm>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::underflow()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::uflow()</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::uflow()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;11&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::pbackfail(unsigned int)</primary></indexterm>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::pbackfail(unsigned int)</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;12&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::xsputn(wchar_t const*, long)</primary></indexterm>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::xsputn(wchar_t const*, long)</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;13&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::overflow(unsigned int)</primary></indexterm>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::overflow(unsigned int)</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::basic_filebuf&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt;  class
is described by <XREF LINKEND="rtti-23989">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-23989">
<TITLE>typeinfo for basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</primary></indexterm>typeinfo name for basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::basic_filebuf&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clatz-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clatz-ints">
<TITLE>libstdcxx - Class basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::_M_set_buffer(long)</primary></indexterm>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::_M_set_buffer(long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::_M_convert_to_external(wchar_t*, long)</primary></indexterm>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::_M_convert_to_external(wchar_t*, long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::setbuf(wchar_t*, long)</primary></indexterm>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::setbuf(wchar_t*, long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::xsgetn(wchar_t*, long)</primary></indexterm>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::xsgetn(wchar_t*, long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::xsputn(wchar_t const*, long)</primary></indexterm>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::xsputn(wchar_t const*, long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::_M_seek(long, _Ios_Seekdir, __mbstate_t)</primary></indexterm>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::_M_seek(long, _Ios_Seekdir, __mbstate_t)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::seekoff(long, _Ios_Seekdir, _Ios_Openmode)</primary></indexterm>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::seekoff(long, _Ios_Seekdir, _Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::_M_write(wchar_t const*, long)</primary></indexterm>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::_M_write(wchar_t const*, long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>virtual thunk to basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_fstream()</primary></indexterm>virtual thunk to basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_fstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::ios_base -->
<SECT2>
<!--libgroup-->
<TITLE>Class ios_base</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for ios_base</TITLE>
<PARA>
</PARA>
<PARA>
The Run Time Type Information for the std::ios_base  class
is described by <XREF LINKEND="rtti-24001">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24001">
<TITLE>typeinfo for ios_base</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__class_type_info</primary></indexterm>vtable for __cxxabiv1::__class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for ios_base</primary></indexterm>typeinfo name for ios_base</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class ios_base</TITLE>
<PARA>
No external methods are defined for libstdcxx - Class std::ios_base
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::basic_ios<char, std::char_traits<char> > -->
<SECT2>
<!--libgroup-->
<TITLE>Class basic_ios&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for basic_ios&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt; class
is described by <XREF LINKEND="cls-24251-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24251-0">
<TITLE>Primary vtable for basic_ios&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_ios&lt;char, char_traits&lt;char&gt; &gt;</primary></indexterm>typeinfo for basic_ios&lt;char, char_traits&lt;char&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_ios&lt;char, char_traits&lt;char&gt; &gt;::~basic_ios()</primary></indexterm>basic_ios&lt;char, char_traits&lt;char&gt; &gt;::~basic_ios()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_ios&lt;char, char_traits&lt;char&gt; &gt;::~basic_ios()</primary></indexterm>basic_ios&lt;char, char_traits&lt;char&gt; &gt;::~basic_ios()</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class basic_ios&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
No external methods are defined for libstdcxx - Class std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::basic_ios<wchar_t, std::char_traits<wchar_t> > -->
<SECT2>
<!--libgroup-->
<TITLE>Class basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for Class basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
No external methods are defined for libstdcxx - Class std::basic_ios&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt;
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::ios_base::failure -->
<SECT2>
<!--libgroup-->
<TITLE>Class ios_base::failure</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for ios_base::failure</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::ios_base::failure class
is described by <XREF LINKEND="cls-24252-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24252-0">
<TITLE>Primary vtable for ios_base::failure</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for ios_base::failure</primary></indexterm>typeinfo for ios_base::failure</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ios_base::failure::~failure()</primary></indexterm>ios_base::failure::~failure()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ios_base::failure::~failure()</primary></indexterm>ios_base::failure::~failure()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ios_base::failure::what() const</primary></indexterm>ios_base::failure::what() const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::ios_base::failure  class
is described by <XREF LINKEND="rtti-24059">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24059">
<TITLE>typeinfo for ios_base::failure</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for ios_base::failure</primary></indexterm>typeinfo name for ios_base::failure</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class ios_base::failure</TITLE>
<PARA>
No external methods are defined for libstdcxx - Class std::ios_base::failure
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::__timepunct<char> -->
<SECT2>
<!--libgroup-->
<TITLE>Class __timepunct&lt;char&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for __timepunct&lt;char&gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::__timepunct&lt;char&gt; class
is described by <XREF LINKEND="cls-24291-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24291-0">
<TITLE>Primary vtable for __timepunct&lt;char&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for __timepunct&lt;char&gt;</primary></indexterm>typeinfo for __timepunct&lt;char&gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__timepunct&lt;char&gt;::~__timepunct()</primary></indexterm>__timepunct&lt;char&gt;::~__timepunct()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__timepunct&lt;char&gt;::~__timepunct()</primary></indexterm>__timepunct&lt;char&gt;::~__timepunct()</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::__timepunct&lt;char&gt;  class
is described by <XREF LINKEND="rtti-24085">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24085">
<TITLE>typeinfo for __timepunct&lt;char&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for __timepunct&lt;char&gt;</primary></indexterm>typeinfo name for __timepunct&lt;char&gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class __timepunct&lt;char&gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::__timepunct&lt;char&gt; specified in <XREF linkend="tbl-libstdcxx-claua-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-claua-ints">
<TITLE>libstdcxx - Class __timepunct&lt;char&gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__timepunct&lt;char&gt;::_M_put(char*, unsigned long, char const*, tm const*) const</primary></indexterm>__timepunct&lt;char&gt;::_M_put(char*, unsigned long, char const*, tm const*) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__timepunct&lt;char&gt;::__timepunct(__locale_struct*, char const*, unsigned long)</primary></indexterm>__timepunct&lt;char&gt;::__timepunct(__locale_struct*, char const*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__timepunct&lt;char&gt;::__timepunct(__timepunct_cache&lt;char&gt;*, unsigned long)</primary></indexterm>__timepunct&lt;char&gt;::__timepunct(__timepunct_cache&lt;char&gt;*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__timepunct&lt;char&gt;::__timepunct(unsigned long)</primary></indexterm>__timepunct&lt;char&gt;::__timepunct(unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__timepunct&lt;char&gt;::__timepunct(__locale_struct*, char const*, unsigned long)</primary></indexterm>__timepunct&lt;char&gt;::__timepunct(__locale_struct*, char const*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__timepunct&lt;char&gt;::__timepunct(__timepunct_cache&lt;char&gt;*, unsigned long)</primary></indexterm>__timepunct&lt;char&gt;::__timepunct(__timepunct_cache&lt;char&gt;*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__timepunct&lt;char&gt;::__timepunct(unsigned long)</primary></indexterm>__timepunct&lt;char&gt;::__timepunct(unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::__timepunct<wchar_t> -->
<SECT2>
<!--libgroup-->
<TITLE>Class __timepunct&lt;wchar_t&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for __timepunct&lt;wchar_t&gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::__timepunct&lt;wchar_t&gt; class
is described by <XREF LINKEND="cls-24290-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24290-0">
<TITLE>Primary vtable for __timepunct&lt;wchar_t&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for __timepunct&lt;wchar_t&gt;</primary></indexterm>typeinfo for __timepunct&lt;wchar_t&gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__timepunct&lt;wchar_t&gt;::~__timepunct()</primary></indexterm>__timepunct&lt;wchar_t&gt;::~__timepunct()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__timepunct&lt;wchar_t&gt;::~__timepunct()</primary></indexterm>__timepunct&lt;wchar_t&gt;::~__timepunct()</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::__timepunct&lt;wchar_t&gt;  class
is described by <XREF LINKEND="rtti-24084">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24084">
<TITLE>typeinfo for __timepunct&lt;wchar_t&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for __timepunct&lt;wchar_t&gt;</primary></indexterm>typeinfo name for __timepunct&lt;wchar_t&gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class __timepunct&lt;wchar_t&gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::__timepunct&lt;wchar_t&gt; specified in <XREF linkend="tbl-libstdcxx-claub-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-claub-ints">
<TITLE>libstdcxx - Class __timepunct&lt;wchar_t&gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__timepunct&lt;wchar_t&gt;::_M_put(wchar_t*, unsigned long, wchar_t const*, tm const*) const</primary></indexterm>__timepunct&lt;wchar_t&gt;::_M_put(wchar_t*, unsigned long, wchar_t const*, tm const*) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__timepunct&lt;wchar_t&gt;::__timepunct(__locale_struct*, char const*, unsigned long)</primary></indexterm>__timepunct&lt;wchar_t&gt;::__timepunct(__locale_struct*, char const*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__timepunct&lt;wchar_t&gt;::__timepunct(__timepunct_cache&lt;wchar_t&gt;*, unsigned long)</primary></indexterm>__timepunct&lt;wchar_t&gt;::__timepunct(__timepunct_cache&lt;wchar_t&gt;*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__timepunct&lt;wchar_t&gt;::__timepunct(unsigned long)</primary></indexterm>__timepunct&lt;wchar_t&gt;::__timepunct(unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__timepunct&lt;wchar_t&gt;::__timepunct(__locale_struct*, char const*, unsigned long)</primary></indexterm>__timepunct&lt;wchar_t&gt;::__timepunct(__locale_struct*, char const*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__timepunct&lt;wchar_t&gt;::__timepunct(__timepunct_cache&lt;wchar_t&gt;*, unsigned long)</primary></indexterm>__timepunct&lt;wchar_t&gt;::__timepunct(__timepunct_cache&lt;wchar_t&gt;*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__timepunct&lt;wchar_t&gt;::__timepunct(unsigned long)</primary></indexterm>__timepunct&lt;wchar_t&gt;::__timepunct(unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::messages_base -->
<SECT2>
<!--libgroup-->
<TITLE>Class messages_base</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for messages_base</TITLE>
<PARA>
</PARA>
<PARA>
The Run Time Type Information for the std::messages_base  class
is described by <XREF LINKEND="rtti-24011">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24011">
<TITLE>typeinfo for messages_base</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__class_type_info</primary></indexterm>vtable for __cxxabiv1::__class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for messages_base</primary></indexterm>typeinfo name for messages_base</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class messages_base</TITLE>
<PARA>
No external methods are defined for libstdcxx - Class std::messages_base
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::messages<char> -->
<SECT2>
<!--libgroup-->
<TITLE>Class messages&lt;char&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for messages&lt;char&gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::messages&lt;char&gt; class
is described by <XREF LINKEND="cls-24285-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24285-0">
<TITLE>Primary vtable for messages&lt;char&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for messages&lt;char&gt;</primary></indexterm>typeinfo for messages&lt;char&gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>messages&lt;char&gt;::~messages()</primary></indexterm>messages&lt;char&gt;::~messages()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>messages&lt;char&gt;::~messages()</primary></indexterm>messages&lt;char&gt;::~messages()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>messages&lt;char&gt;::do_open(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, locale const&) const</primary></indexterm>messages&lt;char&gt;::do_open(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, locale const&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>messages&lt;char&gt;::do_get(int, int, int, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&) const</primary></indexterm>messages&lt;char&gt;::do_get(int, int, int, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>messages&lt;char&gt;::do_close(int) const</primary></indexterm>messages&lt;char&gt;::do_close(int) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class messages&lt;char&gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::messages&lt;char&gt; specified in <XREF linkend="tbl-libstdcxx-clauc-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clauc-ints">
<TITLE>libstdcxx - Class messages&lt;char&gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>messages&lt;char&gt;::messages(__locale_struct*, char const*, unsigned long)</primary></indexterm>messages&lt;char&gt;::messages(__locale_struct*, char const*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>messages&lt;char&gt;::messages(unsigned long)</primary></indexterm>messages&lt;char&gt;::messages(unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>messages&lt;char&gt;::messages(__locale_struct*, char const*, unsigned long)</primary></indexterm>messages&lt;char&gt;::messages(__locale_struct*, char const*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>messages&lt;char&gt;::messages(unsigned long)</primary></indexterm>messages&lt;char&gt;::messages(unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::messages<wchar_t> -->
<SECT2>
<!--libgroup-->
<TITLE>Class messages&lt;wchar_t&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for messages&lt;wchar_t&gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::messages&lt;wchar_t&gt; class
is described by <XREF LINKEND="cls-24284-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24284-0">
<TITLE>Primary vtable for messages&lt;wchar_t&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for messages&lt;wchar_t&gt;</primary></indexterm>typeinfo for messages&lt;wchar_t&gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>messages&lt;wchar_t&gt;::~messages()</primary></indexterm>messages&lt;wchar_t&gt;::~messages()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>messages&lt;wchar_t&gt;::~messages()</primary></indexterm>messages&lt;wchar_t&gt;::~messages()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>messages&lt;wchar_t&gt;::do_open(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, locale const&) const</primary></indexterm>messages&lt;wchar_t&gt;::do_open(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, locale const&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>messages&lt;wchar_t&gt;::do_get(int, int, int, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&) const</primary></indexterm>messages&lt;wchar_t&gt;::do_get(int, int, int, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>messages&lt;wchar_t&gt;::do_close(int) const</primary></indexterm>messages&lt;wchar_t&gt;::do_close(int) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class messages&lt;wchar_t&gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::messages&lt;wchar_t&gt; specified in <XREF linkend="tbl-libstdcxx-claud-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-claud-ints">
<TITLE>libstdcxx - Class messages&lt;wchar_t&gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>messages&lt;wchar_t&gt;::messages(__locale_struct*, char const*, unsigned long)</primary></indexterm>messages&lt;wchar_t&gt;::messages(__locale_struct*, char const*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>messages&lt;wchar_t&gt;::messages(unsigned long)</primary></indexterm>messages&lt;wchar_t&gt;::messages(unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>messages&lt;wchar_t&gt;::messages(__locale_struct*, char const*, unsigned long)</primary></indexterm>messages&lt;wchar_t&gt;::messages(__locale_struct*, char const*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>messages&lt;wchar_t&gt;::messages(unsigned long)</primary></indexterm>messages&lt;wchar_t&gt;::messages(unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::messages_byname<char> -->
<SECT2>
<!--libgroup-->
<TITLE>Class messages_byname&lt;char&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for messages_byname&lt;char&gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::messages_byname&lt;char&gt; class
is described by <XREF LINKEND="cls-24272-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24272-0">
<TITLE>Primary vtable for messages_byname&lt;char&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for messages_byname&lt;char&gt;</primary></indexterm>typeinfo for messages_byname&lt;char&gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>messages_byname&lt;char&gt;::~messages_byname()</primary></indexterm>messages_byname&lt;char&gt;::~messages_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>messages_byname&lt;char&gt;::~messages_byname()</primary></indexterm>messages_byname&lt;char&gt;::~messages_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>messages&lt;char&gt;::do_open(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, locale const&) const</primary></indexterm>messages&lt;char&gt;::do_open(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, locale const&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>messages&lt;char&gt;::do_get(int, int, int, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&) const</primary></indexterm>messages&lt;char&gt;::do_get(int, int, int, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>messages&lt;char&gt;::do_close(int) const</primary></indexterm>messages&lt;char&gt;::do_close(int) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::messages_byname&lt;char&gt;  class
is described by <XREF LINKEND="rtti-24074">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24074">
<TITLE>typeinfo for messages_byname&lt;char&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for messages_byname&lt;char&gt;</primary></indexterm>typeinfo name for messages_byname&lt;char&gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class messages_byname&lt;char&gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::messages_byname&lt;char&gt; specified in <XREF linkend="tbl-libstdcxx-claue-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-claue-ints">
<TITLE>libstdcxx - Class messages_byname&lt;char&gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>messages_byname&lt;char&gt;::messages_byname(char const*, unsigned long)</primary></indexterm>messages_byname&lt;char&gt;::messages_byname(char const*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>messages_byname&lt;char&gt;::messages_byname(char const*, unsigned long)</primary></indexterm>messages_byname&lt;char&gt;::messages_byname(char const*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::messages_byname<wchar_t> -->
<SECT2>
<!--libgroup-->
<TITLE>Class messages_byname&lt;wchar_t&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for messages_byname&lt;wchar_t&gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::messages_byname&lt;wchar_t&gt; class
is described by <XREF LINKEND="cls-24258-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24258-0">
<TITLE>Primary vtable for messages_byname&lt;wchar_t&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for messages_byname&lt;wchar_t&gt;</primary></indexterm>typeinfo for messages_byname&lt;wchar_t&gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>messages_byname&lt;wchar_t&gt;::~messages_byname()</primary></indexterm>messages_byname&lt;wchar_t&gt;::~messages_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>messages_byname&lt;wchar_t&gt;::~messages_byname()</primary></indexterm>messages_byname&lt;wchar_t&gt;::~messages_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>messages&lt;wchar_t&gt;::do_open(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, locale const&) const</primary></indexterm>messages&lt;wchar_t&gt;::do_open(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, locale const&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>messages&lt;wchar_t&gt;::do_get(int, int, int, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&) const</primary></indexterm>messages&lt;wchar_t&gt;::do_get(int, int, int, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>messages&lt;wchar_t&gt;::do_close(int) const</primary></indexterm>messages&lt;wchar_t&gt;::do_close(int) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::messages_byname&lt;wchar_t&gt;  class
is described by <XREF LINKEND="rtti-24062">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24062">
<TITLE>typeinfo for messages_byname&lt;wchar_t&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for messages_byname&lt;wchar_t&gt;</primary></indexterm>typeinfo name for messages_byname&lt;wchar_t&gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class messages_byname&lt;wchar_t&gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::messages_byname&lt;wchar_t&gt; specified in <XREF linkend="tbl-libstdcxx-clauf-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clauf-ints">
<TITLE>libstdcxx - Class messages_byname&lt;wchar_t&gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>messages_byname&lt;wchar_t&gt;::messages_byname(char const*, unsigned long)</primary></indexterm>messages_byname&lt;wchar_t&gt;::messages_byname(char const*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>messages_byname&lt;wchar_t&gt;::messages_byname(char const*, unsigned long)</primary></indexterm>messages_byname&lt;wchar_t&gt;::messages_byname(char const*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::numpunct<char> -->
<SECT2>
<!--libgroup-->
<TITLE>Class numpunct&lt;char&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for numpunct&lt;char&gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::numpunct&lt;char&gt; class
is described by <XREF LINKEND="cls-24295-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24295-0">
<TITLE>Primary vtable for numpunct&lt;char&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for numpunct&lt;char&gt;</primary></indexterm>typeinfo for numpunct&lt;char&gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;char&gt;::~numpunct()</primary></indexterm>numpunct&lt;char&gt;::~numpunct()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;char&gt;::~numpunct()</primary></indexterm>numpunct&lt;char&gt;::~numpunct()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;char&gt;::do_decimal_point() const</primary></indexterm>numpunct&lt;char&gt;::do_decimal_point() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;char&gt;::do_thousands_sep() const</primary></indexterm>numpunct&lt;char&gt;::do_thousands_sep() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;char&gt;::do_grouping() const</primary></indexterm>numpunct&lt;char&gt;::do_grouping() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;char&gt;::do_truename() const</primary></indexterm>numpunct&lt;char&gt;::do_truename() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;char&gt;::do_falsename() const</primary></indexterm>numpunct&lt;char&gt;::do_falsename() const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::numpunct&lt;char&gt;  class
is described by <XREF LINKEND="rtti-24014">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24014">
<TITLE>typeinfo for numpunct&lt;char&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for numpunct&lt;char&gt;</primary></indexterm>typeinfo name for numpunct&lt;char&gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class numpunct&lt;char&gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::numpunct&lt;char&gt; specified in <XREF linkend="tbl-libstdcxx-claug-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-claug-ints">
<TITLE>libstdcxx - Class numpunct&lt;char&gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;char&gt;::numpunct(__locale_struct*, unsigned long)</primary></indexterm>numpunct&lt;char&gt;::numpunct(__locale_struct*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;char&gt;::numpunct(__numpunct_cache&lt;char&gt;*, unsigned long)</primary></indexterm>numpunct&lt;char&gt;::numpunct(__numpunct_cache&lt;char&gt;*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;char&gt;::numpunct(unsigned long)</primary></indexterm>numpunct&lt;char&gt;::numpunct(unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;char&gt;::numpunct(__locale_struct*, unsigned long)</primary></indexterm>numpunct&lt;char&gt;::numpunct(__locale_struct*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;char&gt;::numpunct(__numpunct_cache&lt;char&gt;*, unsigned long)</primary></indexterm>numpunct&lt;char&gt;::numpunct(__numpunct_cache&lt;char&gt;*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;char&gt;::numpunct(unsigned long)</primary></indexterm>numpunct&lt;char&gt;::numpunct(unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::numpunct<wchar_t> -->
<SECT2>
<!--libgroup-->
<TITLE>Class numpunct&lt;wchar_t&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for numpunct&lt;wchar_t&gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::numpunct&lt;wchar_t&gt; class
is described by <XREF LINKEND="cls-24294-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24294-0">
<TITLE>Primary vtable for numpunct&lt;wchar_t&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for numpunct&lt;wchar_t&gt;</primary></indexterm>typeinfo for numpunct&lt;wchar_t&gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;wchar_t&gt;::~numpunct()</primary></indexterm>numpunct&lt;wchar_t&gt;::~numpunct()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;wchar_t&gt;::~numpunct()</primary></indexterm>numpunct&lt;wchar_t&gt;::~numpunct()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;wchar_t&gt;::do_decimal_point() const</primary></indexterm>numpunct&lt;wchar_t&gt;::do_decimal_point() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;wchar_t&gt;::do_thousands_sep() const</primary></indexterm>numpunct&lt;wchar_t&gt;::do_thousands_sep() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;wchar_t&gt;::do_grouping() const</primary></indexterm>numpunct&lt;wchar_t&gt;::do_grouping() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;wchar_t&gt;::do_truename() const</primary></indexterm>numpunct&lt;wchar_t&gt;::do_truename() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;wchar_t&gt;::do_falsename() const</primary></indexterm>numpunct&lt;wchar_t&gt;::do_falsename() const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::numpunct&lt;wchar_t&gt;  class
is described by <XREF LINKEND="rtti-24024">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24024">
<TITLE>typeinfo for numpunct&lt;wchar_t&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for numpunct&lt;wchar_t&gt;</primary></indexterm>typeinfo name for numpunct&lt;wchar_t&gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class numpunct&lt;wchar_t&gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::numpunct&lt;wchar_t&gt; specified in <XREF linkend="tbl-libstdcxx-clauh-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clauh-ints">
<TITLE>libstdcxx - Class numpunct&lt;wchar_t&gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;wchar_t&gt;::numpunct(__locale_struct*, unsigned long)</primary></indexterm>numpunct&lt;wchar_t&gt;::numpunct(__locale_struct*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;wchar_t&gt;::numpunct(unsigned long)</primary></indexterm>numpunct&lt;wchar_t&gt;::numpunct(unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;wchar_t&gt;::numpunct(__locale_struct*, unsigned long)</primary></indexterm>numpunct&lt;wchar_t&gt;::numpunct(__locale_struct*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;wchar_t&gt;::numpunct(unsigned long)</primary></indexterm>numpunct&lt;wchar_t&gt;::numpunct(unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::numpunct_byname<char> -->
<SECT2>
<!--libgroup-->
<TITLE>Class numpunct_byname&lt;char&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for numpunct_byname&lt;char&gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::numpunct_byname&lt;char&gt; class
is described by <XREF LINKEND="cls-24279-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24279-0">
<TITLE>Primary vtable for numpunct_byname&lt;char&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for numpunct_byname&lt;char&gt;</primary></indexterm>typeinfo for numpunct_byname&lt;char&gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>numpunct_byname&lt;char&gt;::~numpunct_byname()</primary></indexterm>numpunct_byname&lt;char&gt;::~numpunct_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>numpunct_byname&lt;char&gt;::~numpunct_byname()</primary></indexterm>numpunct_byname&lt;char&gt;::~numpunct_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;char&gt;::do_decimal_point() const</primary></indexterm>numpunct&lt;char&gt;::do_decimal_point() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;char&gt;::do_thousands_sep() const</primary></indexterm>numpunct&lt;char&gt;::do_thousands_sep() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;char&gt;::do_grouping() const</primary></indexterm>numpunct&lt;char&gt;::do_grouping() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;char&gt;::do_truename() const</primary></indexterm>numpunct&lt;char&gt;::do_truename() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;char&gt;::do_falsename() const</primary></indexterm>numpunct&lt;char&gt;::do_falsename() const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::numpunct_byname&lt;char&gt;  class
is described by <XREF LINKEND="rtti-24079">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24079">
<TITLE>typeinfo for numpunct_byname&lt;char&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for numpunct_byname&lt;char&gt;</primary></indexterm>typeinfo name for numpunct_byname&lt;char&gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class numpunct_byname&lt;char&gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::numpunct_byname&lt;char&gt; specified in <XREF linkend="tbl-libstdcxx-claui-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-claui-ints">
<TITLE>libstdcxx - Class numpunct_byname&lt;char&gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numpunct_byname&lt;char&gt;::numpunct_byname(char const*, unsigned long)</primary></indexterm>numpunct_byname&lt;char&gt;::numpunct_byname(char const*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numpunct_byname&lt;char&gt;::numpunct_byname(char const*, unsigned long)</primary></indexterm>numpunct_byname&lt;char&gt;::numpunct_byname(char const*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::numpunct_byname<wchar_t> -->
<SECT2>
<!--libgroup-->
<TITLE>Class numpunct_byname&lt;wchar_t&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for numpunct_byname&lt;wchar_t&gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::numpunct_byname&lt;wchar_t&gt; class
is described by <XREF LINKEND="cls-24265-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24265-0">
<TITLE>Primary vtable for numpunct_byname&lt;wchar_t&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for numpunct_byname&lt;wchar_t&gt;</primary></indexterm>typeinfo for numpunct_byname&lt;wchar_t&gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>numpunct_byname&lt;wchar_t&gt;::~numpunct_byname()</primary></indexterm>numpunct_byname&lt;wchar_t&gt;::~numpunct_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>numpunct_byname&lt;wchar_t&gt;::~numpunct_byname()</primary></indexterm>numpunct_byname&lt;wchar_t&gt;::~numpunct_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;wchar_t&gt;::do_decimal_point() const</primary></indexterm>numpunct&lt;wchar_t&gt;::do_decimal_point() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;wchar_t&gt;::do_thousands_sep() const</primary></indexterm>numpunct&lt;wchar_t&gt;::do_thousands_sep() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;wchar_t&gt;::do_grouping() const</primary></indexterm>numpunct&lt;wchar_t&gt;::do_grouping() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;wchar_t&gt;::do_truename() const</primary></indexterm>numpunct&lt;wchar_t&gt;::do_truename() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;wchar_t&gt;::do_falsename() const</primary></indexterm>numpunct&lt;wchar_t&gt;::do_falsename() const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::numpunct_byname&lt;wchar_t&gt;  class
is described by <XREF LINKEND="rtti-24067">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24067">
<TITLE>typeinfo for numpunct_byname&lt;wchar_t&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for numpunct_byname&lt;wchar_t&gt;</primary></indexterm>typeinfo name for numpunct_byname&lt;wchar_t&gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class numpunct_byname&lt;wchar_t&gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::numpunct_byname&lt;wchar_t&gt; specified in <XREF linkend="tbl-libstdcxx-clauj-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clauj-ints">
<TITLE>libstdcxx - Class numpunct_byname&lt;wchar_t&gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numpunct_byname&lt;wchar_t&gt;::numpunct_byname(char const*, unsigned long)</primary></indexterm>numpunct_byname&lt;wchar_t&gt;::numpunct_byname(char const*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numpunct_byname&lt;wchar_t&gt;::numpunct_byname(char const*, unsigned long)</primary></indexterm>numpunct_byname&lt;wchar_t&gt;::numpunct_byname(char const*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::__codecvt_abstract_base<char, char, __mbstate_t> -->
<SECT2>
<!--libgroup-->
<TITLE>Class __codecvt_abstract_base&lt;char, char, __mbstate_t&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for Class __codecvt_abstract_base&lt;char, char, __mbstate_t&gt;</TITLE>
<PARA>
No external methods are defined for libstdcxx - Class std::__codecvt_abstract_base&lt;char, char, __mbstate_t&gt;
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::__codecvt_abstract_base<wchar_t, char, __mbstate_t> -->
<SECT2>
<!--libgroup-->
<TITLE>Class __codecvt_abstract_base&lt;wchar_t, char, __mbstate_t&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for __codecvt_abstract_base&lt;wchar_t, char, __mbstate_t&gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::__codecvt_abstract_base&lt;wchar_t, char, __mbstate_t&gt; class
is described by <XREF LINKEND="cls-24296-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24296-0">
<TITLE>Primary vtable for __codecvt_abstract_base&lt;wchar_t, char, __mbstate_t&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for __codecvt_abstract_base&lt;wchar_t, char, __mbstate_t&gt;</primary></indexterm>typeinfo for __codecvt_abstract_base&lt;wchar_t, char, __mbstate_t&gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary></primary></indexterm></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary></primary></indexterm></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class __codecvt_abstract_base&lt;wchar_t, char, __mbstate_t&gt;</TITLE>
<PARA>
No external methods are defined for libstdcxx - Class std::__codecvt_abstract_base&lt;wchar_t, char, __mbstate_t&gt;
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::codecvt_base -->
<SECT2>
<!--libgroup-->
<TITLE>Class codecvt_base</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for codecvt_base</TITLE>
<PARA>
</PARA>
<PARA>
The Run Time Type Information for the std::codecvt_base  class
is described by <XREF LINKEND="rtti-24009">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24009">
<TITLE>typeinfo for codecvt_base</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__class_type_info</primary></indexterm>vtable for __cxxabiv1::__class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for codecvt_base</primary></indexterm>typeinfo name for codecvt_base</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class codecvt_base</TITLE>
<PARA>
No external methods are defined for libstdcxx - Class std::codecvt_base
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::codecvt<char, char, __mbstate_t> -->
<SECT2>
<!--libgroup-->
<TITLE>Class codecvt&lt;char, char, __mbstate_t&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for codecvt&lt;char, char, __mbstate_t&gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::codecvt&lt;char, char, __mbstate_t&gt; class
is described by <XREF LINKEND="cls-24228-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24228-0">
<TITLE>Primary vtable for codecvt&lt;char, char, __mbstate_t&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for codecvt&lt;char, char, __mbstate_t&gt;</primary></indexterm>typeinfo for codecvt&lt;char, char, __mbstate_t&gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;char, char, __mbstate_t&gt;::~codecvt()</primary></indexterm>codecvt&lt;char, char, __mbstate_t&gt;::~codecvt()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;char, char, __mbstate_t&gt;::~codecvt()</primary></indexterm>codecvt&lt;char, char, __mbstate_t&gt;::~codecvt()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;char, char, __mbstate_t&gt;::do_out(__mbstate_t&, char const*, char const*, char const*&, char*, char*, char*&) const</primary></indexterm>codecvt&lt;char, char, __mbstate_t&gt;::do_out(__mbstate_t&, char const*, char const*, char const*&, char*, char*, char*&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;char, char, __mbstate_t&gt;::do_unshift(__mbstate_t&, char*, char*, char*&) const</primary></indexterm>codecvt&lt;char, char, __mbstate_t&gt;::do_unshift(__mbstate_t&, char*, char*, char*&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;char, char, __mbstate_t&gt;::do_in(__mbstate_t&, char const*, char const*, char const*&, char*, char*, char*&) const</primary></indexterm>codecvt&lt;char, char, __mbstate_t&gt;::do_in(__mbstate_t&, char const*, char const*, char const*&, char*, char*, char*&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;char, char, __mbstate_t&gt;::do_encoding() const</primary></indexterm>codecvt&lt;char, char, __mbstate_t&gt;::do_encoding() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;char, char, __mbstate_t&gt;::do_always_noconv() const</primary></indexterm>codecvt&lt;char, char, __mbstate_t&gt;::do_always_noconv() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;char, char, __mbstate_t&gt;::do_length(__mbstate_t&, char const*, char const*, unsigned long) const</primary></indexterm>codecvt&lt;char, char, __mbstate_t&gt;::do_length(__mbstate_t&, char const*, char const*, unsigned long) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;char, char, __mbstate_t&gt;::do_max_length() const</primary></indexterm>codecvt&lt;char, char, __mbstate_t&gt;::do_max_length() const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::codecvt&lt;char, char, __mbstate_t&gt;  class
is described by <XREF LINKEND="rtti-24020">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24020">
<TITLE>typeinfo for codecvt&lt;char, char, __mbstate_t&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for codecvt&lt;char, char, __mbstate_t&gt;</primary></indexterm>typeinfo name for codecvt&lt;char, char, __mbstate_t&gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Class data for __codecvt_abstract_base&lt;char, char, __mbstate_t&gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::__codecvt_abstract_base&lt;char, char, __mbstate_t&gt; class
is described by <XREF LINKEND="cls-24297-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24297-0">
<TITLE>Primary vtable for __codecvt_abstract_base&lt;char, char, __mbstate_t&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for __codecvt_abstract_base&lt;char, char, __mbstate_t&gt;</primary></indexterm>typeinfo for __codecvt_abstract_base&lt;char, char, __mbstate_t&gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary></primary></indexterm></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary></primary></indexterm></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class codecvt&lt;char, char, __mbstate_t&gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::codecvt&lt;char, char, __mbstate_t&gt; specified in <XREF linkend="tbl-libstdcxx-clauk-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clauk-ints">
<TITLE>libstdcxx - Class codecvt&lt;char, char, __mbstate_t&gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;char, char, __mbstate_t&gt;::do_length(__mbstate_t&, char const*, char const*, unsigned long) const</primary></indexterm>codecvt&lt;char, char, __mbstate_t&gt;::do_length(__mbstate_t&, char const*, char const*, unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;char, char, __mbstate_t&gt;::codecvt(__locale_struct*, unsigned long)</primary></indexterm>codecvt&lt;char, char, __mbstate_t&gt;::codecvt(__locale_struct*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;char, char, __mbstate_t&gt;::codecvt(unsigned long)</primary></indexterm>codecvt&lt;char, char, __mbstate_t&gt;::codecvt(unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;char, char, __mbstate_t&gt;::codecvt(__locale_struct*, unsigned long)</primary></indexterm>codecvt&lt;char, char, __mbstate_t&gt;::codecvt(__locale_struct*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;char, char, __mbstate_t&gt;::codecvt(unsigned long)</primary></indexterm>codecvt&lt;char, char, __mbstate_t&gt;::codecvt(unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::codecvt<wchar_t, char, __mbstate_t> -->
<SECT2>
<!--libgroup-->
<TITLE>Class codecvt&lt;wchar_t, char, __mbstate_t&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for codecvt&lt;wchar_t, char, __mbstate_t&gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::codecvt&lt;wchar_t, char, __mbstate_t&gt; class
is described by <XREF LINKEND="cls-24227-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24227-0">
<TITLE>Primary vtable for codecvt&lt;wchar_t, char, __mbstate_t&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for codecvt&lt;wchar_t, char, __mbstate_t&gt;</primary></indexterm>typeinfo for codecvt&lt;wchar_t, char, __mbstate_t&gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;wchar_t, char, __mbstate_t&gt;::~codecvt()</primary></indexterm>codecvt&lt;wchar_t, char, __mbstate_t&gt;::~codecvt()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;wchar_t, char, __mbstate_t&gt;::~codecvt()</primary></indexterm>codecvt&lt;wchar_t, char, __mbstate_t&gt;::~codecvt()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;wchar_t, char, __mbstate_t&gt;::do_out(__mbstate_t&, wchar_t const*, wchar_t const*, wchar_t const*&, char*, char*, char*&) const</primary></indexterm>codecvt&lt;wchar_t, char, __mbstate_t&gt;::do_out(__mbstate_t&, wchar_t const*, wchar_t const*, wchar_t const*&, char*, char*, char*&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;wchar_t, char, __mbstate_t&gt;::do_unshift(__mbstate_t&, char*, char*, char*&) const</primary></indexterm>codecvt&lt;wchar_t, char, __mbstate_t&gt;::do_unshift(__mbstate_t&, char*, char*, char*&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;wchar_t, char, __mbstate_t&gt;::do_in(__mbstate_t&, char const*, char const*, char const*&, wchar_t*, wchar_t*, wchar_t*&) const</primary></indexterm>codecvt&lt;wchar_t, char, __mbstate_t&gt;::do_in(__mbstate_t&, char const*, char const*, char const*&, wchar_t*, wchar_t*, wchar_t*&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;wchar_t, char, __mbstate_t&gt;::do_encoding() const</primary></indexterm>codecvt&lt;wchar_t, char, __mbstate_t&gt;::do_encoding() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;wchar_t, char, __mbstate_t&gt;::do_always_noconv() const</primary></indexterm>codecvt&lt;wchar_t, char, __mbstate_t&gt;::do_always_noconv() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;wchar_t, char, __mbstate_t&gt;::do_length(__mbstate_t&, char const*, char const*, unsigned long) const</primary></indexterm>codecvt&lt;wchar_t, char, __mbstate_t&gt;::do_length(__mbstate_t&, char const*, char const*, unsigned long) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;wchar_t, char, __mbstate_t&gt;::do_max_length() const</primary></indexterm>codecvt&lt;wchar_t, char, __mbstate_t&gt;::do_max_length() const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::codecvt&lt;wchar_t, char, __mbstate_t&gt;  class
is described by <XREF LINKEND="rtti-24028">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24028">
<TITLE>typeinfo for codecvt&lt;wchar_t, char, __mbstate_t&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for codecvt&lt;wchar_t, char, __mbstate_t&gt;</primary></indexterm>typeinfo name for codecvt&lt;wchar_t, char, __mbstate_t&gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class codecvt&lt;wchar_t, char, __mbstate_t&gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::codecvt&lt;wchar_t, char, __mbstate_t&gt; specified in <XREF linkend="tbl-libstdcxx-claul-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-claul-ints">
<TITLE>libstdcxx - Class codecvt&lt;wchar_t, char, __mbstate_t&gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;wchar_t, char, __mbstate_t&gt;::do_length(__mbstate_t&, char const*, char const*, unsigned long) const</primary></indexterm>codecvt&lt;wchar_t, char, __mbstate_t&gt;::do_length(__mbstate_t&, char const*, char const*, unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;wchar_t, char, __mbstate_t&gt;::codecvt(__locale_struct*, unsigned long)</primary></indexterm>codecvt&lt;wchar_t, char, __mbstate_t&gt;::codecvt(__locale_struct*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;wchar_t, char, __mbstate_t&gt;::codecvt(unsigned long)</primary></indexterm>codecvt&lt;wchar_t, char, __mbstate_t&gt;::codecvt(unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;wchar_t, char, __mbstate_t&gt;::codecvt(__locale_struct*, unsigned long)</primary></indexterm>codecvt&lt;wchar_t, char, __mbstate_t&gt;::codecvt(__locale_struct*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;wchar_t, char, __mbstate_t&gt;::codecvt(unsigned long)</primary></indexterm>codecvt&lt;wchar_t, char, __mbstate_t&gt;::codecvt(unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::codecvt_byname<char, char, __mbstate_t> -->
<SECT2>
<!--libgroup-->
<TITLE>Class codecvt_byname&lt;char, char, __mbstate_t&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for codecvt_byname&lt;char, char, __mbstate_t&gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::codecvt_byname&lt;char, char, __mbstate_t&gt; class
is described by <XREF LINKEND="cls-24271-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24271-0">
<TITLE>Primary vtable for codecvt_byname&lt;char, char, __mbstate_t&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for codecvt_byname&lt;char, char, __mbstate_t&gt;</primary></indexterm>typeinfo for codecvt_byname&lt;char, char, __mbstate_t&gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>codecvt_byname&lt;char, char, __mbstate_t&gt;::~codecvt_byname()</primary></indexterm>codecvt_byname&lt;char, char, __mbstate_t&gt;::~codecvt_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>codecvt_byname&lt;char, char, __mbstate_t&gt;::~codecvt_byname()</primary></indexterm>codecvt_byname&lt;char, char, __mbstate_t&gt;::~codecvt_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;char, char, __mbstate_t&gt;::do_out(__mbstate_t&, char const*, char const*, char const*&, char*, char*, char*&) const</primary></indexterm>codecvt&lt;char, char, __mbstate_t&gt;::do_out(__mbstate_t&, char const*, char const*, char const*&, char*, char*, char*&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;char, char, __mbstate_t&gt;::do_unshift(__mbstate_t&, char*, char*, char*&) const</primary></indexterm>codecvt&lt;char, char, __mbstate_t&gt;::do_unshift(__mbstate_t&, char*, char*, char*&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;char, char, __mbstate_t&gt;::do_in(__mbstate_t&, char const*, char const*, char const*&, char*, char*, char*&) const</primary></indexterm>codecvt&lt;char, char, __mbstate_t&gt;::do_in(__mbstate_t&, char const*, char const*, char const*&, char*, char*, char*&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;char, char, __mbstate_t&gt;::do_encoding() const</primary></indexterm>codecvt&lt;char, char, __mbstate_t&gt;::do_encoding() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;char, char, __mbstate_t&gt;::do_always_noconv() const</primary></indexterm>codecvt&lt;char, char, __mbstate_t&gt;::do_always_noconv() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;char, char, __mbstate_t&gt;::do_length(__mbstate_t&, char const*, char const*, unsigned long) const</primary></indexterm>codecvt&lt;char, char, __mbstate_t&gt;::do_length(__mbstate_t&, char const*, char const*, unsigned long) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;char, char, __mbstate_t&gt;::do_max_length() const</primary></indexterm>codecvt&lt;char, char, __mbstate_t&gt;::do_max_length() const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::codecvt_byname&lt;char, char, __mbstate_t&gt;  class
is described by <XREF LINKEND="rtti-24073">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24073">
<TITLE>typeinfo for codecvt_byname&lt;char, char, __mbstate_t&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for codecvt_byname&lt;char, char, __mbstate_t&gt;</primary></indexterm>typeinfo name for codecvt_byname&lt;char, char, __mbstate_t&gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class codecvt_byname&lt;char, char, __mbstate_t&gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::codecvt_byname&lt;char, char, __mbstate_t&gt; specified in <XREF linkend="tbl-libstdcxx-claum-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-claum-ints">
<TITLE>libstdcxx - Class codecvt_byname&lt;char, char, __mbstate_t&gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>codecvt_byname&lt;char, char, __mbstate_t&gt;::codecvt_byname(char const*, unsigned long)</primary></indexterm>codecvt_byname&lt;char, char, __mbstate_t&gt;::codecvt_byname(char const*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>codecvt_byname&lt;char, char, __mbstate_t&gt;::codecvt_byname(char const*, unsigned long)</primary></indexterm>codecvt_byname&lt;char, char, __mbstate_t&gt;::codecvt_byname(char const*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::codecvt_byname<wchar_t, char, __mbstate_t> -->
<SECT2>
<!--libgroup-->
<TITLE>Class codecvt_byname&lt;wchar_t, char, __mbstate_t&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for codecvt_byname&lt;wchar_t, char, __mbstate_t&gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::codecvt_byname&lt;wchar_t, char, __mbstate_t&gt; class
is described by <XREF LINKEND="cls-24257-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24257-0">
<TITLE>Primary vtable for codecvt_byname&lt;wchar_t, char, __mbstate_t&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for codecvt_byname&lt;wchar_t, char, __mbstate_t&gt;</primary></indexterm>typeinfo for codecvt_byname&lt;wchar_t, char, __mbstate_t&gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>codecvt_byname&lt;wchar_t, char, __mbstate_t&gt;::~codecvt_byname()</primary></indexterm>codecvt_byname&lt;wchar_t, char, __mbstate_t&gt;::~codecvt_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>codecvt_byname&lt;wchar_t, char, __mbstate_t&gt;::~codecvt_byname()</primary></indexterm>codecvt_byname&lt;wchar_t, char, __mbstate_t&gt;::~codecvt_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;wchar_t, char, __mbstate_t&gt;::do_out(__mbstate_t&, wchar_t const*, wchar_t const*, wchar_t const*&, char*, char*, char*&) const</primary></indexterm>codecvt&lt;wchar_t, char, __mbstate_t&gt;::do_out(__mbstate_t&, wchar_t const*, wchar_t const*, wchar_t const*&, char*, char*, char*&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;wchar_t, char, __mbstate_t&gt;::do_unshift(__mbstate_t&, char*, char*, char*&) const</primary></indexterm>codecvt&lt;wchar_t, char, __mbstate_t&gt;::do_unshift(__mbstate_t&, char*, char*, char*&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;wchar_t, char, __mbstate_t&gt;::do_in(__mbstate_t&, char const*, char const*, char const*&, wchar_t*, wchar_t*, wchar_t*&) const</primary></indexterm>codecvt&lt;wchar_t, char, __mbstate_t&gt;::do_in(__mbstate_t&, char const*, char const*, char const*&, wchar_t*, wchar_t*, wchar_t*&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;wchar_t, char, __mbstate_t&gt;::do_encoding() const</primary></indexterm>codecvt&lt;wchar_t, char, __mbstate_t&gt;::do_encoding() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;wchar_t, char, __mbstate_t&gt;::do_always_noconv() const</primary></indexterm>codecvt&lt;wchar_t, char, __mbstate_t&gt;::do_always_noconv() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;wchar_t, char, __mbstate_t&gt;::do_length(__mbstate_t&, char const*, char const*, unsigned long) const</primary></indexterm>codecvt&lt;wchar_t, char, __mbstate_t&gt;::do_length(__mbstate_t&, char const*, char const*, unsigned long) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;wchar_t, char, __mbstate_t&gt;::do_max_length() const</primary></indexterm>codecvt&lt;wchar_t, char, __mbstate_t&gt;::do_max_length() const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::codecvt_byname&lt;wchar_t, char, __mbstate_t&gt;  class
is described by <XREF LINKEND="rtti-24061">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24061">
<TITLE>typeinfo for codecvt_byname&lt;wchar_t, char, __mbstate_t&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for codecvt_byname&lt;wchar_t, char, __mbstate_t&gt;</primary></indexterm>typeinfo name for codecvt_byname&lt;wchar_t, char, __mbstate_t&gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Class data for collate_byname&lt;wchar_t&gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::collate_byname&lt;wchar_t&gt; class
is described by <XREF LINKEND="cls-24256-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24256-0">
<TITLE>Primary vtable for collate_byname&lt;wchar_t&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for collate_byname&lt;wchar_t&gt;</primary></indexterm>typeinfo for collate_byname&lt;wchar_t&gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>collate_byname&lt;wchar_t&gt;::~collate_byname()</primary></indexterm>collate_byname&lt;wchar_t&gt;::~collate_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>collate_byname&lt;wchar_t&gt;::~collate_byname()</primary></indexterm>collate_byname&lt;wchar_t&gt;::~collate_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>collate&lt;wchar_t&gt;::do_compare(wchar_t const*, wchar_t const*, wchar_t const*, wchar_t const*) const</primary></indexterm>collate&lt;wchar_t&gt;::do_compare(wchar_t const*, wchar_t const*, wchar_t const*, wchar_t const*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>collate&lt;wchar_t&gt;::do_transform(wchar_t const*, wchar_t const*) const</primary></indexterm>collate&lt;wchar_t&gt;::do_transform(wchar_t const*, wchar_t const*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>collate&lt;wchar_t&gt;::do_hash(wchar_t const*, wchar_t const*) const</primary></indexterm>collate&lt;wchar_t&gt;::do_hash(wchar_t const*, wchar_t const*) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::collate_byname&lt;wchar_t&gt;  class
is described by <XREF LINKEND="rtti-24060">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24060">
<TITLE>typeinfo for collate_byname&lt;wchar_t&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for collate_byname&lt;wchar_t&gt;</primary></indexterm>typeinfo name for collate_byname&lt;wchar_t&gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class codecvt_byname&lt;wchar_t, char, __mbstate_t&gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::codecvt_byname&lt;wchar_t, char, __mbstate_t&gt; specified in <XREF linkend="tbl-libstdcxx-claun-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-claun-ints">
<TITLE>libstdcxx - Class codecvt_byname&lt;wchar_t, char, __mbstate_t&gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>codecvt_byname&lt;wchar_t, char, __mbstate_t&gt;::codecvt_byname(char const*, unsigned long)</primary></indexterm>codecvt_byname&lt;wchar_t, char, __mbstate_t&gt;::codecvt_byname(char const*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>codecvt_byname&lt;wchar_t, char, __mbstate_t&gt;::codecvt_byname(char const*, unsigned long)</primary></indexterm>codecvt_byname&lt;wchar_t, char, __mbstate_t&gt;::codecvt_byname(char const*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>collate_byname&lt;wchar_t&gt;::collate_byname(char const*, unsigned long)</primary></indexterm>collate_byname&lt;wchar_t&gt;::collate_byname(char const*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>collate_byname&lt;wchar_t&gt;::collate_byname(char const*, unsigned long)</primary></indexterm>collate_byname&lt;wchar_t&gt;::collate_byname(char const*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::collate<char> -->
<SECT2>
<!--libgroup-->
<TITLE>Class collate&lt;char&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for collate&lt;char&gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::collate&lt;char&gt; class
is described by <XREF LINKEND="cls-24293-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24293-0">
<TITLE>Primary vtable for collate&lt;char&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for collate&lt;char&gt;</primary></indexterm>typeinfo for collate&lt;char&gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>collate&lt;char&gt;::~collate()</primary></indexterm>collate&lt;char&gt;::~collate()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>collate&lt;char&gt;::~collate()</primary></indexterm>collate&lt;char&gt;::~collate()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>collate&lt;char&gt;::do_compare(char const*, char const*, char const*, char const*) const</primary></indexterm>collate&lt;char&gt;::do_compare(char const*, char const*, char const*, char const*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>collate&lt;char&gt;::do_transform(char const*, char const*) const</primary></indexterm>collate&lt;char&gt;::do_transform(char const*, char const*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>collate&lt;char&gt;::do_hash(char const*, char const*) const</primary></indexterm>collate&lt;char&gt;::do_hash(char const*, char const*) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::collate&lt;char&gt;  class
is described by <XREF LINKEND="rtti-24021">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24021">
<TITLE>typeinfo for collate&lt;char&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for collate&lt;char&gt;</primary></indexterm>typeinfo name for collate&lt;char&gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class collate&lt;char&gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::collate&lt;char&gt; specified in <XREF linkend="tbl-libstdcxx-clauo-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clauo-ints">
<TITLE>libstdcxx - Class collate&lt;char&gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>collate&lt;char&gt;::_M_transform(char*, char const*, unsigned long) const</primary></indexterm>collate&lt;char&gt;::_M_transform(char*, char const*, unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>collate&lt;char&gt;::collate(__locale_struct*, unsigned long)</primary></indexterm>collate&lt;char&gt;::collate(__locale_struct*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>collate&lt;char&gt;::collate(unsigned long)</primary></indexterm>collate&lt;char&gt;::collate(unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>collate&lt;char&gt;::collate(__locale_struct*, unsigned long)</primary></indexterm>collate&lt;char&gt;::collate(__locale_struct*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>collate&lt;char&gt;::collate(unsigned long)</primary></indexterm>collate&lt;char&gt;::collate(unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::collate<wchar_t> -->
<SECT2>
<!--libgroup-->
<TITLE>Class collate&lt;wchar_t&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for collate&lt;wchar_t&gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::collate&lt;wchar_t&gt; class
is described by <XREF LINKEND="cls-24292-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24292-0">
<TITLE>Primary vtable for collate&lt;wchar_t&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for collate&lt;wchar_t&gt;</primary></indexterm>typeinfo for collate&lt;wchar_t&gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>collate&lt;wchar_t&gt;::~collate()</primary></indexterm>collate&lt;wchar_t&gt;::~collate()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>collate&lt;wchar_t&gt;::~collate()</primary></indexterm>collate&lt;wchar_t&gt;::~collate()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>collate&lt;wchar_t&gt;::do_compare(wchar_t const*, wchar_t const*, wchar_t const*, wchar_t const*) const</primary></indexterm>collate&lt;wchar_t&gt;::do_compare(wchar_t const*, wchar_t const*, wchar_t const*, wchar_t const*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>collate&lt;wchar_t&gt;::do_transform(wchar_t const*, wchar_t const*) const</primary></indexterm>collate&lt;wchar_t&gt;::do_transform(wchar_t const*, wchar_t const*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>collate&lt;wchar_t&gt;::do_hash(wchar_t const*, wchar_t const*) const</primary></indexterm>collate&lt;wchar_t&gt;::do_hash(wchar_t const*, wchar_t const*) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::collate&lt;wchar_t&gt;  class
is described by <XREF LINKEND="rtti-24029">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24029">
<TITLE>typeinfo for collate&lt;wchar_t&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for collate&lt;wchar_t&gt;</primary></indexterm>typeinfo name for collate&lt;wchar_t&gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class collate&lt;wchar_t&gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::collate&lt;wchar_t&gt; specified in <XREF linkend="tbl-libstdcxx-claup-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-claup-ints">
<TITLE>libstdcxx - Class collate&lt;wchar_t&gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>collate&lt;wchar_t&gt;::_M_transform(wchar_t*, wchar_t const*, unsigned long) const</primary></indexterm>collate&lt;wchar_t&gt;::_M_transform(wchar_t*, wchar_t const*, unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>collate&lt;wchar_t&gt;::collate(__locale_struct*, unsigned long)</primary></indexterm>collate&lt;wchar_t&gt;::collate(__locale_struct*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>collate&lt;wchar_t&gt;::collate(unsigned long)</primary></indexterm>collate&lt;wchar_t&gt;::collate(unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>collate&lt;wchar_t&gt;::collate(__locale_struct*, unsigned long)</primary></indexterm>collate&lt;wchar_t&gt;::collate(__locale_struct*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>collate&lt;wchar_t&gt;::collate(unsigned long)</primary></indexterm>collate&lt;wchar_t&gt;::collate(unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::collate_byname<char> -->
<SECT2>
<!--libgroup-->
<TITLE>Class collate_byname&lt;char&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for collate_byname&lt;char&gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::collate_byname&lt;char&gt; class
is described by <XREF LINKEND="cls-24270-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24270-0">
<TITLE>Primary vtable for collate_byname&lt;char&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for collate_byname&lt;char&gt;</primary></indexterm>typeinfo for collate_byname&lt;char&gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>collate_byname&lt;char&gt;::~collate_byname()</primary></indexterm>collate_byname&lt;char&gt;::~collate_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>collate_byname&lt;char&gt;::~collate_byname()</primary></indexterm>collate_byname&lt;char&gt;::~collate_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>collate&lt;char&gt;::do_compare(char const*, char const*, char const*, char const*) const</primary></indexterm>collate&lt;char&gt;::do_compare(char const*, char const*, char const*, char const*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>collate&lt;char&gt;::do_transform(char const*, char const*) const</primary></indexterm>collate&lt;char&gt;::do_transform(char const*, char const*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>collate&lt;char&gt;::do_hash(char const*, char const*) const</primary></indexterm>collate&lt;char&gt;::do_hash(char const*, char const*) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::collate_byname&lt;char&gt;  class
is described by <XREF LINKEND="rtti-24072">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24072">
<TITLE>typeinfo for collate_byname&lt;char&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for collate_byname&lt;char&gt;</primary></indexterm>typeinfo name for collate_byname&lt;char&gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class collate_byname&lt;char&gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::collate_byname&lt;char&gt; specified in <XREF linkend="tbl-libstdcxx-clauq-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clauq-ints">
<TITLE>libstdcxx - Class collate_byname&lt;char&gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>collate_byname&lt;char&gt;::collate_byname(char const*, unsigned long)</primary></indexterm>collate_byname&lt;char&gt;::collate_byname(char const*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>collate_byname&lt;char&gt;::collate_byname(char const*, unsigned long)</primary></indexterm>collate_byname&lt;char&gt;::collate_byname(char const*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::collate_byname<wchar_t> -->
<SECT2>
<!--libgroup-->
<TITLE>Class collate_byname&lt;wchar_t&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for Class collate_byname&lt;wchar_t&gt;</TITLE>
<PARA>
No external methods are defined for libstdcxx - Class std::collate_byname&lt;wchar_t&gt;
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::time_base -->
<SECT2>
<!--libgroup-->
<TITLE>Class time_base</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for time_base</TITLE>
<PARA>
</PARA>
<PARA>
The Run Time Type Information for the std::time_base  class
is described by <XREF LINKEND="rtti-24016">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24016">
<TITLE>typeinfo for time_base</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__class_type_info</primary></indexterm>vtable for __cxxabiv1::__class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for time_base</primary></indexterm>typeinfo name for time_base</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class time_base</TITLE>
<PARA>
No external methods are defined for libstdcxx - Class std::time_base
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::time_get_byname<char, std::istreambuf_iterator<char, std::char_traits<char> > > -->
<SECT2>
<!--libgroup-->
<TITLE>Class time_get_byname&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for time_get_byname&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::time_get_byname&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; class
is described by <XREF LINKEND="cls-24273-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24273-0">
<TITLE>Primary vtable for time_get_byname&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for time_get_byname&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</primary></indexterm>typeinfo for time_get_byname&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_get_byname&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~time_get_byname()</primary></indexterm>time_get_byname&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~time_get_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_get_byname&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~time_get_byname()</primary></indexterm>time_get_byname&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~time_get_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_date_order() const</primary></indexterm>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_date_order() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get_time(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</primary></indexterm>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get_time(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get_date(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</primary></indexterm>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get_date(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get_weekday(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</primary></indexterm>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get_weekday(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get_monthname(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</primary></indexterm>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get_monthname(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get_year(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</primary></indexterm>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get_year(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::time_get_byname&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;  class
is described by <XREF LINKEND="rtti-24075">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24075">
<TITLE>typeinfo for time_get_byname&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for time_get_byname&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</primary></indexterm>typeinfo name for time_get_byname&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class time_get_byname&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::time_get_byname&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; specified in <XREF linkend="tbl-libstdcxx-claur-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-claur-ints">
<TITLE>libstdcxx - Class time_get_byname&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_get_byname&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::time_get_byname(char const*, unsigned long)</primary></indexterm>time_get_byname&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::time_get_byname(char const*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_get_byname&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::time_get_byname(char const*, unsigned long)</primary></indexterm>time_get_byname&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::time_get_byname(char const*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::time_get_byname<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > -->
<SECT2>
<!--libgroup-->
<TITLE>Class time_get_byname&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for time_get_byname&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::time_get_byname&lt;wchar_t, std::istreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; &gt; class
is described by <XREF LINKEND="cls-24259-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24259-0">
<TITLE>Primary vtable for time_get_byname&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for time_get_byname&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</primary></indexterm>typeinfo for time_get_byname&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_get_byname&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~time_get_byname()</primary></indexterm>time_get_byname&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~time_get_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_get_byname&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~time_get_byname()</primary></indexterm>time_get_byname&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~time_get_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_date_order() const</primary></indexterm>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_date_order() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get_time(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</primary></indexterm>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get_time(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get_date(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</primary></indexterm>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get_date(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get_weekday(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</primary></indexterm>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get_weekday(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get_monthname(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</primary></indexterm>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get_monthname(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get_year(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</primary></indexterm>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get_year(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::time_get_byname&lt;wchar_t, std::istreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; &gt;  class
is described by <XREF LINKEND="rtti-24063">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24063">
<TITLE>typeinfo for time_get_byname&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for time_get_byname&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</primary></indexterm>typeinfo name for time_get_byname&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class time_get_byname&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::time_get_byname&lt;wchar_t, std::istreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; &gt; specified in <XREF linkend="tbl-libstdcxx-claus-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-claus-ints">
<TITLE>libstdcxx - Class time_get_byname&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_get_byname&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::time_get_byname(char const*, unsigned long)</primary></indexterm>time_get_byname&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::time_get_byname(char const*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_get_byname&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::time_get_byname(char const*, unsigned long)</primary></indexterm>time_get_byname&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::time_get_byname(char const*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::time_put_byname<char, std::ostreambuf_iterator<char, std::char_traits<char> > > -->
<SECT2>
<!--libgroup-->
<TITLE>Class time_put_byname&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for time_put_byname&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::time_put_byname&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; class
is described by <XREF LINKEND="cls-24275-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24275-0">
<TITLE>Primary vtable for time_put_byname&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for time_put_byname&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</primary></indexterm>typeinfo for time_put_byname&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_put_byname&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~time_put_byname()</primary></indexterm>time_put_byname&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~time_put_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_put_byname&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~time_put_byname()</primary></indexterm>time_put_byname&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~time_put_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, tm const*, char, char) const</primary></indexterm>time_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, tm const*, char, char) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::time_put_byname&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;  class
is described by <XREF LINKEND="rtti-24076">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24076">
<TITLE>typeinfo for time_put_byname&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for time_put_byname&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</primary></indexterm>typeinfo name for time_put_byname&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class time_put_byname&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::time_put_byname&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; specified in <XREF linkend="tbl-libstdcxx-claut-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-claut-ints">
<TITLE>libstdcxx - Class time_put_byname&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_put_byname&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::time_put_byname(char const*, unsigned long)</primary></indexterm>time_put_byname&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::time_put_byname(char const*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_put_byname&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::time_put_byname(char const*, unsigned long)</primary></indexterm>time_put_byname&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::time_put_byname(char const*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::time_put_byname<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > -->
<SECT2>
<!--libgroup-->
<TITLE>Class time_put_byname&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for time_put_byname&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::time_put_byname&lt;wchar_t, std::ostreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; &gt; class
is described by <XREF LINKEND="cls-24261-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24261-0">
<TITLE>Primary vtable for time_put_byname&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for time_put_byname&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</primary></indexterm>typeinfo for time_put_byname&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_put_byname&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~time_put_byname()</primary></indexterm>time_put_byname&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~time_put_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_put_byname&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~time_put_byname()</primary></indexterm>time_put_byname&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~time_put_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, tm const*, char, char) const</primary></indexterm>time_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, tm const*, char, char) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::time_put_byname&lt;wchar_t, std::ostreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; &gt;  class
is described by <XREF LINKEND="rtti-24064">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24064">
<TITLE>typeinfo for time_put_byname&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for time_put_byname&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</primary></indexterm>typeinfo name for time_put_byname&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class time_put_byname&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::time_put_byname&lt;wchar_t, std::ostreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clauu-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clauu-ints">
<TITLE>libstdcxx - Class time_put_byname&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_put_byname&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::time_put_byname(char const*, unsigned long)</primary></indexterm>time_put_byname&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::time_put_byname(char const*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_put_byname&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::time_put_byname(char const*, unsigned long)</primary></indexterm>time_put_byname&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::time_put_byname(char const*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > > -->
<SECT2>
<!--libgroup-->
<TITLE>Class time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::time_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; class
is described by <XREF LINKEND="cls-24274-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24274-0">
<TITLE>Primary vtable for time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</primary></indexterm>typeinfo for time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~time_get()</primary></indexterm>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~time_get()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~time_get()</primary></indexterm>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~time_get()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_date_order() const</primary></indexterm>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_date_order() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get_time(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</primary></indexterm>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get_time(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get_date(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</primary></indexterm>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get_date(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get_weekday(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</primary></indexterm>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get_weekday(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get_monthname(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</primary></indexterm>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get_monthname(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get_year(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</primary></indexterm>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get_year(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::time_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clauv-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clauv-ints">
<TITLE>libstdcxx - Class time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::_M_extract_num(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, int&, int, int, unsigned long, ios_base&, _Ios_Iostate&) const</primary></indexterm>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::_M_extract_num(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, int&, int, int, unsigned long, ios_base&, _Ios_Iostate&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::_M_extract_name(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, int&, char const**, unsigned long, ios_base&, _Ios_Iostate&) const</primary></indexterm>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::_M_extract_name(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, int&, char const**, unsigned long, ios_base&, _Ios_Iostate&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::time_get(unsigned long)</primary></indexterm>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::time_get(unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::time_get(unsigned long)</primary></indexterm>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::time_get(unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > -->
<SECT2>
<!--libgroup-->
<TITLE>Class time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::time_get&lt;wchar_t, std::istreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; &gt; class
is described by <XREF LINKEND="cls-24260-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24260-0">
<TITLE>Primary vtable for time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</primary></indexterm>typeinfo for time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~time_get()</primary></indexterm>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~time_get()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~time_get()</primary></indexterm>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~time_get()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_date_order() const</primary></indexterm>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_date_order() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get_time(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</primary></indexterm>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get_time(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get_date(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</primary></indexterm>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get_date(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get_weekday(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</primary></indexterm>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get_weekday(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get_monthname(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</primary></indexterm>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get_monthname(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get_year(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</primary></indexterm>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get_year(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::time_get&lt;wchar_t, std::istreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clauw-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clauw-ints">
<TITLE>libstdcxx - Class time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::_M_extract_num(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, int&, int, int, unsigned long, ios_base&, _Ios_Iostate&) const</primary></indexterm>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::_M_extract_num(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, int&, int, int, unsigned long, ios_base&, _Ios_Iostate&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::_M_extract_name(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, int&, wchar_t const**, unsigned long, ios_base&, _Ios_Iostate&) const</primary></indexterm>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::_M_extract_name(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, int&, wchar_t const**, unsigned long, ios_base&, _Ios_Iostate&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::time_get(unsigned long)</primary></indexterm>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::time_get(unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::time_get(unsigned long)</primary></indexterm>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::time_get(unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::time_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > > -->
<SECT2>
<!--libgroup-->
<TITLE>Class time_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for Class time_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::time_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; specified in <XREF linkend="tbl-libstdcxx-claux-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-claux-ints">
<TITLE>libstdcxx - Class time_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::time_put(unsigned long)</primary></indexterm>time_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::time_put(unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::time_put(unsigned long)</primary></indexterm>time_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::time_put(unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::time_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > -->
<SECT2>
<!--libgroup-->
<TITLE>Class time_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for Class time_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::time_put&lt;wchar_t, std::ostreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clauy-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clauy-ints">
<TITLE>libstdcxx - Class time_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::time_put(unsigned long)</primary></indexterm>time_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::time_put(unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::time_put(unsigned long)</primary></indexterm>time_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::time_put(unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::moneypunct<char, false> -->
<SECT2>
<!--libgroup-->
<TITLE>Class moneypunct&lt;char, false&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for moneypunct&lt;char, false&gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::moneypunct&lt;char, false&gt; class
is described by <XREF LINKEND="cls-24288-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24288-0">
<TITLE>Primary vtable for moneypunct&lt;char, false&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for moneypunct&lt;char, false&gt;</primary></indexterm>typeinfo for moneypunct&lt;char, false&gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::~moneypunct()</primary></indexterm>moneypunct&lt;char, false&gt;::~moneypunct()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::~moneypunct()</primary></indexterm>moneypunct&lt;char, false&gt;::~moneypunct()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::do_decimal_point() const</primary></indexterm>moneypunct&lt;char, false&gt;::do_decimal_point() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::do_thousands_sep() const</primary></indexterm>moneypunct&lt;char, false&gt;::do_thousands_sep() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::do_grouping() const</primary></indexterm>moneypunct&lt;char, false&gt;::do_grouping() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::do_curr_symbol() const</primary></indexterm>moneypunct&lt;char, false&gt;::do_curr_symbol() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::do_positive_sign() const</primary></indexterm>moneypunct&lt;char, false&gt;::do_positive_sign() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::do_negative_sign() const</primary></indexterm>moneypunct&lt;char, false&gt;::do_negative_sign() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::do_frac_digits() const</primary></indexterm>moneypunct&lt;char, false&gt;::do_frac_digits() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::do_pos_format() const</primary></indexterm>moneypunct&lt;char, false&gt;::do_pos_format() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::do_neg_format() const</primary></indexterm>moneypunct&lt;char, false&gt;::do_neg_format() const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class moneypunct&lt;char, false&gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::moneypunct&lt;char, false&gt; specified in <XREF linkend="tbl-libstdcxx-clauz-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clauz-ints">
<TITLE>libstdcxx - Class moneypunct&lt;char, false&gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::moneypunct(__locale_struct*, char const*, unsigned long)</primary></indexterm>moneypunct&lt;char, false&gt;::moneypunct(__locale_struct*, char const*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::moneypunct(__moneypunct_cache&lt;char, false&gt;*, unsigned long)</primary></indexterm>moneypunct&lt;char, false&gt;::moneypunct(__moneypunct_cache&lt;char, false&gt;*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::moneypunct(unsigned long)</primary></indexterm>moneypunct&lt;char, false&gt;::moneypunct(unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::moneypunct(__locale_struct*, char const*, unsigned long)</primary></indexterm>moneypunct&lt;char, false&gt;::moneypunct(__locale_struct*, char const*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::moneypunct(__moneypunct_cache&lt;char, false&gt;*, unsigned long)</primary></indexterm>moneypunct&lt;char, false&gt;::moneypunct(__moneypunct_cache&lt;char, false&gt;*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::moneypunct(unsigned long)</primary></indexterm>moneypunct&lt;char, false&gt;::moneypunct(unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::moneypunct<char, true> -->
<SECT2>
<!--libgroup-->
<TITLE>Class moneypunct&lt;char, true&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for moneypunct&lt;char, true&gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::moneypunct&lt;char, true&gt; class
is described by <XREF LINKEND="cls-24289-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24289-0">
<TITLE>Primary vtable for moneypunct&lt;char, true&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for moneypunct&lt;char, true&gt;</primary></indexterm>typeinfo for moneypunct&lt;char, true&gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::~moneypunct()</primary></indexterm>moneypunct&lt;char, true&gt;::~moneypunct()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::~moneypunct()</primary></indexterm>moneypunct&lt;char, true&gt;::~moneypunct()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::do_decimal_point() const</primary></indexterm>moneypunct&lt;char, true&gt;::do_decimal_point() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::do_thousands_sep() const</primary></indexterm>moneypunct&lt;char, true&gt;::do_thousands_sep() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::do_grouping() const</primary></indexterm>moneypunct&lt;char, true&gt;::do_grouping() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::do_curr_symbol() const</primary></indexterm>moneypunct&lt;char, true&gt;::do_curr_symbol() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::do_positive_sign() const</primary></indexterm>moneypunct&lt;char, true&gt;::do_positive_sign() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::do_negative_sign() const</primary></indexterm>moneypunct&lt;char, true&gt;::do_negative_sign() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::do_frac_digits() const</primary></indexterm>moneypunct&lt;char, true&gt;::do_frac_digits() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::do_pos_format() const</primary></indexterm>moneypunct&lt;char, true&gt;::do_pos_format() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::do_neg_format() const</primary></indexterm>moneypunct&lt;char, true&gt;::do_neg_format() const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class moneypunct&lt;char, true&gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::moneypunct&lt;char, true&gt; specified in <XREF linkend="tbl-libstdcxx-clava-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clava-ints">
<TITLE>libstdcxx - Class moneypunct&lt;char, true&gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::moneypunct(__locale_struct*, char const*, unsigned long)</primary></indexterm>moneypunct&lt;char, true&gt;::moneypunct(__locale_struct*, char const*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::moneypunct(__moneypunct_cache&lt;char, true&gt;*, unsigned long)</primary></indexterm>moneypunct&lt;char, true&gt;::moneypunct(__moneypunct_cache&lt;char, true&gt;*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::moneypunct(unsigned long)</primary></indexterm>moneypunct&lt;char, true&gt;::moneypunct(unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::moneypunct(__locale_struct*, char const*, unsigned long)</primary></indexterm>moneypunct&lt;char, true&gt;::moneypunct(__locale_struct*, char const*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::moneypunct(__moneypunct_cache&lt;char, true&gt;*, unsigned long)</primary></indexterm>moneypunct&lt;char, true&gt;::moneypunct(__moneypunct_cache&lt;char, true&gt;*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::moneypunct(unsigned long)</primary></indexterm>moneypunct&lt;char, true&gt;::moneypunct(unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::moneypunct<wchar_t, false> -->
<SECT2>
<!--libgroup-->
<TITLE>Class moneypunct&lt;wchar_t, false&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for moneypunct&lt;wchar_t, false&gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::moneypunct&lt;wchar_t, false&gt; class
is described by <XREF LINKEND="cls-24286-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24286-0">
<TITLE>Primary vtable for moneypunct&lt;wchar_t, false&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for moneypunct&lt;wchar_t, false&gt;</primary></indexterm>typeinfo for moneypunct&lt;wchar_t, false&gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::~moneypunct()</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::~moneypunct()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::~moneypunct()</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::~moneypunct()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::do_decimal_point() const</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::do_decimal_point() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::do_thousands_sep() const</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::do_thousands_sep() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::do_grouping() const</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::do_grouping() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::do_curr_symbol() const</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::do_curr_symbol() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::do_positive_sign() const</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::do_positive_sign() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::do_negative_sign() const</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::do_negative_sign() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::do_frac_digits() const</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::do_frac_digits() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::do_pos_format() const</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::do_pos_format() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::do_neg_format() const</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::do_neg_format() const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class moneypunct&lt;wchar_t, false&gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::moneypunct&lt;wchar_t, false&gt; specified in <XREF linkend="tbl-libstdcxx-clavb-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clavb-ints">
<TITLE>libstdcxx - Class moneypunct&lt;wchar_t, false&gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::moneypunct(__locale_struct*, char const*, unsigned long)</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::moneypunct(__locale_struct*, char const*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::moneypunct(__moneypunct_cache&lt;wchar_t, false&gt;*, unsigned long)</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::moneypunct(__moneypunct_cache&lt;wchar_t, false&gt;*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::moneypunct(unsigned long)</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::moneypunct(unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::moneypunct(__locale_struct*, char const*, unsigned long)</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::moneypunct(__locale_struct*, char const*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::moneypunct(__moneypunct_cache&lt;wchar_t, false&gt;*, unsigned long)</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::moneypunct(__moneypunct_cache&lt;wchar_t, false&gt;*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::moneypunct(unsigned long)</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::moneypunct(unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::moneypunct<wchar_t, true> -->
<SECT2>
<!--libgroup-->
<TITLE>Class moneypunct&lt;wchar_t, true&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for moneypunct&lt;wchar_t, true&gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::moneypunct&lt;wchar_t, true&gt; class
is described by <XREF LINKEND="cls-24287-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24287-0">
<TITLE>Primary vtable for moneypunct&lt;wchar_t, true&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for moneypunct&lt;wchar_t, true&gt;</primary></indexterm>typeinfo for moneypunct&lt;wchar_t, true&gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::~moneypunct()</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::~moneypunct()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::~moneypunct()</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::~moneypunct()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::do_decimal_point() const</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::do_decimal_point() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::do_thousands_sep() const</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::do_thousands_sep() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::do_grouping() const</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::do_grouping() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::do_curr_symbol() const</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::do_curr_symbol() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::do_positive_sign() const</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::do_positive_sign() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::do_negative_sign() const</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::do_negative_sign() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::do_frac_digits() const</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::do_frac_digits() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::do_pos_format() const</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::do_pos_format() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::do_neg_format() const</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::do_neg_format() const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class moneypunct&lt;wchar_t, true&gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::moneypunct&lt;wchar_t, true&gt; specified in <XREF linkend="tbl-libstdcxx-clavc-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clavc-ints">
<TITLE>libstdcxx - Class moneypunct&lt;wchar_t, true&gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::moneypunct(__locale_struct*, char const*, unsigned long)</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::moneypunct(__locale_struct*, char const*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::moneypunct(__moneypunct_cache&lt;wchar_t, true&gt;*, unsigned long)</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::moneypunct(__moneypunct_cache&lt;wchar_t, true&gt;*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::moneypunct(unsigned long)</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::moneypunct(unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::moneypunct(__locale_struct*, char const*, unsigned long)</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::moneypunct(__locale_struct*, char const*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::moneypunct(__moneypunct_cache&lt;wchar_t, true&gt;*, unsigned long)</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::moneypunct(__moneypunct_cache&lt;wchar_t, true&gt;*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::moneypunct(unsigned long)</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::moneypunct(unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::moneypunct_byname<char, false> -->
<SECT2>
<!--libgroup-->
<TITLE>Class moneypunct_byname&lt;char, false&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for moneypunct_byname&lt;char, false&gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::moneypunct_byname&lt;char, false&gt; class
is described by <XREF LINKEND="cls-24283-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24283-0">
<TITLE>Primary vtable for moneypunct_byname&lt;char, false&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for moneypunct_byname&lt;char, false&gt;</primary></indexterm>typeinfo for moneypunct_byname&lt;char, false&gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct_byname&lt;char, false&gt;::~moneypunct_byname()</primary></indexterm>moneypunct_byname&lt;char, false&gt;::~moneypunct_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct_byname&lt;char, false&gt;::~moneypunct_byname()</primary></indexterm>moneypunct_byname&lt;char, false&gt;::~moneypunct_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::do_decimal_point() const</primary></indexterm>moneypunct&lt;char, false&gt;::do_decimal_point() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::do_thousands_sep() const</primary></indexterm>moneypunct&lt;char, false&gt;::do_thousands_sep() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::do_grouping() const</primary></indexterm>moneypunct&lt;char, false&gt;::do_grouping() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::do_curr_symbol() const</primary></indexterm>moneypunct&lt;char, false&gt;::do_curr_symbol() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::do_positive_sign() const</primary></indexterm>moneypunct&lt;char, false&gt;::do_positive_sign() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::do_negative_sign() const</primary></indexterm>moneypunct&lt;char, false&gt;::do_negative_sign() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::do_frac_digits() const</primary></indexterm>moneypunct&lt;char, false&gt;::do_frac_digits() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::do_pos_format() const</primary></indexterm>moneypunct&lt;char, false&gt;::do_pos_format() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::do_neg_format() const</primary></indexterm>moneypunct&lt;char, false&gt;::do_neg_format() const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::moneypunct_byname&lt;char, false&gt;  class
is described by <XREF LINKEND="rtti-24083">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24083">
<TITLE>typeinfo for moneypunct_byname&lt;char, false&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for moneypunct_byname&lt;char, false&gt;</primary></indexterm>typeinfo name for moneypunct_byname&lt;char, false&gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class moneypunct_byname&lt;char, false&gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::moneypunct_byname&lt;char, false&gt; specified in <XREF linkend="tbl-libstdcxx-clavd-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clavd-ints">
<TITLE>libstdcxx - Class moneypunct_byname&lt;char, false&gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct_byname&lt;char, false&gt;::moneypunct_byname(char const*, unsigned long)</primary></indexterm>moneypunct_byname&lt;char, false&gt;::moneypunct_byname(char const*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct_byname&lt;char, false&gt;::moneypunct_byname(char const*, unsigned long)</primary></indexterm>moneypunct_byname&lt;char, false&gt;::moneypunct_byname(char const*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::moneypunct_byname<char, true> -->
<SECT2>
<!--libgroup-->
<TITLE>Class moneypunct_byname&lt;char, true&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for moneypunct_byname&lt;char, true&gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::moneypunct_byname&lt;char, true&gt; class
is described by <XREF LINKEND="cls-24282-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24282-0">
<TITLE>Primary vtable for moneypunct_byname&lt;char, true&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for moneypunct_byname&lt;char, true&gt;</primary></indexterm>typeinfo for moneypunct_byname&lt;char, true&gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct_byname&lt;char, true&gt;::~moneypunct_byname()</primary></indexterm>moneypunct_byname&lt;char, true&gt;::~moneypunct_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct_byname&lt;char, true&gt;::~moneypunct_byname()</primary></indexterm>moneypunct_byname&lt;char, true&gt;::~moneypunct_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::do_decimal_point() const</primary></indexterm>moneypunct&lt;char, true&gt;::do_decimal_point() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::do_thousands_sep() const</primary></indexterm>moneypunct&lt;char, true&gt;::do_thousands_sep() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::do_grouping() const</primary></indexterm>moneypunct&lt;char, true&gt;::do_grouping() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::do_curr_symbol() const</primary></indexterm>moneypunct&lt;char, true&gt;::do_curr_symbol() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::do_positive_sign() const</primary></indexterm>moneypunct&lt;char, true&gt;::do_positive_sign() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::do_negative_sign() const</primary></indexterm>moneypunct&lt;char, true&gt;::do_negative_sign() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::do_frac_digits() const</primary></indexterm>moneypunct&lt;char, true&gt;::do_frac_digits() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::do_pos_format() const</primary></indexterm>moneypunct&lt;char, true&gt;::do_pos_format() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::do_neg_format() const</primary></indexterm>moneypunct&lt;char, true&gt;::do_neg_format() const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::moneypunct_byname&lt;char, true&gt;  class
is described by <XREF LINKEND="rtti-24082">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24082">
<TITLE>typeinfo for moneypunct_byname&lt;char, true&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for moneypunct_byname&lt;char, true&gt;</primary></indexterm>typeinfo name for moneypunct_byname&lt;char, true&gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class moneypunct_byname&lt;char, true&gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::moneypunct_byname&lt;char, true&gt; specified in <XREF linkend="tbl-libstdcxx-clave-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clave-ints">
<TITLE>libstdcxx - Class moneypunct_byname&lt;char, true&gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct_byname&lt;char, true&gt;::moneypunct_byname(char const*, unsigned long)</primary></indexterm>moneypunct_byname&lt;char, true&gt;::moneypunct_byname(char const*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct_byname&lt;char, true&gt;::moneypunct_byname(char const*, unsigned long)</primary></indexterm>moneypunct_byname&lt;char, true&gt;::moneypunct_byname(char const*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::moneypunct_byname<wchar_t, false> -->
<SECT2>
<!--libgroup-->
<TITLE>Class moneypunct_byname&lt;wchar_t, false&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for moneypunct_byname&lt;wchar_t, false&gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::moneypunct_byname&lt;wchar_t, false&gt; class
is described by <XREF LINKEND="cls-24269-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24269-0">
<TITLE>Primary vtable for moneypunct_byname&lt;wchar_t, false&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for moneypunct_byname&lt;wchar_t, false&gt;</primary></indexterm>typeinfo for moneypunct_byname&lt;wchar_t, false&gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct_byname&lt;wchar_t, false&gt;::~moneypunct_byname()</primary></indexterm>moneypunct_byname&lt;wchar_t, false&gt;::~moneypunct_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct_byname&lt;wchar_t, false&gt;::~moneypunct_byname()</primary></indexterm>moneypunct_byname&lt;wchar_t, false&gt;::~moneypunct_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::do_decimal_point() const</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::do_decimal_point() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::do_thousands_sep() const</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::do_thousands_sep() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::do_grouping() const</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::do_grouping() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::do_curr_symbol() const</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::do_curr_symbol() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::do_positive_sign() const</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::do_positive_sign() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::do_negative_sign() const</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::do_negative_sign() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::do_frac_digits() const</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::do_frac_digits() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::do_pos_format() const</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::do_pos_format() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::do_neg_format() const</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::do_neg_format() const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::moneypunct_byname&lt;wchar_t, false&gt;  class
is described by <XREF LINKEND="rtti-24071">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24071">
<TITLE>typeinfo for moneypunct_byname&lt;wchar_t, false&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for moneypunct_byname&lt;wchar_t, false&gt;</primary></indexterm>typeinfo name for moneypunct_byname&lt;wchar_t, false&gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class moneypunct_byname&lt;wchar_t, false&gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::moneypunct_byname&lt;wchar_t, false&gt; specified in <XREF linkend="tbl-libstdcxx-clavf-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clavf-ints">
<TITLE>libstdcxx - Class moneypunct_byname&lt;wchar_t, false&gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct_byname&lt;wchar_t, false&gt;::moneypunct_byname(char const*, unsigned long)</primary></indexterm>moneypunct_byname&lt;wchar_t, false&gt;::moneypunct_byname(char const*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct_byname&lt;wchar_t, false&gt;::moneypunct_byname(char const*, unsigned long)</primary></indexterm>moneypunct_byname&lt;wchar_t, false&gt;::moneypunct_byname(char const*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::moneypunct_byname<wchar_t, true> -->
<SECT2>
<!--libgroup-->
<TITLE>Class moneypunct_byname&lt;wchar_t, true&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for moneypunct_byname&lt;wchar_t, true&gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::moneypunct_byname&lt;wchar_t, true&gt; class
is described by <XREF LINKEND="cls-24268-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24268-0">
<TITLE>Primary vtable for moneypunct_byname&lt;wchar_t, true&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for moneypunct_byname&lt;wchar_t, true&gt;</primary></indexterm>typeinfo for moneypunct_byname&lt;wchar_t, true&gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct_byname&lt;wchar_t, true&gt;::~moneypunct_byname()</primary></indexterm>moneypunct_byname&lt;wchar_t, true&gt;::~moneypunct_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct_byname&lt;wchar_t, true&gt;::~moneypunct_byname()</primary></indexterm>moneypunct_byname&lt;wchar_t, true&gt;::~moneypunct_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::do_decimal_point() const</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::do_decimal_point() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::do_thousands_sep() const</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::do_thousands_sep() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::do_grouping() const</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::do_grouping() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::do_curr_symbol() const</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::do_curr_symbol() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::do_positive_sign() const</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::do_positive_sign() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::do_negative_sign() const</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::do_negative_sign() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::do_frac_digits() const</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::do_frac_digits() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::do_pos_format() const</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::do_pos_format() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::do_neg_format() const</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::do_neg_format() const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::moneypunct_byname&lt;wchar_t, true&gt;  class
is described by <XREF LINKEND="rtti-24070">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24070">
<TITLE>typeinfo for moneypunct_byname&lt;wchar_t, true&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for moneypunct_byname&lt;wchar_t, true&gt;</primary></indexterm>typeinfo name for moneypunct_byname&lt;wchar_t, true&gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class moneypunct_byname&lt;wchar_t, true&gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::moneypunct_byname&lt;wchar_t, true&gt; specified in <XREF linkend="tbl-libstdcxx-clavg-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clavg-ints">
<TITLE>libstdcxx - Class moneypunct_byname&lt;wchar_t, true&gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct_byname&lt;wchar_t, true&gt;::moneypunct_byname(char const*, unsigned long)</primary></indexterm>moneypunct_byname&lt;wchar_t, true&gt;::moneypunct_byname(char const*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct_byname&lt;wchar_t, true&gt;::moneypunct_byname(char const*, unsigned long)</primary></indexterm>moneypunct_byname&lt;wchar_t, true&gt;::moneypunct_byname(char const*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::money_base -->
<SECT2>
<!--libgroup-->
<TITLE>Class money_base</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for money_base</TITLE>
<PARA>
</PARA>
<PARA>
The Run Time Type Information for the std::money_base  class
is described by <XREF LINKEND="rtti-24010">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24010">
<TITLE>typeinfo for money_base</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__class_type_info</primary></indexterm>vtable for __cxxabiv1::__class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for money_base</primary></indexterm>typeinfo name for money_base</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class money_base</TITLE>
<PARA>
No external methods are defined for libstdcxx - Class std::money_base
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::money_get<char, std::istreambuf_iterator<char, std::char_traits<char> > > -->
<SECT2>
<!--libgroup-->
<TITLE>Class money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::money_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; class
is described by <XREF LINKEND="cls-24281-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24281-0">
<TITLE>Primary vtable for money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</primary></indexterm>typeinfo for money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~money_get()</primary></indexterm>money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~money_get()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~money_get()</primary></indexterm>money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~money_get()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, bool, ios_base&, _Ios_Iostate&, long double&) const</primary></indexterm>money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, bool, ios_base&, _Ios_Iostate&, long double&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, bool, ios_base&, _Ios_Iostate&, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;&) const</primary></indexterm>money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, bool, ios_base&, _Ios_Iostate&, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;&) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::money_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;  class
is described by <XREF LINKEND="rtti-24081">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24081">
<TITLE>typeinfo for money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</primary></indexterm>typeinfo name for money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::money_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clavh-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clavh-ints">
<TITLE>libstdcxx - Class money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::money_get(unsigned long)</primary></indexterm>money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::money_get(unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::money_get(unsigned long)</primary></indexterm>money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::money_get(unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::money_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > -->
<SECT2>
<!--libgroup-->
<TITLE>Class money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::money_get&lt;wchar_t, std::istreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; &gt; class
is described by <XREF LINKEND="cls-24267-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24267-0">
<TITLE>Primary vtable for money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</primary></indexterm>typeinfo for money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~money_get()</primary></indexterm>money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~money_get()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~money_get()</primary></indexterm>money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~money_get()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, bool, ios_base&, _Ios_Iostate&, long double&) const</primary></indexterm>money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, bool, ios_base&, _Ios_Iostate&, long double&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, bool, ios_base&, _Ios_Iostate&, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;&) const</primary></indexterm>money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, bool, ios_base&, _Ios_Iostate&, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;&) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::money_get&lt;wchar_t, std::istreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; &gt;  class
is described by <XREF LINKEND="rtti-24069">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24069">
<TITLE>typeinfo for money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</primary></indexterm>typeinfo name for money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::money_get&lt;wchar_t, std::istreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clavi-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clavi-ints">
<TITLE>libstdcxx - Class money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::money_get(unsigned long)</primary></indexterm>money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::money_get(unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::money_get(unsigned long)</primary></indexterm>money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::money_get(unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::money_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > > -->
<SECT2>
<!--libgroup-->
<TITLE>Class money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::money_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; class
is described by <XREF LINKEND="cls-24280-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24280-0">
<TITLE>Primary vtable for money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</primary></indexterm>typeinfo for money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~money_put()</primary></indexterm>money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~money_put()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~money_put()</primary></indexterm>money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~money_put()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, bool, ios_base&, char, long double) const</primary></indexterm>money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, bool, ios_base&, char, long double) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, bool, ios_base&, char, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&) const</primary></indexterm>money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, bool, ios_base&, char, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::money_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;  class
is described by <XREF LINKEND="rtti-24080">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24080">
<TITLE>typeinfo for money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</primary></indexterm>typeinfo name for money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::money_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clavj-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clavj-ints">
<TITLE>libstdcxx - Class money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::money_put(unsigned long)</primary></indexterm>money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::money_put(unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::money_put(unsigned long)</primary></indexterm>money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::money_put(unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::money_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > -->
<SECT2>
<!--libgroup-->
<TITLE>Class money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::money_put&lt;wchar_t, std::ostreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; &gt; class
is described by <XREF LINKEND="cls-24266-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24266-0">
<TITLE>Primary vtable for money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</primary></indexterm>typeinfo for money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~money_put()</primary></indexterm>money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~money_put()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~money_put()</primary></indexterm>money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~money_put()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, bool, ios_base&, wchar_t, long double) const</primary></indexterm>money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, bool, ios_base&, wchar_t, long double) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, bool, ios_base&, wchar_t, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&) const</primary></indexterm>money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, bool, ios_base&, wchar_t, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::money_put&lt;wchar_t, std::ostreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; &gt;  class
is described by <XREF LINKEND="rtti-24068">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24068">
<TITLE>typeinfo for money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</primary></indexterm>typeinfo name for money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::money_put&lt;wchar_t, std::ostreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clavk-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clavk-ints">
<TITLE>libstdcxx - Class money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::money_put(unsigned long)</primary></indexterm>money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::money_put(unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::money_put(unsigned long)</primary></indexterm>money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::money_put(unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::locale -->
<SECT2>
<!--libgroup-->
<TITLE>Class locale</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for Class locale</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::locale specified in <XREF linkend="tbl-libstdcxx-clavl-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clavl-ints">
<TITLE>libstdcxx - Class locale Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>locale::_Impl::_Impl(char const*, unsigned long)</primary></indexterm>locale::_Impl::_Impl(char const*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.3">&lsqb;LSB]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>locale::_Impl::_Impl(locale::_Impl const&, unsigned long)</primary></indexterm>locale::_Impl::_Impl(locale::_Impl const&, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.3">&lsqb;LSB]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>locale::_Impl::_Impl(unsigned long)</primary></indexterm>locale::_Impl::_Impl(unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.3">&lsqb;LSB]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>locale::_Impl::_Impl(char const*, unsigned long)</primary></indexterm>locale::_Impl::_Impl(char const*, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.3">&lsqb;LSB]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>locale::_Impl::_Impl(locale::_Impl const&, unsigned long)</primary></indexterm>locale::_Impl::_Impl(locale::_Impl const&, unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.3">&lsqb;LSB]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>locale::_Impl::_Impl(unsigned long)</primary></indexterm>locale::_Impl::_Impl(unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.3">&lsqb;LSB]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::locale::facet -->
<SECT2>
<!--libgroup-->
<TITLE>Class locale::facet</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for locale::facet</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::locale::facet class
is described by <XREF LINKEND="cls-24255-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24255-0">
<TITLE>Primary vtable for locale::facet</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for locale::facet</primary></indexterm>typeinfo for locale::facet</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>locale::facet::~facet()</primary></indexterm>locale::facet::~facet()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>locale::facet::~facet()</primary></indexterm>locale::facet::~facet()</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::locale::facet  class
is described by <XREF LINKEND="rtti-24005">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24005">
<TITLE>typeinfo for locale::facet</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__class_type_info</primary></indexterm>vtable for __cxxabiv1::__class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for locale::facet</primary></indexterm>typeinfo name for locale::facet</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class locale::facet</TITLE>
<PARA>
No external methods are defined for libstdcxx - Class std::locale::facet
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name facet functions -->
<SECT2>
<!--libgroup-->
<TITLE>facet functions</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for facet functions</TITLE>
<PARA>
No external methods are defined for libstdcxx - facet functions
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::__num_base -->
<SECT2>
<!--libgroup-->
<TITLE>Class __num_base</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for __num_base</TITLE>
<PARA>
</PARA>
<PARA>
The Run Time Type Information for the std::__num_base  class
is described by <XREF LINKEND="rtti-24015">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24015">
<TITLE></TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__class_type_info</primary></indexterm>vtable for __cxxabiv1::__class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for __num_base</primary></indexterm>typeinfo name for __num_base</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class __num_base</TITLE>
<PARA>
No external methods are defined for libstdcxx - Class std::__num_base
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > > -->
<SECT2>
<!--libgroup-->
<TITLE>Class num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for Class num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clavm-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clavm-ints">
<TITLE>libstdcxx - Class num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::num_get(unsigned long)</primary></indexterm>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::num_get(unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::num_get(unsigned long)</primary></indexterm>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::num_get(unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > -->
<SECT2>
<!--libgroup-->
<TITLE>Class num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for Class num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::num_get&lt;wchar_t, std::istreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clavn-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clavn-ints">
<TITLE>libstdcxx - Class num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::num_get(unsigned long)</primary></indexterm>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::num_get(unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::num_get(unsigned long)</primary></indexterm>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::num_get(unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > > -->
<SECT2>
<!--libgroup-->
<TITLE>Class num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for Class num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clavo-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clavo-ints">
<TITLE>libstdcxx - Class num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::_M_group_int(char const*, unsigned long, char, ios_base&, char*, char*, int&) const</primary></indexterm>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::_M_group_int(char const*, unsigned long, char, ios_base&, char*, char*, int&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::_M_group_float(char const*, unsigned long, char, char const*, char*, char*, int&) const</primary></indexterm>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::_M_group_float(char const*, unsigned long, char, char const*, char*, char*, int&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::_M_pad(char, long, ios_base&, char*, char const*, int&) const</primary></indexterm>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::_M_pad(char, long, ios_base&, char*, char const*, int&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::num_put(unsigned long)</primary></indexterm>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::num_put(unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::num_put(unsigned long)</primary></indexterm>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::num_put(unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > -->
<SECT2>
<!--libgroup-->
<TITLE>Class num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for Class num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::num_put&lt;wchar_t, std::ostreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clavp-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clavp-ints">
<TITLE>libstdcxx - Class num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::_M_group_int(char const*, unsigned long, wchar_t, ios_base&, wchar_t*, wchar_t*, int&) const</primary></indexterm>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::_M_group_int(char const*, unsigned long, wchar_t, ios_base&, wchar_t*, wchar_t*, int&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::_M_group_float(char const*, unsigned long, wchar_t, wchar_t const*, wchar_t*, wchar_t*, int&) const</primary></indexterm>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::_M_group_float(char const*, unsigned long, wchar_t, wchar_t const*, wchar_t*, wchar_t*, int&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::_M_pad(wchar_t, long, ios_base&, wchar_t*, wchar_t const*, int&) const</primary></indexterm>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::_M_pad(wchar_t, long, ios_base&, wchar_t*, wchar_t const*, int&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::num_put(unsigned long)</primary></indexterm>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::num_put(unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::num_put(unsigned long)</primary></indexterm>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::num_put(unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::gslice -->
<SECT2>
<!--libgroup-->
<TITLE>Class gslice</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for gslice</TITLE>
<PARA>
</PARA>
</SECT3>


<SECT3>
<TITLE>Interfaces for Class gslice</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::gslice specified in <XREF linkend="tbl-libstdcxx-clavq-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clavq-ints">
<TITLE>libstdcxx - Class gslice Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>gslice::_Indexer::_Indexer(unsigned long, valarray&lt;unsigned long&gt; const&, valarray&lt;unsigned long&gt; const&)</primary></indexterm>gslice::_Indexer::_Indexer(unsigned long, valarray&lt;unsigned long&gt; const&, valarray&lt;unsigned long&gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>gslice::_Indexer::_Indexer(unsigned long, valarray&lt;unsigned long&gt; const&, valarray&lt;unsigned long&gt; const&)</primary></indexterm>gslice::_Indexer::_Indexer(unsigned long, valarray&lt;unsigned long&gt; const&, valarray&lt;unsigned long&gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::__basic_file<char> -->
<SECT2>
<!--libgroup-->
<TITLE>Class __basic_file&lt;char&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for __basic_file&lt;char&gt;</TITLE>
<PARA>
</PARA>
</SECT3>


<SECT3>
<TITLE>Interfaces for Class __basic_file&lt;char&gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::__basic_file&lt;char&gt; specified in <XREF linkend="tbl-libstdcxx-clavr-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clavr-ints">
<TITLE>libstdcxx - Class __basic_file&lt;char&gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__basic_file&lt;char&gt;::xsgetn(char*, long)</primary></indexterm>__basic_file&lt;char&gt;::xsgetn(char*, long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__basic_file&lt;char&gt;::xsputn(char const*, long)</primary></indexterm>__basic_file&lt;char&gt;::xsputn(char const*, long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__basic_file&lt;char&gt;::seekoff(long, _Ios_Seekdir)</primary></indexterm>__basic_file&lt;char&gt;::seekoff(long, _Ios_Seekdir)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__basic_file&lt;char&gt;::xsputn_2(char const*, long, char const*, long)</primary></indexterm>__basic_file&lt;char&gt;::xsputn_2(char const*, long, char const*, long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::_List_node_base -->
<SECT2>
<!--libgroup-->
<TITLE>Class _List_node_base</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for Class _List_node_base</TITLE>
<PARA>
No external methods are defined for libstdcxx - Class std::_List_node_base
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::valarray<unsigned int> -->
<SECT2>
<!--libgroup-->
<TITLE>Class valarray&lt;unsigned int&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for valarray&lt;unsigned int&gt;</TITLE>
<PARA>
</PARA>
</SECT3>


<SECT3>
<TITLE>Interfaces for Class valarray&lt;unsigned int&gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific methods
for Class std::valarray&lt;unsigned int&gt; specified in <XREF linkend="tbl-libstdcxx-clavs-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clavs-ints">
<TITLE>libstdcxx - Class valarray&lt;unsigned int&gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>valarray&lt;unsigned long&gt;::size() const</primary></indexterm>valarray&lt;unsigned long&gt;::size() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>valarray&lt;unsigned long&gt;::valarray(valarray&lt;unsigned long&gt; const&)</primary></indexterm>valarray&lt;unsigned long&gt;::valarray(valarray&lt;unsigned long&gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>valarray&lt;unsigned long&gt;::valarray(unsigned long)</primary></indexterm>valarray&lt;unsigned long&gt;::valarray(unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>valarray&lt;unsigned long&gt;::valarray(valarray&lt;unsigned long&gt; const&)</primary></indexterm>valarray&lt;unsigned long&gt;::valarray(valarray&lt;unsigned long&gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>valarray&lt;unsigned long&gt;::valarray(unsigned long)</primary></indexterm>valarray&lt;unsigned long&gt;::valarray(unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>valarray&lt;unsigned long&gt;::~valarray()</primary></indexterm>valarray&lt;unsigned long&gt;::~valarray()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>valarray&lt;unsigned long&gt;::~valarray()</primary></indexterm>valarray&lt;unsigned long&gt;::~valarray()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>valarray&lt;unsigned long&gt;::operator&lsqb;](unsigned long)</primary></indexterm>valarray&lt;unsigned long&gt;::operator&lsqb;](unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::allocator<char> -->
<SECT2>
<!--libgroup-->
<TITLE>Class allocator&lt;char&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for Class allocator&lt;char&gt;</TITLE>
<PARA>
No external methods are defined for libstdcxx - Class std::allocator&lt;char&gt;
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::allocator<wchar> -->
<SECT2>
<!--libgroup-->
<TITLE>Class allocator&lt;wchar&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for Class allocator&lt;wchar&gt;</TITLE>
<PARA>
No external methods are defined for libstdcxx - Class std::allocator&lt;wchar&gt;
in this part of the specification. See also the generic specification, &ISOSTD-1;.
</PARA>
</SECT3>
</SECT2>
</SECT1>
<!-- empty header file IA64/ctype -->
<!-- empty header file IA64/cxxabi.h -->
<!-- missing header file IA64/iosfwd -->
<!-- empty header file IA64/iostream -->
<!-- empty header file IA64/typeinfo -->
<SECT1 ID=libstdcxxman>
<TITLE>Interface Definitions for libstdcxx</TITLE>
<PARA>
The interfaces defined on the following pages are included in libstdcxx and are defined
by this specification.
Unless otherwise noted, these interfaces shall be included
in the source standard.
</PARA>
<PARA>
Other interfaces listed in <XREF LINKEND=libstdcxx> shall behave as described
in the referenced base document. For interfaces referencing LSB and not listed below, please see the generic part of the specification.
</PARA>
<!-- MISSING DEFINITION FOR _ZN9__gnu_cxx17__pool_alloc_base16_M_get_free_listEm -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR _ZN9__gnu_cxx17__pool_alloc_base9_M_refillEm -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR _ZNSt6locale5_ImplC1EPKcm -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR _ZNSt6locale5_ImplC1ERKS0_m -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR _ZNSt6locale5_ImplC1Em -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR _ZNSt6locale5_ImplC2EPKcm -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR _ZNSt6locale5_ImplC2ERKS0_m -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR _ZNSt6locale5_ImplC2Em -->
<!-- Lets just hope nobody notices -->
</SECT1>
<!-- End of text generated from database -->
<!--    by $Header: mklibspec 1.82 2006/03/29 19:10:18 mats Exp 0 -->


</CHAPTER>

</PART>
