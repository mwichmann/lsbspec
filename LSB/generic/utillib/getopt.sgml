<REFENTRY ID="libutil-getopt-3"> <REFMETA>
<REFENTRYTITLE>getopt</REFENTRYTITLE>
<REFMISCINFO>Base Libraries</REFMISCINFO>
</REFMETA>
<REFNAMEDIV>
<REFNAME>getopt</REFNAME>
<REFPURPOSE>
parse command line options
</REFPURPOSE>
<INDEXTERM ID="ix-libutil-getopt-3"><PRIMARY>getopt</PRIMARY></INDEXTERM>
</REFNAMEDIV>
<REFSYNOPSISDIV>
<REFSYNOPSISDIVINFO>
<DATE>20 March 2001</DATE>
</REFSYNOPSISDIVINFO>
<SYNOPSIS>
int getopt(int argc, char * const argv[], const char *optstring);
extern char *optarg;
extern int optind, opterr, optopt;
</SYNOPSIS>
<PARA>
GNU supports the following extensions of getopt:
</PARA>
<SYNOPSIS>
int getopt_long(int argc, char * const argv[],
               const char *optstring,
               const struct option *longopts, int *longindex);

int getopt_long_only(int argc, char * const argv[],
                    const char *optstring,
                    const struct option *longopts, int *longindex);
</SYNOPSIS>
</REFSYNOPSISDIV>
<REFSECT1>
<REFSECT1INFO>
<DATE>20 March 2001</DATE>
</REFSECT1INFO>
<TITLE>Description
</TITLE>
<PARA>
The getopt() function parses command line arguments.  GNU and POSIX specifications for this function vary in the following areas.
</PARA>
<REFSECT2>
<TITLE>Option Characteristics</TITLE>
<PARA>
GNU specifies that:
<ITEMIZEDLIST MARK=BULLET>
<LISTITEM>
<PARA>
an element of argv that starts with "-" (and is not exactly "-" or "--") is an option element.
</PARA>
</LISTITEM>
<LISTITEM>
<PARA>
characters of an option element, aside from the initial "-", are option characters.
</PARA>
</LISTITEM>
</ITEMIZEDLIST>
</PARA>
<PARA>
POSIX specifies that:
<ITEMIZEDLIST MARK=BULLET>
<LISTITEM>
<PARA>
applications using getopt() must obey the following syntax guidelines:
(1) option name is a single alphanumeric character from the portable character set
(2) option is preceded by the "-" delimiter character
(3) options without option-arguments should be accepted when grouped behind one "-" delimiter
(4) each option and option-argument is a separate argument
(5) option-arguments are not optional
(6) all options should precede operands on the command line
(7) the argument "--" is accepted as a delimiter indicating the end of options and the consideration of subsequent arguments, if any, as operands
</PARA>
</LISTITEM>
<LISTITEM>
<PARA>
historical implementations of getopt() support other characters as options as an allowed extension, but applications that use extensions are not maximally portable.
</PARA>
</LISTITEM>
<LISTITEM>
<PARA>
support for multi-byte option characters is only possible when such characters can be represented as type int.
</PARA>
</LISTITEM>
<LISTITEM>
<PARA>
applications that call any utility with a first operand starting with "-" should usually specify "--" to mark the end of the options.  Standard utilities that do not support this guideline indicate that fact in the OPTIONS section of the utility description.
</PARA>
</LISTITEM>
</ITEMIZEDLIST>
</PARA>
</REFSECT2>
<REFSECT2>
<TITLE>Extensions</TITLE>
<PARA>
GNU specifies that:
<ITEMIZEDLIST MARK=BULLET>
<LISTITEM>
<PARA>
if a character is followed by two colons, the option takes an optional arg; if there is text in the current argv-element, it is returned in optarg, otherwise optarg is set to zero.
</PARA>
</LISTITEM>
<LISTITEM>
<PARA>
if optstring contains W followed by a semi-colon, then -W foo is treated as the long option --foo.  (Not available with libraries before GNU libc 2.)
</PARA>
</LISTITEM>
<LISTITEM>
<PARA>
getopt_long() works like getopt() except that it also accepts "long options", or, options that are preface with two dashes instead of one.
</PARA>
</LISTITEM>
<LISTITEM>
<PARA>
long option names may be abbreviated if the abbreviation is unique or an exact match for some defined option.
</PARA>
</LISTITEM>
<LISTITEM>
<PARA>
a long option may take a parameter, of the form  --arg=param or --arg param.
</PARA>
</LISTITEM>
<LISTITEM>
<PARA>
getopt_long_only() works like getopt_long(), except that both "-" and "--" indicate long option.  If an option that starts with "-" (not "--") doesn't match a long option, but does match a short option, it is parsed instead as a short option.
</PARA>
</LISTITEM>
</ITEMIZEDLIST>
</PARA>
<PARA>
POSIX specifies that:
<ITEMIZEDLIST MARK=BULLET>
<LISTITEM>
<PARA>
the -W option is reserved for implementation extensions.
</PARA>
</LISTITEM>
</ITEMIZEDLIST>
</PARA>
</REFSECT2>
<REFSECT2>
<TITLE>Return Values</TITLE>
<PARA>
GNU specifies the following getopt() return values:
<ITEMIZEDLIST MARK=BULLET>
<LISTITEM>
<PARA>
the next option character is returned, if found successfully.
</PARA>
</LISTITEM>
<LISTITEM>
<PARA>
colon character (":") is returned if a parameter is missing for one of the options.
</PARA>
</LISTITEM>
<LISTITEM>
<PARA>
question mark ("?") is returned if an unknown option character is encountered.
</PARA>
</LISTITEM>
<LISTITEM>
<PARA>
"-1" is returned for the end of the option list.
</PARA>
</LISTITEM>
</ITEMIZEDLIST>
</PARA>
<PARA>
GNU specifies the following getopt_long() and getopt_long_only() return values:
<ITEMIZEDLIST MARK=BULLET>
<LISTITEM>
<PARA>
when short option is recognized, the option character is returned.
</PARA>
</LISTITEM>
<LISTITEM>
<PARA>
when long option is recognized, val is returned if flag is NULL, otherwise, 0 is returned.
</PARA>
</LISTITEM>
<LISTITEM>
<PARA>
error and -1 returns are the same as for getopt().
</PARA>
</LISTITEM>
<LISTITEM>
<PARA>
question mark ("?") is returned for an ambiguous match or an extraneous parameter.
</PARA>
</LISTITEM>
</ITEMIZEDLIST>
</PARA>
<PARA>
POSIX specifies the following getopt() return values:
<ITEMIZEDLIST MARK=BULLET>
<LISTITEM>
<PARA>
the next option character is returned, if found successfully.
</PARA>
</LISTITEM>
<LISTITEM>
<PARA>
colon character (":") is returned if a parameter is missing for one of the options and the first character of opstring is ":".
</PARA>
</LISTITEM>
<LISTITEM>
<PARA>
question mark ("?") is returned if an unknown option character not in optstring is encountered, or if getopt() detects a missing argument and the first character of optstring is not ":".
</PARA>
</LISTITEM>
<LISTITEM>
<PARA>
"-1" is returned for the end of the option list.
</PARA>
</LISTITEM>
</ITEMIZEDLIST>
</PARA>
</REFSECT2>
<REFSECT2>
<TITLE>Environmental Variables</TITLE>
<PARA>
GNU specifies that:
<ITEMIZEDLIST MARK=BULLET>
<LISTITEM>
<PARA>
if the variable POSIXLY_CORRECT is set, option processing stops as soon as a non-option argument is encountered.
</PARA>
</LISTITEM>
<LISTITEM>
<PARA>
if POSIXLY_CORRECT is set, GNU getopt() conforms to POSIX.2.
</PARA>
</LISTITEM>
<LISTITEM>
<PARA>
the variable _[PID]_GNU_nonoption_argv_flags_ was used by bash 2.0 to communicate to GNU libc which arguments resulted from wildcard expansion and so should not be considered as options.  This behavior was removed in bash version 2.01, but the support remains in GNU libc.
</PARA>
</LISTITEM>
</ITEMIZEDLIST>
</PARA>
</REFSECT2>
<REFSECT2>
<TITLE>Environmental Variables</TITLE>
<PARA>
POSIX.2 Interpretation 150 reports a technical error in the function of getopt().  GNU implements the correct behavior of getopt().
</PARA>
</REFSECT2>
</REFSECT1>
</REFENTRY>
