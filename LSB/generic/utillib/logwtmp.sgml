<REFENTRY ID="baselib-logwtmp-3"> <REFMETA>
<REFENTRYTITLE>logwtmp</REFENTRYTITLE>
<REFMISCINFO>Base Libraries</REFMISCINFO>
</REFMETA>
<REFNAMEDIV>
<REFNAME>logwtmp
</REFNAME>
<REFPURPOSE>
append an entry to the wtmp file
</REFPURPOSE>
</REFNAMEDIV>

<REFSYNOPSISDIV>
<REFSYNOPSISDIVINFO>
<DATE>13 April 2001</DATE>
</REFSYNOPSISDIVINFO>
<FUNCSYNOPSIS>
<FUNCSYNOPSISINFO>
#include &lt;utmp.h>
</FUNCSYNOPSISINFO>
 <FUNCPROTOTYPE>
  <FUNCDEF>void
    <FUNCTION>logwtmp</FUNCTION>
  </FUNCDEF>
  <PARAMDEF>const char *
    <PARAMETER><REPLACEABLE>line</REPLACEABLE></PARAMETER>
  </PARAMDEF>
  <PARAMDEF>const char *
    <PARAMETER><REPLACEABLE>name</REPLACEABLE></PARAMETER>
  </PARAMDEF>
  <PARAMDEF>const char *
    <PARAMETER><REPLACEABLE>host</REPLACEABLE></PARAMETER>
  </PARAMDEF>
 </FUNCPROTOTYPE>
</FUNCSYNOPSIS>
</REFSYNOPSISDIV>

<REFSECT1>
<REFSECT1INFO>
<DATE>13 April 2001</DATE>
</REFSECT1INFO>
<TITLE>Description
</TITLE>
<PARA>
If the process has permission to update the user accounting databases,
the <FUNCTION>logwtmp</FUNCTION> function
shall append a record to the user accounting database 
that records all logins and logouts. The record to be appended
shall be constructed as follows:
<ORDEREDLIST>
<LISTITEM><PARA>The <varname>ut_line</varname> field shall be intitialized
from <parameter>line</parameter>.
If the user accounting database imposes a limit on the size of the 
<structfield>ut_line</structfield> field, it shall
truncate the value, but any such limit shall not be smaller than 
<CONSTANT>UT_LINESIZE</CONSTANT>
(including a terminating null character).
</PARA></LISTITEM>
<LISTITEM><PARA>The <varname>ut_name</varname> field shall be intitialized
from <parameter>name</parameter>.
If the user accounting database imposes a limit on the size of the 
<structfield>ut_name</structfield> field, it shall
truncate the value, but any such limit shall not be smaller than 
<CONSTANT>UT_NAMESIZE</CONSTANT>
(including a terminating null character).
</PARA></LISTITEM>
<LISTITEM><PARA>The <varname>ut_host</varname> field shall be intitialized
from <parameter>host</parameter>.
If the user accounting database imposes a limit on the size of the 
<structfield>ut_host</structfield> field, it shall
truncate the value, but any such limit shall not be smaller than 
<CONSTANT>UT_HOSTSIZE</CONSTANT>
(including a terminating null character).
</PARA></LISTITEM>
<LISTITEM><PARA>If the <parameter>name</parameter> parameter does not refer
to an empty string (i.e. <constant>""</constant>), 
the <varname>ut_type</varname> field shall be set to 
<constant>USER_PROCESS</constant>; otherwise the
<varname>ut_type</varname> fieldshall be set to 
<constant>DEAD_PROCESS</constant>.
</PARA></LISTITEM>
<LISTITEM><PARA>The <varname>ut_id</varname> field shall be set to the 
process identifier for the current process.
</PARA></LISTITEM>
<LISTITEM><PARA>The <varname>ut_tv</varname> field shall be set to the
current time of day.
</PARA></LISTITEM>
</ORDEREDLIST>
<NOTE><PARA>If a process does not have write access to the 
<filename>/var/log/wtmp</filename> file, the
<function>logwtmp()</function> function will not update the file. 
Since the function does not return
any value, an application has no way of knowing whether it succeeded or failed.
Applications should check that they can update the 
<filename>/var/log/wtmp</filename> file (e.g. using the
<function>access()</function> function)
before calling this interface.</PARA></NOTE>
</PARA>
</REFSECT1>

<REFSECT1>
<TITLE>Return Value
</TITLE>
<PARA>
None.
</PARA>
</REFSECT1>

<REFSECT1>
<TITLE>
Files
</TITLE>
<PARA>
<filename>/var/log/wtmp</filename> database of past user logins
</PARA>
</REFSECT1>
<!--	  LDP GENERAL PUBLIC LICENSE  -->
<!--        Version 1a, November 1998   -->
</REFENTRY>
