<!-- Start of text generated from database -->
<!-- generated from the LSB specification database -->
<!--    by $Header: /cvsroot/lsb/spec/mklibspec,v 1.21 2001/04/25 23:58:49 anderson Exp 0 -->
<!--    at Mon Apr 30 20:52:13 2001 -->
<SECT1 ID=libncurses>
<TITLE>libncurses</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Library:</ENTRY>
<ENTRY>libncurses</ENTRY>
</ROW>
<ROW>
<ENTRY>Runtime Path:</ENTRY>
<ENTRY>libncurses.so.5</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The behaviour of the interfaces in this library is specified by the following Standards.<SIMPLELIST COLUMNS=1>
<MEMBER>
 CAE Specification, May 1996, X/Open Curses, Issue 4, Version 2 (ISBN:
1-85912-171-3, C610), plus Corrigendum U018<FOOTNOTE ID="std-128-28">
<PARA>
 CAE Specification, May 1996, X/Open Curses, Issue 4, Version 2 (ISBN:
1-85912-171-3, C610), plus Corrigendum U018</PARA>
</FOOTNOTE>
</MEMBER>
</SIMPLELIST>
</PARA>
<SECT2>
<TITLE>Curses</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>addch<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>has_ic<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>mvwaddch<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>scr_dump<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>waddchstr<FOOTNOTEREF LINKEND="std-128-28"></ENTRY></ROW>
<ROW><ENTRY>addchnstr<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>has_il<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>mvwaddchnstr<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>scr_init<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>waddnstr<FOOTNOTEREF LINKEND="std-128-28"></ENTRY></ROW>
<ROW><ENTRY>addchstr<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>hline<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>mvwaddchstr<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>scr_restore<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>waddstr<FOOTNOTEREF LINKEND="std-128-28"></ENTRY></ROW>
<ROW><ENTRY>addnstr<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>idcok<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>mvwaddnstr<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>scr_set<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>wattr_get<FOOTNOTEREF LINKEND="std-128-28"></ENTRY></ROW>
<ROW><ENTRY>addstr<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>idlok<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>mvwaddstr<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>scrl<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>wattr_off<FOOTNOTEREF LINKEND="std-128-28"></ENTRY></ROW>
<ROW><ENTRY>attr_get<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>immedok<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>mvwchgat<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>scroll<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>wattr_on<FOOTNOTEREF LINKEND="std-128-28"></ENTRY></ROW>
<ROW><ENTRY>attr_off<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>inch<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>mvwdelch<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>scrollok<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>wattr_set<FOOTNOTEREF LINKEND="std-128-28"></ENTRY></ROW>
<ROW><ENTRY>attr_on<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>inchnstr<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>mvwgetch<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>set_term<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>wattroff<FOOTNOTEREF LINKEND="std-128-28"></ENTRY></ROW>
<ROW><ENTRY>attr_set<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>inchstr<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>mvwgetnstr<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>setscrreg<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>wattron<FOOTNOTEREF LINKEND="std-128-28"></ENTRY></ROW>
<ROW><ENTRY>attroff<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>init_color<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>mvwgetstr<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>slk_attr_set<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>wattrset<FOOTNOTEREF LINKEND="std-128-28"></ENTRY></ROW>
<ROW><ENTRY>attron<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>init_pair<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>mvwhline<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>slk_attroff<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>wbkgd<FOOTNOTEREF LINKEND="std-128-28"></ENTRY></ROW>
<ROW><ENTRY>attrset<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>initscr<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>mvwin<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>slk_attron<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>wbkgdset<FOOTNOTEREF LINKEND="std-128-28"></ENTRY></ROW>
<ROW><ENTRY>baudrate<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>innstr<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>mvwinch<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>slk_attrset<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>wborder<FOOTNOTEREF LINKEND="std-128-28"></ENTRY></ROW>
<ROW><ENTRY>beep<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>insch<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>mvwinchnstr<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>slk_clear<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>wchgat<FOOTNOTEREF LINKEND="std-128-28"></ENTRY></ROW>
<ROW><ENTRY>bkgd<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>insdelln<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>mvwinchstr<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>slk_color<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>wclear<FOOTNOTEREF LINKEND="std-128-28"></ENTRY></ROW>
<ROW><ENTRY>bkgdset<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>insertln<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>mvwinnstr<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>slk_init<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>wclrtobot<FOOTNOTEREF LINKEND="std-128-28"></ENTRY></ROW>
<ROW><ENTRY>border<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>insnstr<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>mvwinsch<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>slk_label<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>wclrtoeol<FOOTNOTEREF LINKEND="std-128-28"></ENTRY></ROW>
<ROW><ENTRY>box<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>insstr<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>mvwinsnstr<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>slk_noutrefresh<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>wcolor_set<FOOTNOTEREF LINKEND="std-128-28"></ENTRY></ROW>
<ROW><ENTRY>can_change_color<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>instr<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>mvwinsstr<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>slk_refresh<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>wcursyncup<FOOTNOTEREF LINKEND="std-128-28"></ENTRY></ROW>
<ROW><ENTRY>cbreak<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>intrflush<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>mvwinstr<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>slk_restore<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>wdelch<FOOTNOTEREF LINKEND="std-128-28"></ENTRY></ROW>
<ROW><ENTRY>chgat<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>is_linetouched<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>mvwprintw<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>slk_set<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>wdeleteln<FOOTNOTEREF LINKEND="std-128-28"></ENTRY></ROW>
<ROW><ENTRY>clear<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>is_wintouched<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>mvwscanw<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>slk_touch<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>wechochar<FOOTNOTEREF LINKEND="std-128-28"></ENTRY></ROW>
<ROW><ENTRY>clearok<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>isendwin<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>mvwvline<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>standend<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>werase<FOOTNOTEREF LINKEND="std-128-28"></ENTRY></ROW>
<ROW><ENTRY>clrtobot<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>keyname<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>napms<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>standout<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>wgetch<FOOTNOTEREF LINKEND="std-128-28"></ENTRY></ROW>
<ROW><ENTRY>clrtoeol<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>keypad<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>newpad<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>start_color<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>wgetnstr<FOOTNOTEREF LINKEND="std-128-28"></ENTRY></ROW>
<ROW><ENTRY>color_content<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>killchar<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>newterm<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>subpad<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>wgetstr<FOOTNOTEREF LINKEND="std-128-28"></ENTRY></ROW>
<ROW><ENTRY>color_set<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>leaveok<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>newwin<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>subwin<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>whline<FOOTNOTEREF LINKEND="std-128-28"></ENTRY></ROW>
<ROW><ENTRY>copywin<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>longname<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>nl<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>syncok<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>winch<FOOTNOTEREF LINKEND="std-128-28"></ENTRY></ROW>
<ROW><ENTRY>curs_set<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>meta<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>nocbreak<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>termattrs<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>winchnstr<FOOTNOTEREF LINKEND="std-128-28"></ENTRY></ROW>
<ROW><ENTRY>def_prog_mode<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>move<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>nodelay<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>termname<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>winchstr<FOOTNOTEREF LINKEND="std-128-28"></ENTRY></ROW>
<ROW><ENTRY>def_shell_mode<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>mvaddch<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>noecho<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>tgetent<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>winnstr<FOOTNOTEREF LINKEND="std-128-28"></ENTRY></ROW>
<ROW><ENTRY>delay_output<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>mvaddchnstr<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>nonl<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>tgetflag<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>winsch<FOOTNOTEREF LINKEND="std-128-28"></ENTRY></ROW>
<ROW><ENTRY>delch<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>mvaddchstr<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>noqiflush<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>tgetnum<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>winsdelln<FOOTNOTEREF LINKEND="std-128-28"></ENTRY></ROW>
<ROW><ENTRY>deleteln<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>mvaddnstr<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>noraw<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>tgetstr<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>winsertln<FOOTNOTEREF LINKEND="std-128-28"></ENTRY></ROW>
<ROW><ENTRY>delscreen<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>mvaddstr<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>notimeout<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>tgoto<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>winsnstr<FOOTNOTEREF LINKEND="std-128-28"></ENTRY></ROW>
<ROW><ENTRY>delwin<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>mvchgat<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>overlay<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>tigetflag<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>winsstr<FOOTNOTEREF LINKEND="std-128-28"></ENTRY></ROW>
<ROW><ENTRY>derwin<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>mvcur<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>overwrite<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>tigetnum<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>winstr<FOOTNOTEREF LINKEND="std-128-28"></ENTRY></ROW>
<ROW><ENTRY>doupdate<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>mvdelch<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>pair_content<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>tigetstr<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>wmove<FOOTNOTEREF LINKEND="std-128-28"></ENTRY></ROW>
<ROW><ENTRY>dupwin<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>mvderwin<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>pechochar<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>timeout<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>wnoutrefresh<FOOTNOTEREF LINKEND="std-128-28"></ENTRY></ROW>
<ROW><ENTRY>echo<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>mvgetch<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>pnoutrefresh<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>tparm<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>wprintw<FOOTNOTEREF LINKEND="std-128-28"></ENTRY></ROW>
<ROW><ENTRY>echochar<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>mvgetnstr<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>prefresh<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>tputs<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>wredrawln<FOOTNOTEREF LINKEND="std-128-28"></ENTRY></ROW>
<ROW><ENTRY>endwin<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>mvgetstr<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>printw<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>typeahead<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>wrefresh<FOOTNOTEREF LINKEND="std-128-28"></ENTRY></ROW>
<ROW><ENTRY>erase<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>mvhline<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>putp<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>ungetch<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>wscanw<FOOTNOTEREF LINKEND="std-128-28"></ENTRY></ROW>
<ROW><ENTRY>erasechar<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>mvinch<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>putwin<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>untouchwin<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>wscrl<FOOTNOTEREF LINKEND="std-128-28"></ENTRY></ROW>
<ROW><ENTRY>filter<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>mvinchnstr<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>qiflush<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>use_env<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>wsetscrreg<FOOTNOTEREF LINKEND="std-128-28"></ENTRY></ROW>
<ROW><ENTRY>flash<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>mvinchstr<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>raw<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>vidattr<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>wstandend<FOOTNOTEREF LINKEND="std-128-28"></ENTRY></ROW>
<ROW><ENTRY>flushinp<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>mvinnstr<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>redrawwin<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>vidputs<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>wstandout<FOOTNOTEREF LINKEND="std-128-28"></ENTRY></ROW>
<ROW><ENTRY>getbkgd<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>mvinsch<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>refresh<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>vline<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>wsyncdown<FOOTNOTEREF LINKEND="std-128-28"></ENTRY></ROW>
<ROW><ENTRY>getch<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>mvinsnstr<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>reset_prog_mode<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>vw_printw<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>wsyncup<FOOTNOTEREF LINKEND="std-128-28"></ENTRY></ROW>
<ROW><ENTRY>getnstr<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>mvinsstr<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>reset_shell_mode<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>vw_scanw<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>wtimeout<FOOTNOTEREF LINKEND="std-128-28"></ENTRY></ROW>
<ROW><ENTRY>getstr<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>mvinstr<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>resetty<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>vwprintw<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>wtouchln<FOOTNOTEREF LINKEND="std-128-28"></ENTRY></ROW>
<ROW><ENTRY>getwin<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>mvprintw<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>ripoffline<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>vwscanw<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>wvline<FOOTNOTEREF LINKEND="std-128-28"></ENTRY></ROW>
<ROW><ENTRY>halfdelay<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>mvscanw<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>savetty<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>waddch<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>has_colors<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>mvvline<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>scanw<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>waddchnstr<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>Data Symbols</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>curscr<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY>stdscr<FOOTNOTEREF LINKEND="std-128-28"></ENTRY><ENTRY></ENTRY><ENTRY></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
</SECT1>
<SECT1 ID=libncurses-ddefs>
<TITLE> Data Definitions for libncurses</TITLE>
<PARA>
</PARA>
<SECT2>
<TITLE>curses.h</TITLE>
<PARA>
</PARA>
<SCREEN>
typedef chtype attr_t;

typedef char bool;

typedef unsigned long chtype;


int addch(chtype);
int addchnstr(chtype *, int);
int addchstr(chtype *);
int addnstr(char *, int);
int addstr(char *);
int attroff(int);
int attron(int);
int attrset(int);
int attr_get(attr_t *, short *, void *);
int attr_off(attr_t, void *);
int attr_on(attr_t, void *);
int attr_set(attr_t, short, void *);
int baudrate(void);
int beep(void);
int bkgd(chtype);
void bkgdset(chtype);
int border(chtype, chtype, chtype, chtype, chtype, chtype, chtype, chtype);
int box(WINDOW *, chtype, chtype);
bool can_change_color(void);
int cbreak(void);
int chgat(int, attr_t, short, void *);
int clear(void);
int clearok(WINDOW *, bool);
int clrtobot(void);
int clrtoeol(void);
int color_content(short, short *, short *, short *);
int color_set(short, void *);
int copywin(WINDOW *, WINDOW *, int, int, int, int, int, int, int);
int curs_set(int);
int def_prog_mode(void);
int def_shell_mode(void);
int delay_output(int);
int delch(void);
void delscreen(SCREEN *);
int delwin(WINDOW *);
int deleteln(void);
WINDOW *derwin(WINDOW *, int, int, int, int);
int doupdate(void);
WINDOW *dupwin(WINDOW *);
int echo(void);
int echochar(chtype);
int erase(void);
int endwin(void);
char erasechar(void);
void filter(void);
int flash(void);
int flushinp(void);
chtype getbkgd(WINDOW *);
int getch(void);
int getnstr(char *, int);
int getstr(char *);
WINDOW *getwin(FILE *);
int halfdelay(int);
bool has_colors(void);
bool has_ic(void);
bool has_il(void);
int hline(chtype, int);
void idcok(WINDOW *, bool);
int idlok(WINDOW *, bool);
void immedok(WINDOW *, bool);
chtype inch(void);
int inchnstr(chtype *, int);
int inchstr(chtype *);
WINDOW *initscr(void);
int init_color(short, short, short, short);
int init_pair(short, short, short);
int innstr(char *, int);
int insch(chtype);
int insdelln(int);
int insertln(void);
int insnstr(char *, int);
int insstr(char *);
int instr(char *);
int intrflush(WINDOW *, bool);
bool isendwin(void);
bool is_linetouched(WINDOW *, int);
bool is_wintouched(WINDOW *);
char *keyname(int);
int keypad(WINDOW *, bool);
char killchar(void);
int leaveok(WINDOW *, bool);
char *longname(void);
int meta(WINDOW *, bool);
int move(int, int);
int mvaddch(int, int, chtype);
int mvaddchnstr(int, int, chtype *, int);
int mvaddchstr(int, int, chtype *);
int mvaddnstr(int, int, char *, int);
int mvaddstr(int, int, char *);
int mvchgat(int, int, int, attr_t, short, void *);
int mvcur(int, int, int, int);
int mvdelch(int, int);
int mvderwin(WINDOW *, int, int);
int mvgetch(int, int);
int mvgetnstr(int, int, char *, int);
int mvgetstr(int, int, char *);
int mvhline(int, int, chtype, int);
chtype mvinch(int, int);
int mvinchnstr(int, int, chtype *, int);
int mvinchstr(int, int, chtype *);
int mvinnstr(int, int, char *, int);
int mvinsch(int, int, chtype);
int mvinsnstr(int, int, char *, int);
int mvinsstr(int, int, char *);
int mvinstr(int, int, char *);
int mvprintw(int, int, char *, ...);
int mvscanw(int, int, char *, ...);
int mvvline(int, int, chtype, int);
int mvwaddch(WINDOW *, int, int, chtype);
int mvwaddchnstr(WINDOW *, int, int, chtype *, int);
int mvwaddchstr(WINDOW *, int, int, chtype *);
int mvwaddnstr(WINDOW *, int, int, char *, int);
int mvwaddstr(WINDOW *, int, int, char *);
int mvwchgat(WINDOW *, int, int, int, attr_t, short, void *);
int mvwdelch(WINDOW *, int, int);
int mvwgetch(WINDOW *, int, int);
int mvwgetnstr(WINDOW *, int, int, char *, int);
int mvwgetstr(WINDOW *, int, int, char *);
int mvwhline(WINDOW *, int, int, chtype, int);
int mvwin(WINDOW *, int, int);
chtype mvwinch(WINDOW *, int, int);
int mvwinchnstr(WINDOW *, int, int, chtype *, int);
int mvwinchstr(WINDOW *, int, int, chtype *);
int mvwinnstr(WINDOW *, int, int, char *, int);
int mvwinsch(WINDOW *, int, int, chtype);
int mvwinsnstr(WINDOW *, int, int, char *, int);
int mvwinsstr(WINDOW *, int, int, char *);
int mvwinstr(WINDOW *, int, int, char *);
int mvwprintw(WINDOW *, int, int, char *, ...);
int mvwscanw(WINDOW *, int, int, char *, ...);
int mvwvline(WINDOW *, int, int, chtype, int);
int napms(int);
WINDOW *newpad(int, int);
SCREEN *newterm(char *, FILE *, FILE *);
WINDOW *newwin(int, int, int, int);
int nl(void);
int nocbreak(void);
int nodelay(WINDOW *, bool);
int noecho(void);
int nonl(void);
void noqiflush(void);
int noraw(void);
int notimeout(WINDOW *, bool);
int overlay(WINDOW *, WINDOW *);
int overwrite(WINDOW *, WINDOW *);
int pair_content(short, short *, short *);
int pechochar(WINDOW *, chtype);
int pnoutrefresh(WINDOW *, int, int, int, int, int, int);
int prefresh(WINDOW *, int, int, int, int, int, int);
int printw(char *, ...);
int putp(char *);
int putwin(WINDOW *, FILE *);
void qiflush(void);
int raw(void);
int redrawwin(WINDOW *);
int refresh(void);
int resetty(void);
int reset_prog_mode(void);
int reset_shell_mode(void);
int ripoffline(int, int);
int savetty(void);
int scanw(char *, ...);
int scr_dump(char *);
int scr_init(char *);
int scrl(int);
int scroll(WINDOW *);
int scrollok(WINDOW *, bool);
int scr_restore(char *);
int scr_set(char *);
int setscrreg(int, int);
SCREEN *set_term(SCREEN *);
int slk_attroff(chtype);
int slk_attron(chtype);
int slk_attrset(chtype);
int slk_attr_set(attr_t, short, void *);
int slk_clear(void);
int slk_color(short);
int slk_init(int);
char *slk_label(int);
int slk_noutrefresh(void);
int slk_refresh(void);
int slk_restore(void);
int slk_set(int, char *, int);
int slk_touch(void);
int standout(void);
int standend(void);
int start_color(void);
WINDOW *subpad(WINDOW *, int, int, int, int);
WINDOW *subwin(WINDOW *, int, int, int, int);
int syncok(WINDOW *, bool);
chtype termattrs(void);
char *termname(void);
int tigetflag(char *);
int tigetnum(char *);
char *tigetstr(char *);
void timeout(int);
char *tparm(char *, ...);
int typeahead(int);
int ungetch(int);
int untouchwin(WINDOW *);
void use_env(bool);
int vidattr(chtype);
int vidputs(chtype, int);
int vline(chtype, int);
int vwprintw(WINDOW *, char *, va_list);
int vw_printw(WINDOW *, char *, va_list);
int vwscanw(WINDOW *, char *, va_list);
int vw_scanw(WINDOW *, char *, va_list);
int waddch(WINDOW *, chtype);
int waddchnstr(WINDOW *, chtype *, int);
int waddchstr(WINDOW *, chtype *);
int waddnstr(WINDOW *, char *, int);
int waddstr(WINDOW *, char *);
int wattron(WINDOW *, int);
int wattroff(WINDOW *, int);
int wattrset(WINDOW *, int);
int wattr_get(WINDOW *, attr_t *, short *, void *);
int wattr_on(WINDOW *, attr_t, void *);
int wattr_off(WINDOW *, attr_t, void *);
int wattr_set(WINDOW *, attr_t, short, void *);
int wbkgd(WINDOW *, chtype);
void wbkgdset(WINDOW *, chtype);
int wborder(WINDOW *, chtype, chtype, chtype, chtype, chtype, chtype,
	    chtype, chtype);
int wchgat(WINDOW *, int, attr_t, short, void *);
int wclear(WINDOW *);
int wclrtobot(WINDOW *);
int wclrtoeol(WINDOW *);
int wcolor_set(WINDOW *, short, void *);
void wcursyncup(WINDOW *);
int wdelch(WINDOW *);
int wdeleteln(WINDOW *);
int wechochar(WINDOW *, chtype);
int werase(WINDOW *);
int wgetch(WINDOW *);
int wgetnstr(WINDOW *, char *, int);
int wgetstr(WINDOW *, char *);
int whline(WINDOW *, chtype, int);
chtype winch(WINDOW *);
int winchnstr(WINDOW *, chtype *, int);
int winchstr(WINDOW *, chtype *);
int winnstr(WINDOW *, char *, int);
int winsch(WINDOW *, chtype);
int winsdelln(WINDOW *, int);
int winsertln(WINDOW *);
int winsnstr(WINDOW *, char *, int);
int winsstr(WINDOW *, char *);
int winstr(WINDOW *, char *);
int wmove(WINDOW *, int, int);
int wnoutrefresh(WINDOW *);
int wprintw(WINDOW *, char *, ...);
int wredrawln(WINDOW *, int, int);
int wrefresh(WINDOW *);
int wscanw(WINDOW *, char *, ...);
int wscrl(WINDOW *, int);
int wsetscrreg(WINDOW *, int, int);
int wstandout(WINDOW *);
int wstandend(WINDOW *);
void wsyncdown(WINDOW *);
void wsyncup(WINDOW *);
void wtimeout(WINDOW *, int);
int wtouchln(WINDOW *, int, int, int);
int wvline(WINDOW *, chtype, int);
WINDOW *curscr;
WINDOW *stdscr;
</SCREEN>
</SECT2>
</SECT1>
<!-- End of text generated from database -->
<!--    by $Header: /cvsroot/lsb/spec/mklibspec,v 1.21 2001/04/25 23:58:49 anderson Exp 0 -->
