<REFENTRY id="xgettext">
<REFMETA><REFENTRYTITLE>
xgettext
</REFENTRYTITLE></REFMETA>
<REFNAMEDIV>
<REFNAME>xgettext</REFNAME>
<REFPURPOSE>
extract gettext call strings from C programs
</REFPURPOSE>
</REFNAMEDIV>

<REFSYNOPSISDIV>
<SYNOPSIS>
xgettext [ options ] filename ...
</SYNOPSIS>
</REFSYNOPSISDIV>

<REFSECT1>
<TITLE>Description</TITLE>
<PARA>
The <emphasis>xgettext</emphasis> utility is used to automate the creation 
of portable message files (.po). A .po file contains copies of the "C" language 
strings that are found in ISO C source code in <emphasis>filename</emphasis> 
or the standard input if <emphasis>-</emphasis> is
specified on the command line. The <emphasis>.po</emphasis> file can be 
used as input to the <emphasis>msgfmt</emphasis> utility, which produces 
a binary form of the message file that can be used by application during 
run-time.
</PARA>
<PARA>
<emphasis>xgettext</emphasis> writes <emphasis>msgid</emphasis> strings from 
<emphasis>gettext()</emphasis> calls in <emphasis>filename</emphasis> to the
default output file <emphasis>messages.po</emphasis>. The default output file 
name can be changed by <emphasis>-d</emphasis> option. 
<emphasis>msgid</emphasis> strings in dgettext() calls are written to the 
output file <emphasis>domainname.po</emphasis> where 
<emphasis>domainname</emphasis> is the first parameter to the dgettext()
call.
</PARA>
<PARA>
By default, <emphasis>xgettext</emphasis> creates a <emphasis>.po</emphasis> 
file in the current working directory,
and each entry is in the same order the strings are extracted from
<emphasis>filenames</emphasis>. When the <emphasis>-p</emphasis> option is 
specified, the <emphasis>.po</emphasis> file is created in the
pathname directory. An existing <emphasis>.po</emphasis> file is overwritten.
</PARA>
<PARA>
Duplicate msgids are written to the <emphasis>.po</emphasis> file as comment 
lines. When the <emphasis>-s</emphasis> option is specified, the 
<emphasis>.po</emphasis> is sorted by the msgid string, and all
duplicated msgids are removed. All msgstr directives in the 
<emphasis>.po</emphasis> file are empty unless the <emphasis>-m</emphasis> 
option is used.
</PARA>

</REFSECT1>

<REFSECT1>
<TITLE>Options</TITLE>

<VARIABLELIST>

<VARLISTENTRY>
<TERM>
-a
</TERM>
<TERM>
--extract-all
</TERM>
<LISTITEM>
<PARA>
Extract all strings, not just those found in gettext() and dgettext() calls.
Only one .po file is created.
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>
-c[comment-tag]
</TERM>
<TERM>
--add-comments[=comment-tag]
</TERM>
<LISTITEM>
<PARA>
The comment block beginning with <emphasis>comment-tag</emphasis> as the 
first token of the comment block is added to the output 
<emphasis>.po</emphasis> file as <emphasis>#</emphasis> delimited comments. For
multiple domains, xgettext directs comments and messages to the prevailing
text domain.
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>
-C
</TERM>
<TERM>
--c++
</TERM>
<LISTITEM>
<PARA>
Recognize C++ style comments.
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>
-d default-domain
</TERM>
<TERM>
--default-domain=default-domain
</TERM>
<LISTITEM>
<PARA>
Rename default output file from messages.po to default-domain.po.
The special domain name - means to write the output to the standard output.
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>
-D directory
</TERM>
<TERM>
--directory=directory
</TERM>
<LISTITEM>
<PARA>
Change to directory before beginning to search and scan source files. The
resulting .po file will be written relative to the original directory,
though.
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>
--debug
</TERM>
<LISTITEM>
<PARA>
Use the flags c-format and possible-c-format to show who was responsible for
marking a message as a format string. The later form is used if the xgettext
utility decided, the format form is used if the programmer prescribed it.
</PARA>
<PARA>
By default only the c-format form is used. The translator should not have to
care about these details.
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>
-e
</TERM>
<TERM>
--no-escape
</TERM>
<LISTITEM>
<PARA>
Do not use C escapes in output (default).
</PARA>
</LISTITEM>
</VARLISTENTRY>


<VARLISTENTRY>
<TERM>
-E
</TERM>
<TERM>
--escape
</TERM>
<LISTITEM>
<PARA>
Use C escapes in output if non-ASCII characters are used.
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>
-f file
</TERM>
<TERM>
--files-from=file
</TERM>
<LISTITEM>
<PARA>
Read the names of the input files from file instead of getting them from the
command line. If - is specified as file, the standard input is read.
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>
-F
</TERM>
<TERM>
--sort-by-file
</TERM>
<LISTITEM>
<PARA>
Sort output by file location.
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>
--force-po
</TERM>
<LISTITEM>
<PARA>
Always write output file even if no message is defined.
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>
-i
</TERM>
<TERM>
--indent
</TERM>
<LISTITEM>
<PARA>
Write the .po file using indented style.
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>
-j
</TERM>
<TERM>
--join-existing
</TERM>
<LISTITEM>
<PARA>
Join messages with existing message files. If a .po file does not exist, it
is created. If a .po file does exist, new messages are appended. Any
duplicate msgids are commented out in the resulting .po file. Domain
directives in the existing .po file are ignored. Results not guaranteed if
the existing message file has been edited.
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>
-k[keywordspec]
</TERM>
<TERM>
--keyword[=keywordspec]
</TERM>
<LISTITEM>
<PARA>
Specify additional keyword to be looked for (without keywordspec means not
to use default keywords).
</PARA>
<PARA>
If keywordspec is a C identifier id, xgettext looks for strings in the first
argument of each call to the function or macro id. If keywordspec is of the
form id:argnum, xgettext looks for string in the argnumth argument of the
call. If keywordspec is of the form id:argum1,argnum2, xgettext looks for
strings in the argnum1st argument and in the argnum2nd argument of the call,
and treats them as singular/plural variants for a message with plural
handling.
</PARA>
<PARA>
The default keywords, which are always looked for if not explicitly
disabled, are <emphasis>gettext, dgettext:2, dcgettext:2, ngettext:1,2, 
dngettext:2,3, dcngettext:2,3</emphasis> and <emphasis>gettext_noop</emphasis>.
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>
-L name
</TERM>
<TERM>
--language=name
</TERM>
<LISTITEM>
<PARA>
Recognize the specified language. Valid values are C, C++, and PO. Otherwise
the language is guessed from file extension.
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>
-m[prefix]
</TERM>
<TERM>
--msgstr-prefix[=prefix]
</TERM>
<LISTITEM>
<PARA>
Fill in the msgstr with prefix. This is useful for debugging purposes. To
make msgstr identical to msgid, use an empty string ("") for prefix.
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>
-M[suffix]
</TERM>
<TERM>
--msgstr-suffix[=suffix]
</TERM>
<LISTITEM>
<PARA>
Fill in the msgstr with suffix. This is useful for debugging purposes.
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>
-n
</TERM>
<TERM>
--add-location
</TERM>
<LISTITEM>
<PARA>
Add comment lines to the output file indicating file name and line number in
the source file where each extracted string is encountered (default). These
lines appear before each msgid in the following format:
</PARA>
<PARA>
<emphasis>#: filename:line</emphasis>
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>
--no-location
</TERM>
<LISTITEM>
<PARA>
Do not write <emphasis>#: filename:line</emphasis> lines.
</PARA>
</LISTITEM>
</VARLISTENTRY>


<VARLISTENTRY>
<TERM>
-o file
</TERM>
<TERM>
--output=file
</TERM>
<LISTITEM>
<PARA>
Write output to the specified file.
</PARA>
</LISTITEM>
</VARLISTENTRY>


<VARLISTENTRY>
<TERM>
-p pathname
</TERM>
<TERM>
--output-dir=pathname
</TERM>
<LISTITEM>
<PARA>
Specify the directory where the output files will be placed. This option
overrides the current working directory.
</PARA>
</LISTITEM>
</VARLISTENTRY>


<VARLISTENTRY>
<TERM>
-s
</TERM>
<TERM>
--sort-output
</TERM>
<LISTITEM>
<PARA>
Generate output sorted by msgids with all duplicate msgids removed.
</PARA>
</LISTITEM>
</VARLISTENTRY>


<VARLISTENTRY>
<TERM>
--strict
</TERM>
<LISTITEM>
<PARA>
Write out strict UniForum conforming PO file.
</PARA>
</LISTITEM>
</VARLISTENTRY>


<VARLISTENTRY>
<TERM>
-T
</TERM>
<TERM>
--trigraphs
</TERM>
<LISTITEM>
<PARA>
Understand ISO C trigraphs for input.
</PARA>
</LISTITEM>
</VARLISTENTRY>


<VARLISTENTRY>
<TERM>
-w number
</TERM>
<TERM>
--width=number
</TERM>
<LISTITEM>
<PARA>
Limit the output lines to number columns.
</PARA>
</LISTITEM>
</VARLISTENTRY>


<VARLISTENTRY>
<TERM>
-x exclude-file
</TERM>
<TERM>
--exclude-file=exclude-file
</TERM>
<LISTITEM>
<PARA>
Specify a .po file that contains a list of msgids that are not to be
extracted from the input files. The format of exclude-file is identical to
the .po file. However, only the msgid directive line in exclude-file is
used. All other lines are simply ignored. The -x option can only be used
with the -a option.
</PARA>
</LISTITEM>
</VARLISTENTRY>

</VARIABLELIST>
</REFSECT1>

<REFSECT1>
<TITLE>Operands</TITLE>
<PARA>
The operands are pathnames to the C or C++ language source files.
</PARA>
</REFSECT1>

<REFSECT1>
<TITLE>Standard Input</TITLE>
<PARA>
The standard input is not used unless a filename operand is specified as -.
</PARA>
</REFSECT1>

<REFSECT1>
<TITLE>Input Files</TITLE>
<PARA>
The input files are text files.
</PARA>
</REFSECT1>


<REFSECT1>
<TITLE>Environment Variables</TITLE>
<PARA>
</PARA>

<VARIABLELIST>

<VARLISTENTRY>
<TERM>
LANGUAGE
</TERM>
<LISTITEM>
<PARA>
Specifies one or more locale names. See  <emphasis>gettext</emphasis> message 
handling functions for more information.
</PARA>
</LISTITEM>
</VARLISTENTRY>


<VARLISTENTRY>
<TERM>
LANG
</TERM>
<LISTITEM>
<PARA>
Specifies default locale name.
</PARA>
</LISTITEM>
</VARLISTENTRY>


<VARLISTENTRY>
<TERM>
LC_ALL
</TERM>
<LISTITEM>
<PARA>
Specifies locale name for all categories. If defined, overrides LANG,
LC_CTYPE and LC_MESSAGES.
</PARA>
</LISTITEM>
</VARLISTENTRY>


<VARLISTENTRY>
<TERM>
LC_CTYPE
</TERM>
<LISTITEM>
<PARA>
Specifies locale name for character handling.
</PARA>
</LISTITEM>
</VARLISTENTRY>


<VARLISTENTRY>
<TERM>
LC_MESSAGES
</TERM>
<LISTITEM>
<PARA>
Specifies messaging locale, and if present overrides LANG for messages.
</PARA>
</LISTITEM>
</VARLISTENTRY>

</VARIABLELIST>
</REFSECT1>


<REFSECT1>
<TITLE>Description</TITLE>
<PARA>
The output files are text files.
</PARA>
</REFSECT1>

<REFSECT1>
<TITLE>Exit Status</TITLE>
<PARA>
The following exit values are returned:
</PARA>

<VARIABLELIST>

<VARLISTENTRY>
<TERM>
0
</TERM>
<LISTITEM>
<PARA>
Successful completion.
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>
>0
</TERM>
<LISTITEM>
<PARA>
An error occurred.
</PARA>
</LISTITEM>
</VARLISTENTRY>

</VARIABLELIST>
</REFSECT1>

<REFSECT1>
<TITLE>Application Usage</TITLE>
<PARA>
xgettext is not able to extract cast strings, for example ISO C casts of
literal strings to (const char *). This is unnecessary anyway, since the
prototypes in <emphasis>libintl.h</emphasis> already specify this type.
</PARA>
</REFSECT1>

</REFENTRY>
