<REFENTRY id="make">
<REFMETA><REFENTRYTITLE>
make
</REFENTRYTITLE></REFMETA>
<REFNAMEDIV>
<REFNAME>make</REFNAME>
<REFPURPOSE>
maintain, update and regenerate groups of programs
</REFPURPOSE>
</REFNAMEDIV>
<REFSECT1>
<TITLE>Description</TITLE>
<PARA>
<COMMAND>make</COMMAND> is as specified in the Single UNIX
Specification but with differences
as listed below.
</PARA>
</REFSECT1>

<REFSECT1>
<title>LSB Deprecated Differences</title>

<para>The behaviors specified in this section are expected to
disappear from a future version of the LSB; applications should only
use the non-LSB-deprecated behaviors.</para>

<para>The GNU <COMMAND>make</COMMAND> command contains syntax
extensions beyond those specified in the Single UNIX Specification.
Use of these extensions
is deprecated.</para>

<VARIABLELIST>

<VARLISTENTRY>
<TERM>-C dir</TERM>
<LISTITEM>
<PARA>
changes to directory dir before reading the makefiles or doing anything
else.  If multiple -C options are specified, each is interpreted
relative to the previous one: -C / -C etc is equivalent to -C /etc.
This is typically used with recursive invocations of make.
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>-d</TERM>
<LISTITEM>
<PARA>
prints debugging information in addition to normal processing.  The
debugging information says which files are being considered for
remaking, which filetimes are being compared and with what results,
which files actually need to be remade, which implicit rules are
considered and which are applied---everything interesting about how
make decides what to do.
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>-I dir</TERM>
<LISTITEM>
<PARA>
specifies a directory dir to search for included makefiles.  If
several -I options are used to specify several directories, the
directories are searched in the order specified.  Unlike the arguments
to other flags of make, directories given with -I flags may come
directly after the flag: -Idir is allowed, as well as -I dir.  This
syntax is allowed for compatibility with the C preprocessor's -I flag.
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>-j jobs</TERM>
<LISTITEM>
<PARA>
specifies the number of jobs (commands) to run simultaneously.  If
there is more than one -j option, the last one is effective.  If the
-j option is given without an argument, make will not limit the number
of jobs that can run simultaneously.
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>-l [load]</TERM>
<LISTITEM>
<PARA>
specifies that no new jobs (commands) should be started if there are
others jobs running and the load average is at least load (a
floating-point number).  With no argument, removes a previous load
limit.
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>-o file</TERM>
<LISTITEM>
<PARA>
does not remake the file file even if it is older than its dependencies,
and do not remake anything on account of changes in file.  Essentially
the file is treated as very old and its rules are ignored.
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>-v</TERM>
<LISTITEM>
<PARA>
prints the version of the make program plus a copyright, a list of
authors and a notice that there is no warranty.
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>-w</TERM>
<LISTITEM>
<PARA>
prints a message containing the working directory before and after
other processing.  This may be use­ ful for tracking down errors from
complicated nests of recursive make commands.
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>-W file</TERM>
<LISTITEM>
<PARA>
pretends that the target file has just been modified.  When used with
the -n flag, this shows you what would happen if you were to modify
that file.  Without -n, it is almost the same as running a touch
command on the given file before running make, except that the
modification time is changed only in the imagination of make.
</PARA>
</LISTITEM>
</VARLISTENTRY>

</VARIABLELIST>
</REFSECT1>

</REFENTRY>
