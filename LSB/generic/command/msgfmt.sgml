<REFENTRY id="msgfmt">
<REFMETA><REFENTRYTITLE>
msgfmt
</REFENTRYTITLE></REFMETA>
<REFNAMEDIV>
<REFNAME>msgfmt</REFNAME>
<REFPURPOSE>
create a message object from a message file 
</REFPURPOSE>
</REFNAMEDIV>

<REFSYNOPSISDIV>
<CMDSYNOPSIS>
<COMMAND>msgfmt</COMMAND>
<ARG rep=repeat>options</ARG>
<ARG choice=plain rep=repeat><replaceable>filename</replaceable></ARG>
</CMDSYNOPSIS>
</REFSYNOPSISDIV>

<REFSECT1>
<TITLE>Description</TITLE>
<PARA>
The <command>msgfmt</command> command
generates a binary message catalog from a textual translation description.
Message catalogs, or 
message object files, are stored in files with a <filename>.mo</filename>" extension.
<NOTE><PARA>The format of message object files is not guaranteed to be portable.
Message catalogs should always be generated on the target architecture using the
<command>msgfmt</command> command.
</PARA></NOTE>
</PARA>
<PARA>
The source files, otherwise known as portable object files, have a
<filename>.po</filename> extension.
<!-- The the portable object files are not changed by this process.-->
</PARA>
<PARA>
The <PARAMETER>filename</PARAMETER> operands shall be portable object files.
The <filename>.po</filename> file contains messages to be
displayed to users by system utilities or by
application programs. The portable object files are text files, 
and the messages in them can
be rewritten in any language supported by the system.
</PARA>
<PARA>
If any <PARAMETER>filename</PARAMETER> is <filename>-</filename>, 
a portable object file shall be read from the standard input.
</PARA>
<!--
<PARA>
The <command>xgettext</command> utility can be used to create 
<filename>.po</filename> files from script or
programs.
</PARA>
-->
<PARA>
The <command>msgfmt</command> command interprets data as characters 
according to the current setting of the
<CONSTANT>LC_CTYPE</CONSTANT> locale category.
</PARA>

</REFSECT1>

<REFSECT1>
<TITLE>Options</TITLE>

<VARIABLELIST>

<VARLISTENTRY>
<TERM>
-D <PARAMETER>directory</PARAMETER>
</TERM>
<TERM>
--directory=<PARAMETER>directory</PARAMETER>
</TERM>
<LISTITEM>
<PARA>
Add directory to list for input files search. 
If <parameter>filename</> is not an absolute pathname
and <parameter>filename</> cannot be opened, search for it
in <parameter>directory</>. This option may be
repeated. Directories shall be searched in order, with the leftmost
<parameter>directory</> searched first.
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>
-f
</TERM>
<TERM>
--use-fuzzy
</TERM>
<LISTITEM>
<PARA>
Use entries marked as <literal>fuzzy</literal>
in output. If this option is not specified, such entries
are not included into the output. See special comments below.
</PARA>
</LISTITEM>
</VARLISTENTRY>


<VARLISTENTRY>
<TERM>
-o <PARAMETER>output-file</PARAMETER>
</TERM>
<TERM>
--output-file=<PARAMETER>output-file</PARAMETER>
</TERM>
<LISTITEM>
<PARA>
Specify the output file name as <filename>output-file</filename>. If multiple domains or
duplicate
msgids in the <filename>.po</filename> file are present, the behavior is unspecified.
If output-file is <filename>-</filename>, output is written
to standard output.
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>
--strict
</TERM>
<LISTITEM>
<PARA>
Direct the utility to work strictly following the UniForum/Sun
implementation. Currently this only affects the naming of the output file.
If this option is not given the name of the output file is the same as the
domain name. If the strict UniForum mode is enabled the suffix 
<filename>.mo</filename> is added
to the file name if it is not already present.
</PARA>
</LISTITEM>
</VARLISTENTRY>


<VARLISTENTRY>
<TERM>
-v
</TERM>
<TERM>
--verbose
</TERM>
<LISTITEM>
<PARA>
Detect and diagnose input file anomalies which might represent translation
errors. The msgid and msgstr strings are studied and compared. It is
considered abnormal that one string starts or ends with a newline while the
other does not.
</PARA>
<PARA>
Also, if the string represents a format string used in a printf-like
function both strings should have the same number of % format specifiers,
with matching types. If the flag c-format or possible-c-format appears in
the special comment #, for this entry a check is performed. For example, the
check will diagnose using %.*s against %s, or %d against %s, or %d against
%x. It can even handle positional parameters.
</PARA>
</LISTITEM>
</VARLISTENTRY>

</VARIABLELIST>
</REFSECT1>

<REFSECT1>
<TITLE>Operands</TITLE>
<PARA>
The <PARAMETER>filename</PARAMETER> operands are treated as portable object files. 
The format of
portable object files is defined in EXTENDED DESCRIPTION.
</PARA>
</REFSECT1>

<REFSECT1>
<TITLE>Standard Input</TITLE>
<PARA>
The standard input is not used unless a <PARAMETER>filename</PARAMETER>
operand is specified as
"-".
</PARA>
</REFSECT1>

<REFSECT1>
<TITLE>Environment Variables</TITLE>
<PARA>
</PARA>

<VARIABLELIST>

<VARLISTENTRY>
<TERM>
<ENVAR>LANGUAGE</ENVAR>
</TERM>
<LISTITEM>
<PARA>
Specifies one or more locale names. See <function>gettext</function> message
handling functions for more information.
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>
<ENVAR>LANG</ENVAR>
</TERM>
<LISTITEM>
<PARA>
Specifies locale name.
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>
<ENVAR>LC_ALL</ENVAR>
</TERM>
<LISTITEM>
<PARA>
Specifies locale name for all categories. If defined, overrides <ENVAR>LANG</ENVAR>,
<ENVAR>LC_CTYPE</ENVAR> and <ENVAR>LC_MESSAGES</ENVAR>.
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>
<ENVAR>LC_CTYPE</ENVAR>
</TERM>
<LISTITEM>
<PARA>
Specifies locale name for character handling.
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>
<ENVAR>LC_MESSAGES</ENVAR>
</TERM>
<LISTITEM>
<PARA>
Specifies messaging locale, and if present overrides <ENVAR>LANG</ENVAR> for messages.
</PARA>
</LISTITEM>
</VARLISTENTRY>

</VARIABLELIST>
</REFSECT1>

<REFSECT1>
<TITLE>Standard Output</TITLE>
<PARA>
The standard output is not used unless the option-argument of the 
<PARAMETER>-o</PARAMETER> option
is specified as <filename>-</filename>.
</PARA>
</REFSECT1>

<REFSECT1>
<TITLE>Extended Description</TITLE>
<PARA>
The format of portable object files (<filename>.po</> files) is defined as follows. Each
<filename>.po</> file contains one or more lines, with each line containing either a
comment or a statement. Comments start the line with a hash mark (<literal>#</>) and end
with the newline character. Empty lines, or lines containing only white-space,
shall be ignored. 
Comments can in certain circumstances alter the behavior of 
<COMMAND>msgfmt</COMMAND>.  See 
<XREF LINKEND=msgfmt-comments> below for details on comment processing.
The format of a statement is:
</PARA>
<PARA>
<emphasis>directive value</emphasis>
</PARA>
<PARA>
Each directive starts at the beginning of the line and is separated from
value by white space (such as one or more space or tab characters). value
consists of one or more quoted strings separated by white space. If two or
more strings are specified as value, they are normalized into single string
using the string normalization syntax the same as the <XREF LINKEND=STD.ISOC99>
language. Use
any of the following types of directives:
</PARA>

<PARA><emphasis>domain domainname</emphasis></PARA>

<PARA><emphasis>msgid message_identifier</emphasis></PARA>

<PARA><emphasis>msgid_plural untranslated_string_plural</emphasis></PARA>

<PARA><emphasis>msgstr message_string</emphasis></PARA>

<PARA><emphasis>msgstr[n] message_string</emphasis></PARA>

<PARA>
The behavior of the domain directive is affected by the options used. See
OPTIONS for the behavior when the <PARAMETER>-o</> option is specified. 
If the <PARAMETER>-o</> option
is not specified, the behavior of the <literal>domain</> directive is as follows:
<ORDEREDLIST>
<LISTITEM><PARA>
All msgids from the beginning of each <filename>.po</> file to the first 
<literal>domain</>
directive are put into a default message object file, messages (or
<filename>messages.mo</filename> if <parameter>--strict</parameter> option is specified).
</PARA></LISTITEM>
<LISTITEM><PARA>
When <command>msgfmt</command> encounters a 
<literal>domain domainname</literal> directive in the <filename>.po</> file,
all following <parameter>msgids</> until the next <literal>domain</> directive are put into the
message object file <filename>domainname</> (or 
<filename>domainname.mo</> if <parameter>--strict</> option is
specified).
</PARA></LISTITEM>
<LISTITEM><PARA>
Duplicate <parameter>msgids</> are defined in the scope of each domain. That is, a
<parameter>msgid</> is considered a duplicate only if the identical <parameter>msgid</>
exists in the same domain.
</PARA></LISTITEM>
<LISTITEM><PARA>
All duplicate <parameter>msgids</> are ignored.
</PARA></LISTITEM>
</ORDEREDLIST>

</PARA>

<PARA>
The <literal>msgid</> directive specifies the value of a message identifier associated
with the directive that follows it. The <literal>msgid_plural</> directive specifies the
plural form message specified to the plural message handling functions
<function>ngettext</>, <function>dngettext</> or <function>dcngettext</>. 
The message_identifier string
identifies a target string to be used at retrieval time. Each statement
containing a <literal>msgid</literal> directive shall be followed by a statement containing a
<literal>msgstr</literal> directive or <literal>msgstr[n]</literal> directives.
</PARA>

<PARA>
The <literal>msgstr</literal> directive specifies the target string associated with the
<parameter>message_identifier</> string declared in the immediately preceding 
<literal>msgid</literal> directive.
</PARA>

<PARA>
The <literal>msgstr[<parameter>n</>]</> (where 
<parameter>n</> = 0, 1, 2, ...) directive specifies the target string
to be used with plural form handling functions 
<function>ngettext</>, <function>dngettext</> and
<function>dcngettext</>.
</PARA>

<PARA>
Message strings can contain the following escape sequences:
<TABLE><TITLE>Escape Sequences</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY><literal>\n</literal></ENTRY><ENTRY>newline</ENTRY>
</ROW>
<ROW>
<ENTRY><literal>\t</literal></ENTRY><ENTRY>tab</ENTRY>
</ROW>
<ROW>
<ENTRY><literal>\v</literal></ENTRY><ENTRY>vertical tab</ENTRY>
</ROW>
<ROW>
<ENTRY><literal>\b</literal></ENTRY><ENTRY>backspace</ENTRY>
</ROW>
<ROW>
<ENTRY><literal>\r</literal></ENTRY><ENTRY>carriage return</ENTRY>
</ROW>
<ROW>
<ENTRY><literal>\f</literal></ENTRY><ENTRY>formfeed</ENTRY>
</ROW>
<ROW>
<ENTRY><literal>\\</literal></ENTRY><ENTRY>backslash</ENTRY>
</ROW>
<ROW>
<ENTRY><literal>\"</literal></ENTRY><ENTRY>double quote</ENTRY>
</ROW>
<ROW>
<ENTRY><literal>\ddd</literal></ENTRY><ENTRY>octal bit pattern</ENTRY>
</ROW>
<ROW>
<ENTRY><literal>\xHH</literal></ENTRY><ENTRY>hexadecimal bit pattern</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</PARA>

<REFSECT2 ID=msgfmt-comments xreflabel="Comment Handling">
<TITLE>Comment Handling</TITLE>
<PARA>
Comments are introduced by a <literal>#</literal>, and continue to the
end of the line. The second character (i.e. the character following the
<literal>#</>) has special meaning. Regular comments should
follow a space character. Other comment types include:
</PARA>

<PARA><emphasis># normal-comments</emphasis></PARA>

<PARA><emphasis>#. automatic-comments</emphasis></PARA>

<PARA><emphasis>#: reference...</emphasis></PARA>

<PARA><emphasis>#, flag</emphasis></PARA>

<PARA>
Automatic and reference comments are typically generated by external utilities,
and are not specified by the LSB. The <command>msgfmt</command> command
shall ignore such comments.
</PARA>

<PARA>
The <literal>#,</> comments require one or more flags separated by 
the comma (<literal>,</>) character.
The following flags can be specified:
</PARA>

<VARIABLELIST>

<VARLISTENTRY>
<TERM>
fuzzy
</TERM>
<LISTITEM>
<PARA>
This flag shows that the following <literal>msgstr</> string might not be a correct
translation. Only the translator can judge if the translation
requires further modification, or is acceptable as is. Once satisfied with
the translation, the translator then removes this fuzzy flag. 
</PARA>
<PARA>
If this flag is specified, the <command>msgfmt</> utility will not generate the entry
for the immediately following <literal>msgid</> in the output message catalog,
unless the <parameter>--use-fuzzy</> is specified.
</PARA>
</LISTITEM>
</VARLISTENTRY>


<VARLISTENTRY>
<TERM>
c-format
</TERM>
<TERM>
no-c-format
</TERM>
<LISTITEM>
<PARA>
The <literal>c-format</> flag indicates that the <literal>msgid</literal> string is
used as format string by <function>printf</>-like functions. 
If the <literal>c-format</> flag is
given for a string the <command>msgfmt</> utility may perform additional 
tests to check to
validity of the translation.
</PARA>
</LISTITEM>
</VARLISTENTRY>
</VARIABLELIST>

</REFSECT2>
<REFSECT2>
<TITLE>Plurals</TITLE>
<PARA>
The msgid entry with empty string ("") is called the header entry and
is treated specially. If the message string for the header entry contains
<literal>nplurals=value</>, the value indicates the number of plural forms. For example,
if <literal>nplurals=4</>, there are 4 plural forms. If <literal>nplurals</>
is defined, there
should be a <literal>plural=expression</> on the same line, separated by a semicolon (;)
character. The expression is a C language expression to determine which
version of <literal>msgstr[n]</> to be used based on the value of <literal>n</>,
the last argument
of <function>ngettext</>, <function>dngettext</> or <function>dcngettext</>.
For example:
</PARA>
<PROGRAMLISTING>
nplurals=2; plural=n == 1 ? 0 : 1
</PROGRAMLISTING>

<PARA>
indicates that there are 2 plural forms in the language; <literal>msgstr[0]</literal> is used
if <literal>n == 1</>, otherwise <literal>msgstr[1]</> is used. Another example:
</PARA>

<PROGRAMLISTING>
nplurals=3; plural=n==1 ? 0 : n==2 ? 1 : 2
</PROGRAMLISTING>

<PARA>
indicates that there are 3 plural forms in the language; <literal>msgstr[0]</> is used
if <literal>n == 1</>, <literal>msgstr[1]</> is used if 
<literal>n == 2</>, otherwise <literal>msgstr[2]</> is used.
</PARA>

<PARA>
If the header entry contains <literal>charset=<parameter>codeset</></> string, the 
<parameter>codeset</> is used to
indicate the codeset to be used to encode the message strings. If the output
string's codeset is different from the message string's codeset, codeset
conversion from the message strings's codeset to the output string's codeset
will be performed upon the call of <function>gettext</>, <function>dgettext</>,
<function>dcgettext</>, <function>ngettext</>, <function>dngettext</>, and 
<function>dcngettext</>. The output string's codeset is
determined by the current locale's codeset (the return value of
nl_langinfo(CODESET)) by default, and can be changed by the call of
<function>bind_textdomain_codeset</>.
</PARA>
</REFSECT2>
</REFSECT1>

<REFSECT1>
<TITLE>Exit Status</TITLE>
<PARA>
The following exit values are returned:
</PARA>

<VARIABLELIST>

<VARLISTENTRY>
<TERM>
<returnvalue>0</>
</TERM>
<LISTITEM>
<PARA>
Successful completion.
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>
<returnvalue>&gt;0</>
</TERM>
<LISTITEM>
<PARA>
An error occurred.
</PARA>
</LISTITEM>
</VARLISTENTRY>

</VARIABLELIST>
</REFSECT1>

<REFSECT1>
<TITLE>Application Usage</TITLE>
<PARA>
Neither <command>msgfmt</> nor any <function>gettext</> function
imposes a limit on the total length
of a message. Installing message catalogs under the C locale is pointless,
since they are ignored for the sake of efficiency.
</PARA>
</REFSECT1>

<REFSECT1>
<TITLE>Examples</TITLE>
<PARA>
Example 1: Examples of creating message objects from message files.
</PARA>
<PARA>
In this example <filename>module1.po</> and 
<filename>module2.po</> are portable message object
files.
</PARA>

<PROGRAMLISTING>
example% cat module1.po

# default domain "messages"

msgid "msg 1"

msgstr "msg 1 translation"

#

domain "help_domain"

msgid "help 2"

msgstr "help 2 translation"

#

domain "error_domain"

msgid "error 3"

msgstr "error 3 translation"

example% cat module2.po

# default domain "messages"

msgid "mesg 4"

msgstr "mesg 4 translation"

#

domain "error_domain"

msgid "error 5"

msgstr "error 5 translation"

#

domain "window_domain"

msgid "window 6"

msgstr "window 6 translation"
</PROGRAMLISTING>

<PARA>
The following command will produce the output files <filename>messages</>, 
<filename>help_domain</>, and <filename>error_domain</>.
</PARA>

<PROGRAMLISTING>
example% msgfmt module1.po
</PROGRAMLISTING>

<PARA>
The following command will produce the output files <filename>messages</>,
<filename>help_domain</>, <filename>error_domain</>, and <filename>window_domain</>.
</PARA>

<PROGRAMLISTING>
example% msgfmt module1.po module2.po
</PROGRAMLISTING>

<PARA>
The following example will produce the output file <filename>hello.mo</>.
</PARA>

<PROGRAMLISTING>
example% msgfmt -o hello.mo module1.po module2.po
</PROGRAMLISTING>

</REFSECT1>
</REFENTRY>

