<SECT1 ID=iniscrptfunc XRefLabel="Init Script Functions">
<TITLE>Init Script Functions</TITLE>

<PARA>
Each conforming init script shall source the file
<filename>/lib/lsb/init-functions</filename>. This file shall cause the
following shell script commands to be defined in an unspecified manner.  
<note>
<para>
This can be done either by
adding a directory to the 
<envar>PATH</envar> variable which defines these commands, or by
defining shell aliases.  
</para>
<para>
Although the commands made available via this mechanism need not
be conforming applications in their own right, applications that
use them should only depend on features described in this specification.
</para>
</note>
Conforming scripts
shall not specify the "exit on error" option (i.e. 
<command>set -e</command>) when sourcing this file, or calling any of the
commands thus made available. 
</PARA>

<PARA>
The <command>start_daemon</command>, <command>killproc</command> and
<command>pidofproc</command> functions shall use 
the following algorithm for determining
the status and the process identifiers of the specified program. 
<orderedlist numeration=arabic>
<listitem><para>If the <parameter>-p pidfile</parameter> option is specified,
and the named <filename>pidfile</filename> exists,
a single line at the start of the <filename>pidfile</filename> shall be read. 
If this line contains one or more numeric values, separated by spaces,
these values shall be used.
</para></listitem>
<listitem><para>
Otherwise, 
<filename>/var/run/<replaceable>basename</replaceable>.pid</filename> 
shall be read in a similar fashion.
If this contains one or more numeric values on the first line, these values
shall be used.
</para>
</listitem>
<listitem>
<para>
Optionally, if neither of the above methods has determined the
process identifiers required, implementations may use unspecified additional
methods to locate the process identifiers required.
</para>
</listitem>
</orderedlist>
The method used
to determine the status is implementation defined, but should allow for
non-binary programs.
<note>
<para>
Commonly used methods check either for the
existence of the <filename>/proc/pid</filename> directory or use
<filename>/proc/pid/exe</filename> and <filename>/proc/pid/cmdline</filename>.
Relying only on <filename>/proc/pid/exe</filename> is discouraged since this
specification does not specify the existence of, or semantics
for, <filename>/proc</filename>. Additionally, using
<filename>/proc/pid/exe</filename>
may result in a not-running status for daemons that are written in a script
language.
</para>
</note>
Conforming implementations may use other mechanisms besides those based on
pidfiles, unless the <parameter>-p pidfile</parameter>
option has been used. Conforming applications
should not rely on such mechanisms and should
always use a <filename>pidfile</filename>.
When a program is stopped, it should delete its
<filename>pidfile</filename>. Multiple process identifiers
shall be separated by a single space in the <filename>pidfile</filename>
and in the output of <command>pidofproc</command>.
</PARA>

<variablelist>
<varlistentry>
<term>
<cmdsynopsis>
<command>
start_daemon
</command>
<arg>-f</arg>
<arg>-n nicelevel</arg>
<arg>-p pidfile</arg>
<arg choice=plain>pathname</arg>
<arg rep=repeat>args</arg>
</cmdsynopsis></term>
<listitem>
<para>
runs the specified program as a daemon.
The <command>start_daemon</command> function
shall check if the program is already running
using the algorithm given above. If so, it shall not
start another copy of the daemon unless the <parameter>-f</parameter>
option is given. The <parameter>-n</parameter> option specifies a nice
level. See <command>nice</command>.
<command>start_daemon</command> shall
return the LSB defined exit status codes. It
shall return 0 if the program has been successfully started or
is running and not 0 otherwise.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<cmdsynopsis>
<command>killproc</command>
<arg>-p pidfile</arg>
<arg choice=plain>pathname</arg>
<arg>signal</arg>
</cmdsynopsis>
</term>
<listitem>
<para>
The <command>killproc</command> function
shall stop the specified program. The program is 
found using the algorithm given above. If a
signal is specified, using the
<parameter>-<replaceable>signal_name</replaceable></parameter> or
<parameter>-<replaceable>signal_number</replaceable></parameter> syntaxes
as specified by the <command>kill</command> command,
the program is sent that signal.
Otherwise, a <constant>SIGTERM</constant> followed by a 
<constant>SIGKILL</constant>
after an unspecified number of seconds shall be sent.
If a program has been terminated, the <filename>pidfile</filename>
should be removed if the
terminated process has not already done so.
The <command>killproc</command> function
shall return the LSB defined exit status codes. If called
without a signal, it shall return 0 if the program has been stopped or
is not running and not 0 otherwise. If a signal is given, it shall return 0
only if the program is running. 
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<cmdsynopsis>
<command>pidofproc</command>
<arg>-p pidfile</arg>
<arg choice=plain>pathname</arg>
</cmdsynopsis>
</term>
<listitem>
<para>
The <command>pidofproc</command> function shall return
one or more process identifiers for a particular
daemon using the algorithm given above. Only process identifiers
of running processes should be returned.
Multiple process identifiers shall be separated by a single space.
<note><para>
A process may exit between <command>pidofproc</command> discovering its identity
and the caller of <command>pidofproc</command> being able to act on that identity.
As a result, no test assertion can be made that the process identifiers
returned by <command>pidofproc</command> <emphasis>shall</emphasis> be
running processes.
</para>
</note>
The <command>pidofproc</command> function
shall return the LSB defined exit status
codes for "status". It shall return 0 if the program is
running and not 0 otherwise.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<cmdsynopsis>
<command>
log_success_msg
</command>
<arg choice=plain>message
</arg>
</cmdsynopsis>
</term>
<listitem>
<para>
The <command>log_success_msg</command> function
shall cause the system to print a success
message.  
<note><para>The message should be relatively short; no
more than 60 characters is highly desirable.</para></note>
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<cmdsynopsis>
<command>
log_failure_msg
</command>
<arg choice=plain>message
</arg>
</cmdsynopsis>
</term>
<listitem>
<para>
The <command>log_failure_msg</command> function
shall cause the system to print a failure
message.  
<note><para>The message should be relatively short; no
more than 60 characters is highly desirable.</para></note>
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<cmdsynopsis>
<command>
log_warning_msg
</command>
<arg choice=plain>message
</arg>
</cmdsynopsis>
</term>
<listitem>
<para>
The <command>log_warning_msg</command> function
shall cause the system to print a warning
message.  
<note><para>The message should be relatively short; no
more than 60 characters is highly desirable.</para></note>
</para>
</listitem>
</varlistentry>
</variablelist>
</SECT1>

