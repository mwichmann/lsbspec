<SECT1 ID=iniscrptact>
<TITLE>Init Script Actions</TITLE>
<PARA>
Init files provided by LSB applications shall accept one argument,
saying what to do:
</PARA>
<SIMPLELIST type=horiz columns=2>
<MEMBER>start</MEMBER><MEMBER>start the service</MEMBER>
<MEMBER>stop</MEMBER><MEMBER>stop the service</MEMBER>
<MEMBER>restart</MEMBER><MEMBER>stop and restart the service if the service
is already running, otherwise start the service</MEMBER>
<MEMBER>try-restart</MEMBER><MEMBER>restart the service if the service
is already running</MEMBER>
<MEMBER>reload</MEMBER><MEMBER>cause the configuration of the service to be
reloaded without actually stopping and restarting the service</MEMBER>
<MEMBER>force-reload</MEMBER><MEMBER>cause the configuration to be reloaded
if the service supports this, otherwise restart the service if it is
running</MEMBER>
<MEMBER>status</MEMBER><MEMBER>print the current status of the service</MEMBER>
</SIMPLELIST>
<PARA>
The start, stop, restart, force-reload, and status commands shall be supported
by all init files; the reload and the try-restart options are optional. Other
init script actions may be defined by the init script.
</PARA>
<PARA>
Init files shall ensure that they will behave sensibly if invoked
with start when the service is already running, or with stop when it
isn't, and that they don't kill unfortunately-named user processes. 
The best way to achieve this is to use the init-script functions provided by
<FILENAME>/lib/lsb/init-functions</FILENAME>.
</PARA>
<PARA>
If a service reloads its configuration automatically (as in the case
of cron, for example), the reload option of the init file shall
behave as if the configuration has been reloaded successfully. The restart,
try-restart, reload and force-reload action may be atomic; i.e. if a service
is known not be operational after a restart or reload, the script may return
an error without any further action.
</PARA>
<PARA>
These executable files shall not fail obscurely when the configuration
files remain but the package has been removed, as the default in [the
packaging system] is to leave configuration files on the system after
the package has been removed.  Only when it is executed with the
[purge] option will [the packaging system] remove configuration files.
Therefore, you should include a test statement at the top of the file,
like this:
<SCREEN>
<USERINPUT>test -f program-executed-later-in-file || exit 5</USERINPUT>
</SCREEN>
or take the equivalent action if the init file is not a shell script.
</PARA>
<PARA>
If the status command is given, the init script will return the following 
exit status codes.  

<SIMPLELIST type=horiz columns=2>
<MEMBER>0</MEMBER><MEMBER>program is running or service is OK</MEMBER>
<MEMBER>1</MEMBER><MEMBER>program is dead and /var/run pid file exists</MEMBER>
<MEMBER>2</MEMBER><MEMBER>program is dead and /var/lock lock file exists</MEMBER>
<MEMBER>3</MEMBER><MEMBER>program is not running</MEMBER>
<MEMBER>4</MEMBER><MEMBER>program or service status is unknown</MEMBER>
<MEMBER>5-99</MEMBER><MEMBER>reserved for future LSB use</MEMBER>
<MEMBER>100-149</MEMBER><MEMBER>reserved for distribution use</MEMBER>
<MEMBER>150-199</MEMBER><MEMBER>reserved for application use</MEMBER>
<MEMBER>200-254</MEMBER><MEMBER>reserved</MEMBER>
</SIMPLELIST>
</PARA>

<PARA>
In the case of init script commands other than "status" (i.e.,
"start", "stop", "restart", "try-restart", "reload", and "force-reload"), the init
script shall return an exit status of zero if the action described by
the argument has been successful.  Otherwise, the exit status shall
be non-zero, as defined below.  In addition to straightforward
success, the following situations are also to be considered
successful:

<ITEMIZEDLIST MARK="bullet">
<LISTITEM><PARA>
restarting a service (instead of reloading it) with the "force-reload" argument
</PARA></LISTITEM>
<LISTITEM><PARA>
running "start" on a service already running
</PARA></LISTITEM>
<LISTITEM><PARA>
running "stop" on a service already stopped or not running
</PARA></LISTITEM>
<LISTITEM><PARA>
running "restart" on a service already stopped or not running
</PARA></LISTITEM>
<LISTITEM><PARA>
running "try-restart" on a service already stopped or not running
</PARA></LISTITEM>
</ITEMIZEDLIST>

</PARA>
<PARA>
In case of an error, while processing any init script action except
for "status", the init script shall print an error message and return
one of the following non-zero exit status codes.

<SIMPLELIST type=horiz columns=2>
<MEMBER>1</MEMBER><MEMBER>generic or unspecified error (current practice)</MEMBER>
<MEMBER>2</MEMBER><MEMBER>invalid or excess argument(s)</MEMBER>
<MEMBER>3</MEMBER><MEMBER>unimplemented feature (for example, "reload")</MEMBER>
<MEMBER>4</MEMBER><MEMBER>user had insufficient privilege</MEMBER>
<MEMBER>5</MEMBER><MEMBER>program is not installed</MEMBER>
<MEMBER>6</MEMBER><MEMBER>program is not configured</MEMBER>
<MEMBER>7</MEMBER><MEMBER>program is not running</MEMBER>
<MEMBER>8-99</MEMBER><MEMBER>reserved for future LSB use</MEMBER>
<MEMBER>100-149</MEMBER><MEMBER>reserved for distribution use</MEMBER>
<MEMBER>150-199</MEMBER><MEMBER>reserved for application use</MEMBER>
<MEMBER>200-254</MEMBER><MEMBER>reserved</MEMBER>
</SIMPLELIST>
</PARA>
<PARA>
Error and status messages should be printed with the logging
functions such as log_failure_msg and so on.  Scripts may write to
standard error or standard output, but implementations need not
present text written to standard error/output to the user or do
anything else with it.
</PARA>
<PARA>
Since init files may be run manually by a system administrator with
non-standard environment variable values for PATH, USER, LOGNAME,
etc. init files shall not depend on the values of these environment
variables.  They should set them to some known/default values if they
are needed.

</PARA>
</SECT1>
