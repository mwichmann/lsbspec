<PART ID="tocsysinit">
<TITLE>System Initialization</TITLE>

<CHAPTER ID=sysinit>
<TITLE>System Initialization</TITLE>

<SECT1 ID=cronjobs XRefLabel="Cron Jobs">
<TITLE ID=cronjobs.title>Cron Jobs</TITLE>

<PARA>
In addition to the individual user <filename>crontab</filename> files specified
by <xref linkend=std.susv3> stored under <filename>/var/spool/cron</filename>,
the process that executes scheduled commands shall also process the following
additional <filename>crontab</filename> files:
<SIMPLELIST type=inline>
<MEMBER><FILENAME>/etc/crontab</FILENAME></MEMBER>
<MEMBER><FILENAME>/etc/cron.d/*</FILENAME></MEMBER>
</SIMPLELIST>.
The installation of a package shall not modify
the configuration file <FILENAME>/etc/crontab</FILENAME>.
<!--nor shall it modify the files in <FILENAME>/var/spool/cron/crontabs</FILENAME>.-->
</PARA>
<PARA>
If a package wishes to install a job that has to be executed periodically,
it shall place an executable <FirstTerm>cron script</FirstTerm> in one of the
following directories:
</PARA>
<SIMPLELIST>
<MEMBER><FILENAME>/etc/cron.hourly</FILENAME></MEMBER>
<MEMBER><FILENAME>/etc/cron.daily</FILENAME></MEMBER>
<MEMBER><FILENAME>/etc/cron.weekly</FILENAME></MEMBER>
<MEMBER><FILENAME>/etc/cron.monthly</FILENAME></MEMBER>
</SIMPLELIST>
<PARA>
As these directory names suggest, the files within them are executed on a
hourly, daily, weekly, or monthly basis, respectively, under the control of an
entry in one of the system <filename>crontab</filename> files, at an
unspecified time of day.
See below for the rules concerning the names of cron scripts.
</PARA>

<NOTE>
<PARA>
It is recommended that cron scripts installed in any of these directories be
script files rather than compiled binaries so that they may be
modified by the local system administrator. Conforming applications
may only install cron scripts which use an interpreter required by
this specification or provided by this or another conforming application.
</PARA>
<PARA>
This specification does not define the concept of a package
<FirstTerm>upgrade</FirstTerm>. Implementations may do different
things when packages are upgraded, including not replacing a
cron script if it marked as a configuration file,
particularly if the cron script appears to have been modified since
installation.  In some circumstances, the cron script may
not be removed when the package is uninstalled. 
Applications should design their installation
procedure and cron scripts to be robust in the face of such
behavior.  In particular, cron scripts should not fail obscurely
if run in unexpected circumstances. Testing for the existence
of application binaries before executing them is suggested.
</PARA>
</NOTE>
<PARA>
If a certain task has to be executed at other than the predefined
frequencies, the package shall install a file
<FILENAME>/etc/cron.d/<replaceable>cron-name</replaceable></FILENAME>.
The file shall have  the same format as that described for the 
<command>crontab</command> command in <xref linkend="std.susv3">, except that 
there shall be an additional field, <parameter>username</parameter>, before
the name of the command to execute. For completeness, the seven fields shall
be:
<orderedlist>
<listitem><para>Minute [0,59]</para></listitem>
<listitem><para>Hour [0,23]</para></listitem>
<listitem><para>Day of the month [1,31]</para></listitem>
<listitem><para>Month of the year [1,12]</para></listitem>
<listitem><para>Day of the week [0,6] (with 0=Sunday)</para></listitem>
<listitem><para>Username</para></listitem>
<listitem><para>command [args ...]</para></listitem>
</orderedlist>

This file shall be processed by the system automatically, with the named
command being run at the specified time, as the specified username.
</PARA>

<PARA>
To avoid namespace conflicts in the <filename>/etc/cron.*</filename>
directories, filenames installed by conforming packages in
<SIMPLELIST type=inline>
<MEMBER><FILENAME>/etc/cron.hourly</FILENAME></MEMBER>
<MEMBER><FILENAME>/etc/cron.daily</FILENAME></MEMBER>
<MEMBER><FILENAME>/etc/cron.weekly</FILENAME></MEMBER>
<MEMBER><FILENAME>/etc/cron.monthly</FILENAME></MEMBER>
<MEMBER>or <FILENAME>/etc/cron.d</FILENAME></MEMBER>
</SIMPLELIST>
shall come from a managed namespace.
These filenames may be assigned using one of the following methods:
</PARA>

<ITEMIZEDLIST MARK="bullet">
<LISTITEM><PARA>
	Assigned names.  Such names must be chosen from
		the character set <literal>[a-z0-9]</literal>.
		In order to avoid conflicts these 
		names shall be reserved
		through the Linux Assigned Names and Numbers
		Authority (LANANA).
		Information about the LANANA
		may be found at
		<ULINK URL="http://www.lanana.org">www.lanana.org</ULINK>.
	</PARA>

<NOTE>
	<PARA>
		Commonly used names should be reserved in advance; 
		developers for projects are encouraged to reserve names
		from LANANA, so that each distribution can use the same
		name, and to avoid conflicts with other projects.
</PARA></NOTE></LISTITEM>

<LISTITEM><PARA>
	Hierarchical names.  Script names in this category take
		the form: 
		<filename>&lt;hier1&gt;-&lt;hier2&gt;-...-&lt;name&gt;</>,
		where name is taken from the character set 
		<literal>[a-z0-9],</> 
		and where there may be one or more 
		<filename>&lt;hier-n&gt;</> components.  
		<filename>&lt;hier1&gt;</> may either be an LSB provider name assigned
		by the LANANA, or
		it may be owners' DNS name in lower case, with at
		least one <literal>'.'</>.  
	e.g.  "<literal>debian.org</>", "<literal>staroffice.sun.com</>", etc.
		The LSB provider name assigned by LANANA 
		shall only consist of the ASCII characters <literal>[a-z0-9]</>.
</PARA></LISTITEM>

<LISTITEM><PARA>
	Reserved names.  Names that
		begin with the character '<literal>_</>' are reserved for
		distribution use only.  These names should be used
		for essential system packages only.
</PARA></LISTITEM>
</ITEMIZEDLIST>

</SECT1>


<SECT1 ID="iniscrptact" XRefLabel="Init Script Actions">
<TITLE>Init Script Actions</TITLE>

<PARA>
Conforming applications which need to execute commands on changes
to the system run level (including boot and shutdown),
may install one or more <FirstTerm>init scripts</FirstTerm>.
Init scripts provided by conforming applications shall accept a single
argument which selects the action:
</PARA>
<SIMPLELIST type=horiz columns=2>
<MEMBER><command>start</command></MEMBER>
<MEMBER>start the service</MEMBER>

<MEMBER><command>stop</command></MEMBER>
<MEMBER>stop the service</MEMBER>

<MEMBER><command>restart</command></MEMBER>
<MEMBER>stop and restart the service if the service
is already running, otherwise start the service</MEMBER>

<MEMBER><command>try-restart</command></MEMBER>
<MEMBER>restart the service if the service
is already running</MEMBER>

<MEMBER><command>reload</command></MEMBER>
<MEMBER>cause the configuration of the service to be
reloaded without actually stopping and restarting the service</MEMBER>

<MEMBER><command>force-reload</command></MEMBER>
<MEMBER>cause the configuration to be reloaded
if the service supports this, otherwise restart the service if it is
running</MEMBER>

<MEMBER><command>status</command></MEMBER>
<MEMBER>print the current status of the service</MEMBER>
</SIMPLELIST>
<PARA>
The <command>start</command>, <command>stop</command>, <command>restart</command>, <command>force-reload</command>, and <command>status</command> actions shall be supported
by all init scripts; the <command>reload</command> and the <command>try-restart</command> actions are optional. Other
init-script actions may be defined by the init script.
</PARA>
<PARA>
Init scripts shall ensure that they will behave sensibly if invoked
with <command>start</command> when the service is already running, or with <command>stop</command> when
not running, and that they do not kill similarly-named user processes. 
The best way to achieve this is to use the init-script functions provided by
<FILENAME>/lib/lsb/init-functions</FILENAME> (see 
<xref linkend="iniscrptfunc">)
</PARA>
<PARA>
If a service reloads its configuration automatically (as in the case
of cron, for example), the <command>reload</command> action of the init
script shall behave as if the configuration was reloaded successfully.
The <command>restart</command>,
<command>try-restart</command>, <command>reload</command> and 
<command>force-reload</command> actions may be atomic; that is if a service
is known not to be operational after a restart or reload, the script may return
an error without any further action.
</PARA>
<note>
<PARA>
This specification does not define the concept of a package
<FirstTerm>upgrade</FirstTerm>. Implementations may do different
things when packages are upgraded, including not replacing an
init script if it is marked as a configuration file,
particularly if the file appears to have been modified since
installation.  In some circumstances, the init script may
not be removed when the package is uninstalled. 
Applications should design their installation
procedure and init scripts to be robust in the face of such
behavior.  In particular, init scripts should not fail obscurely
if run in unexpected circumstances. Testing for the existence
of application binaries before executing them is suggested.
</PARA>
</note>
<PARA>
If the <command>status</command> action is requested,
the init script will return the following 
exit status codes.  

<SIMPLELIST type=horiz columns=2>
<MEMBER><errorcode>0</errorcode></MEMBER><MEMBER>program is running or service is OK</MEMBER>
<MEMBER><errorcode>1</errorcode></MEMBER><MEMBER>program is dead and /var/run pid file exists</MEMBER>
<MEMBER><errorcode>2</errorcode></MEMBER><MEMBER>program is dead and /var/lock lock file exists</MEMBER>
<MEMBER><errorcode>3</errorcode></MEMBER><MEMBER>program is not running</MEMBER>
<MEMBER><errorcode>4</errorcode></MEMBER><MEMBER>program or service status is unknown</MEMBER>
<MEMBER><errorcode>5-99</errorcode></MEMBER><MEMBER>reserved for future LSB use</MEMBER>
<MEMBER><errorcode>100-149</errorcode></MEMBER><MEMBER>reserved for distribution use</MEMBER>
<MEMBER><errorcode>150-199</errorcode></MEMBER><MEMBER>reserved for application use</MEMBER>
<MEMBER><errorcode>200-254</errorcode></MEMBER><MEMBER>reserved</MEMBER>
</SIMPLELIST>
</PARA>

<PARA>
For all other init-script actions, the init
script shall return an exit status of zero if the action 
was successful.  Otherwise, the exit status shall
be non-zero, as defined below.  In addition to straightforward
success, the following situations are also to be considered
successful:

<ITEMIZEDLIST MARK="bullet">
<LISTITEM><PARA>
restarting a service (instead of reloading it) with the <command>force-reload</command> argument
</PARA></LISTITEM>
<LISTITEM><PARA>
running <command>start</command> on a service already running
</PARA></LISTITEM>
<LISTITEM><PARA>
running <command>stop</command> on a service already stopped or not running
</PARA></LISTITEM>
<LISTITEM><PARA>
running <command>restart</command> on a service already stopped or not running
</PARA></LISTITEM>
<LISTITEM><PARA>
running <command>try-restart</command> on a service already stopped or not running
</PARA></LISTITEM>
</ITEMIZEDLIST>

</PARA>
<PARA>
In case of an error while processing any init-script action except
for <command>status</command>, the init script shall print an error
message and exit with a non-zero status code:

<SIMPLELIST type=horiz columns=2>
<MEMBER><errorcode>1</errorcode></MEMBER><MEMBER>generic or unspecified error (current practice)</MEMBER>
<MEMBER><errorcode>2</errorcode></MEMBER><MEMBER>invalid or excess argument(s)</MEMBER>
<MEMBER><errorcode>3</errorcode></MEMBER><MEMBER>unimplemented feature (for example, "reload")</MEMBER>
<MEMBER><errorcode>4</errorcode></MEMBER><MEMBER>user had insufficient privilege</MEMBER>
<MEMBER><errorcode>5</errorcode></MEMBER><MEMBER>program is not installed</MEMBER>
<MEMBER><errorcode>6</errorcode></MEMBER><MEMBER>program is not configured</MEMBER>
<MEMBER><errorcode>7</errorcode></MEMBER><MEMBER>program is not running</MEMBER>
<MEMBER><errorcode>8-99</errorcode></MEMBER><MEMBER>reserved for future LSB use</MEMBER>
<MEMBER><errorcode>100-149</errorcode></MEMBER><MEMBER>reserved for distribution use</MEMBER>
<MEMBER><errorcode>150-199</errorcode></MEMBER><MEMBER>reserved for application use</MEMBER>
<MEMBER><errorcode>200-254</errorcode></MEMBER><MEMBER>reserved</MEMBER>
</SIMPLELIST>
</PARA>
<PARA>
Error and status messages should be printed with the logging
functions (see <xref linkend="iniscrptfunc">) 
<function>log_success_msg</function>,
<function>log_failure_msg</function> and 
<function>log_warning_msg</function>.
Scripts may write to
standard error or standard output, but implementations need not
present text written to standard error/output to the user or do
anything else with it.
</PARA>
<PARA>
Since init scripts may be run manually by a system administrator with
non-standard environment variable values for <EnVar>PATH</EnVar>, 
<EnVar>USER</EnVar>, <EnVar>LOGNAME</EnVar>, etc., 
init scripts shall not depend on the values of these environment
variables.  They should set them to some known/default values if they
are needed.

</PARA>
</SECT1>


<SECT1 ID=initscrcomconv XRefLabel="Comment Conventions for Init Scripts">
<TITLE>Comment Conventions for Init Scripts</TITLE>

<PARA>
Conforming applications may install one or more init scripts.
These init scripts must be activated by invoking the
<command>install_initd</command> command.
Prior to package removal, the changes applied by
<command>install_initd</command> must be undone by
invoking <command>remove_initd</command>.
See <xref linkend="initsrcinstrm"> for more details.
</PARA>

<PARA> 
<command>install_initd</command> and <command>remove_initd</command>
determine actions to take by decoding a specially formatted
block of lines in the script. This block shall be delimited
by the lines 
<screen>
### BEGIN INIT INFO
### END INIT INFO
</screen>
The delimiter lines may contain trailing whitespace, which shall be
ignored.  All lines inside the block shall begin with a hash
character <literal>'#'</literal> in the first column, so the shell
interprets them as comment lines which do not affect operation of
the script. The lines shall be of the form:
<SCREEN>
<!-- tried to do this as a <cmdsynopsis> but the ':' defeats me -->
# {keyword}: arg1 [arg2...]
</SCREEN>
with exactly one space character between the <literal>'#'</literal>
and the keyword, with a single exception.  In lines following a
line containing the <command>Description</command> keyword, and until the
next keyword or block ending delimiter is seen,
a line where the <literal>'#'</literal>
is followed by more than one space or a tab character
shall be treated as a continuation of the previous line.
</para>
<para>
The information extracted from the block is used by the
installation tool or the init-script system to assure
that init scripts are run in the correct order.   
It is unspecified whether the information is evaluated
only when <command>install_initd</command> runs, when
the init scripts are executed, or both. The information
extracted includes run levels, defined in <xref linkend="runlevels">,
and boot facilities, defined in <xref linkend="facilname">.
</para>

<para>
The following keywords, with their arguments, are defined:
</PARA>

<variablelist>
<varlistentry>
<term>
<cmdsynopsis>
<command>Provides:</command>
<arg choice=plain>boot_facility_1</arg>
<arg choice=opt rep=repeat>boot_facility_2</arg>
</cmdsynopsis>
</term>
<listitem>
<para>
boot facilities provided by this init script.
When an init script is run with a <command>start</command> argument,
the boot facility or facilities specified by the 
<command>Provides</command> keyword shall be deemed present
and hence init scripts which require those boot facilities
should be started later.  When an init script is run with a 
<command>stop</command> argument, the boot facilities specified by
the <command>Provides</command> keyword are deemed  no longer present.  
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<cmdsynopsis>
<command>Required-Start:</command>
<arg choice=plain>boot_facility_1</arg>
<arg choice=opt rep=repeat>boot_facility_2</arg>
</cmdsynopsis>
</term>
<listitem>
<para>
facilities which must be available during startup of this service.
The init-script system should insure init scripts which
provide the <command>Required-Start</command> facilities
are started before starting this script.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<cmdsynopsis>
<command>Required-Stop:</command>
<arg choice=plain>boot_facility_1</arg>
<arg choice=opt rep=repeat>boot_facility_2</arg>
</cmdsynopsis>
</term>
<listitem>
<para>
facilities which must
be available during the shutdown of this service.  The
init-script system should avoid stopping init scripts which provide
the <command>Required-Stop</command>
facilities until this script is stopped.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<cmdsynopsis>
<command>Should-Start:</command>
<arg choice=plain>boot_facility_1</arg>
<arg choice=opt rep=repeat>boot_facility_2</arg>
</cmdsynopsis>
</term>
<listitem>
<para>
facilities which, if present, should
be available during startup of this service. This allows for weak dependencies
which do not cause the service to fail if a facility is not available.
The service may provide reduced functionality in this situation.
Conforming applications should not rely on the existence of this feature.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<cmdsynopsis>
<command>Should-Stop:</command>
<arg choice=plain>boot_facility_1</arg>
<arg choice=opt rep=repeat>boot_facility_2</arg>
</cmdsynopsis>
</term>
<listitem>
<para>
facilities which should be available during shutdown of this service.
<!-- XXX seems like more should be said here -->
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<cmdsynopsis>
<command>Default-Start:</command>
<arg choice=plain>run_level_1</arg>
<arg choice=opt rep=repeat>run_level_2</arg>
</cmdsynopsis>
</term>
<term>
<cmdsynopsis>
<command>Default-Stop:</command>
<arg choice=plain>run_level_1</arg>
<arg choice=opt rep=repeat>run_level_2</arg>
</cmdsynopsis>
</term>
<listitem>
<para>
which run levels should by default run the init script with a 
<command>start</command> (<command>stop</command>) argument
to start (stop) the services controlled by the init script.
<informalexample>
<para>
For example, if a service should run in runlevels 3, 4, and 5 only,
specify "Default-Start: 3 4 5" and "Default-Stop: 0 1 2 6".
</para>
</informalexample>
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<cmdsynopsis>
<command>Short-Description:</command>
<arg choice=plain>short_description</arg>
</cmdsynopsis>
</term>
<listitem>
<para>
provide a brief description of the actions of the init script.
Limited to a single line of text.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<cmdsynopsis>
<command>Description:</command>
<arg choice=plain>multiline_description</arg>
</cmdsynopsis>
</term>
<listitem>
<para>
provide a more complete description of the actions of the init script.
May span mulitple lines.  In a multiline description,
each continuation line shall begin with a '#' followed by tab character
or a '#' followed by at least two space characters.  The multiline
description is terminated by the first line that does not match this
criteria.
</para>
</listitem>
</varlistentry>
</variablelist>

<PARA>
Additional keywords may be defined in future versions of
this specification. Also, implementations 
may define local extensions by using the prefix
<command>X-<replaceable>implementor</replaceable></command>.
For example, <command>X-RedHat-foobardecl</command>, or 
<command>X-Debian-xyzzydecl</command>.  
</PARA>

<para>
Example:
<informalexample>
<screen>
	### BEGIN INIT INFO
	# Provides: lsb-ourdb
	# Required-Start: $local_fs $network $remote_fs
	# Required-Stop: $local_fs $network $remote_fs
	# Default-Start:  2 3 4 5
	# Default-Stop: 0 1 6
	# Short-Description: start and stop OurDB
	# Description: OurDB is a very fast and reliable database
	#	 engine used for illustrating init scripts
	### END INIT INFO
</screen>
</informalexample>
</para>

<PARA>
The comment conventions described in this section are only required for
init scripts installed by conforming applications. Conforming
runtime implementations are not required to use this scheme in their system
provided init scripts.
</PARA>

<NOTE><PARA>
This specification does not require, but is designed to allow, the
development of a system which runs boot scripts in parallel.  Hence,
enforced-serialization of scripts is avoided unless it is explicitly
necessary. 
</PARA></NOTE>

</SECT1>


<SECT1 ID=initsrcinstrm XRefLabel="Installation and Removal of Init Scripts">
<TITLE>Installation and Removal of Init Scripts</TITLE>

<PARA>
Conforming applications may install one or more initialization scripts
(or <emphasis>init scripts</emphasis>).
Such scripts are installed in system specific locations by the
<command>lsbinstall</command> command (see <xref linkend="lsbinstall">),
and activated by the <command>install_initd</command> command
(see <xref linkend="installinitd">).
</para>
<para>
During the installer's post-install processing phase the program
<command>/usr/lib/lsb/install_initd</command> must be called to
activate the init script. Activation consists of arranging for
the init script to be called in the correct order on system
run-level changes (including system boot and shutdown), based on
dependencies supplied in the init script (see <XRef linkend="initscrcomconv">).
The <command>install_initd</command> command should be thought of as
a wrapper which hides the implementation details;
how any given implementation arranges for the init
script to be called at the appropriate time is not specified.
</para>
<informalexample>
<blockquote>
<para>
Example: if an init script specified 
"Default-Start: 3 4 5" and "Default-Stop: 0 1 2 6",
<command>install_initd</command> might create
"start" symbolic links with names starting with 'S' in 
<filename>/etc/rc3.d</filename>,
<filename>/etc/rc4.d</filename> and
<filename>/etc/rc5.d</filename>
and "stop" symbolic links with names starting with 'K' in
<filename>/etc/rc0.d</filename>,
<filename>/etc/rc1.d</filename>,
<filename>/etc/rc2.d</filename> and
<filename>/etc/rc6.d</filename>. Such
a scheme would be similar to the System V Init
mechanism, but is by no means the only way
this specification could be implemented.
</para>
</blockquote>
</informalexample>

<PARA>
The <command>install_initd</command> command takes a single argument, the full pathname
of the installed init script. The init script must already be
installed, typically by means of a call to the <command>lsbinstall</command> command.
The <command>install_initd</command> command will not copy it there, only activate
it once it has been installed in the system specific init script repository.
The <command>lsbinstall</command>
will print a suitable name for the <command>install_initd</command> utility on its standard
output.
Example:
<informalexample>
<screen>
	PATH=$PATH:/usr/lib/lsb
	install_initd $(lsbinstall --type=init example.com-coffeed)
</screen>
</informalexample>
</para>

<PARA>
The <command>install_initd</command> command
shall return an exit status of zero if the
init-script activation was successful or if the init script was
already activated. If the dependencies in the init script 
(see <XRef linkend="initscrcomconv">)  cannot be met, 
an exit status of one shall be returned and the init script shall not be
activated.
</PARA>

<PARA> 
When a software package is removed, <command>/usr/lib/lsb/remove_initd</command>
must be called to deactivate the init script. This must occur
before the init script itself is removed, as the dependency
information in the script may be required for successful completion.
Thus the installer's pre-remove processing phase must call
<command>remove_initd</command>, and pass the full pathname of
the installed init script.
The package installer is still responsible for removing 
the init script.
Example:
<informalexample>
<screen>
	PATH=$PATH:/usr/lib/lsb
	# deactivate the init script
	remove_initd $(lsbinstall --check --type=init example.com-coffeed)
	# and remove the init script altogether
	lsbinstall --remove --type=init example.com-coffeed
</screen>
</informalexample>
</PARA>

<PARA>
The <command>remove_initd</command> program shall return an exit status
of zero if the init script has been successfully deactivated or if the
init script is not activated. If another init script which depends
on a boot facility provided by this init script is activated,
an exit status of one shall be returned and the init script shall
remain activated. The installer must fail on such an exit code
so it does not subsequently remove the init script.
</PARA>

<NOTE>
<PARA>
This specification does not describe a mechanism for the system
administrator to manipulate the run levels at which an init script
is started or stopped. There is no assurance that modifying the
comment block for this purpose will have the desired effect.
</PARA>
</NOTE>

</SECT1>


<SECT1 ID=runlevels xreflabel="Run Levels">
<TITLE>Run Levels</TITLE>

<PARA>
The following <FirstTerm>run levels</FirstTerm> are specified for use by the 
<command>Default-Start</command> and <command>Default-Stop</command> 
actions defined in <xref linkend="initscrcomconv"> as hints
to the <command>install_initd</command> command.
Conforming implementations are not required to provide these exact
run levels or give them the meanings described here,
and may map any level described here to a different level which
provides the equivalent functionality. Applications may not depend
on specific run-level numbers.
</PARA>

<SIMPLELIST type=horiz columns=2>
<MEMBER>0</MEMBER><MEMBER>halt</MEMBER>
<MEMBER>1</MEMBER><MEMBER>single user mode</MEMBER>
<MEMBER>2</MEMBER><MEMBER>multiuser with no network services exported</MEMBER>
<MEMBER>3</MEMBER><MEMBER>normal/full multiuser</MEMBER>
<MEMBER>4</MEMBER><MEMBER>reserved for local use, default is normal/full multiuser</MEMBER>
<MEMBER>5</MEMBER><MEMBER>multiuser with a display manager or equivalent</MEMBER>
<MEMBER>6</MEMBER><MEMBER>reboot</MEMBER>
</SIMPLELIST>

<note>
<para>
These run levels were chosen as reflecting the most frequent existing
practice, and in the absence of other considerations, implementors are
strongly encouraged to follow this convention to provide consistency
for system administrators who need to work with multiple distributions.  
</para>
</note>
</SECT1>


<SECT1 ID="facilname" XRefLabel="Facility Names">
<TITLE>Facility Names</TITLE>

<PARA>
Boot <FirstTerm>facilities</FirstTerm> are used to indicate dependencies
in initialization scripts, as defined in <xref linkend="initscrcomconv">. 
Facility names
are assigned to scripts by the <command>Provides:</command> keyword.
Facility names that begin with a
dollar sign (<literal>'$'</literal>) are reserved system facility names.
<note><para>Facility names are only recognized in the context of the
init script comment block and are not available in the body of
the init script. In particular, the use of the leading '$' character
does not imply system facility names are subject to shell variable
expansion, since they appear inside comments.
</para></note>
Conforming applications shall not provide facilities that begin with a dollar
sign.  Implementations shall provide the following facility names:
</PARA>

<variablelist termlength=20>
<varlistentry>
<term><command>$local_fs</command></term>	
<listitem><para>all local filesystems are mounted</para></listitem>
</varlistentry>

<varlistentry>
<term><command>$network</command></term>  	
<listitem><para>basic networking support is available. Example:
a server program could listen on a socket.</para></listitem>
</varlistentry>

<varlistentry>
<term><command>$named</command></term>  	
<listitem><para>IP name-to-address translation, using the interfaces
described in this specification, are available to the level
the system normally provides them. Example: if a DNS
query daemon normally provides this facility, then that
daemon has been started. </para></listitem>
</varlistentry>

<varlistentry>
<term><command>$portmap</command></term>
<listitem><para>daemons providing SunRPC/ONCRPC portmapping 
service as defined in <xref linkend="std.RFC1833">
(if present) are running.
</para></listitem>
</varlistentry>

<varlistentry>
<term><command>$remote_fs</command></term>	
<listitem><para>all remote filesystems are available. In some
configurations, filesystems such as <filename>/usr</filename>
may be remote.  Many
applications that require <command>$local_fs</command> will probably
also require <command>$remote_fs</command>.</para></listitem>
</varlistentry>

<varlistentry>
<term><command>$syslog</command></term>
<listitem><para>system logger is operational.</para></listitem>
</varlistentry>

<varlistentry>
<term><command>$time</command></term>  	
<listitem><para>the system time has been set,
for example by using a network-based time program such as 
<command>ntp</command> or 
<command>rdate</command>, or 
via the hardware Real Time Clock.
</para></listitem>
</varlistentry>
</variablelist>

<PARA>
Other (non-system) facilities may be defined by other conforming applications.
These facilities shall be named using the same conventions defined for
naming init scripts (see <XRef linkend="scrptnames">).
Commonly, the facility provided by a conforming init script will have
the same name as the name assigned to the init script.
</PARA>

</SECT1>


<SECT1 ID="scrptnames" XRefLabel="Script Names">

<TITLE>Script Names</TITLE>

<PARA>
Since init scripts live in a single directory, they must
share a single namespace. To avoid conflicts, three means of
assigning names from this namespace are provided:
</PARA>

<ITEMIZEDLIST MARK="bullet">
<LISTITEM><PARA>
Assigned names.  Such names must be chosen from 
characters in the set <literal>[a-z0-9]</literal>. This category is
desirable for scripts which system administrators may
need to run manually: e.g., <command>/etc/init.d/named restart</command>.
In order to avoid conflicts these names shall be reserved
through the Linux Assigned Names and Numbers Authority (LANANA).  
Information about the LANANA may be found at
<ULINK URL="http://www.lanana.org">www.lanana.org</ULINK>.
</PARA>
<NOTE>
<PARA>
Commonly used names should be reserved in advance; 
developers for projects are encouraged to reserve names
from LANANA, so that each distribution can use the same
name for the project's init script and avoid conflicts with
other projects.
</PARA></NOTE></LISTITEM>

<LISTITEM><PARA>
Hierarchical names.  Script names in this category take
the form <literal>&lt;hier1&gt;-&lt;hier2&gt;-...-&lt;name&gt;
</literal>, where name is 
chosen from characters in the set <literal>[a-z0-9]</literal>, 
and where there may be one or more <literal>&lt;hier-n&gt;</literal>
components.  
<literal>&lt;hier1&gt;</literal> may either be an LSB provider name assigned
by the LANANA, or it may be the owners' DNS name in lower case, with at
least one <literal>'.'</literal> (e.g., <literal>"debian.org"</literal>, 
or <literal>"staroffice.sun.com"</literal>).
The LSB provider name assigned by LANANA 
shall consist only of characters chosen from the set 
<literal>[a-z0-9]</literal>.
</PARA></LISTITEM>

<LISTITEM><PARA>
Reserved names.  Names in this category 
begin with the character <literal>'_'</literal>, and are reserved for
distribution use only.  These names should be used
for essential system packages only, and in general use of this
part of the namespace is highly discouraged.  

</PARA></LISTITEM>
</ITEMIZEDLIST>


<NOTE>
<PARA>
In general, if a package or some system function is likely to be used
on multiple systems, the package developers or the distribution should
get a registered name through LANANA, and distributions should strive to
use the same name whenever possible.  For applications which may not
be essential or may not be commonly installed, the hierarchical namespace
may be more appropriate.  An advantage to the hierarchical namespace
is that there is no need to consult with the LANANA before obtaining an
assigned name.
</PARA>

<PARA>
Short names are highly desirable, since system
administrators may need to manually start and stop services.
Given this, they should be standardized on a per-package basis.  This
is the rationale behind having the LANANA organization assign these
names.  The LANANA may be called upon to handle other namespace issues,
such as package/prerequisites naming.
</PARA>
</NOTE>

</SECT1>


<SECT1 ID=iniscrptfunc XRefLabel="Init Script Functions">
<TITLE>Init Script Functions</TITLE>

<PARA>
Each conforming init script shall source the file
<filename>/lib/lsb/init-functions</filename>. This file shall cause the
following shell script commands to be defined in an unspecified manner.  
<note>
<para>
This can be done either by
adding a directory to the 
<envar>PATH</envar> variable which defines these commands, or by
defining shell aliases.  
</para>
<para>
Although the commands made available via this mechanism need not
be conforming applications in their own right, applications that
use them should only depend on features described in this specification.
</para>
</note>
Conforming scripts
shall not specify the "exit on error" option (i.e. 
<command>set -e</command>) when sourcing this file, or calling any of the
commands thus made available. 
</PARA>

<PARA>
The <command>start_daemon</command>, <command>killproc</command> and
<command>pidofproc</command> functions shall use 
the following algorithm for determining
the status and the process identifiers of the specified program. 
<orderedlist numeration=arabic>
<listitem><para>If the <parameter>-p pidfile</parameter> option is specified,
and the named <filename>pidfile</filename> exists,
a single line at the start of the <filename>pidfile</filename> shall be read. 
If this line contains one or more numeric values, separated by spaces,
these values shall be used.
</para></listitem>
<listitem><para>
Otherwise, 
<filename>/var/run/<replaceable>basename</replaceable>.pid</filename> 
shall be read in a similar fashion.
If this contains one or more numeric values on the first line, these values
shall be used.
</para>
</listitem>
<listitem>
<para>
Optionally, if neither of the above methods has determined the
process identifiers required, implementations may use unspecified additional
methods to locate the process identifiers required.
</para>
</listitem>
</orderedlist>
The method used
to determine the status is implementation defined, but should allow for
non-binary programs.
<note>
<para>
Commonly used methods check either for the
existence of the <filename>/proc/pid</filename> directory or use
<filename>/proc/pid/exe</filename> and <filename>/proc/pid/cmdline</filename>.
Relying only on <filename>/proc/pid/exe</filename> is discouraged since this
specification does not specify the existence of, or semantics
for, <filename>/proc</filename>. Additionally, using
<filename>/proc/pid/exe</filename>
may result in a not-running status for daemons that are written in a script
language.
</para>
</note>
Conforming implementations may use other mechanisms besides those based on
pidfiles, unless the <parameter>-p pidfile</parameter>
option has been used. Conforming applications
should not rely on such mechanisms and should
always use a <filename>pidfile</filename>.
When a program is stopped, it should delete its
<filename>pidfile</filename>. Multiple process identifiers
shall be separated by a single space in the <filename>pidfile</filename>
and in the output of <command>pidofproc</command>.
</PARA>

<variablelist>
<varlistentry>
<term>
<cmdsynopsis>
<command>
start_daemon
</command>
<arg>-f</arg>
<arg>-n nicelevel</arg>
<arg>-p pidfile</arg>
<arg choice=plain>pathname</arg>
<arg rep=repeat>args</arg>
</cmdsynopsis></term>
<listitem>
<para>
runs the specified program as a daemon.
The <command>start_daemon</command> function
shall check if the program is already running
using the algorithm given above. If so, it shall not
start another copy of the daemon unless the <parameter>-f</parameter>
option is given. The <parameter>-n</parameter> option specifies a nice
level. See <command>nice</command>.
<command>start_daemon</command> shall
return the LSB defined exit status codes. It
shall return 0 if the program has been successfully started or
is running and not 0 otherwise.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<cmdsynopsis>
<command>killproc</command>
<arg>-p pidfile</arg>
<arg choice=plain>pathname</arg>
<arg>signal</arg>
</cmdsynopsis>
</term>
<listitem>
<para>
The <command>killproc</command> function
shall stop the specified program. The program is 
found using the algorithm given above. If a
signal is specified, using the
<parameter>-<replaceable>signal_name</replaceable></parameter> or
<parameter>-<replaceable>signal_number</replaceable></parameter> syntaxes
as specified by the <command>kill</command> command,
the program is sent that signal.
Otherwise, a <constant>SIGTERM</constant> followed by a 
<constant>SIGKILL</constant>
after an unspecified number of seconds shall be sent.
If a program has been terminated, the <filename>pidfile</filename>
should be removed if the
terminated process has not already done so.
The <command>killproc</command> function
shall return the LSB defined exit status codes. If called
without a signal, it shall return 0 if the program has been stopped or
is not running and not 0 otherwise. If a signal is given, it shall return 0
only if the program is running. 
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<cmdsynopsis>
<command>pidofproc</command>
<arg>-p pidfile</arg>
<arg choice=plain>pathname</arg>
</cmdsynopsis>
</term>
<listitem>
<para>
The <command>pidofproc</command> function shall return
one or more process identifiers for a particular
daemon using the algorithm given above. Only process identifiers
of running processes should be returned.
Multiple process identifiers shall be separated by a single space.
<note><para>
A process may exit between <command>pidofproc</command> discovering its identity
and the caller of <command>pidofproc</command> being able to act on that identity.
As a result, no test assertion can be made that the process identifiers
returned by <command>pidofproc</command> <emphasis>shall</emphasis> be
running processes.
</para>
</note>
The <command>pidofproc</command> function
shall return the LSB defined exit status
codes for "status". It shall return 0 if the program is
running and not 0 otherwise.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<cmdsynopsis>
<command>
log_success_msg
</command>
<arg choice=plain>message
</arg>
</cmdsynopsis>
</term>
<listitem>
<para>
The <command>log_success_msg</command> function
shall cause the system to print a success
message.  
<note><para>The message should be relatively short; no
more than 60 characters is highly desirable.</para></note>
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<cmdsynopsis>
<command>
log_failure_msg
</command>
<arg choice=plain>message
</arg>
</cmdsynopsis>
</term>
<listitem>
<para>
The <command>log_failure_msg</command> function
shall cause the system to print a failure
message.  
<note><para>The message should be relatively short; no
more than 60 characters is highly desirable.</para></note>
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<cmdsynopsis>
<command>
log_warning_msg
</command>
<arg choice=plain>message
</arg>
</cmdsynopsis>
</term>
<listitem>
<para>
The <command>log_warning_msg</command> function
shall cause the system to print a warning
message.  
<note><para>The message should be relatively short; no
more than 60 characters is highly desirable.</para></note>
</para>
</listitem>
</varlistentry>
</variablelist>
</SECT1>



</CHAPTER>

</PART>
