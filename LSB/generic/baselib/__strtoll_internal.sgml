<REFENTRY ID="baselib---strtoll-internal-1"> <REFMETA>
<REFENTRYTITLE>__strtoll_internal</REFENTRYTITLE>
<REFMISCINFO>Base Libraries</REFMISCINFO>
</REFMETA>
<REFNAMEDIV>
<REFNAME>__strtoll_internal</REFNAME>
<REFPURPOSE>underlying function for strtoll
</REFPURPOSE>
</REFNAMEDIV>
<REFSYNOPSISDIV>
<FUNCSYNOPSIS>
<FUNCPROTOTYPE>
 <FUNCDEF>long long 
  <FUNCTION>__strtoll_internal</FUNCTION></FUNCDEF>
 <PARAMDEF>const char 
  <PARAMETER><REPLACEABLE>*__nptr</REPLACEABLE></PARAMETER></PARAMDEF>
 <PARAMDEF>char 
  <PARAMETER><REPLACEABLE>**__endptr</REPLACEABLE></PARAMETER></PARAMDEF>
 <PARAMDEF>int 
  <PARAMETER><REPLACEABLE>__base</REPLACEABLE></PARAMETER></PARAMDEF>
 <PARAMDEF>int 
  <PARAMETER><REPLACEABLE>__group</REPLACEABLE></PARAMETER></PARAMDEF>
</FUNCPROTOTYPE>
</FUNCSYNOPSIS>
</REFSYNOPSISDIV>
<REFSECT1>
<TITLE>Description
</TITLE>
<PARA>
<PARAMETER>__group</PARAMETER> shall be <LITERAL>0</LITERAL> or the 
behavior of <FUNCTION>__strtoll_internal</FUNCTION> is undefined. 
</PARA>
<PARA>
<FUNCTION>__strtoll_internal(<PARAMETER>__nptr</PARAMETER>, 
<PARAMETER>__endptr</PARAMETER>, <PARAMETER>__base</PARAMETER>, 
<LITERAL>0</LITERAL>)</FUNCTION> has the same specification as 
<FUNCTION>strtoll(<PARAMETER>__nptr</PARAMETER>, 
<PARAMETER>__endptr</PARAMETER>, <PARAMETER>__base</PARAMETER>)</FUNCTION>.
</PARA>
<PARA>
<FUNCTION>__strtoll_internal</FUNCTION> is not in the source standard; 
it is only in the binary standard.
</PARA>
</REFSECT1>
</REFENTRY>
