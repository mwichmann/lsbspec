<REFENTRY ID="baselib-glob64"> <REFMETA>
<REFENTRYTITLE>glob64</REFENTRYTITLE>
<REFMISCINFO>Base Libraries</REFMISCINFO>
</REFMETA>
<REFNAMEDIV>
<REFNAME>glob64</REFNAME>
<REFPURPOSE>
find pathnames matching a pattern  (Large File Support)
</REFPURPOSE>
</REFNAMEDIV>
<REFSYNOPSISDIV>
<REFSYNOPSISDIVINFO>
<DATE>20 December 2001</DATE>
</REFSYNOPSISDIVINFO>
<SYNOPSIS>
#include &lt;glob.h>
int glob64((const char *pattern, int flags,
            int (*errfunc) (const char *, int),
            glob64_t *pglob));
</SYNOPSIS>
</REFSYNOPSISDIV>
<REFSECT1>
<REFSECT1INFO>
<DATE>2 April 2001</DATE>
</REFSECT1INFO>
<TITLE>Description
</TITLE>
<PARA>
The glob64() function searches for all the pathnames  matching 
pattern according to the rules used by the shell (see glob(7)).
No tilde expansion or parameter substitution is done; if you 
want these, use wordexp(3).

The results of a glob64() call are stored in the structure
pointed to by pglob, which is a glob64_t which is declared
in &lt;glob.h> and includes the following elements defined by
POSIX.2 (more may be present as an extension):

</PARA><PARA>
The glob64() function is a 64-bit version of glob.
</PARA>
</REFSECT1>
<REFSECT1>
<TITLE>Return Value
</TITLE>
<PARA>
On successful completion, glob64() returns zero.  Other possible 
returns are:

GLOB_NOSPACE
       for running out of memory,

GLOB_ABORTED
       for a read error, and

GLOB_NOMATCH
       for no found matches.
</PARA>
<!--	  LDP GENERAL PUBLIC LICENSE  -->
<!--        Version 1a, November 1998   -->
</REFSECT1>
</REFENTRY>












