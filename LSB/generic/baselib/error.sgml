<REFENTRY ID="baselib-error-n"> <REFMETA>
<REFENTRYTITLE>error</REFENTRYTITLE>
<REFMISCINFO>Base Libraries</REFMISCINFO>
</REFMETA>
<REFNAMEDIV>
<REFNAME>error</REFNAME>
<REFPURPOSE>
print error message
</REFPURPOSE>
</REFNAMEDIV>
<REFSYNOPSISDIV>
<SYNOPSIS>
void error (int exitstatus, int errnum, const char *format, ...)
</SYNOPSIS>
</REFSYNOPSISDIV>
<REFSECT1>
<TITLE>Description
</TITLE>
<PARA>
Print a message to standard error.  First print the name of the
program.  If there is a function called error_print_progname (which
would be provided by the application), call it to print the program
name.  If not, print the contents of the global variable program_name
as the program name.
</PARA>
<PARA>
Then print a colon, a space, and the result of using the printf-style
<replaceable>format</replaceable> and the optional arguments.
</PARA>
<PARA>
Then, if errnum is nonzero, print a colon, a space, and the result of
<computeroutput>strerror(errnum)</computeroutput>.
</PARA>
<PARA>
Then print a newline.
</PARA>
<PARA>
Then, if exitstatus is nonzero, call
<computeroutput>exit(exitstatus)</computeroutput>.
</PARA>
<!-- There's an interaction with wide characters(?): this call makes
stderr narrow-oriented. Should put that in once we figure out what it
means and whether it would be bad in an Asian locale -->
</REFSECT1>
</REFENTRY>
