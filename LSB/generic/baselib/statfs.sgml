<REFENTRY ID="baselib-statfs-2"> <REFMETA>
<REFENTRYTITLE>statfs</REFENTRYTITLE>
<REFMISCINFO>Base Libraries</REFMISCINFO>
</REFMETA>
<REFNAMEDIV>
<REFNAME>statfs</REFNAME>
<REFPURPOSE>(deprecated)</REFPURPOSE>
</REFNAMEDIV>
<REFSYNOPSISDIV>
<FUNCSYNOPSIS>
<FUNCSYNOPSISINFO>
#include &lt;sys/statfs.h&gt;
</FUNCSYNOPSISINFO>
<FUNCPROTOTYPE>
 <FUNCDEF>int 
  <FUNCTION>statfs</FUNCTION></FUNCDEF>
 <PARAMDEF>const char 
  <PARAMETER><REPLACEABLE>*path</REPLACEABLE></PARAMETER></PARAMDEF>
 <PARAMDEF><FUNCPARAMS>struct <STRUCTNAME>statfs</STRUCTNAME> *
  <PARAMETER>buf</PARAMETER></FUNCPARAMS></PARAMDEF>
</FUNCPROTOTYPE>
</FUNCSYNOPSIS>
</REFSYNOPSISDIV>

<REFSECT1>
<TITLE>Description
</TITLE>
<PARA>
<FUNCTION>statfs</FUNCTION> returns information about a mounted file 
system. <PARAMETER>path</PARAMETER> is the path name of any file within 
the mounted filesystem.  <PARAMETER>buf</PARAMETER> is a pointer
to a <STRUCTNAME>statfs</STRUCTNAME> structure.
</PARA>
<PARA>
Fields that are undefined for a particular file system are set to 
<LITERAL>0</LITERAL>.
</PARA>
<PARA>
<FUNCTION>statvfs</FUNCTION> is the approved way to obtain
file system information; applications should only call the
<FUNCTION>statfs</FUNCTION> interface if they must determine
the file system type, which is not provided by 
<FUNCTION>statvfs</FUNCTION>.
</PARA>
</REFSECT1>
<REFSECT1>
<TITLE>Return Value
</TITLE>
<PARA>
On success, <RETURNVALUE>0</RETURNVALUE> is returned. 
On error, <RETURNVALUE>-1</RETURNVALUE> is returned and
the global variable <VARNAME>errno</VARNAME> is set appropriately.
</PARA>
</REFSECT1>
<REFSECT1>
<TITLE>Errors
</TITLE>
<VARIABLELIST>

<VARLISTENTRY>
<TERM>
ENOTDIR
</TERM>
<LISTITEM>
<PARA>
A component of the path prefix of <PARAMETER>path</PARAMETER> is 
not a directory.
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>
ENAMETOOLONG
</TERM>
<LISTITEM>
<PARA>
<PARAMETER>path</PARAMETER> is too long.
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>
ENOENT 
</TERM>
<LISTITEM>
<PARA>
The file referred to by <PARAMETER>path</PARAMETER> does not exist.
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>
EACCES 
</TERM>
<LISTITEM>
<PARA>
Search permission is denied for a component of the path prefix of 
<PARAMETER>path</PARAMETER>.
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>
ELOOP
</TERM>
<LISTITEM>
<PARA>
Too many symbolic links were encountered in translating 
<PARAMETER>path</PARAMETER>.
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>
EFAULT 
</TERM>
<LISTITEM>
<PARA>
<PARAMETER>buf</PARAMETER> or <PARAMETER>path</PARAMETER> points to 
an invalid address.
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>
EIO    
</TERM>
<LISTITEM>
<PARA>
An I/O error occurred while reading from or writing to the file system.
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>
ENOMEM 
</TERM>
<LISTITEM>
<PARA>
Insufficient kernel memory was available.
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>
ENOSYS 
</TERM>
<LISTITEM>
<PARA>
The filesystem <PARAMETER>path</PARAMETER> is on does not support 
<FUNCTION>statfs</FUNCTION>.
</PARA>
</LISTITEM>
</VARLISTENTRY>
</VARIABLELIST>
</REFSECT1>
<!--	  LDP GENERAL PUBLIC LICENSE  -->
<!--        Version 1a, November 1998   -->
</REFENTRY>
