<REFENTRY ID="baselib-basename-3"> <REFMETA>
<REFENTRYTITLE>basename</REFENTRYTITLE>
<REFMISCINFO>Base Libraries</REFMISCINFO>
</REFMETA>
<REFNAMEDIV>
<REFNAME>basename
</REFNAME>
<REFPURPOSE>
return the last component of a file name
</REFPURPOSE>
</REFNAMEDIV>
<refsynopsisdiv>
<!-- Nick's original. based on glibc impl
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;string.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>char *
<function>basename</function>
</funcdef>
<paramdef>const char *
<parameter>path</parameter>
</paramdef>
</funcprototype>
</funcsynopsis>
-->
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;libgen.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>char *
<function>basename</function>
</funcdef>
<paramdef>const char *
<parameter>path</parameter>
</paramdef>
</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<REFSECT1>
<TITLE>Description
</TITLE>
<!-- this was Nick's decription of the glibc implementation:
<para>
In the source standard, if <filename>&lt;libgen.h&gt;</filename> is included,
this shall be equivalent to <function>__xpg_basename</function>.
</para>
<para>
If <filename>&lt;string.h&gt;</filename> is included and <filename>&lt;libgen.h&gt;</filename> is not, the <function>basename</function>
shall return a pointer to the string following the final <literal>'/'</literal> character
in <parameter>path</parameter>. In this case, the string identified by <parameter>path</parameter> shall not be modified.
<note><para>
The version of <function>basename</function> defined in <xref linkend="std.SUSv4"> may modify the string identified by <parameter>path</parameter>.
</para><para>Source applications wishing to include both headers and wanting the non-POSIX version of <function>basename</function>
must include <filename>&lt;libgen.h&gt;</filename> first, and then <literal>#undef basename</literal> before including
<filename>&lt;string.h&gt;</filename>.
</para></note>
</para>
<para>
If <filename>&lt;libgen.h&gt;</filename> is not included, and <parameter>path</parameter> is <literal>"/"</literal>, or ends with a trailing
<literal>'/'</literal> character,
the <function>basename</function> function shall return a pointer to an empty string.
</para>
<para>
In the binary standard, <function>basename</function> is the version described in <filename>&lt;string.h&gt;</filename>.
</para>
-->
<!-- at least for the time being, we ended up with a simpler version: -->
<para>
In the source standard, <function>basename</function> is implemented
as a macro causing it to behave as described in <xref linkend="std.SUSv4">,
and is equivalent to the function <function>__xpg_basename</function>.
If the macro is undefined, <function>basename</function> from
the binary standard is used, with differences as described here:
</para>
<para>
The string identified by <parameter>path</parameter> shall not be modified.
</para>
<para>
If <parameter>path</parameter> is <literal>"/"</literal>, or ends with a 
trailing <literal>'/'</literal> character, the <function>basename</function>
function shall return a pointer to an empty string.
</para>
</refsect1>
<refsect1>
<title>Return Value</title>
<para>
On success, the <function>basename</function> function shall return a pointer to the final component of
<parameter>path</parameter>. Otherwise, it shall return a null pointer.
</para>
</refsect1>
<refsect1>
<title>See Also</title>
<para>
<simplelist type=inline>
<member><function>__xpg_basename</function></member>
</simplelist>
</para>
</refsect1>
</refentry>
