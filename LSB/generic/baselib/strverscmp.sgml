<REFENTRY ID="baselib-strverscmp"> <REFMETA>
<REFENTRYTITLE>strverscmp</REFENTRYTITLE>
<REFMISCINFO>Base Libraries</REFMISCINFO>
</REFMETA>
<REFNAMEDIV>
<REFNAME>strverscmp</REFNAME>
<REFPURPOSE>
compare strings holding name and indices/version numbers (LSB DEPRECATED)
</REFPURPOSE>
</REFNAMEDIV>
<REFSYNOPSISDIV>
<FUNCSYNOPSIS>
<FUNCSYNOPSISINFO>
#include &lt;string.h&gt;
</FUNCSYNOPSISINFO>
<FUNCPROTOTYPE>
 <FUNCDEF>int 
  <FUNCTION>strverscmp</FUNCTION></FUNCDEF>
 <PARAMDEF>const char 
  <PARAMETER><REPLACEABLE>*s1</REPLACEABLE></PARAMETER></PARAMDEF>
 <PARAMDEF>const char 
  <PARAMETER><REPLACEABLE>*s2</REPLACEABLE></PARAMETER></PARAMDEF>
</FUNCPROTOTYPE>
</FUNCSYNOPSIS>
</REFSYNOPSISDIV>
<REFSECT1>
<TITLE>Description
</TITLE>
<para>
The <function>strverscmp</function> function is deprecated from the LSB and
is expected to disappear from a future version of the LSB.
</para>

<PARA>
The <function>strversmp</function> function shall compare two strings
in a similar manner to <function>strcmp</function>.
If <parameter>s1</parameter> and <parameter>s2</parameter>
contain no digits, <function>strversmp</function> shall
behave as <function>strcmp</function>.
</para>
<para>
The strings are compared by scanning from left to right.
If a digit or sequence of digits
is encountered in both strings at the same position,
the digit sequence is specially compared, as described
below. If the digit sequences compared equal, the string comparison
resumes in both <parameter>s1</parameter> and 
<parameter>s2</parameter> after the digit sequence.
</para>
<para>
Digit sequences are classified as either "integral" or
"fractional". A fractional digit sequence begins with
a <literal>'0'</literal>; otherwise the digit sequence
shall be treated as an integral digit sequence.
</para>
<para>
If two integral digit sequences are encountered, they shall be
compared as integers for equality. A fractional digit sequence
shall always compare less than an integral digit sequence.
If two fractional digit sequences are being compared,
then if the common prefix contains only leading zeroes, the longer
part shall compare less than the shorter; otherwise the comparison
shall be strictly numeric.
</PARA>

</REFSECT1>
<REFSECT1>
<TITLE>Examples</TITLE>
<para>
<TABLE>
<TITLE>Examples</TITLE>
<TGROUP COLS=2>
<THEAD>
<ROW><ENTRY>Call</ENTRY><ENTRY>Return Value</ENTRY></ROW>
</THEAD>
<TBODY>
<ROW><ENTRY><FUNCTION>strverscmp</FUNCTION>(
<PARAMETER>"no digit", "no digit"</PARAMETER>)</ENTRY>
<ENTRY><RETURNVALUE>0</RETURNVALUE>
<LITERAL>/* same behavior as strcmp */</LITERAL></ENTRY></ROW>
<ROW><ENTRY><FUNCTION>strverscmp</FUNCTION>(
<PARAMETER>"item#99", "item#100"</PARAMETER>)</ENTRY>
<ENTRY><RETURNVALUE>&lt; 0</RETURNVALUE>
<LITERAL>/* same prefix, but 99 &lt; 100 */</LITERAL></ENTRY></ROW>
<ROW><ENTRY><FUNCTION>strverscmp</FUNCTION>(
<PARAMETER>"alpha1", "alpha001"</PARAMETER>)</ENTRY>
<ENTRY><RETURNVALUE>&gt; 0</RETURNVALUE>
<LITERAL>/* fractional part inferior to integral */</LITERAL></ENTRY></ROW>
<ROW><ENTRY><FUNCTION>strverscmp</FUNCTION>(
<PARAMETER>"part1_f012", "part1_f01"</PARAMETER>)</ENTRY>
<ENTRY><RETURNVALUE>&gt; 0</RETURNVALUE>
<LITERAL>/* two fractional parts */</LITERAL></ENTRY></ROW>
<ROW><ENTRY><FUNCTION>strverscmp</FUNCTION>(
<PARAMETER>"foo.009", "foo.0"</PARAMETER>)</ENTRY>
<ENTRY><RETURNVALUE>&lt; 0</RETURNVALUE>
<LITERAL>/* two fractional parts but with leading zeroes only */</LITERAL></ENTRY></ROW>

</TBODY>
</TGROUP>
</TABLE>
</para>
</REFSECT1>
</REFENTRY>

