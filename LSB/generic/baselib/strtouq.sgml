<REFENTRY ID="baselib-strtouq-3"> <REFMETA>
<REFENTRYTITLE>strtouq</REFENTRYTITLE>
<REFMISCINFO>Base Libraries</REFMISCINFO>
</REFMETA>
<REFNAMEDIV>
<REFNAME>strtouq
</REFNAME>
<REFPURPOSE>
convert a string to an unsigned long long
</REFPURPOSE>
</REFNAMEDIV>

<REFSYNOPSISDIV>
<REFSYNOPSISDIVINFO>
<DATE>24 April 2001</DATE>
</REFSYNOPSISDIVINFO>
<FUNCSYNOPSIS>
<FUNCSYNOPSISINFO>
#include &lt;sys/types.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;limits.h&gt;
</FUNCSYNOPSISINFO>
<FUNCPROTOTYPE>
 <FUNCDEF>unsigned long long 
  <FUNCTION>strtouq</FUNCTION></FUNCDEF>
 <PARAMDEF>const char *
  <PARAMETER><REPLACEABLE>nptr</REPLACEABLE></PARAMETER></PARAMDEF>
 <PARAMDEF>char * *
  <PARAMETER><REPLACEABLE>endptr</REPLACEABLE></PARAMETER></PARAMDEF>
 <PARAMDEF>int 
  <PARAMETER><REPLACEABLE>base</REPLACEABLE></PARAMETER></PARAMDEF>
</FUNCPROTOTYPE>
</FUNCSYNOPSIS>
</REFSYNOPSISDIV>

<REFSECT1>
<REFSECT1INFO>
<DATE>24 April 2001</DATE>
</REFSECT1INFO>
<TITLE>Description
</TITLE>
<PARA>
<FUNCTION>strtouq</FUNCTION> converts the string <PARAMETER>nptr</PARAMETER> 
to an <type>unsigned long long</type>
value. The conversion is done according to the given base, which 
shall be between <LITERAL>2</LITERAL> and <LITERAL>36</LITERAL> inclusive, 
or be the special value <LITERAL>0</LITERAL>.
</PARA><PARA>
<PARAMETER>nptr</PARAMETER> may begin with an arbitrary amount of white 
space (as determined by <FUNCTION>isspace</FUNCTION>(3)), followed by a 
single optional <TOKEN>+</TOKEN> or <TOKEN>-</TOKEN> sign character. If 
<PARAMETER>base</PARAMETER> is <LITERAL>0</LITERAL> or <LITERAL>16</LITERAL>, 
the string may then include a <TOKEN>0x</TOKEN> prefix, and the number will 
be read in base 16; otherwise, a <LITERAL>0</LITERAL> base is taken as 
10 (decimal), unless the next character is <LITERAL>0</LITERAL>, in which 
case it is taken as 8 (octal).
</PARA><PARA>
The remainder of the string is converted to an unsigned long value in the 
obvious manner, stopping at the end of the string or at the first character 
that does not produce a valid digit in the given base. (In bases above 10, 
the letter <LITERAL>A</LITERAL> in either upper or lower case represents 10, 
<LITERAL>B</LITERAL> represents 11, and so forth, with <LITERAL>Z</LITERAL> 
representing 35.)
</PARA>
</REFSECT1>

<REFSECT1>
<TITLE>
Return Value
</TITLE>
<PARA>
On success, <FUNCTION>strtouq</FUNCTION> returns either the result of 
the conversion or, if there was a leading minus sign, the negation of 
the result of the conversion, unless the original (non-negated) value 
would overflow. In the case of an overflow the function returns 
<VARNAME>UQUAD_MAX</VARNAME> and the global variable <VARNAME>errno</VARNAME> 
is set to <ERRORNAME>ERANGE</ERRORNAME>.
</PARA>
</REFSECT1>

<REFSECT1>
<TITLE>Errors
</TITLE>
<VARIABLELIST>
<VARLISTENTRY>
<TERM>
ERANGE
</TERM>
<LISTITEM>
<PARA>
The given string was out of range; the value converted has been clamped.
</PARA>
</LISTITEM>
</VARLISTENTRY>
</VARIABLELIST>
</REFSECT1>
<!-- This data is part of a licensed program from BERKELEY SOFTWARE DESIGN, INC. -->
<!-- Portions are copyrighted by BSDI, The Regents of the University of California, -->
<!-- Massachusetts Institute of Technology, Free Software Foundation, and others.  -->
</REFENTRY>
