<REFENTRY ID="baselib-getopt-long-3"> <REFMETA>
<REFENTRYTITLE>getopt_long</REFENTRYTITLE>
<REFMISCINFO>Base Libraries</REFMISCINFO>
</REFMETA>
<REFNAMEDIV>
<REFNAME>getopt_long</REFNAME>
<REFPURPOSE>
parse command line options
</REFPURPOSE>
</REFNAMEDIV>
<REFSYNOPSISDIV>
<REFSYNOPSISDIVINFO>
<DATE>2 April 2001</DATE>
</REFSYNOPSISDIVINFO>
<SYNOPSIS>
#define _GNU_SOURCE
#include &lt;getopt.h>

int getopt_long(int argc, char * const argv[],
           const char *optstring,
           const struct option *longopts, int *longindex);

</SYNOPSIS>
</REFSYNOPSISDIV>
<REFSECT1>
<REFSECT1INFO>
<DATE>2 April 2001</DATE>
</REFSECT1INFO>
<TITLE>Description
</TITLE>
<PARA>
The getopt_long() function works like getopt() except that it also accepts long options, started out by two dashes. Long option names may be abbreviated if the abbreviation is unique or is an exact match for some defined option. A long option may take a parameter, of the form --arg=param or --arg param.
</PARA><PARA>
longopts  is a pointer to the first element of an array of struct option declared in &lt;getopt.h> as
</PARA>

<VARIABLELIST>
<VARLISTENTRY>
<TERM>
          struct option {
</TERM>
<LISTITEM>
<PARA>
              const char *name;
</PARA><PARA>
              int *flag;
</PARA><PARA>
              int has_arg;
</PARA><PARA>
              int val;
</PARA><PARA>
          };
</PARA>
</LISTITEM>
</VARLISTENTRY>
</VARIABLELIST>

</REFSECT1>
<REFSECT1>
<TITLE>Return Value
</TITLE>
<PARA>
The getopt_long() function returns the option character if the option was found successfully, `:' if there was a missing parameter for one of the options, `?'  for an unknown option character, or -1 for the end of the option list.
</PARA><PARA>
getopt_long() also returns the option character when a short option is recognized. For a long option, they return val if flag is NULL, and 0 otherwise. Error and -1 returns are the same as for getopt(), plus `?' for an ambiguous match or an extraneous parameter.
</PARA>

<!--	  LDP GENERAL PUBLIC LICENSE  -->
<!--        Version 1a, November 1998   -->

</REFSECT1>
</REFENTRY>

