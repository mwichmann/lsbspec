<REFENTRY ID="baselib-strndup"> <REFMETA>
<REFENTRYTITLE>strndup</REFENTRYTITLE>
<REFMISCINFO>Base Libraries</REFMISCINFO>
</REFMETA>
<REFNAMEDIV>
<REFNAME>strndup</REFNAME>
<REFPURPOSE>
return a malloc'd copy of at most the specified number of bytes of a string 
</REFPURPOSE>
</REFNAMEDIV>
<REFSYNOPSISDIV>
<REFSYNOPSISDIVINFO>
<DATE>2 April 2001</DATE>
</REFSYNOPSISDIVINFO>
<FUNCSYNOPSIS>
<FUNCSYNOPSISINFO>
#include &lt;string.h&gt;
</FUNCSYNOPSISINFO>
<FUNCPROTOTYPE>
 <FUNCDEF>extern char 
  <FUNCTION>*strndup</FUNCTION></FUNCDEF>
 <PARAMDEF>const char 
  <PARAMETER><REPLACEABLE>*string</REPLACEABLE></PARAMETER></PARAMDEF>
 <PARAMDEF>size_t 
  <PARAMETER><REPLACEABLE>n</REPLACEABLE></PARAMETER></PARAMDEF>
</FUNCPROTOTYPE>
</FUNCSYNOPSIS>
</REFSYNOPSISDIV>
<REFSECT1>
<REFSECT1INFO>
<DATE>2 April 2001</DATE>
</REFSECT1INFO>
<TITLE>Description
</TITLE>
<PARA>
The <FUNCTION>strndup()</FUNCTION> function shall return a 
<FUNCTION>malloc</FUNCTION>'d copy of at most <PARAMETER>n</PARAMETER> 
bytes of <PARAMETER>string</PARAMETER>. The resultant string shall be 
terminated even if no <TOKEN>NULL</TOKEN> terminator appears 
before <PARAMETER>string</PARAMETER>+<PARAMETER>n</PARAMETER>.
</PARA>

</REFSECT1>
<REFSECT1>
<TITLE>Return Value</TITLE>
<PARA>
On success, <function>strndup</function> shall return a pointer to a newly
allocated block of memory containing a copy of at most <parameter>n</parameter>
bytes of <parameter>string</parameter>. Otherwise, <function>strndup()</function>
shall return <returnvalue>NULL</returnvalue> and set <varname>errno</varname>
to indicate the error.
</PARA>
</REFSECT1>

<REFSECT1>
<TITLE>Errors
</TITLE>
<VARIABLELIST>
<VARLISTENTRY>
<TERM>
<CONSTANT>
ENOMEM
</CONSTANT>
</TERM>
<LISTITEM>
<PARA>
Insufficient memory available.
</PARA>
</LISTITEM>
</VARLISTENTRY>
</VARIABLELIST>
</REFSECT1>
</REFENTRY>

