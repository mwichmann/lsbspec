<!-- Start of generated text - do not edit! -->
<!-- generated from the LSB specification database by mklibspec -->
<SECT1 ID=libpthread>
<TITLE>Interfaces for libpthread</TITLE>
<PARA>
<XREF LINKEND="lib-libpthread-def"> defines the library name and shared object name
for the libpthread library
</PARA>
<TABLE id="lib-libpthread-def">
<TITLE>libpthread Definition</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Library:</ENTRY>
<ENTRY>libpthread</ENTRY>
</ROW>
<ROW>
<ENTRY>SONAME:</ENTRY>
<ENTRY>libpthread.so.0</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The behavior of the interfaces in this library is specified by the following specifications:<SIMPLELIST COLUMNS=1>
<MEMBER ID='REFSTD.libpthread.1'>
[LFS] <XREF LINKEND="std.LFS">
</MEMBER>
<MEMBER ID='REFSTD.libpthread.2'>
[LSB] <XREF LINKEND="std.LSB">
</MEMBER>
<MEMBER ID='REFSTD.libpthread.3'>
[SUSv3] <XREF LINKEND="std.SUSv3">
</MEMBER>
<MEMBER ID='REFSTD.libpthread.4'>
[SUSv4] <XREF LINKEND="std.SUSv4">
</MEMBER>
</SIMPLELIST>
</PARA>
<!-- debug: database interface name Realtime Threads -->
<SECT2>
<!--libgroup-->
<TITLE>Realtime Threads</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for Realtime Threads</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic functions
for Realtime Threads specified in <XREF linkend="tbl-libpthread-realt-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<TABLE id="tbl-libpthread-realt-ints">
<TITLE>libpthread - Realtime Threads Function Interfaces</TITLE>
<TGROUP COLS=4>
<TBODY>
<ROW>
<ENTRY><indexterm><primary>pthread_attr_getinheritsched</primary></indexterm>pthread_attr_getinheritsched <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_attr_getschedpolicy</primary></indexterm>pthread_attr_getschedpolicy <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_attr_getscope</primary></indexterm>pthread_attr_getscope <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_attr_setinheritsched</primary></indexterm>pthread_attr_setinheritsched <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>pthread_attr_setschedpolicy</primary></indexterm>pthread_attr_setschedpolicy <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_attr_setscope</primary></indexterm>pthread_attr_setscope <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_getschedparam</primary></indexterm>pthread_getschedparam <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_mutex_getprioceiling</primary></indexterm>pthread_mutex_getprioceiling(GLIBC_2.4) <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>pthread_mutex_setprioceiling</primary></indexterm>pthread_mutex_setprioceiling(GLIBC_2.4) <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_mutexattr_getprioceiling</primary></indexterm>pthread_mutexattr_getprioceiling(GLIBC_2.4) <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_mutexattr_getprotocol</primary></indexterm>pthread_mutexattr_getprotocol(GLIBC_2.4) <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_mutexattr_setprioceiling</primary></indexterm>pthread_mutexattr_setprioceiling(GLIBC_2.4) <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>pthread_mutexattr_setprotocol</primary></indexterm>pthread_mutexattr_setprotocol(GLIBC_2.4) <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_setschedparam</primary></indexterm>pthread_setschedparam <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_setschedprio</primary></indexterm>pthread_setschedprio(GLIBC_2.3.4) <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>
</SECT2>
<!-- debug: database interface name Advanced Realtime Threads -->
<SECT2>
<!--libgroup-->
<TITLE>Advanced Realtime Threads</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for Advanced Realtime Threads</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic functions
for Advanced Realtime Threads specified in <XREF linkend="tbl-libpthread-advan-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<TABLE id="tbl-libpthread-advan-ints">
<TITLE>libpthread - Advanced Realtime Threads Function Interfaces</TITLE>
<TGROUP COLS=4>
<TBODY>
<ROW>
<ENTRY><indexterm><primary>pthread_barrier_destroy</primary></indexterm>pthread_barrier_destroy <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_barrier_init</primary></indexterm>pthread_barrier_init <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_barrier_wait</primary></indexterm>pthread_barrier_wait <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_barrierattr_destroy</primary></indexterm>pthread_barrierattr_destroy <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>pthread_barrierattr_getpshared</primary></indexterm>pthread_barrierattr_getpshared(GLIBC_2.3.3) <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_barrierattr_init</primary></indexterm>pthread_barrierattr_init <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_barrierattr_setpshared</primary></indexterm>pthread_barrierattr_setpshared <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_getcpuclockid</primary></indexterm>pthread_getcpuclockid <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>pthread_spin_destroy</primary></indexterm>pthread_spin_destroy <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_spin_init</primary></indexterm>pthread_spin_init <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_spin_lock</primary></indexterm>pthread_spin_lock <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_spin_trylock</primary></indexterm>pthread_spin_trylock <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>pthread_spin_unlock</primary></indexterm>pthread_spin_unlock <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>
</SECT2>
<!-- debug: database interface name Posix Threads -->
<SECT2>
<!--libgroup-->
<TITLE>Posix Threads</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for Posix Threads</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic functions
for Posix Threads specified in <XREF linkend="tbl-libpthread-posix-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<TABLE id="tbl-libpthread-posix-ints">
<TITLE>libpthread - Posix Threads Function Interfaces</TITLE>
<TGROUP COLS=4>
<TBODY>
<ROW>
<ENTRY><indexterm><primary>_pthread_cleanup_pop</primary></indexterm>_pthread_cleanup_pop <LINK LINKEND="REFSTD.libpthread.2">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>_pthread_cleanup_push</primary></indexterm>_pthread_cleanup_push <LINK LINKEND="REFSTD.libpthread.2">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_attr_destroy</primary></indexterm>pthread_attr_destroy <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_attr_getdetachstate</primary></indexterm>pthread_attr_getdetachstate <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>pthread_attr_getguardsize</primary></indexterm>pthread_attr_getguardsize <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_attr_getschedparam</primary></indexterm>pthread_attr_getschedparam <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_attr_getstack</primary></indexterm>pthread_attr_getstack <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_attr_getstackaddr</primary></indexterm>pthread_attr_getstackaddr <LINK LINKEND="REFSTD.libpthread.3">[SUSv3]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>pthread_attr_getstacksize</primary></indexterm>pthread_attr_getstacksize <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_attr_init</primary></indexterm>pthread_attr_init <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_attr_setdetachstate</primary></indexterm>pthread_attr_setdetachstate <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_attr_setguardsize</primary></indexterm>pthread_attr_setguardsize <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>pthread_attr_setschedparam</primary></indexterm>pthread_attr_setschedparam <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_attr_setstack</primary></indexterm>pthread_attr_setstack <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_attr_setstackaddr</primary></indexterm>pthread_attr_setstackaddr <LINK LINKEND="REFSTD.libpthread.3">[SUSv3]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_attr_setstacksize</primary></indexterm>pthread_attr_setstacksize <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>pthread_cancel</primary></indexterm>pthread_cancel <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_cond_broadcast</primary></indexterm>pthread_cond_broadcast <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_cond_destroy</primary></indexterm>pthread_cond_destroy <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_cond_init</primary></indexterm>pthread_cond_init <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>pthread_cond_signal</primary></indexterm>pthread_cond_signal <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_cond_timedwait</primary></indexterm>pthread_cond_timedwait <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_cond_wait</primary></indexterm>pthread_cond_wait <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_condattr_destroy</primary></indexterm>pthread_condattr_destroy <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>pthread_condattr_getclock</primary></indexterm>pthread_condattr_getclock(GLIBC_2.3.3) <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_condattr_getpshared</primary></indexterm>pthread_condattr_getpshared <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_condattr_init</primary></indexterm>pthread_condattr_init <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_condattr_setclock</primary></indexterm>pthread_condattr_setclock(GLIBC_2.3.3) <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>pthread_condattr_setpshared</primary></indexterm>pthread_condattr_setpshared <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_create</primary></indexterm>pthread_create <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_detach</primary></indexterm>pthread_detach <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_equal</primary></indexterm>pthread_equal <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>pthread_exit</primary></indexterm>pthread_exit <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_getconcurrency</primary></indexterm>pthread_getconcurrency <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_getspecific</primary></indexterm>pthread_getspecific <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_join</primary></indexterm>pthread_join <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>pthread_key_create</primary></indexterm>pthread_key_create <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_key_delete</primary></indexterm>pthread_key_delete <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_kill</primary></indexterm>pthread_kill <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_mutex_consistent</primary></indexterm>pthread_mutex_consistent(GLIBC_2.12) <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>pthread_mutex_destroy</primary></indexterm>pthread_mutex_destroy <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_mutex_init</primary></indexterm>pthread_mutex_init <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_mutex_lock</primary></indexterm>pthread_mutex_lock <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_mutex_timedlock</primary></indexterm>pthread_mutex_timedlock <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>pthread_mutex_trylock</primary></indexterm>pthread_mutex_trylock <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_mutex_unlock</primary></indexterm>pthread_mutex_unlock <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_mutexattr_destroy</primary></indexterm>pthread_mutexattr_destroy <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_mutexattr_getpshared</primary></indexterm>pthread_mutexattr_getpshared <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>pthread_mutexattr_getrobust</primary></indexterm>pthread_mutexattr_getrobust(GLIBC_2.12) <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_mutexattr_gettype</primary></indexterm>pthread_mutexattr_gettype <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_mutexattr_init</primary></indexterm>pthread_mutexattr_init <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_mutexattr_setpshared</primary></indexterm>pthread_mutexattr_setpshared <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>pthread_mutexattr_setrobust</primary></indexterm>pthread_mutexattr_setrobust(GLIBC_2.12) <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_mutexattr_settype</primary></indexterm>pthread_mutexattr_settype <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_once</primary></indexterm>pthread_once <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_rwlock_destroy</primary></indexterm>pthread_rwlock_destroy <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>pthread_rwlock_init</primary></indexterm>pthread_rwlock_init <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_rwlock_rdlock</primary></indexterm>pthread_rwlock_rdlock <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_rwlock_timedrdlock</primary></indexterm>pthread_rwlock_timedrdlock <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_rwlock_timedwrlock</primary></indexterm>pthread_rwlock_timedwrlock <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>pthread_rwlock_tryrdlock</primary></indexterm>pthread_rwlock_tryrdlock <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_rwlock_trywrlock</primary></indexterm>pthread_rwlock_trywrlock <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_rwlock_unlock</primary></indexterm>pthread_rwlock_unlock <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_rwlock_wrlock</primary></indexterm>pthread_rwlock_wrlock <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>pthread_rwlockattr_destroy</primary></indexterm>pthread_rwlockattr_destroy <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_rwlockattr_getpshared</primary></indexterm>pthread_rwlockattr_getpshared <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_rwlockattr_init</primary></indexterm>pthread_rwlockattr_init <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_rwlockattr_setpshared</primary></indexterm>pthread_rwlockattr_setpshared <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>pthread_self</primary></indexterm>pthread_self <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_setcancelstate</primary></indexterm>pthread_setcancelstate <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_setcanceltype</primary></indexterm>pthread_setcanceltype <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_setconcurrency</primary></indexterm>pthread_setconcurrency <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>pthread_setspecific</primary></indexterm>pthread_setspecific <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_sigmask</primary></indexterm>pthread_sigmask <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_testcancel</primary></indexterm>pthread_testcancel <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>sem_close</primary></indexterm>sem_close <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>sem_destroy</primary></indexterm>sem_destroy <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>sem_getvalue</primary></indexterm>sem_getvalue <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>sem_init</primary></indexterm>sem_init <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>sem_open</primary></indexterm>sem_open <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>sem_post</primary></indexterm>sem_post <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>sem_timedwait</primary></indexterm>sem_timedwait <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>sem_trywait</primary></indexterm>sem_trywait <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>sem_unlink</primary></indexterm>sem_unlink <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>sem_wait</primary></indexterm>sem_wait <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
An LSB conforming implementation shall provide the generic deprecated functions
for Posix Threads specified in <XREF linkend="tbl-libpthread-posix-depints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<NOTE><PARA>These interfaces are deprecated, and applications
should avoid using them.
These interfaces may be withdrawn
in future releases of this specification.
</PARA></NOTE>
<!--libgroupdepints-->
<TABLE id="tbl-libpthread-posix-depints">
<TITLE>libpthread - Posix Threads Deprecated Function Interfaces</TITLE>
<TGROUP COLS=4>
<TBODY>
<ROW>
<ENTRY><indexterm><primary>pthread_attr_getstackaddr</primary></indexterm>pthread_attr_getstackaddr <LINK LINKEND="REFSTD.libpthread.3">[SUSv3]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_attr_setstackaddr</primary></indexterm>pthread_attr_setstackaddr <LINK LINKEND="REFSTD.libpthread.3">[SUSv3]</LINK></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>
</SECT2>
<!-- debug: database interface name Thread aware versions of libc interfaces -->
<SECT2>
<!--libgroup-->
<TITLE>Thread aware versions of libc interfaces</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for Thread aware versions of libc interfaces</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic functions
for Thread aware versions of libc interfaces specified in <XREF linkend="tbl-libpthread-threa-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<TABLE id="tbl-libpthread-threa-ints">
<TITLE>libpthread - Thread aware versions of libc interfaces Function Interfaces</TITLE>
<TGROUP COLS=4>
<TBODY>
<ROW>
<ENTRY><indexterm><primary>lseek64</primary></indexterm>lseek64 <LINK LINKEND="REFSTD.libpthread.1">[LFS]</LINK></ENTRY>
<ENTRY><indexterm><primary>open64</primary></indexterm>open64 <LINK LINKEND="REFSTD.libpthread.1">[LFS]</LINK></ENTRY>
<ENTRY><indexterm><primary>pread</primary></indexterm>pread <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pread64</primary></indexterm>pread64 <LINK LINKEND="REFSTD.libpthread.2">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>pwrite</primary></indexterm>pwrite <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>pwrite64</primary></indexterm>pwrite64 <LINK LINKEND="REFSTD.libpthread.2">[LSB]</LINK></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>
</SECT2>
<!-- debug: database interface name GNU Extensions for libpthread -->
<SECT2>
<!--libgroup-->
<TITLE>GNU Extensions for libpthread</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for GNU Extensions for libpthread</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic functions
for GNU Extensions for libpthread specified in <XREF linkend="tbl-libpthread-gnu-e-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<TABLE id="tbl-libpthread-gnu-e-ints">
<TITLE>libpthread - GNU Extensions for libpthread Function Interfaces</TITLE>
<TGROUP COLS=4>
<TBODY>
<ROW>
<ENTRY><indexterm><primary>pthread_getattr_np</primary></indexterm>pthread_getattr_np <LINK LINKEND="REFSTD.libpthread.2">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_mutex_consistent_np</primary></indexterm>pthread_mutex_consistent_np <LINK LINKEND="REFSTD.libpthread.2">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_mutexattr_getrobust_np</primary></indexterm>pthread_mutexattr_getrobust_np <LINK LINKEND="REFSTD.libpthread.2">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_mutexattr_setrobust_np</primary></indexterm>pthread_mutexattr_setrobust_np <LINK LINKEND="REFSTD.libpthread.2">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>pthread_rwlockattr_getkind_np</primary></indexterm>pthread_rwlockattr_getkind_np <LINK LINKEND="REFSTD.libpthread.2">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>pthread_rwlockattr_setkind_np</primary></indexterm>pthread_rwlockattr_setkind_np <LINK LINKEND="REFSTD.libpthread.2">[LSB]</LINK></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>
</SECT2>
<!-- debug: database interface name System Calls -->
<SECT2>
<!--libgroup-->
<TITLE>System Calls</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for System Calls</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic functions
for System Calls specified in <XREF linkend="tbl-libpthread-syste-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<TABLE id="tbl-libpthread-syste-ints">
<TITLE>libpthread - System Calls Function Interfaces</TITLE>
<TGROUP COLS=4>
<TBODY>
<ROW>
<ENTRY><indexterm><primary>close</primary></indexterm>close <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>fcntl</primary></indexterm>fcntl <LINK LINKEND="REFSTD.libpthread.2">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>fork</primary></indexterm>fork <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>fsync</primary></indexterm>fsync <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>lseek</primary></indexterm>lseek <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>msync</primary></indexterm>msync <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>nanosleep</primary></indexterm>nanosleep <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>open</primary></indexterm>open <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>pause</primary></indexterm>pause <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>read</primary></indexterm>read <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>vfork</primary></indexterm>vfork <LINK LINKEND="REFSTD.libpthread.3">[SUSv3]</LINK></ENTRY>
<ENTRY><indexterm><primary>wait</primary></indexterm>wait <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>waitpid</primary></indexterm>waitpid <LINK LINKEND="REFSTD.libpthread.2">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>write</primary></indexterm>write <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>
</SECT2>
<!-- debug: database interface name Standard I/O -->
<SECT2>
<!--libgroup-->
<TITLE>Standard I/O</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for Standard I/O</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic functions
for Standard I/O specified in <XREF linkend="tbl-libpthread-stand-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<TABLE id="tbl-libpthread-stand-ints">
<TITLE>libpthread - Standard I/O Function Interfaces</TITLE>
<TGROUP COLS=4>
<TBODY>
<ROW>
<ENTRY><indexterm><primary>flockfile</primary></indexterm>flockfile <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>
</SECT2>
<!-- debug: database interface name Signal Handling -->
<SECT2>
<!--libgroup-->
<TITLE>Signal Handling</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for Signal Handling</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic functions
for Signal Handling specified in <XREF linkend="tbl-libpthread-signa-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<TABLE id="tbl-libpthread-signa-ints">
<TITLE>libpthread - Signal Handling Function Interfaces</TITLE>
<TGROUP COLS=4>
<TBODY>
<ROW>
<ENTRY><indexterm><primary>__libc_current_sigrtmax</primary></indexterm>__libc_current_sigrtmax <LINK LINKEND="REFSTD.libpthread.2">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>__libc_current_sigrtmin</primary></indexterm>__libc_current_sigrtmin <LINK LINKEND="REFSTD.libpthread.2">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>raise</primary></indexterm>raise <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>sigaction</primary></indexterm>sigaction <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>siglongjmp</primary></indexterm>siglongjmp <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>sigwait</primary></indexterm>sigwait <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>
</SECT2>
<!-- debug: database interface name Standard Library -->
<SECT2>
<!--libgroup-->
<TITLE>Standard Library</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for Standard Library</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic functions
for Standard Library specified in <XREF linkend="tbl-libpthread-stane-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<TABLE id="tbl-libpthread-stane-ints">
<TITLE>libpthread - Standard Library Function Interfaces</TITLE>
<TGROUP COLS=4>
<TBODY>
<ROW>
<ENTRY><indexterm><primary>__errno_location</primary></indexterm>__errno_location <LINK LINKEND="REFSTD.libpthread.2">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>ftrylockfile</primary></indexterm>ftrylockfile <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>funlockfile</primary></indexterm>funlockfile <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>longjmp</primary></indexterm>longjmp <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>system</primary></indexterm>system <LINK LINKEND="REFSTD.libpthread.2">[LSB]</LINK></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>
</SECT2>
<!-- debug: database interface name Socket Interface -->
<SECT2>
<!--libgroup-->
<TITLE>Socket Interface</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for Socket Interface</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic functions
for Socket Interface specified in <XREF linkend="tbl-libpthread-socke-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<TABLE id="tbl-libpthread-socke-ints">
<TITLE>libpthread - Socket Interface Function Interfaces</TITLE>
<TGROUP COLS=4>
<TBODY>
<ROW>
<ENTRY><indexterm><primary>__h_errno_location</primary></indexterm>__h_errno_location <LINK LINKEND="REFSTD.libpthread.2">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>accept</primary></indexterm>accept <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>connect</primary></indexterm>connect <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>recv</primary></indexterm>recv <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>recvfrom</primary></indexterm>recvfrom <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>recvmsg</primary></indexterm>recvmsg <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>send</primary></indexterm>send <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY><indexterm><primary>sendmsg</primary></indexterm>sendmsg <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>sendto</primary></indexterm>sendto <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>
</SECT2>
<!-- debug: database interface name Terminal Interface Functions -->
<SECT2>
<!--libgroup-->
<TITLE>Terminal Interface Functions</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for Terminal Interface Functions</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic functions
for Terminal Interface Functions specified in <XREF linkend="tbl-libpthread-termi-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<TABLE id="tbl-libpthread-termi-ints">
<TITLE>libpthread - Terminal Interface Functions Function Interfaces</TITLE>
<TGROUP COLS=4>
<TBODY>
<ROW>
<ENTRY><indexterm><primary>tcdrain</primary></indexterm>tcdrain <LINK LINKEND="REFSTD.libpthread.4">[SUSv4]</LINK></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>
</SECT2>
</SECT1>
<SECT1 ID=libpthread-ddefs>
<TITLE>Data Definitions for libpthread</TITLE>
<PARA>
This section defines global identifiers and their values that are associated
with interfaces contained in libpthread.
These definitions are organized into groups that
correspond to system headers. This convention is used as a
convenience for the reader, and does not imply the existence
of these headers, or their content.
Where an interface is defined as requiring a particular system header file
all of the data definitions for that system header file presented here shall be in effect.
</PARA>
<PARA>
This section gives data definitions to promote binary application
portability, not to repeat source interface definitions available
elsewhere. System providers and application developers should use this ABI
to supplement - not to replace - source interface definition specifications.
</PARA>
<PARA>
This specification uses the <XREF LINKEND='std.ISOC99'> C Language as the reference programming language, and data definitions are specified in ISO C format. The C language is used here as a convenient notation. Using a C language description of these data objects does not preclude their use by other programming languages.</PARA>
<SECT2>
<TITLE>lsb/pthread.h</TITLE>
<PARA>
</PARA>
<SCREEN>

typedef unsigned long int pthread_t;
</SCREEN>
</SECT2>
<SECT2>
<TITLE>lsb/time.h</TITLE>
<PARA>
</PARA>
<SCREEN>

struct timeval {
    time_t tv_sec;
    suseconds_t tv_usec;
};
</SCREEN>
</SECT2>
<SECT2>
<TITLE>lsb/types.h</TITLE>
<PARA>
</PARA>
<SCREEN>

/*
 * This header is architecture dependent
 * Please refer to the specific architecture specification for details
 */
</SCREEN>
</SECT2>
<SECT2>
<TITLE>pthread.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define PTHREAD_MUTEX_DEFAULT	0
#define PTHREAD_MUTEX_NORMAL	0
#define PTHREAD_SCOPE_SYSTEM	0
#define PTHREAD_MUTEX_RECURSIVE	1
#define PTHREAD_SCOPE_PROCESS	1
#define PTHREAD_MUTEX_ERRORCHECK	2
#define PTHREAD_RWLOCK_DEFAULT_NP	2
#define __SIZEOF_PTHREAD_BARRIERATTR_T	4
#define __SIZEOF_PTHREAD_CONDATTR_T	4
#define __SIZEOF_PTHREAD_MUTEXATTR_T	4
#define __SIZEOF_PTHREAD_COND_T	48
#define __SIZEOF_PTHREAD_RWLOCKATTR_T	8
#define pthread_cleanup_push(routine,arg)	\
        {struct _pthread_cleanup_buffer _buffer;\
        _pthread_cleanup_push(&amp;_buffer,(routine),(arg));
#define pthread_cleanup_pop(execute)	_pthread_cleanup_pop(&amp;_buffer,(execute));}
#define PTHREAD_COND_INITIALIZER	{ { 0, 0, 0, 0, 0, (void *) 0, 0, 0 } }

struct _pthread_cleanup_buffer {
    void (*__routine) (void *);
    void *__arg;
    int __canceltype;
    struct _pthread_cleanup_buffer *__prev;
};
typedef unsigned int pthread_key_t;
typedef int pthread_once_t;
typedef volatile int pthread_spinlock_t;
typedef union {
    char __size[__SIZEOF_PTHREAD_BARRIERATTR_T];
    int __align;
} pthread_barrierattr_t;
enum {
    PTHREAD_PRIO_NONE,
    PTHREAD_PRIO_INHERIT,
    PTHREAD_PRIO_PROTECT
};
enum {
    PTHREAD_MUTEX_STALLED = 0,
    PTHREAD_MUTEX_STALLED_NP = 0,
    PTHREAD_MUTEX_ROBUST = 1,
    PTHREAD_MUTEX_ROBUST_NP = 1
};

typedef union {
    struct __pthread_mutex_s __data;
    char __size[__SIZEOF_PTHREAD_MUTEX_T];
    long int __align;
} pthread_mutex_t;
typedef union {
    char __size[__SIZEOF_PTHREAD_MUTEXATTR_T];
    int __align;
} pthread_mutexattr_t;

typedef union {
    char __size[__SIZEOF_PTHREAD_ATTR_T];
    long int __align;
} pthread_attr_t;

typedef union {
    struct {
	int __lock;
	unsigned int __futex;
	unsigned long long int __total_seq;
	unsigned long long int __wakeup_seq;
	unsigned long long int __woken_seq;
	void *__mutex;
	unsigned int __nwaiters;
	unsigned int __broadcast_seq;
    } __data;
    char __size[__SIZEOF_PTHREAD_COND_T];
    long long int __align;
} pthread_cond_t;
typedef union {
    char __size[__SIZEOF_PTHREAD_CONDATTR_T];
    int __align;
} pthread_condattr_t;

typedef union {
    char __size[__SIZEOF_PTHREAD_RWLOCKATTR_T];
    long int __align;
} pthread_rwlockattr_t;

#define PTHREAD_CREATE_JOINABLE	0
#define PTHREAD_INHERIT_SCHED	0
#define PTHREAD_ONCE_INIT	0
#define PTHREAD_PROCESS_PRIVATE	0
#define PTHREAD_CREATE_DETACHED	1
#define PTHREAD_EXPLICIT_SCHED	1
#define PTHREAD_PROCESS_SHARED	1

#define PTHREAD_CANCELED	((void*)-1)
#define PTHREAD_CANCEL_DEFERRED	0
#define PTHREAD_CANCEL_ENABLE	0
#define PTHREAD_CANCEL_ASYNCHRONOUS	1
#define PTHREAD_CANCEL_DISABLE	1

extern int __register_atfork(void (*)(void), void (*)(void),
			     void (*)(void), void *);
extern void _pthread_cleanup_pop(struct _pthread_cleanup_buffer *, int);
extern void _pthread_cleanup_push(struct _pthread_cleanup_buffer *,
				  void (*)(void *), void *);
extern int pthread_atfork(void (*__prepare) (void),
			  void (*__parent) (void), void (*__child) (void));
extern int pthread_attr_destroy(pthread_attr_t * __attr);
extern int pthread_attr_getdetachstate(const pthread_attr_t * __attr,
				       int *__detachstate);
extern int pthread_attr_getguardsize(const pthread_attr_t * __attr,
				     size_t * __guardsize);
extern int pthread_attr_getinheritsched(const pthread_attr_t * __attr,
					int *__inherit);
extern int pthread_attr_getschedparam(const pthread_attr_t * __attr,
				      struct sched_param *__param);
extern int pthread_attr_getschedpolicy(const pthread_attr_t * __attr,
				       int *__policy);
extern int pthread_attr_getscope(const pthread_attr_t * __attr,
				 int *__scope);
extern int pthread_attr_getstack(const pthread_attr_t * __attr,
				 void **__stackaddr, size_t * __stacksize);
extern int pthread_attr_getstackaddr(const pthread_attr_t * __attr,
				     void **__stackaddr);
extern int pthread_attr_getstacksize(const pthread_attr_t * __attr,
				     size_t * __stacksize);
extern int pthread_attr_init(pthread_attr_t * __attr);
extern int pthread_attr_setdetachstate(pthread_attr_t * __attr,
				       int __detachstate);
extern int pthread_attr_setguardsize(pthread_attr_t * __attr,
				     size_t __guardsize);
extern int pthread_attr_setinheritsched(pthread_attr_t * __attr,
					int __inherit);
extern int pthread_attr_setschedparam(pthread_attr_t * __attr,
				      const struct sched_param *__param);
extern int pthread_attr_setschedpolicy(pthread_attr_t * __attr,
				       int __policy);
extern int pthread_attr_setscope(pthread_attr_t * __attr, int __scope);
extern int pthread_attr_setstack(pthread_attr_t * __attr,
				 void *__stackaddr, size_t __stacksize);
extern int pthread_attr_setstackaddr(pthread_attr_t * __attr,
				     void *__stackaddr);
extern int pthread_attr_setstacksize(pthread_attr_t * __attr,
				     size_t __stacksize);
extern int pthread_barrier_destroy(pthread_barrier_t * __barrier);
extern int pthread_barrier_init(pthread_barrier_t * __barrier,
				const pthread_barrierattr_t * __attr,
				unsigned int __count);
extern int pthread_barrier_wait(pthread_barrier_t * __barrier);
extern int pthread_barrierattr_destroy(pthread_barrierattr_t * __attr);
extern int pthread_barrierattr_getpshared(const pthread_barrierattr_t *
					  __attr, int *__pshared);
extern int pthread_barrierattr_init(pthread_barrierattr_t * __attr);
extern int pthread_barrierattr_setpshared(pthread_barrierattr_t * __attr,
					  int __pshared);
extern int pthread_cancel(pthread_t __th);
extern int pthread_cond_broadcast(pthread_cond_t * __cond);
extern int pthread_cond_destroy(pthread_cond_t * __cond);
extern int pthread_cond_init(pthread_cond_t * __cond,
			     const pthread_condattr_t * __cond_attr);
extern int pthread_cond_signal(pthread_cond_t * __cond);
extern int pthread_cond_timedwait(pthread_cond_t * __cond,
				  pthread_mutex_t * __mutex,
				  const struct timespec *__abstime);
extern int pthread_cond_wait(pthread_cond_t * __cond,
			     pthread_mutex_t * __mutex);
extern int pthread_condattr_destroy(pthread_condattr_t * __attr);
extern int pthread_condattr_getclock(const pthread_condattr_t * attr,
				     clockid_t * clock_id);
extern int pthread_condattr_getpshared(const pthread_condattr_t * __attr,
				       int *__pshared);
extern int pthread_condattr_init(pthread_condattr_t * __attr);
extern int pthread_condattr_setclock(pthread_condattr_t * attr,
				     clockid_t clock_id);
extern int pthread_condattr_setpshared(pthread_condattr_t * __attr,
				       int __pshared);
extern int pthread_create(pthread_t * __newthread,
			  const pthread_attr_t * __attr,
			  void *(*__start_routine) (void *), void *__arg);
extern int pthread_detach(pthread_t __th);
extern int pthread_equal(pthread_t __thread1, pthread_t __thread2);
extern void pthread_exit(void *__retval);
extern int pthread_getattr_np(pthread_t thread, pthread_attr_t * attr);
extern int pthread_getconcurrency(void);
extern int pthread_getcpuclockid(pthread_t __thread_id,
				 clockid_t * __clock_id);
extern int pthread_getschedparam(pthread_t __target_thread, int *__policy,
				 struct sched_param *__param);
extern void *pthread_getspecific(pthread_key_t __key);
extern int pthread_join(pthread_t __th, void **__thread_return);
extern int pthread_key_create(pthread_key_t * __key,
			      void (*__destr_function) (void *));
extern int pthread_key_delete(pthread_key_t __key);
extern int pthread_mutex_consistent(pthread_mutex_t * mutex);
extern int pthread_mutex_consistent_np(pthread_mutex_t * __mutex);
extern int pthread_mutex_destroy(pthread_mutex_t * __mutex);
extern int pthread_mutex_getprioceiling(const pthread_mutex_t * __mutex,
					int *__prioceiling);
extern int pthread_mutex_init(pthread_mutex_t * __mutex,
			      const pthread_mutexattr_t * __mutexattr);
extern int pthread_mutex_lock(pthread_mutex_t * __mutex);
extern int pthread_mutex_setprioceiling(pthread_mutex_t * __mutex,
					int __prioceiling,
					int *__old_ceiling);
extern int pthread_mutex_timedlock(pthread_mutex_t * __mutex,
				   const struct timespec *__abstime);
extern int pthread_mutex_trylock(pthread_mutex_t * __mutex);
extern int pthread_mutex_unlock(pthread_mutex_t * __mutex);
extern int pthread_mutexattr_destroy(pthread_mutexattr_t * __attr);
extern int pthread_mutexattr_getprioceiling(const pthread_mutexattr_t *
					    __attr, int *__prioceiling);
extern int pthread_mutexattr_getprotocol(const pthread_mutexattr_t *
					 __attr, int *__protocol);
extern int pthread_mutexattr_getpshared(const pthread_mutexattr_t * __attr,
					int *__pshared);
extern int pthread_mutexattr_getrobust(const pthread_mutexattr_t * attr,
				       int *robust);
extern int pthread_mutexattr_getrobust_np(const pthread_mutexattr_t *
					  __attr, int *__robustness);
extern int pthread_mutexattr_gettype(const pthread_mutexattr_t * __attr,
				     int *__kind);
extern int pthread_mutexattr_init(pthread_mutexattr_t * __attr);
extern int pthread_mutexattr_setprioceiling(pthread_mutexattr_t * __attr,
					    int __prioceiling);
extern int pthread_mutexattr_setprotocol(pthread_mutexattr_t * __attr,
					 int __protocol);
extern int pthread_mutexattr_setpshared(pthread_mutexattr_t * __attr,
					int __pshared);
extern int pthread_mutexattr_setrobust(pthread_mutexattr_t * attr,
				       int robust);
extern int pthread_mutexattr_setrobust_np(pthread_mutexattr_t * __attr,
					  int __robustness);
extern int pthread_mutexattr_settype(pthread_mutexattr_t * __attr,
				     int __kind);
extern int pthread_once(pthread_once_t * __once_control,
			void (*__init_routine) (void));
extern int pthread_rwlock_destroy(pthread_rwlock_t * __rwlock);
extern int pthread_rwlock_init(pthread_rwlock_t * __rwlock,
			       const pthread_rwlockattr_t * __attr);
extern int pthread_rwlock_rdlock(pthread_rwlock_t * __rwlock);
extern int pthread_rwlock_timedrdlock(pthread_rwlock_t * __rwlock,
				      const struct timespec *__abstime);
extern int pthread_rwlock_timedwrlock(pthread_rwlock_t * __rwlock,
				      const struct timespec *__abstime);
extern int pthread_rwlock_tryrdlock(pthread_rwlock_t * __rwlock);
extern int pthread_rwlock_trywrlock(pthread_rwlock_t * __rwlock);
extern int pthread_rwlock_unlock(pthread_rwlock_t * __rwlock);
extern int pthread_rwlock_wrlock(pthread_rwlock_t * __rwlock);
extern int pthread_rwlockattr_destroy(pthread_rwlockattr_t * __attr);
extern int pthread_rwlockattr_getkind_np(const pthread_rwlockattr_t *
					 __attr, int *__pref);
extern int pthread_rwlockattr_getpshared(const pthread_rwlockattr_t *
					 __attr, int *__pshared);
extern int pthread_rwlockattr_init(pthread_rwlockattr_t * __attr);
extern int pthread_rwlockattr_setkind_np(pthread_rwlockattr_t * __attr,
					 int __pref);
extern int pthread_rwlockattr_setpshared(pthread_rwlockattr_t * __attr,
					 int __pshared);
extern pthread_t pthread_self(void);
extern int pthread_setcancelstate(int __state, int *__oldstate);
extern int pthread_setcanceltype(int __type, int *__oldtype);
extern int pthread_setconcurrency(int __level);
extern int pthread_setschedparam(pthread_t __target_thread, int __policy,
				 const struct sched_param *__param);
extern int pthread_setschedprio(pthread_t __target_thread, int __prio);
extern int pthread_setspecific(pthread_key_t __key, const void *__pointer);
extern int pthread_spin_destroy(pthread_spinlock_t * __lock);
extern int pthread_spin_init(pthread_spinlock_t * __lock, int __pshared);
extern int pthread_spin_lock(pthread_spinlock_t * __lock);
extern int pthread_spin_trylock(pthread_spinlock_t * __lock);
extern int pthread_spin_unlock(pthread_spinlock_t * __lock);
extern void pthread_testcancel(void);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>semaphore.h</TITLE>
<PARA>
</PARA>
<SCREEN>

typedef union {
    char __size[__SIZEOF_SEM_T];
    long int __align;
} sem_t;

#define SEM_FAILED	((sem_t*)0)

#define SEM_VALUE_MAX	((int)((~0u)>>1))

extern int sem_close(sem_t * __sem);
extern int sem_destroy(sem_t * __sem);
extern int sem_getvalue(sem_t * __sem, int *__sval);
extern int sem_init(sem_t * __sem, int __pshared, unsigned int __value);
extern sem_t *sem_open(const char *__name, int __oflag, ...);
extern int sem_post(sem_t * __sem);
extern int sem_timedwait(sem_t * __sem, const struct timespec *__abstime);
extern int sem_trywait(sem_t * __sem);
extern int sem_unlink(const char *__name);
extern int sem_wait(sem_t * __sem);
</SCREEN>
</SECT2>
</SECT1>
<SECT1 ID=libpthreadman>
<TITLE>Interface Definitions for libpthread</TITLE>
<PARA>
The interfaces defined on the following pages are included in libpthread and are defined
by this specification.
Unless otherwise noted, these interfaces shall be included
in the source standard.
</PARA>
<PARA>
Other interfaces listed in <XREF LINKEND=libpthread> shall behave as described
in the referenced base document.
</PARA>
m4_sinclude(m4_ifdef('__errno_location','',__errno_location.sgml))
m4_define('__errno_location','1')
m4_sinclude(m4_ifdef('__h_errno_location','',__h_errno_location.sgml))
m4_define('__h_errno_location','1')
m4_sinclude(m4_ifdef('__libc_current_sigrtmax','',__libc_current_sigrtmax.sgml))
m4_define('__libc_current_sigrtmax','1')
m4_sinclude(m4_ifdef('__libc_current_sigrtmin','',__libc_current_sigrtmin.sgml))
m4_define('__libc_current_sigrtmin','1')
m4_sinclude(m4_ifdef('_pthread_cleanup_pop','',_pthread_cleanup_pop.sgml))
m4_define('_pthread_cleanup_pop','1')
m4_sinclude(m4_ifdef('_pthread_cleanup_push','',_pthread_cleanup_push.sgml))
m4_define('_pthread_cleanup_push','1')
m4_sinclude(m4_ifdef('fcntl','',fcntl.sgml))
m4_define('fcntl','1')
m4_sinclude(m4_ifdef('pread64','',pread64.sgml))
m4_define('pread64','1')
m4_sinclude(m4_ifdef('pthread_getattr_np','',pthread_getattr_np.sgml))
m4_define('pthread_getattr_np','1')
m4_sinclude(m4_ifdef('pthread_mutex_consistent_np','',pthread_mutex_consistent_np.sgml))
m4_define('pthread_mutex_consistent_np','1')
m4_sinclude(m4_ifdef('pthread_mutexattr_getrobust_np','',pthread_mutexattr_getrobust_np.sgml))
m4_define('pthread_mutexattr_getrobust_np','1')
m4_sinclude(m4_ifdef('pthread_mutexattr_setrobust_np','',pthread_mutexattr_setrobust_np.sgml))
m4_define('pthread_mutexattr_setrobust_np','1')
m4_sinclude(m4_ifdef('pthread_rwlockattr_getkind_np','',pthread_rwlockattr_getkind_np.sgml))
m4_define('pthread_rwlockattr_getkind_np','1')
m4_sinclude(m4_ifdef('pthread_rwlockattr_setkind_np','',pthread_rwlockattr_setkind_np.sgml))
m4_define('pthread_rwlockattr_setkind_np','1')
m4_sinclude(m4_ifdef('pwrite64','',pwrite64.sgml))
m4_define('pwrite64','1')
m4_sinclude(m4_ifdef('system','',system.sgml))
m4_define('system','1')
m4_sinclude(m4_ifdef('waitpid','',waitpid.sgml))
m4_define('waitpid','1')
</SECT1>
<!-- End of text generated from database -->
