<!-- Start of text generated from database -->
<!-- generated from the LSB specification database -->
<!--    by $Header: /cvsroot/lsb/lsbspec/mklibspec,v 1.53 2003/06/03 20:38:14 anderson Exp 0 -->
<!--    at Wed Sep 10 16:55:38 2003 -->
<SECT1 ID=libpthread>
<TITLE>Interfaces for libpthread</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libpthread Definition</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Library:</ENTRY>
<ENTRY>libpthread</ENTRY>
</ROW>
<ROW>
<ENTRY>SONAME:</ENTRY>
<ENTRY>See archLSB.</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
LSB systems support POSIX threads, except they may exhibit the
following behaviors.
<footnote>
<para>
This list is intended to match the behavior of historical Linux
implementations.  Applications should be written to deal with either
POSIX threads or the thread behaviors described here.
</para>
<para>
A future version of the LSB is likely to require full POSIX threads.
</para>
</footnote>

<ITEMIZEDLIST MARK="BULLET">

<LISTITEM>
<PARA>
POSIX specifies a concept of per-process rather than per-thread
signals.  The LSB does not require this behavior; traditional Linux
implementations have had per-thread signals only.  A related issue is
that applications cannot rely on getpid() returning the same value
in different threads.
</PARA>
</LISTITEM>

<LISTITEM>
<PARA>
Note: one implication of per-thread signals is that a core dump (for
example) may not stop all threads in a given process.  This may be an
issue when designing ways to stop/start applications.
</PARA>
</LISTITEM>

<LISTITEM>
<PARA>
Applications which create child processes (using fork() and the like)
shall then wait for them (using waitpid() family of functions) in the
same thread as they created them.  Note that coding applications this
way will work both with full POSIX threads and legacy Linux thread
implementations.
</PARA>
</LISTITEM>

<LISTITEM>
<PARA>
POSIX specifies that changing the user or group id instantly affects
the behavior of all threads.  This behavior is not specified;
applications shall use their own lock if they need this behavior.
Rationale: it seems unnecessary and it is a performance hit (an SMP
kernel shall lock the user id).
</PARA>
</LISTITEM>

<LISTITEM>
<PARA>
Although this standard doesn't have a way to list processes (/proc or
"ps" command line isn't in, right?), it is our intention to not
specify one way or the other whether multiple threads appear as
separate processes or as a single process.
</PARA>
</LISTITEM>

<LISTITEM>
<PARA>
Applications cannot rely on resource limits (getrusage and setrusage)
being maintained per-process rather than per-thread.
</PARA>
</LISTITEM>

<LISTITEM>
<PARA>
Applications shall disconnect from the controlling tty before
calling pthread_create.
</PARA>
</LISTITEM>

<LISTITEM>
<PARA>
times() need not account for all threads; it may just account for the caller.
</PARA>
</LISTITEM>

<LISTITEM>
<PARA>
Applications shall not call pthread_cancel if they call any system
libraries (most notably X Window System libraries), as system libraries are
not guaranteed to be thread safe.  Likewise, for such libraries, only one
thread per process may call them.
</PARA>
</LISTITEM>

<LISTITEM>
<PARA>
Applications cannot rely on fcntl/lockf locks being visible
per-process rather than per-thread.  Likewise for mandatory file
locks.
</PARA>
</LISTITEM>

<LISTITEM>
<PARA>
Threaded applications cannot use SIGUSR1 or SIGUSR2.
</PARA>
</LISTITEM>

</ITEMIZEDLIST>
</PARA>

<PARA>
The behavior of the interfaces in this library is specified by the following standards.<SIMPLELIST COLUMNS=1>
<MEMBER>
Linux Standard Base<FOOTNOTE ID="std-132-10">
<PARA>
Linux Standard Base</PARA>
</FOOTNOTE>
</MEMBER>
<MEMBER>
The Single UNIX® Specification(SUS) Version 3<FOOTNOTE ID="std-132-67">
<PARA>
The Single UNIX® Specification(SUS) Version 3</PARA>
</FOOTNOTE>
</MEMBER>
</SIMPLELIST>
</PARA>
<SECT2>
<!--libgroup-->
<TITLE>Posix Threads</TITLE>
<PARA>
</PARA>
<SECT3>
<TITLE>Interfaces for Posix Threads</TITLE>
<PARA>
</PARA>
<!--libgroupints-->
<TABLE>
<TITLE>libpthread - Posix Threads Function Interfaces</TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW>
<ENTRY><indexterm><primary>_pthread_cleanup_pop</primary></indexterm>_pthread_cleanup_pop<FOOTNOTEREF LINKEND="std-132-10"></ENTRY>
<ENTRY><indexterm><primary>pthread_attr_setschedpolicy</primary></indexterm>pthread_attr_setschedpolicy<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
<ENTRY><indexterm><primary>pthread_getschedparam</primary></indexterm>pthread_getschedparam<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
<ENTRY><indexterm><primary>pthread_once</primary></indexterm>pthread_once<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
<ENTRY><indexterm><primary>pthread_setconcurrency</primary></indexterm>pthread_setconcurrency<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_pthread_cleanup_push</primary></indexterm>_pthread_cleanup_push<FOOTNOTEREF LINKEND="std-132-10"></ENTRY>
<ENTRY><indexterm><primary>pthread_attr_setscope</primary></indexterm>pthread_attr_setscope<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
<ENTRY><indexterm><primary>pthread_getspecific</primary></indexterm>pthread_getspecific<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
<ENTRY><indexterm><primary>pthread_rwlock_destroy</primary></indexterm>pthread_rwlock_destroy<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
<ENTRY><indexterm><primary>pthread_setschedparam</primary></indexterm>pthread_setschedparam<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>pthread_atfork</primary></indexterm>pthread_atfork<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
<ENTRY><indexterm><primary>pthread_attr_setstackaddr</primary></indexterm>pthread_attr_setstackaddr<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
<ENTRY><indexterm><primary>pthread_join</primary></indexterm>pthread_join<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
<ENTRY><indexterm><primary>pthread_rwlock_init</primary></indexterm>pthread_rwlock_init<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
<ENTRY><indexterm><primary>pthread_setspecific</primary></indexterm>pthread_setspecific<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>pthread_attr_destroy</primary></indexterm>pthread_attr_destroy<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
<ENTRY><indexterm><primary>pthread_attr_setstacksize</primary></indexterm>pthread_attr_setstacksize<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
<ENTRY><indexterm><primary>pthread_key_create</primary></indexterm>pthread_key_create<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
<ENTRY><indexterm><primary>pthread_rwlock_rdlock</primary></indexterm>pthread_rwlock_rdlock<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
<ENTRY><indexterm><primary>pthread_sigmask</primary></indexterm>pthread_sigmask<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>pthread_attr_getdetachstate</primary></indexterm>pthread_attr_getdetachstate<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
<ENTRY><indexterm><primary>pthread_cancel</primary></indexterm>pthread_cancel<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
<ENTRY><indexterm><primary>pthread_key_delete</primary></indexterm>pthread_key_delete<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
<ENTRY><indexterm><primary>pthread_rwlock_timedrdlock</primary></indexterm>pthread_rwlock_timedrdlock<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
<ENTRY><indexterm><primary>pthread_testcancel</primary></indexterm>pthread_testcancel<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>pthread_attr_getguardsize</primary></indexterm>pthread_attr_getguardsize<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
<ENTRY><indexterm><primary>pthread_cond_broadcast</primary></indexterm>pthread_cond_broadcast<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
<ENTRY><indexterm><primary>pthread_kill</primary></indexterm>pthread_kill<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
<ENTRY><indexterm><primary>pthread_rwlock_timedwrlock</primary></indexterm>pthread_rwlock_timedwrlock<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
<ENTRY><indexterm><primary>sem_close</primary></indexterm>sem_close<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>pthread_attr_getinheritsched</primary></indexterm>pthread_attr_getinheritsched<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
<ENTRY><indexterm><primary>pthread_cond_destroy</primary></indexterm>pthread_cond_destroy<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
<ENTRY><indexterm><primary>pthread_mutex_destroy</primary></indexterm>pthread_mutex_destroy<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
<ENTRY><indexterm><primary>pthread_rwlock_tryrdlock</primary></indexterm>pthread_rwlock_tryrdlock<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
<ENTRY><indexterm><primary>sem_destroy</primary></indexterm>sem_destroy<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>pthread_attr_getschedparam</primary></indexterm>pthread_attr_getschedparam<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
<ENTRY><indexterm><primary>pthread_cond_init</primary></indexterm>pthread_cond_init<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
<ENTRY><indexterm><primary>pthread_mutex_init</primary></indexterm>pthread_mutex_init<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
<ENTRY><indexterm><primary>pthread_rwlock_trywrlock</primary></indexterm>pthread_rwlock_trywrlock<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
<ENTRY><indexterm><primary>sem_getvalue</primary></indexterm>sem_getvalue<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>pthread_attr_getschedpolicy</primary></indexterm>pthread_attr_getschedpolicy<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
<ENTRY><indexterm><primary>pthread_cond_signal</primary></indexterm>pthread_cond_signal<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
<ENTRY><indexterm><primary>pthread_mutex_lock</primary></indexterm>pthread_mutex_lock<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
<ENTRY><indexterm><primary>pthread_rwlock_unlock</primary></indexterm>pthread_rwlock_unlock<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
<ENTRY><indexterm><primary>sem_init</primary></indexterm>sem_init<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>pthread_attr_getscope</primary></indexterm>pthread_attr_getscope<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
<ENTRY><indexterm><primary>pthread_cond_timedwait</primary></indexterm>pthread_cond_timedwait<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
<ENTRY><indexterm><primary>pthread_mutex_trylock</primary></indexterm>pthread_mutex_trylock<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
<ENTRY><indexterm><primary>pthread_rwlock_wrlock</primary></indexterm>pthread_rwlock_wrlock<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
<ENTRY><indexterm><primary>sem_open</primary></indexterm>sem_open<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>pthread_attr_getstackaddr</primary></indexterm>pthread_attr_getstackaddr<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
<ENTRY><indexterm><primary>pthread_cond_wait</primary></indexterm>pthread_cond_wait<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
<ENTRY><indexterm><primary>pthread_mutex_unlock</primary></indexterm>pthread_mutex_unlock<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
<ENTRY><indexterm><primary>pthread_rwlockattr_destroy</primary></indexterm>pthread_rwlockattr_destroy<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
<ENTRY><indexterm><primary>sem_post</primary></indexterm>sem_post<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>pthread_attr_getstacksize</primary></indexterm>pthread_attr_getstacksize<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
<ENTRY><indexterm><primary>pthread_condattr_destroy</primary></indexterm>pthread_condattr_destroy<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
<ENTRY><indexterm><primary>pthread_mutexattr_destroy</primary></indexterm>pthread_mutexattr_destroy<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
<ENTRY><indexterm><primary>pthread_rwlockattr_getpshared</primary></indexterm>pthread_rwlockattr_getpshared<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
<ENTRY><indexterm><primary>sem_timedwait</primary></indexterm>sem_timedwait<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>pthread_attr_init</primary></indexterm>pthread_attr_init<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
<ENTRY><indexterm><primary>pthread_condattr_init</primary></indexterm>pthread_condattr_init<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
<ENTRY><indexterm><primary>pthread_mutexattr_getpshared</primary></indexterm>pthread_mutexattr_getpshared<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
<ENTRY><indexterm><primary>pthread_rwlockattr_init</primary></indexterm>pthread_rwlockattr_init<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
<ENTRY><indexterm><primary>sem_trywait</primary></indexterm>sem_trywait<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>pthread_attr_setdetachstate</primary></indexterm>pthread_attr_setdetachstate<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
<ENTRY><indexterm><primary>pthread_create</primary></indexterm>pthread_create<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
<ENTRY><indexterm><primary>pthread_mutexattr_gettype</primary></indexterm>pthread_mutexattr_gettype<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
<ENTRY><indexterm><primary>pthread_rwlockattr_setpshared</primary></indexterm>pthread_rwlockattr_setpshared<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
<ENTRY><indexterm><primary>sem_unlink</primary></indexterm>sem_unlink<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>pthread_attr_setguardsize</primary></indexterm>pthread_attr_setguardsize<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
<ENTRY><indexterm><primary>pthread_detach</primary></indexterm>pthread_detach<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
<ENTRY><indexterm><primary>pthread_mutexattr_init</primary></indexterm>pthread_mutexattr_init<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
<ENTRY><indexterm><primary>pthread_self</primary></indexterm>pthread_self<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
<ENTRY><indexterm><primary>sem_wait</primary></indexterm>sem_wait<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>pthread_attr_setinheritsched</primary></indexterm>pthread_attr_setinheritsched<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
<ENTRY><indexterm><primary>pthread_equal</primary></indexterm>pthread_equal<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
<ENTRY><indexterm><primary>pthread_mutexattr_setpshared</primary></indexterm>pthread_mutexattr_setpshared<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
<ENTRY><indexterm><primary>pthread_setcancelstate</primary></indexterm>pthread_setcancelstate<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
<ENTRY></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>pthread_attr_setschedparam</primary></indexterm>pthread_attr_setschedparam<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
<ENTRY><indexterm><primary>pthread_exit</primary></indexterm>pthread_exit<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
<ENTRY><indexterm><primary>pthread_mutexattr_settype</primary></indexterm>pthread_mutexattr_settype<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
<ENTRY><indexterm><primary>pthread_setcanceltype</primary></indexterm>pthread_setcanceltype<FOOTNOTEREF LINKEND="std-132-67"></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>
</SECT2>
</SECT1>
<SECT1 ID=libpthread-ddefs>
<TITLE>Data Definitions for libpthread</TITLE>
<PARA>
This section contains standard data definitions that describe system data. These definitions are organized into groups that correspond to system headers. This convention is used as a convenience for the reader, and does not imply the existence of these headers, or their content.</PARA>
<PARA>
ISO C serves as the LSB reference programming language, and data definitions are specified in ISO C format. The C language is used here as a convenient notation. Using a C language description of these data objects does not preclude their use by other programming languages.</PARA>
<SECT2>
<TITLE>pthread.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define PTHREAD_MUTEX_DEFAULT	1
#define PTHREAD_MUTEX_NORMAL	1
#define PTHREAD_MUTEX_TIMED_NP	1
#define PTHREAD_MUTEX_RECURSIVE	2
#define PTHREAD_RWLOCK_DEFAULT_NP	2
#define PTHREAD_MUTEX_ERRORCHECK	3
#define pthread_cleanup_pop(execute)	_pthread_cleanup_pop(&amp _buffer,(execute));}
#define __LOCK_INITIALIZER	{ 0, 0 }
#define PTHREAD_RWLOCK_INITIALIZER	{ __LOCK_INITIALIZER, 0, NULL, NULL, NULL,PTHREAD_RWLOCK_DEFAULT_NP, PTHREAD_PROCESS_PRIVATE }
#define PTHREAD_MUTEX_INITIALIZER	{0,0,0,PTHREAD_MUTEX_TIMED_NP,__LOCK_INITIALIZER}
#define pthread_cleanup_push(routine,arg)	{struct _pthread_cleanup_buffer _buffer;_pthread_cleanup_push(&amp _buffer,(routine),(arg));
#define PTHREAD_COND_INITIALIZER	{__LOCK_INITIALIZER,0}


struct _pthread_cleanup_buffer
{
  void (*__routine) (void *);
  void *__arg;
  int __canceltype;
  struct _pthread_cleanup_buffer *__prev;
}
 ;
typedef unsigned int pthread_key_t;
typedef int pthread_once_t;


typedef unsigned long pthread_t;
struct _pthread_fastlock
{
  long __status;
  int __spinlock;
}
 ;


typedef struct _pthread_descr_struct *_pthread_descr;


typedef struct
{
  int __m_reserved;
  int __m_count;
  _pthread_descr __m_owner;
  int __m_kind;
  struct _pthread_fastlock __m_lock;
}
pthread_mutex_t;
typedef struct
{
  int __mutexkind;
}
pthread_mutexattr_t;


typedef struct
{
  int __detachstate;
  int __schedpolicy;
  struct sched_param __schedparam;
  int __inheritsched;
  int __scope;
  size_t __guardsize;
  int __stackaddr_set;
  void *__stackaddr;
  unsigned long __stacksize;
}
pthread_attr_t;


typedef struct
{
  struct _pthread_fastlock lock;
  _pthread_descr wait_chain;
}
pthread_cond_t;
typedef struct
{
  int __dummy;
}
pthread_condattr_t;


typedef struct _pthread_rwlock_t
{
  struct _pthread_fastlock __rw_lock;
  int __rw_readers;
  _pthread_descr __rw_writer;
  _pthread_descr __rw_read_waiting;
  _pthread_descr __rw_write_waiting;
  int __rw_kind;
  int __rw_pshared;
}
pthread_rwlock_t;
typedef struct
{
  int __lockkind;
  int __pshared;
}
pthread_rwlockattr_t;



#define PTHREAD_CREATE_JOINABLE	0
#define PTHREAD_INHERIT_SCHED	0
#define PTHREAD_ONCE_INIT	0
#define PTHREAD_PROCESS_PRIVATE	0
#define PTHREAD_SCOPE_SYSTEM	0
#define PTHREAD_CREATE_DETACHED	1
#define PTHREAD_EXPLICIT_SCHED	1
#define PTHREAD_PROCESS_SHARED	1
#define PTHREAD_SCOPE_PROCESS	1



#define PTHREAD_CANCELED	((void*)-1)
#define PTHREAD_CANCEL_DEFERRED	0
#define PTHREAD_CANCEL_ENABLE	0
#define PTHREAD_CANCEL_ASYNCHRONOUS	1
#define PTHREAD_CANCEL_DISABLE	1
</SCREEN>
</SECT2>
<SECT2>
<TITLE>semaphore.h</TITLE>
<PARA>
</PARA>
<SCREEN>






typedef struct
{
  struct _pthread_fastlock __sem_lock;
  int __sem_value;
  _pthread_descr __sem_waiting;
}
sem_t;
#define SEM_FAILED	((sem_t*)0)



#define SEM_VALUE_MAX	((int)((~0u)>>1))
</SCREEN>
</SECT2>
</SECT1>
<SECT1 ID=libpthreadman>
<TITLE>Interfaces Definitions for libpthread</TITLE>
<PARA>
</PARA>
include(_pthread_cleanup_pop.sgml)
include(_pthread_cleanup_push.sgml)
</SECT1>
<!-- End of text generated from database -->
<!--    by $Header: /cvsroot/lsb/lsbspec/mklibspec,v 1.53 2003/06/03 20:38:14 anderson Exp 0 -->
