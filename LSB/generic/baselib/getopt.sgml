<REFENTRY ID="libutil-getopt-3"> <REFMETA>
<REFENTRYTITLE>getopt</REFENTRYTITLE>
<REFMISCINFO>Base Libraries</REFMISCINFO>
</REFMETA>
<REFNAMEDIV>
<REFNAME>getopt</REFNAME>
<REFPURPOSE>
parse command line options
</REFPURPOSE>
<INDEXTERM ID="ix-libutil-getopt-3"><PRIMARY>getopt</PRIMARY></INDEXTERM>
</REFNAMEDIV>
<REFSYNOPSISDIV>
<REFSYNOPSISDIVINFO>
<DATE>20 March 2001</DATE>
</REFSYNOPSISDIVINFO>
<FUNCSYNOPSIS>
<FUNCPROTOTYPE>
 <FUNCDEF>int 
  <FUNCTION>getopt</FUNCTION></FUNCDEF>
 <PARAMDEF>int 
  <PARAMETER><REPLACEABLE>argc</REPLACEABLE></PARAMETER></PARAMDEF>
 <PARAMDEF>char * const 
  <PARAMETER><REPLACEABLE>argv</REPLACEABLE>[]</PARAMETER></PARAMDEF>
 <PARAMDEF>const char 
  <PARAMETER><REPLACEABLE>*optstring</REPLACEABLE></PARAMETER></PARAMDEF>
</FUNCPROTOTYPE>
</FUNCSYNOPSIS>
<SYNOPSIS>
extern char <VARNAME>*optarg</VARNAME>;
extern int <VARNAME>optind</VARNAME>, <VARNAME>opterr</VARNAME>, <VARNAME>optopt</VARNAME>;
</SYNOPSIS>
</REFSYNOPSISDIV>
<REFSECT1>
<REFSECT1INFO>
<DATE>20 March 2001</DATE>
</REFSECT1INFO>
<TITLE>Description
</TITLE>
<PARA>
The <FUNCTION>getopt</FUNCTION> function shall parse command line arguments.
as described in <XREF LINKEND=STD.SUSv3>, with the following exceptions,
where LSB and POSIX specifications vary.
LSB systems shall
implement the modified behaviors described below.
</PARA>
<REFSECT2>
<TITLE>Argument Ordering</TITLE>
<PARA>
The <function>getopt()</function> function can process command line arguments
referenced by <parameter>argv</parameter> in one of three ways:
<VARIABLELIST>
<VARLISTENTRY>
<TERM>PERMUTE</TERM><LISTITEM><PARA>the order of arguments in
<parameter>argv</parameter> is altered so that all options (and
their arguments) are moved in front of all of the operands.
This is the default behavior.</PARA></LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>REQUIRE_ORDER</TERM><LISTITEM><PARA>The arguments in
<parameter>argv</parameter> are processed in exactly the order
given, and option processing stops when the first non-option argument
is reached, or when the element of argv is "--". This ordering
can be enforced either by setting the environment variable
<VARNAME>POSIXLY_CORRECT</VARNAME>, or by setting the first character
of <parameter>optstring</parameter> to '+'.
</PARA></LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>RETURN_IN_ORDER</TERM><LISTITEM><PARA>The order of arguments
is not altered, and all arguments are processed. Non-option arguments
(operands) are handled as if they were the argument to an option with
the value 1 ('\001'). This ordering is selected by setting the first
character of <parameter>optstring</parameter> to '-';
</PARA></LISTITEM>
</VARLISTENTRY>
</VARIABLELIST>
</PARA>
</REFSECT2>
<REFSECT2>
<TITLE>Option Characteristics</TITLE>
<PARA>
<EMPHASIS>LSB</EMPHASIS> specifies that:
<ITEMIZEDLIST MARK=BULLET>
<LISTITEM>
<PARA>
an element of <PARAMETER>argv</PARAMETER> that starts with 
"<TOKEN>-</TOKEN>" (and is not exactly "<TOKEN>-</TOKEN>" or 
"<TOKEN>--</TOKEN>") is an option element.
</PARA>
</LISTITEM>
<LISTITEM>
<PARA>
characters of an option element, aside from the initial 
"<TOKEN>-</TOKEN>", are option characters.
</PARA>
</LISTITEM>
</ITEMIZEDLIST>
</PARA>
<PARA>
POSIX specifies that:
<ITEMIZEDLIST MARK=BULLET>
<LISTITEM>
<PARA>
applications using <FUNCTION>getopt</FUNCTION> shall obey the following 
syntax guidelines:
<ITEMIZEDLIST MARK=BULLET>
<LISTITEM>
<PARA>
option name is a single alphanumeric character from the portable character set
</PARA>
</LISTITEM>
<LISTITEM>
<PARA>
option is preceded by the "<TOKEN>-</TOKEN>" delimiter character
</PARA>
</LISTITEM>
<LISTITEM>
<PARA>
options without option-arguments should be accepted when grouped behind 
one "<TOKEN>-</TOKEN>" delimiter
</PARA>
</LISTITEM>
<LISTITEM>
<PARA>
each option and option-argument is a separate argument
</PARA>
</LISTITEM>
<LISTITEM>
<PARA>
option-arguments are not optional
</PARA>
</LISTITEM>
<LISTITEM>
<PARA>
all options should precede operands on the command line
</PARA>
</LISTITEM>
<LISTITEM>
<PARA>
the argument "<TOKEN>--</TOKEN>" is accepted as a delimiter 
indicating the end of options and the consideration of subsequent 
arguments, if any, as operands
</PARA>
</LISTITEM>
</ITEMIZEDLIST>
</PARA>
</LISTITEM>
<LISTITEM>
<PARA>
historical implementations of <FUNCTION>getopt</FUNCTION> support 
other characters as options as an allowed extension, but applications 
that use extensions are not maximally portable.
</PARA>
</LISTITEM>
<LISTITEM>
<PARA>
support for multi-byte option characters is only possible when such 
characters can be represented as type <LITERAL>int</LITERAL>.
</PARA>
</LISTITEM>
<LISTITEM>
<PARA>
applications that call any utility with a first operand starting with 
"<TOKEN>-</TOKEN>" should usually specify "<TOKEN>--</TOKEN>" 
to mark the end of the options. Standard utilities that do not support 
this guideline indicate that fact in the OPTIONS section of the utility 
description.
</PARA>
</LISTITEM>
</ITEMIZEDLIST>
</PARA>
</REFSECT2>
<REFSECT2>
<TITLE>Extensions</TITLE>
<PARA>
<EMPHASIS>LSB</EMPHASIS> specifies that:
<ITEMIZEDLIST MARK=BULLET>
<LISTITEM>
<PARA>
if a character is followed by two colons, the option takes an optional 
arg; if there is text in the current <PARAMETER>argv</PARAMETER> element, 
it is returned in <PARAMETER>optarg</PARAMETER>, otherwise 
<PARAMETER>optarg</PARAMETER> is set to <LITERAL>0</LITERAL>.
</PARA>
</LISTITEM>
<LISTITEM>
<PARA>
if <PARAMETER>optstring</PARAMETER> contains <LITERAL>W</LITERAL> followed 
by a <TOKEN>;</TOKEN>, then <LITERAL>-W foo</LITERAL> is treated as the 
long option <LITERAL>--foo</LITERAL>. 
<NOTE><PARA>See <function>getopt_long()</function> for a description
of long options.</PARA></NOTE>
</PARA>
</LISTITEM>
</ITEMIZEDLIST>
</PARA>
<PARA>
<EMPHASIS>POSIX</EMPHASIS> specifies that:
<ITEMIZEDLIST MARK=BULLET>
<LISTITEM>
<PARA>
the <OPTION>-W</OPTION> option is reserved for implementation extensions.
</PARA>
</LISTITEM>
</ITEMIZEDLIST>
</PARA>
</REFSECT2>
<REFSECT2>
<TITLE>Return Values</TITLE>
<PARA>
<EMPHASIS>LSB</EMPHASIS> specifies the following 
<FUNCTION>getopt</FUNCTION> return values:
<ITEMIZEDLIST MARK=BULLET>
<LISTITEM>
<PARA>
the next option character is returned, if found successfully.
</PARA>
</LISTITEM>
<LISTITEM>
<PARA>
"<RETURNVALUE>:</RETURNVALUE>" is returned if a parameter is 
missing for one of the options.
</PARA>
</LISTITEM>
<LISTITEM>
<PARA>
"<RETURNVALUE>?</RETURNVALUE>" is returned if an unknown option 
character is encountered.
</PARA>
</LISTITEM>
<LISTITEM>
<PARA>
<RETURNVALUE>1</RETURNVALUE> is returned
if <CONSTANT>RETURN_IN_ORDER</CONSTANT> argument ordering is in effect,
and the next argument is an operand, not an option. The argument is
available in <varname>optarg</varname>.
</PARA>
</LISTITEM>
<LISTITEM>
<PARA>
<RETURNVALUE>-1</RETURNVALUE> is returned for the end of the option list.
</PARA>
</LISTITEM>
</ITEMIZEDLIST>
</PARA>
<PARA>
<EMPHASIS>POSIX</EMPHASIS> specifies the following 
<FUNCTION>getopt</FUNCTION> return values:
<ITEMIZEDLIST MARK=BULLET>
<LISTITEM>
<PARA>
the next option character is returned, if found successfully.
</PARA>
</LISTITEM>
<LISTITEM>
<PARA>
"<RETURNVALUE>:</RETURNVALUE>" is returned if a parameter is missing for 
one of the options and the first character of <VARNAME>optstring</VARNAME> is 
"<TOKEN>:</TOKEN>".
</PARA>
</LISTITEM>
<LISTITEM>
<PARA>
"<RETURNVALUE>?</RETURNVALUE>" is returned if an unknown option 
character not in <VARNAME>optstring</VARNAME> is encountered, or if 
<FUNCTION>getopt</FUNCTION> detects a missing argument and the first 
character of <VARNAME>optstring</VARNAME> is not "<TOKEN>:</TOKEN>".
</PARA>
</LISTITEM>
<LISTITEM>
<PARA>
<RETURNVALUE>-1</RETURNVALUE> is returned for the end of the option list.
</PARA>
</LISTITEM>
</ITEMIZEDLIST>
</PARA>
</REFSECT2>
<REFSECT2>
<TITLE>Environment Variables</TITLE>
<PARA>
<EMPHASIS>LSB</EMPHASIS> specifies that:
<ITEMIZEDLIST MARK=BULLET>
<LISTITEM>
<PARA>
if the variable <VARNAME>POSIXLY_CORRECT</VARNAME> is set, option 
processing stops as soon as a non-option argument is encountered.
</PARA>
</LISTITEM>
<LISTITEM>
<PARA>
if <VARNAME>POSIXLY_CORRECT</VARNAME> is set, <EMPHASIS>LSB</EMPHASIS> 
<FUNCTION>getopt</FUNCTION> conforms to <EMPHASIS>
<XREF LINKEND="STD.SUSv3"></EMPHASIS>.
</PARA>
</LISTITEM>
<LISTITEM>
<PARA>
the variable <VARNAME>_<replaceable>[PID]</replaceable>GNU_nonoption_argv_flags_</VARNAME>
(where <replaceable>[PID]</replaceable> is the process ID for the 
current process), contains a space separated list of arguments that should
not be treated as arguments even though they appear to be so.
<NOTE><TITLE>Rationale</TITLE><PARA>
This was 
used by bash 2.0 to communicate to <EMPHASIS>GNU</EMPHASIS> libc which 
arguments resulted from wildcard expansion and so should not be 
considered as options. This behavior was removed in bash version 
2.01, but the support remains in <EMPHASIS>GNU</EMPHASIS> libc.
</PARA></NOTE>
</PARA>
</LISTITEM>
</ITEMIZEDLIST>
</PARA>
</REFSECT2>
</REFSECT1>
</REFENTRY>
