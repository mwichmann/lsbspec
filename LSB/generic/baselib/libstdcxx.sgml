<!-- Start of generated text - do not edit! -->
<!-- generated from the LSB specification database by mklibspec -->
<SECT1 ID=libstdcxx>
<TITLE>Interfaces for libstdcxx</TITLE>
<PARA>
<XREF LINKEND="lib-libstdcxx-def"> defines the library name and shared object name
for the libstdcxx library
</PARA>
<TABLE id="lib-libstdcxx-def">
<TITLE>libstdcxx Definition</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Library:</ENTRY>
<ENTRY>libstdcxx</ENTRY>
</ROW>
<ROW>
<ENTRY>SONAME:</ENTRY>
<ENTRY>libstdc++.so.6</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
Unless stated otherwise, all symbols are in the <VARNAME>std::</VARNAME> namespace.
</PARA>
<PARA>
The behavior of the interfaces in this library is specified by the following specifications:<SIMPLELIST COLUMNS=1>
<MEMBER ID='REFSTD.libstdcxx.1'>
[CXXABI] <XREF LINKEND="std.CXXABI">
</MEMBER>
<MEMBER ID='REFSTD.libstdcxx.2'>
[ISOCXX] <XREF LINKEND="std.ISOCXX">
</MEMBER>
<MEMBER ID='REFSTD.libstdcxx.3'>
[LSB] <XREF LINKEND="std.LSB">
</MEMBER>
</SIMPLELIST>
</PARA>
<!-- debug: database interface name C++ Runtime Support -->
<SECT2>
<!--libgroup-->
<TITLE>C++ Runtime Support</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for C++ Runtime Support</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for C++ Runtime Support specified in <XREF linkend="tbl-libstdcxx-c-r-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-c-r-ints">
<TITLE>libstdcxx - C++ Runtime Support Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__gnu_cxx::__atomic_add(int volatile*, int)</primary></indexterm>__gnu_cxx::__atomic_add(int volatile*, int)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__gnu_cxx::__exchange_and_add(int volatile*, int)</primary></indexterm>__gnu_cxx::__exchange_and_add(int volatile*, int)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__gnu_cxx::__verbose_terminate_handler()</primary></indexterm>__gnu_cxx::__verbose_terminate_handler()(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>unexpected()</primary></indexterm>unexpected()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>set_terminate(void (*)())</primary></indexterm>set_terminate(void (*)())(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>set_unexpected(void (*)())</primary></indexterm>set_unexpected(void (*)())(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>set_new_handler(void (*)())</primary></indexterm>set_new_handler(void (*)())(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__throw_bad_cast()</primary></indexterm>__throw_bad_cast()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__throw_bad_alloc()</primary></indexterm>__throw_bad_alloc()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__throw_bad_typeid()</primary></indexterm>__throw_bad_typeid()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>uncaught_exception()</primary></indexterm>uncaught_exception()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__throw_ios_failure(char const*)</primary></indexterm>__throw_ios_failure(char const*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__throw_logic_error(char const*)</primary></indexterm>__throw_logic_error(char const*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__throw_range_error(char const*)</primary></indexterm>__throw_range_error(char const*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__throw_domain_error(char const*)</primary></indexterm>__throw_domain_error(char const*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__throw_length_error(char const*)</primary></indexterm>__throw_length_error(char const*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__throw_out_of_range(char const*)</primary></indexterm>__throw_out_of_range(char const*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__throw_bad_exception()</primary></indexterm>__throw_bad_exception()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__throw_runtime_error(char const*)</primary></indexterm>__throw_runtime_error(char const*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__throw_overflow_error(char const*)</primary></indexterm>__throw_overflow_error(char const*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__throw_underflow_error(char const*)</primary></indexterm>__throw_underflow_error(char const*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__throw_invalid_argument(char const*)</primary></indexterm>__throw_invalid_argument(char const*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>terminate()</primary></indexterm>terminate()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>operator delete&lsqb;](void*)</primary></indexterm>operator delete&lsqb;](void*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>operator delete&lsqb;](void*, nothrow_t const&)</primary></indexterm>operator delete&lsqb;](void*, nothrow_t const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>operator delete(void*)</primary></indexterm>operator delete(void*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>operator delete(void*, nothrow_t const&)</primary></indexterm>operator delete(void*, nothrow_t const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_allocate_exception</primary></indexterm>__cxa_allocate_exception(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_bad_cast</primary></indexterm>__cxa_bad_cast(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_bad_typeid</primary></indexterm>__cxa_bad_typeid(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_begin_catch</primary></indexterm>__cxa_begin_catch(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_call_unexpected</primary></indexterm>__cxa_call_unexpected(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_current_exception_type</primary></indexterm>__cxa_current_exception_type(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_demangle</primary></indexterm>__cxa_demangle(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_end_catch</primary></indexterm>__cxa_end_catch(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_free_exception</primary></indexterm>__cxa_free_exception(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_get_globals</primary></indexterm>__cxa_get_globals(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_get_globals_fast</primary></indexterm>__cxa_get_globals_fast(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_guard_abort</primary></indexterm>__cxa_guard_abort(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_guard_acquire</primary></indexterm>__cxa_guard_acquire(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_guard_release</primary></indexterm>__cxa_guard_release(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_rethrow</primary></indexterm>__cxa_rethrow(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_throw</primary></indexterm>__cxa_throw(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_vec_cctor</primary></indexterm>__cxa_vec_cctor(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_vec_cleanup</primary></indexterm>__cxa_vec_cleanup(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_vec_ctor</primary></indexterm>__cxa_vec_ctor(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_vec_delete</primary></indexterm>__cxa_vec_delete(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_vec_delete2</primary></indexterm>__cxa_vec_delete2(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_vec_delete3</primary></indexterm>__cxa_vec_delete3(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_vec_dtor</primary></indexterm>__cxa_vec_dtor(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_vec_new</primary></indexterm>__cxa_vec_new(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_vec_new2</primary></indexterm>__cxa_vec_new2(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_vec_new3</primary></indexterm>__cxa_vec_new3(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__dynamic_cast</primary></indexterm>__dynamic_cast(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__gxx_personality_v0</primary></indexterm>__gxx_personality_v0(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for C++ Runtime Support specified in <XREF linkend="tbl-libstdcxx-c-r-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-c-r-data">
<TITLE>libstdcxx - C++ Runtime Support Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>cin</primary></indexterm>cin(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>cerr</primary></indexterm>cerr(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>clog</primary></indexterm>clog(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>cout</primary></indexterm>cout(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>wcin</primary></indexterm>wcin(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>wcerr</primary></indexterm>wcerr(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>wclog</primary></indexterm>wclog(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>wcout</primary></indexterm>wcout(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>nothrow</primary></indexterm>nothrow(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name C++ type descriptors for built-in types -->
<SECT2>
<!--libgroup-->
<TITLE>C++ type descriptors for built-in types</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for C++ type descriptors for built-in types</TITLE>
<PARA>
No external methods are defined for libstdcxx - C++ type descriptors for built-in types
in this part of the specification. See also the relevant architecture specific part of this specification.
</PARA>
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for C++ type descriptors for built-in types specified in <XREF linkend="tbl-libstdcxx-c-t-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-c-t-data">
<TITLE>libstdcxx - C++ type descriptors for built-in types Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for signed char const*</primary></indexterm>typeinfo for signed char const*(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for bool const*</primary></indexterm>typeinfo for bool const*(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for char const*</primary></indexterm>typeinfo for char const*(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for double const*</primary></indexterm>typeinfo for double const*(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for long double const*</primary></indexterm>typeinfo for long double const*(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for float const*</primary></indexterm>typeinfo for float const*(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for unsigned char const*</primary></indexterm>typeinfo for unsigned char const*(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for int const*</primary></indexterm>typeinfo for int const*(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for unsigned int const*</primary></indexterm>typeinfo for unsigned int const*(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for long const*</primary></indexterm>typeinfo for long const*(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for unsigned long const*</primary></indexterm>typeinfo for unsigned long const*(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for short const*</primary></indexterm>typeinfo for short const*(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for unsigned short const*</primary></indexterm>typeinfo for unsigned short const*(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for void const*</primary></indexterm>typeinfo for void const*(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for wchar_t const*</primary></indexterm>typeinfo for wchar_t const*(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for long long const*</primary></indexterm>typeinfo for long long const*(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for unsigned long long const*</primary></indexterm>typeinfo for unsigned long long const*(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for signed char*</primary></indexterm>typeinfo for signed char*(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for bool*</primary></indexterm>typeinfo for bool*(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for char*</primary></indexterm>typeinfo for char*(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for double*</primary></indexterm>typeinfo for double*(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for long double*</primary></indexterm>typeinfo for long double*(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for float*</primary></indexterm>typeinfo for float*(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for unsigned char*</primary></indexterm>typeinfo for unsigned char*(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for int*</primary></indexterm>typeinfo for int*(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for unsigned int*</primary></indexterm>typeinfo for unsigned int*(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for long*</primary></indexterm>typeinfo for long*(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for unsigned long*</primary></indexterm>typeinfo for unsigned long*(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for short*</primary></indexterm>typeinfo for short*(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for unsigned short*</primary></indexterm>typeinfo for unsigned short*(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for void*</primary></indexterm>typeinfo for void*(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for wchar_t*</primary></indexterm>typeinfo for wchar_t*(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for long long*</primary></indexterm>typeinfo for long long*(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for unsigned long long*</primary></indexterm>typeinfo for unsigned long long*(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for signed char</primary></indexterm>typeinfo for signed char(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for bool</primary></indexterm>typeinfo for bool(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for char</primary></indexterm>typeinfo for char(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for double</primary></indexterm>typeinfo for double(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for long double</primary></indexterm>typeinfo for long double(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for float</primary></indexterm>typeinfo for float(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for unsigned char</primary></indexterm>typeinfo for unsigned char(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for int</primary></indexterm>typeinfo for int(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for unsigned int</primary></indexterm>typeinfo for unsigned int(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for long</primary></indexterm>typeinfo for long(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for unsigned long</primary></indexterm>typeinfo for unsigned long(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for short</primary></indexterm>typeinfo for short(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for unsigned short</primary></indexterm>typeinfo for unsigned short(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for void</primary></indexterm>typeinfo for void(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for wchar_t</primary></indexterm>typeinfo for wchar_t(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for long long</primary></indexterm>typeinfo for long long(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for unsigned long long</primary></indexterm>typeinfo for unsigned long long(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for signed char const*</primary></indexterm>typeinfo name for signed char const*(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for bool const*</primary></indexterm>typeinfo name for bool const*(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for char const*</primary></indexterm>typeinfo name for char const*(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for double const*</primary></indexterm>typeinfo name for double const*(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for long double const*</primary></indexterm>typeinfo name for long double const*(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for float const*</primary></indexterm>typeinfo name for float const*(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for unsigned char const*</primary></indexterm>typeinfo name for unsigned char const*(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for int const*</primary></indexterm>typeinfo name for int const*(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for unsigned int const*</primary></indexterm>typeinfo name for unsigned int const*(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for long const*</primary></indexterm>typeinfo name for long const*(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for unsigned long const*</primary></indexterm>typeinfo name for unsigned long const*(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for short const*</primary></indexterm>typeinfo name for short const*(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for unsigned short const*</primary></indexterm>typeinfo name for unsigned short const*(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for void const*</primary></indexterm>typeinfo name for void const*(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for wchar_t const*</primary></indexterm>typeinfo name for wchar_t const*(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for long long const*</primary></indexterm>typeinfo name for long long const*(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for unsigned long long const*</primary></indexterm>typeinfo name for unsigned long long const*(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for signed char*</primary></indexterm>typeinfo name for signed char*(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for bool*</primary></indexterm>typeinfo name for bool*(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for char*</primary></indexterm>typeinfo name for char*(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for double*</primary></indexterm>typeinfo name for double*(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for long double*</primary></indexterm>typeinfo name for long double*(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for float*</primary></indexterm>typeinfo name for float*(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for unsigned char*</primary></indexterm>typeinfo name for unsigned char*(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for int*</primary></indexterm>typeinfo name for int*(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for unsigned int*</primary></indexterm>typeinfo name for unsigned int*(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for long*</primary></indexterm>typeinfo name for long*(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for unsigned long*</primary></indexterm>typeinfo name for unsigned long*(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for short*</primary></indexterm>typeinfo name for short*(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for unsigned short*</primary></indexterm>typeinfo name for unsigned short*(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for void*</primary></indexterm>typeinfo name for void*(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for wchar_t*</primary></indexterm>typeinfo name for wchar_t*(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for long long*</primary></indexterm>typeinfo name for long long*(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for unsigned long long*</primary></indexterm>typeinfo name for unsigned long long*(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for signed char</primary></indexterm>typeinfo name for signed char(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for bool</primary></indexterm>typeinfo name for bool(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for char</primary></indexterm>typeinfo name for char(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for double</primary></indexterm>typeinfo name for double(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for long double</primary></indexterm>typeinfo name for long double(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for float</primary></indexterm>typeinfo name for float(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for unsigned char</primary></indexterm>typeinfo name for unsigned char(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for int</primary></indexterm>typeinfo name for int(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for unsigned int</primary></indexterm>typeinfo name for unsigned int(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for long</primary></indexterm>typeinfo name for long(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for unsigned long</primary></indexterm>typeinfo name for unsigned long(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for short</primary></indexterm>typeinfo name for short(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for unsigned short</primary></indexterm>typeinfo name for unsigned short(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for void</primary></indexterm>typeinfo name for void(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for wchar_t</primary></indexterm>typeinfo name for wchar_t(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for long long</primary></indexterm>typeinfo name for long long(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for unsigned long long</primary></indexterm>typeinfo name for unsigned long long(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name C++ _Rb_tree -->
<SECT2>
<!--libgroup-->
<TITLE>C++ _Rb_tree</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for C++ _Rb_tree</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for C++ _Rb_tree specified in <XREF linkend="tbl-libstdcxx-c-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-c-ints">
<TITLE>libstdcxx - C++ _Rb_tree Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>_Rb_tree_decrement(_Rb_tree_node_base const*)</primary></indexterm>_Rb_tree_decrement(_Rb_tree_node_base const*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.3">&lsqb;LSB]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>_Rb_tree_decrement(_Rb_tree_node_base*)</primary></indexterm>_Rb_tree_decrement(_Rb_tree_node_base*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.3">&lsqb;LSB]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>_Rb_tree_increment(_Rb_tree_node_base const*)</primary></indexterm>_Rb_tree_increment(_Rb_tree_node_base const*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.3">&lsqb;LSB]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>_Rb_tree_increment(_Rb_tree_node_base*)</primary></indexterm>_Rb_tree_increment(_Rb_tree_node_base*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.3">&lsqb;LSB]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>_Rb_tree_black_count(_Rb_tree_node_base const*, _Rb_tree_node_base const*)</primary></indexterm>_Rb_tree_black_count(_Rb_tree_node_base const*, _Rb_tree_node_base const*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.3">&lsqb;LSB]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>_Rb_tree_rotate_left(_Rb_tree_node_base*, _Rb_tree_node_base*&)</primary></indexterm>_Rb_tree_rotate_left(_Rb_tree_node_base*, _Rb_tree_node_base*&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.3">&lsqb;LSB]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>_Rb_tree_rotate_right(_Rb_tree_node_base*, _Rb_tree_node_base*&)</primary></indexterm>_Rb_tree_rotate_right(_Rb_tree_node_base*, _Rb_tree_node_base*&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.3">&lsqb;LSB]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>_Rb_tree_rebalance_for_erase(_Rb_tree_node_base*, _Rb_tree_node_base&)</primary></indexterm>_Rb_tree_rebalance_for_erase(_Rb_tree_node_base*, _Rb_tree_node_base&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.3">&lsqb;LSB]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>_Rb_tree_insert_and_rebalance(bool, _Rb_tree_node_base*, _Rb_tree_node_base*, _Rb_tree_node_base&)</primary></indexterm>_Rb_tree_insert_and_rebalance(bool, _Rb_tree_node_base*, _Rb_tree_node_base*, _Rb_tree_node_base&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.3">&lsqb;LSB]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::type_info -->
<SECT2>
<!--libgroup-->
<TITLE>Class type_info</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for type_info</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::type_info class
is described by <XREF LINKEND="cls-24325-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24325-0">
<TITLE>Primary vtable for type_info</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for type_info</primary></indexterm>typeinfo for type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::~type_info()</primary></indexterm>type_info::~type_info()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::~type_info()</primary></indexterm>type_info::~type_info()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__is_pointer_p() const</primary></indexterm>type_info::__is_pointer_p() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__is_function_p() const</primary></indexterm>type_info::__is_function_p() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__do_catch(type_info const*, void**, unsigned int) const</primary></indexterm>type_info::__do_catch(type_info const*, void**, unsigned int) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const</primary></indexterm>type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::type_info  class
is described by <XREF LINKEND="rtti-24030">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24030">
<TITLE>typeinfo for type_info</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__class_type_info</primary></indexterm>vtable for __cxxabiv1::__class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for type_info</primary></indexterm>typeinfo name for type_info</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class type_info</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::type_info specified in <XREF linkend="tbl-libstdcxx-class-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-class-ints">
<TITLE>libstdcxx - Class type_info Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__do_catch(type_info const*, void**, unsigned int) const</primary></indexterm>type_info::__do_catch(type_info const*, void**, unsigned int) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const</primary></indexterm>type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__is_pointer_p() const</primary></indexterm>type_info::__is_pointer_p() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__is_function_p() const</primary></indexterm>type_info::__is_function_p() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>type_info::~type_info()</primary></indexterm>type_info::~type_info()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>type_info::~type_info()</primary></indexterm>type_info::~type_info()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>type_info::~type_info()</primary></indexterm>type_info::~type_info()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::type_info specified in <XREF linkend="tbl-libstdcxx-class-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-class-data">
<TITLE>libstdcxx - Class type_info Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for type_info</primary></indexterm>typeinfo for type_info(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for type_info</primary></indexterm>typeinfo name for type_info(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for type_info</primary></indexterm>vtable for type_info(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class __cxxabiv1::__enum_type_info -->
<SECT2>
<!--libgroup-->
<TITLE>Class __cxxabiv1::__enum_type_info</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for __cxxabiv1::__enum_type_info</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the __cxxabiv1::__enum_type_info class
is described by <XREF LINKEND="cls-24328-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24328-0">
<TITLE>Primary vtable for __cxxabiv1::__enum_type_info</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for __cxxabiv1::__enum_type_info</primary></indexterm>typeinfo for __cxxabiv1::__enum_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__enum_type_info::~__enum_type_info()</primary></indexterm>__cxxabiv1::__enum_type_info::~__enum_type_info()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__enum_type_info::~__enum_type_info()</primary></indexterm>__cxxabiv1::__enum_type_info::~__enum_type_info()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__is_pointer_p() const</primary></indexterm>type_info::__is_pointer_p() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__is_function_p() const</primary></indexterm>type_info::__is_function_p() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__do_catch(type_info const*, void**, unsigned int) const</primary></indexterm>type_info::__do_catch(type_info const*, void**, unsigned int) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const</primary></indexterm>type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the __cxxabiv1::__enum_type_info  class
is described by <XREF LINKEND="rtti-24099">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24099">
<TITLE>typeinfo for __cxxabiv1::__enum_type_info</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for __cxxabiv1::__enum_type_info</primary></indexterm>typeinfo name for __cxxabiv1::__enum_type_info</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class __cxxabiv1::__enum_type_info</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class __cxxabiv1::__enum_type_info specified in <XREF linkend="tbl-libstdcxx-clast-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clast-ints">
<TITLE>libstdcxx - Class __cxxabiv1::__enum_type_info Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__enum_type_info::~__enum_type_info()</primary></indexterm>__cxxabiv1::__enum_type_info::~__enum_type_info()(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__enum_type_info::~__enum_type_info()</primary></indexterm>__cxxabiv1::__enum_type_info::~__enum_type_info()(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__enum_type_info::~__enum_type_info()</primary></indexterm>__cxxabiv1::__enum_type_info::~__enum_type_info()(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class __cxxabiv1::__enum_type_info specified in <XREF linkend="tbl-libstdcxx-clast-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clast-data">
<TITLE>libstdcxx - Class __cxxabiv1::__enum_type_info Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for __cxxabiv1::__enum_type_info</primary></indexterm>typeinfo for __cxxabiv1::__enum_type_info(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for __cxxabiv1::__enum_type_info</primary></indexterm>typeinfo name for __cxxabiv1::__enum_type_info(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__enum_type_info</primary></indexterm>vtable for __cxxabiv1::__enum_type_info(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class __cxxabiv1::__array_type_info -->
<SECT2>
<!--libgroup-->
<TITLE>Class __cxxabiv1::__array_type_info</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for __cxxabiv1::__array_type_info</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the __cxxabiv1::__array_type_info class
is described by <XREF LINKEND="cls-24330-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24330-0">
<TITLE>Primary vtable for __cxxabiv1::__array_type_info</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for __cxxabiv1::__array_type_info</primary></indexterm>typeinfo for __cxxabiv1::__array_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__array_type_info::~__array_type_info()</primary></indexterm>__cxxabiv1::__array_type_info::~__array_type_info()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__array_type_info::~__array_type_info()</primary></indexterm>__cxxabiv1::__array_type_info::~__array_type_info()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__is_pointer_p() const</primary></indexterm>type_info::__is_pointer_p() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__is_function_p() const</primary></indexterm>type_info::__is_function_p() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__do_catch(type_info const*, void**, unsigned int) const</primary></indexterm>type_info::__do_catch(type_info const*, void**, unsigned int) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const</primary></indexterm>type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the __cxxabiv1::__array_type_info  class
is described by <XREF LINKEND="rtti-24101">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24101">
<TITLE>typeinfo for __cxxabiv1::__array_type_info</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for __cxxabiv1::__array_type_info</primary></indexterm>typeinfo name for __cxxabiv1::__array_type_info</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class __cxxabiv1::__array_type_info</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class __cxxabiv1::__array_type_info specified in <XREF linkend="tbl-libstdcxx-clasu-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clasu-ints">
<TITLE>libstdcxx - Class __cxxabiv1::__array_type_info Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__array_type_info::~__array_type_info()</primary></indexterm>__cxxabiv1::__array_type_info::~__array_type_info()(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__array_type_info::~__array_type_info()</primary></indexterm>__cxxabiv1::__array_type_info::~__array_type_info()(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__array_type_info::~__array_type_info()</primary></indexterm>__cxxabiv1::__array_type_info::~__array_type_info()(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class __cxxabiv1::__array_type_info specified in <XREF linkend="tbl-libstdcxx-clasu-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clasu-data">
<TITLE>libstdcxx - Class __cxxabiv1::__array_type_info Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for __cxxabiv1::__array_type_info</primary></indexterm>typeinfo for __cxxabiv1::__array_type_info(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for __cxxabiv1::__array_type_info</primary></indexterm>typeinfo name for __cxxabiv1::__array_type_info(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__array_type_info</primary></indexterm>vtable for __cxxabiv1::__array_type_info(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class __cxxabiv1::__class_type_info -->
<SECT2>
<!--libgroup-->
<TITLE>Class __cxxabiv1::__class_type_info</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for __cxxabiv1::__class_type_info</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the __cxxabiv1::__class_type_info class
is described by <XREF LINKEND="cls-23981-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-23981-0">
<TITLE>Primary vtable for __cxxabiv1::__class_type_info</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for __cxxabiv1::__class_type_info</primary></indexterm>typeinfo for __cxxabiv1::__class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__class_type_info::~__class_type_info()</primary></indexterm>__cxxabiv1::__class_type_info::~__class_type_info()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__class_type_info::~__class_type_info()</primary></indexterm>__cxxabiv1::__class_type_info::~__class_type_info()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__is_pointer_p() const</primary></indexterm>type_info::__is_pointer_p() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__is_function_p() const</primary></indexterm>type_info::__is_function_p() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__class_type_info::__do_catch(type_info const*, void**, unsigned int) const</primary></indexterm>__cxxabiv1::__class_type_info::__do_catch(type_info const*, void**, unsigned int) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const</primary></indexterm>__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const</primary></indexterm>__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the __cxxabiv1::__class_type_info  class
is described by <XREF LINKEND="rtti-24031">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24031">
<TITLE>typeinfo for __cxxabiv1::__class_type_info</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for __cxxabiv1::__class_type_info</primary></indexterm>typeinfo name for __cxxabiv1::__class_type_info</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class __cxxabiv1::__class_type_info</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class __cxxabiv1::__class_type_info specified in <XREF linkend="tbl-libstdcxx-clasv-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clasv-ints">
<TITLE>libstdcxx - Class __cxxabiv1::__class_type_info Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__class_type_info::~__class_type_info()</primary></indexterm>__cxxabiv1::__class_type_info::~__class_type_info()(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__class_type_info::~__class_type_info()</primary></indexterm>__cxxabiv1::__class_type_info::~__class_type_info()(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__class_type_info::~__class_type_info()</primary></indexterm>__cxxabiv1::__class_type_info::~__class_type_info()(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__class_type_info::__do_catch(type_info const*, void**, unsigned int) const</primary></indexterm>__cxxabiv1::__class_type_info::__do_catch(type_info const*, void**, unsigned int) const(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const</primary></indexterm>__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const</primary></indexterm>__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class __cxxabiv1::__class_type_info specified in <XREF linkend="tbl-libstdcxx-clasv-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clasv-data">
<TITLE>libstdcxx - Class __cxxabiv1::__class_type_info Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for __cxxabiv1::__class_type_info</primary></indexterm>typeinfo for __cxxabiv1::__class_type_info(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for __cxxabiv1::__class_type_info</primary></indexterm>typeinfo name for __cxxabiv1::__class_type_info(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__class_type_info</primary></indexterm>vtable for __cxxabiv1::__class_type_info(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class __cxxabiv1::__pbase_type_info -->
<SECT2>
<!--libgroup-->
<TITLE>Class __cxxabiv1::__pbase_type_info</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for __cxxabiv1::__pbase_type_info</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the __cxxabiv1::__pbase_type_info class
is described by <XREF LINKEND="cls-24327-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24327-0">
<TITLE>Primary vtable for __cxxabiv1::__pbase_type_info</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for __cxxabiv1::__pbase_type_info</primary></indexterm>typeinfo for __cxxabiv1::__pbase_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__pbase_type_info::~__pbase_type_info()</primary></indexterm>__cxxabiv1::__pbase_type_info::~__pbase_type_info()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__pbase_type_info::~__pbase_type_info()</primary></indexterm>__cxxabiv1::__pbase_type_info::~__pbase_type_info()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__is_pointer_p() const</primary></indexterm>type_info::__is_pointer_p() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__is_function_p() const</primary></indexterm>type_info::__is_function_p() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__pbase_type_info::__do_catch(type_info const*, void**, unsigned int) const</primary></indexterm>__cxxabiv1::__pbase_type_info::__do_catch(type_info const*, void**, unsigned int) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const</primary></indexterm>type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__pbase_type_info::__pointer_catch(__cxxabiv1::__pbase_type_info const*, void**, unsigned int) const</primary></indexterm>__cxxabiv1::__pbase_type_info::__pointer_catch(__cxxabiv1::__pbase_type_info const*, void**, unsigned int) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the __cxxabiv1::__pbase_type_info  class
is described by <XREF LINKEND="rtti-24032">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24032">
<TITLE>typeinfo for __cxxabiv1::__pbase_type_info</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for __cxxabiv1::__pbase_type_info</primary></indexterm>typeinfo name for __cxxabiv1::__pbase_type_info</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class __cxxabiv1::__pbase_type_info</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class __cxxabiv1::__pbase_type_info specified in <XREF linkend="tbl-libstdcxx-clasw-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clasw-ints">
<TITLE>libstdcxx - Class __cxxabiv1::__pbase_type_info Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__pbase_type_info::~__pbase_type_info()</primary></indexterm>__cxxabiv1::__pbase_type_info::~__pbase_type_info()(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__pbase_type_info::~__pbase_type_info()</primary></indexterm>__cxxabiv1::__pbase_type_info::~__pbase_type_info()(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__pbase_type_info::~__pbase_type_info()</primary></indexterm>__cxxabiv1::__pbase_type_info::~__pbase_type_info()(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__pbase_type_info::__do_catch(type_info const*, void**, unsigned int) const</primary></indexterm>__cxxabiv1::__pbase_type_info::__do_catch(type_info const*, void**, unsigned int) const(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__pbase_type_info::__pointer_catch(__cxxabiv1::__pbase_type_info const*, void**, unsigned int) const</primary></indexterm>__cxxabiv1::__pbase_type_info::__pointer_catch(__cxxabiv1::__pbase_type_info const*, void**, unsigned int) const(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class __cxxabiv1::__pbase_type_info specified in <XREF linkend="tbl-libstdcxx-clasw-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clasw-data">
<TITLE>libstdcxx - Class __cxxabiv1::__pbase_type_info Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for __cxxabiv1::__pbase_type_info</primary></indexterm>typeinfo for __cxxabiv1::__pbase_type_info(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for __cxxabiv1::__pbase_type_info</primary></indexterm>typeinfo name for __cxxabiv1::__pbase_type_info(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__pbase_type_info</primary></indexterm>vtable for __cxxabiv1::__pbase_type_info(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class __cxxabiv1::__pointer_type_info -->
<SECT2>
<!--libgroup-->
<TITLE>Class __cxxabiv1::__pointer_type_info</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for __cxxabiv1::__pointer_type_info</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the __cxxabiv1::__pointer_type_info class
is described by <XREF LINKEND="cls-23983-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-23983-0">
<TITLE>Primary vtable for __cxxabiv1::__pointer_type_info</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for __cxxabiv1::__pointer_type_info</primary></indexterm>typeinfo for __cxxabiv1::__pointer_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__pointer_type_info::~__pointer_type_info()</primary></indexterm>__cxxabiv1::__pointer_type_info::~__pointer_type_info()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__pointer_type_info::~__pointer_type_info()</primary></indexterm>__cxxabiv1::__pointer_type_info::~__pointer_type_info()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__pointer_type_info::__is_pointer_p() const</primary></indexterm>__cxxabiv1::__pointer_type_info::__is_pointer_p() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__is_function_p() const</primary></indexterm>type_info::__is_function_p() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__pbase_type_info::__do_catch(type_info const*, void**, unsigned int) const</primary></indexterm>__cxxabiv1::__pbase_type_info::__do_catch(type_info const*, void**, unsigned int) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const</primary></indexterm>type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__pointer_type_info::__pointer_catch(__cxxabiv1::__pbase_type_info const*, void**, unsigned int) const</primary></indexterm>__cxxabiv1::__pointer_type_info::__pointer_catch(__cxxabiv1::__pbase_type_info const*, void**, unsigned int) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the __cxxabiv1::__pointer_type_info  class
is described by <XREF LINKEND="rtti-24098">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24098">
<TITLE>typeinfo for __cxxabiv1::__pointer_type_info</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for __cxxabiv1::__pointer_type_info</primary></indexterm>typeinfo name for __cxxabiv1::__pointer_type_info</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class __cxxabiv1::__pointer_type_info</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class __cxxabiv1::__pointer_type_info specified in <XREF linkend="tbl-libstdcxx-clasx-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clasx-ints">
<TITLE>libstdcxx - Class __cxxabiv1::__pointer_type_info Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__pointer_type_info::~__pointer_type_info()</primary></indexterm>__cxxabiv1::__pointer_type_info::~__pointer_type_info()(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__pointer_type_info::~__pointer_type_info()</primary></indexterm>__cxxabiv1::__pointer_type_info::~__pointer_type_info()(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__pointer_type_info::~__pointer_type_info()</primary></indexterm>__cxxabiv1::__pointer_type_info::~__pointer_type_info()(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__pointer_type_info::__is_pointer_p() const</primary></indexterm>__cxxabiv1::__pointer_type_info::__is_pointer_p() const(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__pointer_type_info::__pointer_catch(__cxxabiv1::__pbase_type_info const*, void**, unsigned int) const</primary></indexterm>__cxxabiv1::__pointer_type_info::__pointer_catch(__cxxabiv1::__pbase_type_info const*, void**, unsigned int) const(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class __cxxabiv1::__pointer_type_info specified in <XREF linkend="tbl-libstdcxx-clasx-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clasx-data">
<TITLE>libstdcxx - Class __cxxabiv1::__pointer_type_info Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for __cxxabiv1::__pointer_type_info</primary></indexterm>typeinfo for __cxxabiv1::__pointer_type_info(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for __cxxabiv1::__pointer_type_info</primary></indexterm>typeinfo name for __cxxabiv1::__pointer_type_info(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__pointer_type_info</primary></indexterm>vtable for __cxxabiv1::__pointer_type_info(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class __cxxabiv1::__function_type_info -->
<SECT2>
<!--libgroup-->
<TITLE>Class __cxxabiv1::__function_type_info</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for __cxxabiv1::__function_type_info</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the __cxxabiv1::__function_type_info class
is described by <XREF LINKEND="cls-24329-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24329-0">
<TITLE>Primary vtable for __cxxabiv1::__function_type_info</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for __cxxabiv1::__function_type_info</primary></indexterm>typeinfo for __cxxabiv1::__function_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__function_type_info::~__function_type_info()</primary></indexterm>__cxxabiv1::__function_type_info::~__function_type_info()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__function_type_info::~__function_type_info()</primary></indexterm>__cxxabiv1::__function_type_info::~__function_type_info()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__is_pointer_p() const</primary></indexterm>type_info::__is_pointer_p() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__function_type_info::__is_function_p() const</primary></indexterm>__cxxabiv1::__function_type_info::__is_function_p() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__do_catch(type_info const*, void**, unsigned int) const</primary></indexterm>type_info::__do_catch(type_info const*, void**, unsigned int) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const</primary></indexterm>type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the __cxxabiv1::__function_type_info  class
is described by <XREF LINKEND="rtti-24100">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24100">
<TITLE>typeinfo for __cxxabiv1::__function_type_info</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for __cxxabiv1::__function_type_info</primary></indexterm>typeinfo name for __cxxabiv1::__function_type_info</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class __cxxabiv1::__function_type_info</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class __cxxabiv1::__function_type_info specified in <XREF linkend="tbl-libstdcxx-clasy-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clasy-ints">
<TITLE>libstdcxx - Class __cxxabiv1::__function_type_info Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__function_type_info::~__function_type_info()</primary></indexterm>__cxxabiv1::__function_type_info::~__function_type_info()(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__function_type_info::~__function_type_info()</primary></indexterm>__cxxabiv1::__function_type_info::~__function_type_info()(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__function_type_info::~__function_type_info()</primary></indexterm>__cxxabiv1::__function_type_info::~__function_type_info()(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__function_type_info::__is_function_p() const</primary></indexterm>__cxxabiv1::__function_type_info::__is_function_p() const(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class __cxxabiv1::__function_type_info specified in <XREF linkend="tbl-libstdcxx-clasy-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clasy-data">
<TITLE>libstdcxx - Class __cxxabiv1::__function_type_info Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for __cxxabiv1::__function_type_info</primary></indexterm>typeinfo for __cxxabiv1::__function_type_info(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for __cxxabiv1::__function_type_info</primary></indexterm>typeinfo name for __cxxabiv1::__function_type_info(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__function_type_info</primary></indexterm>vtable for __cxxabiv1::__function_type_info(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class __cxxabiv1::__si_class_type_info -->
<SECT2>
<!--libgroup-->
<TITLE>Class __cxxabiv1::__si_class_type_info</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for __cxxabiv1::__si_class_type_info</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the __cxxabiv1::__si_class_type_info class
is described by <XREF LINKEND="cls-23979-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-23979-0">
<TITLE>Primary vtable for __cxxabiv1::__si_class_type_info</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for __cxxabiv1::__si_class_type_info</primary></indexterm>typeinfo for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__si_class_type_info::~__si_class_type_info()</primary></indexterm>__cxxabiv1::__si_class_type_info::~__si_class_type_info()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__si_class_type_info::~__si_class_type_info()</primary></indexterm>__cxxabiv1::__si_class_type_info::~__si_class_type_info()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__is_pointer_p() const</primary></indexterm>type_info::__is_pointer_p() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__is_function_p() const</primary></indexterm>type_info::__is_function_p() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__class_type_info::__do_catch(type_info const*, void**, unsigned int) const</primary></indexterm>__cxxabiv1::__class_type_info::__do_catch(type_info const*, void**, unsigned int) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const</primary></indexterm>__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__si_class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const</primary></indexterm>__cxxabiv1::__si_class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the __cxxabiv1::__si_class_type_info  class
is described by <XREF LINKEND="rtti-24094">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24094">
<TITLE>typeinfo for __cxxabiv1::__si_class_type_info</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for __cxxabiv1::__si_class_type_info</primary></indexterm>typeinfo name for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class __cxxabiv1::__si_class_type_info</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class __cxxabiv1::__si_class_type_info specified in <XREF linkend="tbl-libstdcxx-clasz-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clasz-ints">
<TITLE>libstdcxx - Class __cxxabiv1::__si_class_type_info Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__si_class_type_info::~__si_class_type_info()</primary></indexterm>__cxxabiv1::__si_class_type_info::~__si_class_type_info()(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__si_class_type_info::~__si_class_type_info()</primary></indexterm>__cxxabiv1::__si_class_type_info::~__si_class_type_info()(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__si_class_type_info::~__si_class_type_info()</primary></indexterm>__cxxabiv1::__si_class_type_info::~__si_class_type_info()(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__si_class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const</primary></indexterm>__cxxabiv1::__si_class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class __cxxabiv1::__si_class_type_info specified in <XREF linkend="tbl-libstdcxx-clasz-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clasz-data">
<TITLE>libstdcxx - Class __cxxabiv1::__si_class_type_info Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for __cxxabiv1::__si_class_type_info</primary></indexterm>typeinfo for __cxxabiv1::__si_class_type_info(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for __cxxabiv1::__si_class_type_info</primary></indexterm>typeinfo name for __cxxabiv1::__si_class_type_info(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class __cxxabiv1::__vmi_class_type_info -->
<SECT2>
<!--libgroup-->
<TITLE>Class __cxxabiv1::__vmi_class_type_info</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for __cxxabiv1::__vmi_class_type_info</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the __cxxabiv1::__vmi_class_type_info class
is described by <XREF LINKEND="cls-23980-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-23980-0">
<TITLE>Primary vtable for __cxxabiv1::__vmi_class_type_info</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for __cxxabiv1::__vmi_class_type_info</primary></indexterm>typeinfo for __cxxabiv1::__vmi_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__vmi_class_type_info::~__vmi_class_type_info()</primary></indexterm>__cxxabiv1::__vmi_class_type_info::~__vmi_class_type_info()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__vmi_class_type_info::~__vmi_class_type_info()</primary></indexterm>__cxxabiv1::__vmi_class_type_info::~__vmi_class_type_info()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__is_pointer_p() const</primary></indexterm>type_info::__is_pointer_p() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__is_function_p() const</primary></indexterm>type_info::__is_function_p() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__class_type_info::__do_catch(type_info const*, void**, unsigned int) const</primary></indexterm>__cxxabiv1::__class_type_info::__do_catch(type_info const*, void**, unsigned int) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const</primary></indexterm>__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__vmi_class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const</primary></indexterm>__cxxabiv1::__vmi_class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the __cxxabiv1::__vmi_class_type_info  class
is described by <XREF LINKEND="rtti-24093">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24093">
<TITLE>typeinfo for __cxxabiv1::__vmi_class_type_info</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for __cxxabiv1::__vmi_class_type_info</primary></indexterm>typeinfo name for __cxxabiv1::__vmi_class_type_info</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class __cxxabiv1::__vmi_class_type_info</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class __cxxabiv1::__vmi_class_type_info specified in <XREF linkend="tbl-libstdcxx-clata-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clata-ints">
<TITLE>libstdcxx - Class __cxxabiv1::__vmi_class_type_info Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__vmi_class_type_info::~__vmi_class_type_info()</primary></indexterm>__cxxabiv1::__vmi_class_type_info::~__vmi_class_type_info()(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__vmi_class_type_info::~__vmi_class_type_info()</primary></indexterm>__cxxabiv1::__vmi_class_type_info::~__vmi_class_type_info()(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__vmi_class_type_info::~__vmi_class_type_info()</primary></indexterm>__cxxabiv1::__vmi_class_type_info::~__vmi_class_type_info()(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__vmi_class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const</primary></indexterm>__cxxabiv1::__vmi_class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class __cxxabiv1::__vmi_class_type_info specified in <XREF linkend="tbl-libstdcxx-clata-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clata-data">
<TITLE>libstdcxx - Class __cxxabiv1::__vmi_class_type_info Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for __cxxabiv1::__vmi_class_type_info</primary></indexterm>typeinfo for __cxxabiv1::__vmi_class_type_info(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for __cxxabiv1::__vmi_class_type_info</primary></indexterm>typeinfo name for __cxxabiv1::__vmi_class_type_info(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__vmi_class_type_info</primary></indexterm>vtable for __cxxabiv1::__vmi_class_type_info(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class __cxxabiv1::__fundamental_type_info -->
<SECT2>
<!--libgroup-->
<TITLE>Class __cxxabiv1::__fundamental_type_info</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for __cxxabiv1::__fundamental_type_info</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the __cxxabiv1::__fundamental_type_info class
is described by <XREF LINKEND="cls-23982-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-23982-0">
<TITLE>Primary vtable for __cxxabiv1::__fundamental_type_info</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for __cxxabiv1::__fundamental_type_info</primary></indexterm>typeinfo for __cxxabiv1::__fundamental_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__fundamental_type_info::~__fundamental_type_info()</primary></indexterm>__cxxabiv1::__fundamental_type_info::~__fundamental_type_info()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__fundamental_type_info::~__fundamental_type_info()</primary></indexterm>__cxxabiv1::__fundamental_type_info::~__fundamental_type_info()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__is_pointer_p() const</primary></indexterm>type_info::__is_pointer_p() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__is_function_p() const</primary></indexterm>type_info::__is_function_p() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__do_catch(type_info const*, void**, unsigned int) const</primary></indexterm>type_info::__do_catch(type_info const*, void**, unsigned int) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const</primary></indexterm>type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the __cxxabiv1::__fundamental_type_info  class
is described by <XREF LINKEND="rtti-24102">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24102">
<TITLE>typeinfo for __cxxabiv1::__fundamental_type_info</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for __cxxabiv1::__fundamental_type_info</primary></indexterm>typeinfo name for __cxxabiv1::__fundamental_type_info</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class __cxxabiv1::__fundamental_type_info</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class __cxxabiv1::__fundamental_type_info specified in <XREF linkend="tbl-libstdcxx-clatb-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clatb-ints">
<TITLE>libstdcxx - Class __cxxabiv1::__fundamental_type_info Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__fundamental_type_info::~__fundamental_type_info()</primary></indexterm>__cxxabiv1::__fundamental_type_info::~__fundamental_type_info()(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__fundamental_type_info::~__fundamental_type_info()</primary></indexterm>__cxxabiv1::__fundamental_type_info::~__fundamental_type_info()(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__fundamental_type_info::~__fundamental_type_info()</primary></indexterm>__cxxabiv1::__fundamental_type_info::~__fundamental_type_info()(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class __cxxabiv1::__fundamental_type_info specified in <XREF linkend="tbl-libstdcxx-clatb-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clatb-data">
<TITLE>libstdcxx - Class __cxxabiv1::__fundamental_type_info Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for __cxxabiv1::__fundamental_type_info</primary></indexterm>typeinfo for __cxxabiv1::__fundamental_type_info(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for __cxxabiv1::__fundamental_type_info</primary></indexterm>typeinfo name for __cxxabiv1::__fundamental_type_info(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__fundamental_type_info</primary></indexterm>vtable for __cxxabiv1::__fundamental_type_info(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class __cxxabiv1::__pointer_to_member_type_info -->
<SECT2>
<!--libgroup-->
<TITLE>Class __cxxabiv1::__pointer_to_member_type_info</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for __cxxabiv1::__pointer_to_member_type_info</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the __cxxabiv1::__pointer_to_member_type_info class
is described by <XREF LINKEND="cls-24326-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24326-0">
<TITLE>Primary vtable for __cxxabiv1::__pointer_to_member_type_info</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for __cxxabiv1::__pointer_to_member_type_info</primary></indexterm>typeinfo for __cxxabiv1::__pointer_to_member_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__pointer_to_member_type_info::~__pointer_to_member_type_info()</primary></indexterm>__cxxabiv1::__pointer_to_member_type_info::~__pointer_to_member_type_info()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__pointer_to_member_type_info::~__pointer_to_member_type_info()</primary></indexterm>__cxxabiv1::__pointer_to_member_type_info::~__pointer_to_member_type_info()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__is_pointer_p() const</primary></indexterm>type_info::__is_pointer_p() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__is_function_p() const</primary></indexterm>type_info::__is_function_p() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__pbase_type_info::__do_catch(type_info const*, void**, unsigned int) const</primary></indexterm>__cxxabiv1::__pbase_type_info::__do_catch(type_info const*, void**, unsigned int) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const</primary></indexterm>type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__pointer_to_member_type_info::__pointer_catch(__cxxabiv1::__pbase_type_info const*, void**, unsigned int) const</primary></indexterm>__cxxabiv1::__pointer_to_member_type_info::__pointer_catch(__cxxabiv1::__pbase_type_info const*, void**, unsigned int) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the __cxxabiv1::__pointer_to_member_type_info  class
is described by <XREF LINKEND="rtti-24097">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24097">
<TITLE>typeinfo for __cxxabiv1::__pointer_to_member_type_info</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for __cxxabiv1::__pointer_to_member_type_info</primary></indexterm>typeinfo name for __cxxabiv1::__pointer_to_member_type_info</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class __cxxabiv1::__pointer_to_member_type_info</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class __cxxabiv1::__pointer_to_member_type_info specified in <XREF linkend="tbl-libstdcxx-clatc-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clatc-ints">
<TITLE>libstdcxx - Class __cxxabiv1::__pointer_to_member_type_info Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__pointer_to_member_type_info::~__pointer_to_member_type_info()</primary></indexterm>__cxxabiv1::__pointer_to_member_type_info::~__pointer_to_member_type_info()(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__pointer_to_member_type_info::~__pointer_to_member_type_info()</primary></indexterm>__cxxabiv1::__pointer_to_member_type_info::~__pointer_to_member_type_info()(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__pointer_to_member_type_info::~__pointer_to_member_type_info()</primary></indexterm>__cxxabiv1::__pointer_to_member_type_info::~__pointer_to_member_type_info()(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__cxxabiv1::__pointer_to_member_type_info::__pointer_catch(__cxxabiv1::__pbase_type_info const*, void**, unsigned int) const</primary></indexterm>__cxxabiv1::__pointer_to_member_type_info::__pointer_catch(__cxxabiv1::__pbase_type_info const*, void**, unsigned int) const(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class __cxxabiv1::__pointer_to_member_type_info specified in <XREF linkend="tbl-libstdcxx-clatc-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clatc-data">
<TITLE>libstdcxx - Class __cxxabiv1::__pointer_to_member_type_info Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for __cxxabiv1::__pointer_to_member_type_info</primary></indexterm>typeinfo for __cxxabiv1::__pointer_to_member_type_info(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for __cxxabiv1::__pointer_to_member_type_info</primary></indexterm>typeinfo name for __cxxabiv1::__pointer_to_member_type_info(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__pointer_to_member_type_info</primary></indexterm>vtable for __cxxabiv1::__pointer_to_member_type_info(CXXABI_1.3) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class __gnu_cxx::stdio_filebuf<char, std::char_traits<char> > -->
<SECT2>
<!--libgroup-->
<TITLE>Class __gnu_cxx::stdio_filebuf&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for Class __gnu_cxx::stdio_filebuf&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
No external methods are defined for libstdcxx - Class __gnu_cxx::stdio_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;
in this part of the specification. See also the relevant architecture specific part of this specification.
</PARA>
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class __gnu_cxx::stdio_filebuf&lt;char, std::char_traits&lt;char&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clatd-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clatd-data">
<TITLE>libstdcxx - Class __gnu_cxx::stdio_filebuf&lt;char, char_traits&lt;char&gt; &gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for __gnu_cxx::stdio_filebuf&lt;char, char_traits&lt;char&gt; &gt;</primary></indexterm>typeinfo for __gnu_cxx::stdio_filebuf&lt;char, char_traits&lt;char&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for __gnu_cxx::stdio_filebuf&lt;char, char_traits&lt;char&gt; &gt;</primary></indexterm>typeinfo name for __gnu_cxx::stdio_filebuf&lt;char, char_traits&lt;char&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class __gnu_cxx::stdio_filebuf<wchar_t, std::char_traits<wchar_t> > -->
<SECT2>
<!--libgroup-->
<TITLE>Class __gnu_cxx::stdio_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for Class __gnu_cxx::stdio_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
No external methods are defined for libstdcxx - Class __gnu_cxx::stdio_filebuf&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt;
in this part of the specification. See also the relevant architecture specific part of this specification.
</PARA>
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class __gnu_cxx::stdio_filebuf&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clate-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clate-data">
<TITLE>libstdcxx - Class __gnu_cxx::stdio_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for __gnu_cxx::stdio_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</primary></indexterm>typeinfo for __gnu_cxx::stdio_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for __gnu_cxx::stdio_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</primary></indexterm>typeinfo name for __gnu_cxx::stdio_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class __gnu_cxx::__pool_alloc_base -->
<SECT2>
<!--libgroup-->
<TITLE>Class __gnu_cxx::__pool_alloc_base</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for Class __gnu_cxx::__pool_alloc_base</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class __gnu_cxx::__pool_alloc_base specified in <XREF linkend="tbl-libstdcxx-clatf-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clatf-ints">
<TITLE>libstdcxx - Class __gnu_cxx::__pool_alloc_base Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__gnu_cxx::__pool_alloc_base::_M_get_mutex()</primary></indexterm>__gnu_cxx::__pool_alloc_base::_M_get_mutex()(GLIBCXX_3.4.2) <LINK LINKEND="REFSTD.libstdcxx.3">&lsqb;LSB]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class __gnu_cxx::stdio_sync_filebuf<char, std::char_traits<char> > -->
<SECT2>
<!--libgroup-->
<TITLE>Class __gnu_cxx::stdio_sync_filebuf&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for __gnu_cxx::stdio_sync_filebuf&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the __gnu_cxx::stdio_sync_filebuf&lt;char, std::char_traits&lt;char&gt; &gt; class
is described by <XREF LINKEND="cls-29351-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-29351-0">
<TITLE>Primary vtable for __gnu_cxx::stdio_sync_filebuf&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for __gnu_cxx::stdio_sync_filebuf&lt;char, char_traits&lt;char&gt; &gt;</primary></indexterm>typeinfo for __gnu_cxx::stdio_sync_filebuf&lt;char, char_traits&lt;char&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>Unspecified</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>Unspecified</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::imbue(locale const&)</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::imbue(locale const&)</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>See The Architecture Specific Specification</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>Unspecified</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>Unspecified</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>Unspecified</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::showmanyc()</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::showmanyc()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>Unspecified</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>Unspecified</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>Unspecified</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;11&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>Unspecified</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;12&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>Unspecified</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;13&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>Unspecified</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class __gnu_cxx::stdio_sync_filebuf&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class __gnu_cxx::stdio_sync_filebuf&lt;char, std::char_traits&lt;char&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clatg-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clatg-ints">
<TITLE>libstdcxx - Class __gnu_cxx::stdio_sync_filebuf&lt;char, char_traits&lt;char&gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__gnu_cxx::stdio_sync_filebuf&lt;char, char_traits&lt;char&gt; &gt;::file()</primary></indexterm>__gnu_cxx::stdio_sync_filebuf&lt;char, char_traits&lt;char&gt; &gt;::file()(GLIBCXX_3.4.2) <LINK LINKEND="REFSTD.libstdcxx.3">&lsqb;LSB]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class __gnu_cxx::stdio_sync_filebuf&lt;char, std::char_traits&lt;char&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clatg-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clatg-data">
<TITLE>libstdcxx - Class __gnu_cxx::stdio_sync_filebuf&lt;char, char_traits&lt;char&gt; &gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for __gnu_cxx::stdio_sync_filebuf&lt;char, char_traits&lt;char&gt; &gt;</primary></indexterm>typeinfo for __gnu_cxx::stdio_sync_filebuf&lt;char, char_traits&lt;char&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for __gnu_cxx::stdio_sync_filebuf&lt;char, char_traits&lt;char&gt; &gt;</primary></indexterm>typeinfo name for __gnu_cxx::stdio_sync_filebuf&lt;char, char_traits&lt;char&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __gnu_cxx::stdio_sync_filebuf&lt;char, char_traits&lt;char&gt; &gt;</primary></indexterm>vtable for __gnu_cxx::stdio_sync_filebuf&lt;char, char_traits&lt;char&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class __gnu_cxx::stdio_sync_filebuf<wchar_t, std::char_traits<wchar_t> > -->
<SECT2>
<!--libgroup-->
<TITLE>Class __gnu_cxx::stdio_sync_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for __gnu_cxx::stdio_sync_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the __gnu_cxx::stdio_sync_filebuf&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; class
is described by <XREF LINKEND="cls-29211-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-29211-0">
<TITLE>Primary vtable for __gnu_cxx::stdio_sync_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for __gnu_cxx::stdio_sync_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</primary></indexterm>typeinfo for __gnu_cxx::stdio_sync_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>Unspecified</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>Unspecified</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::imbue(locale const&)</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::imbue(locale const&)</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>See The Architecture Specific Specification</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>Unspecified</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>Unspecified</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>Unspecified</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::showmanyc()</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::showmanyc()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>Unspecified</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>Unspecified</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>Unspecified</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;11&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>Unspecified</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;12&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>Unspecified</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;13&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>Unspecified</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class __gnu_cxx::stdio_sync_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class __gnu_cxx::stdio_sync_filebuf&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clath-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clath-ints">
<TITLE>libstdcxx - Class __gnu_cxx::stdio_sync_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__gnu_cxx::stdio_sync_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::file()</primary></indexterm>__gnu_cxx::stdio_sync_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::file()(GLIBCXX_3.4.2) <LINK LINKEND="REFSTD.libstdcxx.3">&lsqb;LSB]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class __gnu_cxx::stdio_sync_filebuf&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clath-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clath-data">
<TITLE>libstdcxx - Class __gnu_cxx::stdio_sync_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for __gnu_cxx::stdio_sync_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</primary></indexterm>typeinfo for __gnu_cxx::stdio_sync_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for __gnu_cxx::stdio_sync_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</primary></indexterm>typeinfo name for __gnu_cxx::stdio_sync_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __gnu_cxx::stdio_sync_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</primary></indexterm>vtable for __gnu_cxx::stdio_sync_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::exception -->
<SECT2>
<!--libgroup-->
<TITLE>Class exception</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for exception</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::exception class
is described by <XREF LINKEND="cls-24321-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24321-0">
<TITLE>Primary vtable for exception</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for exception</primary></indexterm>typeinfo for exception</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>exception::~exception()</primary></indexterm>exception::~exception()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>exception::~exception()</primary></indexterm>exception::~exception()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>exception::what() const</primary></indexterm>exception::what() const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::exception  class
is described by <XREF LINKEND="rtti-24002">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24002">
<TITLE>typeinfo for exception</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__class_type_info</primary></indexterm>vtable for __cxxabiv1::__class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for exception</primary></indexterm>typeinfo name for exception</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class exception</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::exception specified in <XREF linkend="tbl-libstdcxx-clati-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clati-ints">
<TITLE>libstdcxx - Class exception Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>exception::what() const</primary></indexterm>exception::what() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>exception::~exception()</primary></indexterm>exception::~exception()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>exception::~exception()</primary></indexterm>exception::~exception()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>exception::~exception()</primary></indexterm>exception::~exception()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::exception specified in <XREF linkend="tbl-libstdcxx-clati-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clati-data">
<TITLE>libstdcxx - Class exception Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for exception</primary></indexterm>typeinfo for exception(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for exception</primary></indexterm>typeinfo name for exception(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for exception</primary></indexterm>vtable for exception(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::bad_typeid -->
<SECT2>
<!--libgroup-->
<TITLE>Class bad_typeid</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for bad_typeid</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::bad_typeid class
is described by <XREF LINKEND="cls-24323-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24323-0">
<TITLE>Primary vtable for bad_typeid</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for bad_typeid</primary></indexterm>typeinfo for bad_typeid</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>bad_typeid::~bad_typeid()</primary></indexterm>bad_typeid::~bad_typeid()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>bad_typeid::~bad_typeid()</primary></indexterm>bad_typeid::~bad_typeid()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>exception::what() const</primary></indexterm>exception::what() const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::bad_typeid  class
is described by <XREF LINKEND="rtti-24095">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24095">
<TITLE>typeinfo for bad_typeid</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for bad_typeid</primary></indexterm>typeinfo name for bad_typeid</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class bad_typeid</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::bad_typeid specified in <XREF linkend="tbl-libstdcxx-clatj-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clatj-ints">
<TITLE>libstdcxx - Class bad_typeid Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>bad_typeid::~bad_typeid()</primary></indexterm>bad_typeid::~bad_typeid()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>bad_typeid::~bad_typeid()</primary></indexterm>bad_typeid::~bad_typeid()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>bad_typeid::~bad_typeid()</primary></indexterm>bad_typeid::~bad_typeid()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::bad_typeid specified in <XREF linkend="tbl-libstdcxx-clatj-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clatj-data">
<TITLE>libstdcxx - Class bad_typeid Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for bad_typeid</primary></indexterm>typeinfo for bad_typeid(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for bad_typeid</primary></indexterm>typeinfo name for bad_typeid(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for bad_typeid</primary></indexterm>vtable for bad_typeid(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::logic_error -->
<SECT2>
<!--libgroup-->
<TITLE>Class logic_error</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for logic_error</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::logic_error class
is described by <XREF LINKEND="cls-24313-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24313-0">
<TITLE>Primary vtable for logic_error</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for logic_error</primary></indexterm>typeinfo for logic_error</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>logic_error::~logic_error()</primary></indexterm>logic_error::~logic_error()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>logic_error::~logic_error()</primary></indexterm>logic_error::~logic_error()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>logic_error::what() const</primary></indexterm>logic_error::what() const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::logic_error  class
is described by <XREF LINKEND="rtti-23998">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-23998">
<TITLE>typeinfo for logic_error</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for logic_error</primary></indexterm>typeinfo name for logic_error</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class logic_error</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::logic_error specified in <XREF linkend="tbl-libstdcxx-clatk-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clatk-ints">
<TITLE>libstdcxx - Class logic_error Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>logic_error::what() const</primary></indexterm>logic_error::what() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>logic_error::logic_error(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)</primary></indexterm>logic_error::logic_error(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>logic_error::logic_error(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)</primary></indexterm>logic_error::logic_error(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>logic_error::~logic_error()</primary></indexterm>logic_error::~logic_error()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>logic_error::~logic_error()</primary></indexterm>logic_error::~logic_error()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>logic_error::~logic_error()</primary></indexterm>logic_error::~logic_error()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::logic_error specified in <XREF linkend="tbl-libstdcxx-clatk-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clatk-data">
<TITLE>libstdcxx - Class logic_error Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for logic_error</primary></indexterm>typeinfo for logic_error(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for logic_error</primary></indexterm>typeinfo name for logic_error(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for logic_error</primary></indexterm>vtable for logic_error(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::range_error -->
<SECT2>
<!--libgroup-->
<TITLE>Class range_error</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for range_error</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::range_error class
is described by <XREF LINKEND="cls-24243-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24243-0">
<TITLE>Primary vtable for range_error</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for range_error</primary></indexterm>typeinfo for range_error</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>range_error::~range_error()</primary></indexterm>range_error::~range_error()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>range_error::~range_error()</primary></indexterm>range_error::~range_error()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>runtime_error::what() const</primary></indexterm>runtime_error::what() const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::range_error  class
is described by <XREF LINKEND="rtti-24054">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24054">
<TITLE>typeinfo for range_error</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for range_error</primary></indexterm>typeinfo name for range_error</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class range_error</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::range_error specified in <XREF linkend="tbl-libstdcxx-clatl-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clatl-ints">
<TITLE>libstdcxx - Class range_error Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>range_error::range_error(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)</primary></indexterm>range_error::range_error(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>range_error::range_error(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)</primary></indexterm>range_error::range_error(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>range_error::~range_error()</primary></indexterm>range_error::~range_error()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>range_error::~range_error()</primary></indexterm>range_error::~range_error()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::range_error specified in <XREF linkend="tbl-libstdcxx-clatl-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clatl-data">
<TITLE>libstdcxx - Class range_error Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for range_error</primary></indexterm>typeinfo for range_error(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for range_error</primary></indexterm>typeinfo name for range_error(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for range_error</primary></indexterm>vtable for range_error(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::domain_error -->
<SECT2>
<!--libgroup-->
<TITLE>Class domain_error</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for domain_error</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::domain_error class
is described by <XREF LINKEND="cls-24247-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24247-0">
<TITLE>Primary vtable for domain_error</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for domain_error</primary></indexterm>typeinfo for domain_error</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>domain_error::~domain_error()</primary></indexterm>domain_error::~domain_error()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>domain_error::~domain_error()</primary></indexterm>domain_error::~domain_error()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>logic_error::what() const</primary></indexterm>logic_error::what() const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::domain_error  class
is described by <XREF LINKEND="rtti-24058">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24058">
<TITLE>typeinfo for domain_error</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for domain_error</primary></indexterm>typeinfo name for domain_error</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class domain_error</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::domain_error specified in <XREF linkend="tbl-libstdcxx-clatm-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clatm-ints">
<TITLE>libstdcxx - Class domain_error Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>domain_error::domain_error(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)</primary></indexterm>domain_error::domain_error(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>domain_error::domain_error(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)</primary></indexterm>domain_error::domain_error(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>domain_error::~domain_error()</primary></indexterm>domain_error::~domain_error()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>domain_error::~domain_error()</primary></indexterm>domain_error::~domain_error()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::domain_error specified in <XREF linkend="tbl-libstdcxx-clatm-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clatm-data">
<TITLE>libstdcxx - Class domain_error Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for domain_error</primary></indexterm>typeinfo for domain_error(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for domain_error</primary></indexterm>typeinfo name for domain_error(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for domain_error</primary></indexterm>vtable for domain_error(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::length_error -->
<SECT2>
<!--libgroup-->
<TITLE>Class length_error</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for length_error</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::length_error class
is described by <XREF LINKEND="cls-24245-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24245-0">
<TITLE>Primary vtable for length_error</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for length_error</primary></indexterm>typeinfo for length_error</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>length_error::~length_error()</primary></indexterm>length_error::~length_error()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>length_error::~length_error()</primary></indexterm>length_error::~length_error()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>logic_error::what() const</primary></indexterm>logic_error::what() const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::length_error  class
is described by <XREF LINKEND="rtti-24056">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24056">
<TITLE>typeinfo for length_error</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for length_error</primary></indexterm>typeinfo name for length_error</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class length_error</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::length_error specified in <XREF linkend="tbl-libstdcxx-clatn-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clatn-ints">
<TITLE>libstdcxx - Class length_error Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>length_error::length_error(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)</primary></indexterm>length_error::length_error(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>length_error::length_error(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)</primary></indexterm>length_error::length_error(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>length_error::~length_error()</primary></indexterm>length_error::~length_error()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>length_error::~length_error()</primary></indexterm>length_error::~length_error()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::length_error specified in <XREF linkend="tbl-libstdcxx-clatn-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clatn-data">
<TITLE>libstdcxx - Class length_error Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for length_error</primary></indexterm>typeinfo for length_error(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for length_error</primary></indexterm>typeinfo name for length_error(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for length_error</primary></indexterm>vtable for length_error(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::out_of_range -->
<SECT2>
<!--libgroup-->
<TITLE>Class out_of_range</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for out_of_range</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::out_of_range class
is described by <XREF LINKEND="cls-24244-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24244-0">
<TITLE>Primary vtable for out_of_range</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for out_of_range</primary></indexterm>typeinfo for out_of_range</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>out_of_range::~out_of_range()</primary></indexterm>out_of_range::~out_of_range()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>out_of_range::~out_of_range()</primary></indexterm>out_of_range::~out_of_range()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>logic_error::what() const</primary></indexterm>logic_error::what() const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::out_of_range  class
is described by <XREF LINKEND="rtti-24055">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24055">
<TITLE>typeinfo for out_of_range</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for out_of_range</primary></indexterm>typeinfo name for out_of_range</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class out_of_range</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::out_of_range specified in <XREF linkend="tbl-libstdcxx-clato-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clato-ints">
<TITLE>libstdcxx - Class out_of_range Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>out_of_range::out_of_range(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)</primary></indexterm>out_of_range::out_of_range(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>out_of_range::out_of_range(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)</primary></indexterm>out_of_range::out_of_range(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>out_of_range::~out_of_range()</primary></indexterm>out_of_range::~out_of_range()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>out_of_range::~out_of_range()</primary></indexterm>out_of_range::~out_of_range()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::out_of_range specified in <XREF linkend="tbl-libstdcxx-clato-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clato-data">
<TITLE>libstdcxx - Class out_of_range Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for out_of_range</primary></indexterm>typeinfo for out_of_range(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for out_of_range</primary></indexterm>typeinfo name for out_of_range(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for out_of_range</primary></indexterm>vtable for out_of_range(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::bad_exception -->
<SECT2>
<!--libgroup-->
<TITLE>Class bad_exception</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for bad_exception</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::bad_exception class
is described by <XREF LINKEND="cls-24320-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24320-0">
<TITLE>Primary vtable for bad_exception</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for bad_exception</primary></indexterm>typeinfo for bad_exception</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>bad_exception::~bad_exception()</primary></indexterm>bad_exception::~bad_exception()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>bad_exception::~bad_exception()</primary></indexterm>bad_exception::~bad_exception()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>exception::what() const</primary></indexterm>exception::what() const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::bad_exception  class
is described by <XREF LINKEND="rtti-24091">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24091">
<TITLE>typeinfo for bad_exception</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for bad_exception</primary></indexterm>typeinfo name for bad_exception</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class bad_exception</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::bad_exception specified in <XREF linkend="tbl-libstdcxx-clatp-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clatp-ints">
<TITLE>libstdcxx - Class bad_exception Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>bad_exception::~bad_exception()</primary></indexterm>bad_exception::~bad_exception()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>bad_exception::~bad_exception()</primary></indexterm>bad_exception::~bad_exception()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>bad_exception::~bad_exception()</primary></indexterm>bad_exception::~bad_exception()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::bad_exception specified in <XREF linkend="tbl-libstdcxx-clatp-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clatp-data">
<TITLE>libstdcxx - Class bad_exception Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for bad_exception</primary></indexterm>typeinfo for bad_exception(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for bad_exception</primary></indexterm>typeinfo name for bad_exception(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for bad_exception</primary></indexterm>vtable for bad_exception(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::runtime_error -->
<SECT2>
<!--libgroup-->
<TITLE>Class runtime_error</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for runtime_error</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::runtime_error class
is described by <XREF LINKEND="cls-24312-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24312-0">
<TITLE>Primary vtable for runtime_error</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for runtime_error</primary></indexterm>typeinfo for runtime_error</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>runtime_error::~runtime_error()</primary></indexterm>runtime_error::~runtime_error()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>runtime_error::~runtime_error()</primary></indexterm>runtime_error::~runtime_error()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>runtime_error::what() const</primary></indexterm>runtime_error::what() const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::runtime_error  class
is described by <XREF LINKEND="rtti-23999">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-23999">
<TITLE>typeinfo for runtime_error</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for runtime_error</primary></indexterm>typeinfo name for runtime_error</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class runtime_error</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::runtime_error specified in <XREF linkend="tbl-libstdcxx-clatq-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clatq-ints">
<TITLE>libstdcxx - Class runtime_error Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>runtime_error::what() const</primary></indexterm>runtime_error::what() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>runtime_error::runtime_error(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)</primary></indexterm>runtime_error::runtime_error(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>runtime_error::runtime_error(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)</primary></indexterm>runtime_error::runtime_error(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>runtime_error::~runtime_error()</primary></indexterm>runtime_error::~runtime_error()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>runtime_error::~runtime_error()</primary></indexterm>runtime_error::~runtime_error()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>runtime_error::~runtime_error()</primary></indexterm>runtime_error::~runtime_error()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::runtime_error specified in <XREF linkend="tbl-libstdcxx-clatq-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clatq-data">
<TITLE>libstdcxx - Class runtime_error Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for runtime_error</primary></indexterm>typeinfo for runtime_error(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for runtime_error</primary></indexterm>typeinfo name for runtime_error(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for runtime_error</primary></indexterm>vtable for runtime_error(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::overflow_error -->
<SECT2>
<!--libgroup-->
<TITLE>Class overflow_error</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for overflow_error</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::overflow_error class
is described by <XREF LINKEND="cls-24242-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24242-0">
<TITLE>Primary vtable for overflow_error</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for overflow_error</primary></indexterm>typeinfo for overflow_error</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>overflow_error::~overflow_error()</primary></indexterm>overflow_error::~overflow_error()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>overflow_error::~overflow_error()</primary></indexterm>overflow_error::~overflow_error()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>runtime_error::what() const</primary></indexterm>runtime_error::what() const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::overflow_error  class
is described by <XREF LINKEND="rtti-24053">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24053">
<TITLE>typeinfo for overflow_error</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for overflow_error</primary></indexterm>typeinfo name for overflow_error</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class overflow_error</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::overflow_error specified in <XREF linkend="tbl-libstdcxx-clatr-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clatr-ints">
<TITLE>libstdcxx - Class overflow_error Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>overflow_error::overflow_error(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)</primary></indexterm>overflow_error::overflow_error(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>overflow_error::overflow_error(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)</primary></indexterm>overflow_error::overflow_error(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>overflow_error::~overflow_error()</primary></indexterm>overflow_error::~overflow_error()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>overflow_error::~overflow_error()</primary></indexterm>overflow_error::~overflow_error()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::overflow_error specified in <XREF linkend="tbl-libstdcxx-clatr-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clatr-data">
<TITLE>libstdcxx - Class overflow_error Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for overflow_error</primary></indexterm>typeinfo for overflow_error(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for overflow_error</primary></indexterm>typeinfo name for overflow_error(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for overflow_error</primary></indexterm>vtable for overflow_error(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::underflow_error -->
<SECT2>
<!--libgroup-->
<TITLE>Class underflow_error</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for underflow_error</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::underflow_error class
is described by <XREF LINKEND="cls-24241-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24241-0">
<TITLE>Primary vtable for underflow_error</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for underflow_error</primary></indexterm>typeinfo for underflow_error</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>underflow_error::~underflow_error()</primary></indexterm>underflow_error::~underflow_error()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>underflow_error::~underflow_error()</primary></indexterm>underflow_error::~underflow_error()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>runtime_error::what() const</primary></indexterm>runtime_error::what() const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::underflow_error  class
is described by <XREF LINKEND="rtti-24052">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24052">
<TITLE>typeinfo for underflow_error</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for underflow_error</primary></indexterm>typeinfo name for underflow_error</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class underflow_error</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::underflow_error specified in <XREF linkend="tbl-libstdcxx-clats-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clats-ints">
<TITLE>libstdcxx - Class underflow_error Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>underflow_error::underflow_error(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)</primary></indexterm>underflow_error::underflow_error(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>underflow_error::underflow_error(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)</primary></indexterm>underflow_error::underflow_error(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>underflow_error::~underflow_error()</primary></indexterm>underflow_error::~underflow_error()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>underflow_error::~underflow_error()</primary></indexterm>underflow_error::~underflow_error()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::underflow_error specified in <XREF linkend="tbl-libstdcxx-clats-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clats-data">
<TITLE>libstdcxx - Class underflow_error Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for underflow_error</primary></indexterm>typeinfo for underflow_error(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for underflow_error</primary></indexterm>typeinfo name for underflow_error(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for underflow_error</primary></indexterm>vtable for underflow_error(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::invalid_argument -->
<SECT2>
<!--libgroup-->
<TITLE>Class invalid_argument</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for invalid_argument</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::invalid_argument class
is described by <XREF LINKEND="cls-24246-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24246-0">
<TITLE>Primary vtable for invalid_argument</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for invalid_argument</primary></indexterm>typeinfo for invalid_argument</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>invalid_argument::~invalid_argument()</primary></indexterm>invalid_argument::~invalid_argument()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>invalid_argument::~invalid_argument()</primary></indexterm>invalid_argument::~invalid_argument()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>logic_error::what() const</primary></indexterm>logic_error::what() const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::invalid_argument  class
is described by <XREF LINKEND="rtti-24057">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24057">
<TITLE>typeinfo for invalid_argument</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for invalid_argument</primary></indexterm>typeinfo name for invalid_argument</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class invalid_argument</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::invalid_argument specified in <XREF linkend="tbl-libstdcxx-clatt-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clatt-ints">
<TITLE>libstdcxx - Class invalid_argument Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>invalid_argument::invalid_argument(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)</primary></indexterm>invalid_argument::invalid_argument(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>invalid_argument::invalid_argument(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)</primary></indexterm>invalid_argument::invalid_argument(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>invalid_argument::~invalid_argument()</primary></indexterm>invalid_argument::~invalid_argument()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>invalid_argument::~invalid_argument()</primary></indexterm>invalid_argument::~invalid_argument()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::invalid_argument specified in <XREF linkend="tbl-libstdcxx-clatt-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clatt-data">
<TITLE>libstdcxx - Class invalid_argument Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for invalid_argument</primary></indexterm>typeinfo for invalid_argument(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for invalid_argument</primary></indexterm>typeinfo name for invalid_argument(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for invalid_argument</primary></indexterm>vtable for invalid_argument(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::bad_cast -->
<SECT2>
<!--libgroup-->
<TITLE>Class bad_cast</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for bad_cast</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::bad_cast class
is described by <XREF LINKEND="cls-24324-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24324-0">
<TITLE>Primary vtable for bad_cast</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for bad_cast</primary></indexterm>typeinfo for bad_cast</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>bad_cast::~bad_cast()</primary></indexterm>bad_cast::~bad_cast()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>bad_cast::~bad_cast()</primary></indexterm>bad_cast::~bad_cast()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>exception::what() const</primary></indexterm>exception::what() const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::bad_cast  class
is described by <XREF LINKEND="rtti-24096">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24096">
<TITLE>typeinfo for bad_cast</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for bad_cast</primary></indexterm>typeinfo name for bad_cast</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class bad_cast</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::bad_cast specified in <XREF linkend="tbl-libstdcxx-clatu-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clatu-ints">
<TITLE>libstdcxx - Class bad_cast Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>bad_cast::~bad_cast()</primary></indexterm>bad_cast::~bad_cast()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>bad_cast::~bad_cast()</primary></indexterm>bad_cast::~bad_cast()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>bad_cast::~bad_cast()</primary></indexterm>bad_cast::~bad_cast()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::bad_cast specified in <XREF linkend="tbl-libstdcxx-clatu-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clatu-data">
<TITLE>libstdcxx - Class bad_cast Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for bad_cast</primary></indexterm>typeinfo for bad_cast(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for bad_cast</primary></indexterm>typeinfo name for bad_cast(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for bad_cast</primary></indexterm>vtable for bad_cast(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::bad_alloc -->
<SECT2>
<!--libgroup-->
<TITLE>Class bad_alloc</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for bad_alloc</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::bad_alloc class
is described by <XREF LINKEND="cls-24322-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24322-0">
<TITLE>Primary vtable for bad_alloc</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for bad_alloc</primary></indexterm>typeinfo for bad_alloc</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>bad_alloc::~bad_alloc()</primary></indexterm>bad_alloc::~bad_alloc()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>bad_alloc::~bad_alloc()</primary></indexterm>bad_alloc::~bad_alloc()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>exception::what() const</primary></indexterm>exception::what() const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::bad_alloc  class
is described by <XREF LINKEND="rtti-24092">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24092">
<TITLE>typeinfo for bad_alloc</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for bad_alloc</primary></indexterm>typeinfo name for bad_alloc</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class bad_alloc</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::bad_alloc specified in <XREF linkend="tbl-libstdcxx-clatv-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clatv-ints">
<TITLE>libstdcxx - Class bad_alloc Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>bad_alloc::~bad_alloc()</primary></indexterm>bad_alloc::~bad_alloc()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>bad_alloc::~bad_alloc()</primary></indexterm>bad_alloc::~bad_alloc()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>bad_alloc::~bad_alloc()</primary></indexterm>bad_alloc::~bad_alloc()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::bad_alloc specified in <XREF linkend="tbl-libstdcxx-clatv-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clatv-data">
<TITLE>libstdcxx - Class bad_alloc Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for bad_alloc</primary></indexterm>typeinfo for bad_alloc(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for bad_alloc</primary></indexterm>typeinfo name for bad_alloc(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for bad_alloc</primary></indexterm>vtable for bad_alloc(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name struct __numeric_limits_base -->
<SECT2>
<!--libgroup-->
<TITLE>struct __numeric_limits_base</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for struct __numeric_limits_base</TITLE>
<PARA>
No external methods are defined for libstdcxx - struct __numeric_limits_base
in this part of the specification. See also the relevant architecture specific part of this specification.
</PARA>
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for struct __numeric_limits_base specified in <XREF linkend="tbl-libstdcxx-struc-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-struc-data">
<TITLE>libstdcxx - struct __numeric_limits_base Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__numeric_limits_base::has_denorm</primary></indexterm>__numeric_limits_base::has_denorm(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__numeric_limits_base::is_bounded</primary></indexterm>__numeric_limits_base::is_bounded(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__numeric_limits_base::is_integer</primary></indexterm>__numeric_limits_base::is_integer(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__numeric_limits_base::round_style</primary></indexterm>__numeric_limits_base::round_style(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__numeric_limits_base::has_infinity</primary></indexterm>__numeric_limits_base::has_infinity(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__numeric_limits_base::max_exponent</primary></indexterm>__numeric_limits_base::max_exponent(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__numeric_limits_base::min_exponent</primary></indexterm>__numeric_limits_base::min_exponent(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__numeric_limits_base::has_quiet_NaN</primary></indexterm>__numeric_limits_base::has_quiet_NaN(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__numeric_limits_base::is_specialized</primary></indexterm>__numeric_limits_base::is_specialized(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__numeric_limits_base::max_exponent10</primary></indexterm>__numeric_limits_base::max_exponent10(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__numeric_limits_base::min_exponent10</primary></indexterm>__numeric_limits_base::min_exponent10(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__numeric_limits_base::has_denorm_loss</primary></indexterm>__numeric_limits_base::has_denorm_loss(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__numeric_limits_base::tinyness_before</primary></indexterm>__numeric_limits_base::tinyness_before(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__numeric_limits_base::has_signaling_NaN</primary></indexterm>__numeric_limits_base::has_signaling_NaN(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__numeric_limits_base::radix</primary></indexterm>__numeric_limits_base::radix(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__numeric_limits_base::traps</primary></indexterm>__numeric_limits_base::traps(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__numeric_limits_base::digits</primary></indexterm>__numeric_limits_base::digits(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__numeric_limits_base::digits10</primary></indexterm>__numeric_limits_base::digits10(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__numeric_limits_base::is_exact</primary></indexterm>__numeric_limits_base::is_exact(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__numeric_limits_base::is_iec559</primary></indexterm>__numeric_limits_base::is_iec559(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__numeric_limits_base::is_modulo</primary></indexterm>__numeric_limits_base::is_modulo(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__numeric_limits_base::is_signed</primary></indexterm>__numeric_limits_base::is_signed(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name struct numeric_limits<long double> -->
<SECT2>
<!--libgroup-->
<TITLE>struct numeric_limits&lt;long double&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for struct numeric_limits&lt;long double&gt;</TITLE>
<PARA>
No external methods are defined for libstdcxx - struct numeric_limits&lt;long double&gt;
in this part of the specification. See also the relevant architecture specific part of this specification.
</PARA>
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for struct numeric_limits&lt;long double&gt; specified in <XREF linkend="tbl-libstdcxx-strud-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-strud-data">
<TITLE>libstdcxx - struct numeric_limits&lt;long double&gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;long double&gt;::has_denorm</primary></indexterm>numeric_limits&lt;long double&gt;::has_denorm(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;long double&gt;::is_bounded</primary></indexterm>numeric_limits&lt;long double&gt;::is_bounded(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;long double&gt;::is_integer</primary></indexterm>numeric_limits&lt;long double&gt;::is_integer(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;long double&gt;::round_style</primary></indexterm>numeric_limits&lt;long double&gt;::round_style(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;long double&gt;::has_infinity</primary></indexterm>numeric_limits&lt;long double&gt;::has_infinity(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;long double&gt;::max_exponent</primary></indexterm>numeric_limits&lt;long double&gt;::max_exponent(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;long double&gt;::min_exponent</primary></indexterm>numeric_limits&lt;long double&gt;::min_exponent(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;long double&gt;::has_quiet_NaN</primary></indexterm>numeric_limits&lt;long double&gt;::has_quiet_NaN(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;long double&gt;::is_specialized</primary></indexterm>numeric_limits&lt;long double&gt;::is_specialized(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;long double&gt;::max_exponent10</primary></indexterm>numeric_limits&lt;long double&gt;::max_exponent10(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;long double&gt;::min_exponent10</primary></indexterm>numeric_limits&lt;long double&gt;::min_exponent10(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;long double&gt;::has_denorm_loss</primary></indexterm>numeric_limits&lt;long double&gt;::has_denorm_loss(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;long double&gt;::tinyness_before</primary></indexterm>numeric_limits&lt;long double&gt;::tinyness_before(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;long double&gt;::has_signaling_NaN</primary></indexterm>numeric_limits&lt;long double&gt;::has_signaling_NaN(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;long double&gt;::radix</primary></indexterm>numeric_limits&lt;long double&gt;::radix(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;long double&gt;::traps</primary></indexterm>numeric_limits&lt;long double&gt;::traps(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;long double&gt;::digits</primary></indexterm>numeric_limits&lt;long double&gt;::digits(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;long double&gt;::digits10</primary></indexterm>numeric_limits&lt;long double&gt;::digits10(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;long double&gt;::is_exact</primary></indexterm>numeric_limits&lt;long double&gt;::is_exact(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;long double&gt;::is_iec559</primary></indexterm>numeric_limits&lt;long double&gt;::is_iec559(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;long double&gt;::is_modulo</primary></indexterm>numeric_limits&lt;long double&gt;::is_modulo(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;long double&gt;::is_signed</primary></indexterm>numeric_limits&lt;long double&gt;::is_signed(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name struct numeric_limits<long long> -->
<SECT2>
<!--libgroup-->
<TITLE>struct numeric_limits&lt;long long&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for struct numeric_limits&lt;long long&gt;</TITLE>
<PARA>
No external methods are defined for libstdcxx - struct numeric_limits&lt;long long&gt;
in this part of the specification. See also the relevant architecture specific part of this specification.
</PARA>
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for struct numeric_limits&lt;long long&gt; specified in <XREF linkend="tbl-libstdcxx-strue-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-strue-data">
<TITLE>libstdcxx - struct numeric_limits&lt;long long&gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;long long&gt;::has_denorm</primary></indexterm>numeric_limits&lt;long long&gt;::has_denorm(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;long long&gt;::is_bounded</primary></indexterm>numeric_limits&lt;long long&gt;::is_bounded(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;long long&gt;::is_integer</primary></indexterm>numeric_limits&lt;long long&gt;::is_integer(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;long long&gt;::round_style</primary></indexterm>numeric_limits&lt;long long&gt;::round_style(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;long long&gt;::has_infinity</primary></indexterm>numeric_limits&lt;long long&gt;::has_infinity(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;long long&gt;::max_exponent</primary></indexterm>numeric_limits&lt;long long&gt;::max_exponent(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;long long&gt;::min_exponent</primary></indexterm>numeric_limits&lt;long long&gt;::min_exponent(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;long long&gt;::has_quiet_NaN</primary></indexterm>numeric_limits&lt;long long&gt;::has_quiet_NaN(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;long long&gt;::is_specialized</primary></indexterm>numeric_limits&lt;long long&gt;::is_specialized(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;long long&gt;::max_exponent10</primary></indexterm>numeric_limits&lt;long long&gt;::max_exponent10(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;long long&gt;::min_exponent10</primary></indexterm>numeric_limits&lt;long long&gt;::min_exponent10(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;long long&gt;::has_denorm_loss</primary></indexterm>numeric_limits&lt;long long&gt;::has_denorm_loss(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;long long&gt;::tinyness_before</primary></indexterm>numeric_limits&lt;long long&gt;::tinyness_before(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;long long&gt;::has_signaling_NaN</primary></indexterm>numeric_limits&lt;long long&gt;::has_signaling_NaN(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;long long&gt;::radix</primary></indexterm>numeric_limits&lt;long long&gt;::radix(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;long long&gt;::traps</primary></indexterm>numeric_limits&lt;long long&gt;::traps(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;long long&gt;::digits</primary></indexterm>numeric_limits&lt;long long&gt;::digits(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;long long&gt;::digits10</primary></indexterm>numeric_limits&lt;long long&gt;::digits10(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;long long&gt;::is_exact</primary></indexterm>numeric_limits&lt;long long&gt;::is_exact(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;long long&gt;::is_iec559</primary></indexterm>numeric_limits&lt;long long&gt;::is_iec559(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;long long&gt;::is_modulo</primary></indexterm>numeric_limits&lt;long long&gt;::is_modulo(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;long long&gt;::is_signed</primary></indexterm>numeric_limits&lt;long long&gt;::is_signed(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name struct numeric_limits<unsigned long long> -->
<SECT2>
<!--libgroup-->
<TITLE>struct numeric_limits&lt;unsigned long long&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for struct numeric_limits&lt;unsigned long long&gt;</TITLE>
<PARA>
No external methods are defined for libstdcxx - struct numeric_limits&lt;unsigned long long&gt;
in this part of the specification. See also the relevant architecture specific part of this specification.
</PARA>
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for struct numeric_limits&lt;unsigned long long&gt; specified in <XREF linkend="tbl-libstdcxx-struf-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-struf-data">
<TITLE>libstdcxx - struct numeric_limits&lt;unsigned long long&gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned long long&gt;::has_denorm</primary></indexterm>numeric_limits&lt;unsigned long long&gt;::has_denorm(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned long long&gt;::is_bounded</primary></indexterm>numeric_limits&lt;unsigned long long&gt;::is_bounded(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned long long&gt;::is_integer</primary></indexterm>numeric_limits&lt;unsigned long long&gt;::is_integer(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned long long&gt;::round_style</primary></indexterm>numeric_limits&lt;unsigned long long&gt;::round_style(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned long long&gt;::has_infinity</primary></indexterm>numeric_limits&lt;unsigned long long&gt;::has_infinity(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned long long&gt;::max_exponent</primary></indexterm>numeric_limits&lt;unsigned long long&gt;::max_exponent(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned long long&gt;::min_exponent</primary></indexterm>numeric_limits&lt;unsigned long long&gt;::min_exponent(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned long long&gt;::has_quiet_NaN</primary></indexterm>numeric_limits&lt;unsigned long long&gt;::has_quiet_NaN(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned long long&gt;::is_specialized</primary></indexterm>numeric_limits&lt;unsigned long long&gt;::is_specialized(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned long long&gt;::max_exponent10</primary></indexterm>numeric_limits&lt;unsigned long long&gt;::max_exponent10(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned long long&gt;::min_exponent10</primary></indexterm>numeric_limits&lt;unsigned long long&gt;::min_exponent10(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned long long&gt;::has_denorm_loss</primary></indexterm>numeric_limits&lt;unsigned long long&gt;::has_denorm_loss(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned long long&gt;::tinyness_before</primary></indexterm>numeric_limits&lt;unsigned long long&gt;::tinyness_before(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned long long&gt;::has_signaling_NaN</primary></indexterm>numeric_limits&lt;unsigned long long&gt;::has_signaling_NaN(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned long long&gt;::radix</primary></indexterm>numeric_limits&lt;unsigned long long&gt;::radix(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned long long&gt;::traps</primary></indexterm>numeric_limits&lt;unsigned long long&gt;::traps(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned long long&gt;::digits</primary></indexterm>numeric_limits&lt;unsigned long long&gt;::digits(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned long long&gt;::digits10</primary></indexterm>numeric_limits&lt;unsigned long long&gt;::digits10(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned long long&gt;::is_exact</primary></indexterm>numeric_limits&lt;unsigned long long&gt;::is_exact(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned long long&gt;::is_iec559</primary></indexterm>numeric_limits&lt;unsigned long long&gt;::is_iec559(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned long long&gt;::is_modulo</primary></indexterm>numeric_limits&lt;unsigned long long&gt;::is_modulo(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned long long&gt;::is_signed</primary></indexterm>numeric_limits&lt;unsigned long long&gt;::is_signed(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name struct numeric_limits<float> -->
<SECT2>
<!--libgroup-->
<TITLE>struct numeric_limits&lt;float&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for struct numeric_limits&lt;float&gt;</TITLE>
<PARA>
No external methods are defined for libstdcxx - struct numeric_limits&lt;float&gt;
in this part of the specification. See also the relevant architecture specific part of this specification.
</PARA>
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for struct numeric_limits&lt;float&gt; specified in <XREF linkend="tbl-libstdcxx-strug-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-strug-data">
<TITLE>libstdcxx - struct numeric_limits&lt;float&gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;float&gt;::has_denorm</primary></indexterm>numeric_limits&lt;float&gt;::has_denorm(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;float&gt;::is_bounded</primary></indexterm>numeric_limits&lt;float&gt;::is_bounded(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;float&gt;::is_integer</primary></indexterm>numeric_limits&lt;float&gt;::is_integer(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;float&gt;::round_style</primary></indexterm>numeric_limits&lt;float&gt;::round_style(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;float&gt;::has_infinity</primary></indexterm>numeric_limits&lt;float&gt;::has_infinity(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;float&gt;::max_exponent</primary></indexterm>numeric_limits&lt;float&gt;::max_exponent(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;float&gt;::min_exponent</primary></indexterm>numeric_limits&lt;float&gt;::min_exponent(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;float&gt;::has_quiet_NaN</primary></indexterm>numeric_limits&lt;float&gt;::has_quiet_NaN(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;float&gt;::is_specialized</primary></indexterm>numeric_limits&lt;float&gt;::is_specialized(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;float&gt;::max_exponent10</primary></indexterm>numeric_limits&lt;float&gt;::max_exponent10(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;float&gt;::min_exponent10</primary></indexterm>numeric_limits&lt;float&gt;::min_exponent10(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;float&gt;::has_denorm_loss</primary></indexterm>numeric_limits&lt;float&gt;::has_denorm_loss(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;float&gt;::tinyness_before</primary></indexterm>numeric_limits&lt;float&gt;::tinyness_before(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;float&gt;::has_signaling_NaN</primary></indexterm>numeric_limits&lt;float&gt;::has_signaling_NaN(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;float&gt;::radix</primary></indexterm>numeric_limits&lt;float&gt;::radix(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;float&gt;::traps</primary></indexterm>numeric_limits&lt;float&gt;::traps(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;float&gt;::digits</primary></indexterm>numeric_limits&lt;float&gt;::digits(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;float&gt;::digits10</primary></indexterm>numeric_limits&lt;float&gt;::digits10(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;float&gt;::is_exact</primary></indexterm>numeric_limits&lt;float&gt;::is_exact(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;float&gt;::is_iec559</primary></indexterm>numeric_limits&lt;float&gt;::is_iec559(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;float&gt;::is_modulo</primary></indexterm>numeric_limits&lt;float&gt;::is_modulo(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;float&gt;::is_signed</primary></indexterm>numeric_limits&lt;float&gt;::is_signed(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name struct numeric_limits<double> -->
<SECT2>
<!--libgroup-->
<TITLE>struct numeric_limits&lt;double&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for struct numeric_limits&lt;double&gt;</TITLE>
<PARA>
No external methods are defined for libstdcxx - struct numeric_limits&lt;double&gt;
in this part of the specification. See also the relevant architecture specific part of this specification.
</PARA>
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for struct numeric_limits&lt;double&gt; specified in <XREF linkend="tbl-libstdcxx-struh-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-struh-data">
<TITLE>libstdcxx - struct numeric_limits&lt;double&gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;double&gt;::has_denorm</primary></indexterm>numeric_limits&lt;double&gt;::has_denorm(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;double&gt;::is_bounded</primary></indexterm>numeric_limits&lt;double&gt;::is_bounded(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;double&gt;::is_integer</primary></indexterm>numeric_limits&lt;double&gt;::is_integer(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;double&gt;::round_style</primary></indexterm>numeric_limits&lt;double&gt;::round_style(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;double&gt;::has_infinity</primary></indexterm>numeric_limits&lt;double&gt;::has_infinity(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;double&gt;::max_exponent</primary></indexterm>numeric_limits&lt;double&gt;::max_exponent(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;double&gt;::min_exponent</primary></indexterm>numeric_limits&lt;double&gt;::min_exponent(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;double&gt;::has_quiet_NaN</primary></indexterm>numeric_limits&lt;double&gt;::has_quiet_NaN(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;double&gt;::is_specialized</primary></indexterm>numeric_limits&lt;double&gt;::is_specialized(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;double&gt;::max_exponent10</primary></indexterm>numeric_limits&lt;double&gt;::max_exponent10(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;double&gt;::min_exponent10</primary></indexterm>numeric_limits&lt;double&gt;::min_exponent10(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;double&gt;::has_denorm_loss</primary></indexterm>numeric_limits&lt;double&gt;::has_denorm_loss(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;double&gt;::tinyness_before</primary></indexterm>numeric_limits&lt;double&gt;::tinyness_before(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;double&gt;::has_signaling_NaN</primary></indexterm>numeric_limits&lt;double&gt;::has_signaling_NaN(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;double&gt;::radix</primary></indexterm>numeric_limits&lt;double&gt;::radix(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;double&gt;::traps</primary></indexterm>numeric_limits&lt;double&gt;::traps(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;double&gt;::digits</primary></indexterm>numeric_limits&lt;double&gt;::digits(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;double&gt;::digits10</primary></indexterm>numeric_limits&lt;double&gt;::digits10(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;double&gt;::is_exact</primary></indexterm>numeric_limits&lt;double&gt;::is_exact(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;double&gt;::is_iec559</primary></indexterm>numeric_limits&lt;double&gt;::is_iec559(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;double&gt;::is_modulo</primary></indexterm>numeric_limits&lt;double&gt;::is_modulo(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;double&gt;::is_signed</primary></indexterm>numeric_limits&lt;double&gt;::is_signed(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name struct numeric_limits<short> -->
<SECT2>
<!--libgroup-->
<TITLE>struct numeric_limits&lt;short&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for struct numeric_limits&lt;short&gt;</TITLE>
<PARA>
No external methods are defined for libstdcxx - struct numeric_limits&lt;short&gt;
in this part of the specification. See also the relevant architecture specific part of this specification.
</PARA>
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for struct numeric_limits&lt;short&gt; specified in <XREF linkend="tbl-libstdcxx-strui-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-strui-data">
<TITLE>libstdcxx - struct numeric_limits&lt;short&gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;short&gt;::has_denorm</primary></indexterm>numeric_limits&lt;short&gt;::has_denorm(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;short&gt;::is_bounded</primary></indexterm>numeric_limits&lt;short&gt;::is_bounded(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;short&gt;::is_integer</primary></indexterm>numeric_limits&lt;short&gt;::is_integer(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;short&gt;::round_style</primary></indexterm>numeric_limits&lt;short&gt;::round_style(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;short&gt;::has_infinity</primary></indexterm>numeric_limits&lt;short&gt;::has_infinity(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;short&gt;::max_exponent</primary></indexterm>numeric_limits&lt;short&gt;::max_exponent(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;short&gt;::min_exponent</primary></indexterm>numeric_limits&lt;short&gt;::min_exponent(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;short&gt;::has_quiet_NaN</primary></indexterm>numeric_limits&lt;short&gt;::has_quiet_NaN(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;short&gt;::is_specialized</primary></indexterm>numeric_limits&lt;short&gt;::is_specialized(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;short&gt;::max_exponent10</primary></indexterm>numeric_limits&lt;short&gt;::max_exponent10(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;short&gt;::min_exponent10</primary></indexterm>numeric_limits&lt;short&gt;::min_exponent10(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;short&gt;::has_denorm_loss</primary></indexterm>numeric_limits&lt;short&gt;::has_denorm_loss(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;short&gt;::tinyness_before</primary></indexterm>numeric_limits&lt;short&gt;::tinyness_before(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;short&gt;::has_signaling_NaN</primary></indexterm>numeric_limits&lt;short&gt;::has_signaling_NaN(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;short&gt;::radix</primary></indexterm>numeric_limits&lt;short&gt;::radix(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;short&gt;::traps</primary></indexterm>numeric_limits&lt;short&gt;::traps(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;short&gt;::digits</primary></indexterm>numeric_limits&lt;short&gt;::digits(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;short&gt;::digits10</primary></indexterm>numeric_limits&lt;short&gt;::digits10(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;short&gt;::is_exact</primary></indexterm>numeric_limits&lt;short&gt;::is_exact(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;short&gt;::is_iec559</primary></indexterm>numeric_limits&lt;short&gt;::is_iec559(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;short&gt;::is_modulo</primary></indexterm>numeric_limits&lt;short&gt;::is_modulo(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;short&gt;::is_signed</primary></indexterm>numeric_limits&lt;short&gt;::is_signed(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name struct numeric_limits<unsigned short> -->
<SECT2>
<!--libgroup-->
<TITLE>struct numeric_limits&lt;unsigned short&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for struct numeric_limits&lt;unsigned short&gt;</TITLE>
<PARA>
No external methods are defined for libstdcxx - struct numeric_limits&lt;unsigned short&gt;
in this part of the specification. See also the relevant architecture specific part of this specification.
</PARA>
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for struct numeric_limits&lt;unsigned short&gt; specified in <XREF linkend="tbl-libstdcxx-struj-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-struj-data">
<TITLE>libstdcxx - struct numeric_limits&lt;unsigned short&gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned short&gt;::has_denorm</primary></indexterm>numeric_limits&lt;unsigned short&gt;::has_denorm(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned short&gt;::is_bounded</primary></indexterm>numeric_limits&lt;unsigned short&gt;::is_bounded(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned short&gt;::is_integer</primary></indexterm>numeric_limits&lt;unsigned short&gt;::is_integer(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned short&gt;::round_style</primary></indexterm>numeric_limits&lt;unsigned short&gt;::round_style(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned short&gt;::has_infinity</primary></indexterm>numeric_limits&lt;unsigned short&gt;::has_infinity(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned short&gt;::max_exponent</primary></indexterm>numeric_limits&lt;unsigned short&gt;::max_exponent(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned short&gt;::min_exponent</primary></indexterm>numeric_limits&lt;unsigned short&gt;::min_exponent(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned short&gt;::has_quiet_NaN</primary></indexterm>numeric_limits&lt;unsigned short&gt;::has_quiet_NaN(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned short&gt;::is_specialized</primary></indexterm>numeric_limits&lt;unsigned short&gt;::is_specialized(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned short&gt;::max_exponent10</primary></indexterm>numeric_limits&lt;unsigned short&gt;::max_exponent10(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned short&gt;::min_exponent10</primary></indexterm>numeric_limits&lt;unsigned short&gt;::min_exponent10(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned short&gt;::has_denorm_loss</primary></indexterm>numeric_limits&lt;unsigned short&gt;::has_denorm_loss(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned short&gt;::tinyness_before</primary></indexterm>numeric_limits&lt;unsigned short&gt;::tinyness_before(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned short&gt;::has_signaling_NaN</primary></indexterm>numeric_limits&lt;unsigned short&gt;::has_signaling_NaN(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned short&gt;::radix</primary></indexterm>numeric_limits&lt;unsigned short&gt;::radix(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned short&gt;::traps</primary></indexterm>numeric_limits&lt;unsigned short&gt;::traps(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned short&gt;::digits</primary></indexterm>numeric_limits&lt;unsigned short&gt;::digits(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned short&gt;::digits10</primary></indexterm>numeric_limits&lt;unsigned short&gt;::digits10(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned short&gt;::is_exact</primary></indexterm>numeric_limits&lt;unsigned short&gt;::is_exact(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned short&gt;::is_iec559</primary></indexterm>numeric_limits&lt;unsigned short&gt;::is_iec559(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned short&gt;::is_modulo</primary></indexterm>numeric_limits&lt;unsigned short&gt;::is_modulo(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned short&gt;::is_signed</primary></indexterm>numeric_limits&lt;unsigned short&gt;::is_signed(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name struct numeric_limits<int> -->
<SECT2>
<!--libgroup-->
<TITLE>struct numeric_limits&lt;int&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for struct numeric_limits&lt;int&gt;</TITLE>
<PARA>
No external methods are defined for libstdcxx - struct numeric_limits&lt;int&gt;
in this part of the specification. See also the relevant architecture specific part of this specification.
</PARA>
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for struct numeric_limits&lt;int&gt; specified in <XREF linkend="tbl-libstdcxx-struk-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-struk-data">
<TITLE>libstdcxx - struct numeric_limits&lt;int&gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;int&gt;::has_denorm</primary></indexterm>numeric_limits&lt;int&gt;::has_denorm(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;int&gt;::is_bounded</primary></indexterm>numeric_limits&lt;int&gt;::is_bounded(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;int&gt;::is_integer</primary></indexterm>numeric_limits&lt;int&gt;::is_integer(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;int&gt;::round_style</primary></indexterm>numeric_limits&lt;int&gt;::round_style(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;int&gt;::has_infinity</primary></indexterm>numeric_limits&lt;int&gt;::has_infinity(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;int&gt;::max_exponent</primary></indexterm>numeric_limits&lt;int&gt;::max_exponent(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;int&gt;::min_exponent</primary></indexterm>numeric_limits&lt;int&gt;::min_exponent(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;int&gt;::has_quiet_NaN</primary></indexterm>numeric_limits&lt;int&gt;::has_quiet_NaN(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;int&gt;::is_specialized</primary></indexterm>numeric_limits&lt;int&gt;::is_specialized(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;int&gt;::max_exponent10</primary></indexterm>numeric_limits&lt;int&gt;::max_exponent10(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;int&gt;::min_exponent10</primary></indexterm>numeric_limits&lt;int&gt;::min_exponent10(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;int&gt;::has_denorm_loss</primary></indexterm>numeric_limits&lt;int&gt;::has_denorm_loss(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;int&gt;::tinyness_before</primary></indexterm>numeric_limits&lt;int&gt;::tinyness_before(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;int&gt;::has_signaling_NaN</primary></indexterm>numeric_limits&lt;int&gt;::has_signaling_NaN(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;int&gt;::radix</primary></indexterm>numeric_limits&lt;int&gt;::radix(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;int&gt;::traps</primary></indexterm>numeric_limits&lt;int&gt;::traps(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;int&gt;::digits</primary></indexterm>numeric_limits&lt;int&gt;::digits(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;int&gt;::digits10</primary></indexterm>numeric_limits&lt;int&gt;::digits10(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;int&gt;::is_exact</primary></indexterm>numeric_limits&lt;int&gt;::is_exact(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;int&gt;::is_iec559</primary></indexterm>numeric_limits&lt;int&gt;::is_iec559(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;int&gt;::is_modulo</primary></indexterm>numeric_limits&lt;int&gt;::is_modulo(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;int&gt;::is_signed</primary></indexterm>numeric_limits&lt;int&gt;::is_signed(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name struct numeric_limits<unsigned int> -->
<SECT2>
<!--libgroup-->
<TITLE>struct numeric_limits&lt;unsigned int&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for struct numeric_limits&lt;unsigned int&gt;</TITLE>
<PARA>
No external methods are defined for libstdcxx - struct numeric_limits&lt;unsigned int&gt;
in this part of the specification. See also the relevant architecture specific part of this specification.
</PARA>
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for struct numeric_limits&lt;unsigned int&gt; specified in <XREF linkend="tbl-libstdcxx-strul-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-strul-data">
<TITLE>libstdcxx - struct numeric_limits&lt;unsigned int&gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned int&gt;::has_denorm</primary></indexterm>numeric_limits&lt;unsigned int&gt;::has_denorm(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned int&gt;::is_bounded</primary></indexterm>numeric_limits&lt;unsigned int&gt;::is_bounded(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned int&gt;::is_integer</primary></indexterm>numeric_limits&lt;unsigned int&gt;::is_integer(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned int&gt;::round_style</primary></indexterm>numeric_limits&lt;unsigned int&gt;::round_style(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned int&gt;::has_infinity</primary></indexterm>numeric_limits&lt;unsigned int&gt;::has_infinity(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned int&gt;::max_exponent</primary></indexterm>numeric_limits&lt;unsigned int&gt;::max_exponent(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned int&gt;::min_exponent</primary></indexterm>numeric_limits&lt;unsigned int&gt;::min_exponent(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned int&gt;::has_quiet_NaN</primary></indexterm>numeric_limits&lt;unsigned int&gt;::has_quiet_NaN(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned int&gt;::is_specialized</primary></indexterm>numeric_limits&lt;unsigned int&gt;::is_specialized(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned int&gt;::max_exponent10</primary></indexterm>numeric_limits&lt;unsigned int&gt;::max_exponent10(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned int&gt;::min_exponent10</primary></indexterm>numeric_limits&lt;unsigned int&gt;::min_exponent10(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned int&gt;::has_denorm_loss</primary></indexterm>numeric_limits&lt;unsigned int&gt;::has_denorm_loss(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned int&gt;::tinyness_before</primary></indexterm>numeric_limits&lt;unsigned int&gt;::tinyness_before(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned int&gt;::has_signaling_NaN</primary></indexterm>numeric_limits&lt;unsigned int&gt;::has_signaling_NaN(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned int&gt;::radix</primary></indexterm>numeric_limits&lt;unsigned int&gt;::radix(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned int&gt;::traps</primary></indexterm>numeric_limits&lt;unsigned int&gt;::traps(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned int&gt;::digits</primary></indexterm>numeric_limits&lt;unsigned int&gt;::digits(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned int&gt;::digits10</primary></indexterm>numeric_limits&lt;unsigned int&gt;::digits10(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned int&gt;::is_exact</primary></indexterm>numeric_limits&lt;unsigned int&gt;::is_exact(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned int&gt;::is_iec559</primary></indexterm>numeric_limits&lt;unsigned int&gt;::is_iec559(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned int&gt;::is_modulo</primary></indexterm>numeric_limits&lt;unsigned int&gt;::is_modulo(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned int&gt;::is_signed</primary></indexterm>numeric_limits&lt;unsigned int&gt;::is_signed(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name struct numeric_limits<long> -->
<SECT2>
<!--libgroup-->
<TITLE>struct numeric_limits&lt;long&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for struct numeric_limits&lt;long&gt;</TITLE>
<PARA>
No external methods are defined for libstdcxx - struct numeric_limits&lt;long&gt;
in this part of the specification. See also the relevant architecture specific part of this specification.
</PARA>
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for struct numeric_limits&lt;long&gt; specified in <XREF linkend="tbl-libstdcxx-strum-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-strum-data">
<TITLE>libstdcxx - struct numeric_limits&lt;long&gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;long&gt;::has_denorm</primary></indexterm>numeric_limits&lt;long&gt;::has_denorm(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;long&gt;::is_bounded</primary></indexterm>numeric_limits&lt;long&gt;::is_bounded(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;long&gt;::is_integer</primary></indexterm>numeric_limits&lt;long&gt;::is_integer(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;long&gt;::round_style</primary></indexterm>numeric_limits&lt;long&gt;::round_style(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;long&gt;::has_infinity</primary></indexterm>numeric_limits&lt;long&gt;::has_infinity(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;long&gt;::max_exponent</primary></indexterm>numeric_limits&lt;long&gt;::max_exponent(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;long&gt;::min_exponent</primary></indexterm>numeric_limits&lt;long&gt;::min_exponent(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;long&gt;::has_quiet_NaN</primary></indexterm>numeric_limits&lt;long&gt;::has_quiet_NaN(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;long&gt;::is_specialized</primary></indexterm>numeric_limits&lt;long&gt;::is_specialized(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;long&gt;::max_exponent10</primary></indexterm>numeric_limits&lt;long&gt;::max_exponent10(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;long&gt;::min_exponent10</primary></indexterm>numeric_limits&lt;long&gt;::min_exponent10(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;long&gt;::has_denorm_loss</primary></indexterm>numeric_limits&lt;long&gt;::has_denorm_loss(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;long&gt;::tinyness_before</primary></indexterm>numeric_limits&lt;long&gt;::tinyness_before(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;long&gt;::has_signaling_NaN</primary></indexterm>numeric_limits&lt;long&gt;::has_signaling_NaN(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;long&gt;::radix</primary></indexterm>numeric_limits&lt;long&gt;::radix(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;long&gt;::traps</primary></indexterm>numeric_limits&lt;long&gt;::traps(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;long&gt;::digits</primary></indexterm>numeric_limits&lt;long&gt;::digits(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;long&gt;::digits10</primary></indexterm>numeric_limits&lt;long&gt;::digits10(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;long&gt;::is_exact</primary></indexterm>numeric_limits&lt;long&gt;::is_exact(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;long&gt;::is_iec559</primary></indexterm>numeric_limits&lt;long&gt;::is_iec559(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;long&gt;::is_modulo</primary></indexterm>numeric_limits&lt;long&gt;::is_modulo(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;long&gt;::is_signed</primary></indexterm>numeric_limits&lt;long&gt;::is_signed(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name struct numeric_limits<unsigned long> -->
<SECT2>
<!--libgroup-->
<TITLE>struct numeric_limits&lt;unsigned long&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for struct numeric_limits&lt;unsigned long&gt;</TITLE>
<PARA>
No external methods are defined for libstdcxx - struct numeric_limits&lt;unsigned long&gt;
in this part of the specification. See also the relevant architecture specific part of this specification.
</PARA>
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for struct numeric_limits&lt;unsigned long&gt; specified in <XREF linkend="tbl-libstdcxx-strun-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-strun-data">
<TITLE>libstdcxx - struct numeric_limits&lt;unsigned long&gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned long&gt;::has_denorm</primary></indexterm>numeric_limits&lt;unsigned long&gt;::has_denorm(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned long&gt;::is_bounded</primary></indexterm>numeric_limits&lt;unsigned long&gt;::is_bounded(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned long&gt;::is_integer</primary></indexterm>numeric_limits&lt;unsigned long&gt;::is_integer(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned long&gt;::round_style</primary></indexterm>numeric_limits&lt;unsigned long&gt;::round_style(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned long&gt;::has_infinity</primary></indexterm>numeric_limits&lt;unsigned long&gt;::has_infinity(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned long&gt;::max_exponent</primary></indexterm>numeric_limits&lt;unsigned long&gt;::max_exponent(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned long&gt;::min_exponent</primary></indexterm>numeric_limits&lt;unsigned long&gt;::min_exponent(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned long&gt;::has_quiet_NaN</primary></indexterm>numeric_limits&lt;unsigned long&gt;::has_quiet_NaN(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned long&gt;::is_specialized</primary></indexterm>numeric_limits&lt;unsigned long&gt;::is_specialized(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned long&gt;::max_exponent10</primary></indexterm>numeric_limits&lt;unsigned long&gt;::max_exponent10(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned long&gt;::min_exponent10</primary></indexterm>numeric_limits&lt;unsigned long&gt;::min_exponent10(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned long&gt;::has_denorm_loss</primary></indexterm>numeric_limits&lt;unsigned long&gt;::has_denorm_loss(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned long&gt;::tinyness_before</primary></indexterm>numeric_limits&lt;unsigned long&gt;::tinyness_before(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned long&gt;::has_signaling_NaN</primary></indexterm>numeric_limits&lt;unsigned long&gt;::has_signaling_NaN(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned long&gt;::radix</primary></indexterm>numeric_limits&lt;unsigned long&gt;::radix(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned long&gt;::traps</primary></indexterm>numeric_limits&lt;unsigned long&gt;::traps(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned long&gt;::digits</primary></indexterm>numeric_limits&lt;unsigned long&gt;::digits(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned long&gt;::digits10</primary></indexterm>numeric_limits&lt;unsigned long&gt;::digits10(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned long&gt;::is_exact</primary></indexterm>numeric_limits&lt;unsigned long&gt;::is_exact(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned long&gt;::is_iec559</primary></indexterm>numeric_limits&lt;unsigned long&gt;::is_iec559(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned long&gt;::is_modulo</primary></indexterm>numeric_limits&lt;unsigned long&gt;::is_modulo(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned long&gt;::is_signed</primary></indexterm>numeric_limits&lt;unsigned long&gt;::is_signed(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name struct numeric_limits<wchar_t> -->
<SECT2>
<!--libgroup-->
<TITLE>struct numeric_limits&lt;wchar_t&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for struct numeric_limits&lt;wchar_t&gt;</TITLE>
<PARA>
No external methods are defined for libstdcxx - struct numeric_limits&lt;wchar_t&gt;
in this part of the specification. See also the relevant architecture specific part of this specification.
</PARA>
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for struct numeric_limits&lt;wchar_t&gt; specified in <XREF linkend="tbl-libstdcxx-struo-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-struo-data">
<TITLE>libstdcxx - struct numeric_limits&lt;wchar_t&gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;wchar_t&gt;::has_denorm</primary></indexterm>numeric_limits&lt;wchar_t&gt;::has_denorm(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;wchar_t&gt;::is_bounded</primary></indexterm>numeric_limits&lt;wchar_t&gt;::is_bounded(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;wchar_t&gt;::is_integer</primary></indexterm>numeric_limits&lt;wchar_t&gt;::is_integer(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;wchar_t&gt;::round_style</primary></indexterm>numeric_limits&lt;wchar_t&gt;::round_style(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;wchar_t&gt;::has_infinity</primary></indexterm>numeric_limits&lt;wchar_t&gt;::has_infinity(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;wchar_t&gt;::max_exponent</primary></indexterm>numeric_limits&lt;wchar_t&gt;::max_exponent(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;wchar_t&gt;::min_exponent</primary></indexterm>numeric_limits&lt;wchar_t&gt;::min_exponent(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;wchar_t&gt;::has_quiet_NaN</primary></indexterm>numeric_limits&lt;wchar_t&gt;::has_quiet_NaN(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;wchar_t&gt;::is_specialized</primary></indexterm>numeric_limits&lt;wchar_t&gt;::is_specialized(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;wchar_t&gt;::max_exponent10</primary></indexterm>numeric_limits&lt;wchar_t&gt;::max_exponent10(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;wchar_t&gt;::min_exponent10</primary></indexterm>numeric_limits&lt;wchar_t&gt;::min_exponent10(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;wchar_t&gt;::has_denorm_loss</primary></indexterm>numeric_limits&lt;wchar_t&gt;::has_denorm_loss(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;wchar_t&gt;::tinyness_before</primary></indexterm>numeric_limits&lt;wchar_t&gt;::tinyness_before(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;wchar_t&gt;::has_signaling_NaN</primary></indexterm>numeric_limits&lt;wchar_t&gt;::has_signaling_NaN(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;wchar_t&gt;::radix</primary></indexterm>numeric_limits&lt;wchar_t&gt;::radix(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;wchar_t&gt;::traps</primary></indexterm>numeric_limits&lt;wchar_t&gt;::traps(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;wchar_t&gt;::digits</primary></indexterm>numeric_limits&lt;wchar_t&gt;::digits(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;wchar_t&gt;::digits10</primary></indexterm>numeric_limits&lt;wchar_t&gt;::digits10(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;wchar_t&gt;::is_exact</primary></indexterm>numeric_limits&lt;wchar_t&gt;::is_exact(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;wchar_t&gt;::is_iec559</primary></indexterm>numeric_limits&lt;wchar_t&gt;::is_iec559(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;wchar_t&gt;::is_modulo</primary></indexterm>numeric_limits&lt;wchar_t&gt;::is_modulo(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;wchar_t&gt;::is_signed</primary></indexterm>numeric_limits&lt;wchar_t&gt;::is_signed(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name struct numeric_limits<unsigned char> -->
<SECT2>
<!--libgroup-->
<TITLE>struct numeric_limits&lt;unsigned char&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for struct numeric_limits&lt;unsigned char&gt;</TITLE>
<PARA>
No external methods are defined for libstdcxx - struct numeric_limits&lt;unsigned char&gt;
in this part of the specification. See also the relevant architecture specific part of this specification.
</PARA>
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for struct numeric_limits&lt;unsigned char&gt; specified in <XREF linkend="tbl-libstdcxx-strup-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-strup-data">
<TITLE>libstdcxx - struct numeric_limits&lt;unsigned char&gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned char&gt;::has_denorm</primary></indexterm>numeric_limits&lt;unsigned char&gt;::has_denorm(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned char&gt;::is_bounded</primary></indexterm>numeric_limits&lt;unsigned char&gt;::is_bounded(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned char&gt;::is_integer</primary></indexterm>numeric_limits&lt;unsigned char&gt;::is_integer(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned char&gt;::round_style</primary></indexterm>numeric_limits&lt;unsigned char&gt;::round_style(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned char&gt;::has_infinity</primary></indexterm>numeric_limits&lt;unsigned char&gt;::has_infinity(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned char&gt;::max_exponent</primary></indexterm>numeric_limits&lt;unsigned char&gt;::max_exponent(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned char&gt;::min_exponent</primary></indexterm>numeric_limits&lt;unsigned char&gt;::min_exponent(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned char&gt;::has_quiet_NaN</primary></indexterm>numeric_limits&lt;unsigned char&gt;::has_quiet_NaN(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned char&gt;::is_specialized</primary></indexterm>numeric_limits&lt;unsigned char&gt;::is_specialized(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned char&gt;::max_exponent10</primary></indexterm>numeric_limits&lt;unsigned char&gt;::max_exponent10(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned char&gt;::min_exponent10</primary></indexterm>numeric_limits&lt;unsigned char&gt;::min_exponent10(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned char&gt;::has_denorm_loss</primary></indexterm>numeric_limits&lt;unsigned char&gt;::has_denorm_loss(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned char&gt;::tinyness_before</primary></indexterm>numeric_limits&lt;unsigned char&gt;::tinyness_before(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned char&gt;::has_signaling_NaN</primary></indexterm>numeric_limits&lt;unsigned char&gt;::has_signaling_NaN(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned char&gt;::radix</primary></indexterm>numeric_limits&lt;unsigned char&gt;::radix(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned char&gt;::traps</primary></indexterm>numeric_limits&lt;unsigned char&gt;::traps(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned char&gt;::digits</primary></indexterm>numeric_limits&lt;unsigned char&gt;::digits(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned char&gt;::digits10</primary></indexterm>numeric_limits&lt;unsigned char&gt;::digits10(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned char&gt;::is_exact</primary></indexterm>numeric_limits&lt;unsigned char&gt;::is_exact(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned char&gt;::is_iec559</primary></indexterm>numeric_limits&lt;unsigned char&gt;::is_iec559(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned char&gt;::is_modulo</primary></indexterm>numeric_limits&lt;unsigned char&gt;::is_modulo(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;unsigned char&gt;::is_signed</primary></indexterm>numeric_limits&lt;unsigned char&gt;::is_signed(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name struct numeric_limits<signed char> -->
<SECT2>
<!--libgroup-->
<TITLE>struct numeric_limits&lt;signed char&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for struct numeric_limits&lt;signed char&gt;</TITLE>
<PARA>
No external methods are defined for libstdcxx - struct numeric_limits&lt;signed char&gt;
in this part of the specification. See also the relevant architecture specific part of this specification.
</PARA>
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for struct numeric_limits&lt;signed char&gt; specified in <XREF linkend="tbl-libstdcxx-struq-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-struq-data">
<TITLE>libstdcxx - struct numeric_limits&lt;signed char&gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;signed char&gt;::has_denorm</primary></indexterm>numeric_limits&lt;signed char&gt;::has_denorm(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;signed char&gt;::is_bounded</primary></indexterm>numeric_limits&lt;signed char&gt;::is_bounded(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;signed char&gt;::is_integer</primary></indexterm>numeric_limits&lt;signed char&gt;::is_integer(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;signed char&gt;::round_style</primary></indexterm>numeric_limits&lt;signed char&gt;::round_style(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;signed char&gt;::has_infinity</primary></indexterm>numeric_limits&lt;signed char&gt;::has_infinity(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;signed char&gt;::max_exponent</primary></indexterm>numeric_limits&lt;signed char&gt;::max_exponent(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;signed char&gt;::min_exponent</primary></indexterm>numeric_limits&lt;signed char&gt;::min_exponent(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;signed char&gt;::has_quiet_NaN</primary></indexterm>numeric_limits&lt;signed char&gt;::has_quiet_NaN(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;signed char&gt;::is_specialized</primary></indexterm>numeric_limits&lt;signed char&gt;::is_specialized(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;signed char&gt;::max_exponent10</primary></indexterm>numeric_limits&lt;signed char&gt;::max_exponent10(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;signed char&gt;::min_exponent10</primary></indexterm>numeric_limits&lt;signed char&gt;::min_exponent10(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;signed char&gt;::has_denorm_loss</primary></indexterm>numeric_limits&lt;signed char&gt;::has_denorm_loss(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;signed char&gt;::tinyness_before</primary></indexterm>numeric_limits&lt;signed char&gt;::tinyness_before(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;signed char&gt;::has_signaling_NaN</primary></indexterm>numeric_limits&lt;signed char&gt;::has_signaling_NaN(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;signed char&gt;::radix</primary></indexterm>numeric_limits&lt;signed char&gt;::radix(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;signed char&gt;::traps</primary></indexterm>numeric_limits&lt;signed char&gt;::traps(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;signed char&gt;::digits</primary></indexterm>numeric_limits&lt;signed char&gt;::digits(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;signed char&gt;::digits10</primary></indexterm>numeric_limits&lt;signed char&gt;::digits10(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;signed char&gt;::is_exact</primary></indexterm>numeric_limits&lt;signed char&gt;::is_exact(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;signed char&gt;::is_iec559</primary></indexterm>numeric_limits&lt;signed char&gt;::is_iec559(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;signed char&gt;::is_modulo</primary></indexterm>numeric_limits&lt;signed char&gt;::is_modulo(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;signed char&gt;::is_signed</primary></indexterm>numeric_limits&lt;signed char&gt;::is_signed(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name struct numeric_limits<char> -->
<SECT2>
<!--libgroup-->
<TITLE>struct numeric_limits&lt;char&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for struct numeric_limits&lt;char&gt;</TITLE>
<PARA>
No external methods are defined for libstdcxx - struct numeric_limits&lt;char&gt;
in this part of the specification. See also the relevant architecture specific part of this specification.
</PARA>
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for struct numeric_limits&lt;char&gt; specified in <XREF linkend="tbl-libstdcxx-strur-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-strur-data">
<TITLE>libstdcxx - struct numeric_limits&lt;char&gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;char&gt;::has_denorm</primary></indexterm>numeric_limits&lt;char&gt;::has_denorm(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;char&gt;::is_bounded</primary></indexterm>numeric_limits&lt;char&gt;::is_bounded(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;char&gt;::is_integer</primary></indexterm>numeric_limits&lt;char&gt;::is_integer(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;char&gt;::round_style</primary></indexterm>numeric_limits&lt;char&gt;::round_style(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;char&gt;::has_infinity</primary></indexterm>numeric_limits&lt;char&gt;::has_infinity(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;char&gt;::max_exponent</primary></indexterm>numeric_limits&lt;char&gt;::max_exponent(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;char&gt;::min_exponent</primary></indexterm>numeric_limits&lt;char&gt;::min_exponent(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;char&gt;::has_quiet_NaN</primary></indexterm>numeric_limits&lt;char&gt;::has_quiet_NaN(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;char&gt;::is_specialized</primary></indexterm>numeric_limits&lt;char&gt;::is_specialized(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;char&gt;::max_exponent10</primary></indexterm>numeric_limits&lt;char&gt;::max_exponent10(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;char&gt;::min_exponent10</primary></indexterm>numeric_limits&lt;char&gt;::min_exponent10(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;char&gt;::has_denorm_loss</primary></indexterm>numeric_limits&lt;char&gt;::has_denorm_loss(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;char&gt;::tinyness_before</primary></indexterm>numeric_limits&lt;char&gt;::tinyness_before(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;char&gt;::has_signaling_NaN</primary></indexterm>numeric_limits&lt;char&gt;::has_signaling_NaN(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;char&gt;::radix</primary></indexterm>numeric_limits&lt;char&gt;::radix(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;char&gt;::traps</primary></indexterm>numeric_limits&lt;char&gt;::traps(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;char&gt;::digits</primary></indexterm>numeric_limits&lt;char&gt;::digits(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;char&gt;::digits10</primary></indexterm>numeric_limits&lt;char&gt;::digits10(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;char&gt;::is_exact</primary></indexterm>numeric_limits&lt;char&gt;::is_exact(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;char&gt;::is_iec559</primary></indexterm>numeric_limits&lt;char&gt;::is_iec559(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;char&gt;::is_modulo</primary></indexterm>numeric_limits&lt;char&gt;::is_modulo(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;char&gt;::is_signed</primary></indexterm>numeric_limits&lt;char&gt;::is_signed(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name struct numeric_limits<bool> -->
<SECT2>
<!--libgroup-->
<TITLE>struct numeric_limits&lt;bool&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for struct numeric_limits&lt;bool&gt;</TITLE>
<PARA>
No external methods are defined for libstdcxx - struct numeric_limits&lt;bool&gt;
in this part of the specification. See also the relevant architecture specific part of this specification.
</PARA>
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for struct numeric_limits&lt;bool&gt; specified in <XREF linkend="tbl-libstdcxx-strus-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-strus-data">
<TITLE>libstdcxx - struct numeric_limits&lt;bool&gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;bool&gt;::has_denorm</primary></indexterm>numeric_limits&lt;bool&gt;::has_denorm(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;bool&gt;::is_bounded</primary></indexterm>numeric_limits&lt;bool&gt;::is_bounded(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;bool&gt;::is_integer</primary></indexterm>numeric_limits&lt;bool&gt;::is_integer(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;bool&gt;::round_style</primary></indexterm>numeric_limits&lt;bool&gt;::round_style(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;bool&gt;::has_infinity</primary></indexterm>numeric_limits&lt;bool&gt;::has_infinity(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;bool&gt;::max_exponent</primary></indexterm>numeric_limits&lt;bool&gt;::max_exponent(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;bool&gt;::min_exponent</primary></indexterm>numeric_limits&lt;bool&gt;::min_exponent(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;bool&gt;::has_quiet_NaN</primary></indexterm>numeric_limits&lt;bool&gt;::has_quiet_NaN(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;bool&gt;::is_specialized</primary></indexterm>numeric_limits&lt;bool&gt;::is_specialized(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;bool&gt;::max_exponent10</primary></indexterm>numeric_limits&lt;bool&gt;::max_exponent10(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;bool&gt;::min_exponent10</primary></indexterm>numeric_limits&lt;bool&gt;::min_exponent10(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;bool&gt;::has_denorm_loss</primary></indexterm>numeric_limits&lt;bool&gt;::has_denorm_loss(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;bool&gt;::tinyness_before</primary></indexterm>numeric_limits&lt;bool&gt;::tinyness_before(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;bool&gt;::has_signaling_NaN</primary></indexterm>numeric_limits&lt;bool&gt;::has_signaling_NaN(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;bool&gt;::radix</primary></indexterm>numeric_limits&lt;bool&gt;::radix(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;bool&gt;::traps</primary></indexterm>numeric_limits&lt;bool&gt;::traps(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;bool&gt;::digits</primary></indexterm>numeric_limits&lt;bool&gt;::digits(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;bool&gt;::digits10</primary></indexterm>numeric_limits&lt;bool&gt;::digits10(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;bool&gt;::is_exact</primary></indexterm>numeric_limits&lt;bool&gt;::is_exact(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;bool&gt;::is_iec559</primary></indexterm>numeric_limits&lt;bool&gt;::is_iec559(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;bool&gt;::is_modulo</primary></indexterm>numeric_limits&lt;bool&gt;::is_modulo(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numeric_limits&lt;bool&gt;::is_signed</primary></indexterm>numeric_limits&lt;bool&gt;::is_signed(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::ctype_base -->
<SECT2>
<!--libgroup-->
<TITLE>Class ctype_base</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for ctype_base</TITLE>
<PARA>
</PARA>
<PARA>
The Run Time Type Information for the std::ctype_base  class
is described by <XREF LINKEND="rtti-24006">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24006">
<TITLE>typeinfo for ctype_base</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__class_type_info</primary></indexterm>vtable for __cxxabiv1::__class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for ctype_base</primary></indexterm>typeinfo name for ctype_base</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class ctype_base</TITLE>
<PARA>
No external methods are defined for libstdcxx - Class std::ctype_base
in this part of the specification. See also the relevant architecture specific part of this specification.
</PARA>
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::ctype_base specified in <XREF linkend="tbl-libstdcxx-clatw-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clatw-data">
<TITLE>libstdcxx - Class ctype_base Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ctype_base::alnum</primary></indexterm>ctype_base::alnum(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ctype_base::alpha</primary></indexterm>ctype_base::alpha(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ctype_base::cntrl</primary></indexterm>ctype_base::cntrl(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ctype_base::digit</primary></indexterm>ctype_base::digit(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ctype_base::graph</primary></indexterm>ctype_base::graph(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ctype_base::lower</primary></indexterm>ctype_base::lower(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ctype_base::print</primary></indexterm>ctype_base::print(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ctype_base::punct</primary></indexterm>ctype_base::punct(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ctype_base::space</primary></indexterm>ctype_base::space(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ctype_base::upper</primary></indexterm>ctype_base::upper(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ctype_base::xdigit</primary></indexterm>ctype_base::xdigit(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for ctype_base</primary></indexterm>typeinfo for ctype_base(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for ctype_base</primary></indexterm>typeinfo name for ctype_base(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::__ctype_abstract_base<char> -->
<SECT2>
<!--libgroup-->
<TITLE>Class __ctype_abstract_base&lt;char&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for __ctype_abstract_base&lt;char&gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::__ctype_abstract_base&lt;char&gt; class
is described by <XREF LINKEND="cls-24301-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24301-0">
<TITLE>Primary vtable for __ctype_abstract_base&lt;char&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for __ctype_abstract_base&lt;char&gt;</primary></indexterm>typeinfo for __ctype_abstract_base&lt;char&gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary></primary></indexterm></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary></primary></indexterm></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;11&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;12&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;13&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class __ctype_abstract_base&lt;char&gt;</TITLE>
<PARA>
No external methods are defined for libstdcxx - Class std::__ctype_abstract_base&lt;char&gt;
in this part of the specification. See also the relevant architecture specific part of this specification.
</PARA>
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::__ctype_abstract_base&lt;char&gt; specified in <XREF linkend="tbl-libstdcxx-clatx-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clatx-data">
<TITLE>libstdcxx - Class __ctype_abstract_base&lt;char&gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for __ctype_abstract_base&lt;char&gt;</primary></indexterm>typeinfo for __ctype_abstract_base&lt;char&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for __ctype_abstract_base&lt;char&gt;</primary></indexterm>typeinfo name for __ctype_abstract_base&lt;char&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __ctype_abstract_base&lt;char&gt;</primary></indexterm>vtable for __ctype_abstract_base&lt;char&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::__ctype_abstract_base<wchar_t> -->
<SECT2>
<!--libgroup-->
<TITLE>Class __ctype_abstract_base&lt;wchar_t&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for __ctype_abstract_base&lt;wchar_t&gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::__ctype_abstract_base&lt;wchar_t&gt; class
is described by <XREF LINKEND="cls-24300-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24300-0">
<TITLE>Primary vtable for __ctype_abstract_base&lt;wchar_t&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for __ctype_abstract_base&lt;wchar_t&gt;</primary></indexterm>typeinfo for __ctype_abstract_base&lt;wchar_t&gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary></primary></indexterm></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary></primary></indexterm></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;11&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;12&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;13&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class __ctype_abstract_base&lt;wchar_t&gt;</TITLE>
<PARA>
No external methods are defined for libstdcxx - Class std::__ctype_abstract_base&lt;wchar_t&gt;
in this part of the specification. See also the relevant architecture specific part of this specification.
</PARA>
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::__ctype_abstract_base&lt;wchar_t&gt; specified in <XREF linkend="tbl-libstdcxx-claty-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-claty-data">
<TITLE>libstdcxx - Class __ctype_abstract_base&lt;wchar_t&gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for __ctype_abstract_base&lt;wchar_t&gt;</primary></indexterm>typeinfo for __ctype_abstract_base&lt;wchar_t&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for __ctype_abstract_base&lt;wchar_t&gt;</primary></indexterm>typeinfo name for __ctype_abstract_base&lt;wchar_t&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __ctype_abstract_base&lt;wchar_t&gt;</primary></indexterm>vtable for __ctype_abstract_base&lt;wchar_t&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::ctype<char> -->
<SECT2>
<!--libgroup-->
<TITLE>Class ctype&lt;char&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for ctype&lt;char&gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::ctype&lt;char&gt; class
is described by <XREF LINKEND="cls-24230-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24230-0">
<TITLE>Primary vtable for ctype&lt;char&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for ctype&lt;char&gt;</primary></indexterm>typeinfo for ctype&lt;char&gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;char&gt;::~ctype()</primary></indexterm>ctype&lt;char&gt;::~ctype()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;char&gt;::~ctype()</primary></indexterm>ctype&lt;char&gt;::~ctype()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;char&gt;::do_toupper(char) const</primary></indexterm>ctype&lt;char&gt;::do_toupper(char) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;char&gt;::do_toupper(char*, char const*) const</primary></indexterm>ctype&lt;char&gt;::do_toupper(char*, char const*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;char&gt;::do_tolower(char) const</primary></indexterm>ctype&lt;char&gt;::do_tolower(char) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;char&gt;::do_tolower(char*, char const*) const</primary></indexterm>ctype&lt;char&gt;::do_tolower(char*, char const*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;char&gt;::do_widen(char) const</primary></indexterm>ctype&lt;char&gt;::do_widen(char) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;char&gt;::do_widen(char const*, char const*, char*) const</primary></indexterm>ctype&lt;char&gt;::do_widen(char const*, char const*, char*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;char&gt;::do_narrow(char, char) const</primary></indexterm>ctype&lt;char&gt;::do_narrow(char, char) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;char&gt;::do_narrow(char const*, char const*, char, char*) const</primary></indexterm>ctype&lt;char&gt;::do_narrow(char const*, char const*, char, char*) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class ctype&lt;char&gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::ctype&lt;char&gt; specified in <XREF linkend="tbl-libstdcxx-clatz-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clatz-ints">
<TITLE>libstdcxx - Class ctype&lt;char&gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;char&gt;::do_tolower(char*, char const*) const</primary></indexterm>ctype&lt;char&gt;::do_tolower(char*, char const*) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;char&gt;::do_tolower(char) const</primary></indexterm>ctype&lt;char&gt;::do_tolower(char) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;char&gt;::do_toupper(char*, char const*) const</primary></indexterm>ctype&lt;char&gt;::do_toupper(char*, char const*) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;char&gt;::do_toupper(char) const</primary></indexterm>ctype&lt;char&gt;::do_toupper(char) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;char&gt;::do_widen(char const*, char const*, char*) const</primary></indexterm>ctype&lt;char&gt;::do_widen(char const*, char const*, char*) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;char&gt;::do_widen(char) const</primary></indexterm>ctype&lt;char&gt;::do_widen(char) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;char&gt;::do_narrow(char const*, char const*, char, char*) const</primary></indexterm>ctype&lt;char&gt;::do_narrow(char const*, char const*, char, char*) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;char&gt;::do_narrow(char, char) const</primary></indexterm>ctype&lt;char&gt;::do_narrow(char, char) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;char&gt;::classic_table()</primary></indexterm>ctype&lt;char&gt;::classic_table()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;char&gt;::~ctype()</primary></indexterm>ctype&lt;char&gt;::~ctype()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;char&gt;::~ctype()</primary></indexterm>ctype&lt;char&gt;::~ctype()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;char&gt;::~ctype()</primary></indexterm>ctype&lt;char&gt;::~ctype()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>bool has_facet&lt;ctype&lt;char&gt; &gt;(locale const&)</primary></indexterm>bool has_facet&lt;ctype&lt;char&gt; &gt;(locale const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::ctype&lt;char&gt; specified in <XREF linkend="tbl-libstdcxx-clatz-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clatz-data">
<TITLE>libstdcxx - Class ctype&lt;char&gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;char&gt;::table_size</primary></indexterm>ctype&lt;char&gt;::table_size(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;char&gt;::id</primary></indexterm>ctype&lt;char&gt;::id(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for ctype&lt;char&gt;</primary></indexterm>typeinfo for ctype&lt;char&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for ctype&lt;char&gt;</primary></indexterm>typeinfo name for ctype&lt;char&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for ctype&lt;char&gt;</primary></indexterm>vtable for ctype&lt;char&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::ctype<wchar_t> -->
<SECT2>
<!--libgroup-->
<TITLE>Class ctype&lt;wchar_t&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for ctype&lt;wchar_t&gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::ctype&lt;wchar_t&gt; class
is described by <XREF LINKEND="cls-24229-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24229-0">
<TITLE>Primary vtable for ctype&lt;wchar_t&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for ctype&lt;wchar_t&gt;</primary></indexterm>typeinfo for ctype&lt;wchar_t&gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;wchar_t&gt;::~ctype()</primary></indexterm>ctype&lt;wchar_t&gt;::~ctype()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;wchar_t&gt;::~ctype()</primary></indexterm>ctype&lt;wchar_t&gt;::~ctype()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;wchar_t&gt;::do_is(unsigned short, wchar_t) const</primary></indexterm>ctype&lt;wchar_t&gt;::do_is(unsigned short, wchar_t) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;wchar_t&gt;::do_is(wchar_t const*, wchar_t const*, unsigned short*) const</primary></indexterm>ctype&lt;wchar_t&gt;::do_is(wchar_t const*, wchar_t const*, unsigned short*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;wchar_t&gt;::do_scan_is(unsigned short, wchar_t const*, wchar_t const*) const</primary></indexterm>ctype&lt;wchar_t&gt;::do_scan_is(unsigned short, wchar_t const*, wchar_t const*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;wchar_t&gt;::do_scan_not(unsigned short, wchar_t const*, wchar_t const*) const</primary></indexterm>ctype&lt;wchar_t&gt;::do_scan_not(unsigned short, wchar_t const*, wchar_t const*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;wchar_t&gt;::do_toupper(wchar_t) const</primary></indexterm>ctype&lt;wchar_t&gt;::do_toupper(wchar_t) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;wchar_t&gt;::do_toupper(wchar_t*, wchar_t const*) const</primary></indexterm>ctype&lt;wchar_t&gt;::do_toupper(wchar_t*, wchar_t const*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;wchar_t&gt;::do_tolower(wchar_t) const</primary></indexterm>ctype&lt;wchar_t&gt;::do_tolower(wchar_t) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;wchar_t&gt;::do_tolower(wchar_t*, wchar_t const*) const</primary></indexterm>ctype&lt;wchar_t&gt;::do_tolower(wchar_t*, wchar_t const*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;wchar_t&gt;::do_widen(char) const</primary></indexterm>ctype&lt;wchar_t&gt;::do_widen(char) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;11&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;wchar_t&gt;::do_widen(char const*, char const*, wchar_t*) const</primary></indexterm>ctype&lt;wchar_t&gt;::do_widen(char const*, char const*, wchar_t*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;12&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;wchar_t&gt;::do_narrow(wchar_t, char) const</primary></indexterm>ctype&lt;wchar_t&gt;::do_narrow(wchar_t, char) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;13&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;wchar_t&gt;::do_narrow(wchar_t const*, wchar_t const*, char, char*) const</primary></indexterm>ctype&lt;wchar_t&gt;::do_narrow(wchar_t const*, wchar_t const*, char, char*) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::ctype&lt;wchar_t&gt;  class
is described by <XREF LINKEND="rtti-24008">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24008">
<TITLE>typeinfo for ctype&lt;wchar_t&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for ctype&lt;wchar_t&gt;</primary></indexterm>typeinfo name for ctype&lt;wchar_t&gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class ctype&lt;wchar_t&gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::ctype&lt;wchar_t&gt; specified in <XREF linkend="tbl-libstdcxx-claua-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-claua-ints">
<TITLE>libstdcxx - Class ctype&lt;wchar_t&gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;wchar_t&gt;::do_scan_is(unsigned short, wchar_t const*, wchar_t const*) const</primary></indexterm>ctype&lt;wchar_t&gt;::do_scan_is(unsigned short, wchar_t const*, wchar_t const*) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;wchar_t&gt;::do_tolower(wchar_t*, wchar_t const*) const</primary></indexterm>ctype&lt;wchar_t&gt;::do_tolower(wchar_t*, wchar_t const*) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;wchar_t&gt;::do_tolower(wchar_t) const</primary></indexterm>ctype&lt;wchar_t&gt;::do_tolower(wchar_t) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;wchar_t&gt;::do_toupper(wchar_t*, wchar_t const*) const</primary></indexterm>ctype&lt;wchar_t&gt;::do_toupper(wchar_t*, wchar_t const*) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;wchar_t&gt;::do_toupper(wchar_t) const</primary></indexterm>ctype&lt;wchar_t&gt;::do_toupper(wchar_t) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;wchar_t&gt;::do_scan_not(unsigned short, wchar_t const*, wchar_t const*) const</primary></indexterm>ctype&lt;wchar_t&gt;::do_scan_not(unsigned short, wchar_t const*, wchar_t const*) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;wchar_t&gt;::_M_convert_to_wmask(unsigned short) const</primary></indexterm>ctype&lt;wchar_t&gt;::_M_convert_to_wmask(unsigned short) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;wchar_t&gt;::do_is(wchar_t const*, wchar_t const*, unsigned short*) const</primary></indexterm>ctype&lt;wchar_t&gt;::do_is(wchar_t const*, wchar_t const*, unsigned short*) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;wchar_t&gt;::do_is(unsigned short, wchar_t) const</primary></indexterm>ctype&lt;wchar_t&gt;::do_is(unsigned short, wchar_t) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;wchar_t&gt;::do_widen(char const*, char const*, wchar_t*) const</primary></indexterm>ctype&lt;wchar_t&gt;::do_widen(char const*, char const*, wchar_t*) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;wchar_t&gt;::do_widen(char) const</primary></indexterm>ctype&lt;wchar_t&gt;::do_widen(char) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;wchar_t&gt;::do_narrow(wchar_t const*, wchar_t const*, char, char*) const</primary></indexterm>ctype&lt;wchar_t&gt;::do_narrow(wchar_t const*, wchar_t const*, char, char*) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;wchar_t&gt;::do_narrow(wchar_t, char) const</primary></indexterm>ctype&lt;wchar_t&gt;::do_narrow(wchar_t, char) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;wchar_t&gt;::_M_initialize_ctype()</primary></indexterm>ctype&lt;wchar_t&gt;::_M_initialize_ctype()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;wchar_t&gt;::~ctype()</primary></indexterm>ctype&lt;wchar_t&gt;::~ctype()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;wchar_t&gt;::~ctype()</primary></indexterm>ctype&lt;wchar_t&gt;::~ctype()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;wchar_t&gt;::~ctype()</primary></indexterm>ctype&lt;wchar_t&gt;::~ctype()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::ctype&lt;wchar_t&gt; specified in <XREF linkend="tbl-libstdcxx-claua-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-claua-data">
<TITLE>libstdcxx - Class ctype&lt;wchar_t&gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;wchar_t&gt;::id</primary></indexterm>ctype&lt;wchar_t&gt;::id(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for ctype&lt;wchar_t&gt;</primary></indexterm>typeinfo for ctype&lt;wchar_t&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for ctype&lt;wchar_t&gt;</primary></indexterm>typeinfo name for ctype&lt;wchar_t&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for ctype&lt;wchar_t&gt;</primary></indexterm>vtable for ctype&lt;wchar_t&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::ctype_byname<char> -->
<SECT2>
<!--libgroup-->
<TITLE>Class ctype_byname&lt;char&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for ctype_byname&lt;char&gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::ctype_byname&lt;char&gt; class
is described by <XREF LINKEND="cls-24299-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24299-0">
<TITLE>Primary vtable for ctype_byname&lt;char&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for ctype_byname&lt;char&gt;</primary></indexterm>typeinfo for ctype_byname&lt;char&gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype_byname&lt;char&gt;::~ctype_byname()</primary></indexterm>ctype_byname&lt;char&gt;::~ctype_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype_byname&lt;char&gt;::~ctype_byname()</primary></indexterm>ctype_byname&lt;char&gt;::~ctype_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;char&gt;::do_toupper(char) const</primary></indexterm>ctype&lt;char&gt;::do_toupper(char) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;char&gt;::do_toupper(char*, char const*) const</primary></indexterm>ctype&lt;char&gt;::do_toupper(char*, char const*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;char&gt;::do_tolower(char) const</primary></indexterm>ctype&lt;char&gt;::do_tolower(char) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;char&gt;::do_tolower(char*, char const*) const</primary></indexterm>ctype&lt;char&gt;::do_tolower(char*, char const*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;char&gt;::do_widen(char) const</primary></indexterm>ctype&lt;char&gt;::do_widen(char) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;char&gt;::do_widen(char const*, char const*, char*) const</primary></indexterm>ctype&lt;char&gt;::do_widen(char const*, char const*, char*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;char&gt;::do_narrow(char, char) const</primary></indexterm>ctype&lt;char&gt;::do_narrow(char, char) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;char&gt;::do_narrow(char const*, char const*, char, char*) const</primary></indexterm>ctype&lt;char&gt;::do_narrow(char const*, char const*, char, char*) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::ctype_byname&lt;char&gt;  class
is described by <XREF LINKEND="rtti-24087">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24087">
<TITLE>typeinfo for ctype_byname&lt;char&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for ctype_byname&lt;char&gt;</primary></indexterm>typeinfo name for ctype_byname&lt;char&gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class ctype_byname&lt;char&gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::ctype_byname&lt;char&gt; specified in <XREF linkend="tbl-libstdcxx-claub-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-claub-ints">
<TITLE>libstdcxx - Class ctype_byname&lt;char&gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ctype_byname&lt;char&gt;::~ctype_byname()</primary></indexterm>ctype_byname&lt;char&gt;::~ctype_byname()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ctype_byname&lt;char&gt;::~ctype_byname()</primary></indexterm>ctype_byname&lt;char&gt;::~ctype_byname()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ctype_byname&lt;char&gt;::~ctype_byname()</primary></indexterm>ctype_byname&lt;char&gt;::~ctype_byname()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::ctype_byname&lt;char&gt; specified in <XREF linkend="tbl-libstdcxx-claub-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-claub-data">
<TITLE>libstdcxx - Class ctype_byname&lt;char&gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for ctype_byname&lt;char&gt;</primary></indexterm>typeinfo for ctype_byname&lt;char&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for ctype_byname&lt;char&gt;</primary></indexterm>typeinfo name for ctype_byname&lt;char&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for ctype_byname&lt;char&gt;</primary></indexterm>vtable for ctype_byname&lt;char&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::ctype_byname<wchar_t> -->
<SECT2>
<!--libgroup-->
<TITLE>Class ctype_byname&lt;wchar_t&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for ctype_byname&lt;wchar_t&gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::ctype_byname&lt;wchar_t&gt; class
is described by <XREF LINKEND="cls-24298-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24298-0">
<TITLE>Primary vtable for ctype_byname&lt;wchar_t&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for ctype_byname&lt;wchar_t&gt;</primary></indexterm>typeinfo for ctype_byname&lt;wchar_t&gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype_byname&lt;wchar_t&gt;::~ctype_byname()</primary></indexterm>ctype_byname&lt;wchar_t&gt;::~ctype_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype_byname&lt;wchar_t&gt;::~ctype_byname()</primary></indexterm>ctype_byname&lt;wchar_t&gt;::~ctype_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;wchar_t&gt;::do_is(unsigned short, wchar_t) const</primary></indexterm>ctype&lt;wchar_t&gt;::do_is(unsigned short, wchar_t) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;wchar_t&gt;::do_is(wchar_t const*, wchar_t const*, unsigned short*) const</primary></indexterm>ctype&lt;wchar_t&gt;::do_is(wchar_t const*, wchar_t const*, unsigned short*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;wchar_t&gt;::do_scan_is(unsigned short, wchar_t const*, wchar_t const*) const</primary></indexterm>ctype&lt;wchar_t&gt;::do_scan_is(unsigned short, wchar_t const*, wchar_t const*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;wchar_t&gt;::do_scan_not(unsigned short, wchar_t const*, wchar_t const*) const</primary></indexterm>ctype&lt;wchar_t&gt;::do_scan_not(unsigned short, wchar_t const*, wchar_t const*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;wchar_t&gt;::do_toupper(wchar_t) const</primary></indexterm>ctype&lt;wchar_t&gt;::do_toupper(wchar_t) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;wchar_t&gt;::do_toupper(wchar_t*, wchar_t const*) const</primary></indexterm>ctype&lt;wchar_t&gt;::do_toupper(wchar_t*, wchar_t const*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;wchar_t&gt;::do_tolower(wchar_t) const</primary></indexterm>ctype&lt;wchar_t&gt;::do_tolower(wchar_t) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;wchar_t&gt;::do_tolower(wchar_t*, wchar_t const*) const</primary></indexterm>ctype&lt;wchar_t&gt;::do_tolower(wchar_t*, wchar_t const*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;wchar_t&gt;::do_widen(char) const</primary></indexterm>ctype&lt;wchar_t&gt;::do_widen(char) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;11&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;wchar_t&gt;::do_widen(char const*, char const*, wchar_t*) const</primary></indexterm>ctype&lt;wchar_t&gt;::do_widen(char const*, char const*, wchar_t*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;12&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;wchar_t&gt;::do_narrow(wchar_t, char) const</primary></indexterm>ctype&lt;wchar_t&gt;::do_narrow(wchar_t, char) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;13&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;wchar_t&gt;::do_narrow(wchar_t const*, wchar_t const*, char, char*) const</primary></indexterm>ctype&lt;wchar_t&gt;::do_narrow(wchar_t const*, wchar_t const*, char, char*) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::ctype_byname&lt;wchar_t&gt;  class
is described by <XREF LINKEND="rtti-24086">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24086">
<TITLE>typeinfo for ctype_byname&lt;wchar_t&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for ctype_byname&lt;wchar_t&gt;</primary></indexterm>typeinfo name for ctype_byname&lt;wchar_t&gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class ctype_byname&lt;wchar_t&gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::ctype_byname&lt;wchar_t&gt; specified in <XREF linkend="tbl-libstdcxx-clauc-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clauc-ints">
<TITLE>libstdcxx - Class ctype_byname&lt;wchar_t&gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ctype_byname&lt;wchar_t&gt;::~ctype_byname()</primary></indexterm>ctype_byname&lt;wchar_t&gt;::~ctype_byname()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ctype_byname&lt;wchar_t&gt;::~ctype_byname()</primary></indexterm>ctype_byname&lt;wchar_t&gt;::~ctype_byname()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ctype_byname&lt;wchar_t&gt;::~ctype_byname()</primary></indexterm>ctype_byname&lt;wchar_t&gt;::~ctype_byname()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::ctype_byname&lt;wchar_t&gt; specified in <XREF linkend="tbl-libstdcxx-clauc-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clauc-data">
<TITLE>libstdcxx - Class ctype_byname&lt;wchar_t&gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for ctype_byname&lt;wchar_t&gt;</primary></indexterm>typeinfo for ctype_byname&lt;wchar_t&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for ctype_byname&lt;wchar_t&gt;</primary></indexterm>typeinfo name for ctype_byname&lt;wchar_t&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for ctype_byname&lt;wchar_t&gt;</primary></indexterm>vtable for ctype_byname&lt;wchar_t&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::basic_string<char, std::char_traits<char>, std::allocator<char> > -->
<SECT2>
<!--libgroup-->
<TITLE>Class basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for Class basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-claud-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-claud-ints">
<TITLE>libstdcxx - Class basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_M_disjunct(char const*) const</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_M_disjunct(char const*) const(GLIBCXX_3.4.5) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::get_allocator() const</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::get_allocator() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::end() const</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::end() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_Rep::_M_is_leaked() const</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_Rep::_M_is_leaked() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_Rep::_M_is_shared() const</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_Rep::_M_is_shared() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::data() const</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::data() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::rend() const</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::rend() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::size() const</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::size() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::begin() const</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::begin() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::c_str() const</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::c_str() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::empty() const</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::empty() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_M_rep() const</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_M_rep() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::length() const</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::length() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::rbegin() const</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::rbegin() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_M_data() const</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_M_data() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_M_iend() const</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_M_iend() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::compare(char const*) const</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::compare(char const*) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::compare(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&) const</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::compare(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::capacity() const</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::capacity() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::max_size() const</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::max_size() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_M_ibegin() const</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_M_ibegin() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_Alloc_hider::_Alloc_hider(char*, allocator&lt;char&gt; const&)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_Alloc_hider::_Alloc_hider(char*, allocator&lt;char&gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_Alloc_hider::_Alloc_hider(char*, allocator&lt;char&gt; const&)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_Alloc_hider::_Alloc_hider(char*, allocator&lt;char&gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_M_leak_hard()</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_M_leak_hard()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_S_empty_rep()</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_S_empty_rep()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_S_copy_chars(char*, __gnu_cxx::__normal_iterator&lt;char const*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;char const*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt;)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_S_copy_chars(char*, __gnu_cxx::__normal_iterator&lt;char const*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;char const*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt;)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_S_copy_chars(char*, __gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt;)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_S_copy_chars(char*, __gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt;)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_S_copy_chars(char*, char const*, char const*)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_S_copy_chars(char*, char const*, char const*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_S_copy_chars(char*, char*, char*)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_S_copy_chars(char*, char*, char*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::end()</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::end()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_Rep::_M_destroy(allocator&lt;char&gt; const&)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_Rep::_M_destroy(allocator&lt;char&gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_Rep::_M_dispose(allocator&lt;char&gt; const&)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_Rep::_M_dispose(allocator&lt;char&gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_Rep::_M_refcopy()</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_Rep::_M_refcopy()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_Rep::_M_refdata()</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_Rep::_M_refdata()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_Rep::_S_empty_rep()</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_Rep::_S_empty_rep()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_Rep::_M_set_leaked()</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_Rep::_M_set_leaked()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_Rep::_M_set_sharable()</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_Rep::_M_set_sharable()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_Rep::_M_grab(allocator&lt;char&gt; const&, allocator&lt;char&gt; const&)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_Rep::_M_grab(allocator&lt;char&gt; const&, allocator&lt;char&gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::rend()</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::rend()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::swap(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;&)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::swap(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::begin()</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::begin()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::clear()</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::clear()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::erase(__gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt;)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::erase(__gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt;)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::erase(__gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt;)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::erase(__gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt;)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::append(char const*)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::append(char const*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::append(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::append(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::assign(char const*)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::assign(char const*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::assign(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::assign(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::insert(__gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt;, char)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::insert(__gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt;, char)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::rbegin()</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::rbegin()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_M_data(char*)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_M_data(char*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_M_leak()</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_M_leak()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::replace(__gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;char const*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;char const*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt;)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::replace(__gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;char const*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;char const*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt;)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::replace(__gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt;, char const*)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::replace(__gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt;, char const*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::replace(__gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt;, char const*, char const*)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::replace(__gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt;, char const*, char const*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::replace(__gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt;, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::replace(__gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt;, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::replace(__gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt;, char*, char*)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::replace(__gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt;, char*, char*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::replace(__gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt;)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::replace(__gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt;)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::push_back(char)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::push_back(char)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_string(char const*, allocator&lt;char&gt; const&)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_string(char const*, allocator&lt;char&gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_string(allocator&lt;char&gt; const&)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_string(allocator&lt;char&gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_string(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_string(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_string()</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_string()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_string&lt;__gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt;, allocator&lt;char&gt; const&)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_string&lt;__gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt;, allocator&lt;char&gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_string&lt;char const*&gt;(char const*, char const*, allocator&lt;char&gt; const&)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_string&lt;char const*&gt;(char const*, char const*, allocator&lt;char&gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_string&lt;char*&gt;(char*, char*, allocator&lt;char&gt; const&)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_string&lt;char*&gt;(char*, char*, allocator&lt;char&gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_string(char const*, allocator&lt;char&gt; const&)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_string(char const*, allocator&lt;char&gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_string(allocator&lt;char&gt; const&)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_string(allocator&lt;char&gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_string(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_string(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_string()</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_string()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_string&lt;__gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt;, allocator&lt;char&gt; const&)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_string&lt;__gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; &gt;, allocator&lt;char&gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_string&lt;char const*&gt;(char const*, char const*, allocator&lt;char&gt; const&)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_string&lt;char const*&gt;(char const*, char const*, allocator&lt;char&gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_string&lt;char*&gt;(char*, char*, allocator&lt;char&gt; const&)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_string&lt;char*&gt;(char*, char*, allocator&lt;char&gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_string()</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_string()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_string()</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_string()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::operator=(char const*)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::operator=(char const*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::operator=(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::operator=(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::operator=(char)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::operator=(char)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::operator+=(char const*)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::operator+=(char const*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::operator+=(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::operator+=(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::operator+=(char)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::operator+=(char)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-claud-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-claud-data">
<TITLE>libstdcxx - Class basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_Rep::_S_max_size</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_Rep::_S_max_size(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_Rep::_S_terminal</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_Rep::_S_terminal(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_Rep::_S_empty_rep_storage</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_Rep::_S_empty_rep_storage(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::npos</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::npos(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > -->
<SECT2>
<!--libgroup-->
<TITLE>Class basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for Class basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::basic_string&lt;wchar_t, std::char_traits&lt;wchar_t&gt;, std::allocator&lt;wchar_t&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-claue-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-claue-ints">
<TITLE>libstdcxx - Class basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_M_disjunct(wchar_t const*) const</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_M_disjunct(wchar_t const*) const(GLIBCXX_3.4.5) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::get_allocator() const</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::get_allocator() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::end() const</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::end() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_Rep::_M_is_leaked() const</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_Rep::_M_is_leaked() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_Rep::_M_is_shared() const</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_Rep::_M_is_shared() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::data() const</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::data() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::rend() const</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::rend() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::size() const</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::size() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::begin() const</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::begin() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::c_str() const</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::c_str() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::empty() const</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::empty() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_M_rep() const</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_M_rep() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::length() const</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::length() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::rbegin() const</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::rbegin() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_M_data() const</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_M_data() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_M_iend() const</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_M_iend() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::compare(wchar_t const*) const</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::compare(wchar_t const*) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::compare(basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&) const</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::compare(basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::capacity() const</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::capacity() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::max_size() const</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::max_size() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_M_ibegin() const</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_M_ibegin() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_Alloc_hider::_Alloc_hider(wchar_t*, allocator&lt;wchar_t&gt; const&)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_Alloc_hider::_Alloc_hider(wchar_t*, allocator&lt;wchar_t&gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_Alloc_hider::_Alloc_hider(wchar_t*, allocator&lt;wchar_t&gt; const&)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_Alloc_hider::_Alloc_hider(wchar_t*, allocator&lt;wchar_t&gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_M_leak_hard()</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_M_leak_hard()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_S_empty_rep()</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_S_empty_rep()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_S_copy_chars(wchar_t*, __gnu_cxx::__normal_iterator&lt;wchar_t const*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;wchar_t const*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt;)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_S_copy_chars(wchar_t*, __gnu_cxx::__normal_iterator&lt;wchar_t const*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;wchar_t const*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt;)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_S_copy_chars(wchar_t*, __gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt;)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_S_copy_chars(wchar_t*, __gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt;)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_S_copy_chars(wchar_t*, wchar_t const*, wchar_t const*)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_S_copy_chars(wchar_t*, wchar_t const*, wchar_t const*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_S_copy_chars(wchar_t*, wchar_t*, wchar_t*)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_S_copy_chars(wchar_t*, wchar_t*, wchar_t*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::end()</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::end()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_Rep::_M_destroy(allocator&lt;wchar_t&gt; const&)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_Rep::_M_destroy(allocator&lt;wchar_t&gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_Rep::_M_dispose(allocator&lt;wchar_t&gt; const&)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_Rep::_M_dispose(allocator&lt;wchar_t&gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_Rep::_M_refcopy()</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_Rep::_M_refcopy()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_Rep::_M_refdata()</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_Rep::_M_refdata()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_Rep::_S_empty_rep()</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_Rep::_S_empty_rep()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_Rep::_M_set_leaked()</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_Rep::_M_set_leaked()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_Rep::_M_set_sharable()</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_Rep::_M_set_sharable()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_Rep::_M_grab(allocator&lt;wchar_t&gt; const&, allocator&lt;wchar_t&gt; const&)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_Rep::_M_grab(allocator&lt;wchar_t&gt; const&, allocator&lt;wchar_t&gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::rend()</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::rend()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::swap(basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;&)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::swap(basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::begin()</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::begin()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::clear()</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::clear()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::erase(__gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt;)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::erase(__gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt;)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::erase(__gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt;)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::erase(__gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt;)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::append(wchar_t const*)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::append(wchar_t const*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::append(basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::append(basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::assign(wchar_t const*)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::assign(wchar_t const*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::assign(basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::assign(basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::insert(__gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt;, wchar_t)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::insert(__gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt;, wchar_t)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::rbegin()</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::rbegin()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_M_data(wchar_t*)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_M_data(wchar_t*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_M_leak()</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_M_leak()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::replace(__gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;wchar_t const*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;wchar_t const*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt;)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::replace(__gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;wchar_t const*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;wchar_t const*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt;)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::replace(__gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt;, wchar_t const*)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::replace(__gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt;, wchar_t const*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::replace(__gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt;, wchar_t const*, wchar_t const*)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::replace(__gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt;, wchar_t const*, wchar_t const*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::replace(__gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt;, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::replace(__gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt;, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::replace(__gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt;, wchar_t*, wchar_t*)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::replace(__gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt;, wchar_t*, wchar_t*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::replace(__gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt;)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::replace(__gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt;)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::push_back(wchar_t)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::push_back(wchar_t)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_string(wchar_t const*, allocator&lt;wchar_t&gt; const&)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_string(wchar_t const*, allocator&lt;wchar_t&gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_string(allocator&lt;wchar_t&gt; const&)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_string(allocator&lt;wchar_t&gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_string(basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_string(basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_string()</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_string()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_string&lt;__gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt;, allocator&lt;wchar_t&gt; const&)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_string&lt;__gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt;, allocator&lt;wchar_t&gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_string&lt;wchar_t const*&gt;(wchar_t const*, wchar_t const*, allocator&lt;wchar_t&gt; const&)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_string&lt;wchar_t const*&gt;(wchar_t const*, wchar_t const*, allocator&lt;wchar_t&gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_string&lt;wchar_t*&gt;(wchar_t*, wchar_t*, allocator&lt;wchar_t&gt; const&)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_string&lt;wchar_t*&gt;(wchar_t*, wchar_t*, allocator&lt;wchar_t&gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_string(wchar_t const*, allocator&lt;wchar_t&gt; const&)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_string(wchar_t const*, allocator&lt;wchar_t&gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_string(allocator&lt;wchar_t&gt; const&)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_string(allocator&lt;wchar_t&gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_string(basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_string(basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_string()</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_string()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_string&lt;__gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt;, allocator&lt;wchar_t&gt; const&)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_string&lt;__gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; &gt;, allocator&lt;wchar_t&gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_string&lt;wchar_t const*&gt;(wchar_t const*, wchar_t const*, allocator&lt;wchar_t&gt; const&)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_string&lt;wchar_t const*&gt;(wchar_t const*, wchar_t const*, allocator&lt;wchar_t&gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_string&lt;wchar_t*&gt;(wchar_t*, wchar_t*, allocator&lt;wchar_t&gt; const&)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_string&lt;wchar_t*&gt;(wchar_t*, wchar_t*, allocator&lt;wchar_t&gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_string()</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_string()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_string()</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_string()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::operator=(wchar_t const*)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::operator=(wchar_t const*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::operator=(basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::operator=(basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::operator=(wchar_t)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::operator=(wchar_t)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::operator+=(wchar_t const*)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::operator+=(wchar_t const*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::operator+=(basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::operator+=(basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::operator+=(wchar_t)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::operator+=(wchar_t)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; operator+&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;(char const*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; operator+&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;(char const*, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; operator+&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; operator+&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; operator+&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;(char, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)</primary></indexterm>basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; operator+&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;(char, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; operator+&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;(wchar_t const*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; operator+&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;(wchar_t const*, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; operator+&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;(basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; operator+&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;(basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; operator+&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;(wchar_t, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&)</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; operator+&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;(wchar_t, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::basic_string&lt;wchar_t, std::char_traits&lt;wchar_t&gt;, std::allocator&lt;wchar_t&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-claue-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-claue-data">
<TITLE>libstdcxx - Class basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_Rep::_S_max_size</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_Rep::_S_max_size(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_Rep::_S_terminal</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_Rep::_S_terminal(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_Rep::_S_empty_rep_storage</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_Rep::_S_empty_rep_storage(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::npos</primary></indexterm>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::npos(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> > -->
<SECT2>
<!--libgroup-->
<TITLE>Class basic_stringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for basic_stringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::basic_stringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; class
is described in the relevant architecture specific part of this specification.
</PARA>
<PARA>
The VTT for the std::basic_stringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;  class
is described by <XREF LINKEND="vtt-24742">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="vtt-24742">
<TITLE>VTT for basic_stringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>VTT Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>_ZTTSt18basic_stringstreamIcSt11char_traitsIcESaIcEE</primary></indexterm>_ZTTSt18basic_stringstreamIcSt11char_traitsIcESaIcEE</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Number of Entries</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>10</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class basic_stringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::basic_stringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clauf-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clauf-ints">
<TITLE>libstdcxx - Class basic_stringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::str() const</primary></indexterm>basic_stringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::str() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::rdbuf() const</primary></indexterm>basic_stringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::rdbuf() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::str(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)</primary></indexterm>basic_stringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::str(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_stringstream(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, _Ios_Openmode)</primary></indexterm>basic_stringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_stringstream(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, _Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_stringstream(_Ios_Openmode)</primary></indexterm>basic_stringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_stringstream(_Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_stringstream(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, _Ios_Openmode)</primary></indexterm>basic_stringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_stringstream(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, _Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_stringstream(_Ios_Openmode)</primary></indexterm>basic_stringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_stringstream(_Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_stringstream()</primary></indexterm>basic_stringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_stringstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_stringstream()</primary></indexterm>basic_stringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_stringstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_stringstream()</primary></indexterm>basic_stringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_stringstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::basic_stringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clauf-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clauf-data">
<TITLE>libstdcxx - Class basic_stringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_stringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</primary></indexterm>typeinfo for basic_stringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for basic_stringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</primary></indexterm>typeinfo name for basic_stringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>VTT for basic_stringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</primary></indexterm>VTT for basic_stringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for basic_stringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</primary></indexterm>vtable for basic_stringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > -->
<SECT2>
<!--libgroup-->
<TITLE>Class basic_stringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for basic_stringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::basic_stringstream&lt;wchar_t, std::char_traits&lt;wchar_t&gt;, std::allocator&lt;wchar_t&gt; &gt; class
is described in the relevant architecture specific part of this specification.
</PARA>
<PARA>
The VTT for the std::basic_stringstream&lt;wchar_t, std::char_traits&lt;wchar_t&gt;, std::allocator&lt;wchar_t&gt; &gt;  class
is described by <XREF LINKEND="vtt-24743">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="vtt-24743">
<TITLE>VTT for basic_stringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>VTT Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>_ZTTSt18basic_stringstreamIwSt11char_traitsIwESaIwEE</primary></indexterm>_ZTTSt18basic_stringstreamIwSt11char_traitsIwESaIwEE</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Number of Entries</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>10</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class basic_stringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::basic_stringstream&lt;wchar_t, std::char_traits&lt;wchar_t&gt;, std::allocator&lt;wchar_t&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-claug-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-claug-ints">
<TITLE>libstdcxx - Class basic_stringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::str() const</primary></indexterm>basic_stringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::str() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::rdbuf() const</primary></indexterm>basic_stringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::rdbuf() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::str(basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&)</primary></indexterm>basic_stringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::str(basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_stringstream(basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&, _Ios_Openmode)</primary></indexterm>basic_stringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_stringstream(basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&, _Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_stringstream(_Ios_Openmode)</primary></indexterm>basic_stringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_stringstream(_Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_stringstream(basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&, _Ios_Openmode)</primary></indexterm>basic_stringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_stringstream(basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&, _Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_stringstream(_Ios_Openmode)</primary></indexterm>basic_stringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_stringstream(_Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_stringstream()</primary></indexterm>basic_stringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_stringstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_stringstream()</primary></indexterm>basic_stringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_stringstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_stringstream()</primary></indexterm>basic_stringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_stringstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::basic_stringstream&lt;wchar_t, std::char_traits&lt;wchar_t&gt;, std::allocator&lt;wchar_t&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-claug-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-claug-data">
<TITLE>libstdcxx - Class basic_stringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_stringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</primary></indexterm>typeinfo for basic_stringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for basic_stringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</primary></indexterm>typeinfo name for basic_stringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>VTT for basic_stringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</primary></indexterm>VTT for basic_stringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for basic_stringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</primary></indexterm>vtable for basic_stringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::basic_istringstream<char, std::char_traits<char>, std::allocator<char> > -->
<SECT2>
<!--libgroup-->
<TITLE>Class basic_istringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for basic_istringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::basic_istringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; class
is described in the relevant architecture specific part of this specification.
</PARA>
<PARA>
The VTT for the std::basic_istringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;  class
is described by <XREF LINKEND="vtt-24394">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="vtt-24394">
<TITLE>VTT for basic_istringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>VTT Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>_ZTTSt19basic_istringstreamIcSt11char_traitsIcESaIcEE</primary></indexterm>_ZTTSt19basic_istringstreamIcSt11char_traitsIcESaIcEE</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Number of Entries</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>4</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class basic_istringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::basic_istringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clauh-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clauh-ints">
<TITLE>libstdcxx - Class basic_istringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::str() const</primary></indexterm>basic_istringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::str() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::rdbuf() const</primary></indexterm>basic_istringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::rdbuf() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::str(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)</primary></indexterm>basic_istringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::str(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_istringstream(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, _Ios_Openmode)</primary></indexterm>basic_istringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_istringstream(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, _Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_istringstream(_Ios_Openmode)</primary></indexterm>basic_istringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_istringstream(_Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_istringstream(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, _Ios_Openmode)</primary></indexterm>basic_istringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_istringstream(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, _Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_istringstream(_Ios_Openmode)</primary></indexterm>basic_istringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_istringstream(_Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_istringstream()</primary></indexterm>basic_istringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_istringstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_istringstream()</primary></indexterm>basic_istringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_istringstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_istringstream()</primary></indexterm>basic_istringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_istringstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::basic_istringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clauh-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clauh-data">
<TITLE>libstdcxx - Class basic_istringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_istringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</primary></indexterm>typeinfo for basic_istringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for basic_istringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</primary></indexterm>typeinfo name for basic_istringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>VTT for basic_istringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</primary></indexterm>VTT for basic_istringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for basic_istringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</primary></indexterm>vtable for basic_istringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > -->
<SECT2>
<!--libgroup-->
<TITLE>Class basic_istringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for basic_istringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::basic_istringstream&lt;wchar_t, std::char_traits&lt;wchar_t&gt;, std::allocator&lt;wchar_t&gt; &gt; class
is described in the relevant architecture specific part of this specification.
</PARA>
<PARA>
The VTT for the std::basic_istringstream&lt;wchar_t, std::char_traits&lt;wchar_t&gt;, std::allocator&lt;wchar_t&gt; &gt;  class
is described by <XREF LINKEND="vtt-24395">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="vtt-24395">
<TITLE>VTT for basic_istringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>VTT Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>_ZTTSt19basic_istringstreamIwSt11char_traitsIwESaIwEE</primary></indexterm>_ZTTSt19basic_istringstreamIwSt11char_traitsIwESaIwEE</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Number of Entries</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>4</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class basic_istringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::basic_istringstream&lt;wchar_t, std::char_traits&lt;wchar_t&gt;, std::allocator&lt;wchar_t&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-claui-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-claui-ints">
<TITLE>libstdcxx - Class basic_istringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::str() const</primary></indexterm>basic_istringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::str() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::rdbuf() const</primary></indexterm>basic_istringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::rdbuf() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::str(basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&)</primary></indexterm>basic_istringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::str(basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_istringstream(basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&, _Ios_Openmode)</primary></indexterm>basic_istringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_istringstream(basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&, _Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_istringstream(_Ios_Openmode)</primary></indexterm>basic_istringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_istringstream(_Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_istringstream(basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&, _Ios_Openmode)</primary></indexterm>basic_istringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_istringstream(basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&, _Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_istringstream(_Ios_Openmode)</primary></indexterm>basic_istringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_istringstream(_Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_istringstream()</primary></indexterm>basic_istringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_istringstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_istringstream()</primary></indexterm>basic_istringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_istringstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_istringstream()</primary></indexterm>basic_istringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_istringstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::basic_istringstream&lt;wchar_t, std::char_traits&lt;wchar_t&gt;, std::allocator&lt;wchar_t&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-claui-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-claui-data">
<TITLE>libstdcxx - Class basic_istringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_istringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</primary></indexterm>typeinfo for basic_istringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for basic_istringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</primary></indexterm>typeinfo name for basic_istringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>VTT for basic_istringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</primary></indexterm>VTT for basic_istringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for basic_istringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</primary></indexterm>vtable for basic_istringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> > -->
<SECT2>
<!--libgroup-->
<TITLE>Class basic_ostringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for basic_ostringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; class
is described in the relevant architecture specific part of this specification.
</PARA>
<PARA>
The VTT for the std::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;  class
is described by <XREF LINKEND="vtt-24396">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="vtt-24396">
<TITLE>VTT for basic_ostringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>VTT Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>_ZTTSt19basic_ostringstreamIcSt11char_traitsIcESaIcEE</primary></indexterm>_ZTTSt19basic_ostringstreamIcSt11char_traitsIcESaIcEE</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Number of Entries</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>4</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class basic_ostringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clauj-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clauj-ints">
<TITLE>libstdcxx - Class basic_ostringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::str() const</primary></indexterm>basic_ostringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::str() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::rdbuf() const</primary></indexterm>basic_ostringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::rdbuf() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::str(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)</primary></indexterm>basic_ostringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::str(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_ostringstream(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, _Ios_Openmode)</primary></indexterm>basic_ostringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_ostringstream(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, _Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_ostringstream(_Ios_Openmode)</primary></indexterm>basic_ostringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_ostringstream(_Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_ostringstream(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, _Ios_Openmode)</primary></indexterm>basic_ostringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_ostringstream(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, _Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_ostringstream(_Ios_Openmode)</primary></indexterm>basic_ostringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_ostringstream(_Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_ostringstream()</primary></indexterm>basic_ostringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_ostringstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_ostringstream()</primary></indexterm>basic_ostringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_ostringstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_ostringstream()</primary></indexterm>basic_ostringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_ostringstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clauj-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clauj-data">
<TITLE>libstdcxx - Class basic_ostringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_ostringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</primary></indexterm>typeinfo for basic_ostringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for basic_ostringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</primary></indexterm>typeinfo name for basic_ostringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>VTT for basic_ostringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</primary></indexterm>VTT for basic_ostringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for basic_ostringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</primary></indexterm>vtable for basic_ostringstream&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > -->
<SECT2>
<!--libgroup-->
<TITLE>Class basic_ostringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for basic_ostringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::basic_ostringstream&lt;wchar_t, std::char_traits&lt;wchar_t&gt;, std::allocator&lt;wchar_t&gt; &gt; class
is described in the relevant architecture specific part of this specification.
</PARA>
<PARA>
The VTT for the std::basic_ostringstream&lt;wchar_t, std::char_traits&lt;wchar_t&gt;, std::allocator&lt;wchar_t&gt; &gt;  class
is described by <XREF LINKEND="vtt-24397">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="vtt-24397">
<TITLE>VTT for basic_ostringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>VTT Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>_ZTTSt19basic_ostringstreamIwSt11char_traitsIwESaIwEE</primary></indexterm>_ZTTSt19basic_ostringstreamIwSt11char_traitsIwESaIwEE</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Number of Entries</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>4</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class basic_ostringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::basic_ostringstream&lt;wchar_t, std::char_traits&lt;wchar_t&gt;, std::allocator&lt;wchar_t&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clauk-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clauk-ints">
<TITLE>libstdcxx - Class basic_ostringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::str() const</primary></indexterm>basic_ostringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::str() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::rdbuf() const</primary></indexterm>basic_ostringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::rdbuf() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::str(basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&)</primary></indexterm>basic_ostringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::str(basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_ostringstream(basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&, _Ios_Openmode)</primary></indexterm>basic_ostringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_ostringstream(basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&, _Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_ostringstream(_Ios_Openmode)</primary></indexterm>basic_ostringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_ostringstream(_Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_ostringstream(basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&, _Ios_Openmode)</primary></indexterm>basic_ostringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_ostringstream(basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&, _Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_ostringstream(_Ios_Openmode)</primary></indexterm>basic_ostringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_ostringstream(_Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_ostringstream()</primary></indexterm>basic_ostringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_ostringstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_ostringstream()</primary></indexterm>basic_ostringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_ostringstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_ostringstream()</primary></indexterm>basic_ostringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_ostringstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::basic_ostringstream&lt;wchar_t, std::char_traits&lt;wchar_t&gt;, std::allocator&lt;wchar_t&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clauk-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clauk-data">
<TITLE>libstdcxx - Class basic_ostringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_ostringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</primary></indexterm>typeinfo for basic_ostringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for basic_ostringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</primary></indexterm>typeinfo name for basic_ostringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>VTT for basic_ostringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</primary></indexterm>VTT for basic_ostringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for basic_ostringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</primary></indexterm>vtable for basic_ostringstream&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> > -->
<SECT2>
<!--libgroup-->
<TITLE>Class basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; class
is described by <XREF LINKEND="cls-24311-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24311-0">
<TITLE>Primary vtable for basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</primary></indexterm>typeinfo for basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_stringbuf()</primary></indexterm>basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_stringbuf()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_stringbuf()</primary></indexterm>basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_stringbuf()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::imbue(locale const&)</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::imbue(locale const&)</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>See The Architecture Specific Specification</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>See The Architecture Specific Specification</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::seekpos(fpos&lt;__mbstate_t&gt;, _Ios_Openmode)</primary></indexterm>basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::seekpos(fpos&lt;__mbstate_t&gt;, _Ios_Openmode)</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::sync()</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::sync()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::showmanyc()</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::showmanyc()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>See The Architecture Specific Specification</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::underflow()</primary></indexterm>basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::underflow()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::uflow()</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::uflow()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;11&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::pbackfail(int)</primary></indexterm>basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::pbackfail(int)</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;12&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>See The Architecture Specific Specification</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;13&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::overflow(int)</primary></indexterm>basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::overflow(int)</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;  class
is described by <XREF LINKEND="rtti-24089">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24089">
<TITLE>typeinfo for basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</primary></indexterm>typeinfo name for basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-claul-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-claul-ints">
<TITLE>libstdcxx - Class basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::str() const</primary></indexterm>basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::str() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_M_update_egptr()</primary></indexterm>basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_M_update_egptr()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_M_stringbuf_init(_Ios_Openmode)</primary></indexterm>basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::_M_stringbuf_init(_Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::str(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)</primary></indexterm>basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::str(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::seekpos(fpos&lt;__mbstate_t&gt;, _Ios_Openmode)</primary></indexterm>basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::seekpos(fpos&lt;__mbstate_t&gt;, _Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::overflow(int)</primary></indexterm>basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::overflow(int)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::pbackfail(int)</primary></indexterm>basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::pbackfail(int)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::showmanyc()</primary></indexterm>basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::showmanyc()(GLIBCXX_3.4.6) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::underflow()</primary></indexterm>basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::underflow()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_stringbuf(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, _Ios_Openmode)</primary></indexterm>basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_stringbuf(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, _Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_stringbuf(_Ios_Openmode)</primary></indexterm>basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_stringbuf(_Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_stringbuf(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, _Ios_Openmode)</primary></indexterm>basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_stringbuf(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, _Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_stringbuf(_Ios_Openmode)</primary></indexterm>basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::basic_stringbuf(_Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_stringbuf()</primary></indexterm>basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_stringbuf()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_stringbuf()</primary></indexterm>basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;::~basic_stringbuf()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-claul-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-claul-data">
<TITLE>libstdcxx - Class basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</primary></indexterm>typeinfo for basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</primary></indexterm>typeinfo name for basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;</primary></indexterm>vtable for basic_stringbuf&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > -->
<SECT2>
<!--libgroup-->
<TITLE>Class basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::basic_stringbuf&lt;wchar_t, std::char_traits&lt;wchar_t&gt;, std::allocator&lt;wchar_t&gt; &gt; class
is described by <XREF LINKEND="cls-24307-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24307-0">
<TITLE>Primary vtable for basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</primary></indexterm>typeinfo for basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_stringbuf()</primary></indexterm>basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_stringbuf()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_stringbuf()</primary></indexterm>basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_stringbuf()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::imbue(locale const&)</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::imbue(locale const&)</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>See The Architecture Specific Specification</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>See The Architecture Specific Specification</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::seekpos(fpos&lt;__mbstate_t&gt;, _Ios_Openmode)</primary></indexterm>basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::seekpos(fpos&lt;__mbstate_t&gt;, _Ios_Openmode)</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::sync()</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::sync()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::showmanyc()</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::showmanyc()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>See The Architecture Specific Specification</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::underflow()</primary></indexterm>basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::underflow()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::uflow()</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::uflow()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;11&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::pbackfail(unsigned int)</primary></indexterm>basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::pbackfail(unsigned int)</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;12&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>See The Architecture Specific Specification</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;13&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::overflow(unsigned int)</primary></indexterm>basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::overflow(unsigned int)</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::basic_stringbuf&lt;wchar_t, std::char_traits&lt;wchar_t&gt;, std::allocator&lt;wchar_t&gt; &gt;  class
is described by <XREF LINKEND="rtti-24088">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24088">
<TITLE>typeinfo for basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</primary></indexterm>typeinfo name for basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::basic_stringbuf&lt;wchar_t, std::char_traits&lt;wchar_t&gt;, std::allocator&lt;wchar_t&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-claum-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-claum-ints">
<TITLE>libstdcxx - Class basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::str() const</primary></indexterm>basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::str() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_M_update_egptr()</primary></indexterm>basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_M_update_egptr()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_M_stringbuf_init(_Ios_Openmode)</primary></indexterm>basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::_M_stringbuf_init(_Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::str(basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&)</primary></indexterm>basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::str(basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::seekpos(fpos&lt;__mbstate_t&gt;, _Ios_Openmode)</primary></indexterm>basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::seekpos(fpos&lt;__mbstate_t&gt;, _Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::overflow(unsigned int)</primary></indexterm>basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::overflow(unsigned int)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::pbackfail(unsigned int)</primary></indexterm>basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::pbackfail(unsigned int)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::showmanyc()</primary></indexterm>basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::showmanyc()(GLIBCXX_3.4.6) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::underflow()</primary></indexterm>basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::underflow()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_stringbuf(basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&, _Ios_Openmode)</primary></indexterm>basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_stringbuf(basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&, _Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_stringbuf(_Ios_Openmode)</primary></indexterm>basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_stringbuf(_Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_stringbuf(basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&, _Ios_Openmode)</primary></indexterm>basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_stringbuf(basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&, _Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_stringbuf(_Ios_Openmode)</primary></indexterm>basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::basic_stringbuf(_Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_stringbuf()</primary></indexterm>basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_stringbuf()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_stringbuf()</primary></indexterm>basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;::~basic_stringbuf()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::basic_stringbuf&lt;wchar_t, std::char_traits&lt;wchar_t&gt;, std::allocator&lt;wchar_t&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-claum-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-claum-data">
<TITLE>libstdcxx - Class basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</primary></indexterm>typeinfo for basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</primary></indexterm>typeinfo name for basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;</primary></indexterm>vtable for basic_stringbuf&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::basic_iostream<char, std::char_traits<char> > -->
<SECT2>
<!--libgroup-->
<TITLE>Class basic_iostream&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for basic_iostream&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::basic_iostream&lt;char, std::char_traits&lt;char&gt; &gt; class
is described in the relevant architecture specific part of this specification.
</PARA>
<PARA>
The VTT for the std::basic_iostream&lt;char, std::char_traits&lt;char&gt; &gt;  class
is described by <XREF LINKEND="vtt-24660">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="vtt-24660">
<TITLE>VTT for basic_iostream&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>VTT Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>_ZTTSd</primary></indexterm>_ZTTSd</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Number of Entries</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>7</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class basic_iostream&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::basic_iostream&lt;char, std::char_traits&lt;char&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-claun-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-claun-ints">
<TITLE>libstdcxx - Class basic_iostream&lt;char, char_traits&lt;char&gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_iostream&lt;char, char_traits&lt;char&gt; &gt;::basic_iostream(basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;*)</primary></indexterm>basic_iostream&lt;char, char_traits&lt;char&gt; &gt;::basic_iostream(basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_iostream&lt;char, char_traits&lt;char&gt; &gt;::basic_iostream()</primary></indexterm>basic_iostream&lt;char, char_traits&lt;char&gt; &gt;::basic_iostream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_iostream&lt;char, char_traits&lt;char&gt; &gt;::basic_iostream(basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;*)</primary></indexterm>basic_iostream&lt;char, char_traits&lt;char&gt; &gt;::basic_iostream(basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_iostream&lt;char, char_traits&lt;char&gt; &gt;::basic_iostream()</primary></indexterm>basic_iostream&lt;char, char_traits&lt;char&gt; &gt;::basic_iostream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_iostream&lt;char, char_traits&lt;char&gt; &gt;::~basic_iostream()</primary></indexterm>basic_iostream&lt;char, char_traits&lt;char&gt; &gt;::~basic_iostream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_iostream&lt;char, char_traits&lt;char&gt; &gt;::~basic_iostream()</primary></indexterm>basic_iostream&lt;char, char_traits&lt;char&gt; &gt;::~basic_iostream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_iostream&lt;char, char_traits&lt;char&gt; &gt;::~basic_iostream()</primary></indexterm>basic_iostream&lt;char, char_traits&lt;char&gt; &gt;::~basic_iostream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;char, char_traits&lt;char&gt; &gt;& operator&gt;&gt;&lt;char_traits&lt;char&gt; &gt;(basic_istream&lt;char, char_traits&lt;char&gt; &gt;&, signed char*)</primary></indexterm>basic_istream&lt;char, char_traits&lt;char&gt; &gt;& operator&gt;&gt;&lt;char_traits&lt;char&gt; &gt;(basic_istream&lt;char, char_traits&lt;char&gt; &gt;&, signed char*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::basic_iostream&lt;char, std::char_traits&lt;char&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-claun-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-claun-data">
<TITLE>libstdcxx - Class basic_iostream&lt;char, char_traits&lt;char&gt; &gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_iostream&lt;char, char_traits&lt;char&gt; &gt;</primary></indexterm>typeinfo for basic_iostream&lt;char, char_traits&lt;char&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for basic_iostream&lt;char, char_traits&lt;char&gt; &gt;</primary></indexterm>typeinfo name for basic_iostream&lt;char, char_traits&lt;char&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>VTT for basic_iostream&lt;char, char_traits&lt;char&gt; &gt;</primary></indexterm>VTT for basic_iostream&lt;char, char_traits&lt;char&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for basic_iostream&lt;char, char_traits&lt;char&gt; &gt;</primary></indexterm>vtable for basic_iostream&lt;char, char_traits&lt;char&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::basic_iostream<wchar_t, std::char_traits<wchar_t> > -->
<SECT2>
<!--libgroup-->
<TITLE>Class basic_iostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for basic_iostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::basic_iostream&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; class
is described in the relevant architecture specific part of this specification.
</PARA>
<PARA>
The VTT for the std::basic_iostream&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt;  class
is described by <XREF LINKEND="vtt-24661">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="vtt-24661">
<TITLE>VTT for basic_iostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>VTT Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>_ZTTSt14basic_iostreamIwSt11char_traitsIwEE</primary></indexterm>_ZTTSt14basic_iostreamIwSt11char_traitsIwEE</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Number of Entries</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>7</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class basic_iostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::basic_iostream&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clauo-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clauo-ints">
<TITLE>libstdcxx - Class basic_iostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_iostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::basic_iostream(basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;*)</primary></indexterm>basic_iostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::basic_iostream(basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_iostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::basic_iostream()</primary></indexterm>basic_iostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::basic_iostream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_iostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::basic_iostream(basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;*)</primary></indexterm>basic_iostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::basic_iostream(basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_iostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::basic_iostream()</primary></indexterm>basic_iostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::basic_iostream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_iostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_iostream()</primary></indexterm>basic_iostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_iostream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_iostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_iostream()</primary></indexterm>basic_iostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_iostream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_iostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_iostream()</primary></indexterm>basic_iostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_iostream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::basic_iostream&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clauo-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clauo-data">
<TITLE>libstdcxx - Class basic_iostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_iostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</primary></indexterm>typeinfo for basic_iostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for basic_iostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</primary></indexterm>typeinfo name for basic_iostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>VTT for basic_iostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</primary></indexterm>VTT for basic_iostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for basic_iostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</primary></indexterm>vtable for basic_iostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::basic_istream<char, std::char_traits<char> > -->
<SECT2>
<!--libgroup-->
<TITLE>Class basic_istream&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for basic_istream&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt; class
is described in the relevant architecture specific part of this specification.
</PARA>
<PARA>
The VTT for the std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;  class
is described by <XREF LINKEND="vtt-24999">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="vtt-24999">
<TITLE>VTT for basic_istream&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>VTT Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>_ZTTSi</primary></indexterm>_ZTTSi</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Number of Entries</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>2</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Class data for basic_istream&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt; class
is described in the relevant architecture specific part of this specification.
</PARA>
</SECT3>


<SECT3>
<TITLE>Interfaces for Class basic_istream&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-claup-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-claup-ints">
<TITLE>libstdcxx - Class basic_istream&lt;char, char_traits&lt;char&gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::gcount() const</primary></indexterm>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::gcount() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::sentry::operator bool() const</primary></indexterm>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::sentry::operator bool() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::get(basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;&)</primary></indexterm>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::get(basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::get(basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;&, char)</primary></indexterm>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::get(basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;&, char)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::get(char&)</primary></indexterm>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::get(char&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::get()</primary></indexterm>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::get()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::peek()</primary></indexterm>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::peek()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::sync()</primary></indexterm>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::sync()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::seekg(fpos&lt;__mbstate_t&gt;)</primary></indexterm>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::seekg(fpos&lt;__mbstate_t&gt;)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::tellg()</primary></indexterm>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::tellg()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::unget()</primary></indexterm>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::unget()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::ignore()</primary></indexterm>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::ignore()(GLIBCXX_3.4.5) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::sentry::sentry(basic_istream&lt;char, char_traits&lt;char&gt; &gt;&, bool)</primary></indexterm>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::sentry::sentry(basic_istream&lt;char, char_traits&lt;char&gt; &gt;&, bool)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::sentry::sentry(basic_istream&lt;char, char_traits&lt;char&gt; &gt;&, bool)</primary></indexterm>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::sentry::sentry(basic_istream&lt;char, char_traits&lt;char&gt; &gt;&, bool)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::putback(char)</primary></indexterm>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::putback(char)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::basic_istream(basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;*)</primary></indexterm>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::basic_istream(basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::basic_istream()</primary></indexterm>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::basic_istream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::basic_istream(basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;*)</primary></indexterm>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::basic_istream(basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::basic_istream()</primary></indexterm>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::basic_istream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::~basic_istream()</primary></indexterm>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::~basic_istream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::~basic_istream()</primary></indexterm>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::~basic_istream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::~basic_istream()</primary></indexterm>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::~basic_istream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::operator&gt;&gt;(basic_istream&lt;char, char_traits&lt;char&gt; &gt;& (*)(basic_istream&lt;char, char_traits&lt;char&gt; &gt;&))</primary></indexterm>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::operator&gt;&gt;(basic_istream&lt;char, char_traits&lt;char&gt; &gt;& (*)(basic_istream&lt;char, char_traits&lt;char&gt; &gt;&))(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::operator&gt;&gt;(ios_base& (*)(ios_base&))</primary></indexterm>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::operator&gt;&gt;(ios_base& (*)(ios_base&))(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::operator&gt;&gt;(basic_ios&lt;char, char_traits&lt;char&gt; &gt;& (*)(basic_ios&lt;char, char_traits&lt;char&gt; &gt;&))</primary></indexterm>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::operator&gt;&gt;(basic_ios&lt;char, char_traits&lt;char&gt; &gt;& (*)(basic_ios&lt;char, char_traits&lt;char&gt; &gt;&))(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::operator&gt;&gt;(basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;*)</primary></indexterm>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::operator&gt;&gt;(basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::operator&gt;&gt;(void*&)</primary></indexterm>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::operator&gt;&gt;(void*&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::operator&gt;&gt;(bool&)</primary></indexterm>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::operator&gt;&gt;(bool&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::operator&gt;&gt;(double&)</primary></indexterm>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::operator&gt;&gt;(double&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::operator&gt;&gt;(long double&)</primary></indexterm>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::operator&gt;&gt;(long double&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::operator&gt;&gt;(float&)</primary></indexterm>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::operator&gt;&gt;(float&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::operator&gt;&gt;(int&)</primary></indexterm>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::operator&gt;&gt;(int&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::operator&gt;&gt;(unsigned int&)</primary></indexterm>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::operator&gt;&gt;(unsigned int&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::operator&gt;&gt;(long&)</primary></indexterm>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::operator&gt;&gt;(long&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::operator&gt;&gt;(unsigned long&)</primary></indexterm>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::operator&gt;&gt;(unsigned long&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::operator&gt;&gt;(short&)</primary></indexterm>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::operator&gt;&gt;(short&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::operator&gt;&gt;(unsigned short&)</primary></indexterm>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::operator&gt;&gt;(unsigned short&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::operator&gt;&gt;(long long&)</primary></indexterm>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::operator&gt;&gt;(long long&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::operator&gt;&gt;(unsigned long long&)</primary></indexterm>basic_istream&lt;char, char_traits&lt;char&gt; &gt;::operator&gt;&gt;(unsigned long long&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;char, char_traits&lt;char&gt; &gt;& ws&lt;char, char_traits&lt;char&gt; &gt;(basic_istream&lt;char, char_traits&lt;char&gt; &gt;&)</primary></indexterm>basic_istream&lt;char, char_traits&lt;char&gt; &gt;& ws&lt;char, char_traits&lt;char&gt; &gt;(basic_istream&lt;char, char_traits&lt;char&gt; &gt;&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;char, char_traits&lt;char&gt; &gt;& getline&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;(basic_istream&lt;char, char_traits&lt;char&gt; &gt;&, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;&)</primary></indexterm>basic_istream&lt;char, char_traits&lt;char&gt; &gt;& getline&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;(basic_istream&lt;char, char_traits&lt;char&gt; &gt;&, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;char, char_traits&lt;char&gt; &gt;& getline&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;(basic_istream&lt;char, char_traits&lt;char&gt; &gt;&, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;&, char)</primary></indexterm>basic_istream&lt;char, char_traits&lt;char&gt; &gt;& getline&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;(basic_istream&lt;char, char_traits&lt;char&gt; &gt;&, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;&, char)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;char, char_traits&lt;char&gt; &gt;& operator&gt;&gt;&lt;char_traits&lt;char&gt; &gt;(basic_istream&lt;char, char_traits&lt;char&gt; &gt;&, unsigned char*)</primary></indexterm>basic_istream&lt;char, char_traits&lt;char&gt; &gt;& operator&gt;&gt;&lt;char_traits&lt;char&gt; &gt;(basic_istream&lt;char, char_traits&lt;char&gt; &gt;&, unsigned char*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;char, char_traits&lt;char&gt; &gt;& operator&gt;&gt;&lt;char_traits&lt;char&gt; &gt;(basic_istream&lt;char, char_traits&lt;char&gt; &gt;&, signed char&)</primary></indexterm>basic_istream&lt;char, char_traits&lt;char&gt; &gt;& operator&gt;&gt;&lt;char_traits&lt;char&gt; &gt;(basic_istream&lt;char, char_traits&lt;char&gt; &gt;&, signed char&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;char, char_traits&lt;char&gt; &gt;& operator&gt;&gt;&lt;char_traits&lt;char&gt; &gt;(basic_istream&lt;char, char_traits&lt;char&gt; &gt;&, unsigned char&)</primary></indexterm>basic_istream&lt;char, char_traits&lt;char&gt; &gt;& operator&gt;&gt;&lt;char_traits&lt;char&gt; &gt;(basic_istream&lt;char, char_traits&lt;char&gt; &gt;&, unsigned char&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;char, char_traits&lt;char&gt; &gt;& operator&gt;&gt;&lt;char, char_traits&lt;char&gt; &gt;(basic_istream&lt;char, char_traits&lt;char&gt; &gt;&, char*)</primary></indexterm>basic_istream&lt;char, char_traits&lt;char&gt; &gt;& operator&gt;&gt;&lt;char, char_traits&lt;char&gt; &gt;(basic_istream&lt;char, char_traits&lt;char&gt; &gt;&, char*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;char, char_traits&lt;char&gt; &gt;& operator&gt;&gt;&lt;char, char_traits&lt;char&gt; &gt;(basic_istream&lt;char, char_traits&lt;char&gt; &gt;&, char&)</primary></indexterm>basic_istream&lt;char, char_traits&lt;char&gt; &gt;& operator&gt;&gt;&lt;char, char_traits&lt;char&gt; &gt;(basic_istream&lt;char, char_traits&lt;char&gt; &gt;&, char&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;char, char_traits&lt;char&gt; &gt;& operator&gt;&gt;&lt;char, char_traits&lt;char&gt; &gt;(basic_istream&lt;char, char_traits&lt;char&gt; &gt;&, _Setiosflags)</primary></indexterm>basic_istream&lt;char, char_traits&lt;char&gt; &gt;& operator&gt;&gt;&lt;char, char_traits&lt;char&gt; &gt;(basic_istream&lt;char, char_traits&lt;char&gt; &gt;&, _Setiosflags)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;char, char_traits&lt;char&gt; &gt;& operator&gt;&gt;&lt;char, char_traits&lt;char&gt; &gt;(basic_istream&lt;char, char_traits&lt;char&gt; &gt;&, _Setprecision)</primary></indexterm>basic_istream&lt;char, char_traits&lt;char&gt; &gt;& operator&gt;&gt;&lt;char, char_traits&lt;char&gt; &gt;(basic_istream&lt;char, char_traits&lt;char&gt; &gt;&, _Setprecision)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;char, char_traits&lt;char&gt; &gt;& operator&gt;&gt;&lt;char, char_traits&lt;char&gt; &gt;(basic_istream&lt;char, char_traits&lt;char&gt; &gt;&, _Resetiosflags)</primary></indexterm>basic_istream&lt;char, char_traits&lt;char&gt; &gt;& operator&gt;&gt;&lt;char, char_traits&lt;char&gt; &gt;(basic_istream&lt;char, char_traits&lt;char&gt; &gt;&, _Resetiosflags)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;char, char_traits&lt;char&gt; &gt;& operator&gt;&gt;&lt;char, char_traits&lt;char&gt; &gt;(basic_istream&lt;char, char_traits&lt;char&gt; &gt;&, _Setw)</primary></indexterm>basic_istream&lt;char, char_traits&lt;char&gt; &gt;& operator&gt;&gt;&lt;char, char_traits&lt;char&gt; &gt;(basic_istream&lt;char, char_traits&lt;char&gt; &gt;&, _Setw)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;char, char_traits&lt;char&gt; &gt;& operator&gt;&gt;&lt;char, char_traits&lt;char&gt; &gt;(basic_istream&lt;char, char_traits&lt;char&gt; &gt;&, _Setbase)</primary></indexterm>basic_istream&lt;char, char_traits&lt;char&gt; &gt;& operator&gt;&gt;&lt;char, char_traits&lt;char&gt; &gt;(basic_istream&lt;char, char_traits&lt;char&gt; &gt;&, _Setbase)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;char, char_traits&lt;char&gt; &gt;& operator&gt;&gt;&lt;char, char_traits&lt;char&gt; &gt;(basic_istream&lt;char, char_traits&lt;char&gt; &gt;&, _Setfill&lt;char&gt;)</primary></indexterm>basic_istream&lt;char, char_traits&lt;char&gt; &gt;& operator&gt;&gt;&lt;char, char_traits&lt;char&gt; &gt;(basic_istream&lt;char, char_traits&lt;char&gt; &gt;&, _Setfill&lt;char&gt;)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;char, char_traits&lt;char&gt; &gt;& operator&gt;&gt;&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;(basic_istream&lt;char, char_traits&lt;char&gt; &gt;&, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;&)</primary></indexterm>basic_istream&lt;char, char_traits&lt;char&gt; &gt;& operator&gt;&gt;&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;(basic_istream&lt;char, char_traits&lt;char&gt; &gt;&, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;char, char_traits&lt;char&gt; &gt;& operator&gt;&gt;&lt;double, char, char_traits&lt;char&gt; &gt;(basic_istream&lt;char, char_traits&lt;char&gt; &gt;&, complex&lt;double&gt;&)</primary></indexterm>basic_istream&lt;char, char_traits&lt;char&gt; &gt;& operator&gt;&gt;&lt;double, char, char_traits&lt;char&gt; &gt;(basic_istream&lt;char, char_traits&lt;char&gt; &gt;&, complex&lt;double&gt;&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;char, char_traits&lt;char&gt; &gt;& operator&gt;&gt;&lt;long double, char, char_traits&lt;char&gt; &gt;(basic_istream&lt;char, char_traits&lt;char&gt; &gt;&, complex&lt;long double&gt;&)</primary></indexterm>basic_istream&lt;char, char_traits&lt;char&gt; &gt;& operator&gt;&gt;&lt;long double, char, char_traits&lt;char&gt; &gt;(basic_istream&lt;char, char_traits&lt;char&gt; &gt;&, complex&lt;long double&gt;&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;char, char_traits&lt;char&gt; &gt;& operator&gt;&gt;&lt;float, char, char_traits&lt;char&gt; &gt;(basic_istream&lt;char, char_traits&lt;char&gt; &gt;&, complex&lt;float&gt;&)</primary></indexterm>basic_istream&lt;char, char_traits&lt;char&gt; &gt;& operator&gt;&gt;&lt;float, char, char_traits&lt;char&gt; &gt;(basic_istream&lt;char, char_traits&lt;char&gt; &gt;&, complex&lt;float&gt;&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-claup-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-claup-data">
<TITLE>libstdcxx - Class basic_istream&lt;char, char_traits&lt;char&gt; &gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_istream&lt;char, char_traits&lt;char&gt; &gt;</primary></indexterm>typeinfo for basic_istream&lt;char, char_traits&lt;char&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for basic_istream&lt;char, char_traits&lt;char&gt; &gt;</primary></indexterm>typeinfo name for basic_istream&lt;char, char_traits&lt;char&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>VTT for basic_istream&lt;char, char_traits&lt;char&gt; &gt;</primary></indexterm>VTT for basic_istream&lt;char, char_traits&lt;char&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for basic_istream&lt;char, char_traits&lt;char&gt; &gt;</primary></indexterm>vtable for basic_istream&lt;char, char_traits&lt;char&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::basic_istream<wchar_t, std::char_traits<wchar_t> > -->
<SECT2>
<!--libgroup-->
<TITLE>Class basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::basic_istream&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; class
is described in the relevant architecture specific part of this specification.
</PARA>
<PARA>
The VTT for the std::basic_istream&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt;  class
is described by <XREF LINKEND="vtt-25001">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="vtt-25001">
<TITLE>VTT for basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>VTT Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>_ZTTSt13basic_istreamIwSt11char_traitsIwEE</primary></indexterm>_ZTTSt13basic_istreamIwSt11char_traitsIwEE</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Number of Entries</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>2</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::basic_istream&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clauq-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clauq-ints">
<TITLE>libstdcxx - Class basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::gcount() const</primary></indexterm>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::gcount() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::sentry::operator bool() const</primary></indexterm>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::sentry::operator bool() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::get(basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&)</primary></indexterm>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::get(basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::get(basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&, wchar_t)</primary></indexterm>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::get(basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&, wchar_t)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::get(wchar_t&)</primary></indexterm>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::get(wchar_t&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::get()</primary></indexterm>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::get()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::peek()</primary></indexterm>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::peek()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::sync()</primary></indexterm>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::sync()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::seekg(fpos&lt;__mbstate_t&gt;)</primary></indexterm>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::seekg(fpos&lt;__mbstate_t&gt;)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::tellg()</primary></indexterm>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::tellg()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::unget()</primary></indexterm>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::unget()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::ignore()</primary></indexterm>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::ignore()(GLIBCXX_3.4.5) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::sentry::sentry(basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&, bool)</primary></indexterm>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::sentry::sentry(basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&, bool)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::sentry::sentry(basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&, bool)</primary></indexterm>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::sentry::sentry(basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&, bool)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::putback(wchar_t)</primary></indexterm>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::putback(wchar_t)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::basic_istream(basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;*)</primary></indexterm>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::basic_istream(basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::basic_istream(basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;*)</primary></indexterm>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::basic_istream(basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_istream()</primary></indexterm>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_istream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_istream()</primary></indexterm>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_istream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_istream()</primary></indexterm>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_istream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator&gt;&gt;(basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& (*)(basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&))</primary></indexterm>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator&gt;&gt;(basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& (*)(basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&))(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator&gt;&gt;(ios_base& (*)(ios_base&))</primary></indexterm>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator&gt;&gt;(ios_base& (*)(ios_base&))(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator&gt;&gt;(basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& (*)(basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&))</primary></indexterm>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator&gt;&gt;(basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& (*)(basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&))(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator&gt;&gt;(basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;*)</primary></indexterm>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator&gt;&gt;(basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator&gt;&gt;(void*&)</primary></indexterm>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator&gt;&gt;(void*&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator&gt;&gt;(bool&)</primary></indexterm>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator&gt;&gt;(bool&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator&gt;&gt;(double&)</primary></indexterm>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator&gt;&gt;(double&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator&gt;&gt;(long double&)</primary></indexterm>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator&gt;&gt;(long double&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator&gt;&gt;(float&)</primary></indexterm>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator&gt;&gt;(float&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator&gt;&gt;(int&)</primary></indexterm>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator&gt;&gt;(int&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator&gt;&gt;(unsigned int&)</primary></indexterm>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator&gt;&gt;(unsigned int&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator&gt;&gt;(long&)</primary></indexterm>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator&gt;&gt;(long&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator&gt;&gt;(unsigned long&)</primary></indexterm>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator&gt;&gt;(unsigned long&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator&gt;&gt;(short&)</primary></indexterm>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator&gt;&gt;(short&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator&gt;&gt;(unsigned short&)</primary></indexterm>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator&gt;&gt;(unsigned short&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator&gt;&gt;(long long&)</primary></indexterm>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator&gt;&gt;(long long&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator&gt;&gt;(unsigned long long&)</primary></indexterm>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator&gt;&gt;(unsigned long long&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& ws&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&)</primary></indexterm>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& ws&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& getline&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;(basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;&)</primary></indexterm>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& getline&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;(basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& getline&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;(basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;&, wchar_t)</primary></indexterm>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& getline&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;(basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;&, wchar_t)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& operator&gt;&gt;&lt;double, wchar_t, char_traits&lt;wchar_t&gt; &gt;(basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&, complex&lt;double&gt;&)</primary></indexterm>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& operator&gt;&gt;&lt;double, wchar_t, char_traits&lt;wchar_t&gt; &gt;(basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&, complex&lt;double&gt;&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& operator&gt;&gt;&lt;long double, wchar_t, char_traits&lt;wchar_t&gt; &gt;(basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&, complex&lt;long double&gt;&)</primary></indexterm>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& operator&gt;&gt;&lt;long double, wchar_t, char_traits&lt;wchar_t&gt; &gt;(basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&, complex&lt;long double&gt;&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& operator&gt;&gt;&lt;float, wchar_t, char_traits&lt;wchar_t&gt; &gt;(basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&, complex&lt;float&gt;&)</primary></indexterm>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& operator&gt;&gt;&lt;float, wchar_t, char_traits&lt;wchar_t&gt; &gt;(basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&, complex&lt;float&gt;&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& operator&gt;&gt;&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&, wchar_t*)</primary></indexterm>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& operator&gt;&gt;&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&, wchar_t*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& operator&gt;&gt;&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&, wchar_t&)</primary></indexterm>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& operator&gt;&gt;&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&, wchar_t&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& operator&gt;&gt;&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&, _Setiosflags)</primary></indexterm>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& operator&gt;&gt;&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&, _Setiosflags)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& operator&gt;&gt;&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&, _Setprecision)</primary></indexterm>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& operator&gt;&gt;&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&, _Setprecision)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& operator&gt;&gt;&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&, _Resetiosflags)</primary></indexterm>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& operator&gt;&gt;&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&, _Resetiosflags)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& operator&gt;&gt;&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&, _Setw)</primary></indexterm>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& operator&gt;&gt;&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&, _Setw)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& operator&gt;&gt;&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&, _Setbase)</primary></indexterm>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& operator&gt;&gt;&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&, _Setbase)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& operator&gt;&gt;&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&, _Setfill&lt;wchar_t&gt;)</primary></indexterm>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& operator&gt;&gt;&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&, _Setfill&lt;wchar_t&gt;)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& operator&gt;&gt;&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;(basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;&)</primary></indexterm>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& operator&gt;&gt;&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;(basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::basic_istream&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clauq-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clauq-data">
<TITLE>libstdcxx - Class basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</primary></indexterm>typeinfo for basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</primary></indexterm>typeinfo name for basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>VTT for basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</primary></indexterm>VTT for basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</primary></indexterm>vtable for basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > -->
<SECT2>
<!--libgroup-->
<TITLE>Class istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for Class istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::istreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-claur-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-claur-ints">
<TITLE>libstdcxx - Class istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator++()</primary></indexterm>istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator++()(GLIBCXX_3.4.5) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::istreambuf_iterator<char, std::char_traits<char> > -->
<SECT2>
<!--libgroup-->
<TITLE>Class istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for Class istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-claus-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-claus-ints">
<TITLE>libstdcxx - Class istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;::operator++()</primary></indexterm>istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;::operator++()(GLIBCXX_3.4.5) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::basic_ostream<char, std::char_traits<char> > -->
<SECT2>
<!--libgroup-->
<TITLE>Class basic_ostream&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for basic_ostream&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt; class
is described in the relevant architecture specific part of this specification.
</PARA>
<PARA>
The VTT for the std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;  class
is described by <XREF LINKEND="vtt-25000">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="vtt-25000">
<TITLE>VTT for basic_ostream&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>VTT Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>_ZTTSo</primary></indexterm>_ZTTSo</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Number of Entries</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>2</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Class data for basic_ostream&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt; class
is described in the relevant architecture specific part of this specification.
</PARA>
</SECT3>


<SECT3>
<TITLE>Interfaces for Class basic_ostream&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-claut-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-claut-ints">
<TITLE>libstdcxx - Class basic_ostream&lt;char, char_traits&lt;char&gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::sentry::operator bool() const</primary></indexterm>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::sentry::operator bool() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::put(char)</primary></indexterm>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::put(char)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::flush()</primary></indexterm>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::flush()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::seekp(fpos&lt;__mbstate_t&gt;)</primary></indexterm>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::seekp(fpos&lt;__mbstate_t&gt;)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::tellp()</primary></indexterm>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::tellp()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::sentry::sentry(basic_ostream&lt;char, char_traits&lt;char&gt; &gt;&)</primary></indexterm>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::sentry::sentry(basic_ostream&lt;char, char_traits&lt;char&gt; &gt;&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::sentry::sentry(basic_ostream&lt;char, char_traits&lt;char&gt; &gt;&)</primary></indexterm>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::sentry::sentry(basic_ostream&lt;char, char_traits&lt;char&gt; &gt;&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::sentry::~sentry()</primary></indexterm>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::sentry::~sentry()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::sentry::~sentry()</primary></indexterm>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::sentry::~sentry()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::basic_ostream(basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;*)</primary></indexterm>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::basic_ostream(basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::basic_ostream()</primary></indexterm>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::basic_ostream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::basic_ostream(basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;*)</primary></indexterm>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::basic_ostream(basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::basic_ostream()</primary></indexterm>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::basic_ostream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::~basic_ostream()</primary></indexterm>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::~basic_ostream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::~basic_ostream()</primary></indexterm>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::~basic_ostream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::~basic_ostream()</primary></indexterm>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::~basic_ostream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::operator&lt;&lt;(basic_ostream&lt;char, char_traits&lt;char&gt; &gt;& (*)(basic_ostream&lt;char, char_traits&lt;char&gt; &gt;&))</primary></indexterm>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::operator&lt;&lt;(basic_ostream&lt;char, char_traits&lt;char&gt; &gt;& (*)(basic_ostream&lt;char, char_traits&lt;char&gt; &gt;&))(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::operator&lt;&lt;(ios_base& (*)(ios_base&))</primary></indexterm>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::operator&lt;&lt;(ios_base& (*)(ios_base&))(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::operator&lt;&lt;(basic_ios&lt;char, char_traits&lt;char&gt; &gt;& (*)(basic_ios&lt;char, char_traits&lt;char&gt; &gt;&))</primary></indexterm>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::operator&lt;&lt;(basic_ios&lt;char, char_traits&lt;char&gt; &gt;& (*)(basic_ios&lt;char, char_traits&lt;char&gt; &gt;&))(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::operator&lt;&lt;(void const*)</primary></indexterm>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::operator&lt;&lt;(void const*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::operator&lt;&lt;(basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;*)</primary></indexterm>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::operator&lt;&lt;(basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::operator&lt;&lt;(bool)</primary></indexterm>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::operator&lt;&lt;(bool)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::operator&lt;&lt;(double)</primary></indexterm>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::operator&lt;&lt;(double)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::operator&lt;&lt;(long double)</primary></indexterm>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::operator&lt;&lt;(long double)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::operator&lt;&lt;(float)</primary></indexterm>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::operator&lt;&lt;(float)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::operator&lt;&lt;(int)</primary></indexterm>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::operator&lt;&lt;(int)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::operator&lt;&lt;(unsigned int)</primary></indexterm>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::operator&lt;&lt;(unsigned int)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::operator&lt;&lt;(long)</primary></indexterm>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::operator&lt;&lt;(long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::operator&lt;&lt;(unsigned long)</primary></indexterm>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::operator&lt;&lt;(unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::operator&lt;&lt;(short)</primary></indexterm>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::operator&lt;&lt;(short)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::operator&lt;&lt;(unsigned short)</primary></indexterm>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::operator&lt;&lt;(unsigned short)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::operator&lt;&lt;(long long)</primary></indexterm>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::operator&lt;&lt;(long long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::operator&lt;&lt;(unsigned long long)</primary></indexterm>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;::operator&lt;&lt;(unsigned long long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;& endl&lt;char, char_traits&lt;char&gt; &gt;(basic_ostream&lt;char, char_traits&lt;char&gt; &gt;&)</primary></indexterm>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;& endl&lt;char, char_traits&lt;char&gt; &gt;(basic_ostream&lt;char, char_traits&lt;char&gt; &gt;&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;& ends&lt;char, char_traits&lt;char&gt; &gt;(basic_ostream&lt;char, char_traits&lt;char&gt; &gt;&)</primary></indexterm>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;& ends&lt;char, char_traits&lt;char&gt; &gt;(basic_ostream&lt;char, char_traits&lt;char&gt; &gt;&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;& flush&lt;char, char_traits&lt;char&gt; &gt;(basic_ostream&lt;char, char_traits&lt;char&gt; &gt;&)</primary></indexterm>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;& flush&lt;char, char_traits&lt;char&gt; &gt;(basic_ostream&lt;char, char_traits&lt;char&gt; &gt;&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;& operator&lt;&lt; &lt;char_traits&lt;char&gt; &gt;(basic_ostream&lt;char, char_traits&lt;char&gt; &gt;&, signed char const*)</primary></indexterm>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;& operator&lt;&lt; &lt;char_traits&lt;char&gt; &gt;(basic_ostream&lt;char, char_traits&lt;char&gt; &gt;&, signed char const*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;& operator&lt;&lt; &lt;char_traits&lt;char&gt; &gt;(basic_ostream&lt;char, char_traits&lt;char&gt; &gt;&, char const*)</primary></indexterm>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;& operator&lt;&lt; &lt;char_traits&lt;char&gt; &gt;(basic_ostream&lt;char, char_traits&lt;char&gt; &gt;&, char const*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;& operator&lt;&lt; &lt;char_traits&lt;char&gt; &gt;(basic_ostream&lt;char, char_traits&lt;char&gt; &gt;&, unsigned char const*)</primary></indexterm>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;& operator&lt;&lt; &lt;char_traits&lt;char&gt; &gt;(basic_ostream&lt;char, char_traits&lt;char&gt; &gt;&, unsigned char const*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;& operator&lt;&lt; &lt;char_traits&lt;char&gt; &gt;(basic_ostream&lt;char, char_traits&lt;char&gt; &gt;&, signed char)</primary></indexterm>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;& operator&lt;&lt; &lt;char_traits&lt;char&gt; &gt;(basic_ostream&lt;char, char_traits&lt;char&gt; &gt;&, signed char)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;& operator&lt;&lt; &lt;char_traits&lt;char&gt; &gt;(basic_ostream&lt;char, char_traits&lt;char&gt; &gt;&, char)</primary></indexterm>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;& operator&lt;&lt; &lt;char_traits&lt;char&gt; &gt;(basic_ostream&lt;char, char_traits&lt;char&gt; &gt;&, char)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;& operator&lt;&lt; &lt;char_traits&lt;char&gt; &gt;(basic_ostream&lt;char, char_traits&lt;char&gt; &gt;&, unsigned char)</primary></indexterm>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;& operator&lt;&lt; &lt;char_traits&lt;char&gt; &gt;(basic_ostream&lt;char, char_traits&lt;char&gt; &gt;&, unsigned char)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;& operator&lt;&lt; &lt;char, char_traits&lt;char&gt; &gt;(basic_ostream&lt;char, char_traits&lt;char&gt; &gt;&, _Setiosflags)</primary></indexterm>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;& operator&lt;&lt; &lt;char, char_traits&lt;char&gt; &gt;(basic_ostream&lt;char, char_traits&lt;char&gt; &gt;&, _Setiosflags)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;& operator&lt;&lt; &lt;char, char_traits&lt;char&gt; &gt;(basic_ostream&lt;char, char_traits&lt;char&gt; &gt;&, _Setprecision)</primary></indexterm>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;& operator&lt;&lt; &lt;char, char_traits&lt;char&gt; &gt;(basic_ostream&lt;char, char_traits&lt;char&gt; &gt;&, _Setprecision)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;& operator&lt;&lt; &lt;char, char_traits&lt;char&gt; &gt;(basic_ostream&lt;char, char_traits&lt;char&gt; &gt;&, _Resetiosflags)</primary></indexterm>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;& operator&lt;&lt; &lt;char, char_traits&lt;char&gt; &gt;(basic_ostream&lt;char, char_traits&lt;char&gt; &gt;&, _Resetiosflags)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;& operator&lt;&lt; &lt;char, char_traits&lt;char&gt; &gt;(basic_ostream&lt;char, char_traits&lt;char&gt; &gt;&, _Setw)</primary></indexterm>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;& operator&lt;&lt; &lt;char, char_traits&lt;char&gt; &gt;(basic_ostream&lt;char, char_traits&lt;char&gt; &gt;&, _Setw)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;& operator&lt;&lt; &lt;char, char_traits&lt;char&gt; &gt;(basic_ostream&lt;char, char_traits&lt;char&gt; &gt;&, _Setbase)</primary></indexterm>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;& operator&lt;&lt; &lt;char, char_traits&lt;char&gt; &gt;(basic_ostream&lt;char, char_traits&lt;char&gt; &gt;&, _Setbase)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;& operator&lt;&lt; &lt;char, char_traits&lt;char&gt; &gt;(basic_ostream&lt;char, char_traits&lt;char&gt; &gt;&, _Setfill&lt;char&gt;)</primary></indexterm>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;& operator&lt;&lt; &lt;char, char_traits&lt;char&gt; &gt;(basic_ostream&lt;char, char_traits&lt;char&gt; &gt;&, _Setfill&lt;char&gt;)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;& operator&lt;&lt; &lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;(basic_ostream&lt;char, char_traits&lt;char&gt; &gt;&, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)</primary></indexterm>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;& operator&lt;&lt; &lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;(basic_ostream&lt;char, char_traits&lt;char&gt; &gt;&, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;& operator&lt;&lt; &lt;double, char, char_traits&lt;char&gt; &gt;(basic_ostream&lt;char, char_traits&lt;char&gt; &gt;&, complex&lt;double&gt; const&)</primary></indexterm>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;& operator&lt;&lt; &lt;double, char, char_traits&lt;char&gt; &gt;(basic_ostream&lt;char, char_traits&lt;char&gt; &gt;&, complex&lt;double&gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;& operator&lt;&lt; &lt;long double, char, char_traits&lt;char&gt; &gt;(basic_ostream&lt;char, char_traits&lt;char&gt; &gt;&, complex&lt;long double&gt; const&)</primary></indexterm>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;& operator&lt;&lt; &lt;long double, char, char_traits&lt;char&gt; &gt;(basic_ostream&lt;char, char_traits&lt;char&gt; &gt;&, complex&lt;long double&gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;& operator&lt;&lt; &lt;float, char, char_traits&lt;char&gt; &gt;(basic_ostream&lt;char, char_traits&lt;char&gt; &gt;&, complex&lt;float&gt; const&)</primary></indexterm>basic_ostream&lt;char, char_traits&lt;char&gt; &gt;& operator&lt;&lt; &lt;float, char, char_traits&lt;char&gt; &gt;(basic_ostream&lt;char, char_traits&lt;char&gt; &gt;&, complex&lt;float&gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-claut-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-claut-data">
<TITLE>libstdcxx - Class basic_ostream&lt;char, char_traits&lt;char&gt; &gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_ostream&lt;char, char_traits&lt;char&gt; &gt;</primary></indexterm>typeinfo for basic_ostream&lt;char, char_traits&lt;char&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for basic_ostream&lt;char, char_traits&lt;char&gt; &gt;</primary></indexterm>typeinfo name for basic_ostream&lt;char, char_traits&lt;char&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>VTT for basic_ostream&lt;char, char_traits&lt;char&gt; &gt;</primary></indexterm>VTT for basic_ostream&lt;char, char_traits&lt;char&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for basic_ostream&lt;char, char_traits&lt;char&gt; &gt;</primary></indexterm>vtable for basic_ostream&lt;char, char_traits&lt;char&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::basic_ostream<wchar_t, std::char_traits<wchar_t> > -->
<SECT2>
<!--libgroup-->
<TITLE>Class basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::basic_ostream&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; class
is described in the relevant architecture specific part of this specification.
</PARA>
<PARA>
The VTT for the std::basic_ostream&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt;  class
is described by <XREF LINKEND="vtt-25002">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="vtt-25002">
<TITLE>VTT for basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>VTT Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>_ZTTSt13basic_ostreamIwSt11char_traitsIwEE</primary></indexterm>_ZTTSt13basic_ostreamIwSt11char_traitsIwEE</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Number of Entries</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>2</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::basic_ostream&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clauu-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clauu-ints">
<TITLE>libstdcxx - Class basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::sentry::operator bool() const</primary></indexterm>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::sentry::operator bool() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::put(wchar_t)</primary></indexterm>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::put(wchar_t)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::flush()</primary></indexterm>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::flush()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::seekp(fpos&lt;__mbstate_t&gt;)</primary></indexterm>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::seekp(fpos&lt;__mbstate_t&gt;)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::tellp()</primary></indexterm>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::tellp()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::sentry::sentry(basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&)</primary></indexterm>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::sentry::sentry(basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::sentry::sentry(basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&)</primary></indexterm>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::sentry::sentry(basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::sentry::~sentry()</primary></indexterm>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::sentry::~sentry()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::sentry::~sentry()</primary></indexterm>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::sentry::~sentry()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::basic_ostream(basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;*)</primary></indexterm>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::basic_ostream(basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::basic_ostream(basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;*)</primary></indexterm>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::basic_ostream(basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_ostream()</primary></indexterm>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_ostream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_ostream()</primary></indexterm>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_ostream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_ostream()</primary></indexterm>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_ostream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator&lt;&lt;(basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& (*)(basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&))</primary></indexterm>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator&lt;&lt;(basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& (*)(basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&))(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator&lt;&lt;(ios_base& (*)(ios_base&))</primary></indexterm>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator&lt;&lt;(ios_base& (*)(ios_base&))(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator&lt;&lt;(basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& (*)(basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&))</primary></indexterm>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator&lt;&lt;(basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& (*)(basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&))(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator&lt;&lt;(void const*)</primary></indexterm>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator&lt;&lt;(void const*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator&lt;&lt;(basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;*)</primary></indexterm>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator&lt;&lt;(basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator&lt;&lt;(bool)</primary></indexterm>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator&lt;&lt;(bool)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator&lt;&lt;(double)</primary></indexterm>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator&lt;&lt;(double)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator&lt;&lt;(long double)</primary></indexterm>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator&lt;&lt;(long double)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator&lt;&lt;(float)</primary></indexterm>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator&lt;&lt;(float)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator&lt;&lt;(int)</primary></indexterm>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator&lt;&lt;(int)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator&lt;&lt;(unsigned int)</primary></indexterm>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator&lt;&lt;(unsigned int)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator&lt;&lt;(long)</primary></indexterm>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator&lt;&lt;(long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator&lt;&lt;(unsigned long)</primary></indexterm>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator&lt;&lt;(unsigned long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator&lt;&lt;(short)</primary></indexterm>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator&lt;&lt;(short)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator&lt;&lt;(unsigned short)</primary></indexterm>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator&lt;&lt;(unsigned short)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator&lt;&lt;(long long)</primary></indexterm>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator&lt;&lt;(long long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator&lt;&lt;(unsigned long long)</primary></indexterm>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator&lt;&lt;(unsigned long long)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& endl&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&)</primary></indexterm>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& endl&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& ends&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&)</primary></indexterm>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& ends&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& flush&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&)</primary></indexterm>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& flush&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& operator&lt;&lt; &lt;double, wchar_t, char_traits&lt;wchar_t&gt; &gt;(basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&, complex&lt;double&gt; const&)</primary></indexterm>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& operator&lt;&lt; &lt;double, wchar_t, char_traits&lt;wchar_t&gt; &gt;(basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&, complex&lt;double&gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& operator&lt;&lt; &lt;long double, wchar_t, char_traits&lt;wchar_t&gt; &gt;(basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&, complex&lt;long double&gt; const&)</primary></indexterm>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& operator&lt;&lt; &lt;long double, wchar_t, char_traits&lt;wchar_t&gt; &gt;(basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&, complex&lt;long double&gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& operator&lt;&lt; &lt;float, wchar_t, char_traits&lt;wchar_t&gt; &gt;(basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&, complex&lt;float&gt; const&)</primary></indexterm>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& operator&lt;&lt; &lt;float, wchar_t, char_traits&lt;wchar_t&gt; &gt;(basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&, complex&lt;float&gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& operator&lt;&lt; &lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&, wchar_t const*)</primary></indexterm>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& operator&lt;&lt; &lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&, wchar_t const*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& operator&lt;&lt; &lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&, char const*)</primary></indexterm>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& operator&lt;&lt; &lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&, char const*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& operator&lt;&lt; &lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&, wchar_t)</primary></indexterm>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& operator&lt;&lt; &lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&, wchar_t)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& operator&lt;&lt; &lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&, _Setiosflags)</primary></indexterm>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& operator&lt;&lt; &lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&, _Setiosflags)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& operator&lt;&lt; &lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&, _Setprecision)</primary></indexterm>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& operator&lt;&lt; &lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&, _Setprecision)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& operator&lt;&lt; &lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&, _Resetiosflags)</primary></indexterm>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& operator&lt;&lt; &lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&, _Resetiosflags)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& operator&lt;&lt; &lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&, _Setw)</primary></indexterm>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& operator&lt;&lt; &lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&, _Setw)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& operator&lt;&lt; &lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&, _Setbase)</primary></indexterm>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& operator&lt;&lt; &lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&, _Setbase)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& operator&lt;&lt; &lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&, _Setfill&lt;wchar_t&gt;)</primary></indexterm>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& operator&lt;&lt; &lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&, _Setfill&lt;wchar_t&gt;)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& operator&lt;&lt; &lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&, char)</primary></indexterm>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& operator&lt;&lt; &lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&, char)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& operator&lt;&lt; &lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;(basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&)</primary></indexterm>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;& operator&lt;&lt; &lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;(basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;&, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::basic_ostream&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clauu-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clauu-data">
<TITLE>libstdcxx - Class basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</primary></indexterm>typeinfo for basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</primary></indexterm>typeinfo name for basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>VTT for basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</primary></indexterm>VTT for basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</primary></indexterm>vtable for basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::basic_fstream<char, std::char_traits<char> > -->
<SECT2>
<!--libgroup-->
<TITLE>Class basic_fstream&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for basic_fstream&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::basic_fstream&lt;char, std::char_traits&lt;char&gt; &gt; class
is described in the relevant architecture specific part of this specification.
</PARA>
<PARA>
The VTT for the std::basic_fstream&lt;char, std::char_traits&lt;char&gt; &gt;  class
is described by <XREF LINKEND="vtt-24740">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="vtt-24740">
<TITLE>VTT for basic_fstream&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>VTT Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>_ZTTSt13basic_fstreamIcSt11char_traitsIcEE</primary></indexterm>_ZTTSt13basic_fstreamIcSt11char_traitsIcEE</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Number of Entries</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>10</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class basic_fstream&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::basic_fstream&lt;char, std::char_traits&lt;char&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clauv-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clauv-ints">
<TITLE>libstdcxx - Class basic_fstream&lt;char, char_traits&lt;char&gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_fstream&lt;char, char_traits&lt;char&gt; &gt;::rdbuf() const</primary></indexterm>basic_fstream&lt;char, char_traits&lt;char&gt; &gt;::rdbuf() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_fstream&lt;char, char_traits&lt;char&gt; &gt;::is_open() const</primary></indexterm>basic_fstream&lt;char, char_traits&lt;char&gt; &gt;::is_open() const(GLIBCXX_3.4.5) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_fstream&lt;char, char_traits&lt;char&gt; &gt;::open(char const*, _Ios_Openmode)</primary></indexterm>basic_fstream&lt;char, char_traits&lt;char&gt; &gt;::open(char const*, _Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_fstream&lt;char, char_traits&lt;char&gt; &gt;::close()</primary></indexterm>basic_fstream&lt;char, char_traits&lt;char&gt; &gt;::close()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_fstream&lt;char, char_traits&lt;char&gt; &gt;::is_open()</primary></indexterm>basic_fstream&lt;char, char_traits&lt;char&gt; &gt;::is_open()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_fstream&lt;char, char_traits&lt;char&gt; &gt;::basic_fstream(char const*, _Ios_Openmode)</primary></indexterm>basic_fstream&lt;char, char_traits&lt;char&gt; &gt;::basic_fstream(char const*, _Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_fstream&lt;char, char_traits&lt;char&gt; &gt;::basic_fstream()</primary></indexterm>basic_fstream&lt;char, char_traits&lt;char&gt; &gt;::basic_fstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_fstream&lt;char, char_traits&lt;char&gt; &gt;::basic_fstream(char const*, _Ios_Openmode)</primary></indexterm>basic_fstream&lt;char, char_traits&lt;char&gt; &gt;::basic_fstream(char const*, _Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_fstream&lt;char, char_traits&lt;char&gt; &gt;::basic_fstream()</primary></indexterm>basic_fstream&lt;char, char_traits&lt;char&gt; &gt;::basic_fstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_fstream&lt;char, char_traits&lt;char&gt; &gt;::~basic_fstream()</primary></indexterm>basic_fstream&lt;char, char_traits&lt;char&gt; &gt;::~basic_fstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_fstream&lt;char, char_traits&lt;char&gt; &gt;::~basic_fstream()</primary></indexterm>basic_fstream&lt;char, char_traits&lt;char&gt; &gt;::~basic_fstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_fstream&lt;char, char_traits&lt;char&gt; &gt;::~basic_fstream()</primary></indexterm>basic_fstream&lt;char, char_traits&lt;char&gt; &gt;::~basic_fstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::basic_fstream&lt;char, std::char_traits&lt;char&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clauv-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clauv-data">
<TITLE>libstdcxx - Class basic_fstream&lt;char, char_traits&lt;char&gt; &gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_fstream&lt;char, char_traits&lt;char&gt; &gt;</primary></indexterm>typeinfo for basic_fstream&lt;char, char_traits&lt;char&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for basic_fstream&lt;char, char_traits&lt;char&gt; &gt;</primary></indexterm>typeinfo name for basic_fstream&lt;char, char_traits&lt;char&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>VTT for basic_fstream&lt;char, char_traits&lt;char&gt; &gt;</primary></indexterm>VTT for basic_fstream&lt;char, char_traits&lt;char&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for basic_fstream&lt;char, char_traits&lt;char&gt; &gt;</primary></indexterm>vtable for basic_fstream&lt;char, char_traits&lt;char&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::basic_fstream<wchar_t, std::char_traits<wchar_t> > -->
<SECT2>
<!--libgroup-->
<TITLE>Class basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::basic_fstream&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; class
is described in the relevant architecture specific part of this specification.
</PARA>
<PARA>
The VTT for the std::basic_fstream&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt;  class
is described by <XREF LINKEND="vtt-24741">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="vtt-24741">
<TITLE>VTT for basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>VTT Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>_ZTTSt13basic_fstreamIwSt11char_traitsIwEE</primary></indexterm>_ZTTSt13basic_fstreamIwSt11char_traitsIwEE</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Number of Entries</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>10</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::basic_fstream&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clauw-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clauw-ints">
<TITLE>libstdcxx - Class basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::rdbuf() const</primary></indexterm>basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::rdbuf() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::is_open() const</primary></indexterm>basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::is_open() const(GLIBCXX_3.4.5) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::open(char const*, _Ios_Openmode)</primary></indexterm>basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::open(char const*, _Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::close()</primary></indexterm>basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::close()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::is_open()</primary></indexterm>basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::is_open()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::basic_fstream(char const*, _Ios_Openmode)</primary></indexterm>basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::basic_fstream(char const*, _Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::basic_fstream()</primary></indexterm>basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::basic_fstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::basic_fstream(char const*, _Ios_Openmode)</primary></indexterm>basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::basic_fstream(char const*, _Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::basic_fstream()</primary></indexterm>basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::basic_fstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_fstream()</primary></indexterm>basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_fstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_fstream()</primary></indexterm>basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_fstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_fstream()</primary></indexterm>basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_fstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::basic_fstream&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clauw-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clauw-data">
<TITLE>libstdcxx - Class basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</primary></indexterm>typeinfo for basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</primary></indexterm>typeinfo name for basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>VTT for basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</primary></indexterm>VTT for basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</primary></indexterm>vtable for basic_fstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::basic_ifstream<char, std::char_traits<char> > -->
<SECT2>
<!--libgroup-->
<TITLE>Class basic_ifstream&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for basic_ifstream&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::basic_ifstream&lt;char, std::char_traits&lt;char&gt; &gt; class
is described in the relevant architecture specific part of this specification.
</PARA>
<PARA>
The VTT for the std::basic_ifstream&lt;char, std::char_traits&lt;char&gt; &gt;  class
is described by <XREF LINKEND="vtt-24390">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="vtt-24390">
<TITLE>VTT for basic_ifstream&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>VTT Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>_ZTTSt14basic_ifstreamIcSt11char_traitsIcEE</primary></indexterm>_ZTTSt14basic_ifstreamIcSt11char_traitsIcEE</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Number of Entries</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>4</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class basic_ifstream&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::basic_ifstream&lt;char, std::char_traits&lt;char&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-claux-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-claux-ints">
<TITLE>libstdcxx - Class basic_ifstream&lt;char, char_traits&lt;char&gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ifstream&lt;char, char_traits&lt;char&gt; &gt;::rdbuf() const</primary></indexterm>basic_ifstream&lt;char, char_traits&lt;char&gt; &gt;::rdbuf() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ifstream&lt;char, char_traits&lt;char&gt; &gt;::is_open() const</primary></indexterm>basic_ifstream&lt;char, char_traits&lt;char&gt; &gt;::is_open() const(GLIBCXX_3.4.5) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ifstream&lt;char, char_traits&lt;char&gt; &gt;::open(char const*, _Ios_Openmode)</primary></indexterm>basic_ifstream&lt;char, char_traits&lt;char&gt; &gt;::open(char const*, _Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ifstream&lt;char, char_traits&lt;char&gt; &gt;::close()</primary></indexterm>basic_ifstream&lt;char, char_traits&lt;char&gt; &gt;::close()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ifstream&lt;char, char_traits&lt;char&gt; &gt;::is_open()</primary></indexterm>basic_ifstream&lt;char, char_traits&lt;char&gt; &gt;::is_open()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ifstream&lt;char, char_traits&lt;char&gt; &gt;::basic_ifstream(char const*, _Ios_Openmode)</primary></indexterm>basic_ifstream&lt;char, char_traits&lt;char&gt; &gt;::basic_ifstream(char const*, _Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ifstream&lt;char, char_traits&lt;char&gt; &gt;::basic_ifstream()</primary></indexterm>basic_ifstream&lt;char, char_traits&lt;char&gt; &gt;::basic_ifstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ifstream&lt;char, char_traits&lt;char&gt; &gt;::basic_ifstream(char const*, _Ios_Openmode)</primary></indexterm>basic_ifstream&lt;char, char_traits&lt;char&gt; &gt;::basic_ifstream(char const*, _Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ifstream&lt;char, char_traits&lt;char&gt; &gt;::basic_ifstream()</primary></indexterm>basic_ifstream&lt;char, char_traits&lt;char&gt; &gt;::basic_ifstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ifstream&lt;char, char_traits&lt;char&gt; &gt;::~basic_ifstream()</primary></indexterm>basic_ifstream&lt;char, char_traits&lt;char&gt; &gt;::~basic_ifstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ifstream&lt;char, char_traits&lt;char&gt; &gt;::~basic_ifstream()</primary></indexterm>basic_ifstream&lt;char, char_traits&lt;char&gt; &gt;::~basic_ifstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ifstream&lt;char, char_traits&lt;char&gt; &gt;::~basic_ifstream()</primary></indexterm>basic_ifstream&lt;char, char_traits&lt;char&gt; &gt;::~basic_ifstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::basic_ifstream&lt;char, std::char_traits&lt;char&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-claux-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-claux-data">
<TITLE>libstdcxx - Class basic_ifstream&lt;char, char_traits&lt;char&gt; &gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_ifstream&lt;char, char_traits&lt;char&gt; &gt;</primary></indexterm>typeinfo for basic_ifstream&lt;char, char_traits&lt;char&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for basic_ifstream&lt;char, char_traits&lt;char&gt; &gt;</primary></indexterm>typeinfo name for basic_ifstream&lt;char, char_traits&lt;char&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>VTT for basic_ifstream&lt;char, char_traits&lt;char&gt; &gt;</primary></indexterm>VTT for basic_ifstream&lt;char, char_traits&lt;char&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for basic_ifstream&lt;char, char_traits&lt;char&gt; &gt;</primary></indexterm>vtable for basic_ifstream&lt;char, char_traits&lt;char&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::basic_ifstream<wchar_t, std::char_traits<wchar_t> > -->
<SECT2>
<!--libgroup-->
<TITLE>Class basic_ifstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for basic_ifstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::basic_ifstream&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; class
is described in the relevant architecture specific part of this specification.
</PARA>
<PARA>
The VTT for the std::basic_ifstream&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt;  class
is described by <XREF LINKEND="vtt-24391">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="vtt-24391">
<TITLE>VTT for basic_ifstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>VTT Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>_ZTTSt14basic_ifstreamIwSt11char_traitsIwEE</primary></indexterm>_ZTTSt14basic_ifstreamIwSt11char_traitsIwEE</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Number of Entries</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>4</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class basic_ifstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::basic_ifstream&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clauy-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clauy-ints">
<TITLE>libstdcxx - Class basic_ifstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ifstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::rdbuf() const</primary></indexterm>basic_ifstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::rdbuf() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ifstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::is_open() const</primary></indexterm>basic_ifstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::is_open() const(GLIBCXX_3.4.5) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ifstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::open(char const*, _Ios_Openmode)</primary></indexterm>basic_ifstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::open(char const*, _Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ifstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::close()</primary></indexterm>basic_ifstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::close()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ifstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::is_open()</primary></indexterm>basic_ifstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::is_open()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ifstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::basic_ifstream(char const*, _Ios_Openmode)</primary></indexterm>basic_ifstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::basic_ifstream(char const*, _Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ifstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::basic_ifstream()</primary></indexterm>basic_ifstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::basic_ifstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ifstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::basic_ifstream(char const*, _Ios_Openmode)</primary></indexterm>basic_ifstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::basic_ifstream(char const*, _Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ifstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::basic_ifstream()</primary></indexterm>basic_ifstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::basic_ifstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ifstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_ifstream()</primary></indexterm>basic_ifstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_ifstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ifstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_ifstream()</primary></indexterm>basic_ifstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_ifstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ifstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_ifstream()</primary></indexterm>basic_ifstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_ifstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::basic_ifstream&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clauy-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clauy-data">
<TITLE>libstdcxx - Class basic_ifstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_ifstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</primary></indexterm>typeinfo for basic_ifstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</primary></indexterm>typeinfo for basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for basic_ifstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</primary></indexterm>typeinfo name for basic_ifstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</primary></indexterm>typeinfo name for basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>VTT for basic_ifstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</primary></indexterm>VTT for basic_ifstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for basic_ifstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</primary></indexterm>vtable for basic_ifstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</primary></indexterm>vtable for basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::basic_ofstream<char, std::char_traits<char> > -->
<SECT2>
<!--libgroup-->
<TITLE>Class basic_ofstream&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for basic_ofstream&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::basic_ofstream&lt;char, std::char_traits&lt;char&gt; &gt; class
is described in the relevant architecture specific part of this specification.
</PARA>
<PARA>
The VTT for the std::basic_ofstream&lt;char, std::char_traits&lt;char&gt; &gt;  class
is described by <XREF LINKEND="vtt-24392">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="vtt-24392">
<TITLE>VTT for basic_ofstream&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>VTT Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>_ZTTSt14basic_ofstreamIcSt11char_traitsIcEE</primary></indexterm>_ZTTSt14basic_ofstreamIcSt11char_traitsIcEE</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Number of Entries</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>4</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class basic_ofstream&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::basic_ofstream&lt;char, std::char_traits&lt;char&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clauz-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clauz-ints">
<TITLE>libstdcxx - Class basic_ofstream&lt;char, char_traits&lt;char&gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ofstream&lt;char, char_traits&lt;char&gt; &gt;::rdbuf() const</primary></indexterm>basic_ofstream&lt;char, char_traits&lt;char&gt; &gt;::rdbuf() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ofstream&lt;char, char_traits&lt;char&gt; &gt;::is_open() const</primary></indexterm>basic_ofstream&lt;char, char_traits&lt;char&gt; &gt;::is_open() const(GLIBCXX_3.4.5) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ofstream&lt;char, char_traits&lt;char&gt; &gt;::open(char const*, _Ios_Openmode)</primary></indexterm>basic_ofstream&lt;char, char_traits&lt;char&gt; &gt;::open(char const*, _Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ofstream&lt;char, char_traits&lt;char&gt; &gt;::close()</primary></indexterm>basic_ofstream&lt;char, char_traits&lt;char&gt; &gt;::close()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ofstream&lt;char, char_traits&lt;char&gt; &gt;::is_open()</primary></indexterm>basic_ofstream&lt;char, char_traits&lt;char&gt; &gt;::is_open()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ofstream&lt;char, char_traits&lt;char&gt; &gt;::basic_ofstream(char const*, _Ios_Openmode)</primary></indexterm>basic_ofstream&lt;char, char_traits&lt;char&gt; &gt;::basic_ofstream(char const*, _Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ofstream&lt;char, char_traits&lt;char&gt; &gt;::basic_ofstream()</primary></indexterm>basic_ofstream&lt;char, char_traits&lt;char&gt; &gt;::basic_ofstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ofstream&lt;char, char_traits&lt;char&gt; &gt;::basic_ofstream(char const*, _Ios_Openmode)</primary></indexterm>basic_ofstream&lt;char, char_traits&lt;char&gt; &gt;::basic_ofstream(char const*, _Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ofstream&lt;char, char_traits&lt;char&gt; &gt;::basic_ofstream()</primary></indexterm>basic_ofstream&lt;char, char_traits&lt;char&gt; &gt;::basic_ofstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ofstream&lt;char, char_traits&lt;char&gt; &gt;::~basic_ofstream()</primary></indexterm>basic_ofstream&lt;char, char_traits&lt;char&gt; &gt;::~basic_ofstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ofstream&lt;char, char_traits&lt;char&gt; &gt;::~basic_ofstream()</primary></indexterm>basic_ofstream&lt;char, char_traits&lt;char&gt; &gt;::~basic_ofstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ofstream&lt;char, char_traits&lt;char&gt; &gt;::~basic_ofstream()</primary></indexterm>basic_ofstream&lt;char, char_traits&lt;char&gt; &gt;::~basic_ofstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::basic_ofstream&lt;char, std::char_traits&lt;char&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clauz-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clauz-data">
<TITLE>libstdcxx - Class basic_ofstream&lt;char, char_traits&lt;char&gt; &gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_ofstream&lt;char, char_traits&lt;char&gt; &gt;</primary></indexterm>typeinfo for basic_ofstream&lt;char, char_traits&lt;char&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for basic_ofstream&lt;char, char_traits&lt;char&gt; &gt;</primary></indexterm>typeinfo name for basic_ofstream&lt;char, char_traits&lt;char&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>VTT for basic_ofstream&lt;char, char_traits&lt;char&gt; &gt;</primary></indexterm>VTT for basic_ofstream&lt;char, char_traits&lt;char&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for basic_ofstream&lt;char, char_traits&lt;char&gt; &gt;</primary></indexterm>vtable for basic_ofstream&lt;char, char_traits&lt;char&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::basic_ofstream<wchar_t, std::char_traits<wchar_t> > -->
<SECT2>
<!--libgroup-->
<TITLE>Class basic_ofstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for basic_ofstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::basic_ofstream&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; class
is described in the relevant architecture specific part of this specification.
</PARA>
<PARA>
The VTT for the std::basic_ofstream&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt;  class
is described by <XREF LINKEND="vtt-24393">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="vtt-24393">
<TITLE>VTT for basic_ofstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>VTT Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>_ZTTSt14basic_ofstreamIwSt11char_traitsIwEE</primary></indexterm>_ZTTSt14basic_ofstreamIwSt11char_traitsIwEE</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Number of Entries</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>4</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class basic_ofstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::basic_ofstream&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clava-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clava-ints">
<TITLE>libstdcxx - Class basic_ofstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ofstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::rdbuf() const</primary></indexterm>basic_ofstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::rdbuf() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ofstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::is_open() const</primary></indexterm>basic_ofstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::is_open() const(GLIBCXX_3.4.5) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ofstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::open(char const*, _Ios_Openmode)</primary></indexterm>basic_ofstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::open(char const*, _Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ofstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::close()</primary></indexterm>basic_ofstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::close()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ofstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::is_open()</primary></indexterm>basic_ofstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::is_open()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ofstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::basic_ofstream(char const*, _Ios_Openmode)</primary></indexterm>basic_ofstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::basic_ofstream(char const*, _Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ofstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::basic_ofstream()</primary></indexterm>basic_ofstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::basic_ofstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ofstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::basic_ofstream(char const*, _Ios_Openmode)</primary></indexterm>basic_ofstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::basic_ofstream(char const*, _Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ofstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::basic_ofstream()</primary></indexterm>basic_ofstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::basic_ofstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ofstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_ofstream()</primary></indexterm>basic_ofstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_ofstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ofstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_ofstream()</primary></indexterm>basic_ofstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_ofstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ofstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_ofstream()</primary></indexterm>basic_ofstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_ofstream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::basic_ofstream&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clava-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clava-data">
<TITLE>libstdcxx - Class basic_ofstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_ofstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</primary></indexterm>typeinfo for basic_ofstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for basic_ofstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</primary></indexterm>typeinfo name for basic_ofstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>VTT for basic_ofstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</primary></indexterm>VTT for basic_ofstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for basic_ofstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</primary></indexterm>vtable for basic_ofstream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::basic_streambuf<char, std::char_traits<char> > -->
<SECT2>
<!--libgroup-->
<TITLE>Class basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt; class
is described by <XREF LINKEND="cls-24315-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24315-0">
<TITLE>Primary vtable for basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;</primary></indexterm>typeinfo for basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::~basic_streambuf()</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::~basic_streambuf()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::~basic_streambuf()</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::~basic_streambuf()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::imbue(locale const&)</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::imbue(locale const&)</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>See The Architecture Specific Specification</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>See The Architecture Specific Specification</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::seekpos(fpos&lt;__mbstate_t&gt;, _Ios_Openmode)</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::seekpos(fpos&lt;__mbstate_t&gt;, _Ios_Openmode)</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::sync()</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::sync()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::showmanyc()</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::showmanyc()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>See The Architecture Specific Specification</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::underflow()</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::underflow()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::uflow()</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::uflow()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;11&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::pbackfail(int)</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::pbackfail(int)</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;12&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>See The Architecture Specific Specification</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;13&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::overflow(int)</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::overflow(int)</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;  class
is described by <XREF LINKEND="rtti-23990">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-23990">
<TITLE>typeinfo for basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__class_type_info</primary></indexterm>vtable for __cxxabiv1::__class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;</primary></indexterm>typeinfo name for basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clavb-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clavb-ints">
<TITLE>libstdcxx - Class basic_streambuf&lt;char, char_traits&lt;char&gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::gptr() const</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::gptr() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::pptr() const</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::pptr() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::eback() const</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::eback() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::egptr() const</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::egptr() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::epptr() const</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::epptr() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::pbase() const</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::pbase() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::getloc() const</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::getloc() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::pubseekpos(fpos&lt;__mbstate_t&gt;, _Ios_Openmode)</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::pubseekpos(fpos&lt;__mbstate_t&gt;, _Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::setg(char*, char*, char*)</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::setg(char*, char*, char*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::setp(char*, char*)</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::setp(char*, char*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::sync()</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::sync()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::gbump(int)</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::gbump(int)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::imbue(locale const&)</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::imbue(locale const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::pbump(int)</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::pbump(int)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::sgetc()</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::sgetc()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::sputc(char)</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::sputc(char)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::uflow()</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::uflow()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::sbumpc()</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::sbumpc()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::snextc()</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::snextc()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::pubsync()</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::pubsync()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::seekpos(fpos&lt;__mbstate_t&gt;, _Ios_Openmode)</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::seekpos(fpos&lt;__mbstate_t&gt;, _Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::sungetc()</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::sungetc()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::in_avail()</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::in_avail()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::overflow(int)</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::overflow(int)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::pubimbue(locale const&)</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::pubimbue(locale const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::pbackfail(int)</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::pbackfail(int)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::showmanyc()</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::showmanyc()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::sputbackc(char)</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::sputbackc(char)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::underflow()</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::underflow()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::basic_streambuf(basic_streambuf&lt;char, char_traits&lt;char&gt; &gt; const&)</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::basic_streambuf(basic_streambuf&lt;char, char_traits&lt;char&gt; &gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::basic_streambuf()</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::basic_streambuf()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::basic_streambuf(basic_streambuf&lt;char, char_traits&lt;char&gt; &gt; const&)</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::basic_streambuf(basic_streambuf&lt;char, char_traits&lt;char&gt; &gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::basic_streambuf()</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::basic_streambuf()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::~basic_streambuf()</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::~basic_streambuf()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::~basic_streambuf()</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::~basic_streambuf()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::~basic_streambuf()</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::~basic_streambuf()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::operator=(basic_streambuf&lt;char, char_traits&lt;char&gt; &gt; const&)</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::operator=(basic_streambuf&lt;char, char_traits&lt;char&gt; &gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clavb-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clavb-data">
<TITLE>libstdcxx - Class basic_streambuf&lt;char, char_traits&lt;char&gt; &gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;</primary></indexterm>typeinfo for basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;</primary></indexterm>typeinfo name for basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;</primary></indexterm>vtable for basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::basic_streambuf<wchar_t, std::char_traits<wchar_t> > -->
<SECT2>
<!--libgroup-->
<TITLE>Class basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::basic_streambuf&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; class
is described by <XREF LINKEND="cls-24314-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24314-0">
<TITLE>Primary vtable for basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</primary></indexterm>typeinfo for basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_streambuf()</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_streambuf()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_streambuf()</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_streambuf()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::imbue(locale const&)</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::imbue(locale const&)</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>See The Architecture Specific Specification</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>See The Architecture Specific Specification</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::seekpos(fpos&lt;__mbstate_t&gt;, _Ios_Openmode)</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::seekpos(fpos&lt;__mbstate_t&gt;, _Ios_Openmode)</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::sync()</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::sync()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::showmanyc()</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::showmanyc()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>See The Architecture Specific Specification</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::underflow()</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::underflow()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::uflow()</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::uflow()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;11&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::pbackfail(unsigned int)</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::pbackfail(unsigned int)</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;12&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>See The Architecture Specific Specification</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;13&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::overflow(unsigned int)</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::overflow(unsigned int)</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::basic_streambuf&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt;  class
is described by <XREF LINKEND="rtti-23991">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-23991">
<TITLE>typeinfo for basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__class_type_info</primary></indexterm>vtable for __cxxabiv1::__class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</primary></indexterm>typeinfo name for basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::basic_streambuf&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clavc-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clavc-ints">
<TITLE>libstdcxx - Class basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::gptr() const</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::gptr() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::pptr() const</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::pptr() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::eback() const</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::eback() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::egptr() const</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::egptr() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::epptr() const</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::epptr() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::pbase() const</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::pbase() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::getloc() const</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::getloc() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::pubseekpos(fpos&lt;__mbstate_t&gt;, _Ios_Openmode)</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::pubseekpos(fpos&lt;__mbstate_t&gt;, _Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::setg(wchar_t*, wchar_t*, wchar_t*)</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::setg(wchar_t*, wchar_t*, wchar_t*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::setp(wchar_t*, wchar_t*)</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::setp(wchar_t*, wchar_t*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::sync()</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::sync()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::gbump(int)</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::gbump(int)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::imbue(locale const&)</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::imbue(locale const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::pbump(int)</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::pbump(int)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::sgetc()</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::sgetc()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::sputc(wchar_t)</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::sputc(wchar_t)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::uflow()</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::uflow()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::sbumpc()</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::sbumpc()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::snextc()</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::snextc()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::pubsync()</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::pubsync()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::seekpos(fpos&lt;__mbstate_t&gt;, _Ios_Openmode)</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::seekpos(fpos&lt;__mbstate_t&gt;, _Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::sungetc()</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::sungetc()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::in_avail()</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::in_avail()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::overflow(unsigned int)</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::overflow(unsigned int)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::pubimbue(locale const&)</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::pubimbue(locale const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::pbackfail(unsigned int)</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::pbackfail(unsigned int)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::showmanyc()</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::showmanyc()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::sputbackc(wchar_t)</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::sputbackc(wchar_t)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::underflow()</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::underflow()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::basic_streambuf(basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; const&)</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::basic_streambuf(basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::basic_streambuf()</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::basic_streambuf()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::basic_streambuf(basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; const&)</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::basic_streambuf(basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::basic_streambuf()</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::basic_streambuf()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_streambuf()</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_streambuf()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_streambuf()</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_streambuf()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_streambuf()</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_streambuf()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator=(basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; const&)</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator=(basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::basic_filebuf<char, std::char_traits<char> > -->
<SECT2>
<!--libgroup-->
<TITLE>Class basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt; class
is described by <XREF LINKEND="cls-24240-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24240-0">
<TITLE>Primary vtable for basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;</primary></indexterm>typeinfo for basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::~basic_filebuf()</primary></indexterm>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::~basic_filebuf()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::~basic_filebuf()</primary></indexterm>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::~basic_filebuf()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::imbue(locale const&)</primary></indexterm>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::imbue(locale const&)</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>See The Architecture Specific Specification</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>See The Architecture Specific Specification</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::seekpos(fpos&lt;__mbstate_t&gt;, _Ios_Openmode)</primary></indexterm>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::seekpos(fpos&lt;__mbstate_t&gt;, _Ios_Openmode)</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::sync()</primary></indexterm>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::sync()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::showmanyc()</primary></indexterm>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::showmanyc()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>See The Architecture Specific Specification</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::underflow()</primary></indexterm>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::underflow()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::uflow()</primary></indexterm>basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;::uflow()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;11&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::pbackfail(int)</primary></indexterm>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::pbackfail(int)</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;12&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>See The Architecture Specific Specification</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;13&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::overflow(int)</primary></indexterm>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::overflow(int)</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;  class
is described by <XREF LINKEND="rtti-23988">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-23988">
<TITLE>typeinfo for basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;</primary></indexterm>typeinfo name for basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clavd-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clavd-ints">
<TITLE>libstdcxx - Class basic_filebuf&lt;char, char_traits&lt;char&gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::is_open() const</primary></indexterm>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::is_open() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::_M_create_pback()</primary></indexterm>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::_M_create_pback()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::_M_destroy_pback()</primary></indexterm>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::_M_destroy_pback()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::_M_terminate_output()</primary></indexterm>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::_M_terminate_output()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::_M_destroy_internal_buffer()</primary></indexterm>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::_M_destroy_internal_buffer()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::_M_allocate_internal_buffer()</primary></indexterm>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::_M_allocate_internal_buffer()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::open(char const*, _Ios_Openmode)</primary></indexterm>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::open(char const*, _Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::sync()</primary></indexterm>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::sync()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::close()</primary></indexterm>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::close()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::imbue(locale const&)</primary></indexterm>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::imbue(locale const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::seekpos(fpos&lt;__mbstate_t&gt;, _Ios_Openmode)</primary></indexterm>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::seekpos(fpos&lt;__mbstate_t&gt;, _Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::overflow(int)</primary></indexterm>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::overflow(int)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::pbackfail(int)</primary></indexterm>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::pbackfail(int)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::showmanyc()</primary></indexterm>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::showmanyc()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::underflow()</primary></indexterm>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::underflow()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::basic_filebuf()</primary></indexterm>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::basic_filebuf()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::basic_filebuf()</primary></indexterm>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::basic_filebuf()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::~basic_filebuf()</primary></indexterm>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::~basic_filebuf()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::~basic_filebuf()</primary></indexterm>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::~basic_filebuf()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::~basic_filebuf()</primary></indexterm>basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;::~basic_filebuf()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clavd-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clavd-data">
<TITLE>libstdcxx - Class basic_filebuf&lt;char, char_traits&lt;char&gt; &gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;</primary></indexterm>typeinfo for basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;</primary></indexterm>typeinfo name for basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;</primary></indexterm>vtable for basic_filebuf&lt;char, char_traits&lt;char&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::basic_filebuf<wchar_t, std::char_traits<wchar_t> > -->
<SECT2>
<!--libgroup-->
<TITLE>Class basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::basic_filebuf&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; class
is described by <XREF LINKEND="cls-24239-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24239-0">
<TITLE>Primary vtable for basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</primary></indexterm>typeinfo for basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_filebuf()</primary></indexterm>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_filebuf()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_filebuf()</primary></indexterm>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_filebuf()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::imbue(locale const&)</primary></indexterm>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::imbue(locale const&)</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>See The Architecture Specific Specification</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>See The Architecture Specific Specification</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::seekpos(fpos&lt;__mbstate_t&gt;, _Ios_Openmode)</primary></indexterm>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::seekpos(fpos&lt;__mbstate_t&gt;, _Ios_Openmode)</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::sync()</primary></indexterm>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::sync()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::showmanyc()</primary></indexterm>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::showmanyc()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>See The Architecture Specific Specification</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::underflow()</primary></indexterm>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::underflow()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::uflow()</primary></indexterm>basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::uflow()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;11&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::pbackfail(unsigned int)</primary></indexterm>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::pbackfail(unsigned int)</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;12&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>See The Architecture Specific Specification</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;13&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::overflow(unsigned int)</primary></indexterm>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::overflow(unsigned int)</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::basic_filebuf&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt;  class
is described by <XREF LINKEND="rtti-23989">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-23989">
<TITLE>typeinfo for basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</primary></indexterm>typeinfo name for basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::basic_filebuf&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clave-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clave-ints">
<TITLE>libstdcxx - Class basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::is_open() const</primary></indexterm>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::is_open() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::_M_create_pback()</primary></indexterm>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::_M_create_pback()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::_M_destroy_pback()</primary></indexterm>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::_M_destroy_pback()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::_M_terminate_output()</primary></indexterm>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::_M_terminate_output()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::_M_destroy_internal_buffer()</primary></indexterm>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::_M_destroy_internal_buffer()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::_M_allocate_internal_buffer()</primary></indexterm>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::_M_allocate_internal_buffer()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::open(char const*, _Ios_Openmode)</primary></indexterm>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::open(char const*, _Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::sync()</primary></indexterm>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::sync()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::close()</primary></indexterm>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::close()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::imbue(locale const&)</primary></indexterm>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::imbue(locale const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::seekpos(fpos&lt;__mbstate_t&gt;, _Ios_Openmode)</primary></indexterm>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::seekpos(fpos&lt;__mbstate_t&gt;, _Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::overflow(unsigned int)</primary></indexterm>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::overflow(unsigned int)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::pbackfail(unsigned int)</primary></indexterm>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::pbackfail(unsigned int)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::showmanyc()</primary></indexterm>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::showmanyc()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::underflow()</primary></indexterm>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::underflow()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::basic_filebuf()</primary></indexterm>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::basic_filebuf()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::basic_filebuf()</primary></indexterm>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::basic_filebuf()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_filebuf()</primary></indexterm>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_filebuf()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_filebuf()</primary></indexterm>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_filebuf()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_filebuf()</primary></indexterm>basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_filebuf()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::basic_istream()</primary></indexterm>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::basic_istream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::basic_istream()</primary></indexterm>basic_istream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::basic_istream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::basic_ostream()</primary></indexterm>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::basic_ostream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::basic_ostream()</primary></indexterm>basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::basic_ostream()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::basic_filebuf&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clave-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clave-data">
<TITLE>libstdcxx - Class basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</primary></indexterm>typeinfo for basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</primary></indexterm>typeinfo name for basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</primary></indexterm>vtable for basic_filebuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::ios_base -->
<SECT2>
<!--libgroup-->
<TITLE>Class ios_base</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for ios_base</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::ios_base class
is described by <XREF LINKEND="cls-29891-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-29891-0">
<TITLE>Primary vtable for ios_base</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for ios_base</primary></indexterm>typeinfo for ios_base</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ios_base::~ios_base()</primary></indexterm>ios_base::~ios_base()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ios_base::~ios_base()</primary></indexterm>ios_base::~ios_base()</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::ios_base  class
is described by <XREF LINKEND="rtti-24001">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24001">
<TITLE>typeinfo for ios_base</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__class_type_info</primary></indexterm>vtable for __cxxabiv1::__class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for ios_base</primary></indexterm>typeinfo name for ios_base</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class ios_base</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::ios_base specified in <XREF linkend="tbl-libstdcxx-clavf-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clavf-ints">
<TITLE>libstdcxx - Class ios_base Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ios_base::_M_grow_words(int, bool)</primary></indexterm>ios_base::_M_grow_words(int, bool)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ios_base::sync_with_stdio(bool)</primary></indexterm>ios_base::sync_with_stdio(bool)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ios_base::_M_call_callbacks(ios_base::event)</primary></indexterm>ios_base::_M_call_callbacks(ios_base::event)(GLIBCXX_3.4.6) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ios_base::register_callback(void (*)(ios_base::event, ios_base&, int), int)</primary></indexterm>ios_base::register_callback(void (*)(ios_base::event, ios_base&, int), int)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ios_base::_M_dispose_callbacks()</primary></indexterm>ios_base::_M_dispose_callbacks()(GLIBCXX_3.4.6) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ios_base::Init::Init()</primary></indexterm>ios_base::Init::Init()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ios_base::Init::Init()</primary></indexterm>ios_base::Init::Init()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ios_base::Init::~Init()</primary></indexterm>ios_base::Init::~Init()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ios_base::Init::~Init()</primary></indexterm>ios_base::Init::~Init()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ios_base::imbue(locale const&)</primary></indexterm>ios_base::imbue(locale const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ios_base::xalloc()</primary></indexterm>ios_base::xalloc()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ios_base::_M_init()</primary></indexterm>ios_base::_M_init()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ios_base::failure::failure(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)</primary></indexterm>ios_base::failure::failure(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ios_base::failure::failure(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)</primary></indexterm>ios_base::failure::failure(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ios_base::failure::~failure()</primary></indexterm>ios_base::failure::~failure()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ios_base::failure::~failure()</primary></indexterm>ios_base::failure::~failure()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ios_base::failure::~failure()</primary></indexterm>ios_base::failure::~failure()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ios_base::ios_base()</primary></indexterm>ios_base::ios_base()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ios_base::ios_base()</primary></indexterm>ios_base::ios_base()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ios_base::~ios_base()</primary></indexterm>ios_base::~ios_base()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ios_base::~ios_base()</primary></indexterm>ios_base::~ios_base()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ios_base::~ios_base()</primary></indexterm>ios_base::~ios_base()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::ios_base specified in <XREF linkend="tbl-libstdcxx-clavf-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clavf-data">
<TITLE>libstdcxx - Class ios_base Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ios_base::floatfield</primary></indexterm>ios_base::floatfield(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ios_base::scientific</primary></indexterm>ios_base::scientific(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ios_base::adjustfield</primary></indexterm>ios_base::adjustfield(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ios_base::in</primary></indexterm>ios_base::in(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ios_base::app</primary></indexterm>ios_base::app(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ios_base::ate</primary></indexterm>ios_base::ate(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ios_base::beg</primary></indexterm>ios_base::beg(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ios_base::cur</primary></indexterm>ios_base::cur(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ios_base::dec</primary></indexterm>ios_base::dec(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ios_base::end</primary></indexterm>ios_base::end(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ios_base::hex</primary></indexterm>ios_base::hex(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ios_base::oct</primary></indexterm>ios_base::oct(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ios_base::out</primary></indexterm>ios_base::out(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ios_base::left</primary></indexterm>ios_base::left(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ios_base::fixed</primary></indexterm>ios_base::fixed(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ios_base::right</primary></indexterm>ios_base::right(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ios_base::trunc</primary></indexterm>ios_base::trunc(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ios_base::badbit</primary></indexterm>ios_base::badbit(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ios_base::binary</primary></indexterm>ios_base::binary(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ios_base::eofbit</primary></indexterm>ios_base::eofbit(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ios_base::skipws</primary></indexterm>ios_base::skipws(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ios_base::failbit</primary></indexterm>ios_base::failbit(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ios_base::goodbit</primary></indexterm>ios_base::goodbit(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ios_base::showpos</primary></indexterm>ios_base::showpos(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ios_base::unitbuf</primary></indexterm>ios_base::unitbuf(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ios_base::internal</primary></indexterm>ios_base::internal(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ios_base::showbase</primary></indexterm>ios_base::showbase(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ios_base::basefield</primary></indexterm>ios_base::basefield(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ios_base::boolalpha</primary></indexterm>ios_base::boolalpha(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ios_base::showpoint</primary></indexterm>ios_base::showpoint(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ios_base::uppercase</primary></indexterm>ios_base::uppercase(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for ios_base</primary></indexterm>typeinfo for ios_base(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for ios_base</primary></indexterm>typeinfo name for ios_base(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for ios_base</primary></indexterm>vtable for ios_base(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::basic_ios<char, std::char_traits<char> > -->
<SECT2>
<!--libgroup-->
<TITLE>Class basic_ios&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for basic_ios&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt; class
is described by <XREF LINKEND="cls-24251-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24251-0">
<TITLE>Primary vtable for basic_ios&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_ios&lt;char, char_traits&lt;char&gt; &gt;</primary></indexterm>typeinfo for basic_ios&lt;char, char_traits&lt;char&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_ios&lt;char, char_traits&lt;char&gt; &gt;::~basic_ios()</primary></indexterm>basic_ios&lt;char, char_traits&lt;char&gt; &gt;::~basic_ios()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_ios&lt;char, char_traits&lt;char&gt; &gt;::~basic_ios()</primary></indexterm>basic_ios&lt;char, char_traits&lt;char&gt; &gt;::~basic_ios()</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class basic_ios&lt;char, char_traits&lt;char&gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clavg-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clavg-ints">
<TITLE>libstdcxx - Class basic_ios&lt;char, char_traits&lt;char&gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ios&lt;char, char_traits&lt;char&gt; &gt;::exceptions() const</primary></indexterm>basic_ios&lt;char, char_traits&lt;char&gt; &gt;::exceptions() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ios&lt;char, char_traits&lt;char&gt; &gt;::bad() const</primary></indexterm>basic_ios&lt;char, char_traits&lt;char&gt; &gt;::bad() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ios&lt;char, char_traits&lt;char&gt; &gt;::eof() const</primary></indexterm>basic_ios&lt;char, char_traits&lt;char&gt; &gt;::eof() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ios&lt;char, char_traits&lt;char&gt; &gt;::tie() const</primary></indexterm>basic_ios&lt;char, char_traits&lt;char&gt; &gt;::tie() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ios&lt;char, char_traits&lt;char&gt; &gt;::fail() const</primary></indexterm>basic_ios&lt;char, char_traits&lt;char&gt; &gt;::fail() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ios&lt;char, char_traits&lt;char&gt; &gt;::fill() const</primary></indexterm>basic_ios&lt;char, char_traits&lt;char&gt; &gt;::fill() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ios&lt;char, char_traits&lt;char&gt; &gt;::good() const</primary></indexterm>basic_ios&lt;char, char_traits&lt;char&gt; &gt;::good() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ios&lt;char, char_traits&lt;char&gt; &gt;::rdbuf() const</primary></indexterm>basic_ios&lt;char, char_traits&lt;char&gt; &gt;::rdbuf() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ios&lt;char, char_traits&lt;char&gt; &gt;::widen(char) const</primary></indexterm>basic_ios&lt;char, char_traits&lt;char&gt; &gt;::widen(char) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ios&lt;char, char_traits&lt;char&gt; &gt;::narrow(char, char) const</primary></indexterm>basic_ios&lt;char, char_traits&lt;char&gt; &gt;::narrow(char, char) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ios&lt;char, char_traits&lt;char&gt; &gt;::rdstate() const</primary></indexterm>basic_ios&lt;char, char_traits&lt;char&gt; &gt;::rdstate() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ios&lt;char, char_traits&lt;char&gt; &gt;::operator void*() const</primary></indexterm>basic_ios&lt;char, char_traits&lt;char&gt; &gt;::operator void*() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ios&lt;char, char_traits&lt;char&gt; &gt;::operator!() const</primary></indexterm>basic_ios&lt;char, char_traits&lt;char&gt; &gt;::operator!() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ios&lt;char, char_traits&lt;char&gt; &gt;::exceptions(_Ios_Iostate)</primary></indexterm>basic_ios&lt;char, char_traits&lt;char&gt; &gt;::exceptions(_Ios_Iostate)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ios&lt;char, char_traits&lt;char&gt; &gt;::_M_setstate(_Ios_Iostate)</primary></indexterm>basic_ios&lt;char, char_traits&lt;char&gt; &gt;::_M_setstate(_Ios_Iostate)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ios&lt;char, char_traits&lt;char&gt; &gt;::tie(basic_ostream&lt;char, char_traits&lt;char&gt; &gt;*)</primary></indexterm>basic_ios&lt;char, char_traits&lt;char&gt; &gt;::tie(basic_ostream&lt;char, char_traits&lt;char&gt; &gt;*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ios&lt;char, char_traits&lt;char&gt; &gt;::fill(char)</primary></indexterm>basic_ios&lt;char, char_traits&lt;char&gt; &gt;::fill(char)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ios&lt;char, char_traits&lt;char&gt; &gt;::init(basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;*)</primary></indexterm>basic_ios&lt;char, char_traits&lt;char&gt; &gt;::init(basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ios&lt;char, char_traits&lt;char&gt; &gt;::clear(_Ios_Iostate)</primary></indexterm>basic_ios&lt;char, char_traits&lt;char&gt; &gt;::clear(_Ios_Iostate)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ios&lt;char, char_traits&lt;char&gt; &gt;::imbue(locale const&)</primary></indexterm>basic_ios&lt;char, char_traits&lt;char&gt; &gt;::imbue(locale const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ios&lt;char, char_traits&lt;char&gt; &gt;::rdbuf(basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;*)</primary></indexterm>basic_ios&lt;char, char_traits&lt;char&gt; &gt;::rdbuf(basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ios&lt;char, char_traits&lt;char&gt; &gt;::copyfmt(basic_ios&lt;char, char_traits&lt;char&gt; &gt; const&)</primary></indexterm>basic_ios&lt;char, char_traits&lt;char&gt; &gt;::copyfmt(basic_ios&lt;char, char_traits&lt;char&gt; &gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ios&lt;char, char_traits&lt;char&gt; &gt;::setstate(_Ios_Iostate)</primary></indexterm>basic_ios&lt;char, char_traits&lt;char&gt; &gt;::setstate(_Ios_Iostate)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ios&lt;char, char_traits&lt;char&gt; &gt;::basic_ios(basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;*)</primary></indexterm>basic_ios&lt;char, char_traits&lt;char&gt; &gt;::basic_ios(basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ios&lt;char, char_traits&lt;char&gt; &gt;::basic_ios()</primary></indexterm>basic_ios&lt;char, char_traits&lt;char&gt; &gt;::basic_ios()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ios&lt;char, char_traits&lt;char&gt; &gt;::basic_ios(basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;*)</primary></indexterm>basic_ios&lt;char, char_traits&lt;char&gt; &gt;::basic_ios(basic_streambuf&lt;char, char_traits&lt;char&gt; &gt;*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ios&lt;char, char_traits&lt;char&gt; &gt;::basic_ios()</primary></indexterm>basic_ios&lt;char, char_traits&lt;char&gt; &gt;::basic_ios()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ios&lt;char, char_traits&lt;char&gt; &gt;::~basic_ios()</primary></indexterm>basic_ios&lt;char, char_traits&lt;char&gt; &gt;::~basic_ios()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ios&lt;char, char_traits&lt;char&gt; &gt;::~basic_ios()</primary></indexterm>basic_ios&lt;char, char_traits&lt;char&gt; &gt;::~basic_ios()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ios&lt;char, char_traits&lt;char&gt; &gt;::~basic_ios()</primary></indexterm>basic_ios&lt;char, char_traits&lt;char&gt; &gt;::~basic_ios()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clavg-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clavg-data">
<TITLE>libstdcxx - Class basic_ios&lt;char, char_traits&lt;char&gt; &gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_ios&lt;char, char_traits&lt;char&gt; &gt;</primary></indexterm>typeinfo for basic_ios&lt;char, char_traits&lt;char&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for basic_ios&lt;char, char_traits&lt;char&gt; &gt;</primary></indexterm>typeinfo name for basic_ios&lt;char, char_traits&lt;char&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for basic_ios&lt;char, char_traits&lt;char&gt; &gt;</primary></indexterm>vtable for basic_ios&lt;char, char_traits&lt;char&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::basic_ios<wchar_t, std::char_traits<wchar_t> > -->
<SECT2>
<!--libgroup-->
<TITLE>Class basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::basic_ios&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; class
is described by <XREF LINKEND="cls-24250-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24250-0">
<TITLE>Primary vtable for basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</primary></indexterm>typeinfo for basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_ios()</primary></indexterm>basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_ios()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_ios()</primary></indexterm>basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_ios()</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::basic_ios&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt;  class
is described by <XREF LINKEND="rtti-24004">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24004">
<TITLE>typeinfo for basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</primary></indexterm>typeinfo name for basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>flags:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>8</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>basetype:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for ios_base</primary></indexterm>typeinfo for ios_base</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>1026</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::basic_ios&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clavh-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clavh-ints">
<TITLE>libstdcxx - Class basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::exceptions() const</primary></indexterm>basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::exceptions() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::bad() const</primary></indexterm>basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::bad() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::eof() const</primary></indexterm>basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::eof() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::tie() const</primary></indexterm>basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::tie() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::fail() const</primary></indexterm>basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::fail() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::fill() const</primary></indexterm>basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::fill() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::good() const</primary></indexterm>basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::good() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::rdbuf() const</primary></indexterm>basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::rdbuf() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::widen(char) const</primary></indexterm>basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::widen(char) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::narrow(wchar_t, char) const</primary></indexterm>basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::narrow(wchar_t, char) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::rdstate() const</primary></indexterm>basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::rdstate() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator void*() const</primary></indexterm>basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator void*() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator!() const</primary></indexterm>basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::operator!() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::exceptions(_Ios_Iostate)</primary></indexterm>basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::exceptions(_Ios_Iostate)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::_M_setstate(_Ios_Iostate)</primary></indexterm>basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::_M_setstate(_Ios_Iostate)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::tie(basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;*)</primary></indexterm>basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::tie(basic_ostream&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::fill(wchar_t)</primary></indexterm>basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::fill(wchar_t)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::init(basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;*)</primary></indexterm>basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::init(basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::clear(_Ios_Iostate)</primary></indexterm>basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::clear(_Ios_Iostate)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::imbue(locale const&)</primary></indexterm>basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::imbue(locale const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::rdbuf(basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;*)</primary></indexterm>basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::rdbuf(basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::copyfmt(basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; const&)</primary></indexterm>basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::copyfmt(basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::setstate(_Ios_Iostate)</primary></indexterm>basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::setstate(_Ios_Iostate)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::basic_ios(basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;*)</primary></indexterm>basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::basic_ios(basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::basic_ios()</primary></indexterm>basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::basic_ios()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::basic_ios(basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;*)</primary></indexterm>basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::basic_ios(basic_streambuf&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::basic_ios()</primary></indexterm>basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::basic_ios()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_ios()</primary></indexterm>basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_ios()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_ios()</primary></indexterm>basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_ios()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_ios()</primary></indexterm>basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;::~basic_ios()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::basic_ios&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clavh-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clavh-data">
<TITLE>libstdcxx - Class basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</primary></indexterm>typeinfo for basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</primary></indexterm>typeinfo name for basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;</primary></indexterm>vtable for basic_ios&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::ios_base::failure -->
<SECT2>
<!--libgroup-->
<TITLE>Class ios_base::failure</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for ios_base::failure</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::ios_base::failure class
is described by <XREF LINKEND="cls-24252-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24252-0">
<TITLE>Primary vtable for ios_base::failure</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for ios_base::failure</primary></indexterm>typeinfo for ios_base::failure</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ios_base::failure::~failure()</primary></indexterm>ios_base::failure::~failure()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ios_base::failure::~failure()</primary></indexterm>ios_base::failure::~failure()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>ios_base::failure::what() const</primary></indexterm>ios_base::failure::what() const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::ios_base::failure  class
is described by <XREF LINKEND="rtti-24059">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24059">
<TITLE>typeinfo for ios_base::failure</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for ios_base::failure</primary></indexterm>typeinfo name for ios_base::failure</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class ios_base::failure</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::ios_base::failure specified in <XREF linkend="tbl-libstdcxx-clavi-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clavi-ints">
<TITLE>libstdcxx - Class ios_base::failure Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ios_base::failure::what() const</primary></indexterm>ios_base::failure::what() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::ios_base::failure specified in <XREF linkend="tbl-libstdcxx-clavi-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clavi-data">
<TITLE>libstdcxx - Class ios_base::failure Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for ios_base::failure</primary></indexterm>typeinfo for ios_base::failure(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for ios_base::failure</primary></indexterm>typeinfo name for ios_base::failure(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for ios_base::failure</primary></indexterm>vtable for ios_base::failure(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::__timepunct<char> -->
<SECT2>
<!--libgroup-->
<TITLE>Class __timepunct&lt;char&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for __timepunct&lt;char&gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::__timepunct&lt;char&gt; class
is described by <XREF LINKEND="cls-24291-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24291-0">
<TITLE>Primary vtable for __timepunct&lt;char&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for __timepunct&lt;char&gt;</primary></indexterm>typeinfo for __timepunct&lt;char&gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__timepunct&lt;char&gt;::~__timepunct()</primary></indexterm>__timepunct&lt;char&gt;::~__timepunct()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__timepunct&lt;char&gt;::~__timepunct()</primary></indexterm>__timepunct&lt;char&gt;::~__timepunct()</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::__timepunct&lt;char&gt;  class
is described by <XREF LINKEND="rtti-24085">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24085">
<TITLE>typeinfo for __timepunct&lt;char&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for __timepunct&lt;char&gt;</primary></indexterm>typeinfo name for __timepunct&lt;char&gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class __timepunct&lt;char&gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::__timepunct&lt;char&gt; specified in <XREF linkend="tbl-libstdcxx-clavj-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clavj-ints">
<TITLE>libstdcxx - Class __timepunct&lt;char&gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__timepunct&lt;char&gt;::_M_am_pm_format(char const*) const</primary></indexterm>__timepunct&lt;char&gt;::_M_am_pm_format(char const*) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__timepunct&lt;char&gt;::_M_date_formats(char const**) const</primary></indexterm>__timepunct&lt;char&gt;::_M_date_formats(char const**) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__timepunct&lt;char&gt;::_M_time_formats(char const**) const</primary></indexterm>__timepunct&lt;char&gt;::_M_time_formats(char const**) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__timepunct&lt;char&gt;::_M_days_abbreviated(char const**) const</primary></indexterm>__timepunct&lt;char&gt;::_M_days_abbreviated(char const**) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__timepunct&lt;char&gt;::_M_date_time_formats(char const**) const</primary></indexterm>__timepunct&lt;char&gt;::_M_date_time_formats(char const**) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__timepunct&lt;char&gt;::_M_months_abbreviated(char const**) const</primary></indexterm>__timepunct&lt;char&gt;::_M_months_abbreviated(char const**) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__timepunct&lt;char&gt;::_M_days(char const**) const</primary></indexterm>__timepunct&lt;char&gt;::_M_days(char const**) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__timepunct&lt;char&gt;::_M_am_pm(char const**) const</primary></indexterm>__timepunct&lt;char&gt;::_M_am_pm(char const**) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__timepunct&lt;char&gt;::_M_months(char const**) const</primary></indexterm>__timepunct&lt;char&gt;::_M_months(char const**) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__timepunct&lt;wchar_t&gt;::_M_am_pm_format(wchar_t const*) const</primary></indexterm>__timepunct&lt;wchar_t&gt;::_M_am_pm_format(wchar_t const*) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__timepunct&lt;char&gt;::_M_initialize_timepunct(__locale_struct*)</primary></indexterm>__timepunct&lt;char&gt;::_M_initialize_timepunct(__locale_struct*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__timepunct&lt;char&gt;::~__timepunct()</primary></indexterm>__timepunct&lt;char&gt;::~__timepunct()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__timepunct&lt;char&gt;::~__timepunct()</primary></indexterm>__timepunct&lt;char&gt;::~__timepunct()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__timepunct&lt;char&gt;::~__timepunct()</primary></indexterm>__timepunct&lt;char&gt;::~__timepunct()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>bool has_facet&lt;__timepunct&lt;char&gt; &gt;(locale const&)</primary></indexterm>bool has_facet&lt;__timepunct&lt;char&gt; &gt;(locale const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::__timepunct&lt;char&gt; specified in <XREF linkend="tbl-libstdcxx-clavj-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clavj-data">
<TITLE>libstdcxx - Class __timepunct&lt;char&gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>guard variable for __timepunct&lt;char&gt;::id</primary></indexterm>guard variable for __timepunct&lt;char&gt;::id(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__timepunct&lt;char&gt;::id</primary></indexterm>__timepunct&lt;char&gt;::id(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for __timepunct&lt;char&gt;</primary></indexterm>typeinfo for __timepunct&lt;char&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for __timepunct&lt;char&gt;</primary></indexterm>typeinfo name for __timepunct&lt;char&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __timepunct&lt;char&gt;</primary></indexterm>vtable for __timepunct&lt;char&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::__timepunct<wchar_t> -->
<SECT2>
<!--libgroup-->
<TITLE>Class __timepunct&lt;wchar_t&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for __timepunct&lt;wchar_t&gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::__timepunct&lt;wchar_t&gt; class
is described by <XREF LINKEND="cls-24290-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24290-0">
<TITLE>Primary vtable for __timepunct&lt;wchar_t&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for __timepunct&lt;wchar_t&gt;</primary></indexterm>typeinfo for __timepunct&lt;wchar_t&gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__timepunct&lt;wchar_t&gt;::~__timepunct()</primary></indexterm>__timepunct&lt;wchar_t&gt;::~__timepunct()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__timepunct&lt;wchar_t&gt;::~__timepunct()</primary></indexterm>__timepunct&lt;wchar_t&gt;::~__timepunct()</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::__timepunct&lt;wchar_t&gt;  class
is described by <XREF LINKEND="rtti-24084">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24084">
<TITLE>typeinfo for __timepunct&lt;wchar_t&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for __timepunct&lt;wchar_t&gt;</primary></indexterm>typeinfo name for __timepunct&lt;wchar_t&gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class __timepunct&lt;wchar_t&gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::__timepunct&lt;wchar_t&gt; specified in <XREF linkend="tbl-libstdcxx-clavk-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clavk-ints">
<TITLE>libstdcxx - Class __timepunct&lt;wchar_t&gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__timepunct&lt;wchar_t&gt;::_M_date_formats(wchar_t const**) const</primary></indexterm>__timepunct&lt;wchar_t&gt;::_M_date_formats(wchar_t const**) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__timepunct&lt;wchar_t&gt;::_M_time_formats(wchar_t const**) const</primary></indexterm>__timepunct&lt;wchar_t&gt;::_M_time_formats(wchar_t const**) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__timepunct&lt;wchar_t&gt;::_M_days_abbreviated(wchar_t const**) const</primary></indexterm>__timepunct&lt;wchar_t&gt;::_M_days_abbreviated(wchar_t const**) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__timepunct&lt;wchar_t&gt;::_M_date_time_formats(wchar_t const**) const</primary></indexterm>__timepunct&lt;wchar_t&gt;::_M_date_time_formats(wchar_t const**) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__timepunct&lt;wchar_t&gt;::_M_months_abbreviated(wchar_t const**) const</primary></indexterm>__timepunct&lt;wchar_t&gt;::_M_months_abbreviated(wchar_t const**) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__timepunct&lt;wchar_t&gt;::_M_days(wchar_t const**) const</primary></indexterm>__timepunct&lt;wchar_t&gt;::_M_days(wchar_t const**) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__timepunct&lt;wchar_t&gt;::_M_am_pm(wchar_t const**) const</primary></indexterm>__timepunct&lt;wchar_t&gt;::_M_am_pm(wchar_t const**) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__timepunct&lt;wchar_t&gt;::_M_months(wchar_t const**) const</primary></indexterm>__timepunct&lt;wchar_t&gt;::_M_months(wchar_t const**) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__timepunct&lt;wchar_t&gt;::_M_initialize_timepunct(__locale_struct*)</primary></indexterm>__timepunct&lt;wchar_t&gt;::_M_initialize_timepunct(__locale_struct*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__timepunct&lt;wchar_t&gt;::~__timepunct()</primary></indexterm>__timepunct&lt;wchar_t&gt;::~__timepunct()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__timepunct&lt;wchar_t&gt;::~__timepunct()</primary></indexterm>__timepunct&lt;wchar_t&gt;::~__timepunct()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__timepunct&lt;wchar_t&gt;::~__timepunct()</primary></indexterm>__timepunct&lt;wchar_t&gt;::~__timepunct()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>bool has_facet&lt;__timepunct&lt;wchar_t&gt; &gt;(locale const&)</primary></indexterm>bool has_facet&lt;__timepunct&lt;wchar_t&gt; &gt;(locale const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::__timepunct&lt;wchar_t&gt; specified in <XREF linkend="tbl-libstdcxx-clavk-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clavk-data">
<TITLE>libstdcxx - Class __timepunct&lt;wchar_t&gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>guard variable for __timepunct&lt;wchar_t&gt;::id</primary></indexterm>guard variable for __timepunct&lt;wchar_t&gt;::id(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__timepunct&lt;wchar_t&gt;::id</primary></indexterm>__timepunct&lt;wchar_t&gt;::id(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for __timepunct&lt;wchar_t&gt;</primary></indexterm>typeinfo for __timepunct&lt;wchar_t&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for __timepunct&lt;wchar_t&gt;</primary></indexterm>typeinfo name for __timepunct&lt;wchar_t&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __timepunct&lt;wchar_t&gt;</primary></indexterm>vtable for __timepunct&lt;wchar_t&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::messages_base -->
<SECT2>
<!--libgroup-->
<TITLE>Class messages_base</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for messages_base</TITLE>
<PARA>
</PARA>
<PARA>
The Run Time Type Information for the std::messages_base  class
is described by <XREF LINKEND="rtti-24011">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24011">
<TITLE>typeinfo for messages_base</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__class_type_info</primary></indexterm>vtable for __cxxabiv1::__class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for messages_base</primary></indexterm>typeinfo name for messages_base</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class messages_base</TITLE>
<PARA>
No external methods are defined for libstdcxx - Class std::messages_base
in this part of the specification. See also the relevant architecture specific part of this specification.
</PARA>
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::messages_base specified in <XREF linkend="tbl-libstdcxx-clavl-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clavl-data">
<TITLE>libstdcxx - Class messages_base Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for messages_base</primary></indexterm>typeinfo for messages_base(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for messages_base</primary></indexterm>typeinfo name for messages_base(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::messages<char> -->
<SECT2>
<!--libgroup-->
<TITLE>Class messages&lt;char&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for messages&lt;char&gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::messages&lt;char&gt; class
is described by <XREF LINKEND="cls-24285-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24285-0">
<TITLE>Primary vtable for messages&lt;char&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for messages&lt;char&gt;</primary></indexterm>typeinfo for messages&lt;char&gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>messages&lt;char&gt;::~messages()</primary></indexterm>messages&lt;char&gt;::~messages()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>messages&lt;char&gt;::~messages()</primary></indexterm>messages&lt;char&gt;::~messages()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>messages&lt;char&gt;::do_open(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, locale const&) const</primary></indexterm>messages&lt;char&gt;::do_open(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, locale const&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>messages&lt;char&gt;::do_get(int, int, int, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&) const</primary></indexterm>messages&lt;char&gt;::do_get(int, int, int, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>messages&lt;char&gt;::do_close(int) const</primary></indexterm>messages&lt;char&gt;::do_close(int) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class messages&lt;char&gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::messages&lt;char&gt; specified in <XREF linkend="tbl-libstdcxx-clavm-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clavm-ints">
<TITLE>libstdcxx - Class messages&lt;char&gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>messages&lt;char&gt;::_M_convert_to_char(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&) const</primary></indexterm>messages&lt;char&gt;::_M_convert_to_char(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>messages&lt;char&gt;::_M_convert_from_char(char*) const</primary></indexterm>messages&lt;char&gt;::_M_convert_from_char(char*) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>messages&lt;char&gt;::get(int, int, int, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&) const</primary></indexterm>messages&lt;char&gt;::get(int, int, int, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>messages&lt;char&gt;::open(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, locale const&) const</primary></indexterm>messages&lt;char&gt;::open(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, locale const&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>messages&lt;char&gt;::open(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, locale const&, char const*) const</primary></indexterm>messages&lt;char&gt;::open(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, locale const&, char const*) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>messages&lt;char&gt;::close(int) const</primary></indexterm>messages&lt;char&gt;::close(int) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>messages&lt;char&gt;::do_get(int, int, int, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&) const</primary></indexterm>messages&lt;char&gt;::do_get(int, int, int, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>messages&lt;char&gt;::do_open(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, locale const&) const</primary></indexterm>messages&lt;char&gt;::do_open(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, locale const&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>messages&lt;char&gt;::do_close(int) const</primary></indexterm>messages&lt;char&gt;::do_close(int) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>messages&lt;char&gt;::~messages()</primary></indexterm>messages&lt;char&gt;::~messages()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>messages&lt;char&gt;::~messages()</primary></indexterm>messages&lt;char&gt;::~messages()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>messages&lt;char&gt;::~messages()</primary></indexterm>messages&lt;char&gt;::~messages()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::messages&lt;char&gt; specified in <XREF linkend="tbl-libstdcxx-clavm-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clavm-data">
<TITLE>libstdcxx - Class messages&lt;char&gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>guard variable for messages&lt;char&gt;::id</primary></indexterm>guard variable for messages&lt;char&gt;::id(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>messages&lt;char&gt;::id</primary></indexterm>messages&lt;char&gt;::id(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for messages&lt;char&gt;</primary></indexterm>typeinfo for messages&lt;char&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for messages&lt;char&gt;</primary></indexterm>typeinfo name for messages&lt;char&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for messages&lt;char&gt;</primary></indexterm>vtable for messages&lt;char&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::messages<wchar_t> -->
<SECT2>
<!--libgroup-->
<TITLE>Class messages&lt;wchar_t&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for messages&lt;wchar_t&gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::messages&lt;wchar_t&gt; class
is described by <XREF LINKEND="cls-24284-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24284-0">
<TITLE>Primary vtable for messages&lt;wchar_t&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for messages&lt;wchar_t&gt;</primary></indexterm>typeinfo for messages&lt;wchar_t&gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>messages&lt;wchar_t&gt;::~messages()</primary></indexterm>messages&lt;wchar_t&gt;::~messages()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>messages&lt;wchar_t&gt;::~messages()</primary></indexterm>messages&lt;wchar_t&gt;::~messages()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>messages&lt;wchar_t&gt;::do_open(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, locale const&) const</primary></indexterm>messages&lt;wchar_t&gt;::do_open(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, locale const&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>messages&lt;wchar_t&gt;::do_get(int, int, int, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&) const</primary></indexterm>messages&lt;wchar_t&gt;::do_get(int, int, int, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>messages&lt;wchar_t&gt;::do_close(int) const</primary></indexterm>messages&lt;wchar_t&gt;::do_close(int) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class messages&lt;wchar_t&gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::messages&lt;wchar_t&gt; specified in <XREF linkend="tbl-libstdcxx-clavn-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clavn-ints">
<TITLE>libstdcxx - Class messages&lt;wchar_t&gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>messages&lt;wchar_t&gt;::_M_convert_to_char(basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&) const</primary></indexterm>messages&lt;wchar_t&gt;::_M_convert_to_char(basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>messages&lt;wchar_t&gt;::_M_convert_from_char(char*) const</primary></indexterm>messages&lt;wchar_t&gt;::_M_convert_from_char(char*) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>messages&lt;wchar_t&gt;::get(int, int, int, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&) const</primary></indexterm>messages&lt;wchar_t&gt;::get(int, int, int, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>messages&lt;wchar_t&gt;::open(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, locale const&) const</primary></indexterm>messages&lt;wchar_t&gt;::open(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, locale const&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>messages&lt;wchar_t&gt;::open(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, locale const&, char const*) const</primary></indexterm>messages&lt;wchar_t&gt;::open(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, locale const&, char const*) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>messages&lt;wchar_t&gt;::close(int) const</primary></indexterm>messages&lt;wchar_t&gt;::close(int) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>messages&lt;wchar_t&gt;::do_get(int, int, int, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&) const</primary></indexterm>messages&lt;wchar_t&gt;::do_get(int, int, int, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>messages&lt;wchar_t&gt;::do_open(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, locale const&) const</primary></indexterm>messages&lt;wchar_t&gt;::do_open(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, locale const&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>messages&lt;wchar_t&gt;::do_close(int) const</primary></indexterm>messages&lt;wchar_t&gt;::do_close(int) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>messages&lt;wchar_t&gt;::~messages()</primary></indexterm>messages&lt;wchar_t&gt;::~messages()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>messages&lt;wchar_t&gt;::~messages()</primary></indexterm>messages&lt;wchar_t&gt;::~messages()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>messages&lt;wchar_t&gt;::~messages()</primary></indexterm>messages&lt;wchar_t&gt;::~messages()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::messages&lt;wchar_t&gt; specified in <XREF linkend="tbl-libstdcxx-clavn-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clavn-data">
<TITLE>libstdcxx - Class messages&lt;wchar_t&gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>guard variable for messages&lt;wchar_t&gt;::id</primary></indexterm>guard variable for messages&lt;wchar_t&gt;::id(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>messages&lt;wchar_t&gt;::id</primary></indexterm>messages&lt;wchar_t&gt;::id(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for messages&lt;wchar_t&gt;</primary></indexterm>typeinfo for messages&lt;wchar_t&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for messages&lt;wchar_t&gt;</primary></indexterm>typeinfo name for messages&lt;wchar_t&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for messages&lt;wchar_t&gt;</primary></indexterm>vtable for messages&lt;wchar_t&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::messages_byname<char> -->
<SECT2>
<!--libgroup-->
<TITLE>Class messages_byname&lt;char&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for messages_byname&lt;char&gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::messages_byname&lt;char&gt; class
is described by <XREF LINKEND="cls-24272-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24272-0">
<TITLE>Primary vtable for messages_byname&lt;char&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for messages_byname&lt;char&gt;</primary></indexterm>typeinfo for messages_byname&lt;char&gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>messages_byname&lt;char&gt;::~messages_byname()</primary></indexterm>messages_byname&lt;char&gt;::~messages_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>messages_byname&lt;char&gt;::~messages_byname()</primary></indexterm>messages_byname&lt;char&gt;::~messages_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>messages&lt;char&gt;::do_open(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, locale const&) const</primary></indexterm>messages&lt;char&gt;::do_open(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, locale const&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>messages&lt;char&gt;::do_get(int, int, int, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&) const</primary></indexterm>messages&lt;char&gt;::do_get(int, int, int, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>messages&lt;char&gt;::do_close(int) const</primary></indexterm>messages&lt;char&gt;::do_close(int) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::messages_byname&lt;char&gt;  class
is described by <XREF LINKEND="rtti-24074">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24074">
<TITLE>typeinfo for messages_byname&lt;char&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for messages_byname&lt;char&gt;</primary></indexterm>typeinfo name for messages_byname&lt;char&gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class messages_byname&lt;char&gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::messages_byname&lt;char&gt; specified in <XREF linkend="tbl-libstdcxx-clavo-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clavo-ints">
<TITLE>libstdcxx - Class messages_byname&lt;char&gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>messages_byname&lt;char&gt;::~messages_byname()</primary></indexterm>messages_byname&lt;char&gt;::~messages_byname()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>messages_byname&lt;char&gt;::~messages_byname()</primary></indexterm>messages_byname&lt;char&gt;::~messages_byname()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>messages_byname&lt;char&gt;::~messages_byname()</primary></indexterm>messages_byname&lt;char&gt;::~messages_byname()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::messages_byname&lt;char&gt; specified in <XREF linkend="tbl-libstdcxx-clavo-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clavo-data">
<TITLE>libstdcxx - Class messages_byname&lt;char&gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for messages_byname&lt;char&gt;</primary></indexterm>typeinfo for messages_byname&lt;char&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for messages_byname&lt;char&gt;</primary></indexterm>typeinfo name for messages_byname&lt;char&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for messages_byname&lt;char&gt;</primary></indexterm>vtable for messages_byname&lt;char&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::messages_byname<wchar_t> -->
<SECT2>
<!--libgroup-->
<TITLE>Class messages_byname&lt;wchar_t&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for messages_byname&lt;wchar_t&gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::messages_byname&lt;wchar_t&gt; class
is described by <XREF LINKEND="cls-24258-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24258-0">
<TITLE>Primary vtable for messages_byname&lt;wchar_t&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for messages_byname&lt;wchar_t&gt;</primary></indexterm>typeinfo for messages_byname&lt;wchar_t&gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>messages_byname&lt;wchar_t&gt;::~messages_byname()</primary></indexterm>messages_byname&lt;wchar_t&gt;::~messages_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>messages_byname&lt;wchar_t&gt;::~messages_byname()</primary></indexterm>messages_byname&lt;wchar_t&gt;::~messages_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>messages&lt;wchar_t&gt;::do_open(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, locale const&) const</primary></indexterm>messages&lt;wchar_t&gt;::do_open(basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&, locale const&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>messages&lt;wchar_t&gt;::do_get(int, int, int, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&) const</primary></indexterm>messages&lt;wchar_t&gt;::do_get(int, int, int, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>messages&lt;wchar_t&gt;::do_close(int) const</primary></indexterm>messages&lt;wchar_t&gt;::do_close(int) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::messages_byname&lt;wchar_t&gt;  class
is described by <XREF LINKEND="rtti-24062">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24062">
<TITLE>typeinfo for messages_byname&lt;wchar_t&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for messages_byname&lt;wchar_t&gt;</primary></indexterm>typeinfo name for messages_byname&lt;wchar_t&gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class messages_byname&lt;wchar_t&gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::messages_byname&lt;wchar_t&gt; specified in <XREF linkend="tbl-libstdcxx-clavp-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clavp-ints">
<TITLE>libstdcxx - Class messages_byname&lt;wchar_t&gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>messages_byname&lt;wchar_t&gt;::~messages_byname()</primary></indexterm>messages_byname&lt;wchar_t&gt;::~messages_byname()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>messages_byname&lt;wchar_t&gt;::~messages_byname()</primary></indexterm>messages_byname&lt;wchar_t&gt;::~messages_byname()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>messages_byname&lt;wchar_t&gt;::~messages_byname()</primary></indexterm>messages_byname&lt;wchar_t&gt;::~messages_byname()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::messages_byname&lt;wchar_t&gt; specified in <XREF linkend="tbl-libstdcxx-clavp-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clavp-data">
<TITLE>libstdcxx - Class messages_byname&lt;wchar_t&gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for messages_byname&lt;wchar_t&gt;</primary></indexterm>typeinfo for messages_byname&lt;wchar_t&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for messages_byname&lt;wchar_t&gt;</primary></indexterm>typeinfo name for messages_byname&lt;wchar_t&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for messages_byname&lt;wchar_t&gt;</primary></indexterm>vtable for messages_byname&lt;wchar_t&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::numpunct<char> -->
<SECT2>
<!--libgroup-->
<TITLE>Class numpunct&lt;char&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for numpunct&lt;char&gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::numpunct&lt;char&gt; class
is described by <XREF LINKEND="cls-24295-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24295-0">
<TITLE>Primary vtable for numpunct&lt;char&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for numpunct&lt;char&gt;</primary></indexterm>typeinfo for numpunct&lt;char&gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;char&gt;::~numpunct()</primary></indexterm>numpunct&lt;char&gt;::~numpunct()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;char&gt;::~numpunct()</primary></indexterm>numpunct&lt;char&gt;::~numpunct()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;char&gt;::do_decimal_point() const</primary></indexterm>numpunct&lt;char&gt;::do_decimal_point() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;char&gt;::do_thousands_sep() const</primary></indexterm>numpunct&lt;char&gt;::do_thousands_sep() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;char&gt;::do_grouping() const</primary></indexterm>numpunct&lt;char&gt;::do_grouping() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;char&gt;::do_truename() const</primary></indexterm>numpunct&lt;char&gt;::do_truename() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;char&gt;::do_falsename() const</primary></indexterm>numpunct&lt;char&gt;::do_falsename() const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::numpunct&lt;char&gt;  class
is described by <XREF LINKEND="rtti-24014">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24014">
<TITLE>typeinfo for numpunct&lt;char&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for numpunct&lt;char&gt;</primary></indexterm>typeinfo name for numpunct&lt;char&gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class numpunct&lt;char&gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::numpunct&lt;char&gt; specified in <XREF linkend="tbl-libstdcxx-clavq-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clavq-ints">
<TITLE>libstdcxx - Class numpunct&lt;char&gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;char&gt;::do_grouping() const</primary></indexterm>numpunct&lt;char&gt;::do_grouping() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;char&gt;::do_truename() const</primary></indexterm>numpunct&lt;char&gt;::do_truename() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;char&gt;::do_falsename() const</primary></indexterm>numpunct&lt;char&gt;::do_falsename() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;char&gt;::decimal_point() const</primary></indexterm>numpunct&lt;char&gt;::decimal_point() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;char&gt;::thousands_sep() const</primary></indexterm>numpunct&lt;char&gt;::thousands_sep() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;char&gt;::do_decimal_point() const</primary></indexterm>numpunct&lt;char&gt;::do_decimal_point() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;char&gt;::do_thousands_sep() const</primary></indexterm>numpunct&lt;char&gt;::do_thousands_sep() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;char&gt;::grouping() const</primary></indexterm>numpunct&lt;char&gt;::grouping() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;char&gt;::truename() const</primary></indexterm>numpunct&lt;char&gt;::truename() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;char&gt;::falsename() const</primary></indexterm>numpunct&lt;char&gt;::falsename() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;char&gt;::_M_initialize_numpunct(__locale_struct*)</primary></indexterm>numpunct&lt;char&gt;::_M_initialize_numpunct(__locale_struct*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;char&gt;::~numpunct()</primary></indexterm>numpunct&lt;char&gt;::~numpunct()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;char&gt;::~numpunct()</primary></indexterm>numpunct&lt;char&gt;::~numpunct()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;char&gt;::~numpunct()</primary></indexterm>numpunct&lt;char&gt;::~numpunct()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::numpunct&lt;char&gt; specified in <XREF linkend="tbl-libstdcxx-clavq-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clavq-data">
<TITLE>libstdcxx - Class numpunct&lt;char&gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>guard variable for numpunct&lt;char&gt;::id</primary></indexterm>guard variable for numpunct&lt;char&gt;::id(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;char&gt;::id</primary></indexterm>numpunct&lt;char&gt;::id(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for numpunct&lt;char&gt;</primary></indexterm>typeinfo for numpunct&lt;char&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for numpunct&lt;char&gt;</primary></indexterm>typeinfo name for numpunct&lt;char&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for numpunct&lt;char&gt;</primary></indexterm>vtable for numpunct&lt;char&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::numpunct<wchar_t> -->
<SECT2>
<!--libgroup-->
<TITLE>Class numpunct&lt;wchar_t&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for numpunct&lt;wchar_t&gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::numpunct&lt;wchar_t&gt; class
is described by <XREF LINKEND="cls-24294-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24294-0">
<TITLE>Primary vtable for numpunct&lt;wchar_t&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for numpunct&lt;wchar_t&gt;</primary></indexterm>typeinfo for numpunct&lt;wchar_t&gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;wchar_t&gt;::~numpunct()</primary></indexterm>numpunct&lt;wchar_t&gt;::~numpunct()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;wchar_t&gt;::~numpunct()</primary></indexterm>numpunct&lt;wchar_t&gt;::~numpunct()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;wchar_t&gt;::do_decimal_point() const</primary></indexterm>numpunct&lt;wchar_t&gt;::do_decimal_point() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;wchar_t&gt;::do_thousands_sep() const</primary></indexterm>numpunct&lt;wchar_t&gt;::do_thousands_sep() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;wchar_t&gt;::do_grouping() const</primary></indexterm>numpunct&lt;wchar_t&gt;::do_grouping() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;wchar_t&gt;::do_truename() const</primary></indexterm>numpunct&lt;wchar_t&gt;::do_truename() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;wchar_t&gt;::do_falsename() const</primary></indexterm>numpunct&lt;wchar_t&gt;::do_falsename() const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::numpunct&lt;wchar_t&gt;  class
is described by <XREF LINKEND="rtti-24024">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24024">
<TITLE>typeinfo for numpunct&lt;wchar_t&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for numpunct&lt;wchar_t&gt;</primary></indexterm>typeinfo name for numpunct&lt;wchar_t&gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class numpunct&lt;wchar_t&gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::numpunct&lt;wchar_t&gt; specified in <XREF linkend="tbl-libstdcxx-clavr-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clavr-ints">
<TITLE>libstdcxx - Class numpunct&lt;wchar_t&gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;wchar_t&gt;::do_grouping() const</primary></indexterm>numpunct&lt;wchar_t&gt;::do_grouping() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;wchar_t&gt;::do_truename() const</primary></indexterm>numpunct&lt;wchar_t&gt;::do_truename() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;wchar_t&gt;::do_falsename() const</primary></indexterm>numpunct&lt;wchar_t&gt;::do_falsename() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;wchar_t&gt;::decimal_point() const</primary></indexterm>numpunct&lt;wchar_t&gt;::decimal_point() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;wchar_t&gt;::thousands_sep() const</primary></indexterm>numpunct&lt;wchar_t&gt;::thousands_sep() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;wchar_t&gt;::do_decimal_point() const</primary></indexterm>numpunct&lt;wchar_t&gt;::do_decimal_point() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;wchar_t&gt;::do_thousands_sep() const</primary></indexterm>numpunct&lt;wchar_t&gt;::do_thousands_sep() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;wchar_t&gt;::grouping() const</primary></indexterm>numpunct&lt;wchar_t&gt;::grouping() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;wchar_t&gt;::truename() const</primary></indexterm>numpunct&lt;wchar_t&gt;::truename() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;wchar_t&gt;::falsename() const</primary></indexterm>numpunct&lt;wchar_t&gt;::falsename() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;wchar_t&gt;::_M_initialize_numpunct(__locale_struct*)</primary></indexterm>numpunct&lt;wchar_t&gt;::_M_initialize_numpunct(__locale_struct*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;wchar_t&gt;::~numpunct()</primary></indexterm>numpunct&lt;wchar_t&gt;::~numpunct()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;wchar_t&gt;::~numpunct()</primary></indexterm>numpunct&lt;wchar_t&gt;::~numpunct()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;wchar_t&gt;::~numpunct()</primary></indexterm>numpunct&lt;wchar_t&gt;::~numpunct()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::numpunct&lt;wchar_t&gt; specified in <XREF linkend="tbl-libstdcxx-clavr-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clavr-data">
<TITLE>libstdcxx - Class numpunct&lt;wchar_t&gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>guard variable for numpunct&lt;wchar_t&gt;::id</primary></indexterm>guard variable for numpunct&lt;wchar_t&gt;::id(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;wchar_t&gt;::id</primary></indexterm>numpunct&lt;wchar_t&gt;::id(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for numpunct&lt;wchar_t&gt;</primary></indexterm>typeinfo for numpunct&lt;wchar_t&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for numpunct&lt;wchar_t&gt;</primary></indexterm>typeinfo name for numpunct&lt;wchar_t&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for numpunct&lt;wchar_t&gt;</primary></indexterm>vtable for numpunct&lt;wchar_t&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::numpunct_byname<char> -->
<SECT2>
<!--libgroup-->
<TITLE>Class numpunct_byname&lt;char&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for numpunct_byname&lt;char&gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::numpunct_byname&lt;char&gt; class
is described by <XREF LINKEND="cls-24279-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24279-0">
<TITLE>Primary vtable for numpunct_byname&lt;char&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for numpunct_byname&lt;char&gt;</primary></indexterm>typeinfo for numpunct_byname&lt;char&gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>numpunct_byname&lt;char&gt;::~numpunct_byname()</primary></indexterm>numpunct_byname&lt;char&gt;::~numpunct_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>numpunct_byname&lt;char&gt;::~numpunct_byname()</primary></indexterm>numpunct_byname&lt;char&gt;::~numpunct_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;char&gt;::do_decimal_point() const</primary></indexterm>numpunct&lt;char&gt;::do_decimal_point() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;char&gt;::do_thousands_sep() const</primary></indexterm>numpunct&lt;char&gt;::do_thousands_sep() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;char&gt;::do_grouping() const</primary></indexterm>numpunct&lt;char&gt;::do_grouping() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;char&gt;::do_truename() const</primary></indexterm>numpunct&lt;char&gt;::do_truename() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;char&gt;::do_falsename() const</primary></indexterm>numpunct&lt;char&gt;::do_falsename() const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::numpunct_byname&lt;char&gt;  class
is described by <XREF LINKEND="rtti-24079">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24079">
<TITLE>typeinfo for numpunct_byname&lt;char&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for numpunct_byname&lt;char&gt;</primary></indexterm>typeinfo name for numpunct_byname&lt;char&gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class numpunct_byname&lt;char&gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::numpunct_byname&lt;char&gt; specified in <XREF linkend="tbl-libstdcxx-clavs-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clavs-ints">
<TITLE>libstdcxx - Class numpunct_byname&lt;char&gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numpunct_byname&lt;char&gt;::~numpunct_byname()</primary></indexterm>numpunct_byname&lt;char&gt;::~numpunct_byname()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numpunct_byname&lt;char&gt;::~numpunct_byname()</primary></indexterm>numpunct_byname&lt;char&gt;::~numpunct_byname()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numpunct_byname&lt;char&gt;::~numpunct_byname()</primary></indexterm>numpunct_byname&lt;char&gt;::~numpunct_byname()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::numpunct_byname&lt;char&gt; specified in <XREF linkend="tbl-libstdcxx-clavs-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clavs-data">
<TITLE>libstdcxx - Class numpunct_byname&lt;char&gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for numpunct_byname&lt;char&gt;</primary></indexterm>typeinfo for numpunct_byname&lt;char&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for numpunct_byname&lt;char&gt;</primary></indexterm>typeinfo name for numpunct_byname&lt;char&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for numpunct_byname&lt;char&gt;</primary></indexterm>vtable for numpunct_byname&lt;char&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::numpunct_byname<wchar_t> -->
<SECT2>
<!--libgroup-->
<TITLE>Class numpunct_byname&lt;wchar_t&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for numpunct_byname&lt;wchar_t&gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::numpunct_byname&lt;wchar_t&gt; class
is described by <XREF LINKEND="cls-24265-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24265-0">
<TITLE>Primary vtable for numpunct_byname&lt;wchar_t&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for numpunct_byname&lt;wchar_t&gt;</primary></indexterm>typeinfo for numpunct_byname&lt;wchar_t&gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>numpunct_byname&lt;wchar_t&gt;::~numpunct_byname()</primary></indexterm>numpunct_byname&lt;wchar_t&gt;::~numpunct_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>numpunct_byname&lt;wchar_t&gt;::~numpunct_byname()</primary></indexterm>numpunct_byname&lt;wchar_t&gt;::~numpunct_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;wchar_t&gt;::do_decimal_point() const</primary></indexterm>numpunct&lt;wchar_t&gt;::do_decimal_point() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;wchar_t&gt;::do_thousands_sep() const</primary></indexterm>numpunct&lt;wchar_t&gt;::do_thousands_sep() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;wchar_t&gt;::do_grouping() const</primary></indexterm>numpunct&lt;wchar_t&gt;::do_grouping() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;wchar_t&gt;::do_truename() const</primary></indexterm>numpunct&lt;wchar_t&gt;::do_truename() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;wchar_t&gt;::do_falsename() const</primary></indexterm>numpunct&lt;wchar_t&gt;::do_falsename() const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::numpunct_byname&lt;wchar_t&gt;  class
is described by <XREF LINKEND="rtti-24067">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24067">
<TITLE>typeinfo for numpunct_byname&lt;wchar_t&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for numpunct_byname&lt;wchar_t&gt;</primary></indexterm>typeinfo name for numpunct_byname&lt;wchar_t&gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class numpunct_byname&lt;wchar_t&gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::numpunct_byname&lt;wchar_t&gt; specified in <XREF linkend="tbl-libstdcxx-clavt-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clavt-ints">
<TITLE>libstdcxx - Class numpunct_byname&lt;wchar_t&gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numpunct_byname&lt;wchar_t&gt;::~numpunct_byname()</primary></indexterm>numpunct_byname&lt;wchar_t&gt;::~numpunct_byname()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numpunct_byname&lt;wchar_t&gt;::~numpunct_byname()</primary></indexterm>numpunct_byname&lt;wchar_t&gt;::~numpunct_byname()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numpunct_byname&lt;wchar_t&gt;::~numpunct_byname()</primary></indexterm>numpunct_byname&lt;wchar_t&gt;::~numpunct_byname()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::numpunct_byname&lt;wchar_t&gt; specified in <XREF linkend="tbl-libstdcxx-clavt-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clavt-data">
<TITLE>libstdcxx - Class numpunct_byname&lt;wchar_t&gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for numpunct_byname&lt;wchar_t&gt;</primary></indexterm>typeinfo for numpunct_byname&lt;wchar_t&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for numpunct_byname&lt;wchar_t&gt;</primary></indexterm>typeinfo name for numpunct_byname&lt;wchar_t&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for numpunct_byname&lt;wchar_t&gt;</primary></indexterm>vtable for numpunct_byname&lt;wchar_t&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::__codecvt_abstract_base<char, char, __mbstate_t> -->
<SECT2>
<!--libgroup-->
<TITLE>Class __codecvt_abstract_base&lt;char, char, __mbstate_t&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for Class __codecvt_abstract_base&lt;char, char, __mbstate_t&gt;</TITLE>
<PARA>
No external methods are defined for libstdcxx - Class std::__codecvt_abstract_base&lt;char, char, __mbstate_t&gt;
in this part of the specification. See also the relevant architecture specific part of this specification.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::__codecvt_abstract_base<wchar_t, char, __mbstate_t> -->
<SECT2>
<!--libgroup-->
<TITLE>Class __codecvt_abstract_base&lt;wchar_t, char, __mbstate_t&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for __codecvt_abstract_base&lt;wchar_t, char, __mbstate_t&gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::__codecvt_abstract_base&lt;wchar_t, char, __mbstate_t&gt; class
is described by <XREF LINKEND="cls-24296-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24296-0">
<TITLE>Primary vtable for __codecvt_abstract_base&lt;wchar_t, char, __mbstate_t&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for __codecvt_abstract_base&lt;wchar_t, char, __mbstate_t&gt;</primary></indexterm>typeinfo for __codecvt_abstract_base&lt;wchar_t, char, __mbstate_t&gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary></primary></indexterm></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary></primary></indexterm></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class __codecvt_abstract_base&lt;wchar_t, char, __mbstate_t&gt;</TITLE>
<PARA>
No external methods are defined for libstdcxx - Class std::__codecvt_abstract_base&lt;wchar_t, char, __mbstate_t&gt;
in this part of the specification. See also the relevant architecture specific part of this specification.
</PARA>
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::__codecvt_abstract_base&lt;wchar_t, char, __mbstate_t&gt; specified in <XREF linkend="tbl-libstdcxx-clavu-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clavu-data">
<TITLE>libstdcxx - Class __codecvt_abstract_base&lt;wchar_t, char, __mbstate_t&gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for __codecvt_abstract_base&lt;wchar_t, char, __mbstate_t&gt;</primary></indexterm>typeinfo for __codecvt_abstract_base&lt;wchar_t, char, __mbstate_t&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for __codecvt_abstract_base&lt;wchar_t, char, __mbstate_t&gt;</primary></indexterm>typeinfo name for __codecvt_abstract_base&lt;wchar_t, char, __mbstate_t&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __codecvt_abstract_base&lt;wchar_t, char, __mbstate_t&gt;</primary></indexterm>vtable for __codecvt_abstract_base&lt;wchar_t, char, __mbstate_t&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::codecvt_base -->
<SECT2>
<!--libgroup-->
<TITLE>Class codecvt_base</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for codecvt_base</TITLE>
<PARA>
</PARA>
<PARA>
The Run Time Type Information for the std::codecvt_base  class
is described by <XREF LINKEND="rtti-24009">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24009">
<TITLE>typeinfo for codecvt_base</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__class_type_info</primary></indexterm>vtable for __cxxabiv1::__class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for codecvt_base</primary></indexterm>typeinfo name for codecvt_base</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class codecvt_base</TITLE>
<PARA>
No external methods are defined for libstdcxx - Class std::codecvt_base
in this part of the specification. See also the relevant architecture specific part of this specification.
</PARA>
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::codecvt_base specified in <XREF linkend="tbl-libstdcxx-clavv-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clavv-data">
<TITLE>libstdcxx - Class codecvt_base Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for codecvt_base</primary></indexterm>typeinfo for codecvt_base(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for codecvt_base</primary></indexterm>typeinfo name for codecvt_base(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::codecvt<char, char, __mbstate_t> -->
<SECT2>
<!--libgroup-->
<TITLE>Class codecvt&lt;char, char, __mbstate_t&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for codecvt&lt;char, char, __mbstate_t&gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::codecvt&lt;char, char, __mbstate_t&gt; class
is described by <XREF LINKEND="cls-24228-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24228-0">
<TITLE>Primary vtable for codecvt&lt;char, char, __mbstate_t&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for codecvt&lt;char, char, __mbstate_t&gt;</primary></indexterm>typeinfo for codecvt&lt;char, char, __mbstate_t&gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;char, char, __mbstate_t&gt;::~codecvt()</primary></indexterm>codecvt&lt;char, char, __mbstate_t&gt;::~codecvt()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;char, char, __mbstate_t&gt;::~codecvt()</primary></indexterm>codecvt&lt;char, char, __mbstate_t&gt;::~codecvt()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;char, char, __mbstate_t&gt;::do_out(__mbstate_t&, char const*, char const*, char const*&, char*, char*, char*&) const</primary></indexterm>codecvt&lt;char, char, __mbstate_t&gt;::do_out(__mbstate_t&, char const*, char const*, char const*&, char*, char*, char*&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;char, char, __mbstate_t&gt;::do_unshift(__mbstate_t&, char*, char*, char*&) const</primary></indexterm>codecvt&lt;char, char, __mbstate_t&gt;::do_unshift(__mbstate_t&, char*, char*, char*&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;char, char, __mbstate_t&gt;::do_in(__mbstate_t&, char const*, char const*, char const*&, char*, char*, char*&) const</primary></indexterm>codecvt&lt;char, char, __mbstate_t&gt;::do_in(__mbstate_t&, char const*, char const*, char const*&, char*, char*, char*&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;char, char, __mbstate_t&gt;::do_encoding() const</primary></indexterm>codecvt&lt;char, char, __mbstate_t&gt;::do_encoding() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;char, char, __mbstate_t&gt;::do_always_noconv() const</primary></indexterm>codecvt&lt;char, char, __mbstate_t&gt;::do_always_noconv() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>See The Architecture Specific Specification</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;char, char, __mbstate_t&gt;::do_max_length() const</primary></indexterm>codecvt&lt;char, char, __mbstate_t&gt;::do_max_length() const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::codecvt&lt;char, char, __mbstate_t&gt;  class
is described by <XREF LINKEND="rtti-24020">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24020">
<TITLE>typeinfo for codecvt&lt;char, char, __mbstate_t&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for codecvt&lt;char, char, __mbstate_t&gt;</primary></indexterm>typeinfo name for codecvt&lt;char, char, __mbstate_t&gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Class data for __codecvt_abstract_base&lt;char, char, __mbstate_t&gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::__codecvt_abstract_base&lt;char, char, __mbstate_t&gt; class
is described by <XREF LINKEND="cls-24297-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24297-0">
<TITLE>Primary vtable for __codecvt_abstract_base&lt;char, char, __mbstate_t&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for __codecvt_abstract_base&lt;char, char, __mbstate_t&gt;</primary></indexterm>typeinfo for __codecvt_abstract_base&lt;char, char, __mbstate_t&gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary></primary></indexterm></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary></primary></indexterm></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>__cxa_pure_virtual</primary></indexterm>__cxa_pure_virtual</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class codecvt&lt;char, char, __mbstate_t&gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::codecvt&lt;char, char, __mbstate_t&gt; specified in <XREF linkend="tbl-libstdcxx-clavw-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clavw-ints">
<TITLE>libstdcxx - Class codecvt&lt;char, char, __mbstate_t&gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;char, char, __mbstate_t&gt;::do_unshift(__mbstate_t&, char*, char*, char*&) const</primary></indexterm>codecvt&lt;char, char, __mbstate_t&gt;::do_unshift(__mbstate_t&, char*, char*, char*&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;char, char, __mbstate_t&gt;::do_encoding() const</primary></indexterm>codecvt&lt;char, char, __mbstate_t&gt;::do_encoding() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;char, char, __mbstate_t&gt;::do_max_length() const</primary></indexterm>codecvt&lt;char, char, __mbstate_t&gt;::do_max_length() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;char, char, __mbstate_t&gt;::do_always_noconv() const</primary></indexterm>codecvt&lt;char, char, __mbstate_t&gt;::do_always_noconv() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;char, char, __mbstate_t&gt;::do_in(__mbstate_t&, char const*, char const*, char const*&, char*, char*, char*&) const</primary></indexterm>codecvt&lt;char, char, __mbstate_t&gt;::do_in(__mbstate_t&, char const*, char const*, char const*&, char*, char*, char*&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;char, char, __mbstate_t&gt;::do_out(__mbstate_t&, char const*, char const*, char const*&, char*, char*, char*&) const</primary></indexterm>codecvt&lt;char, char, __mbstate_t&gt;::do_out(__mbstate_t&, char const*, char const*, char const*&, char*, char*, char*&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;char, char, __mbstate_t&gt;::~codecvt()</primary></indexterm>codecvt&lt;char, char, __mbstate_t&gt;::~codecvt()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;char, char, __mbstate_t&gt;::~codecvt()</primary></indexterm>codecvt&lt;char, char, __mbstate_t&gt;::~codecvt()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;char, char, __mbstate_t&gt;::~codecvt()</primary></indexterm>codecvt&lt;char, char, __mbstate_t&gt;::~codecvt()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::codecvt&lt;char, char, __mbstate_t&gt; specified in <XREF linkend="tbl-libstdcxx-clavw-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clavw-data">
<TITLE>libstdcxx - Class codecvt&lt;char, char, __mbstate_t&gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;char, char, __mbstate_t&gt;::id</primary></indexterm>codecvt&lt;char, char, __mbstate_t&gt;::id(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for __codecvt_abstract_base&lt;char, char, __mbstate_t&gt;</primary></indexterm>typeinfo for __codecvt_abstract_base&lt;char, char, __mbstate_t&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for codecvt&lt;char, char, __mbstate_t&gt;</primary></indexterm>typeinfo for codecvt&lt;char, char, __mbstate_t&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for __codecvt_abstract_base&lt;char, char, __mbstate_t&gt;</primary></indexterm>typeinfo name for __codecvt_abstract_base&lt;char, char, __mbstate_t&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for codecvt&lt;char, char, __mbstate_t&gt;</primary></indexterm>typeinfo name for codecvt&lt;char, char, __mbstate_t&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __codecvt_abstract_base&lt;char, char, __mbstate_t&gt;</primary></indexterm>vtable for __codecvt_abstract_base&lt;char, char, __mbstate_t&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for codecvt&lt;char, char, __mbstate_t&gt;</primary></indexterm>vtable for codecvt&lt;char, char, __mbstate_t&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::codecvt<wchar_t, char, __mbstate_t> -->
<SECT2>
<!--libgroup-->
<TITLE>Class codecvt&lt;wchar_t, char, __mbstate_t&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for codecvt&lt;wchar_t, char, __mbstate_t&gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::codecvt&lt;wchar_t, char, __mbstate_t&gt; class
is described by <XREF LINKEND="cls-24227-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24227-0">
<TITLE>Primary vtable for codecvt&lt;wchar_t, char, __mbstate_t&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for codecvt&lt;wchar_t, char, __mbstate_t&gt;</primary></indexterm>typeinfo for codecvt&lt;wchar_t, char, __mbstate_t&gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;wchar_t, char, __mbstate_t&gt;::~codecvt()</primary></indexterm>codecvt&lt;wchar_t, char, __mbstate_t&gt;::~codecvt()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;wchar_t, char, __mbstate_t&gt;::~codecvt()</primary></indexterm>codecvt&lt;wchar_t, char, __mbstate_t&gt;::~codecvt()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;wchar_t, char, __mbstate_t&gt;::do_out(__mbstate_t&, wchar_t const*, wchar_t const*, wchar_t const*&, char*, char*, char*&) const</primary></indexterm>codecvt&lt;wchar_t, char, __mbstate_t&gt;::do_out(__mbstate_t&, wchar_t const*, wchar_t const*, wchar_t const*&, char*, char*, char*&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;wchar_t, char, __mbstate_t&gt;::do_unshift(__mbstate_t&, char*, char*, char*&) const</primary></indexterm>codecvt&lt;wchar_t, char, __mbstate_t&gt;::do_unshift(__mbstate_t&, char*, char*, char*&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;wchar_t, char, __mbstate_t&gt;::do_in(__mbstate_t&, char const*, char const*, char const*&, wchar_t*, wchar_t*, wchar_t*&) const</primary></indexterm>codecvt&lt;wchar_t, char, __mbstate_t&gt;::do_in(__mbstate_t&, char const*, char const*, char const*&, wchar_t*, wchar_t*, wchar_t*&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;wchar_t, char, __mbstate_t&gt;::do_encoding() const</primary></indexterm>codecvt&lt;wchar_t, char, __mbstate_t&gt;::do_encoding() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;wchar_t, char, __mbstate_t&gt;::do_always_noconv() const</primary></indexterm>codecvt&lt;wchar_t, char, __mbstate_t&gt;::do_always_noconv() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>See The Architecture Specific Specification</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;wchar_t, char, __mbstate_t&gt;::do_max_length() const</primary></indexterm>codecvt&lt;wchar_t, char, __mbstate_t&gt;::do_max_length() const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::codecvt&lt;wchar_t, char, __mbstate_t&gt;  class
is described by <XREF LINKEND="rtti-24028">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24028">
<TITLE>typeinfo for codecvt&lt;wchar_t, char, __mbstate_t&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for codecvt&lt;wchar_t, char, __mbstate_t&gt;</primary></indexterm>typeinfo name for codecvt&lt;wchar_t, char, __mbstate_t&gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class codecvt&lt;wchar_t, char, __mbstate_t&gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::codecvt&lt;wchar_t, char, __mbstate_t&gt; specified in <XREF linkend="tbl-libstdcxx-clavx-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clavx-ints">
<TITLE>libstdcxx - Class codecvt&lt;wchar_t, char, __mbstate_t&gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;wchar_t, char, __mbstate_t&gt;::do_unshift(__mbstate_t&, char*, char*, char*&) const</primary></indexterm>codecvt&lt;wchar_t, char, __mbstate_t&gt;::do_unshift(__mbstate_t&, char*, char*, char*&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;wchar_t, char, __mbstate_t&gt;::do_encoding() const</primary></indexterm>codecvt&lt;wchar_t, char, __mbstate_t&gt;::do_encoding() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;wchar_t, char, __mbstate_t&gt;::do_max_length() const</primary></indexterm>codecvt&lt;wchar_t, char, __mbstate_t&gt;::do_max_length() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;wchar_t, char, __mbstate_t&gt;::do_always_noconv() const</primary></indexterm>codecvt&lt;wchar_t, char, __mbstate_t&gt;::do_always_noconv() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;wchar_t, char, __mbstate_t&gt;::do_in(__mbstate_t&, char const*, char const*, char const*&, wchar_t*, wchar_t*, wchar_t*&) const</primary></indexterm>codecvt&lt;wchar_t, char, __mbstate_t&gt;::do_in(__mbstate_t&, char const*, char const*, char const*&, wchar_t*, wchar_t*, wchar_t*&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;wchar_t, char, __mbstate_t&gt;::do_out(__mbstate_t&, wchar_t const*, wchar_t const*, wchar_t const*&, char*, char*, char*&) const</primary></indexterm>codecvt&lt;wchar_t, char, __mbstate_t&gt;::do_out(__mbstate_t&, wchar_t const*, wchar_t const*, wchar_t const*&, char*, char*, char*&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;wchar_t, char, __mbstate_t&gt;::~codecvt()</primary></indexterm>codecvt&lt;wchar_t, char, __mbstate_t&gt;::~codecvt()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;wchar_t, char, __mbstate_t&gt;::~codecvt()</primary></indexterm>codecvt&lt;wchar_t, char, __mbstate_t&gt;::~codecvt()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;wchar_t, char, __mbstate_t&gt;::~codecvt()</primary></indexterm>codecvt&lt;wchar_t, char, __mbstate_t&gt;::~codecvt()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::codecvt&lt;wchar_t, char, __mbstate_t&gt; specified in <XREF linkend="tbl-libstdcxx-clavx-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clavx-data">
<TITLE>libstdcxx - Class codecvt&lt;wchar_t, char, __mbstate_t&gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;wchar_t, char, __mbstate_t&gt;::id</primary></indexterm>codecvt&lt;wchar_t, char, __mbstate_t&gt;::id(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for codecvt&lt;wchar_t, char, __mbstate_t&gt;</primary></indexterm>typeinfo for codecvt&lt;wchar_t, char, __mbstate_t&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for codecvt&lt;wchar_t, char, __mbstate_t&gt;</primary></indexterm>typeinfo name for codecvt&lt;wchar_t, char, __mbstate_t&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for codecvt&lt;wchar_t, char, __mbstate_t&gt;</primary></indexterm>vtable for codecvt&lt;wchar_t, char, __mbstate_t&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::codecvt_byname<char, char, __mbstate_t> -->
<SECT2>
<!--libgroup-->
<TITLE>Class codecvt_byname&lt;char, char, __mbstate_t&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for codecvt_byname&lt;char, char, __mbstate_t&gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::codecvt_byname&lt;char, char, __mbstate_t&gt; class
is described by <XREF LINKEND="cls-24271-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24271-0">
<TITLE>Primary vtable for codecvt_byname&lt;char, char, __mbstate_t&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for codecvt_byname&lt;char, char, __mbstate_t&gt;</primary></indexterm>typeinfo for codecvt_byname&lt;char, char, __mbstate_t&gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>codecvt_byname&lt;char, char, __mbstate_t&gt;::~codecvt_byname()</primary></indexterm>codecvt_byname&lt;char, char, __mbstate_t&gt;::~codecvt_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>codecvt_byname&lt;char, char, __mbstate_t&gt;::~codecvt_byname()</primary></indexterm>codecvt_byname&lt;char, char, __mbstate_t&gt;::~codecvt_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;char, char, __mbstate_t&gt;::do_out(__mbstate_t&, char const*, char const*, char const*&, char*, char*, char*&) const</primary></indexterm>codecvt&lt;char, char, __mbstate_t&gt;::do_out(__mbstate_t&, char const*, char const*, char const*&, char*, char*, char*&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;char, char, __mbstate_t&gt;::do_unshift(__mbstate_t&, char*, char*, char*&) const</primary></indexterm>codecvt&lt;char, char, __mbstate_t&gt;::do_unshift(__mbstate_t&, char*, char*, char*&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;char, char, __mbstate_t&gt;::do_in(__mbstate_t&, char const*, char const*, char const*&, char*, char*, char*&) const</primary></indexterm>codecvt&lt;char, char, __mbstate_t&gt;::do_in(__mbstate_t&, char const*, char const*, char const*&, char*, char*, char*&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;char, char, __mbstate_t&gt;::do_encoding() const</primary></indexterm>codecvt&lt;char, char, __mbstate_t&gt;::do_encoding() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;char, char, __mbstate_t&gt;::do_always_noconv() const</primary></indexterm>codecvt&lt;char, char, __mbstate_t&gt;::do_always_noconv() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>See The Architecture Specific Specification</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;char, char, __mbstate_t&gt;::do_max_length() const</primary></indexterm>codecvt&lt;char, char, __mbstate_t&gt;::do_max_length() const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::codecvt_byname&lt;char, char, __mbstate_t&gt;  class
is described by <XREF LINKEND="rtti-24073">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24073">
<TITLE>typeinfo for codecvt_byname&lt;char, char, __mbstate_t&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for codecvt_byname&lt;char, char, __mbstate_t&gt;</primary></indexterm>typeinfo name for codecvt_byname&lt;char, char, __mbstate_t&gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class codecvt_byname&lt;char, char, __mbstate_t&gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::codecvt_byname&lt;char, char, __mbstate_t&gt; specified in <XREF linkend="tbl-libstdcxx-clavy-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clavy-ints">
<TITLE>libstdcxx - Class codecvt_byname&lt;char, char, __mbstate_t&gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>codecvt_byname&lt;char, char, __mbstate_t&gt;::~codecvt_byname()</primary></indexterm>codecvt_byname&lt;char, char, __mbstate_t&gt;::~codecvt_byname()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>codecvt_byname&lt;char, char, __mbstate_t&gt;::~codecvt_byname()</primary></indexterm>codecvt_byname&lt;char, char, __mbstate_t&gt;::~codecvt_byname()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>codecvt_byname&lt;char, char, __mbstate_t&gt;::~codecvt_byname()</primary></indexterm>codecvt_byname&lt;char, char, __mbstate_t&gt;::~codecvt_byname()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::codecvt_byname&lt;char, char, __mbstate_t&gt; specified in <XREF linkend="tbl-libstdcxx-clavy-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clavy-data">
<TITLE>libstdcxx - Class codecvt_byname&lt;char, char, __mbstate_t&gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for codecvt_byname&lt;char, char, __mbstate_t&gt;</primary></indexterm>typeinfo for codecvt_byname&lt;char, char, __mbstate_t&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for codecvt_byname&lt;char, char, __mbstate_t&gt;</primary></indexterm>typeinfo name for codecvt_byname&lt;char, char, __mbstate_t&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for codecvt_byname&lt;char, char, __mbstate_t&gt;</primary></indexterm>vtable for codecvt_byname&lt;char, char, __mbstate_t&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::codecvt_byname<wchar_t, char, __mbstate_t> -->
<SECT2>
<!--libgroup-->
<TITLE>Class codecvt_byname&lt;wchar_t, char, __mbstate_t&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for codecvt_byname&lt;wchar_t, char, __mbstate_t&gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::codecvt_byname&lt;wchar_t, char, __mbstate_t&gt; class
is described by <XREF LINKEND="cls-24257-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24257-0">
<TITLE>Primary vtable for codecvt_byname&lt;wchar_t, char, __mbstate_t&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for codecvt_byname&lt;wchar_t, char, __mbstate_t&gt;</primary></indexterm>typeinfo for codecvt_byname&lt;wchar_t, char, __mbstate_t&gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>codecvt_byname&lt;wchar_t, char, __mbstate_t&gt;::~codecvt_byname()</primary></indexterm>codecvt_byname&lt;wchar_t, char, __mbstate_t&gt;::~codecvt_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>codecvt_byname&lt;wchar_t, char, __mbstate_t&gt;::~codecvt_byname()</primary></indexterm>codecvt_byname&lt;wchar_t, char, __mbstate_t&gt;::~codecvt_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;wchar_t, char, __mbstate_t&gt;::do_out(__mbstate_t&, wchar_t const*, wchar_t const*, wchar_t const*&, char*, char*, char*&) const</primary></indexterm>codecvt&lt;wchar_t, char, __mbstate_t&gt;::do_out(__mbstate_t&, wchar_t const*, wchar_t const*, wchar_t const*&, char*, char*, char*&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;wchar_t, char, __mbstate_t&gt;::do_unshift(__mbstate_t&, char*, char*, char*&) const</primary></indexterm>codecvt&lt;wchar_t, char, __mbstate_t&gt;::do_unshift(__mbstate_t&, char*, char*, char*&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;wchar_t, char, __mbstate_t&gt;::do_in(__mbstate_t&, char const*, char const*, char const*&, wchar_t*, wchar_t*, wchar_t*&) const</primary></indexterm>codecvt&lt;wchar_t, char, __mbstate_t&gt;::do_in(__mbstate_t&, char const*, char const*, char const*&, wchar_t*, wchar_t*, wchar_t*&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;wchar_t, char, __mbstate_t&gt;::do_encoding() const</primary></indexterm>codecvt&lt;wchar_t, char, __mbstate_t&gt;::do_encoding() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;wchar_t, char, __mbstate_t&gt;::do_always_noconv() const</primary></indexterm>codecvt&lt;wchar_t, char, __mbstate_t&gt;::do_always_noconv() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>See The Architecture Specific Specification</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;wchar_t, char, __mbstate_t&gt;::do_max_length() const</primary></indexterm>codecvt&lt;wchar_t, char, __mbstate_t&gt;::do_max_length() const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::codecvt_byname&lt;wchar_t, char, __mbstate_t&gt;  class
is described by <XREF LINKEND="rtti-24061">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24061">
<TITLE>typeinfo for codecvt_byname&lt;wchar_t, char, __mbstate_t&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for codecvt_byname&lt;wchar_t, char, __mbstate_t&gt;</primary></indexterm>typeinfo name for codecvt_byname&lt;wchar_t, char, __mbstate_t&gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Class data for collate_byname&lt;wchar_t&gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::collate_byname&lt;wchar_t&gt; class
is described by <XREF LINKEND="cls-24256-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24256-0">
<TITLE>Primary vtable for collate_byname&lt;wchar_t&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for collate_byname&lt;wchar_t&gt;</primary></indexterm>typeinfo for collate_byname&lt;wchar_t&gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>collate_byname&lt;wchar_t&gt;::~collate_byname()</primary></indexterm>collate_byname&lt;wchar_t&gt;::~collate_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>collate_byname&lt;wchar_t&gt;::~collate_byname()</primary></indexterm>collate_byname&lt;wchar_t&gt;::~collate_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>collate&lt;wchar_t&gt;::do_compare(wchar_t const*, wchar_t const*, wchar_t const*, wchar_t const*) const</primary></indexterm>collate&lt;wchar_t&gt;::do_compare(wchar_t const*, wchar_t const*, wchar_t const*, wchar_t const*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>collate&lt;wchar_t&gt;::do_transform(wchar_t const*, wchar_t const*) const</primary></indexterm>collate&lt;wchar_t&gt;::do_transform(wchar_t const*, wchar_t const*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>collate&lt;wchar_t&gt;::do_hash(wchar_t const*, wchar_t const*) const</primary></indexterm>collate&lt;wchar_t&gt;::do_hash(wchar_t const*, wchar_t const*) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::collate_byname&lt;wchar_t&gt;  class
is described by <XREF LINKEND="rtti-24060">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24060">
<TITLE>typeinfo for collate_byname&lt;wchar_t&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for collate_byname&lt;wchar_t&gt;</primary></indexterm>typeinfo name for collate_byname&lt;wchar_t&gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class codecvt_byname&lt;wchar_t, char, __mbstate_t&gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::codecvt_byname&lt;wchar_t, char, __mbstate_t&gt; specified in <XREF linkend="tbl-libstdcxx-clavz-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clavz-ints">
<TITLE>libstdcxx - Class codecvt_byname&lt;wchar_t, char, __mbstate_t&gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>codecvt_byname&lt;wchar_t, char, __mbstate_t&gt;::~codecvt_byname()</primary></indexterm>codecvt_byname&lt;wchar_t, char, __mbstate_t&gt;::~codecvt_byname()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>codecvt_byname&lt;wchar_t, char, __mbstate_t&gt;::~codecvt_byname()</primary></indexterm>codecvt_byname&lt;wchar_t, char, __mbstate_t&gt;::~codecvt_byname()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>codecvt_byname&lt;wchar_t, char, __mbstate_t&gt;::~codecvt_byname()</primary></indexterm>codecvt_byname&lt;wchar_t, char, __mbstate_t&gt;::~codecvt_byname()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>collate_byname&lt;wchar_t&gt;::~collate_byname()</primary></indexterm>collate_byname&lt;wchar_t&gt;::~collate_byname()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>collate_byname&lt;wchar_t&gt;::~collate_byname()</primary></indexterm>collate_byname&lt;wchar_t&gt;::~collate_byname()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>collate_byname&lt;wchar_t&gt;::~collate_byname()</primary></indexterm>collate_byname&lt;wchar_t&gt;::~collate_byname()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::codecvt_byname&lt;wchar_t, char, __mbstate_t&gt; specified in <XREF linkend="tbl-libstdcxx-clavz-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clavz-data">
<TITLE>libstdcxx - Class codecvt_byname&lt;wchar_t, char, __mbstate_t&gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for codecvt_byname&lt;wchar_t, char, __mbstate_t&gt;</primary></indexterm>typeinfo for codecvt_byname&lt;wchar_t, char, __mbstate_t&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for collate_byname&lt;wchar_t&gt;</primary></indexterm>typeinfo for collate_byname&lt;wchar_t&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for codecvt_byname&lt;wchar_t, char, __mbstate_t&gt;</primary></indexterm>typeinfo name for codecvt_byname&lt;wchar_t, char, __mbstate_t&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for collate_byname&lt;wchar_t&gt;</primary></indexterm>typeinfo name for collate_byname&lt;wchar_t&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for codecvt_byname&lt;wchar_t, char, __mbstate_t&gt;</primary></indexterm>vtable for codecvt_byname&lt;wchar_t, char, __mbstate_t&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for collate_byname&lt;wchar_t&gt;</primary></indexterm>vtable for collate_byname&lt;wchar_t&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::collate<char> -->
<SECT2>
<!--libgroup-->
<TITLE>Class collate&lt;char&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for collate&lt;char&gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::collate&lt;char&gt; class
is described by <XREF LINKEND="cls-24293-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24293-0">
<TITLE>Primary vtable for collate&lt;char&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for collate&lt;char&gt;</primary></indexterm>typeinfo for collate&lt;char&gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>collate&lt;char&gt;::~collate()</primary></indexterm>collate&lt;char&gt;::~collate()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>collate&lt;char&gt;::~collate()</primary></indexterm>collate&lt;char&gt;::~collate()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>collate&lt;char&gt;::do_compare(char const*, char const*, char const*, char const*) const</primary></indexterm>collate&lt;char&gt;::do_compare(char const*, char const*, char const*, char const*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>collate&lt;char&gt;::do_transform(char const*, char const*) const</primary></indexterm>collate&lt;char&gt;::do_transform(char const*, char const*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>collate&lt;char&gt;::do_hash(char const*, char const*) const</primary></indexterm>collate&lt;char&gt;::do_hash(char const*, char const*) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::collate&lt;char&gt;  class
is described by <XREF LINKEND="rtti-24021">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24021">
<TITLE>typeinfo for collate&lt;char&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for collate&lt;char&gt;</primary></indexterm>typeinfo name for collate&lt;char&gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class collate&lt;char&gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::collate&lt;char&gt; specified in <XREF linkend="tbl-libstdcxx-clawa-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clawa-ints">
<TITLE>libstdcxx - Class collate&lt;char&gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>collate&lt;char&gt;::_M_compare(char const*, char const*) const</primary></indexterm>collate&lt;char&gt;::_M_compare(char const*, char const*) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>collate&lt;char&gt;::do_compare(char const*, char const*, char const*, char const*) const</primary></indexterm>collate&lt;char&gt;::do_compare(char const*, char const*, char const*, char const*) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>collate&lt;char&gt;::do_transform(char const*, char const*) const</primary></indexterm>collate&lt;char&gt;::do_transform(char const*, char const*) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>collate&lt;char&gt;::hash(char const*, char const*) const</primary></indexterm>collate&lt;char&gt;::hash(char const*, char const*) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>collate&lt;char&gt;::compare(char const*, char const*, char const*, char const*) const</primary></indexterm>collate&lt;char&gt;::compare(char const*, char const*, char const*, char const*) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>collate&lt;char&gt;::do_hash(char const*, char const*) const</primary></indexterm>collate&lt;char&gt;::do_hash(char const*, char const*) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>collate&lt;char&gt;::transform(char const*, char const*) const</primary></indexterm>collate&lt;char&gt;::transform(char const*, char const*) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>collate&lt;char&gt;::~collate()</primary></indexterm>collate&lt;char&gt;::~collate()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>collate&lt;char&gt;::~collate()</primary></indexterm>collate&lt;char&gt;::~collate()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>collate&lt;char&gt;::~collate()</primary></indexterm>collate&lt;char&gt;::~collate()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::collate&lt;char&gt; specified in <XREF linkend="tbl-libstdcxx-clawa-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clawa-data">
<TITLE>libstdcxx - Class collate&lt;char&gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>guard variable for collate&lt;char&gt;::id</primary></indexterm>guard variable for collate&lt;char&gt;::id(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>collate&lt;char&gt;::id</primary></indexterm>collate&lt;char&gt;::id(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for collate&lt;char&gt;</primary></indexterm>typeinfo for collate&lt;char&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for collate&lt;char&gt;</primary></indexterm>typeinfo name for collate&lt;char&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for collate&lt;char&gt;</primary></indexterm>vtable for collate&lt;char&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::collate<wchar_t> -->
<SECT2>
<!--libgroup-->
<TITLE>Class collate&lt;wchar_t&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for collate&lt;wchar_t&gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::collate&lt;wchar_t&gt; class
is described by <XREF LINKEND="cls-24292-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24292-0">
<TITLE>Primary vtable for collate&lt;wchar_t&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for collate&lt;wchar_t&gt;</primary></indexterm>typeinfo for collate&lt;wchar_t&gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>collate&lt;wchar_t&gt;::~collate()</primary></indexterm>collate&lt;wchar_t&gt;::~collate()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>collate&lt;wchar_t&gt;::~collate()</primary></indexterm>collate&lt;wchar_t&gt;::~collate()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>collate&lt;wchar_t&gt;::do_compare(wchar_t const*, wchar_t const*, wchar_t const*, wchar_t const*) const</primary></indexterm>collate&lt;wchar_t&gt;::do_compare(wchar_t const*, wchar_t const*, wchar_t const*, wchar_t const*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>collate&lt;wchar_t&gt;::do_transform(wchar_t const*, wchar_t const*) const</primary></indexterm>collate&lt;wchar_t&gt;::do_transform(wchar_t const*, wchar_t const*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>collate&lt;wchar_t&gt;::do_hash(wchar_t const*, wchar_t const*) const</primary></indexterm>collate&lt;wchar_t&gt;::do_hash(wchar_t const*, wchar_t const*) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::collate&lt;wchar_t&gt;  class
is described by <XREF LINKEND="rtti-24029">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24029">
<TITLE>typeinfo for collate&lt;wchar_t&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for collate&lt;wchar_t&gt;</primary></indexterm>typeinfo name for collate&lt;wchar_t&gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class collate&lt;wchar_t&gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::collate&lt;wchar_t&gt; specified in <XREF linkend="tbl-libstdcxx-clawb-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clawb-ints">
<TITLE>libstdcxx - Class collate&lt;wchar_t&gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>collate&lt;wchar_t&gt;::_M_compare(wchar_t const*, wchar_t const*) const</primary></indexterm>collate&lt;wchar_t&gt;::_M_compare(wchar_t const*, wchar_t const*) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>collate&lt;wchar_t&gt;::do_compare(wchar_t const*, wchar_t const*, wchar_t const*, wchar_t const*) const</primary></indexterm>collate&lt;wchar_t&gt;::do_compare(wchar_t const*, wchar_t const*, wchar_t const*, wchar_t const*) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>collate&lt;wchar_t&gt;::do_transform(wchar_t const*, wchar_t const*) const</primary></indexterm>collate&lt;wchar_t&gt;::do_transform(wchar_t const*, wchar_t const*) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>collate&lt;wchar_t&gt;::hash(wchar_t const*, wchar_t const*) const</primary></indexterm>collate&lt;wchar_t&gt;::hash(wchar_t const*, wchar_t const*) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>collate&lt;wchar_t&gt;::compare(wchar_t const*, wchar_t const*, wchar_t const*, wchar_t const*) const</primary></indexterm>collate&lt;wchar_t&gt;::compare(wchar_t const*, wchar_t const*, wchar_t const*, wchar_t const*) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>collate&lt;wchar_t&gt;::do_hash(wchar_t const*, wchar_t const*) const</primary></indexterm>collate&lt;wchar_t&gt;::do_hash(wchar_t const*, wchar_t const*) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>collate&lt;wchar_t&gt;::transform(wchar_t const*, wchar_t const*) const</primary></indexterm>collate&lt;wchar_t&gt;::transform(wchar_t const*, wchar_t const*) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>collate&lt;wchar_t&gt;::~collate()</primary></indexterm>collate&lt;wchar_t&gt;::~collate()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>collate&lt;wchar_t&gt;::~collate()</primary></indexterm>collate&lt;wchar_t&gt;::~collate()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>collate&lt;wchar_t&gt;::~collate()</primary></indexterm>collate&lt;wchar_t&gt;::~collate()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::collate&lt;wchar_t&gt; specified in <XREF linkend="tbl-libstdcxx-clawb-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clawb-data">
<TITLE>libstdcxx - Class collate&lt;wchar_t&gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>guard variable for collate&lt;wchar_t&gt;::id</primary></indexterm>guard variable for collate&lt;wchar_t&gt;::id(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>collate&lt;wchar_t&gt;::id</primary></indexterm>collate&lt;wchar_t&gt;::id(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for collate&lt;wchar_t&gt;</primary></indexterm>typeinfo for collate&lt;wchar_t&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for collate&lt;wchar_t&gt;</primary></indexterm>typeinfo name for collate&lt;wchar_t&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for collate&lt;wchar_t&gt;</primary></indexterm>vtable for collate&lt;wchar_t&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::collate_byname<char> -->
<SECT2>
<!--libgroup-->
<TITLE>Class collate_byname&lt;char&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for collate_byname&lt;char&gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::collate_byname&lt;char&gt; class
is described by <XREF LINKEND="cls-24270-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24270-0">
<TITLE>Primary vtable for collate_byname&lt;char&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for collate_byname&lt;char&gt;</primary></indexterm>typeinfo for collate_byname&lt;char&gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>collate_byname&lt;char&gt;::~collate_byname()</primary></indexterm>collate_byname&lt;char&gt;::~collate_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>collate_byname&lt;char&gt;::~collate_byname()</primary></indexterm>collate_byname&lt;char&gt;::~collate_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>collate&lt;char&gt;::do_compare(char const*, char const*, char const*, char const*) const</primary></indexterm>collate&lt;char&gt;::do_compare(char const*, char const*, char const*, char const*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>collate&lt;char&gt;::do_transform(char const*, char const*) const</primary></indexterm>collate&lt;char&gt;::do_transform(char const*, char const*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>collate&lt;char&gt;::do_hash(char const*, char const*) const</primary></indexterm>collate&lt;char&gt;::do_hash(char const*, char const*) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::collate_byname&lt;char&gt;  class
is described by <XREF LINKEND="rtti-24072">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24072">
<TITLE>typeinfo for collate_byname&lt;char&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for collate_byname&lt;char&gt;</primary></indexterm>typeinfo name for collate_byname&lt;char&gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class collate_byname&lt;char&gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::collate_byname&lt;char&gt; specified in <XREF linkend="tbl-libstdcxx-clawc-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clawc-ints">
<TITLE>libstdcxx - Class collate_byname&lt;char&gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>collate_byname&lt;char&gt;::~collate_byname()</primary></indexterm>collate_byname&lt;char&gt;::~collate_byname()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>collate_byname&lt;char&gt;::~collate_byname()</primary></indexterm>collate_byname&lt;char&gt;::~collate_byname()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>collate_byname&lt;char&gt;::~collate_byname()</primary></indexterm>collate_byname&lt;char&gt;::~collate_byname()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::collate_byname&lt;char&gt; specified in <XREF linkend="tbl-libstdcxx-clawc-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clawc-data">
<TITLE>libstdcxx - Class collate_byname&lt;char&gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for collate_byname&lt;char&gt;</primary></indexterm>typeinfo for collate_byname&lt;char&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for collate_byname&lt;char&gt;</primary></indexterm>typeinfo name for collate_byname&lt;char&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for collate_byname&lt;char&gt;</primary></indexterm>vtable for collate_byname&lt;char&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::collate_byname<wchar_t> -->
<SECT2>
<!--libgroup-->
<TITLE>Class collate_byname&lt;wchar_t&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for Class collate_byname&lt;wchar_t&gt;</TITLE>
<PARA>
No external methods are defined for libstdcxx - Class std::collate_byname&lt;wchar_t&gt;
in this part of the specification. See also the relevant architecture specific part of this specification.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::time_base -->
<SECT2>
<!--libgroup-->
<TITLE>Class time_base</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for time_base</TITLE>
<PARA>
</PARA>
<PARA>
The Run Time Type Information for the std::time_base  class
is described by <XREF LINKEND="rtti-24016">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24016">
<TITLE>typeinfo for time_base</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__class_type_info</primary></indexterm>vtable for __cxxabiv1::__class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for time_base</primary></indexterm>typeinfo name for time_base</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class time_base</TITLE>
<PARA>
No external methods are defined for libstdcxx - Class std::time_base
in this part of the specification. See also the relevant architecture specific part of this specification.
</PARA>
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::time_base specified in <XREF linkend="tbl-libstdcxx-clawd-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clawd-data">
<TITLE>libstdcxx - Class time_base Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for time_base</primary></indexterm>typeinfo for time_base(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for time_base</primary></indexterm>typeinfo name for time_base(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::time_get_byname<char, std::istreambuf_iterator<char, std::char_traits<char> > > -->
<SECT2>
<!--libgroup-->
<TITLE>Class time_get_byname&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for time_get_byname&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::time_get_byname&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; class
is described by <XREF LINKEND="cls-24273-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24273-0">
<TITLE>Primary vtable for time_get_byname&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for time_get_byname&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</primary></indexterm>typeinfo for time_get_byname&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_get_byname&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~time_get_byname()</primary></indexterm>time_get_byname&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~time_get_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_get_byname&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~time_get_byname()</primary></indexterm>time_get_byname&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~time_get_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_date_order() const</primary></indexterm>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_date_order() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get_time(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</primary></indexterm>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get_time(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get_date(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</primary></indexterm>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get_date(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get_weekday(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</primary></indexterm>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get_weekday(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get_monthname(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</primary></indexterm>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get_monthname(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get_year(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</primary></indexterm>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get_year(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::time_get_byname&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;  class
is described by <XREF LINKEND="rtti-24075">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24075">
<TITLE>typeinfo for time_get_byname&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for time_get_byname&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</primary></indexterm>typeinfo name for time_get_byname&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class time_get_byname&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::time_get_byname&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clawe-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clawe-ints">
<TITLE>libstdcxx - Class time_get_byname&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_get_byname&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~time_get_byname()</primary></indexterm>time_get_byname&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~time_get_byname()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_get_byname&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~time_get_byname()</primary></indexterm>time_get_byname&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~time_get_byname()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_get_byname&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~time_get_byname()</primary></indexterm>time_get_byname&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~time_get_byname()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::time_get_byname&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clawe-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clawe-data">
<TITLE>libstdcxx - Class time_get_byname&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for time_get_byname&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</primary></indexterm>typeinfo for time_get_byname&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for time_get_byname&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</primary></indexterm>typeinfo name for time_get_byname&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for time_get_byname&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</primary></indexterm>vtable for time_get_byname&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::time_get_byname<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > -->
<SECT2>
<!--libgroup-->
<TITLE>Class time_get_byname&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for time_get_byname&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::time_get_byname&lt;wchar_t, std::istreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; &gt; class
is described by <XREF LINKEND="cls-24259-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24259-0">
<TITLE>Primary vtable for time_get_byname&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for time_get_byname&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</primary></indexterm>typeinfo for time_get_byname&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_get_byname&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~time_get_byname()</primary></indexterm>time_get_byname&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~time_get_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_get_byname&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~time_get_byname()</primary></indexterm>time_get_byname&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~time_get_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_date_order() const</primary></indexterm>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_date_order() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get_time(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</primary></indexterm>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get_time(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get_date(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</primary></indexterm>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get_date(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get_weekday(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</primary></indexterm>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get_weekday(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get_monthname(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</primary></indexterm>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get_monthname(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get_year(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</primary></indexterm>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get_year(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::time_get_byname&lt;wchar_t, std::istreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; &gt;  class
is described by <XREF LINKEND="rtti-24063">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24063">
<TITLE>typeinfo for time_get_byname&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for time_get_byname&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</primary></indexterm>typeinfo name for time_get_byname&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class time_get_byname&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::time_get_byname&lt;wchar_t, std::istreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clawf-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clawf-ints">
<TITLE>libstdcxx - Class time_get_byname&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_get_byname&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~time_get_byname()</primary></indexterm>time_get_byname&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~time_get_byname()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_get_byname&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~time_get_byname()</primary></indexterm>time_get_byname&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~time_get_byname()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_get_byname&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~time_get_byname()</primary></indexterm>time_get_byname&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~time_get_byname()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::time_get_byname&lt;wchar_t, std::istreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clawf-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clawf-data">
<TITLE>libstdcxx - Class time_get_byname&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for time_get_byname&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</primary></indexterm>typeinfo for time_get_byname&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for time_get_byname&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</primary></indexterm>typeinfo name for time_get_byname&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for time_get_byname&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</primary></indexterm>vtable for time_get_byname&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::time_put_byname<char, std::ostreambuf_iterator<char, std::char_traits<char> > > -->
<SECT2>
<!--libgroup-->
<TITLE>Class time_put_byname&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for time_put_byname&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::time_put_byname&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; class
is described by <XREF LINKEND="cls-24275-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24275-0">
<TITLE>Primary vtable for time_put_byname&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for time_put_byname&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</primary></indexterm>typeinfo for time_put_byname&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_put_byname&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~time_put_byname()</primary></indexterm>time_put_byname&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~time_put_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_put_byname&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~time_put_byname()</primary></indexterm>time_put_byname&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~time_put_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, tm const*, char, char) const</primary></indexterm>time_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, tm const*, char, char) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::time_put_byname&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;  class
is described by <XREF LINKEND="rtti-24076">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24076">
<TITLE>typeinfo for time_put_byname&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for time_put_byname&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</primary></indexterm>typeinfo name for time_put_byname&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class time_put_byname&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::time_put_byname&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clawg-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clawg-ints">
<TITLE>libstdcxx - Class time_put_byname&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_put_byname&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~time_put_byname()</primary></indexterm>time_put_byname&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~time_put_byname()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_put_byname&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~time_put_byname()</primary></indexterm>time_put_byname&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~time_put_byname()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_put_byname&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~time_put_byname()</primary></indexterm>time_put_byname&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~time_put_byname()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::time_put_byname&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clawg-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clawg-data">
<TITLE>libstdcxx - Class time_put_byname&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for time_put_byname&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</primary></indexterm>typeinfo for time_put_byname&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for time_put_byname&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</primary></indexterm>typeinfo name for time_put_byname&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for time_put_byname&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</primary></indexterm>vtable for time_put_byname&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::time_put_byname<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > -->
<SECT2>
<!--libgroup-->
<TITLE>Class time_put_byname&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for time_put_byname&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::time_put_byname&lt;wchar_t, std::ostreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; &gt; class
is described by <XREF LINKEND="cls-24261-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24261-0">
<TITLE>Primary vtable for time_put_byname&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for time_put_byname&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</primary></indexterm>typeinfo for time_put_byname&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_put_byname&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~time_put_byname()</primary></indexterm>time_put_byname&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~time_put_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_put_byname&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~time_put_byname()</primary></indexterm>time_put_byname&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~time_put_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, tm const*, char, char) const</primary></indexterm>time_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, tm const*, char, char) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::time_put_byname&lt;wchar_t, std::ostreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; &gt;  class
is described by <XREF LINKEND="rtti-24064">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24064">
<TITLE>typeinfo for time_put_byname&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for time_put_byname&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</primary></indexterm>typeinfo name for time_put_byname&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class time_put_byname&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::time_put_byname&lt;wchar_t, std::ostreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clawh-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clawh-ints">
<TITLE>libstdcxx - Class time_put_byname&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_put_byname&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~time_put_byname()</primary></indexterm>time_put_byname&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~time_put_byname()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_put_byname&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~time_put_byname()</primary></indexterm>time_put_byname&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~time_put_byname()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_put_byname&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~time_put_byname()</primary></indexterm>time_put_byname&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~time_put_byname()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::time_put_byname&lt;wchar_t, std::ostreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clawh-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clawh-data">
<TITLE>libstdcxx - Class time_put_byname&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for time_put_byname&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</primary></indexterm>typeinfo for time_put_byname&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for time_put_byname&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</primary></indexterm>typeinfo name for time_put_byname&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for time_put_byname&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</primary></indexterm>vtable for time_put_byname&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > > -->
<SECT2>
<!--libgroup-->
<TITLE>Class time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::time_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; class
is described by <XREF LINKEND="cls-24274-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24274-0">
<TITLE>Primary vtable for time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</primary></indexterm>typeinfo for time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~time_get()</primary></indexterm>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~time_get()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~time_get()</primary></indexterm>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~time_get()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_date_order() const</primary></indexterm>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_date_order() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get_time(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</primary></indexterm>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get_time(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get_date(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</primary></indexterm>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get_date(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get_weekday(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</primary></indexterm>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get_weekday(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get_monthname(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</primary></indexterm>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get_monthname(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get_year(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</primary></indexterm>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get_year(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::time_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clawi-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clawi-ints">
<TITLE>libstdcxx - Class time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::date_order() const</primary></indexterm>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::date_order() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get_date(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</primary></indexterm>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get_date(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get_time(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</primary></indexterm>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get_time(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get_year(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</primary></indexterm>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get_year(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::get_weekday(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</primary></indexterm>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::get_weekday(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_date_order() const</primary></indexterm>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_date_order() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::get_monthname(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</primary></indexterm>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::get_monthname(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get_weekday(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</primary></indexterm>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get_weekday(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get_monthname(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</primary></indexterm>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get_monthname(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::_M_extract_via_format(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, tm*, char const*) const</primary></indexterm>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::_M_extract_via_format(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, tm*, char const*) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::get_date(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</primary></indexterm>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::get_date(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::get_time(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</primary></indexterm>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::get_time(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::get_year(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</primary></indexterm>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::get_year(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~time_get()</primary></indexterm>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~time_get()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~time_get()</primary></indexterm>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~time_get()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~time_get()</primary></indexterm>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~time_get()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::time_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clawi-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clawi-data">
<TITLE>libstdcxx - Class time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>guard variable for time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::id</primary></indexterm>guard variable for time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::id(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::id</primary></indexterm>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::id(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</primary></indexterm>typeinfo for time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</primary></indexterm>typeinfo name for time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</primary></indexterm>vtable for time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > -->
<SECT2>
<!--libgroup-->
<TITLE>Class time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::time_get&lt;wchar_t, std::istreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; &gt; class
is described by <XREF LINKEND="cls-24260-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24260-0">
<TITLE>Primary vtable for time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</primary></indexterm>typeinfo for time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~time_get()</primary></indexterm>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~time_get()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~time_get()</primary></indexterm>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~time_get()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_date_order() const</primary></indexterm>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_date_order() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get_time(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</primary></indexterm>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get_time(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get_date(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</primary></indexterm>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get_date(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get_weekday(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</primary></indexterm>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get_weekday(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get_monthname(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</primary></indexterm>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get_monthname(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get_year(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</primary></indexterm>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get_year(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::time_get&lt;wchar_t, std::istreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clawj-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clawj-ints">
<TITLE>libstdcxx - Class time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::date_order() const</primary></indexterm>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::date_order() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get_date(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</primary></indexterm>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get_date(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get_time(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</primary></indexterm>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get_time(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get_year(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</primary></indexterm>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get_year(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::get_weekday(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</primary></indexterm>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::get_weekday(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_date_order() const</primary></indexterm>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_date_order() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::get_monthname(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</primary></indexterm>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::get_monthname(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get_weekday(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</primary></indexterm>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get_weekday(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get_monthname(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</primary></indexterm>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get_monthname(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::_M_extract_via_format(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, tm*, wchar_t const*) const</primary></indexterm>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::_M_extract_via_format(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, tm*, wchar_t const*) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::get_date(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</primary></indexterm>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::get_date(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::get_time(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</primary></indexterm>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::get_time(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::get_year(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const</primary></indexterm>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::get_year(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, tm*) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~time_get()</primary></indexterm>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~time_get()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~time_get()</primary></indexterm>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~time_get()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~time_get()</primary></indexterm>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~time_get()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::time_get&lt;wchar_t, std::istreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clawj-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clawj-data">
<TITLE>libstdcxx - Class time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>guard variable for time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::id</primary></indexterm>guard variable for time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::id(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::id</primary></indexterm>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::id(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</primary></indexterm>typeinfo for time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</primary></indexterm>typeinfo name for time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</primary></indexterm>vtable for time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::time_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > > -->
<SECT2>
<!--libgroup-->
<TITLE>Class time_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for time_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::time_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; class
is described by <XREF LINKEND="cls-24276-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24276-0">
<TITLE>Primary vtable for time_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for time_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</primary></indexterm>typeinfo for time_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~time_put()</primary></indexterm>time_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~time_put()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~time_put()</primary></indexterm>time_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~time_put()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, tm const*, char, char) const</primary></indexterm>time_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, tm const*, char, char) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::time_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;  class
is described by <XREF LINKEND="rtti-24017">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24017">
<TITLE>typeinfo for time_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for time_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</primary></indexterm>typeinfo name for time_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>flags:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>8</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>basetype:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for locale::facet</primary></indexterm>typeinfo for locale::facet</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>2</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>basetype:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for time_base</primary></indexterm>typeinfo for time_base</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>2</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class time_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::time_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clawk-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clawk-ints">
<TITLE>libstdcxx - Class time_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, tm const*, char const*, char const*) const</primary></indexterm>time_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, tm const*, char const*, char const*) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, tm const*, char, char) const</primary></indexterm>time_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, tm const*, char, char) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, tm const*, char, char) const</primary></indexterm>time_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, tm const*, char, char) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~time_put()</primary></indexterm>time_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~time_put()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~time_put()</primary></indexterm>time_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~time_put()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~time_put()</primary></indexterm>time_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~time_put()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::time_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clawk-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clawk-data">
<TITLE>libstdcxx - Class time_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>guard variable for time_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::id</primary></indexterm>guard variable for time_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::id(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::id</primary></indexterm>time_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::id(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for time_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</primary></indexterm>typeinfo for time_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for time_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</primary></indexterm>typeinfo name for time_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for time_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</primary></indexterm>vtable for time_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::time_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > -->
<SECT2>
<!--libgroup-->
<TITLE>Class time_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for time_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::time_put&lt;wchar_t, std::ostreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; &gt; class
is described by <XREF LINKEND="cls-24262-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24262-0">
<TITLE>Primary vtable for time_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for time_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</primary></indexterm>typeinfo for time_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~time_put()</primary></indexterm>time_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~time_put()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~time_put()</primary></indexterm>time_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~time_put()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>time_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, tm const*, char, char) const</primary></indexterm>time_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, tm const*, char, char) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::time_put&lt;wchar_t, std::ostreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; &gt;  class
is described by <XREF LINKEND="rtti-24025">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24025">
<TITLE>typeinfo for time_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for time_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</primary></indexterm>typeinfo name for time_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>flags:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>8</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>basetype:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for locale::facet</primary></indexterm>typeinfo for locale::facet</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>2</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>basetype:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for time_base</primary></indexterm>typeinfo for time_base</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>2</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class time_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::time_put&lt;wchar_t, std::ostreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clawl-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clawl-ints">
<TITLE>libstdcxx - Class time_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, tm const*, wchar_t const*, wchar_t const*) const</primary></indexterm>time_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, tm const*, wchar_t const*, wchar_t const*) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, tm const*, char, char) const</primary></indexterm>time_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, tm const*, char, char) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, tm const*, char, char) const</primary></indexterm>time_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, tm const*, char, char) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~time_put()</primary></indexterm>time_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~time_put()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~time_put()</primary></indexterm>time_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~time_put()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~time_put()</primary></indexterm>time_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~time_put()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::time_put&lt;wchar_t, std::ostreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clawl-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clawl-data">
<TITLE>libstdcxx - Class time_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>guard variable for time_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::id</primary></indexterm>guard variable for time_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::id(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::id</primary></indexterm>time_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::id(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for time_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</primary></indexterm>typeinfo for time_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for time_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</primary></indexterm>typeinfo name for time_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for time_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</primary></indexterm>vtable for time_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::moneypunct<char, false> -->
<SECT2>
<!--libgroup-->
<TITLE>Class moneypunct&lt;char, false&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for moneypunct&lt;char, false&gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::moneypunct&lt;char, false&gt; class
is described by <XREF LINKEND="cls-24288-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24288-0">
<TITLE>Primary vtable for moneypunct&lt;char, false&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for moneypunct&lt;char, false&gt;</primary></indexterm>typeinfo for moneypunct&lt;char, false&gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::~moneypunct()</primary></indexterm>moneypunct&lt;char, false&gt;::~moneypunct()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::~moneypunct()</primary></indexterm>moneypunct&lt;char, false&gt;::~moneypunct()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::do_decimal_point() const</primary></indexterm>moneypunct&lt;char, false&gt;::do_decimal_point() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::do_thousands_sep() const</primary></indexterm>moneypunct&lt;char, false&gt;::do_thousands_sep() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::do_grouping() const</primary></indexterm>moneypunct&lt;char, false&gt;::do_grouping() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::do_curr_symbol() const</primary></indexterm>moneypunct&lt;char, false&gt;::do_curr_symbol() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::do_positive_sign() const</primary></indexterm>moneypunct&lt;char, false&gt;::do_positive_sign() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::do_negative_sign() const</primary></indexterm>moneypunct&lt;char, false&gt;::do_negative_sign() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::do_frac_digits() const</primary></indexterm>moneypunct&lt;char, false&gt;::do_frac_digits() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::do_pos_format() const</primary></indexterm>moneypunct&lt;char, false&gt;::do_pos_format() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::do_neg_format() const</primary></indexterm>moneypunct&lt;char, false&gt;::do_neg_format() const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class moneypunct&lt;char, false&gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::moneypunct&lt;char, false&gt; specified in <XREF linkend="tbl-libstdcxx-clawm-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clawm-ints">
<TITLE>libstdcxx - Class moneypunct&lt;char, false&gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::neg_format() const</primary></indexterm>moneypunct&lt;char, false&gt;::neg_format() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::pos_format() const</primary></indexterm>moneypunct&lt;char, false&gt;::pos_format() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::curr_symbol() const</primary></indexterm>moneypunct&lt;char, false&gt;::curr_symbol() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::do_grouping() const</primary></indexterm>moneypunct&lt;char, false&gt;::do_grouping() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::frac_digits() const</primary></indexterm>moneypunct&lt;char, false&gt;::frac_digits() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::decimal_point() const</primary></indexterm>moneypunct&lt;char, false&gt;::decimal_point() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::do_neg_format() const</primary></indexterm>moneypunct&lt;char, false&gt;::do_neg_format() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::do_pos_format() const</primary></indexterm>moneypunct&lt;char, false&gt;::do_pos_format() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::negative_sign() const</primary></indexterm>moneypunct&lt;char, false&gt;::negative_sign() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::positive_sign() const</primary></indexterm>moneypunct&lt;char, false&gt;::positive_sign() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::thousands_sep() const</primary></indexterm>moneypunct&lt;char, false&gt;::thousands_sep() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::do_curr_symbol() const</primary></indexterm>moneypunct&lt;char, false&gt;::do_curr_symbol() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::do_frac_digits() const</primary></indexterm>moneypunct&lt;char, false&gt;::do_frac_digits() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::do_decimal_point() const</primary></indexterm>moneypunct&lt;char, false&gt;::do_decimal_point() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::do_negative_sign() const</primary></indexterm>moneypunct&lt;char, false&gt;::do_negative_sign() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::do_positive_sign() const</primary></indexterm>moneypunct&lt;char, false&gt;::do_positive_sign() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::do_thousands_sep() const</primary></indexterm>moneypunct&lt;char, false&gt;::do_thousands_sep() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::grouping() const</primary></indexterm>moneypunct&lt;char, false&gt;::grouping() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::_M_initialize_moneypunct(__locale_struct*, char const*)</primary></indexterm>moneypunct&lt;char, false&gt;::_M_initialize_moneypunct(__locale_struct*, char const*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::~moneypunct()</primary></indexterm>moneypunct&lt;char, false&gt;::~moneypunct()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::~moneypunct()</primary></indexterm>moneypunct&lt;char, false&gt;::~moneypunct()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::~moneypunct()</primary></indexterm>moneypunct&lt;char, false&gt;::~moneypunct()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::moneypunct&lt;char, false&gt; specified in <XREF linkend="tbl-libstdcxx-clawm-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clawm-data">
<TITLE>libstdcxx - Class moneypunct&lt;char, false&gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>guard variable for moneypunct&lt;char, false&gt;::id</primary></indexterm>guard variable for moneypunct&lt;char, false&gt;::id(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::id</primary></indexterm>moneypunct&lt;char, false&gt;::id(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::intl</primary></indexterm>moneypunct&lt;char, false&gt;::intl(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for moneypunct&lt;char, false&gt;</primary></indexterm>typeinfo for moneypunct&lt;char, false&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for moneypunct&lt;char, false&gt;</primary></indexterm>typeinfo name for moneypunct&lt;char, false&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for moneypunct&lt;char, false&gt;</primary></indexterm>vtable for moneypunct&lt;char, false&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::moneypunct<char, true> -->
<SECT2>
<!--libgroup-->
<TITLE>Class moneypunct&lt;char, true&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for moneypunct&lt;char, true&gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::moneypunct&lt;char, true&gt; class
is described by <XREF LINKEND="cls-24289-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24289-0">
<TITLE>Primary vtable for moneypunct&lt;char, true&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for moneypunct&lt;char, true&gt;</primary></indexterm>typeinfo for moneypunct&lt;char, true&gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::~moneypunct()</primary></indexterm>moneypunct&lt;char, true&gt;::~moneypunct()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::~moneypunct()</primary></indexterm>moneypunct&lt;char, true&gt;::~moneypunct()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::do_decimal_point() const</primary></indexterm>moneypunct&lt;char, true&gt;::do_decimal_point() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::do_thousands_sep() const</primary></indexterm>moneypunct&lt;char, true&gt;::do_thousands_sep() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::do_grouping() const</primary></indexterm>moneypunct&lt;char, true&gt;::do_grouping() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::do_curr_symbol() const</primary></indexterm>moneypunct&lt;char, true&gt;::do_curr_symbol() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::do_positive_sign() const</primary></indexterm>moneypunct&lt;char, true&gt;::do_positive_sign() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::do_negative_sign() const</primary></indexterm>moneypunct&lt;char, true&gt;::do_negative_sign() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::do_frac_digits() const</primary></indexterm>moneypunct&lt;char, true&gt;::do_frac_digits() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::do_pos_format() const</primary></indexterm>moneypunct&lt;char, true&gt;::do_pos_format() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::do_neg_format() const</primary></indexterm>moneypunct&lt;char, true&gt;::do_neg_format() const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class moneypunct&lt;char, true&gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::moneypunct&lt;char, true&gt; specified in <XREF linkend="tbl-libstdcxx-clawn-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clawn-ints">
<TITLE>libstdcxx - Class moneypunct&lt;char, true&gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::neg_format() const</primary></indexterm>moneypunct&lt;char, true&gt;::neg_format() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::pos_format() const</primary></indexterm>moneypunct&lt;char, true&gt;::pos_format() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::curr_symbol() const</primary></indexterm>moneypunct&lt;char, true&gt;::curr_symbol() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::do_grouping() const</primary></indexterm>moneypunct&lt;char, true&gt;::do_grouping() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::frac_digits() const</primary></indexterm>moneypunct&lt;char, true&gt;::frac_digits() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::decimal_point() const</primary></indexterm>moneypunct&lt;char, true&gt;::decimal_point() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::do_neg_format() const</primary></indexterm>moneypunct&lt;char, true&gt;::do_neg_format() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::do_pos_format() const</primary></indexterm>moneypunct&lt;char, true&gt;::do_pos_format() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::negative_sign() const</primary></indexterm>moneypunct&lt;char, true&gt;::negative_sign() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::positive_sign() const</primary></indexterm>moneypunct&lt;char, true&gt;::positive_sign() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::thousands_sep() const</primary></indexterm>moneypunct&lt;char, true&gt;::thousands_sep() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::do_curr_symbol() const</primary></indexterm>moneypunct&lt;char, true&gt;::do_curr_symbol() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::do_frac_digits() const</primary></indexterm>moneypunct&lt;char, true&gt;::do_frac_digits() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::do_decimal_point() const</primary></indexterm>moneypunct&lt;char, true&gt;::do_decimal_point() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::do_negative_sign() const</primary></indexterm>moneypunct&lt;char, true&gt;::do_negative_sign() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::do_positive_sign() const</primary></indexterm>moneypunct&lt;char, true&gt;::do_positive_sign() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::do_thousands_sep() const</primary></indexterm>moneypunct&lt;char, true&gt;::do_thousands_sep() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::grouping() const</primary></indexterm>moneypunct&lt;char, true&gt;::grouping() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::_M_initialize_moneypunct(__locale_struct*, char const*)</primary></indexterm>moneypunct&lt;char, true&gt;::_M_initialize_moneypunct(__locale_struct*, char const*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::~moneypunct()</primary></indexterm>moneypunct&lt;char, true&gt;::~moneypunct()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::~moneypunct()</primary></indexterm>moneypunct&lt;char, true&gt;::~moneypunct()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::~moneypunct()</primary></indexterm>moneypunct&lt;char, true&gt;::~moneypunct()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::moneypunct&lt;char, true&gt; specified in <XREF linkend="tbl-libstdcxx-clawn-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clawn-data">
<TITLE>libstdcxx - Class moneypunct&lt;char, true&gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>guard variable for moneypunct&lt;char, true&gt;::id</primary></indexterm>guard variable for moneypunct&lt;char, true&gt;::id(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::id</primary></indexterm>moneypunct&lt;char, true&gt;::id(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::intl</primary></indexterm>moneypunct&lt;char, true&gt;::intl(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for moneypunct&lt;char, true&gt;</primary></indexterm>typeinfo for moneypunct&lt;char, true&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for moneypunct&lt;char, true&gt;</primary></indexterm>typeinfo name for moneypunct&lt;char, true&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for moneypunct&lt;char, true&gt;</primary></indexterm>vtable for moneypunct&lt;char, true&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::moneypunct<wchar_t, false> -->
<SECT2>
<!--libgroup-->
<TITLE>Class moneypunct&lt;wchar_t, false&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for moneypunct&lt;wchar_t, false&gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::moneypunct&lt;wchar_t, false&gt; class
is described by <XREF LINKEND="cls-24286-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24286-0">
<TITLE>Primary vtable for moneypunct&lt;wchar_t, false&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for moneypunct&lt;wchar_t, false&gt;</primary></indexterm>typeinfo for moneypunct&lt;wchar_t, false&gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::~moneypunct()</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::~moneypunct()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::~moneypunct()</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::~moneypunct()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::do_decimal_point() const</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::do_decimal_point() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::do_thousands_sep() const</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::do_thousands_sep() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::do_grouping() const</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::do_grouping() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::do_curr_symbol() const</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::do_curr_symbol() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::do_positive_sign() const</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::do_positive_sign() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::do_negative_sign() const</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::do_negative_sign() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::do_frac_digits() const</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::do_frac_digits() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::do_pos_format() const</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::do_pos_format() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::do_neg_format() const</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::do_neg_format() const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class moneypunct&lt;wchar_t, false&gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::moneypunct&lt;wchar_t, false&gt; specified in <XREF linkend="tbl-libstdcxx-clawo-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clawo-ints">
<TITLE>libstdcxx - Class moneypunct&lt;wchar_t, false&gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::neg_format() const</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::neg_format() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::pos_format() const</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::pos_format() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::curr_symbol() const</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::curr_symbol() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::do_grouping() const</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::do_grouping() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::frac_digits() const</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::frac_digits() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::decimal_point() const</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::decimal_point() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::do_neg_format() const</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::do_neg_format() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::do_pos_format() const</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::do_pos_format() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::negative_sign() const</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::negative_sign() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::positive_sign() const</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::positive_sign() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::thousands_sep() const</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::thousands_sep() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::do_curr_symbol() const</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::do_curr_symbol() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::do_frac_digits() const</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::do_frac_digits() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::do_decimal_point() const</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::do_decimal_point() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::do_negative_sign() const</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::do_negative_sign() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::do_positive_sign() const</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::do_positive_sign() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::do_thousands_sep() const</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::do_thousands_sep() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::grouping() const</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::grouping() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::_M_initialize_moneypunct(__locale_struct*, char const*)</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::_M_initialize_moneypunct(__locale_struct*, char const*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::~moneypunct()</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::~moneypunct()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::~moneypunct()</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::~moneypunct()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::~moneypunct()</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::~moneypunct()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::moneypunct&lt;wchar_t, false&gt; specified in <XREF linkend="tbl-libstdcxx-clawo-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clawo-data">
<TITLE>libstdcxx - Class moneypunct&lt;wchar_t, false&gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>guard variable for moneypunct&lt;wchar_t, false&gt;::id</primary></indexterm>guard variable for moneypunct&lt;wchar_t, false&gt;::id(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::id</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::id(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::intl</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::intl(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for moneypunct&lt;wchar_t, false&gt;</primary></indexterm>typeinfo for moneypunct&lt;wchar_t, false&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for moneypunct&lt;wchar_t, false&gt;</primary></indexterm>typeinfo name for moneypunct&lt;wchar_t, false&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for moneypunct&lt;wchar_t, false&gt;</primary></indexterm>vtable for moneypunct&lt;wchar_t, false&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::moneypunct<wchar_t, true> -->
<SECT2>
<!--libgroup-->
<TITLE>Class moneypunct&lt;wchar_t, true&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for moneypunct&lt;wchar_t, true&gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::moneypunct&lt;wchar_t, true&gt; class
is described by <XREF LINKEND="cls-24287-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24287-0">
<TITLE>Primary vtable for moneypunct&lt;wchar_t, true&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for moneypunct&lt;wchar_t, true&gt;</primary></indexterm>typeinfo for moneypunct&lt;wchar_t, true&gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::~moneypunct()</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::~moneypunct()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::~moneypunct()</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::~moneypunct()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::do_decimal_point() const</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::do_decimal_point() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::do_thousands_sep() const</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::do_thousands_sep() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::do_grouping() const</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::do_grouping() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::do_curr_symbol() const</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::do_curr_symbol() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::do_positive_sign() const</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::do_positive_sign() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::do_negative_sign() const</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::do_negative_sign() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::do_frac_digits() const</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::do_frac_digits() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::do_pos_format() const</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::do_pos_format() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::do_neg_format() const</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::do_neg_format() const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class moneypunct&lt;wchar_t, true&gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::moneypunct&lt;wchar_t, true&gt; specified in <XREF linkend="tbl-libstdcxx-clawp-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clawp-ints">
<TITLE>libstdcxx - Class moneypunct&lt;wchar_t, true&gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::neg_format() const</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::neg_format() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::pos_format() const</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::pos_format() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::curr_symbol() const</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::curr_symbol() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::do_grouping() const</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::do_grouping() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::frac_digits() const</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::frac_digits() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::decimal_point() const</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::decimal_point() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::do_neg_format() const</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::do_neg_format() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::do_pos_format() const</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::do_pos_format() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::negative_sign() const</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::negative_sign() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::positive_sign() const</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::positive_sign() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::thousands_sep() const</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::thousands_sep() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::do_curr_symbol() const</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::do_curr_symbol() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::do_frac_digits() const</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::do_frac_digits() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::do_decimal_point() const</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::do_decimal_point() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::do_negative_sign() const</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::do_negative_sign() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::do_positive_sign() const</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::do_positive_sign() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::do_thousands_sep() const</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::do_thousands_sep() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::grouping() const</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::grouping() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::_M_initialize_moneypunct(__locale_struct*, char const*)</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::_M_initialize_moneypunct(__locale_struct*, char const*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::~moneypunct()</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::~moneypunct()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::~moneypunct()</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::~moneypunct()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::~moneypunct()</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::~moneypunct()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::moneypunct&lt;wchar_t, true&gt; specified in <XREF linkend="tbl-libstdcxx-clawp-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clawp-data">
<TITLE>libstdcxx - Class moneypunct&lt;wchar_t, true&gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>guard variable for moneypunct&lt;wchar_t, true&gt;::id</primary></indexterm>guard variable for moneypunct&lt;wchar_t, true&gt;::id(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::id</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::id(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::intl</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::intl(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for moneypunct&lt;wchar_t, true&gt;</primary></indexterm>typeinfo for moneypunct&lt;wchar_t, true&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for moneypunct&lt;wchar_t, true&gt;</primary></indexterm>typeinfo name for moneypunct&lt;wchar_t, true&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for moneypunct&lt;wchar_t, true&gt;</primary></indexterm>vtable for moneypunct&lt;wchar_t, true&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::moneypunct_byname<char, false> -->
<SECT2>
<!--libgroup-->
<TITLE>Class moneypunct_byname&lt;char, false&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for moneypunct_byname&lt;char, false&gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::moneypunct_byname&lt;char, false&gt; class
is described by <XREF LINKEND="cls-24283-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24283-0">
<TITLE>Primary vtable for moneypunct_byname&lt;char, false&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for moneypunct_byname&lt;char, false&gt;</primary></indexterm>typeinfo for moneypunct_byname&lt;char, false&gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct_byname&lt;char, false&gt;::~moneypunct_byname()</primary></indexterm>moneypunct_byname&lt;char, false&gt;::~moneypunct_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct_byname&lt;char, false&gt;::~moneypunct_byname()</primary></indexterm>moneypunct_byname&lt;char, false&gt;::~moneypunct_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::do_decimal_point() const</primary></indexterm>moneypunct&lt;char, false&gt;::do_decimal_point() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::do_thousands_sep() const</primary></indexterm>moneypunct&lt;char, false&gt;::do_thousands_sep() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::do_grouping() const</primary></indexterm>moneypunct&lt;char, false&gt;::do_grouping() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::do_curr_symbol() const</primary></indexterm>moneypunct&lt;char, false&gt;::do_curr_symbol() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::do_positive_sign() const</primary></indexterm>moneypunct&lt;char, false&gt;::do_positive_sign() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::do_negative_sign() const</primary></indexterm>moneypunct&lt;char, false&gt;::do_negative_sign() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::do_frac_digits() const</primary></indexterm>moneypunct&lt;char, false&gt;::do_frac_digits() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::do_pos_format() const</primary></indexterm>moneypunct&lt;char, false&gt;::do_pos_format() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt;::do_neg_format() const</primary></indexterm>moneypunct&lt;char, false&gt;::do_neg_format() const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::moneypunct_byname&lt;char, false&gt;  class
is described by <XREF LINKEND="rtti-24083">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24083">
<TITLE>typeinfo for moneypunct_byname&lt;char, false&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for moneypunct_byname&lt;char, false&gt;</primary></indexterm>typeinfo name for moneypunct_byname&lt;char, false&gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class moneypunct_byname&lt;char, false&gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::moneypunct_byname&lt;char, false&gt; specified in <XREF linkend="tbl-libstdcxx-clawq-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clawq-ints">
<TITLE>libstdcxx - Class moneypunct_byname&lt;char, false&gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct_byname&lt;char, false&gt;::~moneypunct_byname()</primary></indexterm>moneypunct_byname&lt;char, false&gt;::~moneypunct_byname()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct_byname&lt;char, false&gt;::~moneypunct_byname()</primary></indexterm>moneypunct_byname&lt;char, false&gt;::~moneypunct_byname()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct_byname&lt;char, false&gt;::~moneypunct_byname()</primary></indexterm>moneypunct_byname&lt;char, false&gt;::~moneypunct_byname()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::moneypunct_byname&lt;char, false&gt; specified in <XREF linkend="tbl-libstdcxx-clawq-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clawq-data">
<TITLE>libstdcxx - Class moneypunct_byname&lt;char, false&gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct_byname&lt;char, false&gt;::intl</primary></indexterm>moneypunct_byname&lt;char, false&gt;::intl(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for moneypunct_byname&lt;char, false&gt;</primary></indexterm>typeinfo for moneypunct_byname&lt;char, false&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for moneypunct_byname&lt;char, false&gt;</primary></indexterm>typeinfo name for moneypunct_byname&lt;char, false&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for moneypunct_byname&lt;char, false&gt;</primary></indexterm>vtable for moneypunct_byname&lt;char, false&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::moneypunct_byname<char, true> -->
<SECT2>
<!--libgroup-->
<TITLE>Class moneypunct_byname&lt;char, true&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for moneypunct_byname&lt;char, true&gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::moneypunct_byname&lt;char, true&gt; class
is described by <XREF LINKEND="cls-24282-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24282-0">
<TITLE>Primary vtable for moneypunct_byname&lt;char, true&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for moneypunct_byname&lt;char, true&gt;</primary></indexterm>typeinfo for moneypunct_byname&lt;char, true&gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct_byname&lt;char, true&gt;::~moneypunct_byname()</primary></indexterm>moneypunct_byname&lt;char, true&gt;::~moneypunct_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct_byname&lt;char, true&gt;::~moneypunct_byname()</primary></indexterm>moneypunct_byname&lt;char, true&gt;::~moneypunct_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::do_decimal_point() const</primary></indexterm>moneypunct&lt;char, true&gt;::do_decimal_point() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::do_thousands_sep() const</primary></indexterm>moneypunct&lt;char, true&gt;::do_thousands_sep() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::do_grouping() const</primary></indexterm>moneypunct&lt;char, true&gt;::do_grouping() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::do_curr_symbol() const</primary></indexterm>moneypunct&lt;char, true&gt;::do_curr_symbol() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::do_positive_sign() const</primary></indexterm>moneypunct&lt;char, true&gt;::do_positive_sign() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::do_negative_sign() const</primary></indexterm>moneypunct&lt;char, true&gt;::do_negative_sign() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::do_frac_digits() const</primary></indexterm>moneypunct&lt;char, true&gt;::do_frac_digits() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::do_pos_format() const</primary></indexterm>moneypunct&lt;char, true&gt;::do_pos_format() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt;::do_neg_format() const</primary></indexterm>moneypunct&lt;char, true&gt;::do_neg_format() const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::moneypunct_byname&lt;char, true&gt;  class
is described by <XREF LINKEND="rtti-24082">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24082">
<TITLE>typeinfo for moneypunct_byname&lt;char, true&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for moneypunct_byname&lt;char, true&gt;</primary></indexterm>typeinfo name for moneypunct_byname&lt;char, true&gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class moneypunct_byname&lt;char, true&gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::moneypunct_byname&lt;char, true&gt; specified in <XREF linkend="tbl-libstdcxx-clawr-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clawr-ints">
<TITLE>libstdcxx - Class moneypunct_byname&lt;char, true&gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct_byname&lt;char, true&gt;::~moneypunct_byname()</primary></indexterm>moneypunct_byname&lt;char, true&gt;::~moneypunct_byname()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct_byname&lt;char, true&gt;::~moneypunct_byname()</primary></indexterm>moneypunct_byname&lt;char, true&gt;::~moneypunct_byname()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct_byname&lt;char, true&gt;::~moneypunct_byname()</primary></indexterm>moneypunct_byname&lt;char, true&gt;::~moneypunct_byname()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::moneypunct_byname&lt;char, true&gt; specified in <XREF linkend="tbl-libstdcxx-clawr-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clawr-data">
<TITLE>libstdcxx - Class moneypunct_byname&lt;char, true&gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct_byname&lt;char, true&gt;::intl</primary></indexterm>moneypunct_byname&lt;char, true&gt;::intl(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for moneypunct_byname&lt;char, true&gt;</primary></indexterm>typeinfo for moneypunct_byname&lt;char, true&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for moneypunct_byname&lt;char, true&gt;</primary></indexterm>typeinfo name for moneypunct_byname&lt;char, true&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for moneypunct_byname&lt;char, true&gt;</primary></indexterm>vtable for moneypunct_byname&lt;char, true&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::moneypunct_byname<wchar_t, false> -->
<SECT2>
<!--libgroup-->
<TITLE>Class moneypunct_byname&lt;wchar_t, false&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for moneypunct_byname&lt;wchar_t, false&gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::moneypunct_byname&lt;wchar_t, false&gt; class
is described by <XREF LINKEND="cls-24269-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24269-0">
<TITLE>Primary vtable for moneypunct_byname&lt;wchar_t, false&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for moneypunct_byname&lt;wchar_t, false&gt;</primary></indexterm>typeinfo for moneypunct_byname&lt;wchar_t, false&gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct_byname&lt;wchar_t, false&gt;::~moneypunct_byname()</primary></indexterm>moneypunct_byname&lt;wchar_t, false&gt;::~moneypunct_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct_byname&lt;wchar_t, false&gt;::~moneypunct_byname()</primary></indexterm>moneypunct_byname&lt;wchar_t, false&gt;::~moneypunct_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::do_decimal_point() const</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::do_decimal_point() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::do_thousands_sep() const</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::do_thousands_sep() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::do_grouping() const</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::do_grouping() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::do_curr_symbol() const</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::do_curr_symbol() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::do_positive_sign() const</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::do_positive_sign() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::do_negative_sign() const</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::do_negative_sign() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::do_frac_digits() const</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::do_frac_digits() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::do_pos_format() const</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::do_pos_format() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt;::do_neg_format() const</primary></indexterm>moneypunct&lt;wchar_t, false&gt;::do_neg_format() const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::moneypunct_byname&lt;wchar_t, false&gt;  class
is described by <XREF LINKEND="rtti-24071">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24071">
<TITLE>typeinfo for moneypunct_byname&lt;wchar_t, false&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for moneypunct_byname&lt;wchar_t, false&gt;</primary></indexterm>typeinfo name for moneypunct_byname&lt;wchar_t, false&gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class moneypunct_byname&lt;wchar_t, false&gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::moneypunct_byname&lt;wchar_t, false&gt; specified in <XREF linkend="tbl-libstdcxx-claws-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-claws-ints">
<TITLE>libstdcxx - Class moneypunct_byname&lt;wchar_t, false&gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct_byname&lt;wchar_t, false&gt;::~moneypunct_byname()</primary></indexterm>moneypunct_byname&lt;wchar_t, false&gt;::~moneypunct_byname()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct_byname&lt;wchar_t, false&gt;::~moneypunct_byname()</primary></indexterm>moneypunct_byname&lt;wchar_t, false&gt;::~moneypunct_byname()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct_byname&lt;wchar_t, false&gt;::~moneypunct_byname()</primary></indexterm>moneypunct_byname&lt;wchar_t, false&gt;::~moneypunct_byname()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::moneypunct_byname&lt;wchar_t, false&gt; specified in <XREF linkend="tbl-libstdcxx-claws-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-claws-data">
<TITLE>libstdcxx - Class moneypunct_byname&lt;wchar_t, false&gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct_byname&lt;wchar_t, false&gt;::intl</primary></indexterm>moneypunct_byname&lt;wchar_t, false&gt;::intl(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for moneypunct_byname&lt;wchar_t, false&gt;</primary></indexterm>typeinfo for moneypunct_byname&lt;wchar_t, false&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for moneypunct_byname&lt;wchar_t, false&gt;</primary></indexterm>typeinfo name for moneypunct_byname&lt;wchar_t, false&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for moneypunct_byname&lt;wchar_t, false&gt;</primary></indexterm>vtable for moneypunct_byname&lt;wchar_t, false&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::moneypunct_byname<wchar_t, true> -->
<SECT2>
<!--libgroup-->
<TITLE>Class moneypunct_byname&lt;wchar_t, true&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for moneypunct_byname&lt;wchar_t, true&gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::moneypunct_byname&lt;wchar_t, true&gt; class
is described by <XREF LINKEND="cls-24268-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24268-0">
<TITLE>Primary vtable for moneypunct_byname&lt;wchar_t, true&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for moneypunct_byname&lt;wchar_t, true&gt;</primary></indexterm>typeinfo for moneypunct_byname&lt;wchar_t, true&gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct_byname&lt;wchar_t, true&gt;::~moneypunct_byname()</primary></indexterm>moneypunct_byname&lt;wchar_t, true&gt;::~moneypunct_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct_byname&lt;wchar_t, true&gt;::~moneypunct_byname()</primary></indexterm>moneypunct_byname&lt;wchar_t, true&gt;::~moneypunct_byname()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::do_decimal_point() const</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::do_decimal_point() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::do_thousands_sep() const</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::do_thousands_sep() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::do_grouping() const</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::do_grouping() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::do_curr_symbol() const</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::do_curr_symbol() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::do_positive_sign() const</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::do_positive_sign() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::do_negative_sign() const</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::do_negative_sign() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::do_frac_digits() const</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::do_frac_digits() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::do_pos_format() const</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::do_pos_format() const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt;::do_neg_format() const</primary></indexterm>moneypunct&lt;wchar_t, true&gt;::do_neg_format() const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::moneypunct_byname&lt;wchar_t, true&gt;  class
is described by <XREF LINKEND="rtti-24070">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24070">
<TITLE>typeinfo for moneypunct_byname&lt;wchar_t, true&gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for moneypunct_byname&lt;wchar_t, true&gt;</primary></indexterm>typeinfo name for moneypunct_byname&lt;wchar_t, true&gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class moneypunct_byname&lt;wchar_t, true&gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::moneypunct_byname&lt;wchar_t, true&gt; specified in <XREF linkend="tbl-libstdcxx-clawt-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clawt-ints">
<TITLE>libstdcxx - Class moneypunct_byname&lt;wchar_t, true&gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct_byname&lt;wchar_t, true&gt;::~moneypunct_byname()</primary></indexterm>moneypunct_byname&lt;wchar_t, true&gt;::~moneypunct_byname()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct_byname&lt;wchar_t, true&gt;::~moneypunct_byname()</primary></indexterm>moneypunct_byname&lt;wchar_t, true&gt;::~moneypunct_byname()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct_byname&lt;wchar_t, true&gt;::~moneypunct_byname()</primary></indexterm>moneypunct_byname&lt;wchar_t, true&gt;::~moneypunct_byname()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::moneypunct_byname&lt;wchar_t, true&gt; specified in <XREF linkend="tbl-libstdcxx-clawt-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clawt-data">
<TITLE>libstdcxx - Class moneypunct_byname&lt;wchar_t, true&gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct_byname&lt;wchar_t, true&gt;::intl</primary></indexterm>moneypunct_byname&lt;wchar_t, true&gt;::intl(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for moneypunct_byname&lt;wchar_t, true&gt;</primary></indexterm>typeinfo for moneypunct_byname&lt;wchar_t, true&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for moneypunct_byname&lt;wchar_t, true&gt;</primary></indexterm>typeinfo name for moneypunct_byname&lt;wchar_t, true&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for moneypunct_byname&lt;wchar_t, true&gt;</primary></indexterm>vtable for moneypunct_byname&lt;wchar_t, true&gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::money_base -->
<SECT2>
<!--libgroup-->
<TITLE>Class money_base</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for money_base</TITLE>
<PARA>
</PARA>
<PARA>
The Run Time Type Information for the std::money_base  class
is described by <XREF LINKEND="rtti-24010">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24010">
<TITLE>typeinfo for money_base</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__class_type_info</primary></indexterm>vtable for __cxxabiv1::__class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for money_base</primary></indexterm>typeinfo name for money_base</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class money_base</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::money_base specified in <XREF linkend="tbl-libstdcxx-clawu-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clawu-ints">
<TITLE>libstdcxx - Class money_base Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>money_base::_S_construct_pattern(char, char, char)</primary></indexterm>money_base::_S_construct_pattern(char, char, char)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::money_base specified in <XREF linkend="tbl-libstdcxx-clawu-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clawu-data">
<TITLE>libstdcxx - Class money_base Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>money_base::_S_default_pattern</primary></indexterm>money_base::_S_default_pattern(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>money_base::_S_atoms</primary></indexterm>money_base::_S_atoms(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for money_base</primary></indexterm>typeinfo for money_base(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for money_base</primary></indexterm>typeinfo name for money_base(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::money_get<char, std::istreambuf_iterator<char, std::char_traits<char> > > -->
<SECT2>
<!--libgroup-->
<TITLE>Class money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::money_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; class
is described by <XREF LINKEND="cls-24281-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24281-0">
<TITLE>Primary vtable for money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</primary></indexterm>typeinfo for money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~money_get()</primary></indexterm>money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~money_get()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~money_get()</primary></indexterm>money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~money_get()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, bool, ios_base&, _Ios_Iostate&, long double&) const</primary></indexterm>money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, bool, ios_base&, _Ios_Iostate&, long double&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, bool, ios_base&, _Ios_Iostate&, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;&) const</primary></indexterm>money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, bool, ios_base&, _Ios_Iostate&, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;&) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::money_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;  class
is described by <XREF LINKEND="rtti-24081">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24081">
<TITLE>typeinfo for money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</primary></indexterm>typeinfo name for money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::money_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clawv-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clawv-ints">
<TITLE>libstdcxx - Class money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::_M_extract&lt;false&gt;(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;&) const</primary></indexterm>istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::_M_extract&lt;false&gt;(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::_M_extract&lt;true&gt;(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;&) const</primary></indexterm>istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::_M_extract&lt;true&gt;(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, bool, ios_base&, _Ios_Iostate&, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;&) const</primary></indexterm>money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, bool, ios_base&, _Ios_Iostate&, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, bool, ios_base&, _Ios_Iostate&, long double&) const</primary></indexterm>money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, bool, ios_base&, _Ios_Iostate&, long double&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, bool, ios_base&, _Ios_Iostate&, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;&) const</primary></indexterm>money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, bool, ios_base&, _Ios_Iostate&, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, bool, ios_base&, _Ios_Iostate&, long double&) const</primary></indexterm>money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, bool, ios_base&, _Ios_Iostate&, long double&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~money_get()</primary></indexterm>money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~money_get()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~money_get()</primary></indexterm>money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~money_get()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~money_get()</primary></indexterm>money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~money_get()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::money_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clawv-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clawv-data">
<TITLE>libstdcxx - Class money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>guard variable for money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::id</primary></indexterm>guard variable for money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::id(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::id</primary></indexterm>money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::id(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</primary></indexterm>typeinfo for money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</primary></indexterm>typeinfo name for money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</primary></indexterm>vtable for money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::money_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > -->
<SECT2>
<!--libgroup-->
<TITLE>Class money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::money_get&lt;wchar_t, std::istreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; &gt; class
is described by <XREF LINKEND="cls-24267-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24267-0">
<TITLE>Primary vtable for money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</primary></indexterm>typeinfo for money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~money_get()</primary></indexterm>money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~money_get()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~money_get()</primary></indexterm>money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~money_get()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, bool, ios_base&, _Ios_Iostate&, long double&) const</primary></indexterm>money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, bool, ios_base&, _Ios_Iostate&, long double&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, bool, ios_base&, _Ios_Iostate&, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;&) const</primary></indexterm>money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, bool, ios_base&, _Ios_Iostate&, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;&) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::money_get&lt;wchar_t, std::istreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; &gt;  class
is described by <XREF LINKEND="rtti-24069">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24069">
<TITLE>typeinfo for money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</primary></indexterm>typeinfo name for money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::money_get&lt;wchar_t, std::istreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; &gt; specified in <XREF linkend="tbl-libstdcxx-claww-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-claww-ints">
<TITLE>libstdcxx - Class money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::_M_extract&lt;false&gt;(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;&) const</primary></indexterm>istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::_M_extract&lt;false&gt;(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::_M_extract&lt;true&gt;(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;&) const</primary></indexterm>istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::_M_extract&lt;true&gt;(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, bool, ios_base&, _Ios_Iostate&, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;&) const</primary></indexterm>money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, bool, ios_base&, _Ios_Iostate&, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, bool, ios_base&, _Ios_Iostate&, long double&) const</primary></indexterm>money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, bool, ios_base&, _Ios_Iostate&, long double&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, bool, ios_base&, _Ios_Iostate&, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;&) const</primary></indexterm>money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, bool, ios_base&, _Ios_Iostate&, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt;&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, bool, ios_base&, _Ios_Iostate&, long double&) const</primary></indexterm>money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, bool, ios_base&, _Ios_Iostate&, long double&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~money_get()</primary></indexterm>money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~money_get()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~money_get()</primary></indexterm>money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~money_get()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~money_get()</primary></indexterm>money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~money_get()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::money_get&lt;wchar_t, std::istreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; &gt; specified in <XREF linkend="tbl-libstdcxx-claww-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-claww-data">
<TITLE>libstdcxx - Class money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>guard variable for money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::id</primary></indexterm>guard variable for money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::id(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::id</primary></indexterm>money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::id(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</primary></indexterm>typeinfo for money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</primary></indexterm>typeinfo name for money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</primary></indexterm>vtable for money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::money_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > > -->
<SECT2>
<!--libgroup-->
<TITLE>Class money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::money_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; class
is described by <XREF LINKEND="cls-24280-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24280-0">
<TITLE>Primary vtable for money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</primary></indexterm>typeinfo for money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~money_put()</primary></indexterm>money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~money_put()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~money_put()</primary></indexterm>money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~money_put()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, bool, ios_base&, char, long double) const</primary></indexterm>money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, bool, ios_base&, char, long double) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, bool, ios_base&, char, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&) const</primary></indexterm>money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, bool, ios_base&, char, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::money_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;  class
is described by <XREF LINKEND="rtti-24080">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24080">
<TITLE>typeinfo for money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</primary></indexterm>typeinfo name for money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::money_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clawx-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clawx-ints">
<TITLE>libstdcxx - Class money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, bool, ios_base&, char, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&) const</primary></indexterm>money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, bool, ios_base&, char, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, bool, ios_base&, char, long double) const</primary></indexterm>money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, bool, ios_base&, char, long double) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, bool, ios_base&, char, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&) const</primary></indexterm>money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, bool, ios_base&, char, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, bool, ios_base&, char, long double) const</primary></indexterm>money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, bool, ios_base&, char, long double) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::_M_insert&lt;false&gt;(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&) const</primary></indexterm>ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::_M_insert&lt;false&gt;(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::_M_insert&lt;true&gt;(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&) const</primary></indexterm>ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::_M_insert&lt;true&gt;(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt; const&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~money_put()</primary></indexterm>money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~money_put()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~money_put()</primary></indexterm>money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~money_put()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~money_put()</primary></indexterm>money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~money_put()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::money_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clawx-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clawx-data">
<TITLE>libstdcxx - Class money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>guard variable for money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::id</primary></indexterm>guard variable for money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::id(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::id</primary></indexterm>money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::id(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</primary></indexterm>typeinfo for money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</primary></indexterm>typeinfo name for money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</primary></indexterm>vtable for money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::money_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > -->
<SECT2>
<!--libgroup-->
<TITLE>Class money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::money_put&lt;wchar_t, std::ostreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; &gt; class
is described by <XREF LINKEND="cls-24266-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24266-0">
<TITLE>Primary vtable for money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</primary></indexterm>typeinfo for money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~money_put()</primary></indexterm>money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~money_put()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~money_put()</primary></indexterm>money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~money_put()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, bool, ios_base&, wchar_t, long double) const</primary></indexterm>money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, bool, ios_base&, wchar_t, long double) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, bool, ios_base&, wchar_t, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&) const</primary></indexterm>money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, bool, ios_base&, wchar_t, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::money_put&lt;wchar_t, std::ostreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; &gt;  class
is described by <XREF LINKEND="rtti-24068">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24068">
<TITLE>typeinfo for money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</primary></indexterm>typeinfo name for money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::money_put&lt;wchar_t, std::ostreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clawy-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clawy-ints">
<TITLE>libstdcxx - Class money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, bool, ios_base&, wchar_t, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&) const</primary></indexterm>money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, bool, ios_base&, wchar_t, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, bool, ios_base&, wchar_t, long double) const</primary></indexterm>money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, bool, ios_base&, wchar_t, long double) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, bool, ios_base&, wchar_t, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&) const</primary></indexterm>money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, bool, ios_base&, wchar_t, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, bool, ios_base&, wchar_t, long double) const</primary></indexterm>money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, bool, ios_base&, wchar_t, long double) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::_M_insert&lt;false&gt;(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&) const</primary></indexterm>ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::_M_insert&lt;false&gt;(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::_M_insert&lt;true&gt;(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&) const</primary></indexterm>ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::_M_insert&lt;true&gt;(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt; &gt; const&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~money_put()</primary></indexterm>money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~money_put()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~money_put()</primary></indexterm>money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~money_put()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~money_put()</primary></indexterm>money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~money_put()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::money_put&lt;wchar_t, std::ostreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; &gt; specified in <XREF linkend="tbl-libstdcxx-clawy-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clawy-data">
<TITLE>libstdcxx - Class money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>guard variable for money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::id</primary></indexterm>guard variable for money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::id(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::id</primary></indexterm>money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::id(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</primary></indexterm>typeinfo for money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</primary></indexterm>typeinfo name for money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</primary></indexterm>vtable for money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::locale -->
<SECT2>
<!--libgroup-->
<TITLE>Class locale</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for Class locale</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::locale specified in <XREF linkend="tbl-libstdcxx-clawz-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clawz-ints">
<TITLE>libstdcxx - Class locale Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>locale::id::_M_id() const</primary></indexterm>locale::id::_M_id() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>locale::name() const</primary></indexterm>locale::name() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>locale::operator==(locale const&) const</primary></indexterm>locale::operator==(locale const&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>locale::_M_coalesce(locale const&, locale const&, int)</primary></indexterm>locale::_M_coalesce(locale const&, locale const&, int)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>locale::_S_normalize_category(int)</primary></indexterm>locale::_S_normalize_category(int)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>locale::_Impl::_M_install_facet(locale::id const*, locale::facet const*)</primary></indexterm>locale::_Impl::_M_install_facet(locale::id const*, locale::facet const*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.3">&lsqb;LSB]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>locale::_Impl::_M_replace_facet(locale::_Impl const*, locale::id const*)</primary></indexterm>locale::_Impl::_M_replace_facet(locale::_Impl const*, locale::id const*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.3">&lsqb;LSB]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>locale::_Impl::~_Impl()</primary></indexterm>locale::_Impl::~_Impl()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.3">&lsqb;LSB]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>locale::_Impl::~_Impl()</primary></indexterm>locale::_Impl::~_Impl()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.3">&lsqb;LSB]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>locale::global(locale const&)</primary></indexterm>locale::global(locale const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>locale::classic()</primary></indexterm>locale::classic()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>locale::locale(char const*)</primary></indexterm>locale::locale(char const*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>locale::locale(locale::_Impl*)</primary></indexterm>locale::locale(locale::_Impl*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>locale::locale(locale const&)</primary></indexterm>locale::locale(locale const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>locale::locale(locale const&, locale const&, int)</primary></indexterm>locale::locale(locale const&, locale const&, int)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>locale::locale()</primary></indexterm>locale::locale()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>locale::locale(char const*)</primary></indexterm>locale::locale(char const*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>locale::locale(locale::_Impl*)</primary></indexterm>locale::locale(locale::_Impl*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>locale::locale(locale const&)</primary></indexterm>locale::locale(locale const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>locale::locale(locale const&, char const*, int)</primary></indexterm>locale::locale(locale const&, char const*, int)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>locale::locale(locale const&, locale const&, int)</primary></indexterm>locale::locale(locale const&, locale const&, int)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>locale::locale()</primary></indexterm>locale::locale()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>locale::~locale()</primary></indexterm>locale::~locale()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>locale::~locale()</primary></indexterm>locale::~locale()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>locale::operator=(locale const&)</primary></indexterm>locale::operator=(locale const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::locale specified in <XREF linkend="tbl-libstdcxx-clawz-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-clawz-data">
<TITLE>libstdcxx - Class locale Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>locale::all</primary></indexterm>locale::all(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>locale::none</primary></indexterm>locale::none(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>locale::time</primary></indexterm>locale::time(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>locale::ctype</primary></indexterm>locale::ctype(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>locale::collate</primary></indexterm>locale::collate(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>locale::numeric</primary></indexterm>locale::numeric(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>locale::messages</primary></indexterm>locale::messages(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>locale::monetary</primary></indexterm>locale::monetary(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::locale::facet -->
<SECT2>
<!--libgroup-->
<TITLE>Class locale::facet</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for locale::facet</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::locale::facet class
is described by <XREF LINKEND="cls-24255-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24255-0">
<TITLE>Primary vtable for locale::facet</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for locale::facet</primary></indexterm>typeinfo for locale::facet</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>locale::facet::~facet()</primary></indexterm>locale::facet::~facet()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>locale::facet::~facet()</primary></indexterm>locale::facet::~facet()</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::locale::facet  class
is described by <XREF LINKEND="rtti-24005">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24005">
<TITLE>typeinfo for locale::facet</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__class_type_info</primary></indexterm>vtable for __cxxabiv1::__class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for locale::facet</primary></indexterm>typeinfo name for locale::facet</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class locale::facet</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::locale::facet specified in <XREF linkend="tbl-libstdcxx-claxa-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-claxa-ints">
<TITLE>libstdcxx - Class locale::facet Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>locale::facet::_S_get_c_name()</primary></indexterm>locale::facet::_S_get_c_name()(GLIBCXX_3.4.6) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>locale::facet::_S_get_c_locale()</primary></indexterm>locale::facet::_S_get_c_locale()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>locale::facet::_S_clone_c_locale(__locale_struct*&)</primary></indexterm>locale::facet::_S_clone_c_locale(__locale_struct*&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>locale::facet::_S_create_c_locale(__locale_struct*&, char const*, __locale_struct*)</primary></indexterm>locale::facet::_S_create_c_locale(__locale_struct*&, char const*, __locale_struct*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>locale::facet::_S_destroy_c_locale(__locale_struct*&)</primary></indexterm>locale::facet::_S_destroy_c_locale(__locale_struct*&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>locale::facet::~facet()</primary></indexterm>locale::facet::~facet()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>locale::facet::~facet()</primary></indexterm>locale::facet::~facet()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>locale::facet::~facet()</primary></indexterm>locale::facet::~facet()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>locale::locale(locale const&, char const*, int)</primary></indexterm>locale::locale(locale const&, char const*, int)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::locale::facet specified in <XREF linkend="tbl-libstdcxx-claxa-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-claxa-data">
<TITLE>libstdcxx - Class locale::facet Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__timepunct_cache&lt;char&gt;::_S_timezones</primary></indexterm>__timepunct_cache&lt;char&gt;::_S_timezones(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__timepunct_cache&lt;wchar_t&gt;::_S_timezones</primary></indexterm>__timepunct_cache&lt;wchar_t&gt;::_S_timezones(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for locale::facet</primary></indexterm>typeinfo for locale::facet(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for locale::facet</primary></indexterm>typeinfo name for locale::facet(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for locale::facet</primary></indexterm>vtable for locale::facet(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name facet functions -->
<SECT2>
<!--libgroup-->
<TITLE>facet functions</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for facet functions</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for facet functions specified in <XREF linkend="tbl-libstdcxx-facet-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-facet-ints">
<TITLE>libstdcxx - facet functions Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>void __convert_to_v&lt;double&gt;(char const*, double&, _Ios_Iostate&, __locale_struct* const&)</primary></indexterm>void __convert_to_v&lt;double&gt;(char const*, double&, _Ios_Iostate&, __locale_struct* const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>void __convert_to_v&lt;long double&gt;(char const*, long double&, _Ios_Iostate&, __locale_struct* const&)</primary></indexterm>void __convert_to_v&lt;long double&gt;(char const*, long double&, _Ios_Iostate&, __locale_struct* const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>void __convert_to_v&lt;float&gt;(char const*, float&, _Ios_Iostate&, __locale_struct* const&)</primary></indexterm>void __convert_to_v&lt;float&gt;(char const*, float&, _Ios_Iostate&, __locale_struct* const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>bool has_facet&lt;moneypunct&lt;char, false&gt; &gt;(locale const&)</primary></indexterm>bool has_facet&lt;moneypunct&lt;char, false&gt; &gt;(locale const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>bool has_facet&lt;moneypunct&lt;wchar_t, false&gt; &gt;(locale const&)</primary></indexterm>bool has_facet&lt;moneypunct&lt;wchar_t, false&gt; &gt;(locale const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>bool has_facet&lt;ctype&lt;wchar_t&gt; &gt;(locale const&)</primary></indexterm>bool has_facet&lt;ctype&lt;wchar_t&gt; &gt;(locale const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>bool has_facet&lt;codecvt&lt;char, char, __mbstate_t&gt; &gt;(locale const&)</primary></indexterm>bool has_facet&lt;codecvt&lt;char, char, __mbstate_t&gt; &gt;(locale const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>bool has_facet&lt;codecvt&lt;wchar_t, char, __mbstate_t&gt; &gt;(locale const&)</primary></indexterm>bool has_facet&lt;codecvt&lt;wchar_t, char, __mbstate_t&gt; &gt;(locale const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>bool has_facet&lt;collate&lt;char&gt; &gt;(locale const&)</primary></indexterm>bool has_facet&lt;collate&lt;char&gt; &gt;(locale const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>bool has_facet&lt;collate&lt;wchar_t&gt; &gt;(locale const&)</primary></indexterm>bool has_facet&lt;collate&lt;wchar_t&gt; &gt;(locale const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>bool has_facet&lt;num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt; &gt;(locale const&)</primary></indexterm>bool has_facet&lt;num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt; &gt;(locale const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>bool has_facet&lt;num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt; &gt;(locale const&)</primary></indexterm>bool has_facet&lt;num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt; &gt;(locale const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>bool has_facet&lt;num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt; &gt;(locale const&)</primary></indexterm>bool has_facet&lt;num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt; &gt;(locale const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>bool has_facet&lt;num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt; &gt;(locale const&)</primary></indexterm>bool has_facet&lt;num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt; &gt;(locale const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>bool has_facet&lt;messages&lt;char&gt; &gt;(locale const&)</primary></indexterm>bool has_facet&lt;messages&lt;char&gt; &gt;(locale const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>bool has_facet&lt;messages&lt;wchar_t&gt; &gt;(locale const&)</primary></indexterm>bool has_facet&lt;messages&lt;wchar_t&gt; &gt;(locale const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>bool has_facet&lt;numpunct&lt;char&gt; &gt;(locale const&)</primary></indexterm>bool has_facet&lt;numpunct&lt;char&gt; &gt;(locale const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>bool has_facet&lt;numpunct&lt;wchar_t&gt; &gt;(locale const&)</primary></indexterm>bool has_facet&lt;numpunct&lt;wchar_t&gt; &gt;(locale const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>bool has_facet&lt;time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt; &gt;(locale const&)</primary></indexterm>bool has_facet&lt;time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt; &gt;(locale const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>bool has_facet&lt;time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt; &gt;(locale const&)</primary></indexterm>bool has_facet&lt;time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt; &gt;(locale const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>bool has_facet&lt;time_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt; &gt;(locale const&)</primary></indexterm>bool has_facet&lt;time_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt; &gt;(locale const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>bool has_facet&lt;time_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt; &gt;(locale const&)</primary></indexterm>bool has_facet&lt;time_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt; &gt;(locale const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>bool has_facet&lt;money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt; &gt;(locale const&)</primary></indexterm>bool has_facet&lt;money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt; &gt;(locale const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>bool has_facet&lt;money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt; &gt;(locale const&)</primary></indexterm>bool has_facet&lt;money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt; &gt;(locale const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>bool has_facet&lt;money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt; &gt;(locale const&)</primary></indexterm>bool has_facet&lt;money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt; &gt;(locale const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>bool has_facet&lt;money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt; &gt;(locale const&)</primary></indexterm>bool has_facet&lt;money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt; &gt;(locale const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, false&gt; const& use_facet&lt;moneypunct&lt;char, false&gt; &gt;(locale const&)</primary></indexterm>moneypunct&lt;char, false&gt; const& use_facet&lt;moneypunct&lt;char, false&gt; &gt;(locale const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;char, true&gt; const& use_facet&lt;moneypunct&lt;char, true&gt; &gt;(locale const&)</primary></indexterm>moneypunct&lt;char, true&gt; const& use_facet&lt;moneypunct&lt;char, true&gt; &gt;(locale const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, false&gt; const& use_facet&lt;moneypunct&lt;wchar_t, false&gt; &gt;(locale const&)</primary></indexterm>moneypunct&lt;wchar_t, false&gt; const& use_facet&lt;moneypunct&lt;wchar_t, false&gt; &gt;(locale const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>moneypunct&lt;wchar_t, true&gt; const& use_facet&lt;moneypunct&lt;wchar_t, true&gt; &gt;(locale const&)</primary></indexterm>moneypunct&lt;wchar_t, true&gt; const& use_facet&lt;moneypunct&lt;wchar_t, true&gt; &gt;(locale const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__timepunct&lt;char&gt; const& use_facet&lt;__timepunct&lt;char&gt; &gt;(locale const&)</primary></indexterm>__timepunct&lt;char&gt; const& use_facet&lt;__timepunct&lt;char&gt; &gt;(locale const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__timepunct&lt;wchar_t&gt; const& use_facet&lt;__timepunct&lt;wchar_t&gt; &gt;(locale const&)</primary></indexterm>__timepunct&lt;wchar_t&gt; const& use_facet&lt;__timepunct&lt;wchar_t&gt; &gt;(locale const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;char&gt; const& use_facet&lt;ctype&lt;char&gt; &gt;(locale const&)</primary></indexterm>ctype&lt;char&gt; const& use_facet&lt;ctype&lt;char&gt; &gt;(locale const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ctype&lt;wchar_t&gt; const& use_facet&lt;ctype&lt;wchar_t&gt; &gt;(locale const&)</primary></indexterm>ctype&lt;wchar_t&gt; const& use_facet&lt;ctype&lt;wchar_t&gt; &gt;(locale const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;char, char, __mbstate_t&gt; const& use_facet&lt;codecvt&lt;char, char, __mbstate_t&gt; &gt;(locale const&)</primary></indexterm>codecvt&lt;char, char, __mbstate_t&gt; const& use_facet&lt;codecvt&lt;char, char, __mbstate_t&gt; &gt;(locale const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>codecvt&lt;wchar_t, char, __mbstate_t&gt; const& use_facet&lt;codecvt&lt;wchar_t, char, __mbstate_t&gt; &gt;(locale const&)</primary></indexterm>codecvt&lt;wchar_t, char, __mbstate_t&gt; const& use_facet&lt;codecvt&lt;wchar_t, char, __mbstate_t&gt; &gt;(locale const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>collate&lt;char&gt; const& use_facet&lt;collate&lt;char&gt; &gt;(locale const&)</primary></indexterm>collate&lt;char&gt; const& use_facet&lt;collate&lt;char&gt; &gt;(locale const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>collate&lt;wchar_t&gt; const& use_facet&lt;collate&lt;wchar_t&gt; &gt;(locale const&)</primary></indexterm>collate&lt;wchar_t&gt; const& use_facet&lt;collate&lt;wchar_t&gt; &gt;(locale const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt; const& use_facet&lt;num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt; &gt;(locale const&)</primary></indexterm>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt; const& use_facet&lt;num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt; &gt;(locale const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt; const& use_facet&lt;num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt; &gt;(locale const&)</primary></indexterm>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt; const& use_facet&lt;num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt; &gt;(locale const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt; const& use_facet&lt;num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt; &gt;(locale const&)</primary></indexterm>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt; const& use_facet&lt;num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt; &gt;(locale const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt; const& use_facet&lt;num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt; &gt;(locale const&)</primary></indexterm>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt; const& use_facet&lt;num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt; &gt;(locale const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>messages&lt;char&gt; const& use_facet&lt;messages&lt;char&gt; &gt;(locale const&)</primary></indexterm>messages&lt;char&gt; const& use_facet&lt;messages&lt;char&gt; &gt;(locale const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>messages&lt;wchar_t&gt; const& use_facet&lt;messages&lt;wchar_t&gt; &gt;(locale const&)</primary></indexterm>messages&lt;wchar_t&gt; const& use_facet&lt;messages&lt;wchar_t&gt; &gt;(locale const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;char&gt; const& use_facet&lt;numpunct&lt;char&gt; &gt;(locale const&)</primary></indexterm>numpunct&lt;char&gt; const& use_facet&lt;numpunct&lt;char&gt; &gt;(locale const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>numpunct&lt;wchar_t&gt; const& use_facet&lt;numpunct&lt;wchar_t&gt; &gt;(locale const&)</primary></indexterm>numpunct&lt;wchar_t&gt; const& use_facet&lt;numpunct&lt;wchar_t&gt; &gt;(locale const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt; const& use_facet&lt;time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt; &gt;(locale const&)</primary></indexterm>time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt; const& use_facet&lt;time_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt; &gt;(locale const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt; const& use_facet&lt;time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt; &gt;(locale const&)</primary></indexterm>time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt; const& use_facet&lt;time_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt; &gt;(locale const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt; const& use_facet&lt;time_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt; &gt;(locale const&)</primary></indexterm>time_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt; const& use_facet&lt;time_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt; &gt;(locale const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>time_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt; const& use_facet&lt;time_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt; &gt;(locale const&)</primary></indexterm>time_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt; const& use_facet&lt;time_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt; &gt;(locale const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt; const& use_facet&lt;money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt; &gt;(locale const&)</primary></indexterm>money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt; const& use_facet&lt;money_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt; &gt;(locale const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt; const& use_facet&lt;money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt; &gt;(locale const&)</primary></indexterm>money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt; const& use_facet&lt;money_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt; &gt;(locale const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt; const& use_facet&lt;money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt; &gt;(locale const&)</primary></indexterm>money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt; const& use_facet&lt;money_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt; &gt;(locale const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt; const& use_facet&lt;money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt; &gt;(locale const&)</primary></indexterm>money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt; const& use_facet&lt;money_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt; &gt;(locale const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::__num_base -->
<SECT2>
<!--libgroup-->
<TITLE>Class __num_base</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for __num_base</TITLE>
<PARA>
</PARA>
<PARA>
The Run Time Type Information for the std::__num_base  class
is described by <XREF LINKEND="rtti-24015">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24015">
<TITLE></TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__class_type_info</primary></indexterm>vtable for __cxxabiv1::__class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for __num_base</primary></indexterm>typeinfo name for __num_base</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class __num_base</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::__num_base specified in <XREF linkend="tbl-libstdcxx-claxb-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-claxb-ints">
<TITLE>libstdcxx - Class __num_base Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__num_base::_S_format_float(ios_base const&, char*, char)</primary></indexterm>__num_base::_S_format_float(ios_base const&, char*, char)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::__num_base specified in <XREF linkend="tbl-libstdcxx-claxb-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-claxb-data">
<TITLE>libstdcxx - Class __num_base Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__num_base::_S_atoms_in</primary></indexterm>__num_base::_S_atoms_in(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__num_base::_S_atoms_out</primary></indexterm>__num_base::_S_atoms_out(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > > -->
<SECT2>
<!--libgroup-->
<TITLE>Class num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; class
is described by <XREF LINKEND="cls-24278-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24278-0">
<TITLE>Primary vtable for num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</primary></indexterm>typeinfo for num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~num_get()</primary></indexterm>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~num_get()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~num_get()</primary></indexterm>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~num_get()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, bool&) const</primary></indexterm>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, bool&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, long&) const</primary></indexterm>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, long&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, unsigned short&) const</primary></indexterm>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, unsigned short&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, unsigned int&) const</primary></indexterm>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, unsigned int&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, unsigned long&) const</primary></indexterm>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, unsigned long&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, long long&) const</primary></indexterm>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, long long&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, unsigned long long&) const</primary></indexterm>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, unsigned long long&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, float&) const</primary></indexterm>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, float&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, double&) const</primary></indexterm>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, double&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;11&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, long double&) const</primary></indexterm>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, long double&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;12&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, void*&) const</primary></indexterm>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, void*&) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;  class
is described by <XREF LINKEND="rtti-24078">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24078">
<TITLE>typeinfo for num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</primary></indexterm>typeinfo name for num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>flags:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>8</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>basetype:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for locale::facet</primary></indexterm>typeinfo for locale::facet</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>2</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>basetype:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary></primary></indexterm></ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>2</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; specified in <XREF linkend="tbl-libstdcxx-claxc-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-claxc-ints">
<TITLE>libstdcxx - Class num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::_M_extract_int&lt;unsigned int&gt;(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, unsigned int&) const</primary></indexterm>istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::_M_extract_int&lt;unsigned int&gt;(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, unsigned int&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::_M_extract_int&lt;long&gt;(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, long&) const</primary></indexterm>istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::_M_extract_int&lt;long&gt;(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, long&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::_M_extract_int&lt;unsigned long&gt;(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, unsigned long&) const</primary></indexterm>istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::_M_extract_int&lt;unsigned long&gt;(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, unsigned long&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::_M_extract_int&lt;unsigned short&gt;(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, unsigned short&) const</primary></indexterm>istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::_M_extract_int&lt;unsigned short&gt;(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, unsigned short&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::_M_extract_int&lt;long long&gt;(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, long long&) const</primary></indexterm>istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::_M_extract_int&lt;long long&gt;(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, long long&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::_M_extract_int&lt;unsigned long long&gt;(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, unsigned long long&) const</primary></indexterm>istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::_M_extract_int&lt;unsigned long long&gt;(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, unsigned long long&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::_M_extract_float(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;&) const</primary></indexterm>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::_M_extract_float(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, void*&) const</primary></indexterm>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, void*&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, bool&) const</primary></indexterm>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, bool&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, double&) const</primary></indexterm>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, double&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, long double&) const</primary></indexterm>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, long double&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, float&) const</primary></indexterm>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, float&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, unsigned int&) const</primary></indexterm>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, unsigned int&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, long&) const</primary></indexterm>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, long&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, unsigned long&) const</primary></indexterm>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, unsigned long&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, unsigned short&) const</primary></indexterm>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, unsigned short&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, long long&) const</primary></indexterm>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, long long&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, unsigned long long&) const</primary></indexterm>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, unsigned long long&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, void*&) const</primary></indexterm>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, void*&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, bool&) const</primary></indexterm>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, bool&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, double&) const</primary></indexterm>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, double&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, long double&) const</primary></indexterm>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, long double&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, float&) const</primary></indexterm>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, float&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, unsigned int&) const</primary></indexterm>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, unsigned int&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, long&) const</primary></indexterm>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, long&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, unsigned long&) const</primary></indexterm>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, unsigned long&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, unsigned short&) const</primary></indexterm>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, unsigned short&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, long long&) const</primary></indexterm>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, long long&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, unsigned long long&) const</primary></indexterm>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, _Ios_Iostate&, unsigned long long&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~num_get()</primary></indexterm>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~num_get()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~num_get()</primary></indexterm>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~num_get()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~num_get()</primary></indexterm>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~num_get()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; specified in <XREF linkend="tbl-libstdcxx-claxc-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-claxc-data">
<TITLE>libstdcxx - Class num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>guard variable for num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::id</primary></indexterm>guard variable for num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::id(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::id</primary></indexterm>num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::id(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</primary></indexterm>typeinfo for num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</primary></indexterm>typeinfo name for num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</primary></indexterm>vtable for num_get&lt;char, istreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > -->
<SECT2>
<!--libgroup-->
<TITLE>Class num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::num_get&lt;wchar_t, std::istreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; &gt; class
is described by <XREF LINKEND="cls-24264-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24264-0">
<TITLE>Primary vtable for num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</primary></indexterm>typeinfo for num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~num_get()</primary></indexterm>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~num_get()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~num_get()</primary></indexterm>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~num_get()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, bool&) const</primary></indexterm>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, bool&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, long&) const</primary></indexterm>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, long&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, unsigned short&) const</primary></indexterm>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, unsigned short&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, unsigned int&) const</primary></indexterm>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, unsigned int&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, unsigned long&) const</primary></indexterm>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, unsigned long&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, long long&) const</primary></indexterm>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, long long&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, unsigned long long&) const</primary></indexterm>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, unsigned long long&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, float&) const</primary></indexterm>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, float&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;10&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, double&) const</primary></indexterm>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, double&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;11&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, long double&) const</primary></indexterm>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, long double&) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;12&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, void*&) const</primary></indexterm>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, void*&) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::num_get&lt;wchar_t, std::istreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; &gt;  class
is described by <XREF LINKEND="rtti-24066">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24066">
<TITLE>typeinfo for num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</primary></indexterm>typeinfo name for num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>flags:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>8</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>basetype:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for locale::facet</primary></indexterm>typeinfo for locale::facet</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>2</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>basetype:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary></primary></indexterm></ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>2</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::num_get&lt;wchar_t, std::istreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; &gt; specified in <XREF linkend="tbl-libstdcxx-claxd-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-claxd-ints">
<TITLE>libstdcxx - Class num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::_M_extract_int&lt;unsigned int&gt;(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, unsigned int&) const</primary></indexterm>istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::_M_extract_int&lt;unsigned int&gt;(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, unsigned int&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::_M_extract_int&lt;long&gt;(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, long&) const</primary></indexterm>istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::_M_extract_int&lt;long&gt;(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, long&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::_M_extract_int&lt;unsigned long&gt;(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, unsigned long&) const</primary></indexterm>istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::_M_extract_int&lt;unsigned long&gt;(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, unsigned long&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::_M_extract_int&lt;unsigned short&gt;(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, unsigned short&) const</primary></indexterm>istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::_M_extract_int&lt;unsigned short&gt;(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, unsigned short&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::_M_extract_int&lt;long long&gt;(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, long long&) const</primary></indexterm>istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::_M_extract_int&lt;long long&gt;(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, long long&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::_M_extract_int&lt;unsigned long long&gt;(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, unsigned long long&) const</primary></indexterm>istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::_M_extract_int&lt;unsigned long long&gt;(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, unsigned long long&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::_M_extract_float(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;&) const</primary></indexterm>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::_M_extract_float(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, void*&) const</primary></indexterm>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, void*&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, bool&) const</primary></indexterm>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, bool&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, double&) const</primary></indexterm>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, double&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, long double&) const</primary></indexterm>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, long double&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, float&) const</primary></indexterm>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, float&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, unsigned int&) const</primary></indexterm>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, unsigned int&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, long&) const</primary></indexterm>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, long&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, unsigned long&) const</primary></indexterm>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, unsigned long&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, unsigned short&) const</primary></indexterm>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, unsigned short&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, long long&) const</primary></indexterm>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, long long&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, unsigned long long&) const</primary></indexterm>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, unsigned long long&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, void*&) const</primary></indexterm>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, void*&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, bool&) const</primary></indexterm>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, bool&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, double&) const</primary></indexterm>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, double&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, long double&) const</primary></indexterm>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, long double&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, float&) const</primary></indexterm>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, float&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, unsigned int&) const</primary></indexterm>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, unsigned int&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, long&) const</primary></indexterm>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, long&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, unsigned long&) const</primary></indexterm>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, unsigned long&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, unsigned short&) const</primary></indexterm>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, unsigned short&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, long long&) const</primary></indexterm>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, long long&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, unsigned long long&) const</primary></indexterm>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_get(istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, _Ios_Iostate&, unsigned long long&) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~num_get()</primary></indexterm>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~num_get()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~num_get()</primary></indexterm>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~num_get()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~num_get()</primary></indexterm>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~num_get()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::num_get&lt;wchar_t, std::istreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; &gt; specified in <XREF linkend="tbl-libstdcxx-claxd-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-claxd-data">
<TITLE>libstdcxx - Class num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>guard variable for num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::id</primary></indexterm>guard variable for num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::id(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::id</primary></indexterm>num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::id(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</primary></indexterm>typeinfo for num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</primary></indexterm>typeinfo name for num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</primary></indexterm>vtable for num_get&lt;wchar_t, istreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > > -->
<SECT2>
<!--libgroup-->
<TITLE>Class num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; class
is described by <XREF LINKEND="cls-24277-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24277-0">
<TITLE>Primary vtable for num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</primary></indexterm>typeinfo for num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~num_put()</primary></indexterm>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~num_put()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~num_put()</primary></indexterm>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~num_put()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, bool) const</primary></indexterm>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, bool) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, long) const</primary></indexterm>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, long) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, unsigned long) const</primary></indexterm>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, unsigned long) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, long long) const</primary></indexterm>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, long long) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, unsigned long long) const</primary></indexterm>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, unsigned long long) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, double) const</primary></indexterm>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, double) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, long double) const</primary></indexterm>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, long double) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, void const*) const</primary></indexterm>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, void const*) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;  class
is described by <XREF LINKEND="rtti-24077">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24077">
<TITLE>typeinfo for num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</primary></indexterm>typeinfo name for num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>flags:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>8</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>basetype:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for locale::facet</primary></indexterm>typeinfo for locale::facet</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>2</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>basetype:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary></primary></indexterm></ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>2</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; specified in <XREF linkend="tbl-libstdcxx-claxe-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-claxe-ints">
<TITLE>libstdcxx - Class num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;long&gt;(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, long) const</primary></indexterm>ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;long&gt;(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt;(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, unsigned long) const</primary></indexterm>ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt;(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;long long&gt;(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, long long) const</primary></indexterm>ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;long long&gt;(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, long long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long long&gt;(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, unsigned long long) const</primary></indexterm>ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long long&gt;(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, unsigned long long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt;(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, char, double) const</primary></indexterm>ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt;(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, char, double) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt;(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, char, long double) const</primary></indexterm>ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;long double&gt;(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, char, long double) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, void const*) const</primary></indexterm>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, void const*) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, bool) const</primary></indexterm>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, bool) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, double) const</primary></indexterm>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, double) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, long double) const</primary></indexterm>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, long double) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, long) const</primary></indexterm>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, unsigned long) const</primary></indexterm>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, long long) const</primary></indexterm>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, long long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, unsigned long long) const</primary></indexterm>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, unsigned long long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, void const*) const</primary></indexterm>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, void const*) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, bool) const</primary></indexterm>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, bool) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, double) const</primary></indexterm>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, double) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, long double) const</primary></indexterm>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, long double) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, long) const</primary></indexterm>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, unsigned long) const</primary></indexterm>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, long long) const</primary></indexterm>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, long long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, unsigned long long) const</primary></indexterm>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt;, ios_base&, char, unsigned long long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~num_put()</primary></indexterm>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~num_put()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~num_put()</primary></indexterm>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~num_put()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~num_put()</primary></indexterm>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::~num_put()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; specified in <XREF linkend="tbl-libstdcxx-claxe-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-claxe-data">
<TITLE>libstdcxx - Class num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>guard variable for num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::id</primary></indexterm>guard variable for num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::id(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::id</primary></indexterm>num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;::id(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</primary></indexterm>typeinfo for num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</primary></indexterm>typeinfo name for num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;</primary></indexterm>vtable for num_put&lt;char, ostreambuf_iterator&lt;char, char_traits&lt;char&gt; &gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > -->
<SECT2>
<!--libgroup-->
<TITLE>Class num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<PARA>
</PARA>
<PARA>
The virtual table for the std::num_put&lt;wchar_t, std::ostreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; &gt; class
is described by <XREF LINKEND="cls-24263-0">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE id="cls-24263-0">
<TITLE>Primary vtable for num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Virtual Base Offset</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>0</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>RTTI</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</primary></indexterm>typeinfo for num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;0&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~num_put()</primary></indexterm>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~num_put()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;1&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~num_put()</primary></indexterm>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~num_put()</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;2&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, bool) const</primary></indexterm>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, bool) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;3&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, long) const</primary></indexterm>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, long) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;4&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, unsigned long) const</primary></indexterm>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, unsigned long) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;5&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, long long) const</primary></indexterm>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, long long) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;6&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, unsigned long long) const</primary></indexterm>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, unsigned long long) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;7&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, double) const</primary></indexterm>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, double) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;8&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, long double) const</primary></indexterm>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, long double) const</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>vfunc&lsqb;9&rsqb;:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, void const*) const</primary></indexterm>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, void const*) const</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
The Run Time Type Information for the std::num_put&lt;wchar_t, std::ostreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; &gt;  class
is described by <XREF LINKEND="rtti-24065">
</PARA>
<!--classdata-->
<!--table start-->
<TABLE ID="rtti-24065">
<TITLE>typeinfo for num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY>Base Vtable</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>vtable for __cxxabiv1::__si_class_type_info</primary></indexterm>vtable for __cxxabiv1::__si_class_type_info</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>Name</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</primary></indexterm>typeinfo name for num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>flags:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>8</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>basetype:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for locale::facet</primary></indexterm>typeinfo for locale::facet</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>2</ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY>basetype:</ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY><indexterm><primary></primary></indexterm></ENTRY>
<!--entry end-->
<!--entry start-->
<ENTRY>2</ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>


<SECT3>
<TITLE>Interfaces for Class num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::num_put&lt;wchar_t, std::ostreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; &gt; specified in <XREF linkend="tbl-libstdcxx-claxf-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-claxf-ints">
<TITLE>libstdcxx - Class num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::_M_insert_int&lt;long&gt;(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, long) const</primary></indexterm>ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::_M_insert_int&lt;long&gt;(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt;(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, unsigned long) const</primary></indexterm>ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt;(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::_M_insert_int&lt;long long&gt;(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, long long) const</primary></indexterm>ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::_M_insert_int&lt;long long&gt;(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, long long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::_M_insert_int&lt;unsigned long long&gt;(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, unsigned long long) const</primary></indexterm>ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::_M_insert_int&lt;unsigned long long&gt;(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, unsigned long long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::_M_insert_float&lt;double&gt;(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, char, double) const</primary></indexterm>ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::_M_insert_float&lt;double&gt;(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, char, double) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::_M_insert_float&lt;long double&gt;(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, char, long double) const</primary></indexterm>ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::_M_insert_float&lt;long double&gt;(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, char, long double) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, void const*) const</primary></indexterm>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, void const*) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, bool) const</primary></indexterm>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, bool) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, double) const</primary></indexterm>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, double) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, long double) const</primary></indexterm>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, long double) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, long) const</primary></indexterm>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, unsigned long) const</primary></indexterm>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, long long) const</primary></indexterm>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, long long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, unsigned long long) const</primary></indexterm>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, unsigned long long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, void const*) const</primary></indexterm>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, void const*) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, bool) const</primary></indexterm>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, bool) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, double) const</primary></indexterm>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, double) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, long double) const</primary></indexterm>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, long double) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, long) const</primary></indexterm>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, unsigned long) const</primary></indexterm>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, unsigned long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, long long) const</primary></indexterm>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, long long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, unsigned long long) const</primary></indexterm>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::do_put(ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt;, ios_base&, wchar_t, unsigned long long) const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~num_put()</primary></indexterm>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~num_put()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~num_put()</primary></indexterm>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~num_put()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~num_put()</primary></indexterm>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::~num_put()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
<PARA>
An LSB conforming implementation shall provide the generic data interfaces
for Class std::num_put&lt;wchar_t, std::ostreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt; &gt; specified in <XREF linkend="tbl-libstdcxx-claxf-data">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupdata-->
<!--table start-->
<TABLE id="tbl-libstdcxx-claxf-data">
<TITLE>libstdcxx - Class num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt; Data Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>guard variable for num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::id</primary></indexterm>guard variable for num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::id(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::id</primary></indexterm>num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;::id(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo for num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</primary></indexterm>typeinfo for num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>typeinfo name for num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</primary></indexterm>typeinfo name for num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>vtable for num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;</primary></indexterm>vtable for num_put&lt;wchar_t, ostreambuf_iterator&lt;wchar_t, char_traits&lt;wchar_t&gt; &gt; &gt;(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.1">&lsqb;CXXABI]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::gslice -->
<SECT2>
<!--libgroup-->
<TITLE>Class gslice</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for gslice</TITLE>
<PARA>
</PARA>
</SECT3>


<SECT3>
<TITLE>Interfaces for Class gslice</TITLE>
<PARA>
No external methods are defined for libstdcxx - Class std::gslice
in this part of the specification. See also the relevant architecture specific part of this specification.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::__basic_file<char> -->
<SECT2>
<!--libgroup-->
<TITLE>Class __basic_file&lt;char&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for __basic_file&lt;char&gt;</TITLE>
<PARA>
</PARA>
</SECT3>


<SECT3>
<TITLE>Interfaces for Class __basic_file&lt;char&gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::__basic_file&lt;char&gt; specified in <XREF linkend="tbl-libstdcxx-claxg-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-claxg-ints">
<TITLE>libstdcxx - Class __basic_file&lt;char&gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__basic_file&lt;char&gt;::is_open() const</primary></indexterm>__basic_file&lt;char&gt;::is_open() const(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__basic_file&lt;char&gt;::fd()</primary></indexterm>__basic_file&lt;char&gt;::fd()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__basic_file&lt;char&gt;::file()</primary></indexterm>__basic_file&lt;char&gt;::file()(GLIBCXX_3.4.1) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__basic_file&lt;char&gt;::open(char const*, _Ios_Openmode, int)</primary></indexterm>__basic_file&lt;char&gt;::open(char const*, _Ios_Openmode, int)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__basic_file&lt;char&gt;::sync()</primary></indexterm>__basic_file&lt;char&gt;::sync()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__basic_file&lt;char&gt;::close()</primary></indexterm>__basic_file&lt;char&gt;::close()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__basic_file&lt;char&gt;::sys_open(_IO_FILE*, _Ios_Openmode)</primary></indexterm>__basic_file&lt;char&gt;::sys_open(_IO_FILE*, _Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__basic_file&lt;char&gt;::sys_open(int, _Ios_Openmode)</primary></indexterm>__basic_file&lt;char&gt;::sys_open(int, _Ios_Openmode)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__basic_file&lt;char&gt;::showmanyc()</primary></indexterm>__basic_file&lt;char&gt;::showmanyc()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__basic_file&lt;char&gt;::__basic_file(pthread_mutex_t*)</primary></indexterm>__basic_file&lt;char&gt;::__basic_file(pthread_mutex_t*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__basic_file&lt;char&gt;::__basic_file(pthread_mutex_t*)</primary></indexterm>__basic_file&lt;char&gt;::__basic_file(pthread_mutex_t*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__basic_file&lt;char&gt;::~__basic_file()</primary></indexterm>__basic_file&lt;char&gt;::~__basic_file()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__basic_file&lt;char&gt;::~__basic_file()</primary></indexterm>__basic_file&lt;char&gt;::~__basic_file()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::_List_node_base -->
<SECT2>
<!--libgroup-->
<TITLE>Class _List_node_base</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for Class _List_node_base</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::_List_node_base specified in <XREF linkend="tbl-libstdcxx-claxh-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-claxh-ints">
<TITLE>libstdcxx - Class _List_node_base Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>_List_node_base::hook(_List_node_base*)</primary></indexterm>_List_node_base::hook(_List_node_base*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.3">&lsqb;LSB]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>_List_node_base::swap(_List_node_base&, _List_node_base&)</primary></indexterm>_List_node_base::swap(_List_node_base&, _List_node_base&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.3">&lsqb;LSB]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>_List_node_base::unhook()</primary></indexterm>_List_node_base::unhook()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.3">&lsqb;LSB]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>_List_node_base::reverse()</primary></indexterm>_List_node_base::reverse()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.3">&lsqb;LSB]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>_List_node_base::transfer(_List_node_base*, _List_node_base*)</primary></indexterm>_List_node_base::transfer(_List_node_base*, _List_node_base*)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.3">&lsqb;LSB]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::valarray<unsigned int> -->
<SECT2>
<!--libgroup-->
<TITLE>Class valarray&lt;unsigned int&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for valarray&lt;unsigned int&gt;</TITLE>
<PARA>
</PARA>
</SECT3>


<SECT3>
<TITLE>Interfaces for Class valarray&lt;unsigned int&gt;</TITLE>
<PARA>
No external methods are defined for libstdcxx - Class std::valarray&lt;unsigned int&gt;
in this part of the specification. See also the relevant architecture specific part of this specification.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::allocator<char> -->
<SECT2>
<!--libgroup-->
<TITLE>Class allocator&lt;char&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for allocator&lt;char&gt;</TITLE>
<PARA>
</PARA>
</SECT3>


<SECT3>
<TITLE>Interfaces for Class allocator&lt;char&gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::allocator&lt;char&gt; specified in <XREF linkend="tbl-libstdcxx-claxi-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-claxi-ints">
<TITLE>libstdcxx - Class allocator&lt;char&gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>allocator&lt;char&gt;::allocator(allocator&lt;char&gt; const&)</primary></indexterm>allocator&lt;char&gt;::allocator(allocator&lt;char&gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>allocator&lt;char&gt;::allocator()</primary></indexterm>allocator&lt;char&gt;::allocator()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>allocator&lt;char&gt;::allocator(allocator&lt;char&gt; const&)</primary></indexterm>allocator&lt;char&gt;::allocator(allocator&lt;char&gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>allocator&lt;char&gt;::allocator()</primary></indexterm>allocator&lt;char&gt;::allocator()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>allocator&lt;char&gt;::~allocator()</primary></indexterm>allocator&lt;char&gt;::~allocator()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>allocator&lt;char&gt;::~allocator()</primary></indexterm>allocator&lt;char&gt;::~allocator()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::allocator<wchar_t> -->
<SECT2>
<!--libgroup-->
<TITLE>Class allocator&lt;wchar_t&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Class data for allocator&lt;wchar_t&gt;</TITLE>
<PARA>
</PARA>
</SECT3>


<SECT3>
<TITLE>Interfaces for Class allocator&lt;wchar_t&gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::allocator&lt;wchar_t&gt; specified in <XREF linkend="tbl-libstdcxx-claxj-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-claxj-ints">
<TITLE>libstdcxx - Class allocator&lt;wchar_t&gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>allocator&lt;wchar_t&gt;::allocator(allocator&lt;wchar_t&gt; const&)</primary></indexterm>allocator&lt;wchar_t&gt;::allocator(allocator&lt;wchar_t&gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>allocator&lt;wchar_t&gt;::allocator()</primary></indexterm>allocator&lt;wchar_t&gt;::allocator()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>allocator&lt;wchar_t&gt;::allocator(allocator&lt;wchar_t&gt; const&)</primary></indexterm>allocator&lt;wchar_t&gt;::allocator(allocator&lt;wchar_t&gt; const&)(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>allocator&lt;wchar_t&gt;::allocator()</primary></indexterm>allocator&lt;wchar_t&gt;::allocator()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>allocator&lt;wchar_t&gt;::~allocator()</primary></indexterm>allocator&lt;wchar_t&gt;::~allocator()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>allocator&lt;wchar_t&gt;::~allocator()</primary></indexterm>allocator&lt;wchar_t&gt;::~allocator()(GLIBCXX_3.4) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class __gnu_cxx::__pool<true> -->
<SECT2>
<!--libgroup-->
<TITLE>Class __gnu_cxx::__pool&lt;true&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for Class __gnu_cxx::__pool&lt;true&gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class __gnu_cxx::__pool&lt;true&gt; specified in <XREF linkend="tbl-libstdcxx-claxk-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-claxk-ints">
<TITLE>libstdcxx - Class __gnu_cxx::__pool&lt;true&gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__gnu_cxx::__pool&lt;true&gt;::_M_destroy()</primary></indexterm>__gnu_cxx::__pool&lt;true&gt;::_M_destroy()(GLIBCXX_3.4.4) <LINK LINKEND="REFSTD.libstdcxx.3">&lsqb;LSB]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__gnu_cxx::__pool&lt;true&gt;::_M_initialize(void (*)(void*))</primary></indexterm>__gnu_cxx::__pool&lt;true&gt;::_M_initialize(void (*)(void*))(GLIBCXX_3.4.4) <LINK LINKEND="REFSTD.libstdcxx.3">&lsqb;LSB]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__gnu_cxx::__pool&lt;true&gt;::_M_initialize()</primary></indexterm>__gnu_cxx::__pool&lt;true&gt;::_M_initialize()(GLIBCXX_3.4.6) <LINK LINKEND="REFSTD.libstdcxx.3">&lsqb;LSB]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__gnu_cxx::__pool&lt;true&gt;::_M_get_thread_id()</primary></indexterm>__gnu_cxx::__pool&lt;true&gt;::_M_get_thread_id()(GLIBCXX_3.4.4) <LINK LINKEND="REFSTD.libstdcxx.3">&lsqb;LSB]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__gnu_cxx::__pool&lt;true&gt;::_M_destroy_thread_key(void*)</primary></indexterm>__gnu_cxx::__pool&lt;true&gt;::_M_destroy_thread_key(void*)(GLIBCXX_3.4.4) <LINK LINKEND="REFSTD.libstdcxx.3">&lsqb;LSB]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class __gnu_cxx::__pool<false> -->
<SECT2>
<!--libgroup-->
<TITLE>Class __gnu_cxx::__pool&lt;false&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for Class __gnu_cxx::__pool&lt;false&gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class __gnu_cxx::__pool&lt;false&gt; specified in <XREF linkend="tbl-libstdcxx-claxl-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-claxl-ints">
<TITLE>libstdcxx - Class __gnu_cxx::__pool&lt;false&gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__gnu_cxx::__pool&lt;false&gt;::_M_destroy()</primary></indexterm>__gnu_cxx::__pool&lt;false&gt;::_M_destroy()(GLIBCXX_3.4.4) <LINK LINKEND="REFSTD.libstdcxx.3">&lsqb;LSB]</LINK></ENTRY>
<!--entry end-->
</ROW>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__gnu_cxx::__pool&lt;false&gt;::_M_initialize()</primary></indexterm>__gnu_cxx::__pool&lt;false&gt;::_M_initialize()(GLIBCXX_3.4.4) <LINK LINKEND="REFSTD.libstdcxx.3">&lsqb;LSB]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class __gnu_cxx::free_list -->
<SECT2>
<!--libgroup-->
<TITLE>Class __gnu_cxx::free_list</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for Class __gnu_cxx::free_list</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class __gnu_cxx::free_list specified in <XREF linkend="tbl-libstdcxx-claxm-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-claxm-ints">
<TITLE>libstdcxx - Class __gnu_cxx::free_list Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>__gnu_cxx::free_list::_M_clear()</primary></indexterm>__gnu_cxx::free_list::_M_clear()(GLIBCXX_3.4.4) <LINK LINKEND="REFSTD.libstdcxx.3">&lsqb;LSB]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::locale::_Impl -->
<SECT2>
<!--libgroup-->
<TITLE>Class locale::_Impl</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for Class locale::_Impl</TITLE>
<PARA>
No external methods are defined for libstdcxx - Class std::locale::_Impl
in this part of the specification. See also the relevant architecture specific part of this specification.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name Namespace std Functions -->
<SECT2>
<!--libgroup-->
<TITLE>Namespace std Functions</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for Namespace std Functions</TITLE>
<PARA>
No external methods are defined for libstdcxx - Namespace std Functions
in this part of the specification. See also the relevant architecture specific part of this specification.
</PARA>
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::char_traits<char> -->
<SECT2>
<!--libgroup-->
<TITLE>Class char_traits&lt;char&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for Class char_traits&lt;char&gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::char_traits&lt;char&gt; specified in <XREF linkend="tbl-libstdcxx-claxn-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-claxn-ints">
<TITLE>libstdcxx - Class char_traits&lt;char&gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>char_traits&lt;char&gt;::eq(char const&, char const&)</primary></indexterm>char_traits&lt;char&gt;::eq(char const&, char const&)(GLIBCXX_3.4.5) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
<!-- debug: database interface name Class std::char_traits<wchar_t> -->
<SECT2>
<!--libgroup-->
<TITLE>Class char_traits&lt;wchar_t&gt;</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for Class char_traits&lt;wchar_t&gt;</TITLE>
<PARA>
An LSB conforming implementation shall provide the generic methods
for Class std::char_traits&lt;wchar_t&gt; specified in <XREF linkend="tbl-libstdcxx-claxo-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<!--table start-->
<TABLE id="tbl-libstdcxx-claxo-ints">
<TITLE>libstdcxx - Class char_traits&lt;wchar_t&gt; Function Interfaces</TITLE>
<TGROUP COLS=1>
<TBODY>
<ROW>
<!--entry start-->
<ENTRY><indexterm><primary>char_traits&lt;wchar_t&gt;::eq(wchar_t const&, wchar_t const&)</primary></indexterm>char_traits&lt;wchar_t&gt;::eq(wchar_t const&, wchar_t const&)(GLIBCXX_3.4.5) <LINK LINKEND="REFSTD.libstdcxx.2">&lsqb;ISOCXX]</LINK></ENTRY>
<!--entry end-->
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<!--table end-->
</SECT3>
</SECT2>
</SECT1>
<!-- empty header file All/ctype -->
<!-- empty header file All/cxxabi.h -->
<!-- empty header file All/iostream -->
<!-- empty header file All/typeinfo -->
<SECT1 ID=libstdcxxman>
<TITLE>Interface Definitions for libstdcxx</TITLE>
<PARA>
The interfaces defined on the following pages are included in libstdcxx and are defined
by this specification.
Unless otherwise noted, these interfaces shall be included
in the source standard.
</PARA>
<PARA>
Other interfaces listed in <XREF LINKEND=libstdcxx> shall behave as described
in the referenced base document.
</PARA>
<!-- MISSING DEFINITION FOR _ZN9__gnu_cxx17__pool_alloc_base12_M_get_mutexEv -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR _ZN9__gnu_cxx18stdio_sync_filebufIcSt11char_traitsIcEE4fileEv -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR _ZN9__gnu_cxx18stdio_sync_filebufIwSt11char_traitsIwEE4fileEv -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR _ZN9__gnu_cxx6__poolILb0EE10_M_destroyEv -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR _ZN9__gnu_cxx6__poolILb0EE13_M_initializeEv -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR _ZN9__gnu_cxx6__poolILb1EE10_M_destroyEv -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR _ZN9__gnu_cxx6__poolILb1EE13_M_initializeEPFvPvE -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR _ZN9__gnu_cxx6__poolILb1EE13_M_initializeEv -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR _ZN9__gnu_cxx6__poolILb1EE16_M_get_thread_idEv -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR _ZN9__gnu_cxx6__poolILb1EE21_M_destroy_thread_keyEPv -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR _ZN9__gnu_cxx9free_list8_M_clearEv -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR _ZNSt15_List_node_base4hookEPS_ -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR _ZNSt15_List_node_base4swapERS_S0_ -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR _ZNSt15_List_node_base6unhookEv -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR _ZNSt15_List_node_base7reverseEv -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR _ZNSt15_List_node_base8transferEPS_S0_ -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR _ZNSt6locale5_Impl16_M_install_facetEPKNS_2idEPKNS_5facetE -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR _ZNSt6locale5_Impl16_M_replace_facetEPKS0_PKNS_2idE -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR _ZNSt6locale5_ImplD1Ev -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR _ZNSt6locale5_ImplD2Ev -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR _ZSt18_Rb_tree_decrementPKSt18_Rb_tree_node_base -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR _ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR _ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR _ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR _ZSt20_Rb_tree_black_countPKSt18_Rb_tree_node_baseS1_ -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR _ZSt20_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_ -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR _ZSt21_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_ -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR _ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_ -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR _ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_ -->
<!-- Lets just hope nobody notices -->
</SECT1>
<!-- End of text generated from database -->
