<REFENTRY ID="baselib-wcsnlen-3"> <REFMETA>
<REFENTRYTITLE>wcsnlen</REFENTRYTITLE>
<REFMISCINFO>Base Libraries</REFMISCINFO>
</REFMETA>
<REFNAMEDIV>
<REFNAME>wcsnlen</REFNAME>
<REFPURPOSE>
determine the length of a fixed-size wide-character string
</REFPURPOSE>
</REFNAMEDIV>
<REFSYNOPSISDIV>
<REFSYNOPSISDIVINFO>
<DATE>2 April 2001</DATE>
</REFSYNOPSISDIVINFO>
<FUNCSYNOPSIS>
<FUNCSYNOPSISINFO>
#include &lt;wchar.h&gt;
</FUNCSYNOPSISINFO>
<FUNCPROTOTYPE>
 <FUNCDEF>size_t 
  <FUNCTION>wcsnlen</FUNCTION></FUNCDEF>
 <PARAMDEF>const wchar_t 
  <PARAMETER><REPLACEABLE>*s</REPLACEABLE></PARAMETER></PARAMDEF>
 <PARAMDEF>size_t 
  <PARAMETER><REPLACEABLE>maxlen</REPLACEABLE></PARAMETER></PARAMDEF>
</FUNCPROTOTYPE>
</FUNCSYNOPSIS>
</REFSYNOPSISDIV>
<REFSECT1>
<REFSECT1INFO>
<DATE>2 April 2001</DATE>
</REFSECT1INFO>
<TITLE>Description
</TITLE>
<PARA>
<FUNCTION>wcsnlen</FUNCTION> is the wide-character equivalent of 
<FUNCTION>strnlen</FUNCTION>. It returns the number of wide-characters in 
the string <PARAMETER>s</PARAMETER>, not including the terminating 
<TOKEN>L'\0'</TOKEN> character, but at most <PARAMETER>maxlen</PARAMETER>. 
In doing this, <FUNCTION>wcsnlen</FUNCTION> looks only at the first 
<PARAMETER>maxlen</PARAMETER> wide-characters at <PARAMETER>s</PARAMETER> 
and never beyond <PARAMETER>s</PARAMETER> + <PARAMETER>maxlen</PARAMETER>.
</PARA>
</REFSECT1>
<REFSECT1>
<TITLE>Return Value
</TITLE>
<PARA>
<FUNCTION>wcsnlen</FUNCTION> returns 
<FUNCTION>wcslen</FUNCTION><PARAMETER>(s)</PARAMETER> if that is less than 
<PARAMETER>maxlen</PARAMETER>, or <PARAMETER>maxlen</PARAMETER> if there is 
no <TOKEN>L'\0'</TOKEN> character among the first 
<PARAMETER>maxlen</PARAMETER> wide characters pointed to by 
<PARAMETER>s</PARAMETER>.
</PARA>
</REFSECT1>
<REFSECT1>
<TITLE>Notes
</TITLE>
<PARA>
The behavior of <FUNCTION>wcsncasecmp</FUNCTION> depends on the 
<VARNAME>LC_CTYPE</VARNAME> category of the current locale.
</PARA>

<!--	  LDP GENERAL PUBLIC LICENSE  -->
<!--        Version 1a, November 1998   -->

</REFSECT1>
</REFENTRY>

