<REFENTRY ID="baselib-system-3"> <REFMETA>
<REFENTRYTITLE>system</REFENTRYTITLE>
<REFMISCINFO>Base Libraries</REFMISCINFO>
</REFMETA>
<REFNAMEDIV>
<REFNAME>system
</REFNAME>
<REFPURPOSE>
execute a shell command
</REFPURPOSE>
</REFNAMEDIV>

<REFSYNOPSISDIV>
<REFSYNOPSISDIVINFO>
<DATE>13 April 2001</DATE>
</REFSYNOPSISDIVINFO>
<FUNCSYNOPSIS>
<FUNCSYNOPSISINFO>
#include &lt;stdlib.h&gt;
</FUNCSYNOPSISINFO>
<FUNCPROTOTYPE>
 <FUNCDEF>int 
  <FUNCTION>system</FUNCTION></FUNCDEF>
 <PARAMDEF>const char 
  <PARAMETER><REPLACEABLE>*string</REPLACEABLE></PARAMETER></PARAMDEF>
</FUNCPROTOTYPE>
</FUNCSYNOPSIS>
</REFSYNOPSISDIV>

<REFSECT1>
<REFSECT1INFO>
<DATE>13 April 2001</DATE>
</REFSECT1INFO>
<TITLE>Description
</TITLE>
<PARA>
<FUNCTION>system</FUNCTION> executes a command specified in 
<PARAMETER>string</PARAMETER> by calling <LITERAL>/bin/sh -c 
string</LITERAL>, and returns after the command has been completed. 
During execution of the command, <VARNAME>SIGCHLD</VARNAME> will be 
blocked, and <VARNAME>SIGINT</VARNAME> and <VARNAME>SIGQUIT</VARNAME> 
will be ignored.
</PARA>
</REFSECT1>

<REFSECT1>
<TITLE>Return Value
</TITLE>
<PARA>
The value <RETURNVALUE>127</RETURNVALUE> returned if the 
<FUNCTION>execve</FUNCTION> call for <LITERAL>/bin/sh</LITERAL> 
fails, <RETURNVALUE>-1</RETURNVALUE> if there was another error 
and the return code of the command otherwise.
</PARA>
<PARA>
If the value of string is <TOKEN>NULL</TOKEN>, <FUNCTION>system</FUNCTION> 
returns a nonzero value if the shell is available, 
and zero if not.
</PARA>
<PARA>
<FUNCTION>system</FUNCTION> does not affect the wait status of any 
other children.
</PARA>
</REFSECT1>

<REFSECT1>
<TITLE>Notes
</TITLE>
<PARA>
The fact that <FUNCTION>system</FUNCTION> ignores interrupts is often 
not what a program wants. <XREF LINKEND=STD.SUSv3>
describes some of the consequences; an 
additional consequence is that a program calling <FUNCTION>system</FUNCTION> 
from a loop cannot be reliably interrupted. Many programs will want to use 
the <FUNCTION>exec</FUNCTION>(3) family of functions instead.
</PARA>
<PARA>
Do not use <FUNCTION>system</FUNCTION> from a program with 
<VARNAME>suid</VARNAME> or <VARNAME>sgid</VARNAME> privileges, 
because strange values for some environment variables might be used 
to subvert system integrity. Use the <FUNCTION>exec</FUNCTION>(3) 
family of functions instead, but not <FUNCTION>execlp</FUNCTION>(3) 
or <FUNCTION>execvp</FUNCTION>(3). <FUNCTION>system</FUNCTION> will 
not, in fact, work properly from programs with <VARNAME>suid</VARNAME> 
or <VARNAME>sgid</VARNAME> privileges on systems on which 
<LITERAL>/bin/sh</LITERAL> is <EMPHASIS>bash</EMPHASIS> version 2, 
since <EMPHASIS>bash</EMPHASIS> 2 drops privileges on startup. 
(Debian uses a modified <EMPHASIS>bash</EMPHASIS> which does not do 
this when invoked as <LITERAL>sh</LITERAL>.)
</PARA>
<PARA>
The check for the availability of <LITERAL>/bin/sh</LITERAL> 
is not actually performed; it is always assumed to be available. 
<EMPHASIS>ISO C</EMPHASIS> specifies the check, but 
<EMPHASIS>POSIX.2</EMPHASIS> specifies that the return shall 
always be nonzero, since a system without the 
shell is not conforming, and it is this that is implemented.
</PARA>
<PARA>
It is possible for the shell command to return 
<RETURNVALUE>127</RETURNVALUE>, so that code is not a sure 
indication that the <FUNCTION>execve</FUNCTION> call failed; check 
the global variable <VARNAME>errno</VARNAME> to make sure.
</PARA>
</REFSECT1>
<!--	  LDP GENERAL PUBLIC LICENSE  -->
<!--        Version 1a, November 1998   -->
</REFENTRY>
