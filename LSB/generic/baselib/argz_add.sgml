<refentry id="baselib-argz-add">

<refmeta>
<refentrytitle>
argz_add,
argz_add_sep,
argz_append,
argz_count,
argz_create,
argz_create_sep,
argz_delete,
argz_extract,
argz_insert,
argz_next,
argz_replace,
argz_stringify
</refentrytitle>
<refmiscinfo>Base Libraries</refmiscinfo>
</refmeta>

<refnamediv>
<refname>
argz_add,
argz_add_sep,
argz_append,
argz_count,
argz_create,
argz_create_sep,
argz_delete,
argz_extract,
argz_insert,
argz_next,
argz_replace,
argz_stringify
</refname>
<refpurpose>Operate on argz vectors</refpurpose>
<indexterm id="ix-baselib-argz-add">
	<primary>argz_add</primary></indexterm>
<indexterm id="ix-baselib-argz-add-sep">
	<primary>argz_add_sep</primary></indexterm>
<indexterm id="ix-baselib-argz-append">
	<primary>argz_append</primary></indexterm>
<indexterm id="ix-baselib-argz-count">
	<primary>argz_count</primary></indexterm>
<indexterm id="ix-baselib-argz-create">
	<primary>argz_create</primary></indexterm>
<indexterm id="ix-baselib-argz-create-sep">
	<primary>argz_create_sep</primary></indexterm>
<indexterm id="ix-baselib-argz-delete">
	<primary>argz_delete</primary></indexterm>
<indexterm id="ix-baselib-argz-extract">
	<primary>argz_extract</primary></indexterm>
<indexterm id="ix-baselib-argz-insert">
	<primary>argz_insert</primary></indexterm>
<indexterm id="ix-baselib-argz-next">
	<primary>argz_next</primary></indexterm>
<indexterm id="ix-baselib-argz-replace">
	<primary>argz_replace</primary></indexterm>
<indexterm id="ix-baselib-argz-stringify">
	<primary>argz_stringify</primary></indexterm>
</refnamediv>

<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;argz.h&gt;
</funcsynopsisinfo>

<funcprototype>
<funcdef>error_t
<function>argz_add</function>
</funcdef>
<paramdef>char **
<parameter>argz</parameter>
</paramdef>
<paramdef>size_t *
<parameter>argz_len</parameter>
</paramdef>
<paramdef>const char *
<parameter>str</parameter>
</paramdef>
</funcprototype>

<funcprototype>
<funcdef>error_t
<function>argz_add_sep</function>
</funcdef>
<paramdef>char **
<parameter>argz</parameter>
</paramdef>
<paramdef>size_t *
<parameter>argz_len</parameter>
</paramdef>
<paramdef>const char *
<parameter>str</parameter>
</paramdef>
<paramdef>int
<parameter>sep</parameter>
</paramdef>
</funcprototype>

<funcprototype>
<funcdef>error_t
<function>argz_append</function>
</funcdef>
<paramdef>char **
<parameter>argz</parameter>
</paramdef>
<paramdef>size_t *
<parameter>argz_len</parameter>
</paramdef>
<paramdef>const char *
<parameter>buf</parameter>
</paramdef>
<paramdef>size_t
<parameter>buf_len</parameter>
</paramdef>
</funcprototype>

<funcprototype>
<funcdef>size_t
<function>argz_count</function>
</funcdef>
<paramdef>const char *
<parameter>argz</parameter>
</paramdef>
<paramdef>size_t *
<parameter>argz_len</parameter>
</paramdef>
</funcprototype>

<funcprototype>
<funcdef>error_t
<function>argz_create</function>
</funcdef>
<paramdef>char * const 
<parameter>argv</parameter>
</paramdef>
<paramdef>char **
<parameter>argz</parameter>
</paramdef>
<paramdef>size_t *
<parameter>argz_len</parameter>
</paramdef>
</funcprototype>

<funcprototype>
<funcdef>error_t
<function>argz_create_sep</function>
</funcdef>
<paramdef>const char *
<parameter>str</parameter>
</paramdef>
<paramdef>int
<parameter>sep</parameter>
</paramdef>
<paramdef>char **
<parameter>argz</parameter>
</paramdef>
<paramdef>size_t *
<parameter>argz_len</parameter>
</paramdef>
</funcprototype>

<funcprototype>
<funcdef>void
<function>argz_delete</function>
</funcdef>
<paramdef>char **
<parameter>argz</parameter>
</paramdef>
<paramdef>size_t *
<parameter>argz_len</parameter>
</paramdef>
<paramdef>char *
<parameter>entry</parameter>
</paramdef>
</funcprototype>

<funcprototype>
<funcdef>void
<function>argz_extract</function>
</funcdef>
<paramdef>const char *
<parameter>argz</parameter>
</paramdef>
<paramdef>size_t
<parameter>argz_len</parameter>
</paramdef>
<paramdef>char **
<parameter>argv</parameter>
</paramdef>
</funcprototype>

<funcprototype>
<funcdef>error_t
<function>argz_insert</function>
</funcdef>
<paramdef>char **
<parameter>argz_insert</parameter>
</paramdef>
<paramdef>size_t *
<parameter>argz_len</parameter>
</paramdef>
<paramdef>char *
<parameter>before</parameter>
</paramdef>
<paramdef>const char *
<parameter>entry</parameter>
</paramdef>
</funcprototype>

<funcprototype>
<funcdef>char
<function>argz_next</function>
</funcdef>
<paramdef>const char *
<parameter>argz</parameter>
</paramdef>
<paramdef>size_t
<parameter>argz_len</parameter>
</paramdef>
<paramdef>const char *
<parameter>entry</parameter>
</paramdef>
</funcprototype>

<funcprototype>
<funcdef>error_t
<function>argz_replace</function>
</funcdef>
<paramdef>char **
<parameter>argz</parameter>
</paramdef>
<paramdef>size_t *
<parameter>argz_len</parameter>
</paramdef>
<paramdef>const char *
<parameter>str</parameter>
</paramdef>
<paramdef>const char *
<parameter>with</parameter>
</paramdef>
<paramdef>unsigned int *
<parameter>replace_count</parameter>
</paramdef>
</funcprototype>

<funcprototype>
<funcdef>void
<function>argz_stringify</function>
</funcdef>
<paramdef>char *
<parameter>argz</parameter>
</paramdef>
<paramdef>size_t
<parameter>argz_len</parameter>
</paramdef>
<paramdef>int
<parameter>sep</parameter>
</paramdef>
</funcprototype>

</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
The argz functions operate on argz vectors, which are typically used
to more easily manipulate program arguments, of the form described 
in <XREF LINKEND="STD.ISOC99"> in section 5.1.2.2.1, Program Startup.
While an argv is an array of character pointers to strings,
an argz vector is a set of strings, separated by
null characters, in contiguous memory; the vector is described by
a pointer to the first element and a size.  There is no limitation
that the argz must be made up of program arguments.
</para>
<para>
The argz functions which change argz vectors expect them to use
memory allocated using <function>malloc</function>, and will
themselves use <function>malloc</function> or <function>realloc</function>.
</para>
<para>
The <function>argz_create</function> function converts an argv 
vector identified by <varname>argv</varname>
to an argz vector with the same elements, identified by
<varname>argz</varname> and <varname>argz_len</varname>.
</para>
<para>
The <function>argz_create_sep</function> function converts the
string identified by <varname>str</varname>,
spliting into a separate string at each occurence of 
<varname>sep</varname>, to an argz vector identified by
<varname>argz</varname> and <varname>argz_len</varname>. 
</para>
<para>
The <function>argz_add</function> function adds the
string identified by <varname>str</varname> to the vector identified
by <varname>argz</varname> and <varname>argz_len</varname>, updating
<varname>argz</varname> and <varname>argz_len</varname>.
</para>
<para>
The <function>argz_add_sep</function> function adds the
string identified by <varname>str</varname>,
spliting into a separate string at each occurence of 
<varname>sep</varname>, to the vector identified
by <varname>argz</varname>, updating
<varname>argz</varname> and <varname>argz_len</varname>. 
</para>
<para>
The <function>argz_append</function> function appends
the argz vector identified by <varname>buf</varname> and
<varname>buf_len</varname> to the argz vector identified by
<varname>argz</varname> and <varname>argz_len</varname>,
thus updating <varname>argz</varname> and <varname>argz_len</varname>.
</para>
<para>
The <function>argz_count</function> function returns the number
of strings in the argz vector identified by
<varname>argz</varname> and <varname>argz_len</varname>.
</para>
<para>
The <function>argz_delete</function> function removes the string
identified by <varname>entry</varname> from the 
the argz vector identified by
<varname>argz</varname>, <varname>argz_len</varname>, updating
<varname>argz</varname> and <varname>argz_len</varname>.
</para>
<para>
The <function>argz_extract</function> function performs
the inverse of <function>argz_create</function>. It converts
an argz vector identified by 
<varname>argz</varname> and <varname>argz_len</varname> 
to an argv vector identified by <varname>argv</varname>
with the same elements.
</para>
<para>
The <function>argz_insert</function> function inserts the string
identified by <varname>entry</varname> at position
<varname>before</varname> to the the argz vector identified by
<varname>argz</varname> and <varname>argz_len</varname>, updating
<varname>argz</varname> and <varname>argz_len</varname>.
</para>
<para>
The <function>argz_next</function> function returns the entry
following the entry identfied by <varname>entry</varname>
in the argz vector identified by
<varname>argz</varname> and <varname>argz_len</varname>.
If <varname>entry</varname> is <constant>NULL</constant>
the first entry is returned. This function can be used to
step through an argz vector by obtaining the first entry
by passing <constant>NULL</constant>, then passing the just
obtained value to the next call, and so on. 
<constant>NULL</constant> is returned if there is no following entry.
</para>
<para>
The <function>argz_replace</function> function replaces each
occurrence of <varname>str</varname> in the argz vector identified by
<varname>argz</varname> and <varname>argz_len</varname> with
<varname>with</varname>, updating
<varname>argz</varname> and <varname>argz_len</varname>.
The counter pointed to by <varname>replace_count</varname> will be 
incremented by the number of replacements unless <constant>NULL</constant>
is passed for <varname>replace_count</varname>.
</para>
<para>
The <function>argz_stringify</function> function performs the
inverse of <function>argz_create_sep</function>. It converts
the argz vector identified by 
<varname>argz</varname> and <varname>argz_len</varname> 
into a regular string, with the strings in the original
vector separated by <varname>sep</varname> in the converted string.
The conversion is done in place, so in effect each null byte in 
<varname>argz</varname> but the last one is replaced by
<varname>sep</varname>.
</para>
</refsect1>

<refsect1>
<title>Return Value</title>
<para>
All of the argz functions that perform memory allocation return an
<type>error_t</type> type. These functions return
<literal>0</literal> on success; if memory allocation fails,
they return <errorname>ENOMEM</errorname>.
</para>
<para>
<function>argz_count</function> returns a count of substrings
in the argz vector as a <type>size_t</type> type.
</para>
<para>
<function>argz_next</function> returns a pointer to a substring
in an argz vector, or <constant>NULL</constant>.
</para>
</refsect1>
<refsect1>
<title>See Also</title>
<para>
<xref linkend="baselib-envz-add">
</para>
</refsect1>

</refentry>
