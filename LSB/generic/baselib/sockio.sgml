<REFENTRY ID="baselib-sockio-2"> <REFMETA>
<REFENTRYTITLE>sockio</REFENTRYTITLE>
<REFMISCINFO>Base Libraries</REFMISCINFO>
</REFMETA>
<REFNAMEDIV>
<REFNAME>sockio
</REFNAME>
<REFPURPOSE>
socket ioctl commands
</REFPURPOSE>
</REFNAMEDIV>

<REFSYNOPSISDIV>
<REFSYNOPSISDIVINFO>
<DATE>29 August 2002</DATE>
</REFSYNOPSISDIVINFO>
<FUNCSYNOPSIS>
<FUNCSYNOPSISINFO>
#include &lt;sys/socket.h&gt;
#include &lt;net/if.h&gt;
#include &lt;netinet/in.h&gt;
</FUNCSYNOPSISINFO>
<FUNCPROTOTYPE>
 <FUNCDEF>int 
  <FUNCTION>ioctl</FUNCTION></FUNCDEF>
 <PARAMDEF>int 
  <PARAMETER><REPLACEABLE>sockfd</REPLACEABLE></PARAMETER></PARAMDEF>
 <PARAMDEF>int 
  <PARAMETER><REPLACEABLE>request</REPLACEABLE></PARAMETER></PARAMDEF>
 <PARAMDEF>void *
  <PARAMETER><REPLACEABLE>argp</REPLACEABLE></PARAMETER></PARAMDEF>
</FUNCPROTOTYPE>
</FUNCSYNOPSIS>
</REFSYNOPSISDIV>

<REFSECT1>
<REFSECT1INFO>
<DATE>29 August 2002</DATE>
</REFSECT1INFO>
<TITLE>Description
</TITLE>
<PARA>
Socket <function>ioctl</function> commands are a subset of the 
<FUNCTION>ioctl</FUNCTION> calls, which can perform a variety of 
functions on sockets. <PARAMETER>sockfd</PARAMETER> shall be an
open file descriptor referring to a socket (see the
<FUNCTION>socket</FUNCTION> or <FUNCTION>accept</FUNCTION> functions).
</PARA>
<PARA>
Socket <function>ioctl</function> commands apply to the underlying 
network interfaces, and affect the entire system, not just the file 
descriptor used to issue the <FUNCTION>ioctl</FUNCTION>.
</PARA>
<PARA>
The following values for <parameter>request</parameter>
are accepted:
</PARA>
<VARIABLELIST>

<VARLISTENTRY>
<TERM>
<SYMBOL>SIOCGIFCONF</SYMBOL> (Deprecated)
</TERM>
<LISTITEM>
<PARA>
Get the interface configuration list for the system.
<NOTE>
<PARA>
The <SYMBOL>SIOCGIFCONF</SYMBOL> interface is
superceded by the 
<FUNCTION>if_nameindex</FUNCTION> family of functions (see
<XREF LINKEND=STD.SUSv3>).
A future version of this specification may withdraw this value
for <parameter>request</parameter>.
</PARA>
</NOTE>
<PARAMETER>argp</PARAMETER> shall point to a
<STRUCTNAME>ifconf</STRUCTNAME> structure, as described in
<filename>&lt;net/if.h&gt;</filename>. Before calling, the caller 
shall set the
<STRUCTFIELD>ifc_ifcu.ifcu_req</STRUCTFIELD> field 
to point to an array of <STRUCTNAME>ifreq</STRUCTNAME> structures, and 
set <STRUCTFIELD>ifc_len</STRUCTFIELD> to the size in bytes of this allocated 
array. Upon return, <STRUCTFIELD>ifc_len</STRUCTFIELD> 
will contain the size in bytes of the array which was actually used.
If it is the same as the length upon calling, the caller 
should assume that the array was too small and try again with a 
larger array.
</PARA>
<PARA>
On success, <SYMBOL>SIOCGIFCONF</SYMBOL> shall return a nonnegative value.
<NOTE><TITLE>Rationale</TITLE>
<PARA>
Historical UNIX systems disagree on the meaning of the return value.
</PARA>
</NOTE>
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>
<SYMBOL>SIOCGIFFLAGS</SYMBOL>
</TERM>
<LISTITEM>
<PARA>
Get the interface flags for the indicated interface.
<PARAMETER>argp</PARAMETER> shall point to a 
<STRUCTNAME>ifreq</STRUCTNAME> structure. Before calling, the 
caller should fill in the <STRUCTFIELD>ifr_name</STRUCTFIELD> 
field with the interface name, and upon return, the 
<STRUCTFIELD>ifr_ifru.ifru_flags</STRUCTFIELD> field is set 
with the interface flags.
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>
<SYMBOL>SIOCGIFADDR</SYMBOL>
</TERM>
<LISTITEM>
<PARA>
Get the interface address for the given interface.
<PARAMETER>argp</PARAMETER> shall point to a
<STRUCTNAME>ifreq</STRUCTNAME> structure. Before calling, the 
caller should fill in the <STRUCTFIELD>ifr_name</STRUCTFIELD> 
field with the interface name, and upon return, the 
<STRUCTFIELD>ifr_ifru.ifru_addr</STRUCTFIELD> field is set 
with the interface address.
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>
<SYMBOL>SIOCGIFBRDADDR</SYMBOL>
</TERM>
<LISTITEM>
<PARA>
Get the interface broadcast address for the given interface.
<PARAMETER>argp</PARAMETER> shall point to a
<STRUCTNAME>ifreq</STRUCTNAME> structure. Before calling, the 
caller should fill in the <STRUCTFIELD>ifr_name</STRUCTFIELD> 
field with the interface name, and upon return, the 
<STRUCTFIELD>ifr_ifru.ifru_broadcast</STRUCTFIELD> field is set 
with the interface broadcast address.
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>
<SYMBOL>SIOCGIFNETMASK</SYMBOL>
</TERM>
<LISTITEM>
<PARA>
Get the network mask for the given interface. 
<PARAMETER>argp</PARAMETER> shall point to a
<STRUCTNAME>ifreq</STRUCTNAME> structure. Before calling, the 
caller should fill in the <STRUCTFIELD>ifr_name</STRUCTFIELD> 
field with the interface name, and upon return, the 
<STRUCTFIELD>ifr_ifru.ifru_netmask</STRUCTFIELD> field is set 
with the network mask.
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>
<SYMBOL>SIOCGIFMTU</SYMBOL>
</TERM>
<LISTITEM>
<PARA>
Get the Maximum Transmission Unit (MTU) size for the given interface. 
<PARAMETER>argp</PARAMETER> shall point to a
<STRUCTNAME>ifreq</STRUCTNAME> structure. Before calling, the 
caller should fill in the <STRUCTFIELD>ifr_name</STRUCTFIELD> 
field with the interface name, and upon return, the 
<STRUCTFIELD>ifr_ifru.ifru_mtu</STRUCTFIELD> field is set 
with the MTU.
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>
<SYMBOL>FIONREAD</SYMBOL>
</TERM>
<LISTITEM>
<PARA>
Get the amount of queued unread data in the receive buffer.
<PARAMETER>argp</PARAMETER> shall point to an integer where the result is to be placed.
<NOTE><PARA>Some implementations may also support the use of <SYMBOL>FIONREAD</SYMBOL>
on other types of file descriptor. However, the LSB only speicifes its behavior for a socket
related file descriptor.
</PARA></NOTE>
</PARA>
</LISTITEM>
</VARLISTENTRY>

</VARIABLELIST>

<!--
<PARA>
The <STRUCTNAME>sockaddr</STRUCTNAME> structure is as specified in 
<XREF LINKEND=STD.SUSv3>.
</PARA>
-->
</REFSECT1>

<REFSECT1>
<TITLE>Return Value
</TITLE>
<PARA>
On success, if <parameter>request</parameter> is
<TOKEN>SIOCGIFCONF</TOKEN>, a non-negative integer shall be returned.
If request is not <TOKEN>SIOCGIFCONF</TOKEN>, on success 
<RETURNVALUE>0</RETURNVALUE> is returned. 
On error, <RETURNVALUE>-1</RETURNVALUE> is returned and
the global variable <VARNAME>errno</VARNAME> is set appropriately.
</PARA>
</REFSECT1>

<REFSECT1>
<TITLE>Errors
</TITLE>
<VARIABLELIST>
<VARLISTENTRY>
<TERM>
EBADF  
</TERM>
<LISTITEM>
<PARA>
<PARAMETER>sockfd</PARAMETER> is not a valid descriptor.
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>
EFAULT 
</TERM>
<LISTITEM>
<PARA>
<PARAMETER>argp</PARAMETER> references an inaccessible memory area.
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>
ENOTTY 
</TERM>
<LISTITEM>
<PARA>
The specified <PARAMETER>request</PARAMETER> does not apply to the kind of 
object that the descriptor <PARAMETER>sockfd</PARAMETER> references.
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>
EINVAL 
</TERM>
<LISTITEM>
<PARA>
Either <PARAMETER>request</PARAMETER> or <PARAMETER>argp</PARAMETER>
is invalid.
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>
ENOTCONN 
</TERM>
<LISTITEM>
<PARA>
The operation is only defined on a connected socket, but the socket wasn't
connected.
</PARA>
</LISTITEM>
</VARLISTENTRY>

</VARIABLELIST>
</REFSECT1>

</REFENTRY>
