<REFENTRY ID="baselib-sethostname-2"> <REFMETA>
<REFENTRYTITLE>sethostname</REFENTRYTITLE>
<REFMISCINFO>Base Libraries</REFMISCINFO>
</REFMETA>
<REFNAMEDIV>
<REFNAME>sethostname
</REFNAME>
<REFPURPOSE>
set host name
</REFPURPOSE>
</REFNAMEDIV>

<REFSYNOPSISDIV>
<FUNCSYNOPSIS>
<FUNCSYNOPSISINFO>
#include &lt;unistd.h&gt;
#include &lt;sys/param.h.h&gt;
#include &lt;sys/utsname.h&gt;
</FUNCSYNOPSISINFO>
<FUNCPROTOTYPE>
 <FUNCDEF>int 
  <FUNCTION>sethostname</FUNCTION></FUNCDEF>
 <PARAMDEF>const char *
  <PARAMETER><REPLACEABLE>name</REPLACEABLE></PARAMETER></PARAMDEF>
 <PARAMDEF>size_t 
  <PARAMETER><REPLACEABLE>len</REPLACEABLE></PARAMETER></PARAMDEF>
</FUNCPROTOTYPE>
</FUNCSYNOPSIS>
</REFSYNOPSISDIV>

<REFSECT1>
<TITLE>Description
</TITLE>
<PARA>
If the process has appropriate privileges, the
<FUNCTION>sethostname</FUNCTION> function shall change the host name for the 
current macine. The <PARAMETER>name</PARAMETER> shall point to a
null-terminated string of at most <PARAMETER>len</PARAMETER> bytes
that holds the new hostname.
</PARA>
<PARA>
If the symbol <CONSTANT>HOST_NAME_MAX</CONSTANT> is defined, or if
<FUNCTION>sysconf(_SC_HOST_NAME_MAX)</FUNCTION> returns a value greater
than 0, this value shall represent the maximum length of the new hostname.
Otherwise, if the symbol <CONSTANT>MAXHOSTLEN</CONSTANT> is defined, this value
shall represent the maximum length for the new hostname. If none of these
values are defined, the maximum length shall be the size of the
<structfield>nodename</structfield> field of the
<structname>utsname</structname> structure.
</PARA>
</REFSECT1>

<REFSECT1>
<TITLE>Return Value
</TITLE>
<PARA>
On success, <RETURNVALUE>0</RETURNVALUE> is returned. 
On error, <RETURNVALUE>-1</RETURNVALUE> is returned and
the global variable <VARNAME>errno</VARNAME> is set appropriately.
</PARA>
</REFSECT1>

<REFSECT1>
<TITLE>Errors
</TITLE>
<VARIABLELIST>
<VARLISTENTRY>
<TERM>
EINVAL 
</TERM>
<LISTITEM>
<PARA>
<PARAMETER>len</PARAMETER> is negative or larger than the maximum allowed size.
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>
EPERM  
</TERM>
<LISTITEM>
<PARA>
the process did not have appropriate privilege.
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>
EFAULT 
</TERM>
<LISTITEM>
<PARA>
<PARAMETER>name</PARAMETER> is an invalid address.
</PARA>
</LISTITEM>
</VARLISTENTRY>
</VARIABLELIST>
</REFSECT1>

<REFSECT1>
<TITLE>Rationale
</TITLE>
<PARA>
<XREF LINKEND=STD.SUSv3>
guarantees that:
<BLOCKQUOTE>
<PARA>
Maximum length of a host name (not including the terminating null) 
as returned from the <function>gethostname</function> function shall be at least 255 bytes.
</PARA>
</BLOCKQUOTE>
</PARA>
<PARA>
The glibc C library does not currently define <CONSTANT>HOST_NAME_MAX</CONSTANT>,
and although it provides the name <CONSTANT>_SC_HOST_NAME_MAX</CONSTANT>
a call to <FUNCTION>sysconf</FUNCTION> returns <RETURNVALUE>-1</RETURNVALUE>
and does not alter <varname>errno</varname> in this case (indicating that
there is no restriction on the hostname length). However, the glibc
manual idicates that some implementations may have 
<CONSTANT>MAXHOSTNAMELEN</CONSTANT> as a means of detecting the maximum length,
while the Linux kernel at release 2.4 and 2.6 stores this hostname
in the <structname>utsname</structname> structure.
While the glibc manual suggests simply shortening the name until
<function>sethostname</function> succeeds, the LSB requires
that one of the first four mechanisms works.
Future versions of glibc may provide a more reasonable result from 
<FUNCTION>sysconf</FUNCTION>(<CONSTANT>_SC_HOST_NAME_MAX</CONSTANT>).
</PARA>
</REFSECT1>
<!--	  LDP GENERAL PUBLIC LICENSE  -->
<!--        Version 1a, November 1998   -->
</REFENTRY>
