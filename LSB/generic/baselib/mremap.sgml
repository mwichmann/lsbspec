<refentry id="baselib-mremap"> <refmeta>
<refentrytitle>mremap</refentrytitle>
<refmiscinfo>Base Libraries</refmiscinfo>
</refmeta>
<refnamediv>
<refname>mremap</refname>
<refpurpose>
remap a virtual memory address
</refpurpose>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;sys/mman.h&gt;
</funcsynopsisinfo>
<funcprototype>
<funcdef>void * <function>mremap</function></funcdef>
<paramdef>void * <parameter>old_address</parameter></paramdef>
<paramdef>size_t <parameter>old_size</parameter></paramdef>
<paramdef>size_t <parameter>new_size</parameter></paramdef>
<paramdef>int <parameter>flags</parameter></paramdef>
</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
The <function>mremap</function> function expands (or shrinks)
an existing memory mapping, potentially moving it at
the same time, depending on the flags argument and the
available virtual address space.
</para>
<para>
<varname>old_address</varname> is the old address of the
virtual memory block to be resized. 
Note that <varname>old_address</varname> must be page aligned. 
<varname>old_size</varname> is the old size of the virtual memory block. 
<varname>new_size</varname> is the requested size of the
virtual memory block after the resize.
</para>
<para>
In Linux the memory is divided into pages. A user process has (one or)
several linear virtual memory segments. Each virtual memory segment
has one or more mappings to real memory pages (in the page table).
Each virtual memory segment has its own protection (access rights),
which may cause a segmentation violation if the memory is accessed
incorrectly (e.g., writing to a read-only segment). Accessing virtual
memory outside of the segments will also cause a segmentation violation.
</para>
<para>
<function>mremap</function> uses the Linux page table
scheme. <function>mremap</function> changes the mapping between
virtual addresses and memory pages. This can be used to implement a
very efficient form of <function>realloc</function>.
</para>
<para>
The flags bit-mask argument may be 0, or include the following flag:
</para>
<variablelist>
<varlistentry>
<term>
MREMAP_MAYMOVE
</term>
<listitem>
<para>
By default, if there is not sufficient space to expand a mapping
at its current location, then <function>mremap</function> fails.
If this flag is specified, then the kernel is permitted to relocate
the mapping to a new virtual address, if necessary. If the mapping
is relocated, then absolute pointers into the old mapping location
become invalid (offsets relative to the starting address of the
mapping should be employed).
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
MREMAP_FIXED
</term>
<listitem>
<para>
This flag serves a similar purpose to the <constant>MAP_FIXED</constant>
flag of <function>mmap</function>. If this flag is specified,
then <function>mremap</function>accepts a fifth argument,
<type>void *</type><varname>new_address</varname>,
which specifies a pagealigned address to which the mapping must
be moved. Any previous mapping at the address range specified by
<varname>new_address</varname> and <varname>new_size</varname> is
unmapped. If <constant>MREMAP_FIXED</constant> is specified, then
<constant>MREMAP_MAYMOVE</constant> must also be specified.
</para>
</listitem>
</varlistentry>
</variablelist>
<para>
If the memory segment specified by <varname>old_address</varname>
and <varname>old_size</varname> is locked (using
<function>mlock</function> or similar), then this lock is maintained
when the segment is resized and/or relocated. As a consequence, the
amount of memory locked by the process may change.
</para>
</refsect1>

<refsect1>
<title>Return Value</title>
<para>
The <function>mremap</function> function returns a pointer
to the new virtual memory area on success.  On error, the value
<constant>MAP_FAILED</constant> is returned, and <varname>errno</varname>
is set appropriately.
</para>
</refsect1>

<refsect1>
<title>Errors</title>
<variablelist>
<varlistentry>
<term>
<errorcode>EAGAIN</errorcode>
</term>
<listitem>
<para>
The caller tried to expand a memory segment that is locked, but this was
not possible without exceeding the <constant>RLIMIT_MEMLOCK</constant>
resource limit.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<errorcode>EFAULT</errorcode>
</term>
<listitem>
<para>
"Segmentation fault." Some address in the range old_address to
<varname>old_address</varname>+<varname>old_size</varname> is
an invalid virtual memory address for this process. You can also get
<errorcode>EFAULT</errorcode> even if there exist mappings that cover the
whole address space requested, but those mappings are of different types.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<errorcode>EINVAL</errorcode>
</term>
<listitem>
<para>
An invalid argument was given. Possible causes are:
<varname>old_address</varname> was not page aligned;
a value other than <constant>MREMAP_MAYMOVE</constant>
or <constant>MREMAP_FIXED</constant> was specified in
<varname>flags;</varname> <varname>new_size</varname> was zero;
<varname>new_size</varname> or <varname>new_address</varname>
was invalid;
or the new address range specified by <varname>new_address</varname>
and <varname>new_size</varname> overlapped the old address range specified
by <varname>old_address</varname> and <varname>old_size</varname>;
or <constant>MREMAP_FIXED</constant> was specified without also specifying
<constant>MREMAP_MAYMOVE.</constant>
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<errorcode>ENOMEM</errorcode>
</term>
<listitem>
<para>
The memory area cannot be expanded at the current virtual address,
and the <constant>MREMAP_MAYMOVE</constant> flag is not set in
<varname>flags</varname>, or, there is not enough (virtual) memory
available.
</para>
</listitem>
</varlistentry>
</variablelist>
</refsect1>

</refentry>
