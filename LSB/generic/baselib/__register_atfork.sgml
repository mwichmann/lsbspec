<REFENTRY ID="baselib---register-atfork"> <REFMETA>
<REFENTRYTITLE>__register_atfork</REFENTRYTITLE>
<REFMISCINFO>Base Libraries</REFMISCINFO>
</REFMETA>
<REFNAMEDIV>
<REFNAME>__register_atfork
</REFNAME>
<REFPURPOSE>
alias for register_atfork
</REFPURPOSE>
</REFNAMEDIV>

<REFSYNOPSISDIV>
<REFSYNOPSISDIVINFO>
<DATE>11 July 2004</DATE>
</REFSYNOPSISDIVINFO>
<FUNCSYNOPSIS>
<FUNCPROTOTYPE>
 <FUNCDEF>int 
  <FUNCTION>__register_atfork</FUNCTION></FUNCDEF>
 <PARAMDEF>void (*<PARAMETER>prepare</PARAMETER>)
  <FUNCPARAMS>void</FUNCPARAMS></PARAMDEF>
 <PARAMDEF>void (*<PARAMETER>parent</PARAMETER>)
  <FUNCPARAMS>void</FUNCPARAMS></PARAMDEF>
 <PARAMDEF>void (*<PARAMETER>child</PARAMETER>)
  <FUNCPARAMS>void</FUNCPARAMS></PARAMDEF>
 <PARAMDEF>void *<PARAMETER>__dso_handle</PARAMETER></PARAMDEF>
</FUNCPROTOTYPE>
</FUNCSYNOPSIS>
</REFSYNOPSISDIV>

<REFSECT1>
<REFSECT1INFO>
<DATE>11 July 2004</DATE>
</REFSECT1INFO>
<TITLE>Description
</TITLE>
<PARA>
<FUNCTION>__register_atfork</FUNCTION> implements
<FUNCTION>pthread_atfork</FUNCTION> as specified in <XREF LINKEND="std.SUSv4">.
The additional parameter <PARAMETER>__dso_handle</PARAMETER> allows a shared
object to pass in it's handle so that functions registered by
<FUNCTION>__register_atfork</FUNCTION> can be unregistered by the runtime when
the shared object is unloaded.
</PARA>
</REFSECT1>
</REFENTRY>
