<REFENTRY ID="baselib-stpcpy-3"> <REFMETA>
<REFENTRYTITLE>stpcpy</REFENTRYTITLE>
<REFMISCINFO>Base Libraries</REFMISCINFO>
</REFMETA>
<REFNAMEDIV>
<REFNAME>stpcpy</REFNAME>
<REFPURPOSE>
copy a string returning a pointer to its end
</REFPURPOSE>
</REFNAMEDIV>
<REFSYNOPSISDIV>
<REFSYNOPSISDIVINFO>
<DATE>2 April 2001</DATE>
</REFSYNOPSISDIVINFO>
<SYNOPSIS>
#include &lt;string.h>

char *stpcpy(char *dest, const char *src);
</SYNOPSIS>
</REFSYNOPSISDIV>
<REFSECT1>
<REFSECT1INFO>
<DATE>2 April 2001</DATE>
</REFSECT1INFO>
<TITLE>Description
</TITLE>
<PARA>
The  stpcpy()  function copies the string pointed to by src
(including the terminating `\0' character)  to  the  array
pointed  to by dest.  The strings may not overlap, and the
destination string dest must be large  enough  to  receive
the copy.
</PARA>
</REFSECT1>
<REFSECT1>
<TITLE>RETURN VALUE
</TITLE>
<PARA>
stpcpy()  returns  a pointer to the end of the string dest
(that is, the address of the terminating  null  character)
rather than the beginning.
</PARA>
</REFSECT1>
<REFSECT1>
<TITLE>EXAMPLE
</TITLE>
<PARA>
For  example,  this program uses stpcpy to concatenate foo
and bar to produce foobar, which it then prints.

                 #include &lt;string.h>

                 int
                 main (void)
                 {
                   char *to = buffer;
                   to = stpcpy (to, "foo");
                   to = stpcpy (to, "bar");
                   printf ("%s\n", buffer);
                 }
</PARA>

<!--	  LDP GENERAL PUBLIC LICENSE  -->
<!--        Version 1a, November 1998   -->

</REFSECT1>
</REFENTRY>








