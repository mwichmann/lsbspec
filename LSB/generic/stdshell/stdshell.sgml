<PART ID="tocstdshell">
<TITLE>Standard Shell</TITLE>
<CHAPTER ID="stdshell">
<TITLE>Standard Shell</TITLE>
<SECT1 ID="stdshellintro">
<TITLE>Introduction</TITLE>
<PARA>The shell is POSIX-1003.2 with the following exceptions.</PARA>
</SECT1>
<SECT1 ID="stdshellexceptions">
<TITLE>Standard Shell Exceptions</TITLE>

<PARA>
</PARA>

<SECT2 ID="stdshellexcept-1">
<TITLE>Pathname of $0</TITLE>

<para>
When the shell searches for a command name in the PATH and finds a
shell script, POSIX specifies that it shall pass the command name as
argv[0] and in the child shell script, $0 shall be set from argv[0]
(POSIX Standard, section 3.9.1.1, line 779-784).
</para>

<para>
However, for an LSB shell, the system may implement either this
behavior or $0 may be set to an absolute pathname of the shell script.
<footnote>
<para>
For example, bash behaves in the following way:

<ProgramListing>
$ cat ~/prefix/bin/mycommand
#!/bin/sh
echo $0
$ PATH=~/prefix/bin mycommand
/home/kingdon/prefix/bin/mycommand
$ 
</ProgramListing>

With a POSIX shell, the output would be "mycommand".
</para>
<para>
When bash is executing an executable rather than a shell script, it
seems to behave in the POSIX way.
</para>
</footnote>
</para>

</SECT2>

<SECT2 ID="stdshellexcept-2">
<TITLE>Sourcing non-executable files</TITLE>

<PARA>
<ITEMIZEDLIST>
<LISTITEM>
<PARA>
When PATH is used to locate a file for the dot utility, and a matching
file is on the PATH but is not readable, the behavior is undefined
(unlike POSIX which apparently requires the shell to continue searching
through the rest of the PATH, POSIX Standard, section 3.14.4, line
1493-1498).
</PARA>
</LISTITEM>
</ITEMIZEDLIST>
</PARA>

</SECT2>

</SECT1>
<SECT1 ID="stdshellrat">
<TITLE>Standard Shell Rationale</TITLE>
<PARA>
Among the many shells existing at the time of evaluation, the two
most compliant were Bash and Pdksh.
</PARA>
<PARA>
At the time of evaluation, Bash was found mostly compliant 
with the POSIX-1003.2 standard, and its maintainer demonstrated interest in 
bringing the shell to full compliance.  Bash already enjoys wide use among 
shell users, and is even included in many distributions as the default shell.
Further, the abundance of documentation found both on the Internet and in 
the bookstore makes Bash an easy shell to use.
</PARA>
<PARA>
Of course, shell scripts must avoid using bash extensions if they want
to run on any LSB system.
</PARA>
<PARA>
The two exceptions to POSIX (concerning . and non-readable files, and
argv[0]) in this section are to accommodate bash.  The need for
exceptions should be reviewed if bash changes or POSIX changes to
remove the conflict.  Future versions of this standard may also
consider exceptions for pdksh or other almost-compliant shells, if
they seem to be warranted.
</PARA>
</SECT1>
</CHAPTER>
</PART>
