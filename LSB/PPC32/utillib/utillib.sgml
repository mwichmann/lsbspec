<PART ID="tocutillib">
<TITLE>Utility Libraries</TITLE>

<CHAPTER id=utillib>
<TITLE>Libraries</TITLE>

<PARA>
An LSB-conforming implementation shall also support some utility libraries which
are built on top of the interfaces provided by the base libraries. These
libraries implement common functionality, and hide additional system dependent
information such as file formats and device names.
</PARA>

<!-- Start of text generated from database -->
<!-- generated from the LSB specification database -->
<!--    by $Header: /cvsroot/lsb/lsbspec/mklibspec,v 1.75 2005/10/12 22:24:36 nick Exp 0 -->
<!--    at Wed Oct 12 18:27:56 2005 -->
<SECT1 ID=libz>
<TITLE>Interfaces for libz</TITLE>
<PARA>
<XREF LINKEND="lib-libz-def"> defines the library name and shared object name
for the libz library
</PARA>
<TABLE id="lib-libz-def">
<TITLE>libz Definition</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Library:</ENTRY>
<ENTRY>libz</ENTRY>
</ROW>
<ROW>
<ENTRY>SONAME:</ENTRY>
<ENTRY>libz.so.1</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
</PARA>
<!-- debug: database interface name Compression Library -->
<SECT2>
<!--libgroup-->
<TITLE>Compression Library</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for Compression Library</TITLE>
<PARA>
No external functions are defined for libz - Compression Library
in this part of the specification. See also the generic specification.
</PARA>
</SECT3>
</SECT2>
</SECT1>
<SECT1 ID=libz-ddefs>
<TITLE>Data Definitions for libz</TITLE>
<PARA>
This section defines global identifiers and their values that are associated
with interfaces contained in libz.
These definitions are organized into groups that
correspond to system headers. This convention is used as a
convenience for the reader, and does not imply the existence
of these headers, or their content.
Where an interface is defined as requiring a particular system header file
all of the data definitions for that system header file presented here shall be in effect.
</PARA>
<PARA>
This section gives data definitions to promote binary application
portability, not to repeat source interface definitions available
elsewhere. System providers and application developers should use this ABI
to supplement - not to replace - source interface definition specifications.
</PARA>
<PARA>
This specification uses the <XREF LINKEND='std.ISOC99'> C Language as the reference programming language, and data definitions are specified in ISO C . The C language is used here as a convenient notation. Using a C language description of these data objects does not preclude their use by other programming languages.</PARA>
<SECT2>
<TITLE>zlib.h</TITLE>
<PARA>
</PARA>
<SCREEN>

extern int gzread(gzFile, voidp, unsigned int);
extern int gzclose(gzFile);
extern gzFile gzopen(const char *, const char *);
extern gzFile gzdopen(int, const char *);
extern int gzwrite(gzFile, voidpc, unsigned int);
extern int gzflush(gzFile, int);
extern const char *gzerror(gzFile, int *);
extern uLong adler32(uLong, const Bytef *, uInt);
extern int compress(Bytef *, uLongf *, const Bytef *, uLong);
extern int compress2(Bytef *, uLongf *, const Bytef *, uLong, int);
extern uLong crc32(uLong, const Bytef *, uInt);
extern int deflate(z_streamp, int);
extern int deflateCopy(z_streamp, z_streamp);
extern int deflateEnd(z_streamp);
extern int deflateInit2_(z_streamp, int, int, int, int, int, const char *,
			 int);
extern int deflateInit_(z_streamp, int, const char *, int);
extern int deflateParams(int, z_streamp, int);
extern int deflateReset(z_streamp);
extern int deflateSetDictionary(z_streamp, const Bytef *, uInt);
extern const uLongf *get_crc_table(void);
extern int gzeof(gzFile);
extern int gzgetc(gzFile);
extern char *gzgets(gzFile, char *, int);
extern int gzprintf(const char *, ..., gzFile);
extern int gzputc(gzFile, int);
extern int gzputs(gzFile, const char *);
extern int gzrewind(gzFile);
extern z_off_t gzseek(gzFile, z_off_t, int);
extern int gzsetparams(gzFile, int, int);
extern z_off_t gztell(gzFile);
extern int inflate(z_streamp, int);
extern int inflateEnd(z_streamp);
extern int inflateInit2_(z_streamp, int, const char *, int);
extern int inflateInit_(z_streamp, const char *, int);
extern int inflateReset(z_streamp);
extern int inflateSetDictionary(z_streamp, const Bytef *, uInt);
extern int inflateSync(z_streamp);
extern int inflateSyncPoint(z_streamp);
extern int uncompress(Bytef *, uLongf *, const Bytef *, uLong);
extern const char *zError(int);
extern const char *zlibVersion(void);
extern uLong deflateBound(z_streamp, uLong);
extern uLong compressBound(uLong);
</SCREEN>
</SECT2>
</SECT1>
<!-- End of text generated from database -->
<!--    by $Header: /cvsroot/lsb/lsbspec/mklibspec,v 1.75 2005/10/12 22:24:36 nick Exp 0 -->


<!-- Start of text generated from database -->
<!-- generated from the LSB specification database -->
<!--    by $Header: /cvsroot/lsb/lsbspec/mklibspec,v 1.75 2005/10/12 22:24:36 nick Exp 0 -->
<!--    at Wed Oct 12 18:27:56 2005 -->
<SECT1 ID=libncurses>
<TITLE>Interfaces for libncurses</TITLE>
<PARA>
<XREF LINKEND="lib-libncurses-def"> defines the library name and shared object name
for the libncurses library
</PARA>
<TABLE id="lib-libncurses-def">
<TITLE>libncurses Definition</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Library:</ENTRY>
<ENTRY>libncurses</ENTRY>
</ROW>
<ROW>
<ENTRY>SONAME:</ENTRY>
<ENTRY>libncurses.so.5</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
</PARA>
<!-- debug: database interface name Curses -->
<SECT2>
<!--libgroup-->
<TITLE>Curses</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for Curses</TITLE>
<PARA>
No external functions are defined for libncurses - Curses
in this part of the specification. See also the generic specification.
</PARA>
</SECT3>
</SECT2>
</SECT1>
<SECT1 ID=libncurses-ddefs>
<TITLE>Data Definitions for libncurses</TITLE>
<PARA>
This section defines global identifiers and their values that are associated
with interfaces contained in libncurses.
These definitions are organized into groups that
correspond to system headers. This convention is used as a
convenience for the reader, and does not imply the existence
of these headers, or their content.
Where an interface is defined as requiring a particular system header file
all of the data definitions for that system header file presented here shall be in effect.
</PARA>
<PARA>
This section gives data definitions to promote binary application
portability, not to repeat source interface definitions available
elsewhere. System providers and application developers should use this ABI
to supplement - not to replace - source interface definition specifications.
</PARA>
<PARA>
This specification uses the <XREF LINKEND='std.ISOC99'> C Language as the reference programming language, and data definitions are specified in ISO C . The C language is used here as a convenient notation. Using a C language description of these data objects does not preclude their use by other programming languages.</PARA>
<SECT2>
<TITLE>curses.h</TITLE>
<PARA>
</PARA>
<SCREEN>

extern int addch(const chtype);
extern int addchnstr(const chtype *, int);
extern int addchstr(const chtype *);
extern int addnstr(const char *, int);
extern int addstr(const char *);
extern int attroff(int);
extern int attron(int);
extern int attrset(int);
extern int attr_get(attr_t *, short *, void *);
extern int attr_off(attr_t, void *);
extern int attr_on(void *, attr_t);
extern int attr_set(void *, short, attr_t);
extern int baudrate(void);
extern int beep(void);
extern int bkgd(chtype);
extern void bkgdset(chtype);
extern int border(chtype, chtype, chtype, chtype, chtype, chtype, chtype,
		  chtype);
extern int box(chtype, chtype, WINDOW *);
extern bool can_change_color(void);
extern int cbreak(void);
extern int chgat(const void *, short, attr_t, int);
extern int clear(void);
extern int clearok(WINDOW *, bool);
extern int clrtobot(void);
extern int clrtoeol(void);
extern int color_content(short *, short, short *, short *);
extern int color_set(short, void *);
extern int copywin(int, int, int, WINDOW *, const WINDOW *, int, int, int,
		   int);
extern int curs_set(int);
extern int def_prog_mode(void);
extern int def_shell_mode(void);
extern int delay_output(int);
extern int delch(void);
extern void delscreen(SCREEN *);
extern int delwin(WINDOW *);
extern int deleteln(void);
extern WINDOW *derwin(int, int, WINDOW *, int, int);
extern int doupdate(void);
extern WINDOW *dupwin(WINDOW *);
extern int echo(void);
extern int echochar(const chtype);
extern int erase(void);
extern int endwin(void);
extern char erasechar(void);
extern void filter(void);
extern int flash(void);
extern int flushinp(void);
extern chtype getbkgd(WINDOW *);
extern int getch(void);
extern int getnstr(char *, int);
extern int getstr(char *);
extern WINDOW *getwin(FILE *);
extern int halfdelay(int);
extern bool has_colors(void);
extern bool has_ic(void);
extern bool has_il(void);
extern int hline(chtype, int);
extern void idcok(WINDOW *, bool);
extern int idlok(WINDOW *, bool);
extern void immedok(WINDOW *, bool);
extern chtype inch(void);
extern int inchnstr(chtype *, int);
extern int inchstr(chtype *);
extern WINDOW *initscr(void);
extern int init_color(short, short, short, short);
extern int init_pair(short, short, short);
extern int innstr(char *, int);
extern int insch(chtype);
extern int insdelln(int);
extern int insertln(void);
extern int insnstr(const char *, int);
extern int insstr(const char *);
extern int instr(char *);
extern int intrflush(bool, WINDOW *);
extern bool isendwin(void);
extern bool is_linetouched(WINDOW *, int);
extern bool is_wintouched(WINDOW *);
extern const char *keyname(int);
extern int keypad(WINDOW *, bool);
extern char killchar(void);
extern int leaveok(WINDOW *, bool);
extern char *longname(void);
extern int meta(WINDOW *, bool);
extern int move(int, int);
extern int mvaddch(const chtype, int, int);
extern int mvaddchnstr(int, int, const chtype *, int);
extern int mvaddchstr(const chtype *, int, int);
extern int mvaddnstr(const char *, int, int, int);
extern int mvaddstr(const char *, int, int);
extern int mvchgat(int, int, int, attr_t, short, const void *);
extern int mvcur(int, int, int, int);
extern int mvdelch(int, int);
extern int mvderwin(WINDOW *, int, int);
extern int mvgetch(int, int);
extern int mvgetnstr(int, char *, int, int);
extern int mvgetstr(int, int, char *);
extern int mvhline(int, int, int, chtype);
extern chtype mvinch(int, int);
extern int mvinchnstr(int, chtype *, int, int);
extern int mvinchstr(chtype *, int, int);
extern int mvinnstr(int, int, char *, int);
extern int mvinsch(chtype, int, int);
extern int mvinsnstr(int, int, const char *, int);
extern int mvinsstr(const char *, int, int);
extern int mvinstr(int, int, char *);
extern int mvprintw(int, char *, int, ...);
extern int mvscanw(int, ..., const char *, int);
extern int mvvline(int, chtype, int, int);
extern int mvwaddch(WINDOW *, int, int, const chtype);
extern int mvwaddchnstr(int, int, WINDOW *, int, const chtype *);
extern int mvwaddchstr(int, int, WINDOW *, const chtype *);
extern int mvwaddnstr(int, WINDOW *, int, int, const char *);
extern int mvwaddstr(WINDOW *, const char *, int, int);
extern int mvwchgat(int, int, short, WINDOW *, attr_t, int, const void *);
extern int mvwdelch(int, WINDOW *, int);
extern int mvwgetch(int, int, WINDOW *);
extern int mvwgetnstr(char *, int, int, int, WINDOW *);
extern int mvwgetstr(WINDOW *, int, int, char *);
extern int mvwhline(int, WINDOW *, int, chtype, int);
extern int mvwin(int, WINDOW *, int);
extern chtype mvwinch(int, WINDOW *, int);
extern int mvwinchnstr(WINDOW *, int, int, chtype *, int);
extern int mvwinchstr(WINDOW *, int, int, chtype *);
extern int mvwinnstr(WINDOW *, int, int, char *, int);
extern int mvwinsch(WINDOW *, chtype, int, int);
extern int mvwinsnstr(int, WINDOW *, int, int, const char *);
extern int mvwinsstr(WINDOW *, const char *, int, int);
extern int mvwinstr(WINDOW *, int, int, char *);
extern int mvwprintw(WINDOW *, int, int, char *, ...);
extern int mvwscanw(WINDOW *, int, const char *, int, ...);
extern int mvwvline(int, WINDOW *, int, chtype, int);
extern int napms(int);
extern WINDOW *newpad(int, int);
extern SCREEN *newterm(FILE *, FILE *, const char *);
extern WINDOW *newwin(int, int, int, int);
extern int nl(void);
extern int nocbreak(void);
extern int nodelay(WINDOW *, bool);
extern int noecho(void);
extern int nonl(void);
extern void noqiflush(void);
extern int noraw(void);
extern int notimeout(WINDOW *, bool);
extern int overlay(const WINDOW *, WINDOW *);
extern int overwrite(WINDOW *, const WINDOW *);
extern int pair_content(short, short *, short *);
extern int pechochar(WINDOW *, chtype);
extern int pnoutrefresh(WINDOW *, int, int, int, int, int, int);
extern int prefresh(int, WINDOW *, int, int, int, int, int);
extern int printw(..., char *);
extern int putwin(WINDOW *, FILE *);
extern void qiflush(void);
extern int raw(void);
extern int redrawwin(WINDOW *);
extern int refresh(void);
extern int resetty(void);
extern int reset_prog_mode(void);
extern int reset_shell_mode(void);
extern int ripoffline(int, int (*init) (WINDOW *, int)
    );
extern int savetty(void);
extern int scanw(const char *, ...);
extern int scr_dump(const char *);
extern int scr_init(const char *);
extern int scrl(int);
extern int scroll(WINDOW *);
extern int scrollok(WINDOW *, typedef unsigned char bool);
extern int scr_restore(const char *);
extern int scr_set(const char *);
extern int setscrreg(int, int);
extern SCREEN *set_term(SCREEN *);
extern int slk_attroff(const typedef unsigned long int chtype);
extern int slk_attron(const typedef unsigned long int chtype);
extern int slk_attrset(const typedef unsigned long int chtype);
extern int slk_attr_set(const typedef chtype attr_t, short, void *);
extern int slk_clear(void);
extern int slk_color(short);
extern int slk_init(int);
extern char *slk_label(int);
extern int slk_noutrefresh(void);
extern int slk_refresh(void);
extern int slk_restore(void);
extern int slk_set(int, const char *, int);
extern int slk_touch(void);
extern int standout(void);
extern int standend(void);
extern int start_color(void);
extern WINDOW *subpad(WINDOW *, int, int, int, int);
extern WINDOW *subwin(WINDOW *, int, int, int, int);
extern int syncok(WINDOW *, typedef unsigned char bool);
extern typedef unsigned long int chtype termattrs(void);
extern char *termname(void);
extern void timeout(int);
extern int typeahead(int);
extern int ungetch(int);
extern int untouchwin(WINDOW *);
extern void use_env(typedef unsigned char bool);
extern int vidattr(typedef unsigned long int chtype);
extern int vidputs(typedef unsigned long int chtype,
		   int (*vidputs_int) (int)
    );
extern int vline(typedef unsigned long int chtype, int);
extern int vwprintw(WINDOW *, char *, typedef void *va_list);
extern int vw_printw(WINDOW *, const char *, typedef void *va_list);
extern int vwscanw(WINDOW *, const char *, typedef void *va_list);
extern int vw_scanw(typedef void *va_list, const char *, WINDOW *);
extern int waddch(WINDOW *, const typedef unsigned long int chtype);
extern int waddchnstr(WINDOW *, const typedef unsigned long int chtype *,
		      int);
extern int waddchstr(WINDOW *, const typedef unsigned long int chtype *);
extern int waddnstr(int, const char *, WINDOW *);
extern int waddstr(WINDOW *, const char *);
extern int wattron(WINDOW *, int);
extern int wattroff(WINDOW *, int);
extern int wattrset(WINDOW *, int);
extern int wattr_get(WINDOW *, attr_t *, short *, void *);
extern int wattr_on(WINDOW *, typedef chtype attr_t, void *);
extern int wattr_off(WINDOW *, typedef chtype attr_t, void *);
extern int wattr_set(WINDOW *, typedef chtype attr_t, short, void *);
extern int wbkgd(typedef unsigned long int chtype, WINDOW *);
extern void wbkgdset(WINDOW *, typedef unsigned long int chtype);
extern int wborder(WINDOW *, typedef unsigned long int chtype,
		   typedef unsigned long int chtype,
		   typedef unsigned long int chtype,
		   typedef unsigned long int chtype,
		   typedef unsigned long int chtype,
		   typedef unsigned long int chtype,
		   typedef unsigned long int chtype,
		   typedef unsigned long int chtype);
extern int wchgat(WINDOW *, int, typedef chtype attr_t, short,
		  const void *);
extern int wclear(WINDOW *);
extern int wclrtobot(WINDOW *);
extern int wclrtoeol(WINDOW *);
extern int wcolor_set(WINDOW *, short, void *);
extern void wcursyncup(WINDOW *);
extern int wdelch(WINDOW *);
extern int wdeleteln(WINDOW *);
extern int wechochar(WINDOW *, const typedef unsigned long int chtype);
extern int werase(WINDOW *);
extern int wgetch(WINDOW *);
extern int wgetnstr(char *, WINDOW *, int);
extern int wgetstr(WINDOW *, char *);
extern int whline(int, typedef unsigned long int chtype, WINDOW *);
extern typedef unsigned long int chtype winch(WINDOW *);
extern int winchnstr(WINDOW *, chtype *, int);
extern int winchstr(WINDOW *, chtype *);
extern int winnstr(WINDOW *, char *, int);
extern int winsch(WINDOW *, typedef unsigned long int chtype);
extern int winsdelln(WINDOW *, int);
extern int winsertln(WINDOW *);
extern int winsnstr(int, const char *, WINDOW *);
extern int winsstr(WINDOW *, const char *);
extern int winstr(WINDOW *, char *);
extern int wmove(WINDOW *, int, int);
extern int wnoutrefresh(WINDOW *);
extern int wprintw(char *, WINDOW *, ...);
extern int wredrawln(WINDOW *, int, int);
extern int wrefresh(WINDOW *);
extern int wscanw(WINDOW *, const char *, ...);
extern int wscrl(WINDOW *, int);
extern int wsetscrreg(WINDOW *, int, int);
extern int wstandout(WINDOW *);
extern int wstandend(WINDOW *);
extern void wsyncdown(WINDOW *);
extern void wsyncup(WINDOW *);
extern void wtimeout(WINDOW *, int);
extern int wtouchln(int, int, WINDOW *, int);
extern int wvline(WINDOW *, typedef unsigned long int chtype, int);
extern char *unctrl(typedef unsigned long int chtype);
extern int COLORS(void);
extern int COLOR_PAIRS(void);
extern chtype acs_map(void);
extern WINDOW *curscr(void);
extern WINDOW *stdscr(void);
extern int COLS(void);
extern int LINES(void);
extern int touchline(WINDOW *, int, int);
extern int touchwin(WINDOW *);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>term.h</TITLE>
<PARA>
</PARA>
<SCREEN>

extern int putp(const char *);
extern int tigetflag(const char *);
extern int tigetnum(const char *);
extern char *tigetstr(const char *);
extern char *tparm(const char *, ...);
extern TERMINAL *set_curterm(TERMINAL *);
extern int del_curterm(TERMINAL *);
extern int restartterm(char *, int, int *);
extern int setupterm(char *, int, int *);
extern char *tgetstr(char *, char **);
extern char *tgoto(const char *, int, int);
extern int tgetent(char *, const char *);
extern int tgetflag(char *);
extern int tgetnum(char *);
extern int tputs(const char *, int, int (*putcproc) (int)
    );
extern TERMINAL *cur_term(void);
</SCREEN>
</SECT2>
<!-- empty header file PPC32/unctrl.h -->
</SECT1>
<!-- End of text generated from database -->
<!--    by $Header: /cvsroot/lsb/lsbspec/mklibspec,v 1.75 2005/10/12 22:24:36 nick Exp 0 -->


<!-- Start of text generated from database -->
<!-- generated from the LSB specification database -->
<!--    by $Header: /cvsroot/lsb/lsbspec/mklibspec,v 1.75 2005/10/12 22:24:36 nick Exp 0 -->
<!--    at Wed Oct 12 18:27:57 2005 -->
<SECT1 ID=libutil>
<TITLE>Interfaces for libutil</TITLE>
<PARA>
<XREF LINKEND="lib-libutil-def"> defines the library name and shared object name
for the libutil library
</PARA>
<TABLE id="lib-libutil-def">
<TITLE>libutil Definition</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Library:</ENTRY>
<ENTRY>libutil</ENTRY>
</ROW>
<ROW>
<ENTRY>SONAME:</ENTRY>
<ENTRY>libutil.so.1</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The behavior of the interfaces in this library is specified by the following specifications:<SIMPLELIST COLUMNS=1>
<MEMBER ID='REFSTD.libutil.1'>
[LSB] <XREF LINKEND="std.LSB">
</MEMBER>
</SIMPLELIST>
</PARA>
<!-- debug: database interface name Utility Functions -->
<SECT2>
<!--libgroup-->
<TITLE>Utility Functions</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for Utility Functions</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific functions
for Utility Functions specified in <XREF linkend="tbl-libutil-uti-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<TABLE id="tbl-libutil-uti-ints">
<TITLE>libutil - Utility Functions Function Interfaces</TITLE>
<TGROUP COLS=4>
<TBODY>
<ROW>
<ENTRY><indexterm><primary>forkpty</primary></indexterm>forkpty(GLIBC_2.0) <LINK LINKEND="REFSTD.libutil.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>login</primary></indexterm>login(GLIBC_2.0) <LINK LINKEND="REFSTD.libutil.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>login_tty</primary></indexterm>login_tty(GLIBC_2.0) <LINK LINKEND="REFSTD.libutil.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>logout</primary></indexterm>logout(GLIBC_2.0) <LINK LINKEND="REFSTD.libutil.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>logwtmp</primary></indexterm>logwtmp(GLIBC_2.0) <LINK LINKEND="REFSTD.libutil.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>openpty</primary></indexterm>openpty(GLIBC_2.0) <LINK LINKEND="REFSTD.libutil.1">[LSB]</LINK></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>
</SECT2>
</SECT1>
<!-- End of text generated from database -->
<!--    by $Header: /cvsroot/lsb/lsbspec/mklibspec,v 1.75 2005/10/12 22:24:36 nick Exp 0 -->


</CHAPTER>

</PART>
