<PART ID=tocbaselib>
<TITLE>Base Libraries</TITLE>

<CHAPTER id=baselib>
<TITLE>Libraries</TITLE>

<PARA>
An LSB-conforming implementation shall support some general-purpose
libraries. Facilities in these libraries manipulate system data files,
transfer control to the implementation, and so on.  These Base correspond
to those libraries needed to implement the Single UNIX Specification Version 2.
</PARA>

<NOTE>
<PARA>
I'd still like to come up with a better distinction between base & util
libraries. 
</PARA>
</NOTE>

<!-- Start of text generated from database -->
<!-- generated from the LSB specification database -->
<!--    by $Header: /cvsroot/lsb/spec/mklibspec,v 1.21 2001/04/25 23:58:49 anderson Exp 0 -->
<!--    at Thu May  3 22:49:50 2001 -->
<SECT1 ID=libc>
<TITLE>libc</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Library:</ENTRY>
<ENTRY>libc</ENTRY>
</ROW>
<ROW>
<ENTRY>Runtime Path:</ENTRY>
<ENTRY>libc.so.6</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The behaviour of the interfaces in this library is specified by the following Standards.<SIMPLELIST COLUMNS=1>
<MEMBER>
Linux Standard Base<FOOTNOTE ID="std-131-10">
<PARA>
Linux Standard Base</PARA>
</FOOTNOTE>
</MEMBER>
</SIMPLELIST>
</PARA>
<SECT2>
<TITLE>Standard Library</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>ioperm(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>iopl(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY></ENTRY><ENTRY></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>ELF Magic</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>__divdi3(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY></ENTRY><ENTRY></ENTRY><ENTRY></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
</SECT1>
<SECT1 ID=libc-ddefs>
<TITLE> Data Definitions for libc</TITLE>
<PARA>
</PARA>
<SECT2>
<TITLE>assert.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 11 Default HeaderGroup for assert.h
 */

void __assert_fail(char *, char *, unsigned int, char *);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>ctype.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 14 Default HeaderGroup for ctype.h
 */

unsigned short *__ctype_b;
__int32_t *__ctype_tolower;
__int32_t *__ctype_toupper;
int _tolower(int);
int _toupper(int);
int isalnum(int);
int isalpha(int);
int isascii(int);
int iscntrl(int);
int isdigit(int);
int isgraph(int);
int islower(int);
int isprint(int);
int ispunct(int);
int isspace(int);
int isupper(int);
int isxdigit(int);
int toascii(int);
int tolower(int);
int toupper(int);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>dirent.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 15 Default HeaderGroup for dirent.h
 */
typedef struct __dirstream DIR;


void rewinddir(DIR *);
void seekdir(DIR *, long);
long telldir(DIR *);
int closedir(DIR *);
DIR *opendir(char *);
struct dirent *readdir(DIR *);
struct dirent64 *readdir64(DIR *);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>fcntl.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 18 Default HeaderGroup for fcntl.h
 */

int creat(char *, __mode_t);
int creat64(char *, __mode_t);
int fcntl(int, int, ...);
int open(char *, int, ...);
int open64(char *, int, ...);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>fnmatch.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 20 Default HeaderGroup for fnmatch.h
 */

int fnmatch(char *, char *, int);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>ftw.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 21 Default HeaderGroup for ftw.h
 */
typedef int (*__ftw_func_t) (char *__filename, struct stat * __status,
			     int __flag)
;

typedef int (*__ftw64_func_t) (char *__filename, struct stat64 * __status,
			       int __flag)
;

typedef int (*__nftw_func_t) (char *__filename, struct stat * __status,
			      int __flag, struct FTW * __info)
;

typedef int (*__nftw64_func_t) (char *__filename, struct stat64 * __status,
				int __flag, struct FTW * __info)
;


int ftw(char *, __ftw_func_t, int);
int ftw64(char *, __ftw64_func_t, int);
int nftw(char *, __nftw_func_t, int, int);
int nftw64(char *, __nftw64_func_t, int, int);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>glob.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 3 Default HeaderGroup for glob.h
 */
typedef struct {
    __size_t gl_pathc;
    char **gl_pathv;
    __size_t gl_offs;
    int gl_flags;
    void (*gl_closedir) ();
    struct dirent64 *(*gl_readdir) ();
    void *(*gl_opendir) ();
    int (*gl_lstat) ();
    int (*gl_stat) ();
} glob_t;

typedef struct {
    __size_t gl_pathc;
    char **gl_pathv;
    __size_t gl_offs;
    int gl_flags;
    void (*gl_closedir) ();
    struct dirent64 *(*gl_readdir) ();
    void *(*gl_opendir) ();
    int (*gl_lstat) ();
    int (*gl_stat) ();
} glob64_t;


int glob(char *, int, int, glob_t *);
int glob64(char *, int, int, glob64_t *);
void globfree(glob_t *);
void globfree64(glob64_t *);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>grp.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 4 Default HeaderGroup for grp.h
 */
struct group {
    char *gr_name;
    char *gr_passwd;
    __gid_t gr_gid;
    char **gr_mem;
};


void endgrent(void);
struct group *getgrent(void);
struct group *getgrgid(__gid_t);
struct group *getgrnam(char *);
void setgrent(void);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>iconv.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 22 Default HeaderGroup for iconv.h
 */
typedef void *iconv_t;


size_t iconv(iconv_t, char **, size_t *, char **, size_t *);
int iconv_close(iconv_t);
iconv_t iconv_open(char *, char *);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>inttypes.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 23 Default HeaderGroup for inttypes.h
 */
typedef lldiv_t imaxdiv_t;

typedef long long intmax_t;

typedef unsigned long long uintmax_t;


intmax_t strtoimax(char *, char **, int);
uintmax_t strtoumax(char *, char **, int);
intmax_t wcstoimax(wchar_t *, wchar_t * *, int);
uintmax_t wcstoumax(wchar_t *, wchar_t * *, int);
intmax_t imaxabs(intmax_t);
imaxdiv_t imaxdiv(intmax_t, intmax_t);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>langinfo.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 25 Default HeaderGroup for langinfo.h
 */

char *nl_langinfo(nl_item);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>locale.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 27 Default HeaderGroup for locale.h
 */
struct lconv {
    char *decimal_point;
    char *thousands_sep;
    char *grouping;
    char *int_curr_symbol;
    char *currency_symbol;
    char *mon_decimal_point;
    char *mon_thousands_sep;
    char *mon_grouping;
    char *positive_sign;
    char *negative_sign;
    char int_frac_digits;
    char frac_digits;
    char p_cs_precedes;
    char p_sep_by_space;
    char n_cs_precedes;
    char n_sep_by_space;
    char p_sign_posn;
    char n_sign_posn;
};


struct lconv *localeconv(void);
char *setlocale(int, char *);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>monetary.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 30 Default HeaderGroup for monetary.h
 */

ssize_t strfmon(char *, size_t, char *, ...);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>nl_types.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 32 Default HeaderGroup for nl_types.h
 */
typedef void *nl_catd;

typedef int nl_item;


int catclose(nl_catd);
char *catgets(nl_catd, int, int, char *);
nl_catd catopen(char *, int);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>pwd.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 34 Default HeaderGroup for pwd.h
 */
struct passwd {
    char *pw_name;
    char *pw_passwd;
    __uid_t pw_uid;
    __gid_t pw_gid;
    char *pw_gecos;
    char *pw_dir;
    char *pw_shell;
};


void endpwent(void);
struct passwd *getpwent(void);
struct passwd *getpwnam(char *);
struct passwd *getpwuid(__uid_t);
void setpwent(void);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>regex.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 35 Default HeaderGroup for regex.h
 */
typedef unsigned long reg_syntax_t;

typedef struct re_pattern_buffer {
    unsigned char *buffer;
    unsigned long allocated;
    unsigned long used;
    reg_syntax_t syntax;
    char *fastmap;
    char *translate;
    size_t re_nsub;
    unsigned int can_be_null;
    unsigned int regs_allocated;
    unsigned int fastmap_accurate;
    unsigned int no_sub;
    unsigned int not_bol;
    unsigned int not_eol;
    unsigned int newline_anchor;
} regex_t;

typedef int regoff_t;

typedef struct {
    regoff_t rm_so;
    regoff_t rm_eo;
} regmatch_t;


int regcomp(regex_t *, char *, int);
size_t regerror(int, regex_t *, char *, size_t);
int regexec(regex_t *, char *, size_t, regmatch_t, int);
void regfree(regex_t *);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>regexp.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 36 Default HeaderGroup for regexp.h
 */

char *loc1;
char *loc2;
char *locs;
int advance(char *, char *);
int step(char *, char *);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>sched.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 37 Default HeaderGroup for sched.h
 */

int sched_get_priority_max(int);
int sched_get_priority_min(int);
int sched_getparam(__pid_t, struct sched_param *);
int sched_getscheduler(__pid_t);
int sched_rr_get_interval(__pid_t, struct timespec *);
int sched_setparam(__pid_t, struct sched_param *);
int sched_setscheduler(__pid_t, int, struct sched_param *);
int sched_yield(void);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>search.h</TITLE>
<PARA>
</PARA>
<SCREEN>
typedef enum {
    FIND,
    ENTER
} ACTION;

typedef enum {
    preorder,
    postorder,
    endorder,
    leaf
} VISIT;

/*
 * 38 Default HeaderGroup for search.h
 */
typedef struct entry {
    char *key;
    void *data;
} ENTRY;

typedef void (*__action_fn_t) (void *__nodep, VISIT __value, int __level)
;


int hcreate(size_t);
ENTRY *hsearch(ENTRY, ACTION);
void insque(void *, void *);
void *lfind(void *, void *, size_t *, size_t, __compar_fn_t);
void *lsearch(void *, void *, size_t *, size_t, __compar_fn_t);
void remque(void *);
void hdestroy(void);
void *tfind(void *, void **, __compar_fn_t);
void *tsearch(void *, void **, __compar_fn_t);
void twalk(void *, __action_fn_t);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>setjmp.h</TITLE>
<PARA>
</PARA>
<SCREEN>
typedef int __jmp_buf;

/*
 * 40 Default HeaderGroup for setjmp.h
 */
typedef struct __jmp_buf_tag {
    __jmp_buf __jmpbuf;
    int __mask_was_saved;
    __sigset_t __saved_mask;
} jmp_buf;

typedef jmp_buf sigjmp_buf;


int __sigsetjmp(jmp_buf, int);
void longjmp(jmp_buf, int);
void siglongjmp(sigjmp_buf, int);
void _longjmp(jmp_buf, int);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>signal.h</TITLE>
<PARA>
</PARA>
<SCREEN>
typedef union sigval {
    int sival_int;
    void *sival_ptr;
} sigval_t;

/*
 * 41 Default HeaderGroup for signal.h
 */
typedef void (*__sighandler_t) ()
;

struct sigevent {
    sigval_t sigev_value;
    int sigev_signo;
    int sigev_notify;
};

typedef struct {
    unsigned long __val[1];
} __sigset_t;

typedef __sigset_t sigset_t;

struct sigaction;

typedef struct {
    int si_band;
    int si_fd;
    struct _sifields;
    struct _sigpoll;
} siginfo_t;

struct sigaltstack {
    void *ss_sp;
    int ss_flags;
    size_t ss_size;
};

struct sigstack {
    void *ss_sp;
    int ss_onstack;
};


int __libc_current_sigrtmax(void);
int __libc_current_sigrtmin(void);
int __sigpause(int, int);
__sighandler_t __sysv_signal(int, __sighandler_t);
int killpg(__pid_t, int);
int raise(int);
int sigaddset(sigset_t *, int);
int sigdelset(sigset_t *, int);
int sigemptyset(sigset_t *);
int sigfillset(sigset_t *);
int sighold(int);
int sigignore(int);
int siginterrupt(int, int);
int sigismember(sigset_t *, int);
int sigpending(sigset_t *);
int sigrelse(int);
__sighandler_t sigset(int, __sighandler_t);
int sigstack(struct sigstack *, struct sigstack *);
int sigaction(int, struct sigaction *, struct sigaction *);
int sigwait(sigset_t *, int *);
int kill(__pid_t, int);
int sigaltstack(struct sigaltstack *, struct sigaltstack *);
__sighandler_t signal(int, __sighandler_t);
int sigprocmask(int, sigset_t *, sigset_t *);
int sigsuspend(sigset_t *);
int sigqueue(__pid_t, int, union sigval);
int sigwaitinfo(sigset_t *, siginfo_t *);
int sigtimedwait(sigset_t *, siginfo_t *, struct timespec *);
__sighandler_t bsd_signal(int, __sighandler_t);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>stdio.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 42 Default HeaderGroup for stdio.h
 */
typedef struct _IO_FILE FILE;

typedef __off_t fpos_t;

typedef __off64_t fpos64_t;


void clearerr(FILE *);
int fclose(FILE *);
FILE *fdopen(int, char *);
int fileno(FILE *);
FILE *fopen(char *, char *);
int fprintf(FILE *, char *, ...);
int fputc(int, FILE *);
FILE *freopen(char *, char *, FILE *);
FILE *freopen64(char *, char *, FILE *);
int fscanf(FILE *, char *, ...);
int fseek(FILE *, long, int);
int fseeko(FILE *, __off_t, int);
int fseeko64(FILE *, __off64_t, int);
__off_t ftello(FILE *);
__off64_t ftello64(FILE *);
int getchar(void);
int getchar_unlocked(void);
int getw(FILE *);
int pclose(FILE *);
void perror(char *);
FILE *popen(char *, char *);
int printf(char *, ...);
int putc_unlocked(int, FILE *);
int putchar(int);
int putchar_unlocked(int);
int putw(int, FILE *);
int remove(char *);
void rewind(FILE *);
int scanf(char *, ...);
void setbuf(FILE *, char *);
int sprintf(char *, char *, ...);
int sscanf(char *, char *, ...);
FILE *stderr;
FILE *stdin;
FILE *stdout;
char *tempnam(char *, char *);
FILE *tmpfile64(void);
FILE *tmpfile(void);
char *tmpnam(char *);
int vfprintf(FILE *, char *, __gnuc_va_list);
int vprintf(char *, __gnuc_va_list);
int feof(FILE *);
int ferror(FILE *);
int fflush(FILE *);
int fgetc(FILE *);
int fgetpos(FILE *, fpos_t *);
char *fgets(char *, int, FILE *);
int fputs(char *, FILE *);
size_t fread(void *, size_t, size_t, FILE *);
int fsetpos(FILE *, fpos_t *);
long ftell(FILE *);
size_t fwrite(void *, size_t, size_t, FILE *);
int getc(FILE *);
char *gets(char *);
int putc(int, FILE *);
int puts(char *);
int setvbuf(FILE *, char *, int, size_t);
int snprintf(char *, size_t, char *, ...);
int ungetc(int, FILE *);
int vsnprintf(char *, size_t, char *, __gnuc_va_list);
int vsprintf(char *, char *, __gnuc_va_list);
void flockfile(FILE *);
int fgetpos64(FILE *, fpos64_t *);
FILE *fopen64(char *, char *);
int fsetpos64(FILE *, fpos64_t *);
int ftrylockfile(FILE *);
void funlockfile(FILE *);
int getc_unlocked(FILE *);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>stdlib.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 43 Default HeaderGroup for stdlib.h
 */
typedef struct {
    long quot;
    long rem;
} lldiv_t;

typedef struct {
    int quot;
    int rem;
} div_t;

typedef struct {
    long quot;
    long rem;
} ldiv_t;

typedef int (*__compar_fn_t) ()
;


char *__secure_getenv(char *);
double __strtod_internal(char *, char **, int);
float __strtof_internal(char *, char **, int);
long __strtol_internal(char *, char **, int, int);
long double __strtold_internal(char *, char **, int);
long long __strtoll_internal(char *, char **, int, int);
unsigned long __strtoul_internal(char *, char **, int, int);
unsigned long long __strtoull_internal(char *, char **, int, int);
long a64l(char *);
void abort(void);
int abs(int);
int atexit(void);
double atof(char *);
int atoi(char *);
long atol(char *);
void *bsearch(void *, void *, size_t, size_t, __compar_fn_t);
div_t div(int, int);
double drand48(void);
char *ecvt(double, int, int *, int *);
double erand48(unsigned short);
void exit(int);
char *fcvt(double, int, int *, int *);
char *gcvt(double, int, char *);
char *getenv(char *);
int getsubopt(char **, char **, char **);
int grantpt(int);
long jrand48(unsigned short);
char *l64a(long);
long labs(long);
ldiv_t ldiv(long, long);
long long llabs(long long);
lldiv_t lldiv(long long, long long);
long lrand48(void);
int mblen(char *, size_t);
size_t mbstowcs(wchar_t *, char *, size_t);
int mbtowc(wchar_t *, char *, size_t);
int mkstemp(char *);
char *mktemp(char *);
long mrand48(void);
long nrand48(unsigned short);
char *ptsname(int);
int putenv(char *);
void qsort(void *, size_t, size_t, __compar_fn_t);
int rand(void);
unsigned short *seed48(unsigned short);
void srand48(long);
int unlockpt(int);
size_t wcstombs(char *, wchar_t *, size_t);
int wctomb(char *, wchar_t);
int system(char *);
void setkey(char *);
void *calloc(size_t, size_t);
void free(void *);
void *initstate(unsigned int, void *, size_t);
void *malloc(size_t);
int32_t random(void);
void *realloc(void *, size_t);
void *setstate(void *);
void srand(unsigned int);
void srandom(unsigned int);
double strtod(char *, char **);
float strtof(char *, char **);
long strtol(char *, char **, int);
long double strtold(char *, char **);
long long strtoll(char *, char **, int);
unsigned long strtoul(char *, char **, int);
unsigned long long strtoull(char *, char **, int);
void _Exit(int);
size_t __ctype_get_mb_cur_max(void);
char *realpath(char *, char *);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>string.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 44 Default HeaderGroup for string.h
 */

void __bzero(void *, size_t);
char *__strdup(char *);
char *__strtok_r(char *, char *, char **);
void bcopy(void *, void *, size_t);
void *memchr(void *, int, size_t);
int memcmp(void *, void *, size_t);
void *memcpy(void *, void *, size_t);
void *memmove(void *, void *, size_t);
void *memset(void *, int, size_t);
char *strcat(char *, char *);
char *strchr(char *, int);
int strcmp(char *, char *);
int strcoll(char *, char *);
char *strcpy(char *, char *);
size_t strcspn(char *, char *);
char *strerror(int);
size_t strlen(char *);
char *strncat(char *, char *, size_t);
int strncmp(char *, char *, size_t);
char *strncpy(char *, char *, size_t);
char *strpbrk(char *, char *);
char *strrchr(char *, int);
size_t strspn(char *, char *);
char *strstr(char *, char *);
char *strtok(char *, char *);
size_t strxfrm(char *, char *, size_t);
int bcmp(void *, void *, size_t);
void bzero(void *, size_t);
int ffs(int);
char *-1;
void *memccpy(void *, void *, int, size_t);
char *rindex(char *, int);
int strcasecmp(char *, char *);
char *strdup(char *);
int strncasecmp(char *, char *, size_t);
char *strtok_r(char *, char *, char **);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>sys/ipc.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 49 Default HeaderGroup for sys/ipc.h
 */

key_t ftok(char *, int);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>sys/mman.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 56 Default HeaderGroup for sys/mman.h
 */

int msync(void *, size_t, int);
int mlock(void *, size_t);
int mlockall(int);
void *mmap(void *, size_t, int, int, int, __off_t);
int mprotect(void *, size_t, int);
int munlock(void *, size_t);
int munlockall(void);
int munmap(void *, size_t);
void *mmap64(void *, size_t, int, int, int, __off64_t);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>sys/msg.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 50 Default HeaderGroup for sys/msg.h
 */

int msgctl(int, int, struct msqid_ds *);
int msgget(key_t, int);
int msgrcv(int, void *, size_t, long, int);
int msgsnd(int, void *, size_t, int);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>sys/resource.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 57 Default HeaderGroup for sys/resource.h
 */

int getpriority(,, int);
int getrlimit64(,, struct rlimit64 *);
int setpriority(,, int, int);
int setrlimit(,, struct rlimit *);
int getrlimit(,, struct rlimit *);
int getrusage(,, struct rusage *);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>sys/sem.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 47 Default HeaderGroup for sys/sem.h
 */
struct sembuf {
    short sem_num;
    short sem_op;
    short sem_flg;
};


int semctl(int, int, int, ...);
int semget(key_t, int, int);
int semop(int, struct sembuf *, unsigned int);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>sys/shm.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 51 Default HeaderGroup for sys/shm.h
 */

void *shmat(int, void *, int);
int shmctl(int, int, struct shmid_ds *);
int shmdt(void *);
int shmget(key_t, size_t, int);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>sys/socket.h</TITLE>
<PARA>
</PARA>
<SCREEN>
typedef unsigned short sa_family_t;

typedef unsigned int socklen_t;

/*
 * 48 Default HeaderGroup for sys/socket.h
 */
struct sockaddr {
    sa_family_t sa_family;
    char sa_data[1];
};

struct msghdr {
    void *msg_name;
    socklen_t msg_namelen;
    struct iovec *msg_iov;
    size_t msg_iovlen;
    void *msg_control;
    size_t msg_controllen;
    int msg_flags;
};


int bind(int, struct sockaddr *, socklen_t);
int getsockname(int, struct sockaddr *, socklen_t *);
int listen(int, unsigned int);
int setsockopt(int, int, int, void *, socklen_t);
int accept(int, struct sockaddr *, socklen_t *);
int connect(int, struct sockaddr *, socklen_t);
int recv(int, void *, size_t, int);
int recvfrom(int, void *, size_t, int, struct sockaddr *, socklen_t *);
int recvmsg(int, struct msghdr *, int);
int send(int, void *, size_t, int);
int sendmsg(int, struct msghdr *, int);
int sendto(int, void *, size_t, int, struct sockaddr *, socklen_t);
int getpeername(int, struct sockaddr *, socklen_t *);
int getsockopt(int, int, int, void *, socklen_t *);
int shutdown(int, int);
int socket(int, int, int);
int socketpair(int, int, int, int);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>sys/stat.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 52 Default HeaderGroup for sys/stat.h
 */

int __fxstat(int, int, struct stat *);
int __fxstat64(int, int, struct stat64 *);
int __lxstat(int, char *, struct stat *);
int __lxstat64(int, char *, struct stat64 *);
int __xmknod(int, char *, __mode_t, __dev_t *);
int __xstat(int, char *, struct stat *);
int __xstat64(int, char *, struct stat64 *);
int mkfifo(char *, __mode_t);
int chmod(char *, __mode_t);
int fchmod(int, __mode_t);
int mkdir(char *, __mode_t);
__mode_t umask(__mode_t);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>sys/times.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 53 Default HeaderGroup for sys/times.h
 */
struct tms {
    clock_t tms_utime;
    clock_t tms_stime;
    clock_t tms_cutime;
    clock_t tms_cstime;
};


clock_t times(struct tms *);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>sys/utsname.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 54 Default HeaderGroup for sys/utsname.h
 */
struct utsname {
    char sysname[1];
    char nodename[1];
    char release[1];
    char version[1];
    char machine[1];
    char __domainname[1];
};


int uname(struct utsname *);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>sys/wait.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 55 Default HeaderGroup for sys/wait.h
 */
typedef enum {
    P_ALL,
    P_PID,
    P_PGID
} idtype_t;


int waitid(idtype_t, __id_t, siginfo_t *, int);
__pid_t wait(int *);
__pid_t waitpid(__pid_t, int *, int);
__pid_t wait3(int *, int, struct rusage *);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>termios.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 59 Default HeaderGroup for termios.h
 */

cfgetispeed(struct termios *);
cfgetospeed(struct termios *);
int cfsetispeed(struct termios *,);
int cfsetospeed(struct termios *,);
int tcflow(int, int);
int tcflush(int, int);
__pid_t tcgetsid(int);
int tcsendbreak(int, int);
int tcsetattr(int, int, struct termios *);
int tcdrain(int);
int tcgetattr(int, struct termios *);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>time.h</TITLE>
<PARA>
</PARA>
<SCREEN>
typedef long __clock_t;

/*
 * 60 Default HeaderGroup for time.h
 */
struct timespec {
    long tv_sec;
    long tv_nsec;
};

struct tm {
    int tm_sec;
    int tm_min;
    int tm_hour;
    int tm_mday;
    int tm_mon;
    int tm_year;
    int tm_wday;
    int tm_yday;
    int tm_isdst;
    long __tm_gmtoff;
    char *__tm_zone;
};

typedef __clock_t clock_t;

typedef __time_t time_t;


char *asctime(struct tm *);
clock_t clock(void);
char *ctime(time_t *);
double difftime(time_t, time_t);
struct tm *getdate(char *);
int getdate_err;
struct tm *gmtime(time_t *);
struct tm *localtime(time_t *);
time_t mktime(struct tm *);
size_t strftime(char *, size_t, char *, struct tm *);
char *strptime(char *, char *, struct tm *);
time_t time(time_t *);
int nanosleep(struct timespec *, struct timespec *);
int daylight();
long timezone;
char *tzname();
void tzset(void);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>ulimit.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 61 Default HeaderGroup for ulimit.h
 */

long ulimit(int, ...);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>unistd.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 62 Default HeaderGroup for unistd.h
 */
typedef __ssize_t ssize_t;

typedef __pid_t pid_t;

typedef __off_t off_t;


char **__environ;
__pid_t __getpgid(__pid_t);
void _exit(int);
int acct(char *);
unsigned int alarm(unsigned int);
int chown(char *, __uid_t, __gid_t);
int chroot(char *);
size_t confstr(int, char *, size_t);
char *ctermid(char *);
char *cuserid(char *);
int daemon(int, int);
int execl(char *, char *, ...);
int execle(char *, char *, ...);
int execlp(char *, char *, ...);
int execv(char *, char *);
int execvp(char *, char *);
int fdatasync(int);
int ftruncate64(int, __off64_t);
long gethostid(void);
char *getlogin(void);
__pid_t getpgrp(void);
__pid_t getsid(__pid_t);
char *getwd(char *);
int lockf(int, int, __off_t);
int lockf64(int, int, __off64_t);
int nice(int);
int rename(char *, char *);
int sethostid(long);
int sethostname(char *, size_t);
int setpgrp(void);
void swab(void *, void *, ssize_t);
int sync(void);
__pid_t tcgetpgrp(int);
int tcsetpgrp(int, __pid_t);
int truncate(char *, __off_t);
int truncate64(char *, __off64_t);
char *ttyname(int);
unsigned int ualarm(unsigned int, unsigned int);
void usleep(unsigned int);
int close(int);
int fsync(int);
__off_t lseek(int, __off_t, int);
int pause(void);
ssize_t read(int, void *, size_t);
ssize_t write(int, void *, size_t);
char *crypt(char *, char *);
void encrypt(char *, int);
int access(char *, int);
int brk(void *);
int chdir(char *);
int dup(int);
int dup2(int, int);
int execve(char *, char *, char *);
int fchdir(int);
int fchown(int, __uid_t, __gid_t);
__pid_t fork(void);
__gid_t getegid(void);
__uid_t geteuid(void);
__gid_t getgid(void);
int getgroups(int, __gid_t);
int gethostname(char *, size_t);
__pid_t getpgid(__pid_t);
__pid_t getpid(void);
__uid_t getuid(void);
int lchown(char *, __uid_t, __gid_t);
int link(char *, char *);
long pathconf(char *, int);
int pipe(int);
int readlink(char *, char *, size_t);
int rmdir(char *);
void *sbrk(ptrdiff_t);
int setgid(__gid_t);
int setpgid(__pid_t, __pid_t);
int setregid(__gid_t, __gid_t);
int setreuid(__uid_t, __uid_t);
__pid_t setsid(void);
int setuid(__uid_t);
unsigned int sleep(unsigned int);
int symlink(char *, char *);
long sysconf(int);
int unlink(char *);
__pid_t vfork(void);
ssize_t pread(int, void *, size_t, __off_t);
ssize_t pwrite(int, void *, size_t, __off_t);
long fpathconf(int, int);
int ftruncate(int, __off_t);
char *getcwd(char *, size_t);
int getpagesize(void);
__pid_t getppid(void);
int isatty(int);
__off64_t lseek64(int, __off64_t, int);
ssize_t pwrite64(int, void *, size_t, __off64_t);
int ttyname_r(int, char *, size_t);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>utime.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 63 Default HeaderGroup for utime.h
 */
struct utimbuf {
    __time_t actime;
    __time_t modtime;
};


int utime(char *, struct utimbuf *);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>wchar.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 64 Default HeaderGroup for wchar.h
 */
typedef long wchar_t;

typedef unsigned int wint_t;

typedef struct {
    int count;
    wint_t value;
} mbstate_t;


size_t __mbrlen(char *, size_t, mbstate_t *);
double __wcstod_internal(wchar_t *, wchar_t * *, int);
float __wcstof_internal(wchar_t *, wchar_t * *, int);
long __wcstol_internal(wchar_t *, wchar_t * *, int, int);
long double __wcstold_internal(wchar_t *, wchar_t * *, int);
long long __wcstoll_internal(wchar_t *, wchar_t * *, int, int);
unsigned long __wcstoul_internal(wchar_t *, wchar_t * *, int, int);
unsigned long long __wcstoull_internal(wchar_t *, wchar_t * *, int, int);
wchar_t *wcscat(wchar_t *, wchar_t *);
wchar_t *wcschr(wchar_t *, wchar_t);
int wcscmp(wchar_t *, wchar_t *);
int wcscoll(wchar_t *, wchar_t *);
wchar_t *wcscpy(wchar_t *, wchar_t *);
size_t wcscspn(wchar_t *, wchar_t *);
wchar_t *wcsncat(wchar_t *, wchar_t *, size_t);
int wcsncmp(wchar_t *, wchar_t *, size_t);
wchar_t *wcsncpy(wchar_t *, wchar_t *, size_t);
wchar_t *wcspbrk(wchar_t *, wchar_t *);
wchar_t *wcsrchr(wchar_t *, wchar_t);
size_t wcsspn(wchar_t *, wchar_t *);
wchar_t *wcsstr(wchar_t *, wchar_t *);
wchar_t *wcstok(wchar_t *, wchar_t *, wchar_t * *);
int wcswidth(wchar_t *, size_t);
size_t wcsxfrm(wchar_t *, wchar_t *, size_t);
int wctob(wint_t);
int wcwidth(wint_t);
wchar_t *wmemchr(wchar_t *, wchar_t, size_t);
int wmemcmp(wchar_t *, wchar_t *, size_t);
wchar_t *wmemcpy(wchar_t *, wchar_t *, size_t);
wchar_t *wmemmove(wchar_t *, wchar_t *, size_t);
wchar_t *wmemset(wchar_t *, wchar_t, size_t);
size_t mbrlen(char *, size_t, mbstate_t *);
size_t mbrtowc(wchar_t *, char *, size_t, mbstate_t *);
int mbsinit(mbstate_t *);
size_t mbsrtowcs(wchar_t *, char **, size_t, mbstate_t *);
size_t wcrtomb(char *, wchar_t, mbstate_t *);
size_t wcslen(wchar_t *);
size_t wcsrtombs(char *, wchar_t * *, size_t, mbstate_t *);
double wcstod(wchar_t *, wchar_t * *);
long wcstol(wchar_t *, wchar_t * *, int);
unsigned long wcstoul(wchar_t *, wchar_t * *, int);
long long wcstoll(wchar_t *, wchar_t * *, int);
unsigned long long wcstoull(wchar_t *, wchar_t * *, int);
wint_t btowc(int);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>wctype.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 65 Default HeaderGroup for wctype.h
 */
typedef unsigned long wctype_t;

typedef __int32_t *wctrans_t;


wint_t towlower(wint_t);
wint_t towupper(wint_t);
wctrans_t wctrans(char *);
int iswalnum(wint_t);
int iswalpha(wint_t);
int iswcntrl(wint_t);
int iswctype(wint_t, wctype_t);
int iswdigit(wint_t);
int iswgraph(wint_t);
int iswlower(wint_t);
int iswprint(wint_t);
int iswpunct(wint_t);
int iswspace(wint_t);
int iswupper(wint_t);
int iswxdigit(wint_t);
wctype_t wctype(char *);
wint_t towctrans(wint_t, wctrans_t);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>wordexp.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 66 Default HeaderGroup for wordexp.h
 */
typedef struct {
    int we_wordc;
    char **we_wordv;
    int we_offs;
} wordexp_t;


int wordexp(char *, wordexp_t *, int);
void wordfree(wordexp_t *);
</SCREEN>
</SECT2>
</SECT1>
<!-- End of text generated from database -->
<!--    by $Header: /cvsroot/lsb/spec/mklibspec,v 1.21 2001/04/25 23:58:49 anderson Exp 0 -->

<SECT1 ID=libcman>
<TITLE>Interface Definitions for libc</TITLE>
<PARA>
</PARA>
</SECT1>


<!-- Start of text generated from database -->
<!-- generated from the LSB specification database -->
<!--    by $Header: /cvsroot/lsb/spec/mklibspec,v 1.21 2001/04/25 23:58:49 anderson Exp 0 -->
<!--    at Thu May  3 22:50:04 2001 -->
<SECT1 ID=libm>
<TITLE>libm</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Library:</ENTRY>
<ENTRY>libm</ENTRY>
</ROW>
<ROW>
<ENTRY>Runtime Path:</ENTRY>
<ENTRY>libm.so.6</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
</PARA>
</SECT1>
<SECT1 ID=libm-ddefs>
<TITLE> Data Definitions for libm</TITLE>
<PARA>
</PARA>
<SECT2>
<TITLE>math.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 29 Default HeaderGroup for math.h
 */

int signgam;
</SCREEN>
</SECT2>
</SECT1>
<!-- End of text generated from database -->
<!--    by $Header: /cvsroot/lsb/spec/mklibspec,v 1.21 2001/04/25 23:58:49 anderson Exp 0 -->


</CHAPTER>

</PART>
