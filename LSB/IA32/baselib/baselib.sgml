<PART ID=tocbaselib>
<TITLE>Base Libraries</TITLE>

<CHAPTER id=baselib>
<TITLE>Libraries</TITLE>

<PARA>
An LSB-conforming implementation shall support some general-purpose
libraries. Facilities in these libraries manipulate system data files,
transfer control to the implementation, and so on.  These Base correspond
to those libraries needed to implement the Single UNIX Specification Version 2.
</PARA>

<NOTE>
<PARA>
I'd still like to come up with a better distinction between base & util
libraries. 
</PARA>
</NOTE>

<SECT1 ID=libc>
<TITLE>libc</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Library:</ENTRY>
<ENTRY>libc</ENTRY>
</ROW>
<ROW>
<ENTRY>Runtime Path:</ENTRY>
<ENTRY>libc.so.6</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The behaviour of the interfaces in this library is specified by the following Standards.<SIMPLELIST COLUMNS=1>
<MEMBER>
BSD 4.4 Lite version 2<FOOTNOTE ID="std-131-7">
<PARA>
BSD 4.4 Lite version 2</PARA>
</FOOTNOTE>
</MEMBER>
<MEMBER>
ISO/IEC 9899: 1999, Programming Languages --C<FOOTNOTE ID="std-131-25">
<PARA>
ISO/IEC 9899: 1999, Programming Languages --C</PARA>
</FOOTNOTE>
</MEMBER>
<MEMBER>
Large File Support<FOOTNOTE ID="std-131-35">
<PARA>
Large File Support</PARA>
</FOOTNOTE>
</MEMBER>
<MEMBER>
GNU/Linux defacto standard<FOOTNOTE ID="std-131-20">
<PARA>
GNU/Linux defacto standard</PARA>
</FOOTNOTE>
</MEMBER>
<MEMBER>
Linux Standard Base<FOOTNOTE ID="std-131-10">
<PARA>
Linux Standard Base</PARA>
</FOOTNOTE>
</MEMBER>
<MEMBER>
IEEE Std POSIX.1-1996 [ISO/IEC 9945-1:1996]<FOOTNOTE ID="std-131-3">
<PARA>
IEEE Std POSIX.1-1996 [ISO/IEC 9945-1:1996]</PARA>
</FOOTNOTE>
</MEMBER>
<MEMBER>
CAE Specification, February 1997, Networking Services (XNS), Issue 5
(ISBN: 1-85912-165-9, C523)<FOOTNOTE ID="std-131-15">
<PARA>
CAE Specification, February 1997, Networking Services (XNS), Issue 5
(ISBN: 1-85912-165-9, C523)</PARA>
</FOOTNOTE>
</MEMBER>
<MEMBER>
CAE Specification, January 1997, System Interfaces and Headers (XSH),
Issue 5 (ISBN: 1-85912-181-0, C606)<FOOTNOTE ID="std-131-5">
<PARA>
CAE Specification, January 1997, System Interfaces and Headers (XSH),
Issue 5 (ISBN: 1-85912-181-0, C606)</PARA>
</FOOTNOTE>
</MEMBER>
</SIMPLELIST>
</PARA>
<SECT2>
<TITLE>System Calls</TITLE>
<PARA>
</PARA>
</SECT2>
<SECT2>
<TITLE>Standard I/O</TITLE>
<PARA>
</PARA>
</SECT2>
<SECT2>
<TITLE>Signal Handling</TITLE>
<PARA>
</PARA>
</SECT2>
<SECT2>
<TITLE>Standard Library</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>ioperm(1)<FOOTNOTEREF LINKEND="std-131-20"></ENTRY><ENTRY>iopl(1)<FOOTNOTEREF LINKEND="std-131-20"></ENTRY><ENTRY></ENTRY><ENTRY></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>Localization Functions</TITLE>
<PARA>
</PARA>
</SECT2>
<SECT2>
<TITLE>Socket Interface</TITLE>
<PARA>
</PARA>
</SECT2>
<SECT2>
<TITLE>RPC Interfaces</TITLE>
<PARA>
</PARA>
</SECT2>
<SECT2>
<TITLE>Wide Characters</TITLE>
<PARA>
</PARA>
</SECT2>
<SECT2>
<TITLE>String Functions</TITLE>
<PARA>
</PARA>
</SECT2>
<SECT2>
<TITLE>IPC Functions</TITLE>
<PARA>
</PARA>
</SECT2>
<SECT2>
<TITLE>Regular Expressions</TITLE>
<PARA>
</PARA>
</SECT2>
<SECT2>
<TITLE>Character Type Functions</TITLE>
<PARA>
</PARA>
</SECT2>
<SECT2>
<TITLE>Time Function</TITLE>
<PARA>
</PARA>
</SECT2>
<SECT2>
<TITLE>Terminal Interface Functions</TITLE>
<PARA>
</PARA>
</SECT2>
<SECT2>
<TITLE>System Database Interface</TITLE>
<PARA>
</PARA>
</SECT2>
<SECT2>
<TITLE>User/Group Management</TITLE>
<PARA>
</PARA>
</SECT2>
<SECT2>
<TITLE>ELF Magic</TITLE>
<PARA>
</PARA>
</SECT2>
<SECT2>
<TITLE>Large File Support</TITLE>
<PARA>
</PARA>
</SECT2>
</SECT1>
<SECT1 ID=libc-ddefs>
<TITLE> Data Definitions for libc</TITLE>
<PARA>
</PARA>
<SECT2>
<TITLE>assert.h</TITLE>
<PARA>
</PARA>
<SCREEN>

void __assert_fail (char, char, unsigned int, char);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>ctype.h</TITLE>
<PARA>
</PARA>
<SCREEN>

__int32_t __ctype_tolower;
__int32_t __ctype_toupper;
int _tolower (int);
int _toupper (int);
int isalnum (int);
int isalpha (int);
int isascii (int);
int iscntrl (int);
int isdigit (int);
int isgraph (int);
int islower (int);
int isprint (int);
int ispunct (int);
int isspace (int);
int isupper (int);
int isxdigit (int);
int toascii (int);
int tolower (int);
int toupper (int);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>dirent.h</TITLE>
<PARA>
</PARA>
<SCREEN>
typedef Unknown Type:"" unknown DIR;


int alphasort (void, void);
void rewinddir (DIR);
void seekdir (DIR, long);
long telldir (DIR);
int closedir (DIR);
DIR opendir (char);
dirent readdir (DIR);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>fcntl.h</TITLE>
<PARA>
</PARA>
<SCREEN>

int creat (char, __mode_t);
int fcntl (int, int, ...);
int open (char, int, ...);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>fnmatch.h</TITLE>
<PARA>
</PARA>
<SCREEN>

int fnmatch (char, char, int);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>ftw.h</TITLE>
<PARA>
</PARA>
<SCREEN>
typedef Unknown Type:"" unknown __ftw_func_t;


int ftw (char, __ftw_func_t, int);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>glob.h</TITLE>
<PARA>
</PARA>
<SCREEN>
typedef struct
{

  __size_t gl_pathc;
  char gl_pathv;
  __size_t gl_offs;
  int gl_flags;
  Unknown Type:"" unknown gl_closedir;
  Unknown Type:"" unknown gl_readdir;
  Unknown Type:"" unknown gl_opendir;
  Unknown Type:"" unknown gl_lstat;
  Unknown Type:"" unknown gl_stat;
}
glob_t;


int glob (char, int, int (, glob_t); void globfree (glob_t);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>grp.h</TITLE>
<PARA>
</PARA>
<SCREEN>
struct group
{

  char gr_name;
  char gr_passwd;
  Unknown Type:"" unknown gr_gid;
  char gr_mem;
}


void endgrent (void);
group fgetgrent ();
group getgrent (void);
group getgrgid (__gid_t);
group getgrnam (char);
int initgroups (char, __gid_t);
void setgrent (void);
int getgrgid_r (__gid_t, struct group, char, struct group);
int getgrnam_r (char, struct group, char, struct group);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>iconv.h</TITLE>
<PARA>
</PARA>
<SCREEN>
typedef void iconv_t;


int iconv_close (iconv_t);
iconv_t iconv_open (char, char);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>inttypes.h</TITLE>
<PARA>
</PARA>
<SCREEN>
typedef typedef struct
{

  long quot;
  long rem;
}
lldiv_t;
imaxdiv_t;


intmax_t strtoimax (char, char, int);
uintmax_t strtoumax (char, char, int);
intmax_t wcstoimax (int);
uintmax_t wcstoumax (int);
intmax_t imaxabs (intmax_t);
imaxdiv_t imaxdiv (intmax_t, intmax_t);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>langinfo.h</TITLE>
<PARA>
</PARA>
<SCREEN>

char nl_langinfo ();
</SCREEN>
</SECT2>
<SECT2>
<TITLE>locale.h</TITLE>
<PARA>
</PARA>
<SCREEN>
struct lconv
{

  char decimal_point;
  char thousands_sep;
  char grouping;
  char int_curr_symbol;
  char currency_symbol;
  char mon_decimal_point;
  char mon_thousands_sep;
  char mon_grouping;
  char positive_sign;
  char negative_sign;
  char int_frac_digits;
  char frac_digits;
  char p_cs_precedes;
  char p_sep_by_space;
  char n_cs_precedes;
  char n_sep_by_space;
  char p_sign_posn;
  char n_sign_posn;
}


lconv localeconv (void);
char setlocale (int, char);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>monetary.h</TITLE>
<PARA>
</PARA>
<SCREEN>
</SCREEN>
</SECT2>
<SECT2>
<TITLE>nl_types.h</TITLE>
<PARA>
</PARA>
<SCREEN>
typedef void nl_catd;


int catclose (nl_catd);
char catgets (nl_catd, int, int, char);
nl_catd catopen (char, int);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>pwd.h</TITLE>
<PARA>
</PARA>
<SCREEN>
struct passwd
{

  char pw_name;
  char pw_passwd;
  Unknown Type:"" unknown pw_uid;
  Unknown Type:"" unknown pw_gid;
  char pw_gecos;
  char pw_dir;
  char pw_shell;
}


void endpwent (void);
passwd fgetpwent ();
passwd getpwent (void);
passwd getpwnam (char);
passwd getpwuid (__uid_t);
void setpwent (void);
int getpwnam_r (char, struct passwd, char, struct passwd);
int getpwuid_r (__uid_t, struct passwd, char, struct passwd);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>regex.h</TITLE>
<PARA>
</PARA>
<SCREEN>
typedef unsigned long reg_syntax_t;

typedef int regoff_t;

typedef struct re_pattern_buffer
{

  unsigned char buffer;
  unsigned long allocated;
  unsigned long used;
  reg_syntax_t syntax;
  char fastmap;
  char translate;
  size_t re_nsub;
  unsigned int can_be_null;
  unsigned int regs_allocated;
  unsigned int fastmap_accurate;
  unsigned int no_sub;
  unsigned int not_bol;
  unsigned int not_eol;
  unsigned int newline_anchor;
}
regex_t;

typedef struct
{

  regoff_t rm_so;
  regoff_t rm_eo;
}
regmatch_t;


reg_syntax_t re_syntax_options;
int regcomp (regex_t, char, int);
size_t regerror (int, regex_t, char, size_t);
int regexec (regex_t, char, size_t, regmatch_t, int);
void regfree (regex_t);
int re_compile_fastmap (struct re_pattern_buffer);
char re_compile_pattern (char, size_t, struct re_pattern_buffer);
int re_match (struct re_pattern_buffer, char, int, int, struct re_registers);
int re_match_2 (struct re_pattern_buffer, char, int, char, int, int,
		struct re_registers, int);
int re_search (struct re_pattern_buffer, char, int, int, int,
	       struct re_registers);
int re_search_2 (struct re_pattern_buffer, char, int, char, int, int, int,
		 struct re_registers, int);
void re_set_registers (struct re_pattern_buffer, struct re_registers,
		       unsigned int, regoff_t, regoff_t);
reg_syntax_t re_set_syntax (reg_syntax_t);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>regexp.h</TITLE>
<PARA>
</PARA>
<SCREEN>

char loc1;
char loc2;
char locs;
int advance (char, char);
int step (char, char);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>sched.h</TITLE>
<PARA>
</PARA>
<SCREEN>

int sched_get_priority_max (int);
int sched_get_priority_min (int);
int sched_getparam (__pid_t, struct sched_param);
int sched_getscheduler (__pid_t);
int sched_rr_get_interval (__pid_t, struct timespec);
int sched_setparam (__pid_t, struct sched_param);
int sched_setscheduler (__pid_t, int, struct sched_param);
int sched_yield (void);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>search.h</TITLE>
<PARA>
</PARA>
<SCREEN>
typedef Unknown Type:"" unknown ACTION;

typedef struct entry
{

  char key;
  void data;
}
ENTRY;

typedef Unknown Type:"" unknown __action_fn_t;


int hcreate ();
ENTRY hsearch (ENTRY, ACTION);
void insque (void, void);
void lfind (void, void, __compar_fn_t);
void lsearch (void, void, __compar_fn_t);
void remque (void);
void hdestroy (void);
void tfind (void, void, __compar_fn_t);
void tsearch (void, void, __compar_fn_t);
void twalk (void, __action_fn_t);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>setjmp.h</TITLE>
<PARA>
</PARA>
<SCREEN>
typedef struct __jmp_buf_tag
{

  Unknown Type:"" unknown __jmpbuf;
  int __mask_was_saved;
  Unknown Type:"" unknown __saved_mask;
}
jmp_buf;

typedef typedef struct __jmp_buf_tag
{

  Unknown Type:"" unknown __jmpbuf;
  int __mask_was_saved;
  Unknown Type:"" unknown __saved_mask;
}
jmp_buf;
sigjmp_buf;


int __sigsetjmp (jmp_buf, int);
void longjmp (jmp_buf, int);
void siglongjmp (sigjmp_buf, int);
void _longjmp (jmp_buf, int);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>signal.h</TITLE>
<PARA>
</PARA>
<SCREEN>
typedef Unknown Type:"" unknown sigset_t;

typedef Unknown Type:"" unknown __sighandler_t;


int __libc_current_sigrtmax (void);
int __libc_current_sigrtmin (void);
int __sigpause (int, int);
__sighandler_t __sysv_signal (int, __sighandler_t);
char _sys_siglist;
int killpg (__pid_t, int);
void psignal (int, char);
int raise (int);
int sigaddset (sigset_t, int);
int sigdelset (sigset_t, int);
int sigemptyset (sigset_t);
int sigfillset (sigset_t);
int siggetmask (void);
int siginterrupt (int, int);
int sigismember (sigset_t, int);
int sigpending (sigset_t);
int sigstack (struct sigstack, struct sigstack);
int sigaction (int, struct sigaction, struct sigaction);
int sigwait (sigset_t, int);
int kill (__pid_t, int);
int sigaltstack (struct sigaltstack, struct sigaltstack);
int sigblock (int);
__sighandler_t signal (int, __sighandler_t);
int sigpause (int);
int sigprocmask (int, sigset_t, sigset_t);
int sigreturn (struct sigcontext);
int sigsetmask (int);
int sigsuspend (sigset_t);
int sigvec (int, struct sigvec, struct sigvec);
int sigqueue (__pid_t, int,, enum sigval);
int sigwaitinfo (sigset_t, siginfo_t);
int sigtimedwait (sigset_t, siginfo_t, struct timespec);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>stdio.h</TITLE>
<PARA>
</PARA>
<SCREEN>
typedef Unknown Type:"" unknown FILE;

typedef Unknown Type:"" unknown fpos_t;


void clearerr (FILE);
char ctermid (char);
int fclose (FILE);
FILE fdopen (int, char);
int fflush_unlocked (FILE);
int fileno (FILE);
FILE fopen (char, char);
int fprintf (FILE, char, ...);
int fputc (int, FILE);
FILE freopen (char, char, FILE);
int fscanf (FILE, char, ...);
int fseek (FILE, long, int);
int getchar (void);
int getchar_unlocked (void);
int getw (FILE);
int pclose (FILE);
void perror (char);
FILE popen (char, char);
int printf (char, ...);
int putc_unlocked (int, FILE);
int putchar (int);
int putchar_unlocked (int);
int putw (int, FILE);
int remove (char);
int rename (char, char);
void rewind (FILE);
int scanf (char, ...);
void setbuf (FILE, char);
int sprintf (char, char, ...);
int sscanf (char, char, ...);
FILE stderr;
FILE stdin;
FILE stdout;
char tempnam (char, char);
FILE tmpfile (void);
char tmpnam (char);
int vfprintf (FILE, char, __gnuc_va_list);
int vprintf (char, __gnuc_va_list);
int feof (FILE);
int ferror (FILE);
int fflush (FILE);
int fgetc (FILE);
int fgetpos (FILE, fpos_t);
char fgets (char, int, FILE);
int fputs (char, FILE);
int fsetpos (FILE, fpos_t);
long ftell (FILE);
int getc (FILE);
char gets (char);
int putc (int, FILE);
int puts (char);
int setvbuf (FILE, char, int);
int snprintf (char, char, ...);
int ungetc (int, FILE);
int vsnprintf (char, char, __gnuc_va_list);
int vsprintf (char, char, __gnuc_va_list);
void flockfile (FILE);
int ftrylockfile (FILE);
void funlockfile (FILE);
int getc_unlocked (FILE);
void setbuffer (FILE, char);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>stdlib.h</TITLE>
<PARA>
</PARA>
<SCREEN>
typedef Unknown Type:"" unknown __compar_fn_t;

typedef struct
{

  int quot;
  int rem;
}
div_t;

typedef struct
{

  long quot;
  long rem;
}
ldiv_t;


char __secure_getenv (char);
double __strtod_internal (char, char, int);
float __strtof_internal (char, char, int);
long __strtol_internal (char, char, int, int);
long double __strtold_internal (char, char, int);
long long __strtoll_internal (char, char, int, int);
unsigned long __strtoul_internal (char, char, int, int);
unsigned long long __strtoull_internal (char, char, int, int);
long a64l (char);
void abort (void);
int abs (int);
int atexit (void ();
	    double atof (char);
	    int atoi (char);
	    long atol (char);
	    void bsearch (void, void, __compar_fn_t);
	    div_t div (int, int);
	    double drand48 (void);
	    char ecvt (double, int, int, int);
	    double erand48 (unsigned short);
	    void exit (int);
	    char fcvt (double, int, int, int);
	    char gcvt (double, int, char);
	    char getenv (char);
	    long jrand48 (unsigned short);
	    char l64a (long);
	    long labs (long);
	    ldiv_t ldiv (long, long);
	    long lrand48 (void);
	    int mblen (char);
	    int mbtowc (char);
	    int mkstemp (char);
	    char mktemp (char);
	    long mrand48 (void);
	    long nrand48 (unsigned short);
	    int putenv (char);
	    void qsort (void, __compar_fn_t);
	    int rand (void);
	    unsigned short seed48 (unsigned short);
	    void srand48 (long);
	    int wctomb (char);
	    int system (char);
	    void calloc ();
	    void free (void);
	    void initstate (unsigned int, void);
	    void malloc ();
	    void realloc (void);
	    void setstate (void);
	    void srand (unsigned int);
	    void srandom (unsigned int);
	    double strtod (char, char);
	    long strtol (char, char, int);
	    long long strtoll (char, char, int);
	    long long strtoq (char, char, int);
	    unsigned long strtoul (char, char, int);
	    unsigned long long strtoull (char, char, int);
	    unsigned long long strtouq (char, char, int);
	    char realpath (char, char);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>string.h</TITLE>
<PARA>
</PARA>
<SCREEN>

void __bzero (void);
char __strdup (char);
char __strtok_r (char, char, char);
void bcopy (void, void);
void memchr (void, int);
int memcmp (void, void);
void memcpy (void, void);
void memmove (void, void);
void memset (void, int);
char strcat (char, char);
char strchr (char, int);
int strcmp (char, char);
int strcoll (char, char);
char strcpy (char, char);
char strerror (int);
char strncat (char, char);
int strncmp (char, char);
char strncpy (char, char);
char strpbrk (char, char);
char strrchr (char, int);
char strstr (char, char);
char strtok (char, char);
int bcmp (void, void);
void bzero (void);
int ffs (int);
char -1;
void memccpy (void, void, int);
char rindex (char, int);
int strcasecmp (char, char);
char strdup (char);
int strncasecmp (char, char);
char strsep (char, char);
char strerror_r (int, char);
char strtok_r (char, char, char);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>sys/ipc.h</TITLE>
<PARA>
</PARA>
<SCREEN>
</SCREEN>
</SECT2>
<SECT2>
<TITLE>sys/mman.h</TITLE>
<PARA>
</PARA>
<SCREEN>

int msync (void, int);
int mlock (void);
int mlockall (int);
void mmap (void, int, int, int, __off_t);
int mprotect (void, int);
int munlock (void);
int munlockall (void);
int munmap (void);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>sys/msg.h</TITLE>
<PARA>
</PARA>
<SCREEN>

int msgctl (int, int, struct msqid_ds);
int msgget (int);
int msgrcv (int, void, long, int);
int msgsnd (int, void, int);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>sys/resource.h</TITLE>
<PARA>
</PARA>
<SCREEN>

int getpriority (enum, enum __priority_which, int);
int setpriority (enum, enum __priority_which, int, int);
int setrlimit (enum, enum __rlimit_resource, struct rlimit);
int getrlimit (enum, enum __rlimit_resource, struct rlimit);
int getrusage (enum, enum __rusage_who, struct rusage);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>sys/sem.h</TITLE>
<PARA>
</PARA>
<SCREEN>

int semctl (int, int, int, ...);
int semget (int, int);
int semop (int, struct sembuf, unsigned int);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>sys/shm.h</TITLE>
<PARA>
</PARA>
<SCREEN>

void shmat (int, void, int);
int shmctl (int, int, struct shmid_ds);
int shmdt (void);
int shmget (int);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>sys/socket.h</TITLE>
<PARA>
</PARA>
<SCREEN>
typedef union
{

  Unknown Type:"" unknown __sockaddr__;
  Unknown Type:"" unknown __sockaddr_at__;
  Unknown Type:"" unknown __sockaddr_ax25__;
  Unknown Type:"" unknown __sockaddr_dl__;
  Unknown Type:"" unknown __sockaddr_eon__;
  Unknown Type:"" unknown __sockaddr_in__;
  struct sockaddr_in6 __sockaddr_in6__;
  Unknown Type:"" unknown __sockaddr_inarp__;
  Unknown Type:"" unknown __sockaddr_ipx__;
  Unknown Type:"" unknown __sockaddr_iso__;
  Unknown Type:"" unknown __sockaddr_ns__;
  Unknown Type:"" unknown __sockaddr_un__;
  struct sockaddr_x25 __sockaddr_x25__;
}
__SOCKADDR_ARG;

typedef union
{

  Unknown Type:"" unknown __sockaddr__;
  Unknown Type:"" unknown __sockaddr_at__;
  Unknown Type:"" unknown __sockaddr_ax25__;
  Unknown Type:"" unknown __sockaddr_dl__;
  Unknown Type:"" unknown __sockaddr_eon__;
  Unknown Type:"" unknown __sockaddr_in__;
  struct sockaddr_in6 __sockaddr_in6__;
  Unknown Type:"" unknown __sockaddr_inarp__;
  Unknown Type:"" unknown __sockaddr_ipx__;
  Unknown Type:"" unknown __sockaddr_iso__;
  Unknown Type:"" unknown __sockaddr_ns__;
  Unknown Type:"" unknown __sockaddr_un__;
  struct sockaddr_x25 __sockaddr_x25__;
}
__CONST_SOCKADDR_ARG;


int bind (int, __CONST_SOCKADDR_ARG, socklen_t);
int getsockname (int, __SOCKADDR_ARG, socklen_t);
int listen (int, unsigned int);
int setsockopt (int, int, int, void, socklen_t);
int accept (int, __SOCKADDR_ARG, socklen_t);
int connect (int, __CONST_SOCKADDR_ARG, socklen_t);
int recv (int, void, int);
int recvfrom (int, void, int, __SOCKADDR_ARG, socklen_t);
int recvmsg (int, struct msghdr, int);
int send (int, void, int);
int sendmsg (int, struct msghdr, int);
int sendto (int, void, int, __CONST_SOCKADDR_ARG, socklen_t);
int getpeername (int, __SOCKADDR_ARG, socklen_t);
int getsockopt (int, int, int, void, socklen_t);
int shutdown (int, int);
int socket (int, int, int);
int socketpair (int, int, int, int);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>sys/stat.h</TITLE>
<PARA>
</PARA>
<SCREEN>

int __fxstat (int, int, struct stat);
int __lxstat (int, char, struct stat);
int __xmknod (int, char, __mode_t, __dev_t);
int __xstat (int, char, struct stat);
int mkfifo (char, __mode_t);
int chmod (char, __mode_t);
int fchmod (int, __mode_t);
int mkdir (char, __mode_t);
__mode_t umask (__mode_t);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>sys/times.h</TITLE>
<PARA>
</PARA>
<SCREEN>
</SCREEN>
</SECT2>
<SECT2>
<TITLE>sys/utsname.h</TITLE>
<PARA>
</PARA>
<SCREEN>

int uname (struct utsname);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>sys/wait.h</TITLE>
<PARA>
</PARA>
<SCREEN>
typedef union
{

  Unknown Type:"" unknown __uptr;
  int __iptr;
}
__WAIT_STATUS;

typedef Unknown Type:"" unknown idtype_t;


int waitid (idtype_t, __id_t, siginfo_t, int);
__pid_t wait (__WAIT_STATUS);
__pid_t waitpid (__pid_t, int, int);
__pid_t wait3 (__WAIT_STATUS, int, struct rusage);
__pid_t wait4 (__pid_t, __WAIT_STATUS, int, struct rusage);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>termios.h</TITLE>
<PARA>
</PARA>
<SCREEN>

speed_t cfgetispeed (struct termios);
speed_t cfgetospeed (struct termios);
void cfmakeraw (struct termios);
int cfsetispeed (struct termios, speed_t);
int cfsetospeed (struct termios, speed_t);
int cfsetspeed (struct termios, speed_t);
int tcflow (int, int);
int tcflush (int, int);
int tcsendbreak (int, int);
int tcsetattr (int, int, struct termios);
int tcdrain (int);
int tcgetattr (int, struct termios);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>time.h</TITLE>
<PARA>
</PARA>
<SCREEN>
typedef Unknown Type:"" unknown clock_t;

typedef Unknown Type:"" unknown time_t;

struct tm
{

  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;
  long tm_gmtoff;
  char tm_zone;
}


char asctime (struct tm);
clock_t clock (void);
char ctime (time_t);
double difftime (time_t, time_t);
tm gmtime (time_t);
tm localtime (time_t);
time_t mktime (struct tm);
int stime (time_t);
time_t time (time_t);
int nanosleep (struct timespec, struct timespec);
int daylight ();
long timezone ();
char tzname ();
void tzset (void);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>ulimit.h</TITLE>
<PARA>
</PARA>
<SCREEN>

long ulimit (int, ...);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>unistd.h</TITLE>
<PARA>
</PARA>
<SCREEN>

char __environ;
__pid_t __getpgid (__pid_t);
void _exit (int);
int acct (char);
unsigned int alarm (unsigned int);
int chown (char, __uid_t, __gid_t);
int chroot (char);
int daemon (int, int);
int execl (char, char, ...);
int execle (char, char, ...);
int execlp (char, char, ...);
int execv (char, char);
int execvp (char, char);
int fdatasync (int);
int getdomainname (char);
long gethostid (void);
char getlogin (void);
__pid_t getpgrp (void);
char getwd (char);
int lockf (int, int, __off_t);
int nice (int);
int setegid (__gid_t);
int seteuid (__uid_t);
int sethostid (long);
int sethostname (char);
int setpgrp (void);
int sync (void);
__pid_t tcgetpgrp (int);
int tcsetpgrp (int, __pid_t);
int truncate (char, __off_t);
char ttyname (int);
unsigned int ualarm (unsigned int, unsigned int);
void usleep (unsigned int);
int close (int);
int fsync (int);
__off_t lseek (int, __off_t, int);
int pause (void);
int access (char, int);
int brk (void);
int chdir (char);
int dup (int);
int dup2 (int, int);
int execve (char, char, char);
int fchdir (int);
int fchown (int, __uid_t, __gid_t);
__pid_t fork (void);
__gid_t getegid (void);
__uid_t geteuid (void);
__gid_t getgid (void);
int getgroups (int, __gid_t);
int gethostname (char);
__pid_t getpid (void);
__uid_t getuid (void);
int lchown (char, __uid_t, __gid_t);
int link (char, char);
long pathconf (char, int);
int pipe (int);
int readlink (char, char);
int rmdir (char);
void sbrk ();
int setgid (__gid_t);
int setpgid (__pid_t, __pid_t);
int setregid (__gid_t, __gid_t);
int setreuid (__uid_t, __uid_t);
__pid_t setsid (void);
int setuid (__uid_t);
unsigned int sleep (unsigned int);
int symlink (char, char);
long sysconf (int);
int unlink (char);
__pid_t vfork (void);
long fpathconf (int, int);
int ftruncate (int, __off_t);
char getcwd (char);
__pid_t getppid (void);
int isatty (int);
int ttyname_r (int, char);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>utime.h</TITLE>
<PARA>
</PARA>
<SCREEN>

int utime (char, struct utimbuf);
int utimes ();
</SCREEN>
</SECT2>
<SECT2>
<TITLE>wchar.h</TITLE>
<PARA>
</PARA>
<SCREEN>
typedef struct
{

  int count;
  Unknown Type:"" unknown value;
}
mbstate_t;


double __wcstod_internal (int);
float __wcstof_internal (int);
long __wcstol_internal (int, int);
long double __wcstold_internal (int);
long long __wcstoll_internal (int, int);
unsigned long __wcstoul_internal (int, int);
unsigned long long __wcstoull_internal (int, int);
int wcscmp ();
int wcscoll ();
int wcsncmp ();
int wctob ();
int wmemcmp ();
int mbsinit (mbstate_t);
double wcstod ();
long wcstol (int);
unsigned long wcstoul (int);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>wctype.h</TITLE>
<PARA>
</PARA>
<SCREEN>
typedef unsigned long wctype_t;

typedef Unknown Type:"" unknown wctrans_t;


wctrans_t wctrans (char);
int iswalnum ();
int iswalpha ();
int iswcntrl ();
int iswctype (wctype_t);
int iswdigit ();
int iswgraph ();
int iswlower ();
int iswprint ();
int iswpunct ();
int iswspace ();
int iswupper ();
int iswxdigit ();
wctype_t wctype (char);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>wordexp.h</TITLE>
<PARA>
</PARA>
<SCREEN>
typedef struct
{

  int we_wordc;
  char we_wordv;
  int we_offs;
}
wordexp_t;


int wordexp (char, wordexp_t, int);
void wordfree (wordexp_t);
</SCREEN>
</SECT2>
</SECT1>

<SECT1 ID=libcman>
<TITLE>Interface Definitions for libc</TITLE>
<PARA>
</PARA>
</SECT1>


<SECT1 ID=libm>
<TITLE>libm</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Library:</ENTRY>
<ENTRY>libm</ENTRY>
</ROW>
<ROW>
<ENTRY>Runtime Path:</ENTRY>
<ENTRY>libm.so.6</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The behaviour of the interfaces in this library is specified by the following Standards.<SIMPLELIST COLUMNS=1>
<MEMBER>
ISO/IEC 9899: 1999, Programming Languages --C<FOOTNOTE ID="std-13-25">
<PARA>
ISO/IEC 9899: 1999, Programming Languages --C</PARA>
</FOOTNOTE>
</MEMBER>
<MEMBER>
CAE Specification, January 1997, System Interfaces and Headers (XSH),
Issue 5 (ISBN: 1-85912-181-0, C606)<FOOTNOTE ID="std-13-5">
<PARA>
CAE Specification, January 1997, System Interfaces and Headers (XSH),
Issue 5 (ISBN: 1-85912-181-0, C606)</PARA>
</FOOTNOTE>
</MEMBER>
</SIMPLELIST>
</PARA>
<SECT2>
<TITLE>Math</TITLE>
<PARA>
</PARA>
</SECT2>
</SECT1>
<SECT1 ID=libm-ddefs>
<TITLE> Data Definitions for libm</TITLE>
<PARA>
</PARA>
<SECT2>
<TITLE>math.h</TITLE>
<PARA>
</PARA>
<SCREEN>

int signgam;
int matherr (struct exception);
</SCREEN>
</SECT2>
</SECT1>


<SECT1 ID=libpthread>
<TITLE>libpthread</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Library:</ENTRY>
<ENTRY>libpthread</ENTRY>
</ROW>
<ROW>
<ENTRY>Runtime Path:</ENTRY>
<ENTRY>libpthread.so.0</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
LSB systems support POSIX threads with the following exceptions.
This list is intended to match the behavior of historical Linux
implementations.  Applications should be written to deal with either
POSIX threads or the thread behaviors described here.
</PARA>

<PARA>
POSIX specifies a concept of per-process rather than per-thread
signals.  The LSB does not require this behavior; traditional Linux
implementations have had per-thread signals only.  A related issue is
that applications cannot (using legacy Linux implementations, at
least) rely on getpid() returning the same value in different threads.
</PARA>

<PARA>
Note: one implication of per-thread signals is that a core dump (for
example) may not stop all threads in a given process.  This may be an
issue when designing ways to stop/start applications.
</PARA>

<PARA>
Applications which create child processes (using fork() and the like)
must then wait for them (using waitpid() family of functions) in the
same thread as they created them.  Note that coding applications this
way will work both with full POSIX threads and legacy Linux thread
implementations.
</PARA>

<PARA>
POSIX specifies that changing the user or group id instantly affects
the behavior of all threads.  This behavior is not specified;
applications must use their own lock if they need this behavior.
Rationale: it seems unnecessary and it is a performance hit (an SMP
kernel must lock the user id).  (FIXME: is this our current
understanding?  It was discussed on lsb-spec on January 2000 but I'm
not sure we reached a consensus).
</PARA>

<PARA>
Although this standard doesn't have a way to list processes (/proc or
"ps" command line isn't in, right?), it is our intention to not
specify one way or the other whether multiple threads appear as
separate processes or as a single process.
</PARA>

<PARA>
Applications cannot rely on resource limits (getrusage and setrusage)
being maintained per-process rather than per-thread.
</PARA>

<PARA>
Applications must disconnect from the controlling tty before
pthread_create (FIXME: have I summarized this correctly?).
</PARA>

<PARA>
times() doesn't account for all threads, just the caller.
</PARA>

<PARA>
Applications must not call pthread_cancel if they call any system
libraries (most notably X windows), as system libraries are not
guaranteed to be thread safe.  Likewise, for such libraries, only one
thread per process may call them.
</PARA>

<PARA>
Applications cannot rely on fcntl/lockf locks being visible
per-process rather than per-thread.  Likewise for mandatory file
locks.
</PARA>

<PARA>
Threaded applications cannot use SIGUSR1 or SIGUSR2.
</PARA>
<PARA>
The behaviour of the interfaces in this library is specified by the following Standards.<SIMPLELIST COLUMNS=1>
<MEMBER>
CAE Specification, January 1997, System Interfaces and Headers (XSH),
Issue 5 (ISBN: 1-85912-181-0, C606)<FOOTNOTE ID="std-132-5">
<PARA>
CAE Specification, January 1997, System Interfaces and Headers (XSH),
Issue 5 (ISBN: 1-85912-181-0, C606)</PARA>
</FOOTNOTE>
</MEMBER>
</SIMPLELIST>
</PARA>
<SECT2>
<TITLE>Posix Threads</TITLE>
<PARA>
</PARA>
</SECT2>
</SECT1>
<SECT1 ID=libpthread-ddefs>
<TITLE> Data Definitions for libpthread</TITLE>
<PARA>
</PARA>
<SECT2>
<TITLE>pthread.h</TITLE>
<PARA>
</PARA>
<SCREEN>

int pthread_attr_destroy (pthread_attr_t);
int pthread_attr_getdetachstate (pthread_attr_t, int);
int pthread_attr_getinheritsched (pthread_attr_t, int);
int pthread_attr_getschedparam (pthread_attr_t, struct sched_param);
int pthread_attr_getschedpolicy (pthread_attr_t, int);
int pthread_attr_getscope (pthread_attr_t, int);
int pthread_attr_init (pthread_attr_t);
int pthread_attr_setdetachstate (pthread_attr_t, int);
int pthread_attr_setinheritsched (pthread_attr_t, int);
int pthread_attr_setschedparam (pthread_attr_t, struct sched_param);
int pthread_attr_setschedpolicy (pthread_attr_t, int);
int pthread_attr_setscope (pthread_attr_t, int);
int pthread_cancel (pthread_t);
int pthread_cond_broadcast (pthread_cond_t);
int pthread_cond_destroy (pthread_cond_t);
int pthread_cond_init (pthread_cond_t, pthread_condattr_t);
int pthread_cond_signal (pthread_cond_t);
int pthread_cond_timedwait (pthread_cond_t, pthread_mutex_t, struct timespec);
int pthread_cond_wait (pthread_cond_t, pthread_mutex_t);
int pthread_condattr_destroy (pthread_condattr_t);
int pthread_condattr_init (pthread_condattr_t);
int pthread_create (pthread_t, pthread_attr_t, void (, void);
		    int pthread_detach (pthread_t);
		    int pthread_equal (pthread_t, pthread_t);
		    void pthread_exit (void);
		    int pthread_getschedparam (pthread_t, int,
					       struct sched_param);
		    void pthread_getspecific (pthread_key_t);
		    int pthread_join (pthread_t, void);
		    int pthread_key_create (pthread_key_t, void ();
					    int
					    pthread_key_delete
					    (pthread_key_t);
					    int
					    pthread_mutex_destroy
					    (pthread_mutex_t);
					    int
					    pthread_mutex_init
					    (pthread_mutex_t,
					     pthread_mutexattr_t);
					    int
					    pthread_mutex_lock
					    (pthread_mutex_t);
					    int
					    pthread_mutex_trylock
					    (pthread_mutex_t);
					    int
					    pthread_mutex_unlock
					    (pthread_mutex_t);
					    int
					    pthread_mutexattr_destroy
					    (pthread_mutexattr_t);
					    int pthread_once (pthread_once_t,
							      void ();
							      pthread_t
							      pthread_self
							      (void);
							      int
							      pthread_setcancelstate
							      (int, int);
							      int
							      pthread_setcanceltype
							      (int, int);
							      int
							      pthread_setschedparam
							      (pthread_t, int,
							       struct
							       sched_param);
							      int
							      pthread_setspecific
							      (pthread_key_t,
							       void);
							      void
							      pthread_testcancel
							      (void);
							      int
							      pthread_attr_setstackaddr
							      (pthread_attr_t,
							       void);
							      int
							      pthread_attr_getstackaddr
							      (pthread_attr_t,
							       void);
							      int
							      pthread_attr_setstacksize
							      (pthread_attr_t);
							      int
							      pthread_attr_getstacksize
							      (pthread_attr_t);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>semaphore.h</TITLE>
<PARA>
</PARA>
<SCREEN>
typedef struct
{

  struct __sem_lock;
  long status;
  int __sem_value;
  int spinlock;
  _pthread_descr __sem_waiting;
}
sem_t;


int sem_close (sem_t);
int sem_destroy (sem_t);
int sem_getvalue (sem_t, int);
int sem_init (sem_t, int, unsigned int);
sem_t sem_open (char, int, ...);
int sem_post (sem_t);
int sem_trywait (sem_t);
int sem_unlink (char);
int sem_wait (sem_t);
</SCREEN>
</SECT2>
</SECT1>


<SECT1 ID=libdb>
<TITLE>libdb</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Library:</ENTRY>
<ENTRY>libdb</ENTRY>
</ROW>
<ROW>
<ENTRY>Runtime Path:</ENTRY>
<ENTRY>libdb.so.3</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The behaviour of the interfaces in this library is specified by the following Standards.<SIMPLELIST COLUMNS=1>
<MEMBER>
CAE Specification, January 1997, System Interfaces and Headers (XSH),
Issue 5 (ISBN: 1-85912-181-0, C606)<FOOTNOTE ID="std-23-5">
<PARA>
CAE Specification, January 1997, System Interfaces and Headers (XSH),
Issue 5 (ISBN: 1-85912-181-0, C606)</PARA>
</FOOTNOTE>
</MEMBER>
</SIMPLELIST>
</PARA>
<SECT2>
<TITLE>DBM Functions</TITLE>
<PARA>
</PARA>
</SECT2>
</SECT1>


<SECT1 ID=libdl>
<TITLE>libdl</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Library:</ENTRY>
<ENTRY>libdl</ENTRY>
</ROW>
<ROW>
<ENTRY>Runtime Path:</ENTRY>
<ENTRY>libdl.so.2</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The behaviour of the interfaces in this library is specified by the following Standards.<SIMPLELIST COLUMNS=1>
<MEMBER>
CAE Specification, January 1997, System Interfaces and Headers (XSH),
Issue 5 (ISBN: 1-85912-181-0, C606)<FOOTNOTE ID="std-27-5">
<PARA>
CAE Specification, January 1997, System Interfaces and Headers (XSH),
Issue 5 (ISBN: 1-85912-181-0, C606)</PARA>
</FOOTNOTE>
</MEMBER>
</SIMPLELIST>
</PARA>
<SECT2>
<TITLE>Dynamic Loader</TITLE>
<PARA>
</PARA>
</SECT2>
</SECT1>
<SECT1 ID=libdl-ddefs>
<TITLE> Data Definitions for libdl</TITLE>
<PARA>
</PARA>
<SECT2>
<TITLE>dlfcn.h</TITLE>
<PARA>
</PARA>
<SCREEN>

int dlclose (void);
char dlerror (void);
void dlopen (char, int);
void dlsym (void, char);
</SCREEN>
</SECT2>
</SECT1>


<SECT1 ID=libcrypt>
<TITLE>libcrypt</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Library:</ENTRY>
<ENTRY>libcrypt</ENTRY>
</ROW>
<ROW>
<ENTRY>Runtime Path:</ENTRY>
<ENTRY>libcrypt.so.1</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The behaviour of the interfaces in this library is specified by the following Standards.<SIMPLELIST COLUMNS=1>
<MEMBER>
CAE Specification, January 1997, System Interfaces and Headers (XSH),
Issue 5 (ISBN: 1-85912-181-0, C606)<FOOTNOTE ID="std-29-5">
<PARA>
CAE Specification, January 1997, System Interfaces and Headers (XSH),
Issue 5 (ISBN: 1-85912-181-0, C606)</PARA>
</FOOTNOTE>
</MEMBER>
</SIMPLELIST>
</PARA>
<SECT2>
<TITLE>Encryption</TITLE>
<PARA>
</PARA>
</SECT2>
</SECT1>
<SECT1 ID=libcrypt-ddefs>
<TITLE> Data Definitions for libcrypt</TITLE>
<PARA>
</PARA>
<SECT2>
<TITLE>crypt.h</TITLE>
<PARA>
</PARA>
<SCREEN>

char crypt (char, char);
void encrypt (char, int);
void setkey (char);
</SCREEN>
</SECT2>
</SECT1>


</CHAPTER>

</PART>
