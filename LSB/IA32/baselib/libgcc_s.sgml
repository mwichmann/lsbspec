<!-- Start of text generated from database -->
<!-- generated from the LSB specification database -->
<!--    by $Header: /cvsroot/lsb/lsbspec/mklibspec,v 1.75 2005/10/12 22:24:36 nick Exp 0 -->
<!--    at Wed Oct 12 18:27:24 2005 -->
<SECT1 ID=libgcc-s>
<TITLE>Interfaces for libgcc_s</TITLE>
<PARA>
<XREF LINKEND="lib-libgcc-s-def"> defines the library name and shared object name
for the libgcc_s library
</PARA>
<TABLE id="lib-libgcc-s-def">
<TITLE>libgcc_s Definition</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Library:</ENTRY>
<ENTRY>libgcc_s</ENTRY>
</ROW>
<ROW>
<ENTRY>SONAME:</ENTRY>
<ENTRY>libgcc_s.so.1</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The behavior of the interfaces in this library is specified by the following specifications:<SIMPLELIST COLUMNS=1>
<MEMBER ID='REFSTD.libgcc.s.1'>
[LSB] <XREF LINKEND="std.LSB">
</MEMBER>
</SIMPLELIST>
</PARA>
<!-- debug: database interface name Unwind Library -->
<SECT2>
<!--libgroup-->
<TITLE>Unwind Library</TITLE>
<PARA>
</PARA>


<SECT3>
<TITLE>Interfaces for Unwind Library</TITLE>
<PARA>
An LSB conforming implementation shall provide the architecture specific functions
for Unwind Library specified in <XREF linkend="tbl-libgcc-s-unw-ints">,
with the full mandatory functionality as described in the referenced
underlying specification.
</PARA>
<!--libgroupints-->
<TABLE id="tbl-libgcc-s-unw-ints">
<TITLE>libgcc_s - Unwind Library Function Interfaces</TITLE>
<TGROUP COLS=4>
<TBODY>
<ROW>
<ENTRY><indexterm><primary>_Unwind_Backtrace</primary></indexterm>_Unwind_Backtrace(GCC_3.3) <LINK LINKEND="REFSTD.libgcc.s.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>_Unwind_DeleteException</primary></indexterm>_Unwind_DeleteException(GCC_3.0) <LINK LINKEND="REFSTD.libgcc.s.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>_Unwind_FindEnclosingFunction</primary></indexterm>_Unwind_FindEnclosingFunction(GCC_3.3) <LINK LINKEND="REFSTD.libgcc.s.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>_Unwind_Find_FDE</primary></indexterm>_Unwind_Find_FDE(GCC_3.0) <LINK LINKEND="REFSTD.libgcc.s.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_Unwind_ForcedUnwind</primary></indexterm>_Unwind_ForcedUnwind(GCC_3.0) <LINK LINKEND="REFSTD.libgcc.s.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>_Unwind_GetCFA</primary></indexterm>_Unwind_GetCFA(GCC_3.3) <LINK LINKEND="REFSTD.libgcc.s.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>_Unwind_GetDataRelBase</primary></indexterm>_Unwind_GetDataRelBase(GCC_3.0) <LINK LINKEND="REFSTD.libgcc.s.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>_Unwind_GetGR</primary></indexterm>_Unwind_GetGR(GCC_3.0) <LINK LINKEND="REFSTD.libgcc.s.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_Unwind_GetIP</primary></indexterm>_Unwind_GetIP(GCC_3.0) <LINK LINKEND="REFSTD.libgcc.s.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>_Unwind_GetLanguageSpecificData</primary></indexterm>_Unwind_GetLanguageSpecificData(GCC_3.0) <LINK LINKEND="REFSTD.libgcc.s.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>_Unwind_GetRegionStart</primary></indexterm>_Unwind_GetRegionStart(GCC_3.0) <LINK LINKEND="REFSTD.libgcc.s.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>_Unwind_GetTextRelBase</primary></indexterm>_Unwind_GetTextRelBase(GCC_3.0) <LINK LINKEND="REFSTD.libgcc.s.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_Unwind_RaiseException</primary></indexterm>_Unwind_RaiseException(GCC_3.0) <LINK LINKEND="REFSTD.libgcc.s.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>_Unwind_Resume</primary></indexterm>_Unwind_Resume(GCC_3.0) <LINK LINKEND="REFSTD.libgcc.s.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>_Unwind_Resume_or_Rethrow</primary></indexterm>_Unwind_Resume_or_Rethrow(GCC_3.3) <LINK LINKEND="REFSTD.libgcc.s.1">[LSB]</LINK></ENTRY>
<ENTRY><indexterm><primary>_Unwind_SetGR</primary></indexterm>_Unwind_SetGR(GCC_3.0) <LINK LINKEND="REFSTD.libgcc.s.1">[LSB]</LINK></ENTRY>
</ROW>
<ROW>
<ENTRY><indexterm><primary>_Unwind_SetIP</primary></indexterm>_Unwind_SetIP(GCC_3.0) <LINK LINKEND="REFSTD.libgcc.s.1">[LSB]</LINK></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT3>
</SECT2>
</SECT1>
<SECT1 ID=libgcc-s-ddefs>
<TITLE>Data Definitions for libgcc_s</TITLE>
<PARA>
This section defines global identifiers and their values that are associated
with interfaces contained in libgcc_s.
These definitions are organized into groups that
correspond to system headers. This convention is used as a
convenience for the reader, and does not imply the existence
of these headers, or their content.
Where an interface is defined as requiring a particular system header file
all of the data definitions for that system header file presented here shall be in effect.
</PARA>
<PARA>
This section gives data definitions to promote binary application
portability, not to repeat source interface definitions available
elsewhere. System providers and application developers should use this ABI
to supplement - not to replace - source interface definition specifications.
</PARA>
<PARA>
This specification uses the <XREF LINKEND='std.ISOC99'> C Language as the reference programming language, and data definitions are specified in ISO C format. The C language is used here as a convenient notation. Using a C language description of these data objects does not preclude their use by other programming languages.</PARA>
<SECT2>
<TITLE>unwind.h</TITLE>
<PARA>
</PARA>
<SCREEN>

extern void _Unwind_DeleteException(struct _Unwind_Exception *);
extern fde *_Unwind_Find_FDE(void *, struct dwarf_eh_base *);
extern void _Unwind_DeleteException(struct _Unwind_Exception *);
extern _Unwind_Ptr _Unwind_ForcedUnwind(struct _Unwind_Exception *,
					_Unwind_Stop_Fn, void *);
extern _Unwind_Word _Unwind_GetGR(struct _Unwind_Context *, int);
extern _Unwind_Ptr _Unwind_GetIP(struct _Unwind_Context *);
extern _Unwind_Ptr _Unwind_GetLanguageSpecificData(struct _Unwind_Context
						   *);
extern _Unwind_Ptr _Unwind_GetRegionStart(struct _Unwind_Context *);
extern _Unwind_Reason_Code _Unwind_RaiseException(struct _Unwind_Exception
						  *);
extern void _Unwind_Resume(struct _Unwind_Exception *);
extern void _Unwind_SetGR(struct _Unwind_Context *, int, u_int64_t);
extern void _Unwind_SetIP(struct _Unwind_Context *, _Unwind_Ptr);
extern void _Unwind_DeleteException(struct _Unwind_Exception *);
extern fde *_Unwind_Find_FDE(void *, struct dwarf_eh_base *);
extern _Unwind_Ptr _Unwind_ForcedUnwind(struct _Unwind_Exception *,
					_Unwind_Stop_Fn, void *);
extern _Unwind_Ptr _Unwind_GetDataRelBase(struct _Unwind_Context *);
extern _Unwind_Word _Unwind_GetGR(struct _Unwind_Context *, int);
extern _Unwind_Ptr _Unwind_GetIP(struct _Unwind_Context *);
extern _Unwind_Ptr _Unwind_GetLanguageSpecificData(struct _Unwind_Context
						   *);
extern _Unwind_Ptr _Unwind_GetRegionStart(struct _Unwind_Context *);
extern _Unwind_Ptr _Unwind_GetTextRelBase(struct _Unwind_Context *);
extern _Unwind_Reason_Code _Unwind_RaiseException(struct _Unwind_Exception
						  *);
extern void _Unwind_Resume(struct _Unwind_Exception *);
extern void _Unwind_SetGR(struct _Unwind_Context *, int, u_int64_t);
extern void _Unwind_SetIP(struct _Unwind_Context *, _Unwind_Ptr);
extern _Unwind_Ptr _Unwind_ForcedUnwind(struct _Unwind_Exception *,
					_Unwind_Stop_Fn, void *);
extern _Unwind_Ptr _Unwind_GetDataRelBase(struct _Unwind_Context *);
extern _Unwind_Word _Unwind_GetGR(struct _Unwind_Context *, int);
extern _Unwind_Ptr _Unwind_GetIP(struct _Unwind_Context *);
extern _Unwind_Ptr _Unwind_GetLanguageSpecificData(struct _Unwind_Context
						   *);
extern _Unwind_Ptr _Unwind_GetRegionStart(struct _Unwind_Context *);
extern _Unwind_Ptr _Unwind_GetTextRelBase(struct _Unwind_Context *);
extern _Unwind_Reason_Code _Unwind_RaiseException(struct _Unwind_Exception
						  *);
extern void _Unwind_Resume(struct _Unwind_Exception *);
extern void _Unwind_SetGR(struct _Unwind_Context *, int, u_int64_t);
extern void _Unwind_SetIP(struct _Unwind_Context *, _Unwind_Ptr);
extern void _Unwind_DeleteException(struct _Unwind_Exception *);
extern fde *_Unwind_Find_FDE(void *, struct dwarf_eh_base *);
extern _Unwind_Ptr _Unwind_ForcedUnwind(struct _Unwind_Exception *,
					_Unwind_Stop_Fn, void *);
extern _Unwind_Ptr _Unwind_GetDataRelBase(struct _Unwind_Context *);
extern _Unwind_Word _Unwind_GetGR(struct _Unwind_Context *, int);
extern _Unwind_Ptr _Unwind_GetIP(struct _Unwind_Context *);
extern _Unwind_Ptr _Unwind_GetLanguageSpecificData(struct _Unwind_Context
						   *);
extern _Unwind_Ptr _Unwind_GetRegionStart(struct _Unwind_Context *);
extern _Unwind_Ptr _Unwind_GetTextRelBase(struct _Unwind_Context *);
extern _Unwind_Reason_Code _Unwind_RaiseException(struct _Unwind_Exception
						  *);
extern void _Unwind_Resume(struct _Unwind_Exception *);
extern void _Unwind_SetGR(struct _Unwind_Context *, int, u_int64_t);
extern void _Unwind_SetIP(struct _Unwind_Context *, _Unwind_Ptr);
extern void _Unwind_DeleteException(struct _Unwind_Exception *);
extern fde *_Unwind_Find_FDE(void *, struct dwarf_eh_base *);
extern _Unwind_Ptr _Unwind_ForcedUnwind(struct _Unwind_Exception *,
					_Unwind_Stop_Fn, void *);
extern _Unwind_Ptr _Unwind_GetDataRelBase(struct _Unwind_Context *);
extern _Unwind_Word _Unwind_GetGR(struct _Unwind_Context *, int);
extern _Unwind_Ptr _Unwind_GetIP(struct _Unwind_Context *);
extern _Unwind_Ptr _Unwind_GetLanguageSpecificData(struct _Unwind_Context
						   *);
extern _Unwind_Ptr _Unwind_GetRegionStart(struct _Unwind_Context *);
extern _Unwind_Ptr _Unwind_GetTextRelBase(struct _Unwind_Context *);
extern _Unwind_Reason_Code _Unwind_RaiseException(struct _Unwind_Exception
						  *);
extern void _Unwind_Resume(struct _Unwind_Exception *);
extern void _Unwind_SetGR(struct _Unwind_Context *, int, u_int64_t);
extern void _Unwind_SetIP(struct _Unwind_Context *, _Unwind_Ptr);
extern void _Unwind_DeleteException(struct _Unwind_Exception *);
extern fde *_Unwind_Find_FDE(void *, struct dwarf_eh_base *);
extern _Unwind_Ptr _Unwind_ForcedUnwind(struct _Unwind_Exception *,
					_Unwind_Stop_Fn, void *);
extern _Unwind_Ptr _Unwind_GetDataRelBase(struct _Unwind_Context *);
extern _Unwind_Word _Unwind_GetGR(struct _Unwind_Context *, int);
extern _Unwind_Ptr _Unwind_GetIP(struct _Unwind_Context *);
extern _Unwind_Ptr _Unwind_GetLanguageSpecificData(void);
extern _Unwind_Ptr _Unwind_GetRegionStart(struct _Unwind_Context *);
extern _Unwind_Ptr _Unwind_GetTextRelBase(struct _Unwind_Context *);
extern _Unwind_Reason_Code _Unwind_RaiseException(struct _Unwind_Exception
						  *);
extern void _Unwind_Resume(struct _Unwind_Exception *);
extern void _Unwind_SetGR(struct _Unwind_Context *, int, u_int64_t);
extern void _Unwind_SetIP(struct _Unwind_Context *, _Unwind_Ptr);
extern void _Unwind_DeleteException(struct _Unwind_Exception *);
extern fde *_Unwind_Find_FDE(void *, struct dwarf_eh_base *);
extern _Unwind_Ptr _Unwind_ForcedUnwind(struct _Unwind_Exception *,
					_Unwind_Stop_Fn, void *);
extern _Unwind_Ptr _Unwind_GetDataRelBase(struct _Unwind_Context *);
extern _Unwind_Word _Unwind_GetGR(struct _Unwind_Context *, int);
extern _Unwind_Ptr _Unwind_GetIP(struct _Unwind_Context *);
extern _Unwind_Ptr _Unwind_GetLanguageSpecificData(void);
extern _Unwind_Ptr _Unwind_GetRegionStart(struct _Unwind_Context *);
extern _Unwind_Ptr _Unwind_GetTextRelBase(struct _Unwind_Context *);
extern _Unwind_Reason_Code _Unwind_RaiseException(struct _Unwind_Exception
						  *);
extern void _Unwind_Resume(struct _Unwind_Exception *);
extern void _Unwind_SetGR(struct _Unwind_Context *, int, u_int64_t);
extern void _Unwind_SetIP(struct _Unwind_Context *, _Unwind_Ptr);
extern _Unwind_Reason_Code _Unwind_Backtrace(_Unwind_Trace_Fn, void *);
extern _Unwind_Reason_Code _Unwind_Backtrace(_Unwind_Trace_Fn, void *);
extern _Unwind_Reason_Code _Unwind_Backtrace(_Unwind_Trace_Fn, void *);
extern _Unwind_Reason_Code _Unwind_Backtrace(_Unwind_Trace_Fn, void *);
extern _Unwind_Reason_Code _Unwind_Backtrace(_Unwind_Trace_Fn, void *);
extern _Unwind_Reason_Code _Unwind_Backtrace(_Unwind_Trace_Fn, void *);
extern _Unwind_Reason_Code _Unwind_Backtrace(_Unwind_Trace_Fn, void *);
extern _Unwind_Reason_Code _Unwind_GetCFA(struct _Unwind_Context *);
extern _Unwind_Reason_Code _Unwind_GetCFA(struct _Unwind_Context *);
extern _Unwind_Reason_Code _Unwind_GetCFA(struct _Unwind_Context *);
extern _Unwind_Reason_Code _Unwind_GetCFA(struct _Unwind_Context *);
extern _Unwind_Reason_Code _Unwind_GetCFA(struct _Unwind_Context *);
extern _Unwind_Reason_Code _Unwind_GetCFA(struct _Unwind_Context *);
extern _Unwind_Reason_Code _Unwind_GetCFA(struct _Unwind_Context *);
extern _Unwind_Reason_Code _Unwind_Resume_or_Rethrow(struct
						     _Unwind_Exception *);
extern _Unwind_Reason_Code _Unwind_Resume_or_Rethrow(struct
						     _Unwind_Exception *);
extern _Unwind_Reason_Code _Unwind_Resume_or_Rethrow(struct
						     _Unwind_Exception *);
extern _Unwind_Reason_Code _Unwind_Resume_or_Rethrow(struct
						     _Unwind_Exception *);
extern _Unwind_Reason_Code _Unwind_Resume_or_Rethrow(struct
						     _Unwind_Exception *);
extern _Unwind_Reason_Code _Unwind_Resume_or_Rethrow(struct
						     _Unwind_Exception *);
extern _Unwind_Reason_Code _Unwind_Resume_or_Rethrow(struct
						     _Unwind_Exception *);
extern void *_Unwind_FindEnclosingFunction(void *);
extern void *_Unwind_FindEnclosingFunction(void *);
extern void *_Unwind_FindEnclosingFunction(void *);
extern void *_Unwind_FindEnclosingFunction(void *);
extern void *_Unwind_FindEnclosingFunction(void *);
extern void *_Unwind_FindEnclosingFunction(void *);
extern void *_Unwind_FindEnclosingFunction(void *);
extern _Unwind_Word _Unwind_GetBSP(struct _Unwind_Context *);
</SCREEN>
</SECT2>
</SECT1>
<SECT1 ID=libgcc-sman>
<TITLE>Interface Definitions for libgcc_s</TITLE>
<PARA>
The interfaces defined on the following pages are included in libgcc_s and are defined
by this specification.
Unless otherwise noted, these interfaces shall be included
in the source standard.
</PARA>
<PARA>
Other interfaces listed in <XREF LINKEND=libgcc-s> shall behave as described
in the referenced base document.
</PARA>
<!-- MISSING DEFINITION FOR _Unwind_Backtrace -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR _Unwind_DeleteException -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR _Unwind_FindEnclosingFunction -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR _Unwind_Find_FDE -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR _Unwind_ForcedUnwind -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR _Unwind_GetCFA -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR _Unwind_GetDataRelBase -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR _Unwind_GetGR -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR _Unwind_GetIP -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR _Unwind_GetLanguageSpecificData -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR _Unwind_GetRegionStart -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR _Unwind_GetTextRelBase -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR _Unwind_RaiseException -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR _Unwind_Resume -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR _Unwind_Resume_or_Rethrow -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR _Unwind_SetGR -->
<!-- Lets just hope nobody notices -->
<!-- MISSING DEFINITION FOR _Unwind_SetIP -->
<!-- Lets just hope nobody notices -->
</SECT1>
<!-- End of text generated from database -->
<!--    by $Header: /cvsroot/lsb/lsbspec/mklibspec,v 1.75 2005/10/12 22:24:36 nick Exp 0 -->
