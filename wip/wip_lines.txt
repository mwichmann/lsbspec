     1	Linux Standard Base Work In Progress 20031211
     2	
     3	Copyright © 2000, 2001, 2002, 2003 by Free Standards Group
     4	
     5	Permission is granted to copy, distribute and/or modify this document under the
     6	terms of the GNU Free Documentation License, Version 1.1; with no Invariant
     7	Sections, with no Front-Cover Texts, and with no Back-Cover Texts. A copy of
     8	the license is included in the section entitled "GNU Free Documentation
     9	License".
    10	
    11	Portions of the text are copyrighted by the following parties:
    12	
    13	  * BSD
    14	   
    15	  * Free Software Foundation
    16	   
    17	  * Ian F. Darwin
    18	   
    19	  * Paul Vixie
    20	   
    21	These excerpts are being used in accordance with their respective licenses.
    22	
    23	Linux is a trademark of Linus Torvalds.
    24	
    25	UNIX a registered trademark of the Open Group in the United States and other
    26	countries.
    27	
    28	LSB is a trademark of the Free Standards Group in the USA and other countries.
    29	
    30	AMD is a trademark of Advanced Micro Devices, Inc.
    31	
    32	Intel386 and Itanium are trademarks of Intel Corporation.
    33	
    34	OpenGL is a registered trademark of Silicon Graphics, Inc.
    35	
    36	-------------------------------------------------------------------------------
    37	
    38	Table of Contents
    39	I. Introduction
    40	   
    41	    1. Introduction
    42	       
    43	        Introduction
    44	        Purpose
    45	        Related Standards
    46	        Relevant Libraries
    47	        How to Use this Standard
    48	       
    49	II. Low Level System Information
    50	   
    51	    2. Machine Interface
    52	       
    53	        Data Representation
    54	       
    55	    3. Function Calling Sequence
    56	       
    57	        CPU Registers
    58	        Floating Point Registers
    59	        Stack Frame
    60	        Arguments
    61	        Return Values
    62	       
    63	    4. Operating System Interface
    64	       
    65	        Virtual Address Space
    66	        Processor Execution Mode
    67	        Exception Interface
    68	        Signal Delivery
    69	       
    70	    5. Process Initialization
    71	       
    72	        Special Registers
    73	        Process Stack (on entry)
    74	        Auxilliary Vectors
    75	        Environment
    76	       
    77	    6. Coding Examples
    78	       
    79	        Code Model Overview/Architecture Constraints
    80	        Position-Independent Fucntion Prologue
    81	        Data Objects
    82	        Function Calls
    83	        Branching
    84	       
    85	    7. C Stack Frame
    86	       
    87	        Variable Argument List
    88	        Dynamic Allocation of Stack Space
    89	       
    90	    8. Debug Information
    91	   
    92	List of Tables
    93	1-1. Related Standards
    94	1-2. Standard Libraries Names
    95	1-3. Standard Library Names defined in the Architecture Specific Supplement
    96	2-1. Scalar Types
    97	2-2. Class Components
    98	
    99	List of Figures
   100	2-1. Vitual Table Prefix
   101	2-2. Run-Time Type Information Prefix
   102	2-3. Construction Cirtual Table Prefix
   103	2-4. Virtual Type Table Prefix
   104	
   105	I. Introduction
   106	
   107	Table of Contents
   108	1. Introduction
   109	
   110	-------------------------------------------------------------------------------
   111	
   112	Chapter 1. Introduction
   113	
   114	Introduction
   115	
   116	This is the Linux Standard Base Work In Progress 20031211 . An implementation
   117	of anything in this document may not claim to be an implementation of the Linux
   118	Standard Base until such time as the feature moves into the Linux Standards
   119	Base Specification.
   120	
   121	-------------------------------------------------------------------------------
   122	
   123	Purpose
   124	
   125	The Linux Standard Base (LSB) defines a system interface for compiled
   126	applications and a minimal environment for support of installation scripts. Its
   127	purpose is to enable a uniform industry standard environment for high-volume
   128	applications conforming to the LSB.
   129	
   130	The LSB defines a binary interface for application programs that are compiled
   131	and packaged for LSB-conforming implementations on many different hardware
   132	architectures. Since a binary specification must include information specific
   133	to the computer processor architecture for which it is intended, it is not
   134	possible for a single document to specify the interface for all possible
   135	LSB-conforming implementations. Therefore, the LSB is a family of
   136	specifications, rather than a single one.
   137	
   138	The LSB is composed of two basic parts: A common specification ("generic LSB"
   139	or "gLSB") describing those parts of the interface that remain constant across
   140	all implementations of the LSB, and an architecture-specific specification
   141	("archLSB") describing the parts of the interface that vary by processor
   142	architecture. Together, the generic LSB and the architecture-specific
   143	supplement for a single hardware architecture provide a complete interface
   144	specification for compiled application programs on systems that share a common
   145	hardware architecture.
   146	
   147	This document is the generic LSB. It must be used in conjunction with an
   148	architecture-specific supplement. Whenever a section of this specification must
   149	be supplemented by architecture-specific information, this document includes a
   150	reference to the architecture supplement. Architecture supplements may also
   151	contain additional information that is not referenced here.
   152	
   153	This document should be used in conjunction with the documents it references.
   154	This document enumerates the system components it includes, but descriptions of
   155	those components may be included entirely or partly in this document, partly in
   156	other documents, or entirely in other reference documents. For example, the
   157	section that describes system service routines includes a list of the system
   158	routines supported in this interface, formal declarations of the data
   159	structures they use that are visible to applications, and a pointer to the
   160	underlying referenced specification for information about the syntax and
   161	semantics of each call. Only those routines not described in standards
   162	referenced by this document, or extensions to those standards, are described in
   163	the detail. Information referenced in this way is as much a part of this
   164	document as is the information explicitly included here.
   165	
   166	-------------------------------------------------------------------------------
   167	
   168	Related Standards
   169	
   170	The specifications listed below are referenced in whole or in part by the Linux
   171	Standard Base. When a specification is referenced in a way that imposes a
   172	requirement (for example, "foo must behave as specified in the XyzzySpec"),
   173	then the relevant requirements of that specification apply as if they were part
   174	of the LSB itself. However, if the LSB refers to a specification without
   175	imposing a requirement, then it is merely a reference and does not add
   176	additional requirements. The LSB may refer to a portion of a specification (for
   177	example, to define a specific function or group of functions); in such cases,
   178	only the explicitly referenced portion of the specification applies.
   179	
   180	Table 1-1. Related Standards
   181	
   182	+-----------------------------------------------------------------------------+
   183	|System V Application Binary Interface - DRAFT |http://www.caldera.com/       |
   184	|- 22 June 2000                                |developers/gabi/2000-07-17/   |
   185	|                                              |contents.html                 |
   186	|----------------------------------------------+------------------------------|
   187	|DWARF Debugging Information Format, Revision  |                              |
   188	|2.0.0 (July 27, 1993)                         |                              |
   189	|----------------------------------------------+------------------------------|
   190	|Filesystem Hierarchy Standard (FHS) 2.2       |http://www.pathname.com/fhs/  |
   191	|----------------------------------------------+------------------------------|
   192	|IEEE Standard for Binary Floating-Point       |http://www.ieee.org/          |
   193	|Arithmetic                                    |                              |
   194	|----------------------------------------------+------------------------------|
   195	|System V Application Binary Interface, Edition|http://www.caldera.com/       |
   196	|4.1                                           |developers/devspecs/gabi41.pdf|
   197	|----------------------------------------------+------------------------------|
   198	|ISO/IEC 9899: 1999, Programming Languages --C |                              |
   199	|----------------------------------------------+------------------------------|
   200	|ISO/IEC 14882: 1998(E) Programming languages  |                              |
   201	|--C++                                         |                              |
   202	|----------------------------------------------+------------------------------|
   203	|Linux Assigned Names And Numbers Authority    |http://www.lanana.org/        |
   204	|----------------------------------------------+------------------------------|
   205	|Large File Support                            |http://www.UNIX-systems.org/  |
   206	|                                              |version2/whatsnew/            |
   207	|                                              |lfs20mar.html                 |
   208	|----------------------------------------------+------------------------------|
   209	|LI18NUX 2000 Globalization Specification,     |http://www.li18nux.org/docs/  |
   210	|Version 1.0 with Amendment 4                  |html/LI18NUX-2000-amd4.htm    |
   211	|----------------------------------------------+------------------------------|
   212	|Linux Standard Base                           |http://www.linuxbase.org/spec/|
   213	|----------------------------------------------+------------------------------|
   214	|OpenGL® Application Binary Interface for Linux|http://oss.sgi.com/projects/  |
   215	|                                              |ogl-sample/ABI/               |
   216	|----------------------------------------------+------------------------------|
   217	|OSF-RFC 86.0                                  |http://www.opengroup.org/tech/|
   218	|                                              |rfc/mirror-rfc/rfc86.0.txt    |
   219	|----------------------------------------------+------------------------------|
   220	|POSIX 1003.1c                                 |http://www.ieee.org/          |
   221	|----------------------------------------------+------------------------------|
   222	|RFC 1952: GZIP file format specification      |http://www.ietf.org/rfc/      |
   223	|version 4.3                                   |rfc1952.txt                   |
   224	|----------------------------------------------+------------------------------|
   225	|RFC 2440: OpenPGP Message Format              |                              |
   226	|----------------------------------------------+------------------------------|
   227	|CAE Specification, January 1997, Commands and |http://www.opengroup.org/     |
   228	|Utilities (XCU), Issue 5 (ISBN: 1-85912-191-8,|publications/catalog/un.htm   |
   229	|C604)                                         |                              |
   230	|----------------------------------------------+------------------------------|
   231	|The Single UNIX® Specification(SUS) Version 3 |http://www.unix.org/version3/ |
   232	|----------------------------------------------+------------------------------|
   233	|System V Interface Definition, Issue 3 (ISBN  |                              |
   234	|0201566524)                                   |                              |
   235	|----------------------------------------------+------------------------------|
   236	|System V Interface Definition,Fourth Edition  |                              |
   237	|----------------------------------------------+------------------------------|
   238	|Double Buffer Extension Library               |http://www.x.org/             |
   239	|----------------------------------------------+------------------------------|
   240	|X Display Power Management Signaling (DPMS)   |http://www.x.org/             |
   241	|Extension, Library Specification              |                              |
   242	|----------------------------------------------+------------------------------|
   243	|X Record Extension Library                    |http://www.x.org/             |
   244	|----------------------------------------------+------------------------------|
   245	|Security Extension Specification, Version 7.1 |http://www.x.org/             |
   246	|----------------------------------------------+------------------------------|
   247	|X Nonrectangular Window Shape Extension       |http://www.x.org/             |
   248	|Library Version 1.0                           |                              |
   249	|----------------------------------------------+------------------------------|
   250	|MIT-SHM--The MIT Shared Memory Extension      |http://www.x.org/             |
   251	|----------------------------------------------+------------------------------|
   252	|X Synchronization Extension Library           |http://www.x.org/             |
   253	|----------------------------------------------+------------------------------|
   254	|XTEST Extension Library                       |http://www.x.org/             |
   255	|----------------------------------------------+------------------------------|
   256	|X11R6.4 X Inter-Client Exchange (ICE) Protocol|http://www.x.org/             |
   257	|----------------------------------------------+------------------------------|
   258	|X11R6.4 X11 Input Extension Library           |http://www.x.org/             |
   259	|----------------------------------------------+------------------------------|
   260	|X11R6.4 Xlib - C library                      |http://www.x.org/             |
   261	|----------------------------------------------+------------------------------|
   262	|X/Open Portability Guide, Issue 4             |http://www.opengroup.org/     |
   263	|----------------------------------------------+------------------------------|
   264	|X11R6.4 X Session Management Library          |http://www.x.org/             |
   265	|----------------------------------------------+------------------------------|
   266	|X11R6.4 X Toolkit Intrinsics                  |http://www.x.org/             |
   267	|----------------------------------------------+------------------------------|
   268	|zlib 1.1.3 Manual                             |http://www.gzip.org/zlib/     |
   269	+-----------------------------------------------------------------------------+
   270	-------------------------------------------------------------------------------
   271	
   272	Relevant Libraries
   273	
   274	The libraries listed here shall be available on a Linux Standard Base system.
   275	This list may be supplemented or amended by the architecture-specific
   276	specifications.
   277	
   278	Table 1-2. Standard Libraries Names
   279	
   280	+---------------------------+
   281	|Library   |Runtime Name    |
   282	|----------+----------------|
   283	|libX11    |libX11.so.6     |
   284	|----------+----------------|
   285	|libXt     |libXt.so.6      |
   286	|----------+----------------|
   287	|libGL     |libGL.so.1      |
   288	|----------+----------------|
   289	|libXext   |libXext.so.6    |
   290	|----------+----------------|
   291	|libICE    |libICE.so.6     |
   292	|----------+----------------|
   293	|libSM     |libSM.so.6      |
   294	|----------+----------------|
   295	|libdl     |libdl.so.2      |
   296	|----------+----------------|
   297	|libcrypt  |libcrypt.so.1   |
   298	|----------+----------------|
   299	|libz      |libz.so.1       |
   300	|----------+----------------|
   301	|libncurses|libncurses.so.5 |
   302	|----------+----------------|
   303	|libutil   |libutil.so.1    |
   304	|----------+----------------|
   305	|libstdcxx |libstdc++.so.5  |
   306	|----------+----------------|
   307	|libpam    |libpam.so.0     |
   308	|----------+----------------|
   309	|libgcc_s  |libgcc_s.so.1   |
   310	+---------------------------+
   311	
   312	Table 1-3. Standard Library Names defined in the Architecture Specific
   313	Supplement
   314	
   315	+---------------------------+
   316	|Library   |Runtime Name    |
   317	|----------+----------------|
   318	|libm      |See archLSB     |
   319	|----------+----------------|
   320	|libc      |See archLSB     |
   321	|----------+----------------|
   322	|libpthread|libpthread.so.0 |
   323	|----------+----------------|
   324	|proginterp|See archLSB     |
   325	+---------------------------+
   326	
   327	These libraries will be in an implementation-dependent directory which the
   328	dynamic linker will search by default.
   329	
   330	-------------------------------------------------------------------------------
   331	
   332	How to Use this Standard
   333	
   334	The complete LSB specification is composed of this generic LSB specification
   335	and the supplemental processor-specific specification for a particular
   336	processor architecture. These two documents constitute a specification that
   337	should be used in conjunction with the publicly-available standards documents
   338	it references. The LSB enumerates the system components it includes, but
   339	descriptions of those components may be included entirely in the LSB, partly in
   340	the LSB and partly in other documents, or entirely in other reference
   341	documents.
   342	
   343	II. Low Level System Information
   344	
   345	Table of Contents
   346	2. Machine Interface
   347	3. Function Calling Sequence
   348	4. Operating System Interface
   349	5. Process Initialization
   350	6. Coding Examples
   351	7. C Stack Frame
   352	8. Debug Information
   353	
   354	-------------------------------------------------------------------------------
   355	
   356	Chapter 2. Machine Interface
   357	
   358	Data Representation
   359	
   360	LSB-conforming applications shall use the data representation as defined in
   361	Chapter 3 of the System V Application Binary Interface - Intel386 Architecture
   362	Processor Supplement.
   363	
   364	-------------------------------------------------------------------------------
   365	
   366	Fundamental Types
   367	
   368	In addition to the fundamental types specified in Chapter 3 of the System V
   369	Application Binary Interface - Intel386 Architecture, these additional data
   370	types are defined here.
   371	
   372	Table 2-1. Scalar Types
   373	
   374	+---------------------------------------------------------------------------+
   375	|Type    |C                 |sizeof|Alignment (bytes)|IntelI386 Architecture|
   376	|--------+------------------+------+-----------------+----------------------|
   377	|Boolean |bool              |1     |1                |signed byte           |
   378	|--------+------------------+------+-----------------+----------------------|
   379	|        |long long         |      |                 |                      |
   380	|        |------------------|8     |4                |signed double word    |
   381	|Integral|signed long long  |      |                 |                      |
   382	|        |------------------+------+-----------------+----------------------|
   383	|        |unsigned long long|8     |4                |unsigned double word  |
   384	+---------------------------------------------------------------------------+
   385	
   386	-------------------------------------------------------------------------------
   387	
   388	Aggregates and Unions
   389	
   390	-------------------------------------------------------------------------------
   391	
   392	Bit Fields
   393	
   394	-------------------------------------------------------------------------------
   395	
   396	Member Pointers
   397	
   398	A pointer to data member is an offset from the base address of the class object
   399	containing it, represented as a ptrdiff_t. It has the size and alignment
   400	attributes of a ptrdiff_t. A NULL pointer is represented as -1.
   401	
   402	-------------------------------------------------------------------------------
   403	
   404	Class Representation
   405	
   406	A C++ Class is represented by several closely related data objects.
   407	
   408	Table 2-2. Class Components
   409	
   410	+-----------------------------------------------------------------------------+
   411	|Object        |Contains                                                      |
   412	|--------------+--------------------------------------------------------------|
   413	|Class Data    |All non-static Class members                                  |
   414	|--------------+--------------------------------------------------------------|
   415	|Virtual Table |Information needed to dispatch virtual functions, access      |
   416	|              |virtual base class subobjects and to access the RTTI          |
   417	|              |information                                                   |
   418	|--------------+--------------------------------------------------------------|
   419	|RTTI          |Run-Time Type Information used by the typeid and dynamic_cast |
   420	|              |operators, and exception handlers                             |
   421	|--------------+--------------------------------------------------------------|
   422	|Typeinfo Name |String representaion of Class name                            |
   423	|--------------+--------------------------------------------------------------|
   424	|Construction  |Information needed during construction and destruction of     |
   425	|Virtual Table |Classes with non-trivial inheritance relationships.           |
   426	|--------------+--------------------------------------------------------------|
   427	|VTT           |A table of virtual table pointers which holds the addresses of|
   428	|              |construction and non-contruction virtual tables.              |
   429	+-----------------------------------------------------------------------------+
   430	
   431	-------------------------------------------------------------------------------
   432	
   433	Class Ordering
   434	
   435	Derived classes have a unique linear ordering of all base classes, referered to
   436	as the Inhereitance Graph Order. The ordering on a class object and all its
   437	subobjects obtained by a depth-first traversal of its inheritance graph, from
   438	the most-derived class object to base objects, where:
   439	
   440	No node is visited more than once. (So, a virtual base subobject, and all of
   441	its base subobjects, will be visited only once.) The subobjects of a node are
   442	visited in the order in which they were declared. (So, given class A : public
   443	B, public C, A is walked first, then B and its subobjects, and then C and its
   444	subobjects.) Note that the traversal may be preorder or postorder. Unless
   445	otherwise specified, preorder (derived classes before their bases) is intended.
   446	
   447	   
   448	    Note: We need some good examples here.
   449	   
   450	-------------------------------------------------------------------------------
   451	
   452	Class Data
   453	
   454	Non-static class members are arranged as if in a C structure according to the
   455	following rules.
   456	
   457	    Note: Fill in algorithm from Itanium C++ ABI document
   458	   
   459	-------------------------------------------------------------------------------
   460	
   461	Virtual Table
   462	
   463	Figure 2-1. Vitual Table Prefix
   464	
   465	struct {
   466	       ptrdiff_t  baseobject;
   467	       const void *typeinfo;
   468	       const void *virtfuncs[0];
   469	       };
   470	-------------------------------------------------------------------------------
   471	
   472	Run-Time Type Information
   473	
   474	Figure 2-2. Run-Time Type Information Prefix
   475	
   476	struct {
   477	       void      *basevtable;
   478	       char      *__name;
   479	       void      *basetypeinfo[0];
   480	       };
   481	-------------------------------------------------------------------------------
   482	
   483	Typeinfo Name
   484	
   485	-------------------------------------------------------------------------------
   486	
   487	Construction Virtual Table
   488	
   489	Figure 2-3. Construction Cirtual Table Prefix
   490	
   491	struct {
   492	       ????
   493	       };
   494	-------------------------------------------------------------------------------
   495	
   496	Virtual Type Tables
   497	
   498	Figure 2-4. Virtual Type Table Prefix
   499	
   500	struct {
   501	       ???
   502	       };
   503	-------------------------------------------------------------------------------
   504	
   505	Chapter 3. Function Calling Sequence
   506	
   507	LSB-conforming applications shall use the function calling sequence as defined
   508	in Chapter 3 of the System V Application Binary Interface - Intel386
   509	Architecture Processor Supplement.
   510	
   511	-------------------------------------------------------------------------------
   512	
   513	CPU Registers
   514	
   515	-------------------------------------------------------------------------------
   516	
   517	Floating Point Registers
   518	
   519	-------------------------------------------------------------------------------
   520	
   521	Stack Frame
   522	
   523	-------------------------------------------------------------------------------
   524	
   525	Arguments
   526	
   527	-------------------------------------------------------------------------------
   528	
   529	Integral/Pointer
   530	
   531	-------------------------------------------------------------------------------
   532	
   533	Floating Point
   534	
   535	-------------------------------------------------------------------------------
   536	
   537	Struct and Union Point
   538	
   539	-------------------------------------------------------------------------------
   540	
   541	Variable Arguments
   542	
   543	-------------------------------------------------------------------------------
   544	
   545	Return Values
   546	
   547	-------------------------------------------------------------------------------
   548	
   549	Void
   550	
   551	-------------------------------------------------------------------------------
   552	
   553	Integral/Pointer
   554	
   555	-------------------------------------------------------------------------------
   556	
   557	Floating Point
   558	
   559	-------------------------------------------------------------------------------
   560	
   561	Struct and Union Point
   562	
   563	-------------------------------------------------------------------------------
   564	
   565	Chapter 4. Operating System Interface
   566	
   567	LSB-conforming applications shall use the Operating System Interfaces as
   568	defined in Chapter 3 of the System V Application Binary Interface - Intel386
   569	Architecture Processor Supplement.
   570	
   571	-------------------------------------------------------------------------------
   572	
   573	Virtual Address Space
   574	
   575	-------------------------------------------------------------------------------
   576	
   577	Page Size
   578	
   579	-------------------------------------------------------------------------------
   580	
   581	Virtual Address Assignments
   582	
   583	-------------------------------------------------------------------------------
   584	
   585	Managing the PRocess Stack
   586	
   587	-------------------------------------------------------------------------------
   588	
   589	Coding Guidlines
   590	
   591	-------------------------------------------------------------------------------
   592	
   593	Processor Execution Mode
   594	
   595	-------------------------------------------------------------------------------
   596	
   597	Exception Interface
   598	
   599	-------------------------------------------------------------------------------
   600	
   601	Hardware Exception Types
   602	
   603	-------------------------------------------------------------------------------
   604	
   605	Software Trap Types
   606	
   607	-------------------------------------------------------------------------------
   608	
   609	Signal Delivery
   610	
   611	-------------------------------------------------------------------------------
   612	
   613	Signal Handler Interface
   614	
   615	-------------------------------------------------------------------------------
   616	
   617	Chapter 5. Process Initialization
   618	
   619	LSB-conforming applications shall use the Process Initialization as defined in
   620	Chapter 3 of the System V Application Binary Interface - Intel386 Architecture
   621	Processor Supplement.
   622	
   623	-------------------------------------------------------------------------------
   624	
   625	Special Registers
   626	
   627	-------------------------------------------------------------------------------
   628	
   629	Process Stack (on entry)
   630	
   631	-------------------------------------------------------------------------------
   632	
   633	Auxilliary Vectors
   634	
   635	-------------------------------------------------------------------------------
   636	
   637	Environment
   638	
   639	-------------------------------------------------------------------------------
   640	
   641	Chapter 6. Coding Examples
   642	
   643	LSB-conforming applications may implement fundamental operations using the
   644	Coding Examples as defined in Chapter 3 of the System V Application Binary
   645	Interface - Intel386 Architecture Processor Supplement.
   646	
   647	-------------------------------------------------------------------------------
   648	
   649	Code Model Overview/Architecture Constraints
   650	
   651	-------------------------------------------------------------------------------
   652	
   653	Position-Independent Fucntion Prologue
   654	
   655	-------------------------------------------------------------------------------
   656	
   657	Data Objects
   658	
   659	-------------------------------------------------------------------------------
   660	
   661	Absolute Load & Store
   662	
   663	-------------------------------------------------------------------------------
   664	
   665	Position Relative Load & Store
   666	
   667	-------------------------------------------------------------------------------
   668	
   669	Function Calls
   670	
   671	-------------------------------------------------------------------------------
   672	
   673	Absolute Direct Function Call
   674	
   675	-------------------------------------------------------------------------------
   676	
   677	Absolute Indirect Function Call
   678	
   679	-------------------------------------------------------------------------------
   680	
   681	Position-Independent Direct Function Call
   682	
   683	-------------------------------------------------------------------------------
   684	
   685	Position-Independent Indirect Function Call
   686	
   687	-------------------------------------------------------------------------------
   688	
   689	Branching
   690	
   691	-------------------------------------------------------------------------------
   692	
   693	Branch Instruction
   694	
   695	-------------------------------------------------------------------------------
   696	
   697	Absolute switch() code
   698	
   699	-------------------------------------------------------------------------------
   700	
   701	Position-Independent switch() code
   702	
   703	-------------------------------------------------------------------------------
   704	
   705	Chapter 7. C Stack Frame
   706	
   707	Variable Argument List
   708	
   709	-------------------------------------------------------------------------------
   710	
   711	Dynamic Allocation of Stack Space
   712	
   713	-------------------------------------------------------------------------------
   714	
   715	Chapter 8. Debug Information
   716	
   717	The LSB does not currently specify the format of Debug information.
   718	
