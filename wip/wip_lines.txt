     1	Linux Standard Base Work In Progress 20040121
     2	
     3	Copyright © 2000, 2001, 2002, 2003 by Free Standards Group
     4	
     5	Permission is granted to copy, distribute and/or modify this document under the
     6	terms of the GNU Free Documentation License, Version 1.1; with no Invariant
     7	Sections, with no Front-Cover Texts, and with no Back-Cover Texts. A copy of
     8	the license is included in the section entitled "GNU Free Documentation
     9	License".
    10	
    11	Portions of the text are copyrighted by the following parties:
    12	
    13	  * BSD
    14	   
    15	  * Free Software Foundation
    16	   
    17	  * Ian F. Darwin
    18	   
    19	  * Paul Vixie
    20	   
    21	These excerpts are being used in accordance with their respective licenses.
    22	
    23	Linux is a trademark of Linus Torvalds.
    24	
    25	UNIX a registered trademark of the Open Group in the United States and other
    26	countries.
    27	
    28	LSB is a trademark of the Free Standards Group in the USA and other countries.
    29	
    30	AMD is a trademark of Advanced Micro Devices, Inc.
    31	
    32	Intel386 and Itanium are trademarks of Intel Corporation.
    33	
    34	OpenGL is a registered trademark of Silicon Graphics, Inc.
    35	
    36	-------------------------------------------------------------------------------
    37	
    38	Table of Contents
    39	I. Introduction
    40	   
    41	    1. Introduction
    42	       
    43	        Introduction
    44	        Purpose
    45	        Related Standards
    46	        Relevant Libraries
    47	        How to Use this Standard
    48	       
    49	II. Low Level System Information
    50	   
    51	    2. Machine Interface
    52	       
    53	        Data Representation
    54	       
    55	    3. Function Calling Sequence
    56	       
    57	        CPU Registers
    58	        Floating Point Registers
    59	        Stack Frame
    60	        Arguments
    61	        Return Values
    62	       
    63	    4. Operating System Interface
    64	       
    65	        Virtual Address Space
    66	        Processor Execution Mode
    67	        Exception Interface
    68	        Signal Delivery
    69	       
    70	    5. Process Initialization
    71	       
    72	        Special Registers
    73	        Process Stack (on entry)
    74	        Auxilliary Vectors
    75	        Environment
    76	       
    77	    6. Coding Examples
    78	       
    79	        Code Model Overview/Architecture Constraints
    80	        Position-Independent Fucntion Prologue
    81	        Data Objects
    82	        Function Calls
    83	        Branching
    84	       
    85	    7. C Stack Frame
    86	       
    87	        Variable Argument List
    88	        Dynamic Allocation of Stack Space
    89	       
    90	    8. Debug Information
    91	   
    92	List of Tables
    93	1-1. Related Standards
    94	1-2. Standard Libraries Names
    95	1-3. Standard Library Names defined in the Architecture Specific Supplement
    96	2-1. Scalar Types
    97	2-2. Class Components
    98	
    99	List of Figures
   100	2-1. Vitual Table Prefix
   101	2-2. Run-Time Type Information Prefix
   102	2-3. Construction Cirtual Table Prefix
   103	2-4. Virtual Type Table Prefix
   104	
   105	I. Introduction
   106	
   107	Table of Contents
   108	1. Introduction
   109	
   110	-------------------------------------------------------------------------------
   111	
   112	Chapter 1. Introduction
   113	
   114	Introduction
   115	
   116	This is the Linux Standard Base Work In Progress 20040121 . An implementation
   117	of anything in this document may not claim to be an implementation of the Linux
   118	Standard Base until such time as the feature moves into the Linux Standards
   119	Base Specification.
   120	
   121	-------------------------------------------------------------------------------
   122	
   123	Purpose
   124	
   125	The Linux Standard Base (LSB) defines a system interface for compiled
   126	applications and a minimal environment for support of installation scripts. Its
   127	purpose is to enable a uniform industry standard environment for high-volume
   128	applications conforming to the LSB.
   129	
   130	The LSB defines a binary interface for application programs that are compiled
   131	and packaged for LSB-conforming implementations on many different hardware
   132	architectures. Since a binary specification must include information specific
   133	to the computer processor architecture for which it is intended, it is not
   134	possible for a single document to specify the interface for all possible
   135	LSB-conforming implementations. Therefore, the LSB is a family of
   136	specifications, rather than a single one.
   137	
   138	The LSB is composed of two basic parts: A common specification ("generic LSB"
   139	or "gLSB") describing those parts of the interface that remain constant across
   140	all implementations of the LSB, and an architecture-specific specification
   141	("archLSB") describing the parts of the interface that vary by processor
   142	architecture. Together, the generic LSB and the architecture-specific
   143	supplement for a single hardware architecture provide a complete interface
   144	specification for compiled application programs on systems that share a common
   145	hardware architecture.
   146	
   147	This document is the generic LSB. It must be used in conjunction with an
   148	architecture-specific supplement. Whenever a section of this specification must
   149	be supplemented by architecture-specific information, this document includes a
   150	reference to the architecture supplement. Architecture supplements may also
   151	contain additional information that is not referenced here.
   152	
   153	This document should be used in conjunction with the documents it references.
   154	This document enumerates the system components it includes, but descriptions of
   155	those components may be included entirely or partly in this document, partly in
   156	other documents, or entirely in other reference documents. For example, the
   157	section that describes system service routines includes a list of the system
   158	routines supported in this interface, formal declarations of the data
   159	structures they use that are visible to applications, and a pointer to the
   160	underlying referenced specification for information about the syntax and
   161	semantics of each call. Only those routines not described in standards
   162	referenced by this document, or extensions to those standards, are described in
   163	the detail. Information referenced in this way is as much a part of this
   164	document as is the information explicitly included here.
   165	
   166	-------------------------------------------------------------------------------
   167	
   168	Related Standards
   169	
   170	The specifications listed below are referenced in whole or in part by the Linux
   171	Standard Base. When a specification is referenced in a way that imposes a
   172	requirement (for example, "foo must behave as specified in the XyzzySpec"),
   173	then the relevant requirements of that specification apply as if they were part
   174	of the LSB itself. However, if the LSB refers to a specification without
   175	imposing a requirement, then it is merely a reference and does not add
   176	additional requirements. The LSB may refer to a portion of a specification (for
   177	example, to define a specific function or group of functions); in such cases,
   178	only the explicitly referenced portion of the specification applies.
   179	
   180	Table 1-1. Related Standards
   181	
   182	+-----------------------------------------------------------------------------+
   183	|System V Application Binary Interface - DRAFT - |http://www.caldera.com/     |
   184	|17 December 2003                                |developers/gabi/2003-12-17/ |
   185	|                                                |contents.html               |
   186	|------------------------------------------------+----------------------------|
   187	|Itanium C++ ABI ($Revision: 1.11 $)             |http://www.codesourcery.com/|
   188	|                                                |cxx-abi/abi.html            |
   189	|------------------------------------------------+----------------------------|
   190	|DWARF Debugging Information Format, Revision    |                            |
   191	|2.0.0 (July 27, 1993)                           |                            |
   192	|------------------------------------------------+----------------------------|
   193	|Filesystem Hierarchy Standard (FHS) 2.2         |http://www.pathname.com/fhs/|
   194	|------------------------------------------------+----------------------------|
   195	|IEEE Standard for Binary Floating-Point         |http://www.ieee.org/        |
   196	|Arithmetic                                      |                            |
   197	|------------------------------------------------+----------------------------|
   198	|System V Application Binary Interface, Edition  |http://www.caldera.com/     |
   199	|4.1                                             |developers/devspecs/        |
   200	|                                                |gabi41.pdf                  |
   201	|------------------------------------------------+----------------------------|
   202	|ISO/IEC 9899: 1999, Programming Languages --C   |                            |
   203	|------------------------------------------------+----------------------------|
   204	|ISO/IEC 14882: 1998(E) Programming languages    |                            |
   205	|--C++                                           |                            |
   206	|------------------------------------------------+----------------------------|
   207	|Linux Assigned Names And Numbers Authority      |http://www.lanana.org/      |
   208	|------------------------------------------------+----------------------------|
   209	|Large File Support                              |http://www.UNIX-systems.org/|
   210	|                                                |version2/whatsnew/          |
   211	|                                                |lfs20mar.html               |
   212	|------------------------------------------------+----------------------------|
   213	|LI18NUX 2000 Globalization Specification,       |http://www.li18nux.org/docs/|
   214	|Version 1.0 with Amendment 4                    |html/LI18NUX-2000-amd4.htm  |
   215	|------------------------------------------------+----------------------------|
   216	|Linux Standard Base                             |http://www.linuxbase.org/   |
   217	|                                                |spec/                       |
   218	|------------------------------------------------+----------------------------|
   219	|OpenGL® Application Binary Interface for Linux  |http://oss.sgi.com/projects/|
   220	|                                                |ogl-sample/ABI/             |
   221	|------------------------------------------------+----------------------------|
   222	|OSF-RFC 86.0                                    |http://www.opengroup.org/   |
   223	|                                                |tech/rfc/mirror-rfc/        |
   224	|                                                |rfc86.0.txt                 |
   225	|------------------------------------------------+----------------------------|
   226	|POSIX 1003.1c                                   |http://www.ieee.org/        |
   227	|------------------------------------------------+----------------------------|
   228	|RFC 1952: GZIP file format specification version|http://www.ietf.org/rfc/    |
   229	|4.3                                             |rfc1952.txt                 |
   230	|------------------------------------------------+----------------------------|
   231	|RFC 2440: OpenPGP Message Format                |                            |
   232	|------------------------------------------------+----------------------------|
   233	|The Single UNIX® Specification(SUS) Version 2,  |http://www.opengroup.org/   |
   234	|Commands and Utilities (XCU), Issue 5 (ISBN:    |publications/catalog/un.htm |
   235	|1-85912-191-8, C604)                            |                            |
   236	|------------------------------------------------+----------------------------|
   237	|The Single UNIX® Specification(SUS) Version 3   |http://www.unix.org/version3|
   238	|                                                |/                           |
   239	|------------------------------------------------+----------------------------|
   240	|System V Interface Definition, Issue 3 (ISBN    |                            |
   241	|0201566524)                                     |                            |
   242	|------------------------------------------------+----------------------------|
   243	|System V Interface Definition,Fourth Edition    |                            |
   244	|------------------------------------------------+----------------------------|
   245	|Double Buffer Extension Library                 |http://www.x.org/           |
   246	|------------------------------------------------+----------------------------|
   247	|X Display Power Management Signaling (DPMS)     |http://www.x.org/           |
   248	|Extension, Library Specification                |                            |
   249	|------------------------------------------------+----------------------------|
   250	|X Record Extension Library                      |http://www.x.org/           |
   251	|------------------------------------------------+----------------------------|
   252	|Security Extension Specification, Version 7.1   |http://www.x.org/           |
   253	|------------------------------------------------+----------------------------|
   254	|X Nonrectangular Window Shape Extension Library |http://www.x.org/           |
   255	|Version 1.0                                     |                            |
   256	|------------------------------------------------+----------------------------|
   257	|MIT-SHM--The MIT Shared Memory Extension        |http://www.x.org/           |
   258	|------------------------------------------------+----------------------------|
   259	|X Synchronization Extension Library             |http://www.x.org/           |
   260	|------------------------------------------------+----------------------------|
   261	|XTEST Extension Library                         |http://www.x.org/           |
   262	|------------------------------------------------+----------------------------|
   263	|X11R6.4 X Inter-Client Exchange (ICE) Protocol  |http://www.x.org/           |
   264	|------------------------------------------------+----------------------------|
   265	|X11R6.4 X11 Input Extension Library             |http://www.x.org/           |
   266	|------------------------------------------------+----------------------------|
   267	|X11R6.4 Xlib - C library                        |http://www.x.org/           |
   268	|------------------------------------------------+----------------------------|
   269	|X/Open Portability Guide, Issue 4               |http://www.opengroup.org/   |
   270	|------------------------------------------------+----------------------------|
   271	|X11R6.4 X Session Management Library            |http://www.x.org/           |
   272	|------------------------------------------------+----------------------------|
   273	|X11R6.4 X Toolkit Intrinsics                    |http://www.x.org/           |
   274	|------------------------------------------------+----------------------------|
   275	|zlib 1.1.3 Manual                               |http://www.gzip.org/zlib/   |
   276	+-----------------------------------------------------------------------------+
   277	-------------------------------------------------------------------------------
   278	
   279	Relevant Libraries
   280	
   281	The libraries listed here shall be available on a Linux Standard Base system.
   282	This list may be supplemented or amended by the architecture-specific
   283	specifications.
   284	
   285	Table 1-2. Standard Libraries Names
   286	
   287	+---------------------------+
   288	|Library   |Runtime Name    |
   289	|----------+----------------|
   290	|libX11    |libX11.so.6     |
   291	|----------+----------------|
   292	|libXt     |libXt.so.6      |
   293	|----------+----------------|
   294	|libGL     |libGL.so.1      |
   295	|----------+----------------|
   296	|libXext   |libXext.so.6    |
   297	|----------+----------------|
   298	|libICE    |libICE.so.6     |
   299	|----------+----------------|
   300	|libSM     |libSM.so.6      |
   301	|----------+----------------|
   302	|libdl     |libdl.so.2      |
   303	|----------+----------------|
   304	|libcrypt  |libcrypt.so.1   |
   305	|----------+----------------|
   306	|libz      |libz.so.1       |
   307	|----------+----------------|
   308	|libncurses|libncurses.so.5 |
   309	|----------+----------------|
   310	|libutil   |libutil.so.1    |
   311	|----------+----------------|
   312	|libstdcxx |libstdc++.so.5  |
   313	|----------+----------------|
   314	|libpam    |libpam.so.0     |
   315	|----------+----------------|
   316	|libgcc_s  |libgcc_s.so.1   |
   317	+---------------------------+
   318	
   319	Table 1-3. Standard Library Names defined in the Architecture Specific
   320	Supplement
   321	
   322	+---------------------------+
   323	|Library   |Runtime Name    |
   324	|----------+----------------|
   325	|libm      |See archLSB     |
   326	|----------+----------------|
   327	|libc      |See archLSB     |
   328	|----------+----------------|
   329	|libpthread|libpthread.so.0 |
   330	|----------+----------------|
   331	|proginterp|See archLSB     |
   332	+---------------------------+
   333	
   334	These libraries will be in an implementation-dependent directory which the
   335	dynamic linker will search by default.
   336	
   337	-------------------------------------------------------------------------------
   338	
   339	How to Use this Standard
   340	
   341	The complete LSB specification is composed of this generic LSB specification
   342	and the supplemental processor-specific specification for a particular
   343	processor architecture. These two documents constitute a specification that
   344	should be used in conjunction with the publicly-available standards documents
   345	it references. The LSB enumerates the system components it includes, but
   346	descriptions of those components may be included entirely in the LSB, partly in
   347	the LSB and partly in other documents, or entirely in other reference
   348	documents.
   349	
   350	II. Low Level System Information
   351	
   352	Table of Contents
   353	2. Machine Interface
   354	3. Function Calling Sequence
   355	4. Operating System Interface
   356	5. Process Initialization
   357	6. Coding Examples
   358	7. C Stack Frame
   359	8. Debug Information
   360	
   361	-------------------------------------------------------------------------------
   362	
   363	Chapter 2. Machine Interface
   364	
   365	Data Representation
   366	
   367	LSB-conforming applications shall use the data representation as defined in
   368	Chapter 3 of the System V Application Binary Interface - Intel386 Architecture
   369	Processor Supplement.
   370	
   371	-------------------------------------------------------------------------------
   372	
   373	Fundamental Types
   374	
   375	In addition to the fundamental types specified in Chapter 3 of the System V
   376	Application Binary Interface - Intel386 Architecture, these additional data
   377	types are defined here.
   378	
   379	Table 2-1. Scalar Types
   380	
   381	+---------------------------------------------------------------------------+
   382	|Type    |C                 |sizeof|Alignment (bytes)|IntelI386 Architecture|
   383	|--------+------------------+------+-----------------+----------------------|
   384	|Boolean |bool              |1     |1                |signed byte           |
   385	|--------+------------------+------+-----------------+----------------------|
   386	|        |long long         |      |                 |                      |
   387	|        |------------------|8     |4                |signed double word    |
   388	|Integral|signed long long  |      |                 |                      |
   389	|        |------------------+------+-----------------+----------------------|
   390	|        |unsigned long long|8     |4                |unsigned double word  |
   391	+---------------------------------------------------------------------------+
   392	
   393	-------------------------------------------------------------------------------
   394	
   395	Aggregates and Unions
   396	
   397	-------------------------------------------------------------------------------
   398	
   399	Bit Fields
   400	
   401	-------------------------------------------------------------------------------
   402	
   403	Member Pointers
   404	
   405	A pointer to data member is an offset from the base address of the class object
   406	containing it, represented as a ptrdiff_t. It has the size and alignment
   407	attributes of a ptrdiff_t. A NULL pointer is represented as -1.
   408	
   409	-------------------------------------------------------------------------------
   410	
   411	Class Representation
   412	
   413	A C++ Class is represented by several closely related data objects.
   414	
   415	Table 2-2. Class Components
   416	
   417	+-----------------------------------------------------------------------------+
   418	|Object        |Contains                                                      |
   419	|--------------+--------------------------------------------------------------|
   420	|Class Data    |All non-static Class members                                  |
   421	|--------------+--------------------------------------------------------------|
   422	|Virtual Table |Information needed to dispatch virtual functions, access      |
   423	|              |virtual base class subobjects and to access the RTTI          |
   424	|              |information                                                   |
   425	|--------------+--------------------------------------------------------------|
   426	|RTTI          |Run-Time Type Information used by the typeid and dynamic_cast |
   427	|              |operators, and exception handlers                             |
   428	|--------------+--------------------------------------------------------------|
   429	|Typeinfo Name |String representaion of Class name                            |
   430	|--------------+--------------------------------------------------------------|
   431	|Construction  |Information needed during construction and destruction of     |
   432	|Virtual Table |Classes with non-trivial inheritance relationships.           |
   433	|--------------+--------------------------------------------------------------|
   434	|VTT           |A table of virtual table pointers which holds the addresses of|
   435	|              |construction and non-contruction virtual tables.              |
   436	+-----------------------------------------------------------------------------+
   437	
   438	-------------------------------------------------------------------------------
   439	
   440	Class Ordering
   441	
   442	Derived classes have a unique linear ordering of all base classes, referered to
   443	as the Inhereitance Graph Order. The ordering on a class object and all its
   444	subobjects obtained by a depth-first traversal of its inheritance graph, from
   445	the most-derived class object to base objects, where:
   446	
   447	No node is visited more than once. (So, a virtual base subobject, and all of
   448	its base subobjects, will be visited only once.) The subobjects of a node are
   449	visited in the order in which they were declared. (So, given class A : public
   450	B, public C, A is walked first, then B and its subobjects, and then C and its
   451	subobjects.) Note that the traversal may be preorder or postorder. Unless
   452	otherwise specified, preorder (derived classes before their bases) is intended.
   453	
   454	   
   455	    Note: We need some good examples here.
   456	   
   457	-------------------------------------------------------------------------------
   458	
   459	Class Data
   460	
   461	Non-static class members are arranged as if in a C structure according to the
   462	following rules.
   463	
   464	    Note: Fill in algorithm from Itanium C++ ABI document
   465	   
   466	-------------------------------------------------------------------------------
   467	
   468	Virtual Table
   469	
   470	Figure 2-1. Vitual Table Prefix
   471	
   472	struct {
   473	       ptrdiff_t  baseobject;
   474	       const void *typeinfo;
   475	       const void *virtfuncs[0];
   476	       };
   477	-------------------------------------------------------------------------------
   478	
   479	Run-Time Type Information
   480	
   481	Figure 2-2. Run-Time Type Information Prefix
   482	
   483	struct {
   484	       void      *basevtable;
   485	       char      *__name;
   486	       void      *basetypeinfo[0];
   487	       };
   488	-------------------------------------------------------------------------------
   489	
   490	Typeinfo Name
   491	
   492	-------------------------------------------------------------------------------
   493	
   494	Construction Virtual Table
   495	
   496	Figure 2-3. Construction Cirtual Table Prefix
   497	
   498	struct {
   499	       ????
   500	       };
   501	-------------------------------------------------------------------------------
   502	
   503	Virtual Type Tables
   504	
   505	Figure 2-4. Virtual Type Table Prefix
   506	
   507	struct {
   508	       ???
   509	       };
   510	-------------------------------------------------------------------------------
   511	
   512	Chapter 3. Function Calling Sequence
   513	
   514	LSB-conforming applications shall use the function calling sequence as defined
   515	in Chapter 3 of the System V Application Binary Interface - Intel386
   516	Architecture Processor Supplement.
   517	
   518	-------------------------------------------------------------------------------
   519	
   520	CPU Registers
   521	
   522	-------------------------------------------------------------------------------
   523	
   524	Floating Point Registers
   525	
   526	-------------------------------------------------------------------------------
   527	
   528	Stack Frame
   529	
   530	-------------------------------------------------------------------------------
   531	
   532	Arguments
   533	
   534	-------------------------------------------------------------------------------
   535	
   536	Integral/Pointer
   537	
   538	-------------------------------------------------------------------------------
   539	
   540	Floating Point
   541	
   542	-------------------------------------------------------------------------------
   543	
   544	Struct and Union Point
   545	
   546	-------------------------------------------------------------------------------
   547	
   548	Variable Arguments
   549	
   550	-------------------------------------------------------------------------------
   551	
   552	Return Values
   553	
   554	-------------------------------------------------------------------------------
   555	
   556	Void
   557	
   558	-------------------------------------------------------------------------------
   559	
   560	Integral/Pointer
   561	
   562	-------------------------------------------------------------------------------
   563	
   564	Floating Point
   565	
   566	-------------------------------------------------------------------------------
   567	
   568	Struct and Union Point
   569	
   570	-------------------------------------------------------------------------------
   571	
   572	Chapter 4. Operating System Interface
   573	
   574	LSB-conforming applications shall use the Operating System Interfaces as
   575	defined in Chapter 3 of the System V Application Binary Interface - Intel386
   576	Architecture Processor Supplement.
   577	
   578	-------------------------------------------------------------------------------
   579	
   580	Virtual Address Space
   581	
   582	-------------------------------------------------------------------------------
   583	
   584	Page Size
   585	
   586	-------------------------------------------------------------------------------
   587	
   588	Virtual Address Assignments
   589	
   590	-------------------------------------------------------------------------------
   591	
   592	Managing the PRocess Stack
   593	
   594	-------------------------------------------------------------------------------
   595	
   596	Coding Guidlines
   597	
   598	-------------------------------------------------------------------------------
   599	
   600	Processor Execution Mode
   601	
   602	-------------------------------------------------------------------------------
   603	
   604	Exception Interface
   605	
   606	-------------------------------------------------------------------------------
   607	
   608	Hardware Exception Types
   609	
   610	-------------------------------------------------------------------------------
   611	
   612	Software Trap Types
   613	
   614	-------------------------------------------------------------------------------
   615	
   616	Signal Delivery
   617	
   618	-------------------------------------------------------------------------------
   619	
   620	Signal Handler Interface
   621	
   622	-------------------------------------------------------------------------------
   623	
   624	Chapter 5. Process Initialization
   625	
   626	LSB-conforming applications shall use the Process Initialization as defined in
   627	Chapter 3 of the System V Application Binary Interface - Intel386 Architecture
   628	Processor Supplement.
   629	
   630	-------------------------------------------------------------------------------
   631	
   632	Special Registers
   633	
   634	-------------------------------------------------------------------------------
   635	
   636	Process Stack (on entry)
   637	
   638	-------------------------------------------------------------------------------
   639	
   640	Auxilliary Vectors
   641	
   642	-------------------------------------------------------------------------------
   643	
   644	Environment
   645	
   646	-------------------------------------------------------------------------------
   647	
   648	Chapter 6. Coding Examples
   649	
   650	LSB-conforming applications may implement fundamental operations using the
   651	Coding Examples as defined in Chapter 3 of the System V Application Binary
   652	Interface - Intel386 Architecture Processor Supplement.
   653	
   654	-------------------------------------------------------------------------------
   655	
   656	Code Model Overview/Architecture Constraints
   657	
   658	-------------------------------------------------------------------------------
   659	
   660	Position-Independent Fucntion Prologue
   661	
   662	-------------------------------------------------------------------------------
   663	
   664	Data Objects
   665	
   666	-------------------------------------------------------------------------------
   667	
   668	Absolute Load & Store
   669	
   670	-------------------------------------------------------------------------------
   671	
   672	Position Relative Load & Store
   673	
   674	-------------------------------------------------------------------------------
   675	
   676	Function Calls
   677	
   678	-------------------------------------------------------------------------------
   679	
   680	Absolute Direct Function Call
   681	
   682	-------------------------------------------------------------------------------
   683	
   684	Absolute Indirect Function Call
   685	
   686	-------------------------------------------------------------------------------
   687	
   688	Position-Independent Direct Function Call
   689	
   690	-------------------------------------------------------------------------------
   691	
   692	Position-Independent Indirect Function Call
   693	
   694	-------------------------------------------------------------------------------
   695	
   696	Branching
   697	
   698	-------------------------------------------------------------------------------
   699	
   700	Branch Instruction
   701	
   702	-------------------------------------------------------------------------------
   703	
   704	Absolute switch() code
   705	
   706	-------------------------------------------------------------------------------
   707	
   708	Position-Independent switch() code
   709	
   710	-------------------------------------------------------------------------------
   711	
   712	Chapter 7. C Stack Frame
   713	
   714	Variable Argument List
   715	
   716	-------------------------------------------------------------------------------
   717	
   718	Dynamic Allocation of Stack Space
   719	
   720	-------------------------------------------------------------------------------
   721	
   722	Chapter 8. Debug Information
   723	
   724	The LSB does not currently specify the format of Debug information.
   725	
