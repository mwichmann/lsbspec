<PART ID=tocbaselib>
<TITLE>Base Libraries</TITLE>

<CHAPTER id=baselib>
<TITLE>Libraries</TITLE>

<PARA>
An LSB-conforming implementation shall support some base libraries which
provide interfaces for accessing the operating system, processor and other
hardware in the system.
</PARA>

<!-- Start of text generated from database -->
<!-- generated from the LSB specification database -->
<!--    by $Header: /cvsroot/lsb/spec/mklibspec,v 1.49 2002/09/30 19:50:36 anderson Exp 0 -->
<!--    at Fri Oct  4 12:00:52 2002 -->
<SECT1 ID=libstdcxx>
<TITLE>Interfaces for libstdcxx</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libstdcxx Definition</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Library:</ENTRY>
<ENTRY>libstdcxx</ENTRY>
</ROW>
<ROW>
<ENTRY>SONAME:</ENTRY>
<ENTRY>libstdc++.so.5</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The behavior of the interfaces in this library is specified by the following standards.<SIMPLELIST COLUMNS=1>
<MEMBER>
ISO/IEC 14882: 1998(E) Programming languages --C++<FOOTNOTE ID="std-231-65">
<PARA>
ISO/IEC 14882: 1998(E) Programming languages --C++</PARA>
</FOOTNOTE>
</MEMBER>
</SIMPLELIST>
</PARA>
<SECT2>
<TITLE>18.4 C++ Dynamic Memory Managment</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libstdcxx - 18.4 C++ Dynamic Memory Managment Function Interfaces</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>operator delete&lsqb;](void*)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>operator new&lsqb;](unsigned)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>operator delete&lsqb;](void*, nothrow_t const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>operator new&lsqb;](unsigned, nothrow_t const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>operator delete(void*)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>operator new(unsigned)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>operator delete(void*, nothrow_t const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>operator new(unsigned, nothrow_t const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>18.5 C++ Type identification</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libstdcxx - 18.5 C++ Type identification Function Interfaces</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>type_info::__do_catch(type_info const*, void**, unsigned) const(GLIBCPP_3.2)</ENTRY>
<ENTRY>bad_cast::~bad_cast &lsqb;in-charge deleting]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const(GLIBCPP_3.2)</ENTRY>
<ENTRY>bad_cast::~bad_cast &lsqb;in-charge]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>type_info::__is_pointer_p() const(GLIBCPP_3.2)</ENTRY>
<ENTRY>bad_cast::~bad_cast &lsqb;not-in-charge]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>type_info::__is_function_p() const(GLIBCPP_3.2)</ENTRY>
<ENTRY>type_info::~type_info &lsqb;in-charge deleting]()(GLIBCPP_3.2)</ENTRY>
</ROW>
<ROW>
<ENTRY>bad_typeid::~bad_typeid &lsqb;in-charge deleting]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>type_info::~type_info &lsqb;in-charge]()(GLIBCPP_3.2)</ENTRY>
</ROW>
<ROW>
<ENTRY>bad_typeid::~bad_typeid &lsqb;in-charge]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>type_info::~type_info &lsqb;not-in-charge]()(GLIBCPP_3.2)</ENTRY>
</ROW>
<ROW>
<ENTRY>bad_typeid::~bad_typeid &lsqb;not-in-charge]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>__throw_bad_typeid()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>18.6 C++ Exception handling</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libstdcxx - 18.6 C++ Exception handling Function Interfaces</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>unexpected()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>uncaught_exception()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>set_unexpected(void (*)())(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>terminate()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>18.6.1 C++ Class exception</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libstdcxx - 18.6.1 C++ Class exception Function Interfaces</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>exception::what() const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>exception::~exception &lsqb;in-charge]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>exception::~exception &lsqb;in-charge deleting]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>exception::~exception &lsqb;not-in-charge]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>18.6.2.1 C++ Class bad_exception</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libstdcxx - 18.6.2.1 C++ Class bad_exception Function Interfaces</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>domain_error::~domain_error &lsqb;in-charge deleting]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>bad_exception::~bad_exception &lsqb;in-charge]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>bad_exception::~bad_exception &lsqb;in-charge deleting]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>bad_exception::~bad_exception &lsqb;not-in-charge]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>19.1 Exception classes</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libstdcxx - 19.1 Exception classes Function Interfaces</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>logic_error::what() const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>out_of_range::~out_of_range &lsqb;in-charge deleting]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>logic_error::logic_error&lsqb;in-charge](basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>out_of_range::~out_of_range &lsqb;in-charge]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>logic_error::logic_error&lsqb;not-in-charge](basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>runtime_error::runtime_error&lsqb;in-charge](basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>logic_error::~logic_error &lsqb;in-charge deleting]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>runtime_error::runtime_error&lsqb;not-in-charge](basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>logic_error::~logic_error &lsqb;in-charge]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>runtime_error::~runtime_error &lsqb;in-charge deleting]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>logic_error::~logic_error &lsqb;not-in-charge]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>runtime_error::~runtime_error &lsqb;in-charge]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>range_error::range_error&lsqb;in-charge](basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>runtime_error::~runtime_error &lsqb;not-in-charge]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>range_error::range_error&lsqb;not-in-charge](basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>overflow_error::overflow_error&lsqb;in-charge](basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>range_error::~range_error &lsqb;in-charge deleting]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>overflow_error::overflow_error&lsqb;not-in-charge](basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>range_error::~range_error &lsqb;in-charge]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>overflow_error::~overflow_error &lsqb;in-charge deleting]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>domain_error::domain_error&lsqb;in-charge](basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>overflow_error::~overflow_error &lsqb;in-charge]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>domain_error::domain_error&lsqb;not-in-charge](basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>underflow_error::underflow_error&lsqb;in-charge](basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>domain_error::~domain_error &lsqb;in-charge]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>underflow_error::underflow_error&lsqb;not-in-charge](basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>length_error::length_error&lsqb;in-charge](basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>underflow_error::~underflow_error &lsqb;in-charge deleting]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>length_error::length_error&lsqb;not-in-charge](basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>underflow_error::~underflow_error &lsqb;in-charge]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>length_error::~length_error &lsqb;in-charge deleting]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>invalid_argument::invalid_argument&lsqb;in-charge](basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>length_error::~length_error &lsqb;in-charge]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>invalid_argument::invalid_argument&lsqb;not-in-charge](basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>out_of_range::out_of_range&lsqb;in-charge](basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>invalid_argument::~invalid_argument &lsqb;in-charge deleting]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>out_of_range::out_of_range&lsqb;not-in-charge](basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>invalid_argument::~invalid_argument &lsqb;in-charge]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>21.3.1 C++ Class basic_string constructors</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libstdcxx - 21.3.1 C++ Class basic_string constructors Function Interfaces</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> >::basic_string&lsqb;in-charge](wchar_t const*, allocator&lt;wchar_t> const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> >::basic_string&lsqb;not-in-charge](basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> > const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> >::basic_string&lsqb;in-charge](wchar_t const*, unsigned, allocator&lt;wchar_t> const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> >::basic_string&lsqb;not-in-charge](basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> > const&, unsigned, unsigned)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> >::basic_string&lsqb;in-charge](allocator&lt;wchar_t> const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> >::basic_string&lsqb;not-in-charge](basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> > const&, unsigned, unsigned, allocator&lt;wchar_t> const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> >::basic_string&lsqb;in-charge](basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> > const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> >::basic_string&lsqb;not-in-charge](unsigned, wchar_t, allocator&lt;wchar_t> const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> >::basic_string&lsqb;in-charge](basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> > const&, unsigned, unsigned)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> >::basic_string&lsqb;not-in-charge]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> >::basic_string&lsqb;in-charge](basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> > const&, unsigned, unsigned, allocator&lt;wchar_t> const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> >::basic_string&lsqb;not-in-charge]&lt;__gnu_cxx::__normal_iterator&lt;wchar_t const*, basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> > > >(__gnu_cxx::__normal_iterator&lt;wchar_t const*, basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> > >, __gnu_cxx::__normal_iterator&lt;wchar_t const*, basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> > >, allocator&lt;wchar_t> const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> >::basic_string&lsqb;in-charge](unsigned, wchar_t, allocator&lt;wchar_t> const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> >::basic_string&lsqb;not-in-charge]&lt;__gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> > > >(__gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> > >, __gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> > >, allocator&lt;wchar_t> const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> >::basic_string&lsqb;in-charge]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> >::basic_string&lsqb;not-in-charge]&lt;wchar_t const*>(wchar_t const*, wchar_t const*, allocator&lt;wchar_t> const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> >::basic_string&lsqb;in-charge]&lt;__gnu_cxx::__normal_iterator&lt;wchar_t const*, basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> > > >(__gnu_cxx::__normal_iterator&lt;wchar_t const*, basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> > >, __gnu_cxx::__normal_iterator&lt;wchar_t const*, basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> > >, allocator&lt;wchar_t> const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> >::basic_string&lsqb;not-in-charge]&lt;wchar_t*>(wchar_t*, wchar_t*, allocator&lt;wchar_t> const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> >::basic_string&lsqb;in-charge]&lt;__gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> > > >(__gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> > >, __gnu_cxx::__normal_iterator&lt;wchar_t*, basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> > >, allocator&lt;wchar_t> const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> >::~basic_string &lsqb;in-charge]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> >::basic_string&lsqb;in-charge]&lt;wchar_t const*>(wchar_t const*, wchar_t const*, allocator&lt;wchar_t> const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> >::~basic_string &lsqb;not-in-charge]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> >::basic_string&lsqb;in-charge]&lt;wchar_t*>(wchar_t*, wchar_t*, allocator&lt;wchar_t> const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> >::operator=(wchar_t const*)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> >::basic_string&lsqb;not-in-charge](wchar_t const*, allocator&lt;wchar_t> const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> >::operator=(basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> > const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> >::basic_string&lsqb;not-in-charge](wchar_t const*, unsigned, allocator&lt;wchar_t> const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> >::operator=(wchar_t)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>basic_string&lt;wchar_t, char_traits&lt;wchar_t>, allocator&lt;wchar_t> >::basic_string&lsqb;not-in-charge](allocator&lt;wchar_t> const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>21.3.2 C++ Class basic_string iterator support</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libstdcxx - 21.3.2 C++ Class basic_string iterator support Function Interfaces</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::end() const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::begin() const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::rend() const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::rbegin() const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>21.3.3 C++ Class basic_string capacity</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libstdcxx - 21.3.3 C++ Class basic_string capacity Function Interfaces</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::size() const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::resize(unsigned)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::length() const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::resize(unsigned, char)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::max_size() const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::reserve(unsigned)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::clear()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>21.3.4 C++ Class basic_string element access</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libstdcxx - 21.3.4 C++ Class basic_string element access Function Interfaces</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::at(unsigned) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::operator&lsqb;](unsigned)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>21.3.5 C++ Class basic_string modifiers</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libstdcxx - 21.3.5 C++ Class basic_string modifiers Function Interfaces</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::copy(char*, unsigned, unsigned) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::insert(unsigned, basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::swap(basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::insert(unsigned, basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&, unsigned, unsigned)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::erase(__gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > >)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::insert(unsigned, unsigned, char)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::erase(__gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > >, __gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > >)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::replace(__gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > >, __gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > >, __gnu_cxx::__normal_iterator&lt;char const*, basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > >, __gnu_cxx::__normal_iterator&lt;char const*, basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > >)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::erase(unsigned, unsigned)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::replace(__gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > >, __gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > >, char const*)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::append(char const*)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::replace(__gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > >, __gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > >, char const*, char const*)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::append(char const*, unsigned)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::replace(__gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > >, __gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > >, char const*, unsigned)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::append(basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::replace(__gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > >, __gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > >, basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::append(basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&, unsigned, unsigned)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::replace(__gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > >, __gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > >, char*, char*)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::append(unsigned, char)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::replace(__gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > >, __gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > >, __gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > >, __gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > >)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::assign(char const*)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::replace(__gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > >, __gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > >, unsigned, char)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::assign(char const*, unsigned)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::replace(unsigned, unsigned, char const*)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::assign(basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::replace(unsigned, unsigned, char const*, unsigned)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::assign(basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&, unsigned, unsigned)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::replace(unsigned, unsigned, basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::assign(unsigned, char)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::replace(unsigned, unsigned, basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&, unsigned, unsigned)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::insert(__gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > >, char)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::replace(unsigned, unsigned, unsigned, char)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::insert(__gnu_cxx::__normal_iterator&lt;char*, basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > >, unsigned, char)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::operator=(char const*)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::insert(unsigned, char const*)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::operator=(basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::insert(unsigned, char const*, unsigned)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::operator=(char)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>21.3.6 C++ Class basic_string string operations</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libstdcxx - 21.3.6 C++ Class basic_string string operations Function Interfaces</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::find_last_of(char const*, unsigned) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::find(char const*, unsigned, unsigned) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::find_last_of(char const*, unsigned, unsigned) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::find(basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&, unsigned) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::find_last_of(basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&, unsigned) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::find(char, unsigned) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::find_last_of(char, unsigned) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::c_str() const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::find_first_of(char const*, unsigned) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::rfind(char const*, unsigned) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::find_first_of(char const*, unsigned, unsigned) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::rfind(char const*, unsigned, unsigned) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::find_first_of(basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&, unsigned) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::rfind(basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&, unsigned) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::find_first_of(char, unsigned) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::rfind(char, unsigned) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::get_allocator() const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::substr(unsigned, unsigned) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::find_first_not_of(char const*, unsigned) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::compare(char const*) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::find_first_not_of(char const*, unsigned, unsigned) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::compare(basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::find_first_not_of(basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&, unsigned) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::compare(unsigned, unsigned, char const*) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::find_first_not_of(char, unsigned) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::compare(unsigned, unsigned, char const*, unsigned) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::data() const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::compare(unsigned, unsigned, basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::find(char const*, unsigned) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> >::compare(unsigned, unsigned, basic_string&lt;char, char_traits&lt;char>, allocator&lt;char> > const&, unsigned, unsigned) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>21.3.7 C++ class basic_string non-member functions</TITLE>
<PARA>
</PARA>
</SECT2>
<SECT2>
<TITLE>22.1.1 C++ Class locale</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libstdcxx - 22.1.1 C++ Class locale Function Interfaces</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>locale::name() const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>locale::locale&lsqb;in-charge](locale const&, locale const&, unsigned)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>locale::operator==(locale const&) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>locale::locale&lsqb;in-charge]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>locale::id::id&lsqb;in-charge]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>locale::locale&lsqb;not-in-charge](char const*)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>locale::id::id&lsqb;not-in-charge]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>locale::locale&lsqb;not-in-charge](locale::_Impl*)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>locale::global(locale const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>locale::locale&lsqb;not-in-charge](locale const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>locale::classic()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>locale::locale&lsqb;not-in-charge](locale const&, char const*, unsigned)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>locale::locale&lsqb;in-charge](char const*)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>locale::locale&lsqb;not-in-charge](locale const&, locale const&, unsigned)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>locale::locale&lsqb;in-charge](locale::_Impl*)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>locale::locale&lsqb;not-in-charge]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>locale::locale&lsqb;in-charge](locale const&)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>locale::~locale &lsqb;in-charge]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>locale::locale&lsqb;in-charge](locale const&, char const*, unsigned)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>locale::~locale &lsqb;not-in-charge]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>22.2.1.3 C++ ctype specializations ctype&lt;char></TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libstdcxx - 22.2.1.3 C++ ctype specializations ctype&lt;char> Function Interfaces</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>ctype&lt;char>::do_scan_is(unsigned short, char const*, char const*) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>ctype&lt;char>::do_narrow(char const*, char const*, char, char*) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>ctype&lt;char>::do_tolower(char*, char const*) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>ctype&lt;char>::do_narrow(char, char) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>ctype&lt;char>::do_tolower(char) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>ctype&lt;char>::classic_table()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>ctype&lt;char>::do_toupper(char*, char const*) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>ctype&lt;char>::ctype&lsqb;in-charge](__locale_struct*, unsigned short const*, bool, unsigned)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>ctype&lt;char>::do_toupper(char) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>ctype&lt;char>::ctype&lsqb;in-charge](unsigned short const*, bool, unsigned)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>ctype&lt;char>::do_scan_not(unsigned short, char const*, char const*) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>ctype&lt;char>::ctype&lsqb;not-in-charge](__locale_struct*, unsigned short const*, bool, unsigned)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>ctype&lt;char>::do_is(char const*, char const*, unsigned short*) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>ctype&lt;char>::ctype&lsqb;not-in-charge](unsigned short const*, bool, unsigned)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>ctype&lt;char>::do_is(unsigned short, char) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>ctype&lt;char>::~ctype &lsqb;in-charge deleting]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>ctype&lt;char>::do_widen(char const*, char const*, char*) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>ctype&lt;char>::~ctype &lsqb;in-charge]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>ctype&lt;char>::do_widen(char) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>ctype&lt;char>::~ctype &lsqb;not-in-charge]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<TABLE>
<TITLE>libstdcxx - 22.2.1.3 C++ ctype specializations ctype&lt;char> Data Interfaces</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>ctype&lt;char>::id(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>22.2.1.3 C++ ctype specializations ctype&lt;wchar_t></TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libstdcxx - 22.2.1.3 C++ ctype specializations ctype&lt;wchar_t> Function Interfaces</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>ctype&lt;wchar_t>::do_scan_is(unsigned short, wchar_t const*, wchar_t const*) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>ctype&lt;wchar_t>::do_widen(char) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>ctype&lt;wchar_t>::do_tolower(wchar_t*, wchar_t const*) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>ctype&lt;wchar_t>::do_narrow(wchar_t const*, wchar_t const*, char, char*) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>ctype&lt;wchar_t>::do_tolower(wchar_t) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>ctype&lt;wchar_t>::do_narrow(wchar_t, char) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>ctype&lt;wchar_t>::do_toupper(wchar_t*, wchar_t const*) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>ctype&lt;wchar_t>::ctype&lsqb;in-charge](__locale_struct*, unsigned)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>ctype&lt;wchar_t>::do_toupper(wchar_t) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>ctype&lt;wchar_t>::ctype&lsqb;in-charge](unsigned)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>ctype&lt;wchar_t>::do_scan_not(unsigned short, wchar_t const*, wchar_t const*) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>ctype&lt;wchar_t>::ctype&lsqb;not-in-charge](__locale_struct*, unsigned)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>ctype&lt;wchar_t>::_M_convert_to_wmask(unsigned short) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>ctype&lt;wchar_t>::ctype&lsqb;not-in-charge](unsigned)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>ctype&lt;wchar_t>::do_is(wchar_t const*, wchar_t const*, unsigned short*) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>ctype&lt;wchar_t>::~ctype &lsqb;in-charge deleting]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>ctype&lt;wchar_t>::do_is(unsigned short, wchar_t) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>ctype&lt;wchar_t>::~ctype &lsqb;in-charge]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>ctype&lt;wchar_t>::do_widen(char const*, char const*, wchar_t*) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>ctype&lt;wchar_t>::~ctype &lsqb;not-in-charge]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<TABLE>
<TITLE>libstdcxx - 22.2.1.3 C++ ctype specializations ctype&lt;wchar_t> Data Interfaces</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>ctype&lt;wchar_t>::id(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>22.2.1.4 C++ class ctype_byname&lt;char></TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libstdcxx - 22.2.1.4 C++ class ctype_byname&lt;char> Function Interfaces</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>ctype_byname&lt;char>::ctype_byname&lsqb;in-charge](char const*, unsigned)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>ctype_byname&lt;char>::ctype_byname&lsqb;not-in-charge](char const*, unsigned)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<TABLE>
<TITLE>libstdcxx - 22.2.1.4 C++ class ctype_byname&lt;char> Data Interfaces</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>ctype_byname&lt;char>::~ctype_byname &lsqb;in-charge deleting]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>ctype_byname&lt;char>::~ctype_byname &lsqb;not-in-charge]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>ctype_byname&lt;char>::~ctype_byname &lsqb;in-charge]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>22.2.1.4 C++ class ctype_byname&lt;wchar_t></TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libstdcxx - 22.2.1.4 C++ class ctype_byname&lt;wchar_t> Function Interfaces</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>ctype_byname&lt;wchar_t>::ctype_byname&lsqb;in-charge](char const*, unsigned)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>ctype_byname&lt;wchar_t>::~ctype_byname &lsqb;in-charge]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>ctype_byname&lt;wchar_t>::ctype_byname&lsqb;not-in-charge](char const*, unsigned)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>ctype_byname&lt;wchar_t>::~ctype_byname &lsqb;not-in-charge]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>ctype_byname&lt;wchar_t>::~ctype_byname &lsqb;in-charge deleting]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>22.2.1.5 C++ Class codecvt&lt;char></TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libstdcxx - 22.2.1.5 C++ Class codecvt&lt;char> Function Interfaces</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>codecvt&lt;char, char, __mbstate_t>::do_unshift(__mbstate_t&, char*, char*, char*&) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>codecvt&lt;char, char, __mbstate_t>::do_length(__mbstate_t const&, char const*, char const*, unsigned) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>codecvt&lt;char, char, __mbstate_t>::do_encoding() const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>codecvt&lt;char, char, __mbstate_t>::codecvt&lsqb;in-charge](unsigned)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>codecvt&lt;char, char, __mbstate_t>::do_max_length() const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>codecvt&lt;char, char, __mbstate_t>::codecvt&lsqb;not-in-charge](unsigned)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>codecvt&lt;char, char, __mbstate_t>::do_always_noconv() const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>codecvt&lt;char, char, __mbstate_t>::~codecvt &lsqb;in-charge deleting]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>codecvt&lt;char, char, __mbstate_t>::do_in(__mbstate_t&, char const*, char const*, char const*&, char*, char*, char*&) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>codecvt&lt;char, char, __mbstate_t>::~codecvt &lsqb;in-charge]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>codecvt&lt;char, char, __mbstate_t>::do_out(__mbstate_t&, char const*, char const*, char const*&, char*, char*, char*&) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>codecvt&lt;char, char, __mbstate_t>::~codecvt &lsqb;not-in-charge]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<TABLE>
<TITLE>libstdcxx - 22.2.1.5 C++ Class codecvt&lt;char> Data Interfaces</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>codecvt&lt;char, char, __mbstate_t>::id(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>22.2.1.5 C++ Class codecvt&lt;wchar_t></TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libstdcxx - 22.2.1.5 C++ Class codecvt&lt;wchar_t> Function Interfaces</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>codecvt&lt;wchar_t, char, __mbstate_t>::do_unshift(__mbstate_t&, char*, char*, char*&) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>codecvt&lt;wchar_t, char, __mbstate_t>::do_length(__mbstate_t const&, char const*, char const*, unsigned) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>codecvt&lt;wchar_t, char, __mbstate_t>::do_encoding() const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>codecvt&lt;wchar_t, char, __mbstate_t>::codecvt&lsqb;in-charge](unsigned)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>codecvt&lt;wchar_t, char, __mbstate_t>::do_max_length() const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>codecvt&lt;wchar_t, char, __mbstate_t>::codecvt&lsqb;not-in-charge](unsigned)(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>codecvt&lt;wchar_t, char, __mbstate_t>::do_always_noconv() const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>codecvt&lt;wchar_t, char, __mbstate_t>::~codecvt &lsqb;in-charge deleting]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>codecvt&lt;wchar_t, char, __mbstate_t>::do_in(__mbstate_t&, char const*, char const*, char const*&, wchar_t*, wchar_t*, wchar_t*&) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>codecvt&lt;wchar_t, char, __mbstate_t>::~codecvt &lsqb;in-charge]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
<ROW>
<ENTRY>codecvt&lt;wchar_t, char, __mbstate_t>::do_out(__mbstate_t&, wchar_t const*, wchar_t const*, wchar_t const*&, char*, char*, char*&) const(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY>codecvt&lt;wchar_t, char, __mbstate_t>::~codecvt &lsqb;not-in-charge]()(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<TABLE>
<TITLE>libstdcxx - 22.2.1.5 C++ Class codecvt&lt;wchar_t> Data Interfaces</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>codecvt&lt;wchar_t, char, __mbstate_t>::id(GLIBCPP_3.2)<FOOTNOTEREF  LINKEND="std-231-65"></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>22.2.2.1 C++ Class num_get&lt;char></TITLE>
<PARA>
</PARA>
</SECT2>
<SECT2>
<TITLE>22.2.2.1 C++ Class num_get&lt;wchar_t></TITLE>
<PARA>
</PARA>
</SECT2>
</SECT1>
<!-- End of text generated from database -->
<!--    by $Header: /cvsroot/lsb/spec/mklibspec,v 1.49 2002/09/30 19:50:36 anderson Exp 0 -->

<!-- Start of text generated from database -->
<!-- generated from the LSB specification database -->
<!--    by $Header: /cvsroot/lsb/spec/mklibspec,v 1.49 2002/09/30 19:50:36 anderson Exp 0 -->
<!--    at Fri Oct  4 12:02:11 2002 -->
<SECT1 ID=libpam>
<TITLE>Interfaces for libpam</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libpam Definition</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Library:</ENTRY>
<ENTRY>libpam</ENTRY>
</ROW>
<ROW>
<ENTRY>SONAME:</ENTRY>
<ENTRY>libpam.so.0</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The behavior of the interfaces in this library is specified by the following standards.<SIMPLELIST COLUMNS=1>
<MEMBER>
Linux Standard Base<FOOTNOTE ID="std-233-10">
<PARA>
Linux Standard Base</PARA>
</FOOTNOTE>
</MEMBER>
</SIMPLELIST>
</PARA>
<SECT2>
<!--libgroup-->
<TITLE>Pluggable Authentication API</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libpam - Pluggable Authentication API Function Interfaces</TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW>
<ENTRY>pam_acct_mgmt<FOOTNOTEREF LINKEND="std-233-10"></ENTRY>
<ENTRY>pam_close_session<FOOTNOTEREF LINKEND="std-233-10"></ENTRY>
<ENTRY>pam_get_item<FOOTNOTEREF LINKEND="std-233-10"></ENTRY>
<ENTRY>pam_set_item<FOOTNOTEREF LINKEND="std-233-10"></ENTRY>
<ENTRY>pam_strerror<FOOTNOTEREF LINKEND="std-233-10"></ENTRY>
</ROW>
<ROW>
<ENTRY>pam_authenticate<FOOTNOTEREF LINKEND="std-233-10"></ENTRY>
<ENTRY>pam_end<FOOTNOTEREF LINKEND="std-233-10"></ENTRY>
<ENTRY>pam_getenvlist<FOOTNOTEREF LINKEND="std-233-10"></ENTRY>
<ENTRY>pam_setcred<FOOTNOTEREF LINKEND="std-233-10"></ENTRY>
<ENTRY></ENTRY>
</ROW>
<ROW>
<ENTRY>pam_chauthtok<FOOTNOTEREF LINKEND="std-233-10"></ENTRY>
<ENTRY>pam_fail_delay<FOOTNOTEREF LINKEND="std-233-10"></ENTRY>
<ENTRY>pam_open_session<FOOTNOTEREF LINKEND="std-233-10"></ENTRY>
<ENTRY>pam_start<FOOTNOTEREF LINKEND="std-233-10"></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
</SECT1>
<SECT1 ID=libpam-ddefs>
<TITLE>Data Definitions for libpam</TITLE>
<PARA>
This section contains standard data definitions that describe system data. These definitions are organized into groups that correspond to system headers. This convention is used as a convenience for the reader, and does not imply the existence of these headers, or their content.</PARA>
<PARA>
ISO C serves as the LSB reference programming language, and data definitions are specified in ISO C format. The C language is used here as a convenient notation. Using a C language description of these data objects does not preclude their use by other programming languages.</PARA>
<SECT2>
<TITLE>security/pam_appl.h</TITLE>
<PARA>
</PARA>
<SCREEN>






typedef struct pam_handle pam_handle_t;
struct pam_message
{
  int msg_style;
  const char *msg;
}
 ;
struct pam_response
{
  char *resp;
  int resp_retcode;
}
 ;


struct pam_conv
{
  int (*conv) (int num_msg, const struct pam_message * *msg,
	       struct pam_response * *resp, void *appdata_ptr);
  void *appdata_ptr;
}
 ;
#define PAM_PROMPT_ECHO_OFF	1
#define PAM_PROMPT_ECHO_ON	2
#define PAM_ERROR_MSG	3
#define PAM_TEXT_INFO	4



#define PAM_SERVICE	1
#define PAM_USER	2
#define PAM_TTY	3
#define PAM_RHOST	4
#define PAM_CONV	5
#define PAM_RUSER	8
#define PAM_USER_PROMPT	9



#define PAM_SUCCESS	0
#define PAM_OPEN_ERR	1
#define PAM_USER_UNKNOWN	10
#define PAM_MAXTRIES	11
#define PAM_NEW_AUTHTOK_REQD	12
#define PAM_ACCT_EXPIRED	13
#define PAM_SESSION_ERR	14
#define PAM_CRED_UNAVAIL	15
#define PAM_CRED_EXPIRED	16
#define PAM_CRED_ERR	17
#define PAM_CONV_ERR	19
#define PAM_SYMBOL_ERR	2
#define PAM_AUTHTOK_ERR	20
#define PAM_AUTHTOK_RECOVER_ERR	21
#define PAM_AUTHTOK_LOCK_BUSY	22
#define PAM_AUTHTOK_DISABLE_AGING	23
#define PAM_TRY_AGAIN	24
#define PAM_ABORT	26
#define PAM_AUTHTOKEN_REQD	27
#define PAM_AUTHTOK_EXPIRED	27
#define PAM_BAD_ITEM	29
#define PAM_SERVICE_ERR	3
#define PAM_SYSTEM_ERR	4
#define PAM_BUF_ERR	5
#define PAM_PERM_DENIED	6
#define PAM_AUTH_ERR	7
#define PAM_CRED_INSUFFICIENT	8
#define PAM_AUTHINFO_UNAVAIL	9



#define PAM_DISALLOW_NULL_AUTHTOK	0x0001U
#define PAM_ESTABLISH_CRED	0x0002U
#define PAM_DELETE_CRED	0x0004U
#define PAM_REINITIALIZE_CRED	0x0008U
#define PAM_REFRESH_CRED	0x0010U
#define PAM_CHANGE_EXPIRED_AUTHTOK	0x0020U
#define PAM_SILENT	0x8000U
</SCREEN>
</SECT2>
</SECT1>
<SECT1 ID=libpamman>
<TITLE>Interfaces Definitions for libpam</TITLE>
<PARA>
</PARA>
<REFENTRY ID="baselib-pam-acct-mgmt"> <REFMETA>
<REFENTRYTITLE>pam_acct_mgmt</REFENTRYTITLE>
<REFMISCINFO>Base Libraries</REFMISCINFO>
</REFMETA> 
<REFNAMEDIV>
<REFNAME>pam_acct_mgmt</REFNAME>
<REFPURPOSE>
establish the status of a user's account
</REFPURPOSE>
</REFNAMEDIV>
<REFSYNOPSISDIV>
<REFSYNOPSISDIVINFO>
<DATE>27 September 2002</DATE>
</REFSYNOPSISDIVINFO>
<SYNOPSIS>
#include &lt;security/pam_appl.h>

extern int pam_acct_mgmt(pam_handle_t *pamh, int flags);
</SYNOPSIS>
</REFSYNOPSISDIV>
<REFSECT1>
<REFSECT1INFO>
<DATE>27 September 2002</DATE>
</REFSECT1INFO>
<TITLE>Description
</TITLE>
<PARA>
  This function is typically called after the user has been
  authenticated.  It establishes whether the user's account is healthy.
  That is to say, whether the user's account is still active and whether
  the user is permitted to gain access to the system at this time.
</PARA>
<PARA>
  Valid flags, any one of which, may be logically OR'd with
  <CONSTANT>PAM_SILENT</CONSTANT>, and are the same as those applicable to
  the <PARAMETER>flags</PARAMETER> argument of pam_authenticate(3).
</PARA>
</REFSECT1>

<REFSECT1>
<TITLE>RETURN VALUE</TITLE>
<VARIABLELIST>
<VARLISTENTRY>
<TERM>
PAM_SUCCESS
</TERM>
<LISTITEM>
<PARA>
Indicates success.
</PARA>
</LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>
PAM_AUTHTOKEN_REQD
</TERM>
<LISTITEM>
<PARA>
       The user is valid but their authentication token has expired.
        The correct response to this return-value is to require that the
        user satisfies the pam_chauthtok() function before obtaining
        service.  It may not be possible for some applications to do
        this.  In such cases, the user should be denied access until
        such time as they can update their password.
</PARA>
</LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>
PAM_ACCT_EXPIRED
</TERM>
<LISTITEM>
<PARA>
The user is no longer permitted access to the system.
</PARA>
</LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>
PAM_AUTH_ERR
</TERM>
<LISTITEM>
<PARA>
There was an authentication error.
</PARA>
</LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>
PAM_PERM_DENIED
</TERM>
<LISTITEM>
<PARA>
The user is not permitted to gain access at this time.
</PARA>
</LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>
PAM_USER_UNKNOWN
</TERM>
<LISTITEM>
<PARA>
The user is not known to a module's account management component.
</PARA>
</LISTITEM>
</VARLISTENTRY>
</VARIABLELIST>
</REFSECT1>
<REFSECT1>
<TITLE>ERRORS</TITLE>
<PARA>
May be translated to text with pam_strerror(3).
</PARA>
</REFSECT1>
</REFENTRY>

<!--
Portions taken from the Linux-PAM Application Guide which contains
the following Copyright message.

    Copyright (C) Andrew G. Morgan 1996-9.  All rights reserved.

Redistribution and use in source (sgml) and binary (derived) forms,
with or without modification, are permitted provided that the
following conditions are met:

1. Redistributions of source code must retain the above copyright
   notice, and the entire permission notice in its entirety,
   including the disclaimer of warranties.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.

3. The name of the author may not be used to endorse or promote
   products derived from this software without specific prior
   written permission.

ALTERNATIVELY, this product may be distributed under the terms of the
GNU General Public License, in which case the provisions of the GNU
GPL are required INSTEAD OF the above restrictions.  (This clause is
necessary due to a potential bad interaction between the GNU GPL and
the restrictions contained in a BSD-style copyright.)

THIS SOFTWARE IS PROVIDED `AS IS' AND ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
DAMAGE.

 -->


<REFENTRY ID="baselib-pam-authenticate"> <REFMETA>
<REFENTRYTITLE>pam_authenticate</REFENTRYTITLE>
<REFMISCINFO>Base Libraries</REFMISCINFO>
</REFMETA> 
<REFNAMEDIV>
<REFNAME>pam_authenticate</REFNAME>
<REFPURPOSE>
(re)set the value of an item
</REFPURPOSE>
</REFNAMEDIV>
<REFSYNOPSISDIV>
<REFSYNOPSISDIVINFO>
<DATE>27 September 2002</DATE>
</REFSYNOPSISDIVINFO>
<SYNOPSIS>
#include &lt;security/pam_appl.h>

extern int pam_authenticate(pam_handle_t *pamh, int flags);
</SYNOPSIS>
</REFSYNOPSISDIV>
<REFSECT1>
<REFSECT1INFO>
<DATE>27 September 2002</DATE>
</REFSECT1INFO>
<TITLE>Description
</TITLE>
<PARA>
  This function serves as an interface to the authentication mechanisms
  of the loaded modules.  The single optional flag, which may be
  logically OR'd with <CONSTANT>PAM_SILENT</CONSTANT>, takes the following
  value:
</PARA>
<VARIABLELIST>
<VARLISTENTRY>
<TERM>
PAM_DISALLOW_NULL_AUTHTOK
</TERM>
<LISTITEM>
<PARA>
Instruct the authentication modules to return <CONSTANT>PAM_AUTH_ERR</CONSTANT>
if the user does not have a registered authorization token.
</PARA>
</LISTITEM>
</VARLISTENTRY>
</VARIABLELIST>
</REFSECT1>

<REFSECT1>
<TITLE>RETURN VALUE</TITLE>
<VARIABLELIST>
<VARLISTENTRY>
<TERM>
PAM_SUCCESS
</TERM>
<LISTITEM>
<PARA>
Indicates success.
</PARA>
</LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>
PAM_AUTH_ERR
</TERM>
<LISTITEM>
<PARA>
The user was not authenticated.
</PARA>
</LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>
PAM_CRED_INSUFFICIENT
</TERM>
<LISTITEM>
<PARA>
For some reason the application does not have sufficient credentials to
authenticate the user.
</PARA>
</LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>
PAM_AUTHINFO_UNAVAIL
</TERM>
<LISTITEM>
<PARA>
The modules were not able to access the authentication information. This
might be due to a network or hardware failure etc.
</PARA>
</LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>
PAM_USER_UNKNOWN
</TERM>
<LISTITEM>
<PARA>
The supplied username is not known to the authentication service.
</PARA>
</LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>
PAM_MAXTRIES
</TERM>
<LISTITEM>
<PARA>
One or more of the authentication modules has reached its limit of tries
authenticating the user. Do not try again.
</PARA>
</LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>
PAM_ABORT
</TERM>
<LISTITEM>
<PARA>
One or more of the authentication modules failed to load.
</PARA>
</LISTITEM>
</VARLISTENTRY>
</VARIABLELIST>
</REFSECT1>
<REFSECT1>
<TITLE>ERRORS</TITLE>
<PARA>
May be translated to text with pam_strerror(3).
</PARA>
</REFSECT1>
</REFENTRY>

<!--
Portions taken from the Linux-PAM Application Guide which contains
the following Copyright message.

    Copyright (C) Andrew G. Morgan 1996-9.  All rights reserved.

Redistribution and use in source (sgml) and binary (derived) forms,
with or without modification, are permitted provided that the
following conditions are met:

1. Redistributions of source code must retain the above copyright
   notice, and the entire permission notice in its entirety,
   including the disclaimer of warranties.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.

3. The name of the author may not be used to endorse or promote
   products derived from this software without specific prior
   written permission.

ALTERNATIVELY, this product may be distributed under the terms of the
GNU General Public License, in which case the provisions of the GNU
GPL are required INSTEAD OF the above restrictions.  (This clause is
necessary due to a potential bad interaction between the GNU GPL and
the restrictions contained in a BSD-style copyright.)

THIS SOFTWARE IS PROVIDED `AS IS' AND ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
DAMAGE.

 -->


<REFENTRY ID="baselib-pam-chauthtok"> <REFMETA>
<REFENTRYTITLE>pam_chauthtok</REFENTRYTITLE>
<REFMISCINFO>Base Libraries</REFMISCINFO>
</REFMETA> 
<REFNAMEDIV>
<REFNAME>pam_chauthtok</REFNAME>
<REFPURPOSE>
change the authentication token for a given user
</REFPURPOSE>
</REFNAMEDIV>
<REFSYNOPSISDIV>
<REFSYNOPSISDIVINFO>
<DATE>27 September 2002</DATE>
</REFSYNOPSISDIVINFO>
<SYNOPSIS>
#include &lt;security/pam_appl.h>

extern int pam_chauthtok(pam_handle_t *pamh, const int flags);
</SYNOPSIS>
</REFSYNOPSISDIV>
<REFSECT1>
<REFSECT1INFO>
<DATE>27 September 2002</DATE>
</REFSECT1INFO>
<TITLE>Description
</TITLE>
<PARA>
  This function is used to change the authentication token for a given
  user as indicated by the state associated with the handle,
  <PARAMETER>pamh</PARAMETER>.
</PARA>
<PARA>
The single optional flag, which may be logically OR'd with
<CONSTANT>PAM_SILENT</CONSTANT> takes the following value:
</PARA>
<VARIABLELIST>
<VARLISTENTRY>
<TERM>
PAM_CHANGE_EXPIRED_AUTHTOK
</TERM>
<LISTITEM>
<PARA>
This flag indicates to the modules that the users authentication token
should only be changed if it has expired.
</PARA>
</LISTITEM>
</VARLISTENTRY>
</VARIABLELIST>
</REFSECT1>

<REFSECT1>
<TITLE>RETURN VALUE</TITLE>
<VARIABLELIST>
<VARLISTENTRY>
<TERM>
PAM_SUCCESS
</TERM>
<LISTITEM>
<PARA>
Indicates success.
</PARA>
</LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>
PAM_AUTHTOK_ERR
</TERM>
<LISTITEM>
<PARA>
A module was unable to obtain the new authentication token.
</PARA>
</LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>
PAM_AUTHTOK_RECOVER_ERR
</TERM>
<LISTITEM>
<PARA>
A module was unable to obtain the old authentication token.
</PARA>
</LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>
PAM_AUTHTOK_LOCK_BUSY
</TERM>
<LISTITEM>
<PARA>
One or more of the modules was unable to change the authentication token
since it is currently locked.
</PARA>
</LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>
PAM_AUTHTOK_DISABLE_AGING
</TERM>
<LISTITEM>
<PARA>
Authentication token aging has been disabled for at least one of the modules.
</PARA>
</LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>
PAM_PERM_DENIED
</TERM>
<LISTITEM>
<PARA>
Permission denied.
</PARA>
</LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>
PAM_TRY_AGAIN
</TERM>
<LISTITEM>
<PARA>
Not all of the modules were in a position to update the authentication
token(s). In such a case none of the user's authentication tokens are updated.
</PARA>
</LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>
PAM_USER_UNKNOWN
</TERM>
<LISTITEM>
<PARA>
The user is not known to the authentication token changing service.
</PARA>
</LISTITEM>
</VARLISTENTRY>
</VARIABLELIST>
</REFSECT1>
<REFSECT1>
<TITLE>ERRORS</TITLE>
<PARA>
May be translated to text with pam_strerror(3).
</PARA>
</REFSECT1>
</REFENTRY>

<!--
Portions taken from the Linux-PAM Application Guide which contains
the following Copyright message.

    Copyright (C) Andrew G. Morgan 1996-9.  All rights reserved.

Redistribution and use in source (sgml) and binary (derived) forms,
with or without modification, are permitted provided that the
following conditions are met:

1. Redistributions of source code must retain the above copyright
   notice, and the entire permission notice in its entirety,
   including the disclaimer of warranties.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.

3. The name of the author may not be used to endorse or promote
   products derived from this software without specific prior
   written permission.

ALTERNATIVELY, this product may be distributed under the terms of the
GNU General Public License, in which case the provisions of the GNU
GPL are required INSTEAD OF the above restrictions.  (This clause is
necessary due to a potential bad interaction between the GNU GPL and
the restrictions contained in a BSD-style copyright.)

THIS SOFTWARE IS PROVIDED `AS IS' AND ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
DAMAGE.

 -->


<REFENTRY ID="baselib-pam-close-session"> <REFMETA>
<REFENTRYTITLE>pam_close_session</REFENTRYTITLE>
<REFMISCINFO>Base Libraries</REFMISCINFO>
</REFMETA> 
<REFNAMEDIV>
<REFNAME>pam_close_session</REFNAME>
<REFPURPOSE>
indicate that an authenticated session has ended
</REFPURPOSE>
</REFNAMEDIV>
<REFSYNOPSISDIV>
<REFSYNOPSISDIVINFO>
<DATE>27 September 2002</DATE>
</REFSYNOPSISDIVINFO>
<SYNOPSIS>
#include &lt;security/pam_appl.h>

extern int pam_close_session(pam_handle_t *pamh, int flags);
</SYNOPSIS>
</REFSYNOPSISDIV>
<REFSECT1>
<REFSECT1INFO>
<DATE>27 September 2002</DATE>
</REFSECT1INFO>
<TITLE>Description
</TITLE>
<PARA>
  This function is used to indicate that an authenticated session has
  ended. It is used to inform the module that the user is exiting a
  session. It should be possible for the PAM library to open a session
  and close the same session from different applications.
</PARA>
<PARA>
  The <PARAMETER>flags</PARAMETER> parameter may have the value
  <CONSTANT>PAM_SILENT</CONSTANT> to indicate the no output should be
  generated as a rsult of this function call.
</PARA>
</REFSECT1>

<REFSECT1>
<TITLE>RETURN VALUE</TITLE>
<VARIABLELIST>
<VARLISTENTRY>
<TERM>
PAM_SUCCESS
</TERM>
<LISTITEM>
<PARA>
Indicates success.
</PARA>
</LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>
PAM_SESSION_ERR
</TERM>
<LISTITEM>
<PARA>
One of the required loaded modules was unable to close a session for the user.
</PARA>
</LISTITEM>
</VARLISTENTRY>
</VARIABLELIST>
</REFSECT1>
<REFSECT1>
<TITLE>ERRORS</TITLE>
<PARA>
May be translated to text with pam_strerror(3).
</PARA>
</REFSECT1>
</REFENTRY>

<!--
Portions taken from the Linux-PAM Application Guide which contains
the following Copyright message.

    Copyright (C) Andrew G. Morgan 1996-9.  All rights reserved.

Redistribution and use in source (sgml) and binary (derived) forms,
with or without modification, are permitted provided that the
following conditions are met:

1. Redistributions of source code must retain the above copyright
   notice, and the entire permission notice in its entirety,
   including the disclaimer of warranties.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.

3. The name of the author may not be used to endorse or promote
   products derived from this software without specific prior
   written permission.

ALTERNATIVELY, this product may be distributed under the terms of the
GNU General Public License, in which case the provisions of the GNU
GPL are required INSTEAD OF the above restrictions.  (This clause is
necessary due to a potential bad interaction between the GNU GPL and
the restrictions contained in a BSD-style copyright.)

THIS SOFTWARE IS PROVIDED `AS IS' AND ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
DAMAGE.

 -->


<REFENTRY ID="baselib-pam-end"> <REFMETA>
<REFENTRYTITLE>pam_end</REFENTRYTITLE>
<REFMISCINFO>Base Libraries</REFMISCINFO>
</REFMETA> 
<REFNAMEDIV>
<REFNAME>pam_end</REFNAME>
<REFPURPOSE>
initialize the PAM library
</REFPURPOSE>
</REFNAMEDIV>
<REFSYNOPSISDIV>
<REFSYNOPSISDIVINFO>
<DATE>27 September 2002</DATE>
</REFSYNOPSISDIVINFO>
<SYNOPSIS>
#include &lt;security/pam_appl.h>

extern int pam_end(pam_handle_t *pamh, int pam_status);
</SYNOPSIS>
</REFSYNOPSISDIV>
<REFSECT1>
<REFSECT1INFO>
<DATE>27 September 2002</DATE>
</REFSECT1INFO>
<TITLE>Description
</TITLE>
<PARA>
  This function is used to terminate us of the PAM library.
  Following a successful return the contents of <PARAMETER>*pamh</PARAMETER>
  are no longer valid all memory associated with it will be invalid.
</PARA>
<PARA>
  Normally the parameter <PARAMETER>pam_status</PARAMETER> should be passed
  the value <CONSTANT>PAM_SUCCESS</CONSTANT>, but in the event of an
  unsuccessful service application the approprite PAM error-return value
  should be used.
</PARA>
</REFSECT1>

<REFSECT1>
<TITLE>RETURN VALUE</TITLE>
<VARIABLELIST>
<VARLISTENTRY>
<TERM>
PAM_SUCCESS
</TERM>
<LISTITEM>
<PARA>
Indicates success.
</PARA>
</LISTITEM>
</VARLISTENTRY>
</VARIABLELIST>
</REFSECT1>
<REFSECT1>
<TITLE>ERRORS</TITLE>
<PARA>
May be translated to text with pam_strerror(3).
</PARA>
</REFSECT1>
</REFENTRY>

<!--
Portions taken from the Linux-PAM Application Guide which contains
the following Copyright message.

    Copyright (C) Andrew G. Morgan 1996-9.  All rights reserved.

Redistribution and use in source (sgml) and binary (derived) forms,
with or without modification, are permitted provided that the
following conditions are met:

1. Redistributions of source code must retain the above copyright
   notice, and the entire permission notice in its entirety,
   including the disclaimer of warranties.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.

3. The name of the author may not be used to endorse or promote
   products derived from this software without specific prior
   written permission.

ALTERNATIVELY, this product may be distributed under the terms of the
GNU General Public License, in which case the provisions of the GNU
GPL are required INSTEAD OF the above restrictions.  (This clause is
necessary due to a potential bad interaction between the GNU GPL and
the restrictions contained in a BSD-style copyright.)

THIS SOFTWARE IS PROVIDED `AS IS' AND ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
DAMAGE.

 -->


<REFENTRY ID="baselib-pam-fail-delay"> <REFMETA>
<REFENTRYTITLE>pam_fail_delay</REFENTRYTITLE>
<REFMISCINFO>Base Libraries</REFMISCINFO>
</REFMETA> 
<REFNAMEDIV>
<REFNAME>pam_fail_delay</REFNAME>
<REFPURPOSE>
specify delay time to use on authentication error
</REFPURPOSE>
</REFNAMEDIV>
<REFSYNOPSISDIV>
<REFSYNOPSISDIVINFO>
<DATE>27 September 2002</DATE>
</REFSYNOPSISDIVINFO>
<SYNOPSIS>
#include &lt;security/pam_appl.h>

extern int pam_fail_delay(pam_handle_t *pamh, unsigned int micro_sec);
</SYNOPSIS>
</REFSYNOPSISDIV>
<REFSECT1>
<REFSECT1INFO>
<DATE>27 September 2002</DATE>
</REFSECT1INFO>
<TITLE>Description
</TITLE>
<PARA>
  This function is used to specify the minimum delay for the PAM library to
  use when an authentication error occurs. The actual delay will vary by
  as much at 25%. If this function is called multiple times, the longest time
  specified by any of the call will be used.
</PARA>
<PARA>
  Independent of success, the delay time is reset to its zero default
  value when the PAM library returns control to the application.
</PARA>
</REFSECT1>

<REFSECT1>
<TITLE>RETURN VALUE</TITLE>
<VARIABLELIST>
<VARLISTENTRY>
<TERM>
PAM_SUCCESS
</TERM>
<LISTITEM>
<PARA>
Indicates success.
</PARA>
</LISTITEM>
</VARLISTENTRY>
</VARIABLELIST>
</REFSECT1>
<REFSECT1>
<TITLE>ERRORS</TITLE>
<PARA>
May be translated to text with pam_strerror(3).
</PARA>
</REFSECT1>
</REFENTRY>

<!--
Portions taken from the Linux-PAM Application Guide which contains
the following Copyright message.

    Copyright (C) Andrew G. Morgan 1996-9.  All rights reserved.

Redistribution and use in source (sgml) and binary (derived) forms,
with or without modification, are permitted provided that the
following conditions are met:

1. Redistributions of source code must retain the above copyright
   notice, and the entire permission notice in its entirety,
   including the disclaimer of warranties.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.

3. The name of the author may not be used to endorse or promote
   products derived from this software without specific prior
   written permission.

ALTERNATIVELY, this product may be distributed under the terms of the
GNU General Public License, in which case the provisions of the GNU
GPL are required INSTEAD OF the above restrictions.  (This clause is
necessary due to a potential bad interaction between the GNU GPL and
the restrictions contained in a BSD-style copyright.)

THIS SOFTWARE IS PROVIDED `AS IS' AND ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
DAMAGE.

 -->


<REFENTRY ID="baselib-pam-get-item"> <REFMETA>
<REFENTRYTITLE>pam_get_item</REFENTRYTITLE>
<REFMISCINFO>Base Libraries</REFMISCINFO>
</REFMETA> 
<REFNAMEDIV>
<REFNAME>pam_get_item</REFNAME>
<REFPURPOSE>
obtain the value of the indicated item.
</REFPURPOSE>
</REFNAMEDIV>
<REFSYNOPSISDIV>
<REFSYNOPSISDIVINFO>
<DATE>27 September 2002</DATE>
</REFSYNOPSISDIVINFO>
<SYNOPSIS>
#include &lt;security/pam_appl.h>

extern int pam_get_item(const pam_handle_t *pamh, int item_type,
                        const void **item);
</SYNOPSIS>
</REFSYNOPSISDIV>
<REFSECT1>
<REFSECT1INFO>
<DATE>27 September 2002</DATE>
</REFSECT1INFO>
<TITLE>Description
</TITLE>
<PARA>
  This function is used to obtain the value of the indicated
  <PARAMETER>item_type</PARAMETER>.
</PARA>
<PARA>
  Upon successful return, <VARNAME>*item</VARNAME> contains a pointer to the
  value of the corresponding item.  Note, this is a pointer to the actual data
  and should not be free()'ed or over-written!
</PARA>
</REFSECT1>

<REFSECT1>
<TITLE>RETURN VALUE</TITLE>
<VARIABLELIST>
<VARLISTENTRY>
<TERM>
PAM_SUCCESS
</TERM>
<LISTITEM>
<PARA>
Indicates success.
</PARA>
</LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>
PAM_PERM_DENIED
</TERM>
<LISTITEM>
<PARA>
The application passed a <CONSTANT>NULL</CONSTANT> pointer for
<VARNAME>item</VARNAME>.
</PARA>
</LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>
PAM_BAD_ITEM
</TERM>
<LISTITEM>
<PARA>
The application attempted to get an undefined item.
</PARA>
</LISTITEM>
</VARLISTENTRY>
</VARIABLELIST>
</REFSECT1>
<REFSECT1>
<TITLE>ERRORS</TITLE>
<PARA>
May be translated to text with pam_strerror(3).
</PARA>
</REFSECT1>
</REFENTRY>

<!--
Portions taken from the Linux-PAM Application Guide which contains
the following Copyright message.

    Copyright (C) Andrew G. Morgan 1996-9.  All rights reserved.

Redistribution and use in source (sgml) and binary (derived) forms,
with or without modification, are permitted provided that the
following conditions are met:

1. Redistributions of source code must retain the above copyright
   notice, and the entire permission notice in its entirety,
   including the disclaimer of warranties.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.

3. The name of the author may not be used to endorse or promote
   products derived from this software without specific prior
   written permission.

ALTERNATIVELY, this product may be distributed under the terms of the
GNU General Public License, in which case the provisions of the GNU
GPL are required INSTEAD OF the above restrictions.  (This clause is
necessary due to a potential bad interaction between the GNU GPL and
the restrictions contained in a BSD-style copyright.)

THIS SOFTWARE IS PROVIDED `AS IS' AND ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
DAMAGE.

 -->


<REFENTRY ID="baselib-pam-getenvlist"> <REFMETA>
<REFENTRYTITLE>pam_getenvlist</REFENTRYTITLE>
<REFMISCINFO>Base Libraries</REFMISCINFO>
</REFMETA> 
<REFNAMEDIV>
<REFNAME>pam_getenvlist</REFNAME>
<REFPURPOSE>
returns a pointer to the complete PAM environment.
</REFPURPOSE>
</REFNAMEDIV>
<REFSYNOPSISDIV>
<REFSYNOPSISDIVINFO>
<DATE>27 September 2002</DATE>
</REFSYNOPSISDIVINFO>
<SYNOPSIS>
#include &lt;security/pam_appl.h>

extern char * const *pam_getenvlist(pam_handle_t *pamh);
</SYNOPSIS>
</REFSYNOPSISDIV>
<REFSECT1>
<REFSECT1INFO>
<DATE>27 September 2002</DATE>
</REFSECT1INFO>
<TITLE>Description
</TITLE>
<PARA>
  This function returns a pointer to the complete PAM environment.
  It is a pointer to a read-only list of read-only environment
  variables.  It should be noted that this memory will become invalid
  after a call to pam_end(), If an application wishes to make use of this
  list after such a call, it should first make a copy of all the set variables.
</PARA>
<PARA>
  The PAM library module allocates memory for the returned value. The calling
  calling application is responsible for freeing this memory. 
</PARA>
</REFSECT1>

<REFSECT1>
<TITLE>RETURN VALUE</TITLE>
<PARA>
  This function returns an array of string pointers containing the PAM
  environment. If an error occurs, <CONSTANT>NULL</CONSTANT> is returned.
</PARA>
</REFSECT1>
</REFENTRY>

<!--
Portions taken from the Linux-PAM Application Guide which contains
the following Copyright message.

    Copyright (C) Andrew G. Morgan 1996-9.  All rights reserved.

Redistribution and use in source (sgml) and binary (derived) forms,
with or without modification, are permitted provided that the
following conditions are met:

1. Redistributions of source code must retain the above copyright
   notice, and the entire permission notice in its entirety,
   including the disclaimer of warranties.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.

3. The name of the author may not be used to endorse or promote
   products derived from this software without specific prior
   written permission.

ALTERNATIVELY, this product may be distributed under the terms of the
GNU General Public License, in which case the provisions of the GNU
GPL are required INSTEAD OF the above restrictions.  (This clause is
necessary due to a potential bad interaction between the GNU GPL and
the restrictions contained in a BSD-style copyright.)

THIS SOFTWARE IS PROVIDED `AS IS' AND ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
DAMAGE.

 -->


<REFENTRY ID="baselib-pam-open-session"> <REFMETA>
<REFENTRYTITLE>pam_open_session</REFENTRYTITLE>
<REFMISCINFO>Base Libraries</REFMISCINFO>
</REFMETA> 
<REFNAMEDIV>
<REFNAME>pam_open_session</REFNAME>
<REFPURPOSE>
used to indicate that an authenticated session has been initiated
</REFPURPOSE>
</REFNAMEDIV>
<REFSYNOPSISDIV>
<REFSYNOPSISDIVINFO>
<DATE>27 September 2002</DATE>
</REFSYNOPSISDIVINFO>
<SYNOPSIS>
#include &lt;security/pam_appl.h>

extern int pam_open_session(pam_handle_t *pamh, int flags);
</SYNOPSIS>
</REFSYNOPSISDIV>
<REFSECT1>
<REFSECT1INFO>
<DATE>27 September 2002</DATE>
</REFSECT1INFO>
<TITLE>Description
</TITLE>
<PARA>
  This function is used to indicate that an authenticated session has
  begun.  It is used to inform the module that the user is currently in
  a session.  It should be possible for the PAM library to open a session
  and close the same session from different applications.
</PARA>
<PARA>
  The <PARAMETER>flags</PARAMETER> parameter may have the value
  <CONSTANT>PAM_SILENT</CONSTANT> to indicate the no output should be
  generated as a rsult of this function call.
</PARA>
</REFSECT1>

<REFSECT1>
<TITLE>RETURN VALUE</TITLE>
<VARIABLELIST>
<VARLISTENTRY>
<TERM>
PAM_SUCCESS
</TERM>
<LISTITEM>
<PARA>
Indicates success.
</PARA>
</LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>
PAM_SESSION_ERR
</TERM>
<LISTITEM>
<PARA>
One of the loaded modules was unable to open a session for the user.
</PARA>
</LISTITEM>
</VARLISTENTRY>
</VARIABLELIST>
</REFSECT1>
<REFSECT1>
<TITLE>ERRORS</TITLE>
<PARA>
May be translated to text with pam_strerror(3).
</PARA>
</REFSECT1>
</REFENTRY>

<!--
Portions taken from the Linux-PAM Application Guide which contains
the following Copyright message.

    Copyright (C) Andrew G. Morgan 1996-9.  All rights reserved.

Redistribution and use in source (sgml) and binary (derived) forms,
with or without modification, are permitted provided that the
following conditions are met:

1. Redistributions of source code must retain the above copyright
   notice, and the entire permission notice in its entirety,
   including the disclaimer of warranties.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.

3. The name of the author may not be used to endorse or promote
   products derived from this software without specific prior
   written permission.

ALTERNATIVELY, this product may be distributed under the terms of the
GNU General Public License, in which case the provisions of the GNU
GPL are required INSTEAD OF the above restrictions.  (This clause is
necessary due to a potential bad interaction between the GNU GPL and
the restrictions contained in a BSD-style copyright.)

THIS SOFTWARE IS PROVIDED `AS IS' AND ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
DAMAGE.

 -->


<REFENTRY ID="baselib-pam-set-item"> <REFMETA>
<REFENTRYTITLE>pam_set_item</REFENTRYTITLE>
<REFMISCINFO>Base Libraries</REFMISCINFO>
</REFMETA> 
<REFNAMEDIV>
<REFNAME>pam_set_item</REFNAME>
<REFPURPOSE>
(re)set the value of an item.
</REFPURPOSE>
</REFNAMEDIV>
<REFSYNOPSISDIV>
<REFSYNOPSISDIVINFO>
<DATE>27 September 2002</DATE>
</REFSYNOPSISDIVINFO>
<SYNOPSIS>
#include &lt;security/pam_appl.h>

extern int pam_set_item(pam_handle_t *pamh, int item_type, const void *item);
</SYNOPSIS>
</REFSYNOPSISDIV>
<REFSECT1>
<REFSECT1INFO>
<DATE>27 September 2002</DATE>
</REFSECT1INFO>
<TITLE>Description
</TITLE>
<PARA>
  This function is used to (re)set the value of one of the following
  item_types:
</PARA>
<VARIABLELIST>
<VARLISTENTRY>
<TERM>
PAM_SERVICE
</TERM>
<LISTITEM>
<PARA>
The service name.
</PARA>
</LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>
PAM_USER
</TERM>
<LISTITEM>
<PARA>
The user name.
</PARA>
</LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>
PAM_TTY
</TERM>
<LISTITEM>
<PARA>
The terminal name: prefixed by <FILENAME>/dev/</FILENAME> if it is a device file; for
graphical, X-based, applications the value for this item should
be the <VARNAME>$DISPLAY</VARNAME> variable.
</PARA>
</LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>
PAM_RHOST
</TERM>
<LISTITEM>
<PARA>
The remote host name.
</PARA>
</LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>
PAM_CONV
</TERM>
<LISTITEM>
<PARA>
The conversation structure.
</PARA>
</LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>
PAM_RUSER
</TERM>
<LISTITEM>
<PARA>
The remote user name.
</PARA>
</LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>
PAM_USER_PROMPT
</TERM>
<LISTITEM>
<PARA>
The string used when prompting for a user's name. The default
value for this string is `Please enter username: '.
</PARA>
</LISTITEM>
</VARLISTENTRY>
</VARIABLELIST>
<PARA>
  For all <PARAMETER>item_types</PARAMETER>, other than
  <CONSTANT>PAM_CONV</CONSTANT>, <PARAMETER>item</PARAMETER> is a pointer to
  a <CONSTANT>NULL</CONSTANT> terminated character string.  In the case of
  <CONSTANT>PAM_CONV</CONSTANT>, <PARAMETER>item</PARAMETER> points to
  an initialized <STRUCTNAME>pam_conv</STRUCTNAME> structure.
</PARA>
</REFSECT1>

<REFSECT1>
<TITLE>RETURN VALUE</TITLE>
<VARIABLELIST>
<VARLISTENTRY>
<TERM>
PAM_SUCCESS
</TERM>
<LISTITEM>
<PARA>
Indicates success.
</PARA>
</LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>
PAM_PERM_DENIED
</TERM>
<LISTITEM>
<PARA>
An attempt was made to replace the conversation structure with a
<CONSTANT>NULL</CONSTANT> value.
</PARA>
</LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>
PAM_BUF_ERR
</TERM>
<LISTITEM>
<PARA>
The function ran out of memory making a copy of the item.
</PARA>
</LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>
PAM_BAD_ITEM
</TERM>
<LISTITEM>
<PARA>
The application attempted to set an undefined item.
</PARA>
</LISTITEM>
</VARLISTENTRY>
</VARIABLELIST>
</REFSECT1>
<REFSECT1>
<TITLE>ERRORS</TITLE>
<PARA>
May be translated to text with pam_strerror(3).
</PARA>
</REFSECT1>
</REFENTRY>

<!--
Portions taken from the Linux-PAM Application Guide which contains
the following Copyright message.

    Copyright (C) Andrew G. Morgan 1996-9.  All rights reserved.

Redistribution and use in source (sgml) and binary (derived) forms,
with or without modification, are permitted provided that the
following conditions are met:

1. Redistributions of source code must retain the above copyright
   notice, and the entire permission notice in its entirety,
   including the disclaimer of warranties.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.

3. The name of the author may not be used to endorse or promote
   products derived from this software without specific prior
   written permission.

ALTERNATIVELY, this product may be distributed under the terms of the
GNU General Public License, in which case the provisions of the GNU
GPL are required INSTEAD OF the above restrictions.  (This clause is
necessary due to a potential bad interaction between the GNU GPL and
the restrictions contained in a BSD-style copyright.)

THIS SOFTWARE IS PROVIDED `AS IS' AND ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
DAMAGE.

 -->


<REFENTRY ID="baselib-pam-setcred"> <REFMETA>
<REFENTRYTITLE>pam_setcred</REFENTRYTITLE>
<REFMISCINFO>Base Libraries</REFMISCINFO>
</REFMETA> 
<REFNAMEDIV>
<REFNAME>pam_setcred</REFNAME>
<REFPURPOSE>
set the module-specific credentials of the user
</REFPURPOSE>
</REFNAMEDIV>
<REFSYNOPSISDIV>
<REFSYNOPSISDIVINFO>
<DATE>27 September 2002</DATE>
</REFSYNOPSISDIVINFO>
<SYNOPSIS>
#include &lt;security/pam_appl.h>

extern int pam_setcred(pam_handle_t *pamh, int flags);
</SYNOPSIS>
</REFSYNOPSISDIV>
<REFSECT1>
<REFSECT1INFO>
<DATE>27 September 2002</DATE>
</REFSECT1INFO>
<TITLE>Description
</TITLE>
<PARA>
  This function is used to set the module-specific credentials of the
  user.  It is usually called after the user has been authenticated,
  after the account management function has been called and after a
  session has been opened for the user.
</PARA>
<PARA>
Valid flags, any one of which, may be logically OR'd with
<CONSTANT>PAM_SILENT</CONSTANT>, are:
</PARA>
<VARIABLELIST>
<VARLISTENTRY>
<TERM>
PAM_ESTABLISH_CRED
</TERM>
<LISTITEM>
<PARA>
Set the credentials for the authentication service.
</PARA>
</LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>
PAM_DELETE_CRED
</TERM>
<LISTITEM>
<PARA>
Delete the credentials associated with the authentication service.
</PARA>
</LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>
PAM_REINITIALIZE_CRED
</TERM>
<LISTITEM>
<PARA>
Reinitialize the user credentials.
</PARA>
</LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>
PAM_REFRESH_CRED
</TERM>
<LISTITEM>
<PARA>
Extend the lifetime of the user credentials.
</PARA>
</LISTITEM>
</VARLISTENTRY>
</VARIABLELIST>
</REFSECT1>

<REFSECT1>
<TITLE>RETURN VALUE</TITLE>
<VARIABLELIST>
<VARLISTENTRY>
<TERM>
PAM_SUCCESS
</TERM>
<LISTITEM>
<PARA>
Indicates success.
</PARA>
</LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>
PAM_CRED_UNAVAIL
</TERM>
<LISTITEM>
<PARA>
A module cannot retrieve the user's credentials.
</PARA>
</LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>
PAM_CRED_EXPIRED
</TERM>
<LISTITEM>
<PARA>
The user's credentials have expired.
</PARA>
</LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>
PAM_USER_UNKNOWN
</TERM>
<LISTITEM>
<PARA>
The user is not known to an authentication module.
</PARA>
</LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>
PAM_CRED_ERR
</TERM>
<LISTITEM>
<PARA>
A module was unable to set the credentials of the user.
</PARA>
</LISTITEM>
</VARLISTENTRY>
</VARIABLELIST>
</REFSECT1>
<REFSECT1>
<TITLE>ERRORS</TITLE>
<PARA>
May be translated to text with pam_strerror(3).
</PARA>
</REFSECT1>
</REFENTRY>

<!--
Portions taken from the Linux-PAM Application Guide which contains
the following Copyright message.

    Copyright (C) Andrew G. Morgan 1996-9.  All rights reserved.

Redistribution and use in source (sgml) and binary (derived) forms,
with or without modification, are permitted provided that the
following conditions are met:

1. Redistributions of source code must retain the above copyright
   notice, and the entire permission notice in its entirety,
   including the disclaimer of warranties.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.

3. The name of the author may not be used to endorse or promote
   products derived from this software without specific prior
   written permission.

ALTERNATIVELY, this product may be distributed under the terms of the
GNU General Public License, in which case the provisions of the GNU
GPL are required INSTEAD OF the above restrictions.  (This clause is
necessary due to a potential bad interaction between the GNU GPL and
the restrictions contained in a BSD-style copyright.)

THIS SOFTWARE IS PROVIDED `AS IS' AND ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
DAMAGE.

 -->


<REFENTRY ID="baselib-pam-start"> <REFMETA>
<REFENTRYTITLE>pam_start</REFENTRYTITLE>
<REFMISCINFO>Base Libraries</REFMISCINFO>
</REFMETA> 
<REFNAMEDIV>
<REFNAME>pam_start</REFNAME>
<REFPURPOSE>
initialize the PAM library
</REFPURPOSE>
</REFNAMEDIV>
<REFSYNOPSISDIV>
<REFSYNOPSISDIVINFO>
<DATE>27 September 2002</DATE>
</REFSYNOPSISDIVINFO>
<SYNOPSIS>
#include &lt;security/pam_appl.h>

extern int pam_start(const char *service_name, const char *user,
                            const struct pam_conv *pam_conversation,
                            pam_handle_t **pamh);
</SYNOPSIS>
</REFSYNOPSISDIV>
<REFSECT1>
<REFSECT1INFO>
<DATE>27 September 2002</DATE>
</REFSECT1INFO>
<TITLE>Description
</TITLE>
<PARA>
  This function is used to initialize the PAM library. It must be called prior
  to any other usage of the PAM library.  Following a successful return
  the contents of <PARAMETER>*pamh</PARAMETER> is a handle that provides
  continuity for successive calls to the PAM library. The arguments
  expected by pam_start are as follows: the <PARAMETER>service_name</PARAMETER>
  of the program, the <PARAMETER>username</PARAMETER> of the individual to be
  authenticated, a pointer to an application-supplied
  <STRUCTNAME>pam_conv</STRUCTNAME> structure and a pointer to a
  <VARNAME>pam_handle_t</VARNAME> pointer.
</PARA>
<PARA>
  An application must provide a `conversation function'. It is used
  for direct communication between a loaded module and the application
  and will typically provide a means for the module to prompt the user
  for a password etc. . The structure, pam_conv, is defined to be,
</PARA>
<SCREEN>
  struct pam_conv {
    int (*conv) (int num_msg,
                 const struct pam_message * *msg,
                 struct pam_response * *resp,
                 void *appdata_ptr);
    void *appdata_ptr;
  };
</SCREEN>
<PARA>
  It is initialized by the application before it is passed to the
  library.  The contents of this structure are attached to the
  <PARAMETER>*pamh</PARAMETER> handle. The point of this argument is to
  provide a mechanism for any loaded module to interact directly with the
  application program. This is why it is called a conversation structure.
</PARA>
<PARA>
  When a module calls the referenced conv() function, the argument
  <PARAMETER>*appdata_ptr</PARAMETER> is set to the second element of this
  structure.
</PARA>
<PARA>
  The other arguments of a call to conv() concern the information
  exchanged by module and application. The first parameter,
  <PARAMETER>num_msg</PARAMETER> holds the length of the array of
  pointers passed via, <PARAMETER>msg</PARAMETER>. After a successful return,
  the pointer <PARAMETER>resp</PARAMETER> points to an array of
  <PARAMETER>num_msg</PARAMETER> <STRUCTNAME>pam_response</STRUCTNAME>
  structures, holding the application supplied text.  Note, *resp is an
  struct pam_response array and not an array of pointers.
</PARA>
</REFSECT1>

<REFSECT1>
<TITLE>RETURN VALUE</TITLE>
<VARIABLELIST>
<VARLISTENTRY>
<TERM>
PAM_SUCCESS
</TERM>
<LISTITEM>
<PARA>
Indicates success.
</PARA>
</LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>
PAM_BUF_ERR
</TERM>
<LISTITEM>
<PARA>
Memory allocation error.
</PARA>
</LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>
PAM_ABORT
</TERM>
<LISTITEM>
<PARA>
Internal failure.
</PARA>
</LISTITEM>
</VARLISTENTRY>
</VARIABLELIST>
</REFSECT1>
<REFSECT1>
<TITLE>ERRORS</TITLE>
<PARA>
May be translated to text with pam_strerror(3).
</PARA>
</REFSECT1>
</REFENTRY>

<!--
Portions taken from the Linux-PAM Application Guide which contains
the following Copyright message.

    Copyright (C) Andrew G. Morgan 1996-9.  All rights reserved.

Redistribution and use in source (sgml) and binary (derived) forms,
with or without modification, are permitted provided that the
following conditions are met:

1. Redistributions of source code must retain the above copyright
   notice, and the entire permission notice in its entirety,
   including the disclaimer of warranties.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.

3. The name of the author may not be used to endorse or promote
   products derived from this software without specific prior
   written permission.

ALTERNATIVELY, this product may be distributed under the terms of the
GNU General Public License, in which case the provisions of the GNU
GPL are required INSTEAD OF the above restrictions.  (This clause is
necessary due to a potential bad interaction between the GNU GPL and
the restrictions contained in a BSD-style copyright.)

THIS SOFTWARE IS PROVIDED `AS IS' AND ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
DAMAGE.

 -->


<REFENTRY ID="baselib-pam-strerror"> <REFMETA>
<REFENTRYTITLE>pam_strerror</REFENTRYTITLE>
<REFMISCINFO>Base Libraries</REFMISCINFO>
</REFMETA> 
<REFNAMEDIV>
<REFNAME>pam_strerror</REFNAME>
<REFPURPOSE>
returns a string describing the PAM error
</REFPURPOSE>
</REFNAMEDIV>
<REFSYNOPSISDIV>
<REFSYNOPSISDIVINFO>
<DATE>27 September 2002</DATE>
</REFSYNOPSISDIVINFO>
<SYNOPSIS>
#include &lt;security/pam_appl.h>

extern int pam_strerror(pam_handle_t *pamh, int errnum);
</SYNOPSIS>
</REFSYNOPSISDIV>
<REFSECT1>
<REFSECT1INFO>
<DATE>27 September 2002</DATE>
</REFSECT1INFO>
<TITLE>Description
</TITLE>
<PARA>
  This function returns a string describing the PAM error associated with
  the argument <PARAMETER>errnum</PARAMETER>.
</PARA>
</REFSECT1>

<REFSECT1>
<TITLE>RETURN VALUE</TITLE>
<PARA>
  On success this function returns a description of the indicated  error.
  If the error is not recognized a string beginning with
  Unknown Linux-PAM error is returned. The application should not free or
  modify this string. This returned string will not be translated.
</PARA>
</REFSECT1>
</REFENTRY>

<!--
Portions taken from the Linux-PAM Application Guide which contains
the following Copyright message.

    Copyright (C) Andrew G. Morgan 1996-9.  All rights reserved.

Redistribution and use in source (sgml) and binary (derived) forms,
with or without modification, are permitted provided that the
following conditions are met:

1. Redistributions of source code must retain the above copyright
   notice, and the entire permission notice in its entirety,
   including the disclaimer of warranties.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.

3. The name of the author may not be used to endorse or promote
   products derived from this software without specific prior
   written permission.

ALTERNATIVELY, this product may be distributed under the terms of the
GNU General Public License, in which case the provisions of the GNU
GPL are required INSTEAD OF the above restrictions.  (This clause is
necessary due to a potential bad interaction between the GNU GPL and
the restrictions contained in a BSD-style copyright.)

THIS SOFTWARE IS PROVIDED `AS IS' AND ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
DAMAGE.

 -->


</SECT1>
<!-- End of text generated from database -->
<!--    by $Header: /cvsroot/lsb/spec/mklibspec,v 1.49 2002/09/30 19:50:36 anderson Exp 0 -->


</CHAPTER>

</PART>
