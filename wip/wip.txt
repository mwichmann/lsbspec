Linux Standard Base Work In Progress 20030723

Copyright © 2000, 2001, 2002, 2003 by Free Standards Group

Permission is granted to copy, distribute and/or modify this document under the
terms of the GNU Free Documentation License, Version 1.1; with no Invariant
Sections, with no Front-Cover Texts, and with no Back-Cover Texts. A copy of
the license is included in the section entitled "GNU Free Documentation
License".

Portions of the text were taken from other copyrighted documents in accordance
with the respective licenses of those documents.

Linux is a trademark of Linus Torvalds.

UNIX a registered trademark of the Open Group in the United States and other
countries.

LSB is a trademark of the Free Standards Group in the USA and other countries.

AMD is a trademark of Advanced Micro Devices, Inc.

Intel386 and Itanium are trademarks of Intel Corporation.

OpenGL is a registered trademark of Silicon Graphics, Inc.

-------------------------------------------------------------------------------

Table of Contents
I. Introduction
   
    1. Introduction
       
        Introduction
        Purpose
        Related Standards
        Relevant Libraries
        How to Use this Standard
       
II. Low Level System Information
   
    2. Machine Interface
       
        Data Representation
       
    3. Function Calling Sequence
       
        CPU Registers
        Floating Point Registers
        Stack Frame
        Arguments
        Return Values
       
    4. Operating System Interface
       
        Virtual Address Space
        Processor Execution Mode
        Exception Interface
        Signal Delivery
       
    5. Process Initialization
       
        Special Registers
        Process Stack (on entry)
        Auxilliary Vectors
        Environment
       
    6. Coding Examples
       
        Code Model Overview/Architecture Constraints
        Position-Independent Fucntion Prologue
        Data Objects
        Function Calls
        Branching
       
    7. C Stack Frame
       
        Variable Argument List
        Dynamic Allocation of Stack Space
       
    8. Debug Information
   
List of Tables
1-1. Related Standards
1-2. Standard Libraries Names
1-3. Standard Library Names defined in the Architecture Specific Supplement
2-1. Scalar Types
2-2. Class Components

I. Introduction

Table of Contents
1. Introduction

-------------------------------------------------------------------------------

Chapter 1. Introduction

Introduction

This is the Linux Standard Base Work In Progress 20030723 . An implementation
of anything in this document may not claim to be an implementation of the Linux
Standard Base until such time as the feature moves into the Linux Standards
Base Specification.

-------------------------------------------------------------------------------

Purpose

The Linux Standard Base (LSB) defines a system interface for compiled
applications and a minimal environment for support of installation scripts. Its
purpose is to enable a uniform industry standard environment for high-volume
applications conforming to the LSB.

The LSB defines a binary interface for application programs that are compiled
and packaged for LSB-conforming implementations on many different hardware
architectures. Since a binary specification must include information specific
to the computer processor architecture for which it is intended, it is not
possible for a single document to specify the interface for all possible
LSB-conforming implementations. Therefore, the LSB is a family of
specifications, rather than a single one.

The LSB is composed of two basic parts: A common specification ("generic LSB"
or "gLSB") describing those parts of the interface that remain constant across
all implementations of the LSB, and an architecture-specific specification
("archLSB") describing the parts of the interface that vary by processor
architecture. Together, the generic LSB and the architecture-specific
supplement for a single hardware architecture provide a complete interface
specification for compiled application programs on systems that share a common
hardware architecture.

This document is the generic LSB. It must be used in conjunction with an
architecture-specific supplement. Whenever a section of this specification must
be supplemented by architecture-specific information, this document includes a
reference to the architecture supplement. Architecture supplements may also
contain additional information that is not referenced here.

This document should be used in conjunction with the documents it references.
This document enumerates the system components it includes, but descriptions of
those components may be included entirely or partly in this document, partly in
other documents, or entirely in other reference documents. For example, the
section that describes system service routines includes a list of the system
routines supported in this interface, formal declarations of the data
structures they use that are visible to applications, and a pointer to the
underlying referenced specification for information about the syntax and
semantics of each call. Only those routines not described in standards
referenced by this document, or extensions to those standards, are described in
the detail. Information referenced in this way is as much a part of this
document as is the information explicitly included here.

-------------------------------------------------------------------------------

Related Standards

The specifications listed below are referenced in whole or in part by the Linux
Standard Base. When a specification is referenced in a way that imposes a
requirement (for example, "foo must behave as specified in the XyzzySpec"),
then the relevant requirements of that specification apply as if they were part
of the LSB itself. However, if the LSB refers to a specification without
imposing a requirement, then it is merely a reference and does not add
additional requirements. The LSB may refer to a portion of a specification (for
example, to define a specific function or group of functions); in such cases,
only the explicitly referenced portion of the specification applies.

Table 1-1. Related Standards

+-----------------------------------------------------------------------------+
|System V Application Binary Interface - DRAFT - |http://www.caldera.com/     |
|22 June 2000                                    |developers/gabi/2000-07-17/ |
|                                                |contents.html               |
|------------------------------------------------+----------------------------|
|DWARF Debugging Information Format, Revision    |                            |
|2.0.0 (July 27, 1993)                           |                            |
|------------------------------------------------+----------------------------|
|Filesystem Hierarchy Standard (FHS) 2.2         |http://www.pathname.com/fhs/|
|------------------------------------------------+----------------------------|
|IEEE Standard for Binary Floating-Point         |http://www.ieee.org/        |
|Arithmetic                                      |                            |
|------------------------------------------------+----------------------------|
|System V Application Binary Interface, Edition  |http://www.caldera.com/     |
|4.1                                             |developers/devspecs/        |
|                                                |gabi41.pdf                  |
|------------------------------------------------+----------------------------|
|ISO/IEC 9899: 1990, Programming Languages --C   |                            |
|------------------------------------------------+----------------------------|
|ISO/IEC 9899: 1999, Programming Languages --C   |                            |
|------------------------------------------------+----------------------------|
|ISO/IEC 14882: 1998(E) Programming languages    |                            |
|--C++                                           |                            |
|------------------------------------------------+----------------------------|
|Linux Assigned Names And Numbers Authority      |http://www.lanana.org/      |
|------------------------------------------------+----------------------------|
|Large File Support                              |http://www.UNIX-systems.org/|
|                                                |version2/whatsnew/          |
|                                                |lfs20mar.html               |
|------------------------------------------------+----------------------------|
|LI18NUX 2000 Globalization Specification,       |http://www.li18nux.org/docs/|
|Version 1.0 with Amendment 4                    |html/LI18NUX-2000-amd4.htm  |
|------------------------------------------------+----------------------------|
|Linux Standard Base                             |http://www.linuxbase.org/   |
|                                                |spec/                       |
|------------------------------------------------+----------------------------|
|OpenGL® Application Binary Interface for Linux  |http://oss.sgi.com/projects/|
|                                                |ogl-sample/ABI/             |
|------------------------------------------------+----------------------------|
|OSF-RFC 86.0                                    |http://www.opengroup.org/   |
|                                                |tech/rfc/mirror-rfc/        |
|                                                |rfc86.0.txt                 |
|------------------------------------------------+----------------------------|
|IEEE Std POSIX 1003.2-1992 (ISO/IEC 9945-2:1993)|http://www.ieee.org/        |
|------------------------------------------------+----------------------------|
|POSIX 1003.1c                                   |http://www.ieee.org/        |
|------------------------------------------------+----------------------------|
|RFC 1952: GZIP file format specification version|http://www.ietf.org/rfc/    |
|4.3                                             |rfc1952.txt                 |
|------------------------------------------------+----------------------------|
|RFC 2440: OpenPGP Message Format                |                            |
|------------------------------------------------+----------------------------|
|CAE Specification, May 1996, X/Open Curses,     |http://www.opengroup.org/   |
|Issue 4, Version 2 (ISBN: 1-85912-171-3, C610), |publications/catalog/un.htm |
|plus Corrigendum U018                           |                            |
|------------------------------------------------+----------------------------|
|CAE Specification, January 1997, System         |http://www.opengroup.org/   |
|Interface Definitions (XBD),Issue 5 (ISBN:      |publications/catalog/un.htm |
|1-85912-186-1, C605)                            |                            |
|------------------------------------------------+----------------------------|
|CAE Specification, January 1997, Commands and   |http://www.opengroup.org/   |
|Utilities (XCU), Issue 5 (ISBN: 1-85912-191-8,  |publications/catalog/un.htm |
|C604)                                           |                            |
|------------------------------------------------+----------------------------|
|CAE Specification, February 1997, Networking    |http://www.opengroup.org/   |
|Services (XNS), Issue 5(ISBN: 1-85912-165-9,    |                            |
|C523)                                           |                            |
|------------------------------------------------+----------------------------|
|CAE Specification, January 1997, System         |http://www.opengroup.org/   |
|Interfaces and Headers (XSH),Issue 5 (ISBN:     |publications/catalog/un.htm |
|1-85912-181-0, C606)                            |                            |
|------------------------------------------------+----------------------------|
|The Single UNIX® Specification(SUS) Version 1   |http://www.opengroup.org/   |
|(UNIX 95) System Interfaces & Headers           |publications/catalog/un.htm |
|------------------------------------------------+----------------------------|
|The Single UNIX® Specification(SUS) Version 3   |http://www.unix.org/version3|
|                                                |/                           |
|------------------------------------------------+----------------------------|
|System V Interface Definition, Issue 3 (ISBN    |                            |
|0201566524)                                     |                            |
|------------------------------------------------+----------------------------|
|System V Interface Definition,Fourth Edition    |                            |
|------------------------------------------------+----------------------------|
|Double Buffer Extension Library                 |http://www.x.org/           |
|------------------------------------------------+----------------------------|
|X Display Power Management Signaling (DPMS)     |http://www.x.org/           |
|Extension, Library Specification                |                            |
|------------------------------------------------+----------------------------|
|X Record Extension Library                      |http://www.x.org/           |
|------------------------------------------------+----------------------------|
|Security Extension Specification, Version 7.1   |http://www.x.org/           |
|------------------------------------------------+----------------------------|
|X Nonrectangular Window Shape Extension Library |http://www.x.org/           |
|Version 1.0                                     |                            |
|------------------------------------------------+----------------------------|
|MIT-SHM--The MIT Shared Memory Extension        |http://www.x.org/           |
|------------------------------------------------+----------------------------|
|X Synchronization Extension Library             |http://www.x.org/           |
|------------------------------------------------+----------------------------|
|XTEST Extension Library                         |http://www.x.org/           |
|------------------------------------------------+----------------------------|
|X11R6.4 X Inter-Client Exchange (ICE) Protocol  |http://www.x.org/           |
|------------------------------------------------+----------------------------|
|X11R6.4 X11 Input Extension Library             |http://www.x.org/           |
|------------------------------------------------+----------------------------|
|X11R6.4 Xlib - C library                        |http://www.x.org/           |
|------------------------------------------------+----------------------------|
|X/Open Portability Guide, Issue 4               |http://www.opengroup.org/   |
|------------------------------------------------+----------------------------|
|X11R6.4 X Session Management Library            |http://www.x.org/           |
|------------------------------------------------+----------------------------|
|X11R6.4 X Toolkit Intrinsics                    |http://www.x.org/           |
|------------------------------------------------+----------------------------|
|zlib 1.1.3 Manual                               |http://www.gzip.org/zlib/   |
+-----------------------------------------------------------------------------+
-------------------------------------------------------------------------------

Relevant Libraries

The libraries listed here shall be available on a Linux Standard Base system.
This list may be supplemented or amended by the architecture-specific
specifications.

Table 1-2. Standard Libraries Names

+---------------------------+
|Library   |Runtime Name    |
|----------+----------------|
|libX11    |libX11.so.6     |
|----------+----------------|
|libXt     |libXt.so.6      |
|----------+----------------|
|libGL     |libGL.so.1      |
|----------+----------------|
|libXext   |libXext.so.6    |
|----------+----------------|
|libICE    |libICE.so.6     |
|----------+----------------|
|libSM     |libSM.so.6      |
|----------+----------------|
|libdl     |libdl.so.2      |
|----------+----------------|
|libcrypt  |libcrypt.so.1   |
|----------+----------------|
|libz      |libz.so.1       |
|----------+----------------|
|libncurses|libncurses.so.5 |
|----------+----------------|
|libutil   |libutil.so.1    |
|----------+----------------|
|libpthread|libpthread.so.0 |
|----------+----------------|
|libstdcxx |libstdc++.so.5  |
|----------+----------------|
|libpam    |libpam.so.0     |
|----------+----------------|
|libgcc_s  |libgcc_s.so.1   |
+---------------------------+

Table 1-3. Standard Library Names defined in the Architecture Specific
Supplement

+------------------------+
|Library   |Runtime Name |
|----------+-------------|
|libm      |See archLSB  |
|----------+-------------|
|libc      |See archLSB  |
|----------+-------------|
|proginterp|See archLSB  |
+------------------------+

These libraries will be in an implementation-dependent directory which the
dynamic linker will search by default.

-------------------------------------------------------------------------------

How to Use this Standard

The complete LSB specification is composed of this generic LSB specification
and the supplemental processor-specific specification for a particular
processor architecture. These two documents constitute a specification that
should be used in conjunction with the publicly-available standards documents
it references. The LSB enumerates the system components it includes, but
descriptions of those components may be included entirely in the LSB, partly in
the LSB and partly in other documents, or entirely in other reference
documents.

II. Low Level System Information

Table of Contents
2. Machine Interface
3. Function Calling Sequence
4. Operating System Interface
5. Process Initialization
6. Coding Examples
7. C Stack Frame
8. Debug Information

-------------------------------------------------------------------------------

Chapter 2. Machine Interface

Data Representation

LSB-conforming applications shall use the data representation as defined in
Chapter 3 of the System V Application Binary Interface - Intel386 Architecture
Processor Supplement.

-------------------------------------------------------------------------------

Fundamental Types

In addition to the fundamental types specified in Chapter 3 of the System V
Application Binary Interface - Intel386 Architecture, these additional data
types are defined here.

Table 2-1. Scalar Types

+---------------------------------------------------------------------------+
|Type    |C                 |sizeof|Alignment (bytes)|IntelI386 Architecture|
|--------+------------------+------+-----------------+----------------------|
|Boolean |bool              |1     |1                |signed byte           |
|--------+------------------+------+-----------------+----------------------|
|        |long long         |      |                 |                      |
|        |------------------|8     |4                |signed double word    |
|Integral|signed long long  |      |                 |                      |
|        |------------------+------+-----------------+----------------------|
|        |unsigned long long|8     |4                |unsigned double word  |
+---------------------------------------------------------------------------+

-------------------------------------------------------------------------------

Aggregates and Unions

-------------------------------------------------------------------------------

Bit Fields

-------------------------------------------------------------------------------

Member Pointers

A pointer to data member is an offset from the base address of the class object
containing it, represented as a ptrdiff_t. It has the size and alignment
attributes of a ptrdiff_t. A NULL pointer is represented as -1.

-------------------------------------------------------------------------------

Class Representation

A C++ Class is represented by several closely related data objects.

Table 2-2. Class Components

+-----------------------------------------------------------------------------+
|Object        |Contains                                                      |
|--------------+--------------------------------------------------------------|
|Class Data    |All non-static Class members                                  |
|--------------+--------------------------------------------------------------|
|Virtual Table |Information needed to dispatch virtual functions, access      |
|              |virtual base class subobjects and to access the RTTI          |
|              |information                                                   |
|--------------+--------------------------------------------------------------|
|RTTI          |Run-Time Type Information used by the typeid and dynamic_cast |
|              |operators, and exception handlers                             |
|--------------+--------------------------------------------------------------|
|Typeinfo Name |String representaion of Class name                            |
|--------------+--------------------------------------------------------------|
|Construction  |Information needed during construction and destruction of     |
|Virtual Table |Classes with non-trivial inheritance relationships.           |
|--------------+--------------------------------------------------------------|
|VTT           |A table of virtual table pointers which holds the addresses of|
|              |construction and non-contruction virtual tables.              |
+-----------------------------------------------------------------------------+

-------------------------------------------------------------------------------

Class Ordering

Derived classes

-------------------------------------------------------------------------------

Chapter 3. Function Calling Sequence

LSB-conforming applications shall use the function calling sequence as defined
in Chapter 3 of the System V Application Binary Interface - Intel386
Architecture Processor Supplement.

-------------------------------------------------------------------------------

CPU Registers

-------------------------------------------------------------------------------

Floating Point Registers

-------------------------------------------------------------------------------

Stack Frame

-------------------------------------------------------------------------------

Arguments

-------------------------------------------------------------------------------

Integral/Pointer

-------------------------------------------------------------------------------

Floating Point

-------------------------------------------------------------------------------

Struct and Union Point

-------------------------------------------------------------------------------

Variable Arguments

-------------------------------------------------------------------------------

Return Values

-------------------------------------------------------------------------------

Void

-------------------------------------------------------------------------------

Integral/Pointer

-------------------------------------------------------------------------------

Floating Point

-------------------------------------------------------------------------------

Struct and Union Point

-------------------------------------------------------------------------------

Chapter 4. Operating System Interface

LSB-conforming applications shall use the Operating System Interfaces as
defined in Chapter 3 of the System V Application Binary Interface - Intel386
Architecture Processor Supplement.

-------------------------------------------------------------------------------

Virtual Address Space

-------------------------------------------------------------------------------

Page Size

-------------------------------------------------------------------------------

Virtual Address Assignments

-------------------------------------------------------------------------------

Managing the PRocess Stack

-------------------------------------------------------------------------------

Coding Guidlines

-------------------------------------------------------------------------------

Processor Execution Mode

-------------------------------------------------------------------------------

Exception Interface

-------------------------------------------------------------------------------

Hardware Exception Types

-------------------------------------------------------------------------------

Software Trap Types

-------------------------------------------------------------------------------

Signal Delivery

-------------------------------------------------------------------------------

Signal Handler Interface

-------------------------------------------------------------------------------

Chapter 5. Process Initialization

LSB-conforming applications shall use the Process Initialization as defined in
Chapter 3 of the System V Application Binary Interface - Intel386 Architecture
Processor Supplement.

-------------------------------------------------------------------------------

Special Registers

-------------------------------------------------------------------------------

Process Stack (on entry)

-------------------------------------------------------------------------------

Auxilliary Vectors

-------------------------------------------------------------------------------

Environment

-------------------------------------------------------------------------------

Chapter 6. Coding Examples

LSB-conforming applications may implement fundamental operations using the
Coding Examples as defined in Chapter 3 of the System V Application Binary
Interface - Intel386 Architecture Processor Supplement.

-------------------------------------------------------------------------------

Code Model Overview/Architecture Constraints

-------------------------------------------------------------------------------

Position-Independent Fucntion Prologue

-------------------------------------------------------------------------------

Data Objects

-------------------------------------------------------------------------------

Absolute Load & Store

-------------------------------------------------------------------------------

Position Relative Load & Store

-------------------------------------------------------------------------------

Function Calls

-------------------------------------------------------------------------------

Absolute Direct Function Call

-------------------------------------------------------------------------------

Absolute Indirect Function Call

-------------------------------------------------------------------------------

Position-Independent Direct Function Call

-------------------------------------------------------------------------------

Position-Independent Indirect Function Call

-------------------------------------------------------------------------------

Branching

-------------------------------------------------------------------------------

Branch Instruction

-------------------------------------------------------------------------------

Absolute switch() code

-------------------------------------------------------------------------------

Position-Independent switch() code

-------------------------------------------------------------------------------

Chapter 7. C Stack Frame

Variable Argument List

-------------------------------------------------------------------------------

Dynamic Allocation of Stack Space

-------------------------------------------------------------------------------

Chapter 8. Debug Information

The LSB does not currently specify the format of Debug information.

