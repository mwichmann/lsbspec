<SECT1 ID=aio.h>
<TITLE>aio.h</TITLE>
<PARA></PARA>
<SCREEN>

int aio_read(struct aiocb);
int aio_write(struct aiocb);
int lio_listio(int, struct aiocb, int, struct sigevent);
int aio_error(struct aiocb);
__ssize_t aio_return(struct aiocb);
int aio_cancel(int, struct aiocb);
int aio_suspend(struct aiocb, int, struct timespec);
int aio_fsync(int, struct aiocb);


</SCREEN>
</SECT1>
<SECT1 ID=arpa/inet.h>
<TITLE>arpa/inet.h</TITLE>
<PARA></PARA>
<SCREEN>



</SCREEN>
</SECT1>
<SECT1 ID=assert.h>
<TITLE>assert.h</TITLE>
<PARA></PARA>
<SCREEN>

void __assert_fail(char, char, unsigned int, char);


</SCREEN>
</SECT1>
<SECT1 ID=cpio.h>
<TITLE>cpio.h</TITLE>
<PARA></PARA>
<SCREEN>



</SCREEN>
</SECT1>
<SECT1 ID=ctype.h>
<TITLE>ctype.h</TITLE>
<PARA></PARA>
<SCREEN>

unsigned short __ctype_b;__int32_t __ctype_tolower;__int32_t __ctype_toupper;int _tolower(int);
int _toupper(int);
int isalnum(int);
int isalpha(int);
int isascii(int);
int iscntrl(int);
int isdigit(int);
int isgraph(int);
int islower(int);
int isprint(int);
int ispunct(int);
int isspace(int);
int isupper(int);
int isxdigit(int);
int toascii(int);
int tolower(int);
int toupper(int);


</SCREEN>
</SECT1>
<SECT1 ID=dirent.h>
<TITLE>dirent.h</TITLE>
<PARA></PARA>
<SCREEN>
typedef Unknown Type:"" unknown DIR;

void rewinddir(DIR);
void seekdir(DIR, long);
long telldir(DIR);
int closedir(DIR);
DIR opendir(char);
dirent readdir(DIR);


</SCREEN>
</SECT1>
<SECT1 ID=errno.h>
<TITLE>errno.h</TITLE>
<PARA></PARA>
<SCREEN>



</SCREEN>
</SECT1>
<SECT1 ID=fcntl.h>
<TITLE>fcntl.h</TITLE>
<PARA></PARA>
<SCREEN>

int creat(char, __mode_t);
int fcntl(int, int, ...);
int open(char, int, ...);


</SCREEN>
</SECT1>
<SECT1 ID=float.h>
<TITLE>float.h</TITLE>
<PARA></PARA>
<SCREEN>



</SCREEN>
</SECT1>
<SECT1 ID=fnmatch.h>
<TITLE>fnmatch.h</TITLE>
<PARA></PARA>
<SCREEN>

int fnmatch(char, char, int);


</SCREEN>
</SECT1>
<SECT1 ID=ftw.h>
<TITLE>ftw.h</TITLE>
<PARA></PARA>
<SCREEN>



</SCREEN>
</SECT1>
<SECT1 ID=glob.h>
<TITLE>glob.h</TITLE>
<PARA></PARA>
<SCREEN>
typedef struct
{

  __size_t gl_pathc;
  char gl_pathv;
  __size_t gl_offs;
  int gl_flags;
  Unknown Type:"" unknown gl_closedir;
  Unknown Type:"" unknown gl_readdir;
  Unknown Type:"" unknown gl_opendir;
  Unknown Type:"" unknown gl_lstat;
  Unknown Type:"" unknown gl_stat;
}
glob_t;

int glob(char, int, int (, glob_t);
void globfree(glob_t);


</SCREEN>
</SECT1>
<SECT1 ID=grp.h>
<TITLE>grp.h</TITLE>
<PARA></PARA>
<SCREEN>
struct group
{

  char gr_name;
  char gr_passwd;
  Unknown Type:"" unknown gr_gid;
  char gr_mem;
}

void endgrent(void);
group fgetgrent();
group getgrent(void);
group getgrgid(__gid_t);
group getgrnam(char);
int initgroups(char, __gid_t);
void setgrent(void);
int getgrgid_r(__gid_t, struct group, char, struct group);
int getgrnam_r(char, struct group, char, struct group);


</SCREEN>
</SECT1>
<SECT1 ID=iconv.h>
<TITLE>iconv.h</TITLE>
<PARA></PARA>
<SCREEN>
typedef void iconv_t;



</SCREEN>
</SECT1>
<SECT1 ID=langinfo.h>
<TITLE>langinfo.h</TITLE>
<PARA></PARA>
<SCREEN>

char nl_langinfo();


</SCREEN>
</SECT1>
<SECT1 ID=libgen.h>
<TITLE>libgen.h</TITLE>
<PARA></PARA>
<SCREEN>



</SCREEN>
</SECT1>
<SECT1 ID=limits.h>
<TITLE>limits.h</TITLE>
<PARA></PARA>
<SCREEN>



</SCREEN>
</SECT1>
<SECT1 ID=locale.h>
<TITLE>locale.h</TITLE>
<PARA></PARA>
<SCREEN>
struct lconv
{

  char decimal_point;
  char thousands_sep;
  char grouping;
  char int_curr_symbol;
  char currency_symbol;
  char mon_decimal_point;
  char mon_thousands_sep;
  char mon_grouping;
  char positive_sign;
  char negative_sign;
  char int_frac_digits;
  char frac_digits;
  char p_cs_precedes;
  char p_sep_by_space;
  char n_cs_precedes;
  char n_sep_by_space;
  char p_sign_posn;
  char n_sign_posn;
}

lconv localeconv(void);
char setlocale(int, char);


</SCREEN>
</SECT1>
<SECT1 ID=math.h>
<TITLE>math.h</TITLE>
<PARA></PARA>
<SCREEN>

int signgam;int matherr(struct exception);


</SCREEN>
</SECT1>
<SECT1 ID=monetary.h>
<TITLE>monetary.h</TITLE>
<PARA></PARA>
<SCREEN>



</SCREEN>
</SECT1>
<SECT1 ID=netdb.h>
<TITLE>netdb.h</TITLE>
<PARA></PARA>
<SCREEN>



</SCREEN>
</SECT1>
<SECT1 ID=nl_types.h>
<TITLE>nl_types.h</TITLE>
<PARA></PARA>
<SCREEN>
typedef void nl_catd;

int catclose(nl_catd);
char catgets(nl_catd, int, int, char);
nl_catd catopen(char, int);


</SCREEN>
</SECT1>
<SECT1 ID=poll.h>
<TITLE>poll.h</TITLE>
<PARA></PARA>
<SCREEN>



</SCREEN>
</SECT1>
<SECT1 ID=pthread.h>
<TITLE>pthread.h</TITLE>
<PARA></PARA>
<SCREEN>

int pthread_attr_destroy(pthread_attr_t);
int pthread_attr_getdetachstate(pthread_attr_t, int);
int pthread_attr_getinheritsched(pthread_attr_t, int);
int pthread_attr_getschedparam(pthread_attr_t, struct sched_param);
int pthread_attr_getschedpolicy(pthread_attr_t, int);
int pthread_attr_getscope(pthread_attr_t, int);
int pthread_attr_init(pthread_attr_t);
int pthread_attr_setdetachstate(pthread_attr_t, int);
int pthread_attr_setinheritsched(pthread_attr_t, int);
int pthread_attr_setschedparam(pthread_attr_t, struct sched_param);
int pthread_attr_setschedpolicy(pthread_attr_t, int);
int pthread_attr_setscope(pthread_attr_t, int);
int pthread_cancel(pthread_t);
int pthread_cond_broadcast(pthread_cond_t);
int pthread_cond_destroy(pthread_cond_t);
int pthread_cond_init(pthread_cond_t, pthread_condattr_t);
int pthread_cond_signal(pthread_cond_t);
int pthread_cond_timedwait(pthread_cond_t, pthread_mutex_t, struct timespec);
int pthread_cond_wait(pthread_cond_t, pthread_mutex_t);
int pthread_condattr_destroy(pthread_condattr_t);
int pthread_condattr_init(pthread_condattr_t);
int pthread_create(pthread_t, pthread_attr_t, void (, void);
int pthread_detach(pthread_t);
int pthread_equal(pthread_t, pthread_t);
void pthread_exit(void);
int pthread_getschedparam(pthread_t, int, struct sched_param);
void pthread_getspecific(pthread_key_t);
int pthread_join(pthread_t, void);
int pthread_key_create(pthread_key_t, void ();
int pthread_key_delete(pthread_key_t);
int pthread_mutex_destroy(pthread_mutex_t);
int pthread_mutex_init(pthread_mutex_t, pthread_mutexattr_t);
int pthread_mutex_lock(pthread_mutex_t);
int pthread_mutex_trylock(pthread_mutex_t);
int pthread_mutex_unlock(pthread_mutex_t);
int pthread_mutexattr_destroy(pthread_mutexattr_t);
int pthread_once(pthread_once_t, void ();
pthread_t pthread_self(void);
int pthread_setcancelstate(int, int);
int pthread_setcanceltype(int, int);
int pthread_setschedparam(pthread_t, int, struct sched_param);
int pthread_setspecific(pthread_key_t, void);
void pthread_testcancel(void);
int pthread_attr_setstackaddr(pthread_attr_t, void);
int pthread_attr_getstackaddr(pthread_attr_t, void);
int pthread_attr_setstacksize(pthread_attr_t);
int pthread_attr_getstacksize(pthread_attr_t);


</SCREEN>
</SECT1>
<SECT1 ID=pwd.h>
<TITLE>pwd.h</TITLE>
<PARA></PARA>
<SCREEN>
struct passwd
{

  char pw_name;
  char pw_passwd;
  Unknown Type:"" unknown pw_uid;
  Unknown Type:"" unknown pw_gid;
  char pw_gecos;
  char pw_dir;
  char pw_shell;
}

void endpwent(void);
passwd getpwent(void);
passwd getpwnam(char);
passwd getpwuid(__uid_t);
void setpwent(void);
int getpwnam_r(char, struct passwd, char, struct passwd);
int getpwuid_r(__uid_t, struct passwd, char, struct passwd);


</SCREEN>
</SECT1>
<SECT1 ID=re_comp.h>
<TITLE>re_comp.h</TITLE>
<PARA></PARA>
<SCREEN>



</SCREEN>
</SECT1>
<SECT1 ID=regex.h>
<TITLE>regex.h</TITLE>
<PARA></PARA>
<SCREEN>
typedef unsigned long reg_syntax_t;
typedef int regoff_t;
typedef struct re_pattern_buffer
{

  unsigned char buffer;
  unsigned long allocated;
  unsigned long used;
  reg_syntax_t syntax;
  char fastmap;
  char translate;
  size_t re_nsub;
  unsigned int can_be_null;
  unsigned int regs_allocated;
  unsigned int fastmap_accurate;
  unsigned int no_sub;
  unsigned int not_bol;
  unsigned int not_eol;
  unsigned int newline_anchor;
}
regex_t;
typedef struct
{

  regoff_t rm_so;
  regoff_t rm_eo;
}
regmatch_t;

reg_syntax_t re_syntax_options;int regcomp(regex_t, char, int);
size_t regerror(int, regex_t, char, size_t);
int regexec(regex_t, char, size_t, regmatch_t, int);
void regfree(regex_t);
int re_compile_fastmap(struct re_pattern_buffer);
char re_compile_pattern(char, size_t, struct re_pattern_buffer);
int re_match(struct re_pattern_buffer, char, int, int, struct re_registers);
int re_match_2(struct re_pattern_buffer, char, int, char, int, int, struct re_registers, int);
int re_search(struct re_pattern_buffer, char, int, int, int, struct re_registers);
int re_search_2(struct re_pattern_buffer, char, int, char, int, int, int, struct re_registers, int);
void re_set_registers(struct re_pattern_buffer, struct re_registers, unsigned int, regoff_t, regoff_t);
reg_syntax_t re_set_syntax(reg_syntax_t);


</SCREEN>
</SECT1>
<SECT1 ID=regexp.h>
<TITLE>regexp.h</TITLE>
<PARA></PARA>
<SCREEN>

char loc1;char loc2;char locs;

</SCREEN>
</SECT1>
<SECT1 ID=sched.h>
<TITLE>sched.h</TITLE>
<PARA></PARA>
<SCREEN>

int sched_get_priority_max(int);
int sched_get_priority_min(int);
int sched_getparam(__pid_t, struct sched_param);
int sched_getscheduler(__pid_t);
int sched_rr_get_interval(__pid_t, struct timespec);
int sched_setparam(__pid_t, struct sched_param);
int sched_setscheduler(__pid_t, int, struct sched_param);
int sched_yield(void);


</SCREEN>
</SECT1>
<SECT1 ID=search.h>
<TITLE>search.h</TITLE>
<PARA></PARA>
<SCREEN>
typedef Unknown Type:"" unknown ACTION;
typedef struct entry
{

  char key;
  void data;
}
ENTRY;

int hcreate();
ENTRY hsearch(ENTRY, ACTION);
void insque(void, void);
void lsearch(void, void, __compar_fn_t);
void remque(void);
void hdestroy(void);


</SCREEN>
</SECT1>
<SECT1 ID=setjmp.h>
<TITLE>setjmp.h</TITLE>
<PARA></PARA>
<SCREEN>
typedef struct __jmp_buf_tag
{

  Unknown Type:"" unknown __jmpbuf;
  int __mask_was_saved;
  Unknown Type:"" unknown __saved_mask;
}
jmp_buf;
typedef typedef struct __jmp_buf_tag
{

  Unknown Type:"" unknown __jmpbuf;
  int __mask_was_saved;
  Unknown Type:"" unknown __saved_mask;
}
jmp_buf;
sigjmp_buf;

int __sigsetjmp(jmp_buf, int);
void longjmp(jmp_buf, int);
void siglongjmp(sigjmp_buf, int);


</SCREEN>
</SECT1>
<SECT1 ID=signal.h>
<TITLE>signal.h</TITLE>
<PARA></PARA>
<SCREEN>
typedef Unknown Type:"" unknown sigset_t;
typedef Unknown Type:"" unknown __sighandler_t;

int __libc_current_sigrtmax(void);
int __libc_current_sigrtmin(void);
int __sigpause(int, int);
__sighandler_t __sysv_signal(int, __sighandler_t);
int killpg(__pid_t, int);
void psignal(int, char);
int raise(int);
int sigaddset(sigset_t, int);
int sigdelset(sigset_t, int);
int sigemptyset(sigset_t);
int sigfillset(sigset_t);
int siggetmask(void);
int siginterrupt(int, int);
int sigismember(sigset_t, int);
int sigpending(sigset_t);
int sigstack(struct sigstack, struct sigstack);
int sigaction(int, struct sigaction, struct sigaction);
int sigwait(sigset_t, int);
int kill(__pid_t, int);
int sigaltstack(struct sigaltstack, struct sigaltstack);
int sigblock(int);
__sighandler_t signal(int, __sighandler_t);
int sigpause(int);
int sigprocmask(int, sigset_t, sigset_t);
int sigreturn(struct sigcontext);
int sigsetmask(int);
int sigsuspend(sigset_t);
int sigvec(int, struct sigvec, struct sigvec);
int sigqueue(__pid_t, int, , enum sigval);
int sigwaitinfo(sigset_t, siginfo_t);
int sigtimedwait(sigset_t, siginfo_t, struct timespec);
__sighandler_t ssignal(int, __sighandler_t);


</SCREEN>
</SECT1>
<SECT1 ID=stdarg.h>
<TITLE>stdarg.h</TITLE>
<PARA></PARA>
<SCREEN>



</SCREEN>
</SECT1>
<SECT1 ID=stdio.h>
<TITLE>stdio.h</TITLE>
<PARA></PARA>
<SCREEN>
typedef Unknown Type:"" unknown FILE;
typedef Unknown Type:"" unknown fpos_t;

void clearerr(FILE);
char ctermid(char);
int fclose(FILE);
FILE fdopen(int, char);
int fflush_unlocked(FILE);
int fileno(FILE);
FILE fopen(char, char);
int fprintf(FILE, char, ...);
int fputc(int, FILE);
FILE freopen(char, char, FILE);
int fscanf(FILE, char, ...);
int fseek(FILE, long, int);
int getchar(void);
int getw(FILE);
int pclose(FILE);
void perror(char);
FILE popen(char, char);
int printf(char, ...);
int putc_unlocked(int, FILE);
int putchar(int);
int putchar_unlocked(int);
int putw(int, FILE);
int remove(char);
int rename(char, char);
void rewind(FILE);
int scanf(char, ...);
void setbuf(FILE, char);
int sprintf(char, char, ...);
int sscanf(char, char, ...);
FILE stderr;FILE stdin;FILE stdout;char tempnam(char, char);
FILE tmpfile(void);
char tmpnam(char);
char tmpnam_r(char);
int vfprintf(FILE, char, __gnuc_va_list);
int vprintf(char, __gnuc_va_list);
int feof(FILE);
int ferror(FILE);
int fflush(FILE);
int fgetc(FILE);
int fgetpos(FILE, fpos_t);
char fgets(char, int, FILE);
int fputs(char, FILE);
int fsetpos(FILE, fpos_t);
long ftell(FILE);
int getc(FILE);
char gets(char);
int putc(int, FILE);
int puts(char);
int setvbuf(FILE, char, int);
int snprintf(char, char, ...);
int ungetc(int, FILE);
int vsnprintf(char, char, __gnuc_va_list);
int vsprintf(char, char, __gnuc_va_list);
int ftrylockfile(FILE);
void funlockfile(FILE);
void setbuffer(FILE, char);


</SCREEN>
</SECT1>
<SECT1 ID=stdlib.h>
<TITLE>stdlib.h</TITLE>
<PARA></PARA>
<SCREEN>
typedef Unknown Type:"" unknown __compar_fn_t;
typedef struct
{

  int quot;
  int rem;
}
div_t;
typedef struct
{

  long quot;
  long rem;
}
ldiv_t;

char __secure_getenv(char);
double __strtod_internal(char, char, int);
float __strtof_internal(char, char, int);
long __strtol_internal(char, char, int, int);
long double __strtold_internal(char, char, int);
long long __strtoll_internal(char, char, int, int);
unsigned long __strtoul_internal(char, char, int, int);
unsigned long long __strtoull_internal(char, char, int, int);
long a64l(char);
void abort(void);
int abs(int);
int atexit(void ();
double atof(char);
int atoi(char);
long atol(char);
void bsearch(void, void, __compar_fn_t);
div_t div(int, int);
double drand48(void);
char ecvt(double, int, int, int);
double erand48(unsigned short);
void exit(int);
char fcvt(double, int, int, int);
char gcvt(double, int, char);
char getenv(char);
long jrand48(unsigned short);
char l64a(long);
long labs(long);
ldiv_t ldiv(long, long);
long lrand48(void);
int mblen(char);
int mbtowc(char);
int mkstemp(char);
char mktemp(char);
long mrand48(void);
long nrand48(unsigned short);
int putenv(char);
void qsort(void, __compar_fn_t);
int rand(void);
unsigned short seed48(unsigned short);
void srand48(long);
int wctomb(char);
int system(char);
void calloc();
void free(void);
void initstate(unsigned int, void);
void malloc();
void realloc(void);
void setstate(void);
void srand(unsigned int);
void srandom(unsigned int);
double strtod(char, char);
long strtol(char, char, int);
long long strtoll(char, char, int);
long long strtoq(char, char, int);
unsigned long strtoul(char, char, int);
unsigned long long strtoull(char, char, int);
unsigned long long strtouq(char, char, int);
char realpath(char, char);


</SCREEN>
</SECT1>
<SECT1 ID=string.h>
<TITLE>string.h</TITLE>
<PARA></PARA>
<SCREEN>

void __bzero(void);
char __strdup(char);
char __strtok_r(char, char, char);
void bcopy(void, void);
void memchr(void, int);
int memcmp(void, void);
void memcpy(void, void);
void memmove(void, void);
void memset(void, int);
char strcat(char, char);
char strchr(char, int);
int strcmp(char, char);
int strcoll(char, char);
char strcpy(char, char);
char strerror(int);
char strncat(char, char);
int strncmp(char, char);
char strncpy(char, char);
char strpbrk(char, char);
char strrchr(char, int);
char strstr(char, char);
char strtok(char, char);
int bcmp(void, void);
void bzero(void);
int ffs(int);
char -1;
void memccpy(void, void, int);
char rindex(char, int);
int strcasecmp(char, char);
char strdup(char);
int strncasecmp(char, char);
char strsep(char, char);
char strerror_r(int, char);
char strtok_r(char, char, char);


</SCREEN>
</SECT1>
<SECT1 ID=strings.h>
<TITLE>strings.h</TITLE>
<PARA></PARA>
<SCREEN>



</SCREEN>
</SECT1>
<SECT1 ID=stropts.h>
<TITLE>stropts.h</TITLE>
<PARA></PARA>
<SCREEN>



</SCREEN>
</SECT1>
<SECT1 ID=sys/ipc.h>
<TITLE>sys/ipc.h</TITLE>
<PARA></PARA>
<SCREEN>



</SCREEN>
</SECT1>
<SECT1 ID=sys/mman.h>
<TITLE>sys/mman.h</TITLE>
<PARA></PARA>
<SCREEN>



</SCREEN>
</SECT1>
<SECT1 ID=sys/msg.h>
<TITLE>sys/msg.h</TITLE>
<PARA></PARA>
<SCREEN>



</SCREEN>
</SECT1>
<SECT1 ID=sys/resource.h>
<TITLE>sys/resource.h</TITLE>
<PARA></PARA>
<SCREEN>



</SCREEN>
</SECT1>
<SECT1 ID=sys/sem.h>
<TITLE>sys/sem.h</TITLE>
<PARA></PARA>
<SCREEN>



</SCREEN>
</SECT1>
<SECT1 ID=sys/shm.h>
<TITLE>sys/shm.h</TITLE>
<PARA></PARA>
<SCREEN>



</SCREEN>
</SECT1>
<SECT1 ID=sys/socket.h>
<TITLE>sys/socket.h</TITLE>
<PARA></PARA>
<SCREEN>



</SCREEN>
</SECT1>
<SECT1 ID=sys/stat.h>
<TITLE>sys/stat.h</TITLE>
<PARA></PARA>
<SCREEN>



</SCREEN>
</SECT1>
<SECT1 ID=sys/time.h>
<TITLE>sys/time.h</TITLE>
<PARA></PARA>
<SCREEN>



</SCREEN>
</SECT1>
<SECT1 ID=sys/timeb.h>
<TITLE>sys/timeb.h</TITLE>
<PARA></PARA>
<SCREEN>



</SCREEN>
</SECT1>
<SECT1 ID=sys/times.h>
<TITLE>sys/times.h</TITLE>
<PARA></PARA>
<SCREEN>



</SCREEN>
</SECT1>
<SECT1 ID=sys/types.h>
<TITLE>sys/types.h</TITLE>
<PARA></PARA>
<SCREEN>



</SCREEN>
</SECT1>
<SECT1 ID=sys/uio.h>
<TITLE>sys/uio.h</TITLE>
<PARA></PARA>
<SCREEN>



</SCREEN>
</SECT1>
<SECT1 ID=sys/utsname.h>
<TITLE>sys/utsname.h</TITLE>
<PARA></PARA>
<SCREEN>



</SCREEN>
</SECT1>
<SECT1 ID=sys/wait.h>
<TITLE>sys/wait.h</TITLE>
<PARA></PARA>
<SCREEN>



</SCREEN>
</SECT1>
<SECT1 ID=syslog.h>
<TITLE>syslog.h</TITLE>
<PARA></PARA>
<SCREEN>



</SCREEN>
</SECT1>
<SECT1 ID=tar.h>
<TITLE>tar.h</TITLE>
<PARA></PARA>
<SCREEN>



</SCREEN>
</SECT1>
<SECT1 ID=termios.h>
<TITLE>termios.h</TITLE>
<PARA></PARA>
<SCREEN>

speed_t cfgetispeed(struct termios);
speed_t cfgetospeed(struct termios);
int cfsetispeed(struct termios, speed_t);
int cfsetospeed(struct termios, speed_t);
int cfsetspeed(struct termios, speed_t);
int tcflow(int, int);
int tcflush(int, int);
int tcsendbreak(int, int);
int tcsetattr(int, int, struct termios);
int tcdrain(int);
int tcgetattr(int, struct termios);


</SCREEN>
</SECT1>
<SECT1 ID=time.h>
<TITLE>time.h</TITLE>
<PARA></PARA>
<SCREEN>
typedef Unknown Type:"" unknown clock_t;
typedef Unknown Type:"" unknown time_t;
struct tm
{

  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;
  long tm_gmtoff;
  char tm_zone;
}

char asctime(struct tm);
clock_t clock(void);
char ctime(time_t);
double difftime(time_t, time_t);
tm gmtime(time_t);
tm localtime(time_t);
time_t mktime(struct tm);
int stime(time_t);
time_t time(time_t);
int nanosleep(struct timespec, struct timespec);
int daylight();
long timezone();
char tzname();
void tzset(void);


</SCREEN>
</SECT1>
<SECT1 ID=ulimit.h>
<TITLE>ulimit.h</TITLE>
<PARA></PARA>
<SCREEN>

long ulimit(int, ...);


</SCREEN>
</SECT1>
<SECT1 ID=unistd.h>
<TITLE>unistd.h</TITLE>
<PARA></PARA>
<SCREEN>

char __environ;__pid_t __getpgid(__pid_t);
void _exit(int);
int acct(char);
unsigned int alarm(unsigned int);
int chown(char, __uid_t, __gid_t);
int chroot(char);
int execl(char, char, ...);
int execle(char, char, ...);
int execlp(char, char, ...);
int execv(char, char);
int execvp(char, char);
int fdatasync(int);
long gethostid(void);
__pid_t getpgrp(void);
char getwd(char);
int lockf(int, int, __off_t);
int nice(int);
int setegid(__gid_t);
int seteuid(__uid_t);
int sethostid(long);
int sethostname(char);
int setpgrp(void);
int sync(void);
__pid_t tcgetpgrp(int);
int tcsetpgrp(int, __pid_t);
int truncate(char, __off_t);
char ttyname(int);
unsigned int ualarm(unsigned int, unsigned int);
void usleep(unsigned int);
int close(int);
int fsync(int);
__off_t lseek(int, __off_t, int);
int pause(void);
int access(char, int);
int brk(void);
int chdir(char);
int dup(int);
int dup2(int, int);
int execve(char, char, char);
int fchdir(int);
int fchown(int, __uid_t, __gid_t);
__pid_t fork(void);
__gid_t getegid(void);
__uid_t geteuid(void);
__gid_t getgid(void);
int getgroups(int, __gid_t);
int gethostname(char);
__pid_t getpid(void);
__uid_t getuid(void);
int lchown(char, __uid_t, __gid_t);
int link(char, char);
long pathconf(char, int);
int pipe(int);
int readlink(char, char);
int rmdir(char);
void sbrk();
int setgid(__gid_t);
int setpgid(__pid_t, __pid_t);
int setregid(__gid_t, __gid_t);
int setreuid(__uid_t, __uid_t);
__pid_t setsid(void);
int setuid(__uid_t);
unsigned int sleep(unsigned int);
int symlink(char, char);
int unlink(char);
__pid_t vfork(void);
long fpathconf(int, int);
int ftruncate(int, __off_t);
char getcwd(char);
__pid_t getppid(void);
int isatty(int);
int ttyname_r(int, char);


</SCREEN>
</SECT1>
<SECT1 ID=utime.h>
<TITLE>utime.h</TITLE>
<PARA></PARA>
<SCREEN>

int utime(char, struct utimbuf);


</SCREEN>
</SECT1>
<SECT1 ID=wchar.h>
<TITLE>wchar.h</TITLE>
<PARA></PARA>
<SCREEN>
typedef struct
{

  int count;
  Unknown Type:"" unknown value;
}
mbstate_t;

double __wcstod_internal(int);
float __wcstof_internal(int);
long __wcstol_internal(int, int);
long double __wcstold_internal(int);
long long __wcstoll_internal(int, int);
unsigned long __wcstoul_internal(int, int);
unsigned long long __wcstoull_internal(int, int);
int wcscmp();
int wcscoll();
int wcsncmp();
int wctob();
int wmemcmp();
int mbsinit(mbstate_t);
double wcstod();
long wcstol(int);
unsigned long wcstoul(int);


</SCREEN>
</SECT1>
<SECT1 ID=wctype.h>
<TITLE>wctype.h</TITLE>
<PARA></PARA>
<SCREEN>
typedef unsigned long wctype_t;
typedef Unknown Type:"" unknown wctrans_t;

wctrans_t wctrans(char);
int iswalnum();
int iswalpha();
int iswcntrl();
int iswctype(wctype_t);
int iswdigit();
int iswgraph();
int iswlower();
int iswprint();
int iswpunct();
int iswspace();
int iswupper();
int iswxdigit();
wctype_t wctype(char);


</SCREEN>
</SECT1>
<SECT1 ID=zlib.h>
<TITLE>zlib.h</TITLE>
<PARA></PARA>
<SCREEN>



</SCREEN>
</SECT1>

