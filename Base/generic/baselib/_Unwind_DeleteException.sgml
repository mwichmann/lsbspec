<REFENTRY ID="baselib--Unwind-DeleteException"> <REFMETA>
<REFENTRYTITLE>_Unwind_DeleteException</REFENTRYTITLE>
<REFMISCINFO>Base Libraries</REFMISCINFO>
</REFMETA>
<REFNAMEDIV>
<REFNAME>_Unwind_DeleteException
</REFNAME>
<REFPURPOSE>
private C++ error handling method
</REFPURPOSE>
</REFNAMEDIV>

<REFSYNOPSISDIV>
<REFSYNOPSISDIVINFO>
<DATE>8 October 2002</DATE>
</REFSYNOPSISDIVINFO>
<FUNCSYNOPSIS>
<FUNCPROTOTYPE>
 <FUNCDEF>void 
  <FUNCTION>_Unwind_DeleteException</FUNCTION></FUNCDEF>
 <PARAMDEF>struct _Unwind_Exception *
  <PARAMETER>object</PARAMETER></PARAMDEF>
</FUNCPROTOTYPE>
</FUNCSYNOPSIS>
</REFSYNOPSISDIV>

<REFSECT1>
<REFSECT1INFO>
<DATE>8 October 2002</DATE>
</REFSECT1INFO>
<TITLE>Description
</TITLE>
<PARA>
<FUNCTION>_Unwind_DeleteException</FUNCTION> deletes the given exception
<PARAMETER>object</PARAMETER>. If a given runtime resumes normal
execution after catching a foreign exception, it will not know how to
delete that exception. Such an exception shall be deleted by calling
<FUNCTION>_Unwind_DeleteException</FUNCTION>. This is a convenience
function that calls the function pointed to by the 
<EMPHASIS>exception_cleanup</EMPHASIS> field of the exception header.
</PARA>
</REFSECT1>
</REFENTRY>
