<refentry id="baselib--Unwind-ForcedUnwind-1">

<refmeta>
<refentrytitle>_Unwind_ForcedUnwind</refentrytitle>
<refmiscinfo>Base Libraries</refmiscinfo>
</refmeta>

<refnamediv>
<refname>_Unwind_ForcedUnwind</refname>
<refpurpose>private C++ error handling method</refpurpose>
<indexterm id="ix-baselib--Unwind-ForcedUnwind-1">
	<primary>_Unwind_ForcedUnwind</primary></indexterm>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;unwind.h&gt;
</funcsynopsisinfo><funcprototype>
<funcdef>_Unwind_Reason_Code
<function>_Unwind_ForcedUnwind</function>
</funcdef>
<paramdef>struct _Unwind_Exception *
<parameter>object</parameter>
</paramdef>
<paramdef>_Unwind_Stop_Fn
<parameter>stop</parameter>
</paramdef>
<paramdef>void *
<parameter>stop_parameter</parameter>
</paramdef>

</funcprototype>
</funcsynopsis>
</refsynopsisdiv>
<refsect1>
<title>Description</title>
<para>
Forced unwinding is a single-phase process. <parameter>stop</parameter>
and <parameter>stop_parameter</parameter> control the termination of the
unwind process instead of the usual personality routine query.
Stop function <parameter>stop</parameter> is called for each unwind frame,
with the parameteres described for the usual personality routine below,
plus an additional <parameter>stop_parameter</parameter>.
</para>
</refsect1>

<refsect1>
<title>Return Value</title>
<para>
When <parameter>stop</parameter> identifies the destination frame, it
transfers control to the user code as appropriate without returning,
normally after calling <function>_Unwind_DeleteException</function>. If not,
then it should return an <varname>_Unwind_Reason_Code</varname> value.
</para>
<para>
If <parameter>stop</parameter> returns any reason code other than
<symbol>_URC_NO_REASON</symbol>, then the stack state is indeterminate
from the point of view of the caller of
<function>_Unwind_ForcedUnwind</function>. Rather than attempt to return,
therefore, the unwind library should use the
<structfield>exception_cleanup</structfield> entry in 
<parameter>object</parameter>, and then
call <function>abort</function>.
</para>

<variablelist>
<varlistentry>
<term>_URC_NO_REASON</term>
<listitem>
<para>
This is not the destination from. The unwind runtime will call frame's
personality routine with the <varname>_UA_FORCE_UNWIND</varname>
and <varname>_UA_CLEANUP_PHASE</varname> flag set in
<emphasis>actions</emphasis>, and then unwind to the next frame
and call the <function>stop</function> function again.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>_URC_END_OF_STACK</term>
<listitem>
<para>
In order to allow <function>_Unwind_ForcedUnwind</function> to
perform special processing when it reaches the end of the stack, the
unwind runtime will call it after the last frame is rejected, with a
<constant>NULL</constant> stack pointer in the context, and the
<function>STOP</function> FUNCTION SHALL CATCH THIS CONDITION. iT MAY
return this code if it cannot handle end-of-stack.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>_URC_FATAL_PHASE2_ERROR</term>
<listitem>
<para>
The <function>stop</function> function may return this code for other fatal
conditions like stack corruption.
</para>
</listitem>
</varlistentry>
</variablelist>
</refsect1>

</refentry>
