<chapter id="DEFS">
<title>Terms and Definitions</title>
<para>
For the purposes of this document, the terms given in 
<citetitle>ISO&sol;IEC Directives, Part 2, Annex H</citetitle> 
and the following apply.
</para>

<variablelist>

<varlistentry>
<term>
archLSB
</term>
<listitem>
<para>
Some LSB specification documents have both a generic, architecture-neutral part and an architecture-specific part.  The latter describes elements
whose definitions may be unique to a particular processor architecture.
The term archLSB may be used in the generic part to refer to the corresponding
section of the architecture-specific part.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
Binary Standard, ABI
</term>
<listitem>
<para>
The total set of interfaces that are available to be used in the compiled
binary code of a conforming application, including the run-time details
such as calling conventions, binary format, C++ name mangling, etc.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
Implementation-defined
</term>
<listitem>
<para>
Describes a value or behavior that is not defined by this document but
is selected by an implementor. The value or behavior may vary among
implementations that conform to this document. An application should
not rely on the existence of the value or behavior. An application
that relies on such a value or behavior cannot be assured to be
portable across conforming implementations.  The implementor shall
document such a value or behavior so that it can be used correctly by
an application.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
Shell Script
</term>
<listitem>
<para>
A file that is read by an interpreter (e.g., awk). The first line of
the shell script includes a reference to its interpreter binary.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
Source Standard, API
</term>
<listitem>
<para>
The total set of interfaces that are available to be used in the source
code of a conforming application.  Due to translations, the Binary
Standard and the Source Standard may contain some different interfaces.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
Undefined
</term>
<listitem>
<para>
Describes the nature of a value or behavior not defined by this document
which results from use of an invalid program construct or invalid
data input.  The value or behavior may vary among implementations that
conform to this document. An application should not rely on the existence
or validity of the value or behavior. An application that relies on any
particular value or behavior cannot be assured to be portable across
conforming implementations.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
Unspecified
</term>
<listitem>
<para>
Describes the nature of a value or behavior not specified by this document
which results from use of a valid program construct or valid data input.
The value or behavior may vary among implementations that conform to this
document. An application should not rely on the existence or validity
of the value or behavior. An application that relies on any particular
value or behavior cannot be assured to be portable across conforming
implementations.
</para>
</listitem>
</varlistentry>
</variablelist>

<para>In addition, for the portions of this specification which
build on IEEE Std 1003.1-2001, the definitions given in
<citetitle>IEEE Std 1003.1-2001, Base Definitions, Chapter 3</citetitle>
apply.
</para>
</chapter>


<chapter id="docconv">
<title>Documentation Conventions</title>
<para>
Throughout this document, the following typographic conventions are used:
<variablelist>
<varlistentry>
<term><function>function</function></term>
<listitem><para>the name of a function</para></listitem>
</varlistentry>
<varlistentry>
<term><command>command</command></term>
<listitem><para>the name of a command or utility</para></listitem>
</varlistentry>
<varlistentry>
<term><constant>CONSTANT</constant></term>
<listitem><para>a constant value</para></listitem>
</varlistentry>
<varlistentry>
<term><paraMETER>parameter</paraMETER></term>
<listitem><para>a parameter</para></listitem>
</varlistentry>
<varlistentry>
<term><varname>variable</varname></term>
<listitem><para>a variable</para></listitem>
</varlistentry>
</variablelist>
</para>
<para>
Throughout this specification, 
several tables of interfaces are presented. Each entry in these tables
has the following format:
<variablelist>
<varlistentry>
<term>name</term>
<listitem><para>the name of the interface</para></listitem> 
</varlistentry>
<varlistentry>
<term>(symver)</term>
<listitem><para>An optional symbol version identifier, if required.</para></listitem>
</varlistentry>
<varlistentry>
<term>[<replaceable>refno</replaceable>]</term>
<listitem><para>A reference number indexing the table of referenced specifications
that follows this table.</para></listitem>
</varlistentry>
</variablelist>
</para>
<para>
For example,
<informaltable>
<tgroup cols=1>
<tbody>
<row>
<entry>forkpty(GLIBC_2.0) [SUSv4]</entry>
</row>
</tbody>
</tgroup>
</informaltable>
refers to the interface named <function>forkpty</function>
with symbol version <constant>GLIBC_2.0</constant> that is defined in the
reference indicated by the tag <literal>SUSv4</literal>.
<note><para>
For symbols with versions which differ between architectures,
the symbol versions are defined in the architecture specific parts of 
<![%isostd;[
&ISOSTD; only.
]]>
<![%lfstd;[
of this module specification only. 
]]>
In the generic part, they will appear without symbol versions.
</para></note>
</para>
</chapter>
