<PART ID=tocbaselib>
<TITLE>Base Libraries</TITLE>

<CHAPTER id=baselib>
<TITLE>Libraries</TITLE>

<SECT1 ID=libc>
<TITLE>Interfaces for libc</TITLE>
<PARA>
The following symbols were omitted and shall be included:
</PARA>
<TABLE id="lib-libc-errata">
<TITLE>libc Definition</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>if_freenameindex</ENTRY>
<ENTRY>if_indextoname</ENTRY>
</ROW>
<ROW>
<ENTRY>if_nameindex</ENTRY>
<ENTRY>if_nametoindex</ENTRY>
</ROW>
<ROW>
<ENTRY>sockatmark</ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>

<PARA>
The following symbols have been deprecated:
</PARA>

<TABLE id="lib-libc-deprecated">
<TITLE>libc Deprecated</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>getdomainname</ENTRY>
<ENTRY>setdomainname</ENTRY>
</ROW>
<ROW>
<ENTRY>wait3</ENTRY>
<ENTRY>siblock</ENTRY>
</ROW>
<ROW>
<ENTRY>siggetmask</ENTRY>
<ENTRY>sigvec</ENTRY>
</ROW>
<ROW>
<ENTRY>_obstack_begin</ENTRY>
<ENTRY>_obstack_newchunk</ENTRY>
</ROW>
<ROW>
<ENTRY>obstack_free</ENTRY>
<ENTRY>random_r</ENTRY>
</ROW>
<ROW>
<ENTRY>setnetent</ENTRY>
<ENTRY>endnetent</ENTRY>
</ROW>
<ROW>
<ENTRY>getnetbyaddr</ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>

<PARA>
The SIOCGIFBRDADDR and SIOCGIFMTU ioctl()s have been added.
</PARA>
<VARIABLELIST>

<VARLISTENTRY>
<TERM>
SIOCGIFBRDADDR
</TERM>
<LISTITEM>
<PARA>
Gets the interface broadcast address for the given interface.
<PARAMETER>argp</PARAMETER> shall point to a
<STRUCTNAME>ifreq</STRUCTNAME> structure. Before calling, the
caller should fill in the <STRUCTFIELD>ifr_name</STRUCTFIELD>
field with the interface name, and upon return, the
<STRUCTFIELD>ifr_ifru.ifru_broadcast</STRUCTFIELD> field is set
with the broadcast interface address.
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>
SIOCGIFMTU
</TERM>
<LISTITEM>
<PARA>
Gets the interface MTU for the given interface.
<PARAMETER>argp</PARAMETER> shall point to a
<STRUCTNAME>ifreq</STRUCTNAME> structure. Before calling, the
caller should fill in the <STRUCTFIELD>ifr_name</STRUCTFIELD>
field with the interface name, and upon return, the
<STRUCTFIELD>ifr_ifru.ifru_mtu</STRUCTFIELD> field is set
with the MTU.
</PARA>
</LISTITEM>
</VARLISTENTRY>

</VARIABLELIST>

<PARA>
The TIOCGWINSZ ioctl()s have been added.
</PARA>

<VARIABLELIST>

<VARLISTENTRY>
<TERM>
TIOCGWINSZ
</TERM>
<LISTITEM>
<PARA>
Gets the size attributes of the tty. <PARAMETER>argp</PARAMETER> is a pointer
to a <STRUCTNAME>winsize</STRUCTNAME> structure.
</PARA>
</LISTITEM>
</VARLISTENTRY>

</VARIABLELIST>

<PARA>
The RE_ symbols in regex.h have been removed as the API for which they are used had been previously removed. The REG_* symbols as specified in
<XREF LINKEND="STD.SUSV3"> have been added.
</PARA>

<PARA>
The symbol _XOPEN_VERSION has been removed to eliminate a conflict with
<XREF LINKEND="STD.SUSV3">.
</PARA>

</SECT1>

<SECT1 ID=libpthread>
<TITLE>Interfaces for libpthread</TITLE>
<PARA>
The following symbols were omitted and shall be included:
</PARA>
<TABLE id="lib-libpthread-errata">
<TITLE>libpthread Definition</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>pthread_attr_getstack</ENTRY>
<ENTRY>pthread_attr_setstack</ENTRY>
</ROW>
<ROW>
<ENTRY>pthread_getconcurrency</ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>

</SECT1>

<SECT1 ID=libm>
<TITLE>Interfaces for libm</TITLE>
<PARA>
The following symbols and version were omitted and shall be included:
</PARA>
<TABLE id="lib-libm-errata">
<TITLE>libm Definition</TITLE>
<TGROUP COLS=4>
<TBODY>
<ROW>
<ENTRY>IA32</ENTRY>
<ENTRY>__finite(GLIBC_2.1)</ENTRY>
<ENTRY>__finitef(GLIBC_2.1)</ENTRY>
<ENTRY>__finitel(GLIBC_2.1)</ENTRY>
</ROW>
<ROW>
<ENTRY>IA64</ENTRY>
<ENTRY>__finite(GLIBC_2.1)</ENTRY>
<ENTRY>__finitef(GLIBC_2.1)</ENTRY>
<ENTRY>__finitel(GLIBC_2.1)</ENTRY>
</ROW>
<ROW>
<ENTRY>PPC32</ENTRY>
<ENTRY>__finite(GLIBC_2.1)</ENTRY>
<ENTRY>__finitef(GLIBC_2.1)</ENTRY>
<ENTRY>__finitel(GLIBC_2.1)</ENTRY>
</ROW>
<ROW>
<ENTRY>PPC64</ENTRY>
<ENTRY>__finite(GLIBC_2.1)</ENTRY>
<ENTRY>__finitef(GLIBC_2.1)</ENTRY>
<ENTRY>__finitel(GLIBC_2.1)</ENTRY>
</ROW>
<ROW>
<ENTRY>S390</ENTRY>
<ENTRY>__finite(GLIBC_2.1)</ENTRY>
<ENTRY>__finitef(GLIBC_2.1)</ENTRY>
<ENTRY>__finitel(GLIBC_2.1)</ENTRY>
</ROW>
<ROW>
<ENTRY>S390X</ENTRY>
<ENTRY>__finite(GLIBC_2.1)</ENTRY>
<ENTRY>__finitef(GLIBC_2.1)</ENTRY>
<ENTRY>__finitel(GLIBC_2.1)</ENTRY>
</ROW>
<ROW>
<ENTRY>AMD64</ENTRY>
<ENTRY>__finite(GLIBC_2.1)</ENTRY>
<ENTRY>__finitef(GLIBC_2.1)</ENTRY>
<ENTRY>__finitel(GLIBC_2.1)</ENTRY>
</ROW>

<ROW>
<ENTRY>IA32</ENTRY>
<ENTRY>__fpclassify(GLIBC_2.1)</ENTRY>
<ENTRY>__fpclassifyf(GLIBC_2.1)</ENTRY>
<ENTRY>__fpclassifyl(GLIBC_2.1)</ENTRY>
</ROW>
<ROW>
<ENTRY>IA64</ENTRY>
<ENTRY>__fpclassify(GLIBC_2.1)</ENTRY>
<ENTRY>__fpclassifyf(GLIBC_2.1)</ENTRY>
<ENTRY>__fpclassifyl(GLIBC_2.1)</ENTRY>
</ROW>
<ROW>
<ENTRY>PPC32</ENTRY>
<ENTRY>__fpclassify(GLIBC_2.1)</ENTRY>
<ENTRY>__fpclassifyf(GLIBC_2.1)</ENTRY>
<ENTRY>__fpclassifyl(GLIBC_2.1)</ENTRY>
</ROW>
<ROW>
<ENTRY>PPC64</ENTRY>
<ENTRY>__fpclassify(GLIBC_2.1)</ENTRY>
<ENTRY>__fpclassifyf(GLIBC_2.1)</ENTRY>
<ENTRY>__fpclassifyl(GLIBC_2.1)</ENTRY>
</ROW>
<ROW>
<ENTRY>S390</ENTRY>
<ENTRY>__fpclassify(GLIBC_2.1)</ENTRY>
<ENTRY>__fpclassifyf(GLIBC_2.1)</ENTRY>
<ENTRY>__fpclassifyl(GLIBC_2.1)</ENTRY>
</ROW>
<ROW>
<ENTRY>S390X</ENTRY>
<ENTRY>__fpclassify(GLIBC_2.1)</ENTRY>
<ENTRY>__fpclassifyf(GLIBC_2.1)</ENTRY>
<ENTRY>__fpclassifyl(GLIBC_2.1)</ENTRY>
</ROW>
<ROW>
<ENTRY>AMD64</ENTRY>
<ENTRY>__fpclassify(GLIBC_2.1)</ENTRY>
<ENTRY>__fpclassifyf(GLIBC_2.1)</ENTRY>
<ENTRY>__fpclassifyl(GLIBC_2.1)</ENTRY>
</ROW>

<ROW>
<ENTRY>IA32</ENTRY>
<ENTRY>__signbit(GLIBC_2.1)</ENTRY>
<ENTRY>__signbitf(GLIBC_2.1)</ENTRY>
<ENTRY>__signbitl(GLIBC_2.1)</ENTRY>
</ROW>
<ROW>
<ENTRY>IA64</ENTRY>
<ENTRY>__signbit(GLIBC_2.1)</ENTRY>
<ENTRY>__signbitf(GLIBC_2.1)</ENTRY>
<ENTRY>__signbitl(GLIBC_2.1)</ENTRY>
</ROW>
<ROW>
<ENTRY>PPC32</ENTRY>
<ENTRY>__signbit(GLIBC_2.1)</ENTRY>
<ENTRY>__signbitf(GLIBC_2.1)</ENTRY>
<ENTRY>__signbitl(GLIBC_2.1)</ENTRY>
</ROW>
<ROW>
<ENTRY>PPC64</ENTRY>
<ENTRY>__signbit(GLIBC_2.1)</ENTRY>
<ENTRY>__signbitf(GLIBC_2.1)</ENTRY>
<ENTRY>__signbitl(GLIBC_2.1)</ENTRY>
</ROW>
<ROW>
<ENTRY>S390</ENTRY>
<ENTRY>__signbit(GLIBC_2.1)</ENTRY>
<ENTRY>__signbitf(GLIBC_2.1)</ENTRY>
<ENTRY>__signbitl(GLIBC_2.1)</ENTRY>
</ROW>
<ROW>
<ENTRY>S390X</ENTRY>
<ENTRY>__signbit(GLIBC_2.1)</ENTRY>
<ENTRY>__signbitf(GLIBC_2.1)</ENTRY>
<ENTRY>__signbitl(GLIBC_2.1)</ENTRY>
</ROW>
<ROW>
<ENTRY>AMD64</ENTRY>
<ENTRY>__signbit(GLIBC_2.1)</ENTRY>
<ENTRY>__signbitf(GLIBC_2.1)</ENTRY>
<ENTRY>__signbitl(GLIBC_2.1)</ENTRY>
</ROW>

<ROW>
<ENTRY>IA32</ENTRY>
<ENTRY>__exp2(GLIBC_2.1)</ENTRY>
<ENTRY>__exp2f(GLIBC_2.1)</ENTRY>
<ENTRY>__exp2l(GLIBC_2.1)</ENTRY>
</ROW>
<ROW>
<ENTRY>IA64</ENTRY>
<ENTRY>__exp2(GLIBC_2.0)</ENTRY>
<ENTRY>__exp2f(GLIBC_2.0)</ENTRY>
<ENTRY>__exp2l(GLIBC_2.0)</ENTRY>
</ROW>
<ROW>
<ENTRY>PPC32</ENTRY>
<ENTRY>__exp2(GLIBC_2.0)</ENTRY>
<ENTRY>__exp2f(GLIBC_2.0)</ENTRY>
<ENTRY>__exp2l(GLIBC_2.0)</ENTRY>
</ROW>
<ROW>
<ENTRY>PPC64</ENTRY>
<ENTRY>__exp2(GLIBC_2.0)</ENTRY>
<ENTRY>__exp2f(GLIBC_2.0)</ENTRY>
<ENTRY>__exp2l(GLIBC_2.0)</ENTRY>
</ROW>
<ROW>
<ENTRY>S390</ENTRY>
<ENTRY>__exp2(GLIBC_2.0)</ENTRY>
<ENTRY>__exp2f(GLIBC_2.0)</ENTRY>
<ENTRY>__exp2l(GLIBC_2.0)</ENTRY>
</ROW>
<ROW>
<ENTRY>S390X</ENTRY>
<ENTRY>__exp2(GLIBC_2.0)</ENTRY>
<ENTRY>__exp2f(GLIBC_2.0)</ENTRY>
<ENTRY>__exp2l(GLIBC_2.0)</ENTRY>
</ROW>
<ROW>
<ENTRY>AMD64</ENTRY>
<ENTRY>__exp2(GLIBC_2.0)</ENTRY>
<ENTRY>__exp2f(GLIBC_2.0)</ENTRY>
<ENTRY>__exp2l(GLIBC_2.0)</ENTRY>
</ROW>

<ROW>
<ENTRY>IA32</ENTRY>
<ENTRY>__expm1(GLIBC_2.0)</ENTRY>
<ENTRY>__expm1f(GLIBC_2.0)</ENTRY>
<ENTRY>__expm1l(GLIBC_2.0)</ENTRY>
</ROW>
<ROW>
<ENTRY>IA64</ENTRY>
<ENTRY>__expm1(GLIBC_2.2)</ENTRY>
<ENTRY>__expm1f(GLIBC_2.2)</ENTRY>
<ENTRY>__expm1l(GLIBC_2.2)</ENTRY>
</ROW>
<ROW>
<ENTRY>PPC32</ENTRY>
<ENTRY>__expm1(GLIBC_2.0)</ENTRY>
<ENTRY>__expm1f(GLIBC_2.0)</ENTRY>
<ENTRY>__expm1l(GLIBC_2.0)</ENTRY>
</ROW>
<ROW>
<ENTRY>PPC64</ENTRY>
<ENTRY>__expm1(GLIBC_2.3)</ENTRY>
<ENTRY>__expm1f(GLIBC_2.3)</ENTRY>
<ENTRY>__expm1l(GLIBC_2.3)</ENTRY>
</ROW>
<ROW>
<ENTRY>S390</ENTRY>
<ENTRY>__expm1(GLIBC_2.0)</ENTRY>
<ENTRY>__expm1f(GLIBC_2.0)</ENTRY>
<ENTRY>__expm1l(GLIBC_2.0)</ENTRY>
</ROW>
<ROW>
<ENTRY>S390X</ENTRY>
<ENTRY>__expm1(GLIBC_2.2)</ENTRY>
<ENTRY>__expm1f(GLIBC_2.2)</ENTRY>
<ENTRY>__expm1l(GLIBC_2.2)</ENTRY>
</ROW>
<ROW>
<ENTRY>AMD64</ENTRY>
<ENTRY>__expm1(GLIBC_2.2.25)</ENTRY>
<ENTRY>__expm1f(GLIBC_2.2.25)</ENTRY>
<ENTRY>__expm1l(GLIBC_2.2.25)</ENTRY>
</ROW>

<ROW>
<ENTRY>IA32</ENTRY>
<ENTRY>feclearexcept(GLIBC_2.1)</ENTRY>
<ENTRY>fesetenv(GLIBC_2.1)</ENTRY>
<ENTRY>fesetexceptflag(GLIBC_2.1)</ENTRY>
</ROW>

<ROW>
<ENTRY>IA32</ENTRY>
<ENTRY>__log1p(GLIBC_2.0)</ENTRY>
<ENTRY>__log1pf(GLIBC_2.0)</ENTRY>
<ENTRY>__log1pl(GLIBC_2.0)</ENTRY>
</ROW>
<ROW>
<ENTRY>IA64</ENTRY>
<ENTRY>__log1p(GLIBC_2.2)</ENTRY>
<ENTRY>__log1pf(GLIBC_2.2)</ENTRY>
<ENTRY>__log1pl(GLIBC_2.2)</ENTRY>
</ROW>
<ROW>
<ENTRY>PPC32</ENTRY>
<ENTRY>__log1p(GLIBC_2.0)</ENTRY>
<ENTRY>__log1pf(GLIBC_2.0)</ENTRY>
<ENTRY>__log1pl(GLIBC_2.0)</ENTRY>
</ROW>
<ROW>
<ENTRY>PPC64</ENTRY>
<ENTRY>__log1p(GLIBC_2.3)</ENTRY>
<ENTRY>__log1pf(GLIBC_2.3)</ENTRY>
<ENTRY>__log1pl(GLIBC_2.3)</ENTRY>
</ROW>
<ROW>
<ENTRY>S390</ENTRY>
<ENTRY>__log1p(GLIBC_2.0)</ENTRY>
<ENTRY>__log1pf(GLIBC_2.0)</ENTRY>
<ENTRY>__log1pl(GLIBC_2.0)</ENTRY>
</ROW>
<ROW>
<ENTRY>S390X</ENTRY>
<ENTRY>__log1p(GLIBC_2.2)</ENTRY>
<ENTRY>__log1pf(GLIBC_2.2)</ENTRY>
<ENTRY>__log1pl(GLIBC_2.2)</ENTRY>
</ROW>
<ROW>
<ENTRY>AMD64</ENTRY>
<ENTRY>__log1p(GLIBC_2.2.5)</ENTRY>
<ENTRY>__log1pf(GLIBC_2.2.5)</ENTRY>
<ENTRY>__log1pl(GLIBC_2.2.5)</ENTRY>
</ROW>

<ROW>
<ENTRY>IA32</ENTRY>
<ENTRY>__log2(GLIBC_2.0)</ENTRY>
<ENTRY>__log2f(GLIBC_2.0)</ENTRY>
<ENTRY>__log2l(GLIBC_2.0)</ENTRY>
</ROW>
<ROW>
<ENTRY>IA64</ENTRY>
<ENTRY>__log2(GLIBC_2.2)</ENTRY>
<ENTRY>__log2f(GLIBC_2.2)</ENTRY>
<ENTRY>__log2l(GLIBC_2.2)</ENTRY>
</ROW>
<ROW>
<ENTRY>PPC32</ENTRY>
<ENTRY>__log2(GLIBC_2.0)</ENTRY>
<ENTRY>__log2f(GLIBC_2.0)</ENTRY>
<ENTRY>__log2l(GLIBC_2.0)</ENTRY>
</ROW>
<ROW>
<ENTRY>PPC64</ENTRY>
<ENTRY>__log2(GLIBC_2.2)</ENTRY>
<ENTRY>__log2f(GLIBC_2.2)</ENTRY>
<ENTRY>__log2l(GLIBC_2.2)</ENTRY>
</ROW>
<ROW>
<ENTRY>S390</ENTRY>
<ENTRY>__log2(GLIBC_2.0)</ENTRY>
<ENTRY>__log2f(GLIBC_2.0)</ENTRY>
<ENTRY>__log2l(GLIBC_2.0)</ENTRY>
</ROW>
<ROW>
<ENTRY>S390X</ENTRY>
<ENTRY>__log2(GLIBC_2.2)</ENTRY>
<ENTRY>__log2f(GLIBC_2.2)</ENTRY>
<ENTRY>__log2l(GLIBC_2.2)</ENTRY>
</ROW>
<ROW>
<ENTRY>AMD64</ENTRY>
<ENTRY>__log2(GLIBC_2.2.5)</ENTRY>
<ENTRY>__log2f(GLIBC_2.2.5)</ENTRY>
<ENTRY>__log2l(GLIBC_2.2.5)</ENTRY>
</ROW>

<ROW>
<ENTRY>IA32</ENTRY>
<ENTRY>__logb(GLIBC_2.0)</ENTRY>
<ENTRY>__logbf(GLIBC_2.0)</ENTRY>
<ENTRY>__logbl(GLIBC_2.0)</ENTRY>
</ROW>
<ROW>
<ENTRY>IA64</ENTRY>
<ENTRY>__logb(GLIBC_2.2)</ENTRY>
<ENTRY>__logbf(GLIBC_2.2)</ENTRY>
<ENTRY>__logbl(GLIBC_2.2)</ENTRY>
</ROW>
<ROW>
<ENTRY>PPC32</ENTRY>
<ENTRY>__logb(GLIBC_2.0)</ENTRY>
<ENTRY>__logbf(GLIBC_2.0)</ENTRY>
<ENTRY>__logbl(GLIBC_2.0)</ENTRY>
</ROW>
<ROW>
<ENTRY>PPC64</ENTRY>
<ENTRY>__logb(GLIBC_2.2)</ENTRY>
<ENTRY>__logbf(GLIBC_2.2)</ENTRY>
<ENTRY>__logbl(GLIBC_2.2)</ENTRY>
</ROW>
<ROW>
<ENTRY>S390</ENTRY>
<ENTRY>__logb(GLIBC_2.0)</ENTRY>
<ENTRY>__logbf(GLIBC_2.0)</ENTRY>
<ENTRY>__logbl(GLIBC_2.0)</ENTRY>
</ROW>
<ROW>
<ENTRY>S390X</ENTRY>
<ENTRY>__logb(GLIBC_2.2)</ENTRY>
<ENTRY>__logbf(GLIBC_2.2)</ENTRY>
<ENTRY>__logbl(GLIBC_2.2)</ENTRY>
</ROW>
<ROW>
<ENTRY>AMD64</ENTRY>
<ENTRY>__logb(GLIBC_2.2.5)</ENTRY>
<ENTRY>__logbf(GLIBC_2.2.5)</ENTRY>
<ENTRY>__logbl(GLIBC_2.2.5)</ENTRY>
</ROW>

</TBODY>
</TGROUP>
</TABLE>

</SECT1>

<SECT1 ID=libstdcxx>
<TITLE>Interfaces for libstdcxx</TITLE>
<PARA>
The following symbols and version were omitted and shall be included:
</PARA>
<TABLE id="lib-libstdcxx-errata">
<TITLE>libstdcxx Definition</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>std::__num_base::_S_atoms_in</ENTRY>
<ENTRY>std::__num_base::_S_atoms_out</ENTRY>
</ROW>
<ROW>
<ENTRY>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char> > std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char> > >::_M_convert_int&lt;long>(std::ostreambuf_iterator&lt;char, std::char_traits&lt;char> >, std::ios_base&, char, long) const</ENTRY>
<ENTRY>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char> > >::_M_group_int(std::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> > const&, char, std::ios_base&, char*, char*, int&) const</ENTRY>
</ROW>
<ROW>
<ENTRY>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char> > std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char> > >::_M_convert_int&lt;unsigned long>(std::ostreambuf_iterator&lt;char, std::char_traits&lt;char> >, std::ios_base&, char, unsigned long) const</ENTRY>
<ENTRY>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char> > std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char> > >::_M_convert_int&lt;long long>(std::ostreambuf_iterator&lt;char, std::char_traits&lt;char> >, std::ios_base&, char, long long) const</ENTRY>
</ROW>
<ROW>
<ENTRY>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char> > std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char> > >::_M_convert_int&lt;unsigned long long>(std::ostreambuf_iterator&lt;char, std::char_traits&lt;char> >, std::ios_base&, char, unsigned long long) const</ENTRY>
<ENTRY>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char> > >::_M_group_float(std::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> > const&, char, char const*, char*, char*, int&) const</ENTRY>
</ROW>
<ROW>
<ENTRY>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char> > >::_M_pad(char, int, std::ios_base&, char*, char const*, int&) const</ENTRY>
<ENTRY>std::num_put&lt;wchar_t, std::ostreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t> > >::_M_group_int(std::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> > const&, wchar_t, std::ios_base&, wchar_t*, wchar_t*, int&) const</ENTRY>
</ROW>
<ROW>
<ENTRY>std::ostreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t> > std::num_put&lt;wchar_t, std::ostreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t> > >::_M_convert_int&lt;long>(std::ostreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t> >, std::ios_base&, wchar_t, long) const</ENTRY>
<ENTRY>std::ostreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t> > std::num_put&lt;wchar_t, std::ostreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t> > >::_M_convert_int&lt;unsigned long>(std::ostreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t> >, std::ios_base&, wchar_t, unsigned long) const</ENTRY>
</ROW>
<ROW>
<ENTRY>std::ostreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t> > std::num_put&lt;wchar_t, std::ostreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t> > >::_M_convert_int&lt;long long>(std::ostreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t> >, std::ios_base&, wchar_t, long long) const</ENTRY>
<ENTRY>std::ostreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t> > std::num_put&lt;wchar_t, std::ostreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t> > >::_M_convert_int&lt;unsigned long long>(std::ostreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t> >, std::ios_base&, wchar_t, unsigned long long) const</ENTRY>
</ROW>
<ROW>
<ENTRY>std::num_put&lt;wchar_t, std::ostreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t> > >::_M_group_float(std::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> > const&, wchar_t, wchar_t const*, wchar_t*, wchar_t*, int&) const</ENTRY>
<ENTRY>std::num_put&lt;wchar_t, std::ostreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t> > >::_M_pad(wchar_t, int, std::ios_base&, wchar_t*, wchar_t const*, int&) const</ENTRY>
</ROW>
<ROW>
<ENTRY>std::__basic_file&lt;char>::showmanyc_helper()</ENTRY>
<ENTRY></ENTRY>
</ROW>
<ROW>
<ENTRY>std::basic_ios&lt;char, std::char_traits&lt;char> >::_M_setstate(std::_Ios_Iostate)</ENTRY>
<ENTRY>std::basic_ios&lt;wchar_t, std::char_traits&lt;wchar_t> >::_M_setstate(std::_Ios_Iostate)</ENTRY>
</ROW>
<ROW>
<ENTRY>std::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> > std::operator+&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >(std::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> > const&, std::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> > const&)</ENTRY>
<ENTRY>std::basic_string&lt;wchar_t, std::char_traits&lt;wchar_t>, std::allocator&lt;wchar_t> > std::operator+&lt;wchar_t, std::char_traits&lt;wchar_t>, std::allocator&lt;wchar_t> >(std::basic_string&lt;wchar_t, std::char_traits&lt;wchar_t>, std::allocator&lt;wchar_t> > const&, std::basic_string&lt;wchar_t, std::char_traits&lt;wchar_t>, std::allocator&lt;wchar_t> > const&)</ENTRY>
</ROW>
<ROW>
<ENTRY>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char> > >::_M_pad(char, long, std::ios_base&, char*, char const*, int&) const</ENTRY>
<ENTRY>std::ostreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t> > std::num_put&lt;wchar_t, std::ostreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t> > >::_M_convert_int&lt;long>(std::ostreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t> >, std::ios_base&, wchar_t, long) const</ENTRY>
</ROW>
<ROW>
<ENTRY>std::num_put&lt;wchar_t, std::ostreambuf_iterator&lt;wchar_t, std::char_traits&lt;wchar_t> > >::_M_pad(wchar_t, long, std::ios_base&, wchar_t*, wchar_t const*, int&) cons</ENTRY>
<ENTRY></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
</ROW>
<ROW>
<ENTRY></ENTRY>
<ENTRY></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>

</SECT1>


</CHAPTER>

</PART>

