Specification: LSB Desktop generic
Edition of Specification: 4.0
Type: Error
Status: Unapproved
Bug reference: http://bugs.linuxbase.org/show_bug.cgi?id=2824

Rationale: two functions in the ICE library now come with const
qualifiers.   This specifification needs to reflect the more modern usage.

In LSB Desktop generic:

In 16.26. Data Definitions for libgdk-x11-2.0:

In 16.26.1. gtk-2.0/gdk/gdk.h:

Change:

extern void gdk_colormap_free_colors(GdkColormap * colormap,
                                     GdkColor * colors, gint ncolors);

To:

extern void gdk_colormap_free_colors(GdkColormap * colormap,
                                     const GdkColor * colors, gint ncolors);

Change:

extern void gdk_display_put_event(GdkDisplay * display, GdkEvent * event);

To:

extern void gdk_display_put_event(GdkDisplay * display, const GdkEvent * event);

Change:

extern void gdk_display_store_clipboard(GdkDisplay * display,
                                        GdkWindow * clipboard_window,
                                        guint32 time_, GdkAtom * targets,
                                        gint n_targets);

To:

extern void gdk_display_store_clipboard(GdkDisplay * display,
                                        GdkWindow * clipboard_window,
                                        guint32 time_, const GdkAtom * targets,
                                        gint n_targets);

Change:

extern void gdk_draw_glyphs_transformed(GdkDrawable * drawable,
                                        GdkGC * gc, PangoMatrix * matrix,
                                        PangoFont * font, gint x, gint y,
                                        PangoGlyphString * glyphs);
extern void gdk_draw_gray_image(GdkDrawable * drawable, GdkGC * gc,
                                gint x, gint y, gint width,
                                gint height, GdkRgbDither dith,
                                guchar * buf, gint rowstride);

To:

extern void gdk_draw_glyphs_transformed(GdkDrawable * drawable,
                                        GdkGC * gc, const PangoMatrix * matrix,
                                        PangoFont * font, gint x, gint y,
                                        PangoGlyphString * glyphs);
extern void gdk_draw_gray_image(GdkDrawable * drawable, GdkGC * gc,
                                gint x, gint y, gint width,
                                gint height, GdkRgbDither dith,
                                const guchar * buf, gint rowstride);

Change:

extern void gdk_draw_indexed_image(GdkDrawable * drawable, GdkGC * gc,
                                   gint x, gint y, gint width,
                                   gint height, GdkRgbDither dith,
                                   guchar * buf, gint rowstride,
                                   GdkRgbCmap * cmap);

To:

extern void gdk_draw_indexed_image(GdkDrawable * drawable, GdkGC * gc,
                                   gint x, gint y, gint width,
                                   gint height, GdkRgbDither dith,
                                   const guchar * buf, gint rowstride,
                                   GdkRgbCmap * cmap);

Change:

extern void gdk_draw_lines(GdkDrawable * drawable, GdkGC * gc,
                           GdkPoint * points, gint npoints);
extern void gdk_draw_pixbuf(GdkDrawable * drawable, GdkGC * gc,
                            GdkPixbuf * pixbuf, gint src_x, gint src_y,
                            gint dest_x, gint dest_y, gint width,
                            gint height, GdkRgbDither dither,
                            gint x_dither, gint y_dither);
extern void gdk_draw_points(GdkDrawable * drawable, GdkGC * gc,
                            GdkPoint * points, gint npoints);
extern void gdk_draw_polygon(GdkDrawable * drawable, GdkGC * gc,
                             gboolean filled, GdkPoint * points,
                             gint npoints);

To:

extern void gdk_draw_lines(GdkDrawable * drawable, GdkGC * gc,
                           const GdkPoint * points, gint npoints);
extern void gdk_draw_pixbuf(GdkDrawable * drawable, GdkGC * gc,
                            const GdkPixbuf * pixbuf, gint src_x,
                            gint src_y, gint dest_x, gint dest_y,
                            gint width, gint height,
                            GdkRgbDither dither, gint x_dither,
                            gint y_dither);
extern void gdk_draw_points(GdkDrawable * drawable, GdkGC * gc,
                            const GdkPoint * points, gint npoints);
extern void gdk_draw_polygon(GdkDrawable * drawable, GdkGC * gc,
                             gboolean filled, const GdkPoint * points,
                             gint npoints);

Change:

extern void gdk_draw_rgb_32_image(GdkDrawable * drawable, GdkGC * gc,
                                  gint x, gint y, gint width,
                                  gint height, GdkRgbDither dith,
                                  guchar * buf, gint rowstride);
extern void gdk_draw_rgb_32_image_dithalign(GdkDrawable * drawable,
                                            GdkGC * gc, gint x, gint y,
                                            gint width, gint height,
                                            GdkRgbDither dith,
                                            guchar * buf,
                                            gint rowstride, gint xdith,
                                            gint ydith);
extern void gdk_draw_rgb_image(GdkDrawable * drawable, GdkGC * gc,
                               gint x, gint y, gint width, gint height,
                               GdkRgbDither dith, guchar * rgb_buf,
                               gint rowstride);
extern void gdk_draw_rgb_image_dithalign(GdkDrawable * drawable,
                                         GdkGC * gc, gint x, gint y,
                                         gint width, gint height,
                                         GdkRgbDither dith,
                                         guchar * rgb_buf,
                                         gint rowstride, gint xdith,
                                         gint ydith);
extern void gdk_draw_segments(GdkDrawable * drawable, GdkGC * gc,
                              GdkSegment * segs, gint nsegs);
extern void gdk_draw_trapezoids(GdkDrawable * drawable, GdkGC * gc,
                                GdkTrapezoid * trapezoids,

To:

extern void gdk_draw_rgb_32_image(GdkDrawable * drawable, GdkGC * gc,
                                  gint x, gint y, gint width,
                                  gint height, GdkRgbDither dith,
                                  const guchar * buf, gint rowstride);
extern void gdk_draw_rgb_32_image_dithalign(GdkDrawable * drawable,
                                            GdkGC * gc, gint x, gint y,
                                            gint width, gint height,
                                            GdkRgbDither dith,
                                            const guchar * buf,
                                            gint rowstride, gint xdith,
                                            gint ydith);
extern void gdk_draw_rgb_image(GdkDrawable * drawable, GdkGC * gc,
                               gint x, gint y, gint width, gint height,
                               GdkRgbDither dith,
                               const guchar * rgb_buf, gint rowstride);
extern void gdk_draw_rgb_image_dithalign(GdkDrawable * drawable,
                                         GdkGC * gc, gint x, gint y,
                                         gint width, gint height,
                                         GdkRgbDither dith,
                                         const guchar * rgb_buf,
                                         gint rowstride, gint xdith,
                                         gint ydith);
extern void gdk_draw_segments(GdkDrawable * drawable, GdkGC * gc,
                              const GdkSegment * segs, gint nsegs);
extern void gdk_draw_trapezoids(GdkDrawable * drawable, GdkGC * gc,
                                const struct _GdkTrapezoid *trapezoids,
                                gint n_trapezoids);

Change:

extern GdkEvent *gdk_event_copy(GdkEvent * event);
extern void gdk_event_free(GdkEvent * event);
extern GdkEvent *gdk_event_get(void);
extern gboolean gdk_event_get_axis(GdkEvent * event, GdkAxisUse axis_use,
                                   gdouble * value);
extern gboolean gdk_event_get_coords(GdkEvent * event, gdouble * x_win,
                                     gdouble * y_win);
extern GdkEvent *gdk_event_get_graphics_expose(GdkWindow * window);
extern gboolean gdk_event_get_root_coords(GdkEvent * event,
                                          gdouble * x_root, gdouble * y_root);
extern GdkScreen *gdk_event_get_screen(GdkEvent * event);
extern gboolean gdk_event_get_state(GdkEvent * event,
                                    GdkModifierType * state);
extern guint32 gdk_event_get_time(GdkEvent * event);

To:

extern GdkEvent *gdk_event_copy(const GdkEvent * event);
extern void gdk_event_free(GdkEvent * event);
extern GdkEvent *gdk_event_get(void);
extern gboolean gdk_event_get_axis(const GdkEvent * event, GdkAxisUse axis_use,
                                   gdouble * value);
extern gboolean gdk_event_get_coords(const GdkEvent * event,
                                     gdouble * x_win, gdouble * y_win);
extern GdkEvent *gdk_event_get_graphics_expose(GdkWindow * window);
extern gboolean gdk_event_get_root_coords(const GdkEvent * event,
                                          gdouble * x_root, gdouble * y_root);
extern GdkScreen *gdk_event_get_screen(const GdkEvent * event);
extern gboolean gdk_event_get_state(const GdkEvent * event,
                                    GdkModifierType * state);
extern guint32 gdk_event_get_time(const GdkEvent * event);

Change:

extern void gdk_event_put(GdkEvent * event);

To:

extern void gdk_event_put(const GdkEvent * event);

Change:

extern void gdk_gc_set_clip_rectangle(GdkGC * gc, GdkRectangle * rectangle);
extern void gdk_gc_set_clip_region(GdkGC * gc, GdkRegion * region);

To:

extern void gdk_gc_set_clip_rectangle(GdkGC * gc, const GdkRectangle * rectangle);
extern void gdk_gc_set_clip_region(GdkGC * gc, const GdkRegion * region);

Change:

extern GdkRegion *gdk_pango_layout_get_clip_region(PangoLayout * layout,
                                                   gint x_origin,
                                                   gint y_origin,
                                                   gint * index_ranges,
                                                   gint n_ranges);
extern GdkRegion *gdk_pango_layout_line_get_clip_region(PangoLayoutLine * line,
                                                        gint x_origin,
                                                        gint y_origin,
                                                        gint *
                                                        index_ranges,
                                                        gint n_ranges);

To:

extern GdkRegion *gdk_pango_layout_get_clip_region(PangoLayout * layout,
                                                   gint x_origin,
                                                   gint y_origin,
                                                   const gint *
                                                   index_ranges,
                                                   gint n_ranges);
extern GdkRegion *gdk_pango_layout_line_get_clip_region(PangoLayoutLine * line,
                                                        gint x_origin,
                                                        gint y_origin,
                                                        const gint *
                                                        index_ranges,
                                                        gint n_ranges);

Change:

extern gboolean gdk_rectangle_intersect(GdkRectangle * src1,
                                        GdkRectangle * src2,
                                        GdkRectangle * dest);
extern void gdk_rectangle_union(GdkRectangle * src1,
                                GdkRectangle * src2,
                                GdkRectangle * dest);
extern GdkRegion *gdk_region_copy(GdkRegion * region);

To:

extern gboolean gdk_rectangle_intersect(const GdkRectangle * src1,
                                        const GdkRectangle * src2,
                                        GdkRectangle * dest);
extern void gdk_rectangle_union(const GdkRectangle * src1,
                                const GdkRectangle * src2,
                                GdkRectangle * dest);
extern GdkRegion *gdk_region_copy(const GdkRegion * region);

Change:

extern gboolean gdk_region_empty(GdkRegion * region);
extern gboolean gdk_region_equal(GdkRegion * region1,
                                 GdkRegion * region2);
extern void gdk_region_get_clipbox(GdkRegion * region,
                                   GdkRectangle * rectangle);
extern void gdk_region_get_rectangles(GdkRegion * region,
                                      GdkRectangle * *rectangles,
                                      gint * n_rectangles);
extern void gdk_region_intersect(GdkRegion * source1,
                                 GdkRegion * source2);

To:

extern gboolean gdk_region_empty(const GdkRegion * region);
extern gboolean gdk_region_equal(const GdkRegion * region1,
                                 const GdkRegion * region2);
extern void gdk_region_get_clipbox(const GdkRegion * region,
                                   GdkRectangle * rectangle);
extern void gdk_region_get_rectangles(const GdkRegion * region,
                                      GdkRectangle * *rectangles,
                                      gint * n_rectangles);
extern void gdk_region_intersect(GdkRegion * source1,
                                 const GdkRegion * source2);

Change:

extern gboolean gdk_region_point_in(GdkRegion * region, int x, int y);
extern GdkRegion *gdk_region_polygon(GdkPoint * points, gint npoints,
                                     GdkFillRule fill_rule);
extern GdkOverlapType gdk_region_rect_in(GdkRegion * region,
                                         GdkRectangle * rectangle);
extern GdkRegion *gdk_region_rectangle(GdkRectangle * rectangle);

To:

extern gboolean gdk_region_point_in(const GdkRegion * region, int x,
                                    int y);
extern GdkRegion *gdk_region_polygon(const GdkPoint * points,
                                     gint npoints,
                                     GdkFillRule fill_rule);
extern GdkOverlapType gdk_region_rect_in(const GdkRegion * region,
                                         const GdkRectangle *
                                         rectangle);
extern GdkRegion *gdk_region_rectangle(const GdkRectangle * rectangle);

Change:

extern void gdk_region_spans_intersect_foreach(GdkRegion * region,
                                               GdkSpan * spans,
                                               int n_spans,
                                               gboolean sorted,
                                               GdkSpanFunc function,
                                               gpointer data);
extern void gdk_region_subtract(GdkRegion * source1,
                                GdkRegion * source2);
extern void gdk_region_union(GdkRegion * source1, GdkRegion * source2);
extern void gdk_region_union_with_rect(GdkRegion * region,
                                       GdkRectangle * rect);
extern void gdk_region_xor(GdkRegion * source1, GdkRegion * source2);

To:

extern void gdk_region_spans_intersect_foreach(GdkRegion * region,
                                               const GdkSpan * spans,
                                               int n_spans,
                                               gboolean sorted,
                                               GdkSpanFunc function,
                                               gpointer data);
extern void gdk_region_subtract(GdkRegion * source1,
                                const GdkRegion * source2);
extern void gdk_region_union(GdkRegion * source1,
                             const GdkRegion * source2);
extern void gdk_region_union_with_rect(GdkRegion * region,
                                       const GdkRectangle * rect);
extern void gdk_region_xor(GdkRegion * source1,
                           const GdkRegion * source2);

Change:

extern void gdk_window_begin_paint_rect(GdkWindow * window,
                                        GdkRectangle * rectangle);
extern void gdk_window_begin_paint_region(GdkWindow * window,
                                          GdkRegion * region);

To:

extern void gdk_window_begin_paint_rect(GdkWindow * window,
                                        const GdkRectangle * rectangle);
extern void gdk_window_begin_paint_region(GdkWindow * window,
                                          const GdkRegion * region);

Change:

extern void gdk_window_invalidate_maybe_recurse(GdkWindow * window,
                                                GdkRegion * region,
                                                gboolean(*child_func)
                                                (GdkWindow *, gpointer),
                                                gpointer user_data);
extern void gdk_window_invalidate_rect(GdkWindow * window,
                                       GdkRectangle * rect,
                                       gboolean invalidate_children);
extern void gdk_window_invalidate_region(GdkWindow * window,
                                         GdkRegion * region,
                                         gboolean invalidate_children);

To:

extern void gdk_window_invalidate_maybe_recurse(GdkWindow * window,
                                                const GdkRegion * region,
                                                gboolean(*child_func)
                                                (GdkWindow *, gpointer),
                                                gpointer user_data);
extern void gdk_window_invalidate_rect(GdkWindow * window,
                                       const GdkRectangle * rect,
                                       gboolean invalidate_children);
extern void gdk_window_invalidate_region(GdkWindow * window,
                                         const GdkRegion * region,
                                         gboolean invalidate_children);

Change:

extern void gdk_window_set_geometry_hints(GdkWindow * window,
                                          GdkGeometry * geometry,
                                          GdkWindowHints geom_mask);

To:

extern void gdk_window_set_geometry_hints(GdkWindow * window,
                                          const GdkGeometry * geometry,
                                          GdkWindowHints geom_mask);

Change:

extern void gdk_window_shape_combine_region(GdkWindow * window,
                                            GdkRegion * shape_region,
                                            gint offset_x, gint offset_y);

To:

extern void gdk_window_shape_combine_region(GdkWindow * window,
                                            const GdkRegion * shape_region,
                                            gint offset_x, gint offset_y);

Change:

extern void gdk_window_move_region(GdkWindow * window,
                                   GdkRegion * region, gint dx, gint dy);

To:

extern void gdk_window_move_region(GdkWindow * window,
                                   const GdkRegion * region, gint dx, gint dy);


In 16.26.2. gtk-2.0/gdk/gdkcairo.h

Change:

extern void gdk_cairo_rectangle(cairo_t * cr, GdkRectangle * rectangle);
extern void gdk_cairo_region(cairo_t * cr, GdkRegion * region);
extern void gdk_cairo_set_source_color(cairo_t * cr, GdkColor * color);
extern void gdk_cairo_set_source_pixbuf(cairo_t * cr, GdkPixbuf * pixbuf,
                                        double pixbuf_x, double pixbuf_y);

To:

extern void gdk_cairo_rectangle(cairo_t * cr, const GdkRectangle * rectangle);
extern void gdk_cairo_region(cairo_t * cr, const GdkRegion * region);
extern void gdk_cairo_set_source_color(cairo_t * cr, const GdkColor * color);
extern void gdk_cairo_set_source_pixbuf(cairo_t * cr, const GdkPixbuf * pixbuf,
                                        double pixbuf_x, double pixbuf_y);

