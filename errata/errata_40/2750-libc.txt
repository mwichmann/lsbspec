Specification: LSB Core generic
Edition of Specification: 4.0
Type: Error
Status: Unapproved
Bug reference: http://bugs.linuxbase.org/show_bug.cgi?id=2750

Rationale: several macros related to scheduling parameters were
incomplete or incorrect.


In LSB Core generic

In 13.4. Data Definitions for libc

In 13.4.47. sched.h
 
Add:

#define __CPU_ALLOC_SIZE(count) ((((count) + __NCPUBITS - 1) / __NCPUBITS) * 8)

Remove:

#define CPU_ALLOC(count)        __CPU_ALLOC (count)

Add:

#define __CPU_OP_S(setsize, destset, srcset1, srcset2, op)      \
  (__extension__\
   ({ cpu_set_t *__dest = (destset); \
     cpu_set_t *__arr1 = (srcset1); \
     cpu_set_t *__arr2 = (srcset2); \
     size_t __imax = (setsize) / sizeof (__cpu_mask); \
     size_t __i; \
     for (__i = 0; __i < __imax; ++__i)\
       __dest->__bits[__i] = __arr1->__bits[__i] op __arr2->__bits[__i]; \
 __dest; }))
#define __CPU_SET_S(cpu, setsize, cpusetp)      \
  (__extension__\
   ({ size_t __cpu = (cpu); \
     __cpu < 8 * (setsize) \
     ? ((cpusetp)->__bits[__CPUELT (__cpu)] |= __CPUMASK (__cpu)) : 0; }))
#define __CPU_ISSET_S(cpu, setsize, cpusetp)    \
  (__extension__\
   ({ size_t __cpu = (cpu); \
     __cpu < 8 * (setsize)\
     ? (((cpusetp)->__bits[__CPUELT (__cpu)] & __CPUMASK (__cpu))) != 0\
 : 0; }))
#define __CPU_CLR_S(cpu, setsize, cpusetp)      \
  (__extension__\
   ({ size_t __cpu = (cpu); \
     __cpu < 8 * (setsize)\
     ? ((cpusetp)->__bits[__CPUELT (__cpu)] &= ~__CPUMASK (__cpu)) : 0;}))
#define __CPU_ZERO_S(setsize, cpusetp)  \
  do {\
    size_t __i; \
    size_t __imax = (setsize) / sizeof (__cpu_mask); \
    cpu_set_t *__arr = (cpusetp); \
    for (__i = 0; __i < __imax; ++__i)\
       __arr->__bits[__i] = 0; \
  } while (0)


Remove:

#define CPU_COUNT(cpusetp)      __CPU_COUNT_S (sizeof (cpu_set_t), cpusetp)
#define CPU_FREE(cpuset)        __CPU_FREE (cpuset)

Add:

#define CPU_CLR(cpu, cpusetp)   __CPU_CLR_S (cpu, sizeof (cpu_set_t), cpusetp)
#define CPU_ISSET(cpu, cpusetp) __CPU_ISSET_S (cpu, sizeof (cpu_set_t),cpusetp)
#define CPU_AND_S(setsize, destset, srcset1, srcset2)   __CPU_OP_S (setsize, destset, srcset1, srcset2, &)
#define CPU_XOR_S(setsize, destset, srcset1, srcset2)   __CPU_OP_S (setsize, destset, srcset1, srcset2, ^)
#define CPU_OR_S(setsize, destset, srcset1, srcset2)    __CPU_OP_S (setsize, destset, srcset1, srcset2, |)
#define CPU_AND(destset, srcset1, srcset2)      __CPU_OP_S (sizeof (cpu_set_t), destset, srcset1, srcset2, &)
#define CPU_XOR(destset, srcset1, srcset2)      __CPU_OP_S (sizeof (cpu_set_t), destset, srcset1, srcset2, ^)
#define CPU_OR(destset, srcset1, srcset2)       __CPU_OP_S (sizeof (cpu_set_t), destset, srcset1, srcset2, |)
#define CPU_SET(cpu, cpusetp)   __CPU_SET_S (cpu, sizeof (cpu_set_t), cpusetp)
