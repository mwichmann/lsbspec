Specification: LSB Core Generic
Specification: LSB Core IA32, IA64, AMD64, PPC32, PPC64, S390, S390X
Edition of Specification: 3.1 Update 1
Type: Editorial
Status: Unapproved
Bug reference: http://bugs.linuxbase.org/show_bug.cgi?id=1752

Rationale: several math functions were incorrectly shown as specified
by ISOC99, which contains no such defintions, and so were effectively
unspecified.


In LSB Core Generic:


In 13.6.1.1. Interfaces for Math

Change:

   Table 13-25. libm - Math Function Interfaces
   ...
   clog10 [ISOC99]	clog10f [ISOC99]	clog10l [ISOC99]
   dremf [ISOC99]	dreml [ISOC99]
   finite [SUSv2]	finitef [ISOC99]	finitel [ISOC99]
   gamma [SUSV2]	gammaf [ISOC99]		gammal [ISOC99]
   j0f [ISOC99]		j0l [ISOC99]
   j1f [ISOC99]		j1l [ISOC99]
   jnf [ISOC99]		jnl [ISOC99]
   lgamma_r [ISOC99]	lgammaf_r [ISOC99]	lgammal_r [ISOC99]
   pow10f [ISOC99]	pow10l [ISOC99]
   scalbf [ISOC99]	scalbl [ISOC99]
   significand [ISOC99] significandf [ISOC99]	significandl [ISOC99]
   sincos [ISOC99]	sincosf [ISOC99]	sincosl [ISOC99]
   y0f [ISOC99]		y0l [ISOC99]
   y1f [ISOC99]		y1l [ISOC99]
   ynf [ISOC99]		ynl [ISOC99]

To:

   Table 13-34. libm - Math Function Interfaces
   ...
   clog10 [LSB]		clog10f [LSB]		clog10l [LSB]
   drem [LSB]		dremf [LSB]		dreml [LSB]
   finite [LSB]		finitef [LSB]		finitel [LSB]
   gammaf [LSB]		gammal [LSB]
   j0f [LSB]		j0l [LSB]
   j1f [LSB]		j1l [LSB]
   jnf [LSB]		jnl [LSB]
   lgamma_r [LSB]	lgammaf_r [LSB]		lgammal_r [LSB]
   pow10 [LSB]		pow10f [LSB]		pow10l [LSB]
   scalbf [LSB]		scalbl [LSB]
   significand [LSB]	significandf [LSB]	significandl [LSB]
   sincos [LSB]		sincosf [LSB]		sincosl [LSB]
   y0f [LSB]		y0l [LSB]
   y1f [LSB]		y1l [LSB]
   ynf [LSB]		ynl [LSB]

Add:

   Table 13-35. libm - Math Deprecated Function Interfaces
   drem [LSB]    dremf [LSB]      dreml [LSB] finite [LSB]
   finitef [LSB] finitel [LSB]    gamma [LSB] gammaf [LSB]
   gammal [LSB]

   An LSB conforming implementation shall provide the generic data
   interfaces for Math specified in Table 13-36, with the full
   mandatory functionality as described in the referenced
   underlying specification.



On 13.7.1. complex.h,

Add:

extern double complex clog10(double complex);


In 13.8. Interface Definitions for libm,

Add to Table of Contents:

   clog10 -- Logarithm of a Complex Number
   clog10f -- Logarithm of a Complex Number
   clog10l -- Logarithm of a Complex Number
   drem -- Floating Point Remainder (DEPRECATED)
   dremf -- Floating Point Remainder (DEPRECATED)
   dreml -- Floating Point Remainder (DEPRECATED)
   exp10 -- Base-10 power function
   exp10f -- Base-10 power function
   exp10l -- Base-10 power function
   finite -- test for infinity (DEPRECATED)
   finitef -- test for infinity (DEPRECATED)
   finitel -- test for infinity (DEPRECATED)
   gamma -- log gamma function (DEPRECATED)
   gammaf -- log gamma function (DEPRECATED)
   gammal -- log gamma function (DEPRECATED)
   j0f -- Bessel functions
   j0l -- Bessel functions
   j1f -- Bessel functions
   j1l -- Bessel functions
   jnf -- Bessel functions
   jnl -- Bessel functions
   lgamma_r -- log gamma functions
   lgammaf_r -- log gamma functions
   lgammal_r -- log gamma functions
   pow10 -- Base-10 power function
   pow10f -- Base-10 power function
   pow10l -- Base-10 power function
   significand -- floating point mantissa
   significandf -- floating point mantissa
   significandl -- floating point mantissa
   sincos -- trigonometric functions
   sincosf -- trigonometric functions
   sincosl -- trigonometric functions
   y0f -- Bessel functions
   y0l -- Bessel functions
   y1f -- Bessel functions
   y1l -- Bessel functions
   ynf -- Bessel functions
   ynl -- Bessel functions


Add:

clog10

Name

   clog10 -- Logarithm of a Complex Number

Synopsis

   #include <complex.h>

   double complex clog10(double complex z);

Description

   The clog10() function shall compute the base 10 logarithm of
   the complex number z.

Return Value

   The clog10() function shall return the base 10 logarithm.

clog10f

Name

   clog10f -- Logarithm of a Complex Number

Synopsis

   #include <complex.h>

   float complex clog10f(float complex z);

Description

   The clog10f() function shall compute the base 10 logarithm of
   the complex number z.

Return Value

   The clog10f() function shall return the base 10 logarithm.

clog10l

Name

   clog10l -- Logarithm of a Complex Number

Synopsis

   #include <complex.h>

   long double complex clog10l(long double complex z);

Description

   The clog10l() function shall compute the base 10 logarithm of
   the complex number z.

Return Value

   The clog10l() function shall return the base 10 logarithm.

drem

Name

   drem -- Floating Point Remainder (DEPRECATED)

Synopsis

   #include <math.h>

   double drem(double x, double y);

Description

   The drem() function shall return the floating point remainder,
   x REM y as required by IEC 60559/IEEE 754 Floating Point in the
   same way as remainder().

     Note: This function is included only for backwards
     compatibility; applications should use remainder() instead.

Returns

   See remainder().

See Also

   remainder(), dremf(), dreml()

dremf

Name

   dremf -- Floating Point Remainder (DEPRECATED)

Synopsis

   #include <math.h>

   double dremf(double x, double y);

Description

   The dremf() function shall return the floating point remainder,
   x REM y as required by IEC 60559/IEEE 754 Floating Point in the
   same way as remainderf().

     Note: This function is included only for backwards
     compatibility; applications should use remainderf() instead.

Returns

   See remainderf().

See Also

   remainderf(), drem(), dreml()

dreml

Name

   dreml -- Floating Point Remainder (DEPRECATED)

Synopsis

   #include <math.h>

   double dreml(double x, double y);

Description

   The dreml() function shall return the floating point remainder,
   x REM y as required by IEC 60559/IEEE 754 Floating Point in the
   same way as remainderl().

     Note: This function is included only for backwards
     compatibility; applications should use remainderl() instead.

Returns

   See remainderl().

See Also

   remainderl(), drem(), dremf()

exp10

Name

   exp10 -- Base-10 power function

Synopsis

   #include <math.h>

   double exp10(double x);

Description

   The exp10() function shall return 10^x.

     Note: This function is identical to pow10().

Returns

   Upon successful completion, exp10() shall return 10 rised to
   the power of x.

   If the correct value would cause overflow, a range error shall
   occur and exp10() shall return ±HUGE_VAL, with the same sign as
   the correct value of the function.

See Also

   pow10(), exp10f(), exp10l()

exp10f

Name

   exp10f -- Base-10 power function

Synopsis

   #include <math.h>

   float exp10f(float x);

Description

   The exp10f() function shall return 10^x.

     Note: This function is identical to pow10f().

Returns

   Upon successful completion, exp10f() shall return 10 rised to
   the power of x.

   If the correct value would cause overflow, a range error shall
   occur and exp10f() shall return ±HUGE_VALF, with the same sign
   as the correct value of the function.

See Also

   pow10f(), exp10(), exp10l()

exp10l

Name

   exp10l -- Base-10 power function

Synopsis

   #include <math.h>

   long double exp10l(long double x);

Description

   The exp10l() function shall return 10^x.

     Note: This function is identical to pow10l().

Returns

   Upon successful completion, exp10l() shall return 10 rised to
   the power of x.

   If the correct value would cause overflow, a range error shall
   occur and exp10l() shall return ±HUGE_VALL, with the same sign
   as the correct value of the function.

See Also

   pow10l(), exp10(), exp10f()

finite

Name

   finite -- test for infinity (DEPRECATED)

Synopsis

#define _SVID_SOURCE
#include <math.h>

   int finite(double arg);

Description

   The finite() function shall test whether its argument is
   neither INFINITY nor not a number (NaN).

Returns

   On success, finite() shall return 1. Otherwise the function
   shall return 0.

     Note: The ISO C (1999) standard defines the function
     isfinite(), which is more general purpose. The finite()
     function is deprecated, and applications should use
     isfinite() instead. A future revision of this standard may
     remove this function.

See Also

   isfinite(), finitef(), finitel()

finitef

Name

   finitef -- test for infinity (DEPRECATED)

Synopsis

#define _SVID_SOURCE
#include <math.h>

   int finitef(float arg);

Description

   The finitef() function shall test whether its argument is
   neither INFINITY nor not a number (NaN).

Returns

   On success, finitef() shall return 1. Otherwise the function
   shall return 0.

     Note: The ISO C (1999) standard defines the function
     isfinite(), which is more general purpose. The finitef()
     function is deprecated, and applications should use
     isfinite() instead. A future revision of this standard may
     remove this function.

See Also

   isfinite(), finite(), finitel()

finitel

Name

   finitel -- test for infinity (DEPRECATED)

Synopsis

#define _SVID_SOURCE
#include <math.h>

   int finitel(long double arg);

Description

   The finitel() function shall test whether its argument is
   neither INFINITY nor not a number (NaN).

Returns

   On success, finitel() shall return 1. Otherwise the function
   shall return 0.

     Note: The ISO C (1999) standard defines the function
     isfinite(), which is more general purpose. The finitel()
     function is deprecated, and applications should use
     isfinite() instead. A future revision of this standard may
     remove this function.

See Also

   isfinite(), finite(), finitef()

gamma

Name

   gamma -- log gamma function (DEPRECATED)

Synopsis

   #include <math.h>

   double gammaf(double x);

Description

   The gamma() function is identical to lgamma() in ISO POSIX
   (2003).

     Note: The name gamma() for this function is deprecated and
     should not be used.

Returns

   See lgamma().

See Also

   lgamma(), lgammaf(), lgammal(), gammaf(), gammal()

gammaf

Name

   gammaf -- log gamma function (DEPRECATED)

Synopsis

   #include <math.h>

   float gammaf(float x);

Description

   The gammaf() function is identical to lgammaf() in ISO POSIX
   (2003).

     Note: The name gammaf() for this function is deprecated and
     should not be used.

Returns

   See lgammaf().

See Also

   lgamma(), lgammaf(), lgammal(), gamma(), gammal()

gammal

Name

   gammal -- log gamma function (DEPRECATED)

Synopsis

   #include <math.h>

   long double gammal(long double x);

Description

   The gammal() function is identical to lgammal() in ISO POSIX
   (2003).

     Note: The name gammal() for this function is deprecated and
     should not be used.

Returns

   See lgammal().

See Also

   lgamma(), lgammaf(), lgammal(), gamma(), gammaf()

j0f

Name

   j0f -- Bessel functions

Synopsis

   #include <math.h>

   float j0f(float x);

Description

   The j0f() function is identical to j0(), except that the
   argument x and the return value is a float.

Returns

   See j0().

See Also

   j0(), j0l(), j1(), j1f(), j1l(), jn(), jnf(), jnl(), y0(),
   y0f(), y0l(), y1(), y1f(), y1l(), yn(), ynf(), ynl()

j0l

Name

   j0l -- Bessel functions

Synopsis

   #include <math.h>

   long double j0l(long double x);

Description

   The j0l() function is identical to j0(), except that the
   argument x and the return value is a long double.

Returns

   See j0().

See Also

   j0(), j0f(), j1(), j1f(), j1l(), jn(), jnf(), jnl(), y0(),
   y0f(), y0l(), y1(), y1f(), y1l(), yn(), ynf(), ynl()

j1f

Name

   j1f -- Bessel functions

Synopsis

   #include <math.h>

   float j1f(float x);

Description

   The j1f() function is identical to j1(), except that the
   argument x and the return value is a float.

Returns

   See j1().

See Also

   j0(), j0f(), j0l(), j1(), j1l(), jn(), jnf(), jnl(), y0(),
   y0f(), y0l(), y1(), y1f(), y1l(), yn(), ynf(), ynl()

j1l

Name

   j1l -- Bessel functions

Synopsis

   #include <math.h>

   long double j1l(long double x);

Description

   The j1l() function is identical to j1(), except that the
   argument x and the return value is a long double.

Returns

   See j0().

See Also

   j0(), j0f(), j0l(), j1(), j1f(), jn(), jnf(), jnl(), y0(),
   y0f(), y0l(), y1(), y1f(), y1l(), yn(), ynf(), ynl()

jnf

Name

   jnf -- Bessel functions

Synopsis

   #include <math.h>

   float jnf(float x);

Description

   The jnf() function is identical to jn(), except that the
   argument x and the return value is a float.

Returns

   See jn().

See Also

   j0(), j0f(), j0l(), j1(), j1f(), j1l(), jn(), jnl(), y0(),
   y0f(), y0l(), y1(), y1f(), y1l(), yn(), ynf(), ynl()

jnl

Name

   jnl -- Bessel functions

Synopsis

   #include <math.h>

   long double jnl(long double x);

Description

   The jnl() function is identical to jn(), except that the
   argument x and the return value is a long double.

Returns

   See jn().

See Also

   j0(), j0f(), j0l(), j1(), j1f(), j1l(), jn(), jnf(), y0(),
   y0f(), y0l(), y1(), y1f(), y1l(), yn(), ynf(), ynl()

lgamma_r

Name

   lgamma_r -- log gamma functions

Synopsis

   #include <math.h>

   double lgamma_r(double x, int * signp);

Description

   The lgamma_r() function shall compute the natural logarithm of
   the absolute value of the Gamma function, as lgamma(). However,
   instead of setting the external integer signgam to the sign of
   the Gamma function, lgamma_r() shall set the integer referenced
   by signp to the sign.

Returns

   See lgamma() and signgam.

See Also

   lgamma(), lgammaf_r(), lgammal_r(), signgam

lgammaf_r

Name

   lgammaf_r -- log gamma functions

Synopsis

   #include <math.h>

   float lgammaf_r(float x, int * signp);

Description

   The lgammaf_r() function shall compute the natural logarithm of
   the absolute value of the Gamma function, as lgammaf().
   However, instead of setting the external integer signgam to the
   sign of the Gamma function, lgammaf_r() shall set the integer
   referenced by signp to the sign.

Returns

   See lgammaf() and signgam.

See Also

   lgamma(), lgamma_r(), lgammal_r(), signgam

lgammal_r

Name

   lgammal_r -- log gamma functions

Synopsis

   #include <math.h>

   double lgammal_r(double x, int * signp);

Description

   The lgammal_r() function shall compute the natural logarithm of
   the absolute value of the Gamma function, as lgammal().
   However, instead of setting the external integer signgam to the
   sign of the Gamma function, lgammal_r() shall set the integer
   referenced by signp to the sign.

Returns

   See lgammal() and signgam.

See Also

   lgamma(), lgamma_r(), lgammaf_r(), signgam

pow10

Name

   pow10 -- Base-10 power function

Synopsis

   #include <math.h>

   double pow10(double x);

Description

   The pow10() function shall return 10^x.

     Note: This function is identical to exp10().

Returns

   Upon successful completion, pow10() shall return 10 rised to
   the power of x.

   If the correct value would cause overflow, a range error shall
   occur and pow10() shall return ±HUGE_VAL, with the same sign as
   the correct value of the function.

See Also

   exp10(), pow10f(), pow10l()

pow10f

Name

   pow10f -- Base-10 power function

Synopsis

   #include <math.h>

   float pow10f(float x);

Description

   The pow10f() function shall return 10^x.

     Note: This function is identical to exp10f().

Returns

   Upon successful completion, pow10f() shall return 10 rised to
   the power of x.

   If the correct value would cause overflow, a range error shall
   occur and pow10f() shall return ±HUGE_VALF, with the same sign
   as the correct value of the function.

See Also

   exp10f(), pow10(), pow10l()

pow10l

Name

   pow10l -- Base-10 power function

Synopsis

   #include <math.h>

   long double pow10l(long double x);

Description

   The pow10l() function shall return 10^x.

     Note: This function is identical to exp10l().

Returns

   Upon successful completion, pow10l() shall return 10 rised to
   the power of x.

   If the correct value would cause overflow, a range error shall
   occur and pow10l() shall return ±HUGE_VALL, with the same sign
   as the correct value of the function.

See Also

   exp10l(), pow10(), pow10f()

significand

Name

   significand -- floating point mantissa

Synopsis

   #include <math.h>

   double significand(double x);

Description

   The significand() function shall return the mantissa of x, sig
   such that x =3 sig × 2^n scaled such that 1 <= sig < 2.

     Note: This function is intended for testing confomance to
     IEC 60559/IEEE 754 Floating Point, and its use is not
     otherwise recommended.

     This function is equivalent to scalb(x, (double)-ilogb(x)).

Returns

   Upon successful completion, significand() shall return the
   mantissa of x in the range 1 <= sig < 2.

   If x is 0, ±HUGE_VAL, or NaN, the result is undefined.

See Also

   significandf(), significandl()

significandf

Name

   significandf -- floating point mantissa

Synopsis

   #include <math.h>

   float significandf(float x);

Description

   The significandf() function shall return the mantissa of x, sig
   such that x =3 sig × 2^n scaled such that 1 <= sig < 2.

     Note: This function is intended for testing confomance to
     IEC 60559/IEEE 754 Floating Point, and its use is not
     otherwise recommended.

     This function is equivalent to scalb(x, (double)-ilogb(x)).

Returns

   Upon successful completion, significandf() shall return the
   mantissa of x in the range 1 <= sig < 2.

   If x is 0, ±HUGE_VALF, or NaN, the result is undefined.

See Also

   significand(), significandl()

significandl

Name

   significandl -- floating point mantissa

Synopsis

   #include <math.h>

   long double significandl(long double x);

Description

   The significandl() function shall return the mantissa of x, sig
   such that x =3 sig × 2^n scaled such that 1 <= sig < 2.

     Note: This function is intended for testing confomance to
     IEC 60559/IEEE 754 Floating Point, and its use is not
     otherwise recommended.

     This function is equivalent to scalb(x, (double)-ilogb(x)).

Returns

   Upon successful completion, significandl() shall return the
   mantissa of x in the range 1 <= sig < 2.

   If x is 0, ±HUGE_VALL, or NaN, the result is undefined.

See Also

   significand(), significandf()

sincos

Name

   sincos -- trigonometric functions

Synopsis

#define _GNU_SOURCE
#include <math.h>

   void sincos(double x, double * sin, double * cos);

Description

   The sincos() function shall calculate both the sine and cosine
   of x. The sine shall be stored in the location referenced by
   sin, and the cosine in the location referenced by cosine.

Returns

   None. See sin() and cos() for possible error conditions.

See Also

   cos(), sin(), sincosf(), sincosl()

sincosf

Name

   sincosf -- trigonometric functions

Synopsis

#define _GNU_SOURCE
#include <math.h>

   void sincosf(float x, float * sin, float * cos);

Description

   The sincosf() function shall calculate both the sine and cosine
   of x. The sine shall be stored in the location referenced by
   sin, and the cosine in the location referenced by cosine.

Returns

   None. See sin() and cos() for possible error conditions.

See Also

   cos(), sin(), sincos(), sincosl()

sincosl

Name

   sincosl -- trigonometric functions

Synopsis

#define _GNU_SOURCE
#include <math.h>

   void sincosl(long double x, long double * sin, long double *
   cos);

Description

   The sincosl() function shall calculate both the sine and cosine
   of x. The sine shall be stored in the location referenced by
   sin, and the cosine in the location referenced by cosine.

Returns

   None. See sin() and cos() for possible error conditions.

See Also

   cos(), sin(), sincos(), sincosl()

y0f

Name

   y0f -- Bessel functions

Synopsis

   #include <math.h>

   float y0f(float x);

Description

   The y0f() function is identical to y0(), except that the
   argument x and the return value is a float.

Returns

   See y0().

See Also

   j0(), j0f(), j0l(), j1(), j1f(), j1l(), jn(), jnf(), jnl(),
   y0(), y0l(), y1(), y1f(), y1l(), yn(), ynf(), ynl()

y0l

Name

   y0l -- Bessel functions

Synopsis

   #include <math.h>

   long double y0l(long double x);

Description

   The y0l() function is identical to y0(), except that the
   argument x and the return value is a long double.

Returns

   See y0().

See Also

   j0(), j0f(), j0l(), j1(), j1f(), j1l(), jn(), jnf(), jnl(),
   y0(), y0f(), y1(), y1f(), y1l(), yn(), ynf(), ynl()

y1f

Name

   y1f -- Bessel functions

Synopsis

   #include <math.h>

   float y1f(float x);

Description

   The y1f() function is identical to y1(), except that the
   argument x and the return value is a float.

Returns

   See y1().

See Also

   j0(), j0f(), j0l(), j1(), j1f(), j1l(), jn(), jnf(), jnl(),
   y0(), y0f(), y0l(), y1(), y1l(), yn(), ynf(), ynl()

y1l

Name

   y1l -- Bessel functions

Synopsis

   #include <math.h>

   long double y1l(long double x);

Description

   The y1l() function is identical to y1(), except that the
   argument x and the return value is a long double.

Returns

   See j0().

See Also

   j0(), j0f(), j0l(), j1(), j1f(), j1l(), jn(), jnf(), jnl(),
   y0(), y0f(), y0l(), y1(), y1f(), yn(), ynf(), ynl()

ynf

Name

   ynf -- Bessel functions

Synopsis

   #include <math.h>

   float ynf(float x);

Description

   The ynf() function is identical to yn(), except that the
   argument x and the return value is a float.

Returns

   See yn().

See Also

   j0(), j0f(), j0l(), j1(), j1f(), j1l(), jn(), jnf(), jnl(),
   y0(), y0f(), y0l(), y1(), y1f(), y1l(), yn(), ynl()

ynl

Name

   ynl -- Bessel functions

Synopsis

   #include <math.h>

   long double ynl(long double x);

Description

   The ynl() function is identical to yn(), except that the
   argument x and the return value is a long double.

Returns

   See yn().

See Also

   j0(), j0f(), j0l(), j1(), j1f(), j1l(), jn(), jnf(), jnl(),
   y0(), y0f(), y0l(), y1(), y1f(), y1l(), yn(), ynf()



In A.4. libm

In Table A-5. libm Function Interfaces:

Change:

   clog10(GLIBC_2.1)[ISOC99]	clog10f(GLIBC_2.1)[ISOC99]
   clog10l(GLIBC_2.1)[ISOC99]
   drem(GLIBC_2.0)[ISOC99]	dremlrfGLIBC_2.0)[ISOC99]
   dreml(GLIBC_2.0)[ISOC99]
   finite(GLIBC_2.0)[SUSv2]	finitef(GLIBC_2.0)[ISOC99]
   finitel(GLIBC_2.0)[ISOC99]
   gamma(GLIBC_2.0)[ISOC99]	gammaf(GLIBC_2.0)[ISOC99]
   gammal(GLIBC_2.0)[ISOC99]
   j0f(GLIBC_2.0)[ISOC99]	j0l(GLIBC_2.0)[ISOC99]
   j1f(GLIBC_2.0)[ISOC99]	j1l(GLIBC_2.0)[ISOC99]
   jnf(GLIBC_2.0)[ISOC99]	jnl(GLIBC_2.0)[ISOC99]
   lgamma_r(GLIBC_2.0)[ISOC99]	lgammaf_r(GLIBC_2.0)[ISOC99]
   lgammal_r(GLIBC_2.0)[ISOC99]
   pow10(GLIBC_2.1)[ISOC99]	pow10f(GLIBC_2.1)[ISOC99]
   pow10l(GLIBC_2.1)[ISOC99]
   sincos(GLIBC_2.1)[ISOC99]	sincosf(GLIBC_2.1)[ISOC99]
   sincosl(GLIBC_2.1)[ISOC99]
   y0f(GLIBC_2.0)[ISOC99]	y0l(GLIBC_2.0)[ISOC99]
   y1f(GLIBC_2.0)[ISOC99]	y1l(GLIBC_2.0)[ISOC99]
   ynf(GLIBC_2.0)[ISOC99]	ynl(GLIBC_2.0)[ISOC99]

To:

   clog10[LSB]		clog10f[LSB]		clog10l[LSB]
   drem[LSB]		dremf[LSB]		dreml[LSB]
   finite[LSB]		finitef[LSB]		finitel[LSB]
   gamma[LSB]		gammaf[LSB]		gammal[LSB]
   j0f[LSB]		j0l[LSB]
   j1f[LSB]		j1l[LSB]
   jnf[LSB]		jnl[LSB]
   lgamma_r[LSB]	lgammaf_r[LSB]		lgammal_r[LSB]
   pow10[LSB]		pow10f[LSB]		pow10l[LSB]
   sincos[LSB]		sincosf[LSB]		sincosl[LSB]
   y0f[LSB]		y0l[LSB]
   y1f[LSB]		y1l[LSB]
   ynf[LSB]		ynl[LSB]


====

In LSB Core IA32, PPC32, S390:

In 11.4.1.1. Interfaces for Math

Change:

   Table 11-25. libm - Math Function Interfaces
   ...
   clog10(GLIBC_2.1) [ISOC99]		clog10f(GLIBC_2.1) [ISOC99]
   clog10l(GLIBC_2.1) [ISOC99]
   drem(GLIBC_2.0) [ISOC99]		dremf(GLIBC_2.0) [ISOC99]
   dreml(GLIBC_2.0) [ISOC99]
   finite(GLIBC_2.0) [SUSv2]		finitef(GLIBC_2.0) [ISOC99]
   finitel(GLIBC_2.0) [ISOC99]
   gamma(GLIBC_2.0) [SUSv2]		gammaf(GLIBC_2.0) [ISOC99]
   gammal(GLIBC_2.0) [ISOC99]
   j0f(GLIBC_2.0) [ISOC99]		j0l(GLIBC_2.0) [ISOC99]
   j1f(GLIBC_2.0) [ISOC99]		j1l(GLIBC_2.0) [ISOC99]
   jnf(GLIBC_2.0) [ISOC99]		jnl(GLIBC_2.0) [ISOC99]
   lgamma_r(GLIBC_2.0) [ISOC99]		lgammaf_r(GLIBC_2.0) [ISOC99]
   lgammal_r(GLIBC_2.0) [ISOC99]
   pow10(GLIBC_2.1) [ISOC99]		pow10f(GLIBC_2.1) [ISOC99]
   pow10l(GLIBC_2.1) [ISOC99]
   significand(GLIBC_2.0) [ISOC99]	significandf(GLIBC_2.0) [ISOC99]
   significandl(GLIBC_2.0) [ISOC99]
   sincos(GLIBC_2.1) [ISOC99]		sincosf(GLIBC_2.1) [ISOC99]
   sincosl(GLIBC_2.1) [ISOC99]
   y0f(GLIBC_2.0) [ISOC99]		y0l(GLIBC_2.0) [ISOC99]
   y1f(GLIBC_2.0) [ISOC99]		y1l(GLIBC_2.0) [ISOC99]
   ynf(GLIBC_2.0) [ISOC99]		ynl(GLIBC_2.0) [ISOC99]

To:

   Table 11-34. libm - Math Function Interfaces
   ...
   clog10(GLIBC_2.1) [LSB]		clog10f(GLIBC_2.1) [LSB]
   clog10l(GLIBC_2.1) [LSB]
   drem(GLIBC_2.0) [LSB]		dremf(GLIBC_2.0) [LSB]
   dreml(GLIBC_2.0) [LSB]
   finite(GLIBC_2.0) [LSB]		finitef(GLIBC_2.0) [LSB]
   finitel(GLIBC_2.0) [LSB]
   gamma(GLIBC_2.0) [LSB]		gammaf(GLIBC_2.0) [LSB]
   gammal(GLIBC_2.0) [LSB]
   j0f(GLIBC_2.0) [LSB]			j0l(GLIBC_2.0) [LSB]
   j1f(GLIBC_2.0) [LSB]			j1l(GLIBC_2.0) [LSB]
   jnf(GLIBC_2.0) [LSB]			jnl(GLIBC_2.0) [LSB]
   lgamma_r(GLIBC_2.0) [LSB]		lgammaf_r(GLIBC_2.0) [LSB]
   lgammal_r(GLIBC_2.0) [LSB]
   pow10(GLIBC_2.1) [LSB]		pow10f(GLIBC_2.1) [LSB]
   pow10l(GLIBC_2.1) [LSB]
   significand(GLIBC_2.0) [LSB]		significandf(GLIBC_2.0) [LSB]
   significandl(GLIBC_2.0) [LSB]
   sincos(GLIBC_2.1) [LSB]		sincosf(GLIBC_2.1) [LSB]
   sincosl(GLIBC_2.1) [LSB]
   y0f(GLIBC_2.0) [LSB]			y0l(GLIBC_2.0) [LSB]
   y1f(GLIBC_2.0) [LSB]			y1l(GLIBC_2.0) [LSB]
   ynf(GLIBC_2.0) [LSB]			ynl(GLIBC_2.0) [LSB]

Add:

   Table 11-35. libm - Math Deprecated Function Interfaces
   drem(GLIBC_2.0) [LSB] dremf(GLIBC_2.0) [LSB] dreml(GLIBC_2.0) [LSB]
   finite(GLIBC_2.0) [LSB] finitef(GLIBC_2.0) [LSB] finitel(GLIBC_2.0) [LSB]
   gamma(GLIBC_2.0) [LSB] gammaf(GLIBC_2.0) [LSB]
   gammal(GLIBC_2.0) [LSB]

   An LSB conforming implementation shall provide the architecture
   specific data interfaces for Math specified in Table 11-36,
   with the full mandatory functionality as described in the
   referenced underlying specification.


In A.5. libm

Change:

   Table A-2. libm Function Interfaces
   ...
   clog10[ISOC99]		clog10f[ISOC99]
   clog10l[ISOC99]
   drem[ISOC99]			dremf[ISOC99]
   dreml[ISOC99]
   finite[SUSv2]		finitef[ISOC99]
   finitel[ISOC99]
   gamma[SUSv2]			gammaf[ISOC99]
   gammal[ISOC99]
   j0f[ISOC99]			j0l[ISOC99]
   j1f[ISOC99]			j1l[ISOC99]
   jnf[ISOC99]			jnl[ISOC99]
   lgamma_r[ISOC99]		lgammaf_r[ISOC99]
   lgammal_r[ISOC99]
   pow10[ISOC99]		pow10f[ISOC99]
   pow10l[ISOC99]
   significand[ISOC99]		significandf[ISOC99]
   significandl[ISOC99]
   sincos[ISOC99]		sincosf[ISOC99]
   sincosl[ISOC99]
   y0f[ISOC99]			y0l[ISOC99]
   y1f[ISOC99]			y1l[ISOC99]
   ynf[ISOC99]			ynl[ISOC99]

To:

   Table A-6. libm Function Interfaces
   ...
   clog10(GLIBC_2.1)[LSB]		clog10f(GLIBC_2.1)[LSB]
   clog10l(GLIBC_2.1)[LSB]
   drem(GLIBC_2.0)[LSB]			dremf(GLIBC_2.0)[LSB]
   dreml(GLIBC_2.0)[LSB]
   finite(GLIBC_2.0)[LSB]		finitef(GLIBC_2.0)[LSB]
   finitel(GLIBC_2.0)[LSB]
   gamma(GLIBC_2.0)[LSB]		gammaf(GLIBC_2.0)[LSB]
   gammal(GLIBC_2.0)[LSB]
   j0f(GLIBC_2.0)[LSB]			j0l(GLIBC_2.0)[LSB]
   j1f(GLIBC_2.0)[LSB]			j1l(GLIBC_2.0)[LSB]
   jnf(GLIBC_2.0)[LSB]			jnl(GLIBC_2.0)[LSB]
   lgamma_r(GLIBC_2.0)[LSB]		lgammaf_r(GLIBC_2.0)[LSB]
   lgammal_r(GLIBC_2.0)[LSB]
   pow10(GLIBC_2.1)[LSB]		pow10f(GLIBC_2.1)[LSB]
   pow10l(GLIBC_2.1)[LSB]
   significand(GLIBC_2.0)[LSB]		significandf(GLIBC_2.0)[LSB]
   significandl(GLIBC_2.0)[LSB]
   sincos(GLIBC_2.1)[LSB]		sincosf(GLIBC_2.1)[LSB]
   sincosl(GLIBC_2.1)[LSB]
   y0f(GLIBC_2.0)[LSB]			y0l(GLIBC_2.0)[LSB]
   y1f(GLIBC_2.0)[LSB]			y1l(GLIBC_2.0)[LSB]
   ynf(GLIBC_2.0)[LSB]			ynl(GLIBC_2.0)[LSB]

NOTE: prior to LSB 3.2 interfaces that did not list LSB as the governing
specification did not appear in the Appendices in the architecture
specifications so the entries listed above had the noted values but did
not actually display.

====

In LSB Core IA32, PPC32, S390:

In 11.4.1.1. Interfaces for Math

Change:

   Table 11-25. libm - Math Function Interfaces
   ...
   clog10(GLIBC_2.2) [ISOC99]		clog10f(GLIBC_2.2) [ISOC99]
   clog10l(GLIBC_2.2) [ISOC99]
   drem(GLIBC_2.2) [ISOC99]		dremf(GLIBC_2.2) [ISOC99]
   dreml(GLIBC_2.2) [ISOC99]
   finite(GLIBC_2.2) [SUSv2]		finitef(GLIBC_2.2) [ISOC99]
   finitel(GLIBC_2.2) [ISOC99]
   gamma(GLIBC_2.2) [SUSv2]		gammaf(GLIBC_2.2) [ISOC99]
   gammal(GLIBC_2.2) [ISOC99]
   j0f(GLIBC_2.2) [ISOC99]		j0l(GLIBC_2.2) [ISOC99]
   j1f(GLIBC_2.2) [ISOC99]		j1l(GLIBC_2.2) [ISOC99]
   jnf(GLIBC_2.2) [ISOC99]		jnl(GLIBC_2.2) [ISOC99]
   lgamma_r(GLIBC_2.2) [ISOC99]		lgammaf_r(GLIBC_2.2) [ISOC99]
   lgammal_r(GLIBC_2.2) [ISOC99]
   pow10(GLIBC_2.2) [ISOC99]		pow10f(GLIBC_2.2) [ISOC99]
   pow10l(GLIBC_2.2) [ISOC99]
   significand(GLIBC_2.2) [ISOC99]	significandf(GLIBC_2.2) [ISOC99]
   significandl(GLIBC_2.2) [ISOC99]
   sincos(GLIBC_2.2) [ISOC99]		sincosf(GLIBC_2.2) [ISOC99]
   sincosl(GLIBC_2.2) [ISOC99]
   y0f(GLIBC_2.2) [ISOC99]		y0l(GLIBC_2.2) [ISOC99]
   y1f(GLIBC_2.2) [ISOC99]		y1l(GLIBC_2.2) [ISOC99]
   ynf(GLIBC_2.2) [ISOC99]		ynl(GLIBC_2.2) [ISOC99]

To:

   Table 11-34. libm - Math Function Interfaces
   ...
   clog10(GLIBC_2.2) [LSB]		clog10f(GLIBC_2.2) [LSB]
   clog10l(GLIBC_2.2) [LSB]
   drem(GLIBC_2.2) [LSB]		dremf(GLIBC_2.2) [LSB]
   dreml(GLIBC_2.2) [LSB]
   finite(GLIBC_2.2) [LSB]		finitef(GLIBC_2.2) [LSB]
   finitel(GLIBC_2.2) [LSB]
   gamma(GLIBC_2.2) [LSB]		gammaf(GLIBC_2.2) [LSB]
   gammal(GLIBC_2.2) [LSB]
   j0f(GLIBC_2.2) [LSB]			j0l(GLIBC_2.2) [LSB]
   j1f(GLIBC_2.2) [LSB]			j1l(GLIBC_2.2) [LSB]
   jnf(GLIBC_2.2) [LSB]			jnl(GLIBC_2.2) [LSB]
   lgamma_r(GLIBC_2.2) [LSB]		lgammaf_r(GLIBC_2.2) [LSB]
   lgammal_r(GLIBC_2.2) [LSB]
   pow10(GLIBC_2.2) [LSB]		pow10f(GLIBC_2.2) [LSB]
   pow10l(GLIBC_2.2) [LSB]
   significand(GLIBC_2.2) [LSB]		significandf(GLIBC_2.2) [LSB]
   significandl(GLIBC_2.2) [LSB]
   sincos(GLIBC_2.2) [LSB]		sincosf(GLIBC_2.2) [LSB]
   sincosl(GLIBC_2.2) [LSB]
   y0f(GLIBC_2.2) [LSB]			y0l(GLIBC_2.2) [LSB]
   y1f(GLIBC_2.2) [LSB]			y1l(GLIBC_2.2) [LSB]
   ynf(GLIBC_2.2) [LSB]			ynl(GLIBC_2.2) [LSB]

Add:

   Table 11-35. libm - Math Deprecated Function Interfaces
   drem(GLIBC_2.2) [LSB] dremf(GLIBC_2.2) [LSB] dreml(GLIBC_2.2) [LSB]
   finite(GLIBC_2.2) [LSB] finitef(GLIBC_2.2) [LSB] finitel(GLIBC_2.2) [LSB]
   gamma(GLIBC_2.2) [LSB] gammaf(GLIBC_2.2) [LSB]
   gammal(GLIBC_2.2) [LSB]

   An LSB conforming implementation shall provide the architecture
   specific data interfaces for Math specified in Table 11-36,
   with the full mandatory functionality as described in the
   referenced underlying specification.


In A.5. libm

Change:

   Table A-2. libm Function Interfaces
   ...
   clog10[ISOC99]		clog10f[ISOC99]
   clog10l[ISOC99]
   drem[ISOC99]			dremf[ISOC99]
   dreml[ISOC99]
   finite[SUSv2]		finitef[ISOC99]
   finitel[ISOC99]
   gamma[SUSv2]			gammaf[ISOC99]
   gammal[ISOC99]
   j0f[ISOC99]			j0l[ISOC99]
   j1f[ISOC99]			j1l[ISOC99]
   jnf[ISOC99]			jnl[ISOC99]
   lgamma_r[ISOC99]		lgammaf_r[ISOC99]
   lgammal_r[ISOC99]
   pow10[ISOC99]		pow10f[ISOC99]
   pow10l[ISOC99]
   significand[ISOC99]		significandf[ISOC99]
   significandl[ISOC99]
   sincos[ISOC99]		sincosf[ISOC99]
   sincosl[ISOC99]
   y0f[ISOC99]			y0l[ISOC99]
   y1f[ISOC99]			y1l[ISOC99]
   ynf[ISOC99]			ynl[ISOC99]

To:

   Table A-6. libm Function Interfaces
   ...
   clog10(GLIBC_2.2)[LSB]		clog10f(GLIBC_2.2)[LSB]
   clog10l(GLIBC_2.2)[LSB]
   drem(GLIBC_2.2)[LSB]			dremf(GLIBC_2.2)[LSB]
   dreml(GLIBC_2.2)[LSB]
   finite(GLIBC_2.2)[LSB]		finitef(GLIBC_2.2)[LSB]
   finitel(GLIBC_2.2)[LSB]
   gamma(GLIBC_2.2)[LSB]		gammaf(GLIBC_2.2)[LSB]
   gammal(GLIBC_2.2)[LSB]
   j0f(GLIBC_2.2)[LSB]			j0l(GLIBC_2.2)[LSB]
   j1f(GLIBC_2.2)[LSB]			j1l(GLIBC_2.2)[LSB]
   jnf(GLIBC_2.2)[LSB]			jnl(GLIBC_2.2)[LSB]
   lgamma_r(GLIBC_2.2)[LSB]		lgammaf_r(GLIBC_2.2)[LSB]
   lgammal_r(GLIBC_2.2)[LSB]
   pow10(GLIBC_2.2)[LSB]		pow10f(GLIBC_2.2)[LSB]
   pow10l(GLIBC_2.2)[LSB]
   significand(GLIBC_2.2)[LSB]		significandf(GLIBC_2.2)[LSB]
   significandl(GLIBC_2.2)[LSB]
   sincos(GLIBC_2.2)[LSB]		sincosf(GLIBC_2.2)[LSB]
   sincosl(GLIBC_2.2)[LSB]
   y0f(GLIBC_2.2)[LSB]			y0l(GLIBC_2.2)[LSB]
   y1f(GLIBC_2.2)[LSB]			y1l(GLIBC_2.2)[LSB]
   ynf(GLIBC_2.2)[LSB]			ynl(GLIBC_2.2)[LSB]

NOTE: prior to LSB 3.2 interfaces that did not list LSB as the governing
specification did not appear in the Appendices in the architecture
specifications so the entries listed above had the noted values but did
not actually display.

====

In LSB Core PPC64:

In 11.4.1.1. Interfaces for Math

Change:

   Table 11-25. libm - Math Function Interfaces
   ...
   clog10(GLIBC_2.3) [ISOC99]		clog10f(GLIBC_2.1) [ISOC99]
   clog10l(GLIBC_2.3) [ISOC99]
   drem(GLIBC_2.3) [ISOC99]		dremf(GLIBC_2.0) [ISOC99]
   dreml(GLIBC_2.3) [ISOC99]
   finite(GLIBC_2.3) [SUSv2]		finitef(GLIBC_2.0) [ISOC99]
   finitel(GLIBC_2.3) [ISOC99]
   gamma(GLIBC_2.3) [SUSv2]		gammaf(GLIBC_2.0) [ISOC99]
   gammal(GLIBC_2.3) [ISOC99]
   j0f(GLIBC_2.3) [ISOC99]		j0l(GLIBC_2.0) [ISOC99]
   j1f(GLIBC_2.3) [ISOC99]		j1l(GLIBC_2.0) [ISOC99]
   jnf(GLIBC_2.3) [ISOC99]		jnl(GLIBC_2.0) [ISOC99]
   lgamma_r(GLIBC_2.3) [ISOC99]		lgammaf_r(GLIBC_2.0) [ISOC99]
   lgammal_r(GLIBC_2.3) [ISOC99]
   pow10(GLIBC_2.3) [ISOC99]		pow10f(GLIBC_2.1) [ISOC99]
   pow10l(GLIBC_2.3) [ISOC99]
   significand(GLIBC_2.3) [ISOC99]	significandf(GLIBC_2.0) [ISOC99]
   significandl(GLIBC_2.3) [ISOC99]
   sincos(GLIBC_2.3) [ISOC99]		sincosf(GLIBC_2.1) [ISOC99]
   sincosl(GLIBC_2.3) [ISOC99]
   y0f(GLIBC_2.3) [ISOC99]		y0l(GLIBC_2.0) [ISOC99]
   y1f(GLIBC_2.3) [ISOC99]		y1l(GLIBC_2.0) [ISOC99]
   ynf(GLIBC_2.3) [ISOC99]		ynl(GLIBC_2.0) [ISOC99]

To:

   Table 11-34. libm - Math Function Interfaces
   ...
   clog10(GLIBC_2.3) [LSB]		clog10f(GLIBC_2.1) [LSB]
   clog10l(GLIBC_2.3) [LSB]
   drem(GLIBC_2.3) [LSB]		dremf(GLIBC_2.0) [LSB]
   dreml(GLIBC_2.3) [LSB]
   finite(GLIBC_2.3) [LSB]		finitef(GLIBC_2.0) [LSB]
   finitel(GLIBC_2.3) [LSB]
   gamma(GLIBC_2.3) [LSB]		gammaf(GLIBC_2.0) [LSB]
   gammal(GLIBC_2.3) [LSB]
   j0f(GLIBC_2.3) [LSB]			j0l(GLIBC_2.0) [LSB]
   j1f(GLIBC_2.3) [LSB]			j1l(GLIBC_2.0) [LSB]
   jnf(GLIBC_2.3) [LSB]			jnl(GLIBC_2.0) [LSB]
   lgamma_r(GLIBC_2.3) [LSB]		lgammaf_r(GLIBC_2.0) [LSB]
   lgammal_r(GLIBC_2.3) [LSB]
   pow10(GLIBC_2.3) [LSB]		pow10f(GLIBC_2.1) [LSB]
   pow10l(GLIBC_2.3) [LSB]
   significand(GLIBC_2.3) [LSB]		significandf(GLIBC_2.0) [LSB]
   significandl(GLIBC_2.3) [LSB]
   sincos(GLIBC_2.3) [LSB]		sincosf(GLIBC_2.1) [LSB]
   sincosl(GLIBC_2.3) [LSB]
   y0f(GLIBC_2.3) [LSB]			y0l(GLIBC_2.0) [LSB]
   y1f(GLIBC_2.3) [LSB]			y1l(GLIBC_2.0) [LSB]
   ynf(GLIBC_2.3) [LSB]			ynl(GLIBC_2.0) [LSB]

Add:

   Table 11-35. libm - Math Deprecated Function Interfaces
   drem(GLIBC_2.3) [LSB] dremf(GLIBC_2.0) [LSB] dreml(GLIBC_2.0) [LSB]
   finite(GLIBC_2.3) [LSB] finitef(GLIBC_2.0) [LSB] finitel(GLIBC_2.0) [LSB]
   gamma(GLIBC_2.3) [LSB] gammaf(GLIBC_2.0) [LSB]
   gammal(GLIBC_2.3) [LSB]

   An LSB conforming implementation shall provide the architecture
   specific data interfaces for Math specified in Table 11-36,
   with the full mandatory functionality as described in the
   referenced underlying specification.


In A.5. libm

Change:

   Table A-2. libm Function Interfaces
   ...
   clog10[ISOC99]		clog10f[ISOC99]
   clog10l[ISOC99]
   drem[ISOC99]			dremf[ISOC99]
   dreml[ISOC99]
   finite[SUSv2]		finitef[ISOC99]
   finitel[ISOC99]
   gamma[SUSv2]			gammaf[ISOC99]
   gammal[ISOC99]
   j0f[ISOC99]			j0l[ISOC99]
   j1f[ISOC99]			j1l[ISOC99]
   jnf[ISOC99]			jnl[ISOC99]
   lgamma_r[ISOC99]		lgammaf_r[ISOC99]
   lgammal_r[ISOC99]
   pow10[ISOC99]		pow10f[ISOC99]
   pow10l[ISOC99]
   significand[ISOC99]		significandf[ISOC99]
   significandl[ISOC99]
   sincos[ISOC99]		sincosf[ISOC99]
   sincosl[ISOC99]
   y0f[ISOC99]			y0l[ISOC99]
   y1f[ISOC99]			y1l[ISOC99]
   ynf[ISOC99]			ynl[ISOC99]

To:

   Table A-6. libm Function Interfaces
   ...
   clog10(GLIBC_2.3)[LSB]		clog10f(GLIBC_2.1)[LSB]
   clog10l(GLIBC_2.3)[LSB]
   drem(GLIBC_2.3)[LSB]			dremf(GLIBC_2.0)[LSB]
   dreml(GLIBC_2.3)[LSB]
   finite(GLIBC_2.3)[LSB]		finitef(GLIBC_2.0)[LSB]
   finitel(GLIBC_2.3)[LSB]
   gamma(GLIBC_2.3)[LSB]		gammaf(GLIBC_2.0)[LSB]
   gammal(GLIBC_2.3)[LSB]
   j0f(GLIBC_2.3)[LSB]			j0l(GLIBC_2.0)[LSB]
   j1f(GLIBC_2.3)[LSB]			j1l(GLIBC_2.0)[LSB]
   jnf(GLIBC_2.3)[LSB]			jnl(GLIBC_2.0)[LSB]
   lgamma_r(GLIBC_2.3)[LSB]		lgammaf_r(GLIBC_2.0)[LSB]
   lgammal_r(GLIBC_2.3)[LSB]
   pow10(GLIBC_2.3)[LSB]		pow10f(GLIBC_2.1)[LSB]
   pow10l(GLIBC_2.3)[LSB]
   significand(GLIBC_2.3)[LSB]		significandf(GLIBC_2.0)[LSB]
   significandl(GLIBC_2.3)[LSB]
   sincos(GLIBC_2.3)[LSB]		sincosf(GLIBC_2.1)[LSB]
   sincosl(GLIBC_2.3)[LSB]
   y0f(GLIBC_2.3)[LSB]			y0l(GLIBC_2.0)[LSB]
   y1f(GLIBC_2.3)[LSB]			y1l(GLIBC_2.0)[LSB]
   ynf(GLIBC_2.3)[LSB]			ynl(GLIBC_2.0)[LSB]

NOTE: prior to LSB 3.2 interfaces that did not list LSB as the governing
specification did not appear in the Appendices in the architecture
specifications so the entries listed above had the noted values but did
not actually display.

====

In LSB Core AMD64:

In 11.4.1.1. Interfaces for Math

Change:

   Table 11-25. libm - Math Function Interfaces
   ...
   clog10(GLIBC_2.2.5) [ISOC99]		clog10f(GLIBC_2.2.5) [ISOC99]
   clog10l(GLIBC_2.2.5) [ISOC99]
   drem(GLIBC_2.2.5) [ISOC99]		dremf(GLIBC_2.2.5) [ISOC99]
   dreml(GLIBC_2.2.5) [ISOC99]
   finite(GLIBC_2.2.5) [SUSv2]		finitef(GLIBC_2.2.5) [ISOC99]
   finitel(GLIBC_2.2.5) [ISOC99]
   gamma(GLIBC_2.2.5) [SUSv2]		gammaf(GLIBC_2.2.5) [ISOC99]
   gammal(GLIBC_2.2.5) [ISOC99]
   j0f(GLIBC_2.2.5) [ISOC99]		j0l(GLIBC_2.2.5) [ISOC99]
   j1f(GLIBC_2.2.5) [ISOC99]		j1l(GLIBC_2.2.5) [ISOC99]
   jnf(GLIBC_2.2.5) [ISOC99]		jnl(GLIBC_2.2.5) [ISOC99]
   lgamma_r(GLIBC_2.2.5) [ISOC99]	lgammaf_r(GLIBC_2.2.5) [ISOC99]
   lgammal_r(GLIBC_2.2.5) [ISOC99]
   pow10(GLIBC_2.2.5) [ISOC99]		pow10f(GLIBC_2.2.5) [ISOC99]
   pow10l(GLIBC_2.2.5) [ISOC99]
   significand(GLIBC_2.2.5) [ISOC99]	significandf(GLIBC_2.2.5) [ISOC99]
   significandl(GLIBC_2.2.5) [ISOC99]
   sincos(GLIBC_2.2.5) [ISOC99]		sincosf(GLIBC_2.2.5) [ISOC99]
   sincosl(GLIBC_2.2.5) [ISOC99]
   y0f(GLIBC_2.2.5) [ISOC99]		y0l(GLIBC_2.2.5) [ISOC99]
   y1f(GLIBC_2.2.5) [ISOC99]		y1l(GLIBC_2.2.5) [ISOC99]
   ynf(GLIBC_2.2.5) [ISOC99]		ynl(GLIBC_2.2.5) [ISOC99]

To:

   Table 11-34. libm - Math Function Interfaces
   ...
   clog10(GLIBC_2.2.5) [LSB]		clog10f(GLIBC_2.2.5) [LSB]
   clog10l(GLIBC_2.2.5) [LSB]
   drem(GLIBC_2.2.5) [LSB]		dremf(GLIBC_2.2.5) [LSB]
   dreml(GLIBC_2.2.5) [LSB]
   finite(GLIBC_2.2.5) [LSB]		finitef(GLIBC_2.2.5) [LSB]
   finitel(GLIBC_2.2.5) [LSB]
   gamma(GLIBC_2.2.5) [LSB]		gammaf(GLIBC_2.2.5) [LSB]
   gammal(GLIBC_2.2.5) [LSB]
   j0f(GLIBC_2.2.5) [LSB]		j0l(GLIBC_2.2.5) [LSB]
   j1f(GLIBC_2.2.5) [LSB]		j1l(GLIBC_2.2.5) [LSB]
   jnf(GLIBC_2.2.5) [LSB]		jnl(GLIBC_2.2.5) [LSB]
   lgamma_r(GLIBC_2.2.5) [LSB]		lgammaf_r(GLIBC_2.2.5) [LSB]
   lgammal_r(GLIBC_2.2.5) [LSB]
   pow10(GLIBC_2.2.5) [LSB]		pow10f(GLIBC_2.2.5) [LSB]
   pow10l(GLIBC_2.2.5) [LSB]
   significand(GLIBC_2.2.5) [LSB]	significandf(GLIBC_2.2.5) [LSB]
   significandl(GLIBC_2.2.5) [LSB]
   sincos(GLIBC_2.2.5) [LSB]		sincosf(GLIBC_2.2.5) [LSB]
   sincosl(GLIBC_2.2.5) [LSB]
   y0f(GLIBC_2.2.5) [LSB]		y0l(GLIBC_2.2.5) [LSB]
   y1f(GLIBC_2.2.5) [LSB]		y1l(GLIBC_2.2.5) [LSB]
   ynf(GLIBC_2.2.5) [LSB]		ynl(GLIBC_2.2.5) [LSB]

Add:

   Table 11-35. libm - Math Deprecated Function Interfaces
   drem(GLIBC_2.2.5) [LSB] dremf(GLIBC_2.2.5) [LSB] dreml(GLIBC_2.2.5) [LSB]
   finite(GLIBC_2.2.5) [LSB] finitef(GLIBC_2.2.5) [LSB] 
   finitel(GLIBC_2.2.5) [LSB]
   gamma(GLIBC_2.2.5) [LSB] gammaf(GLIBC_2.2.5) [LSB]
   gammal(GLIBC_2.2.5) [LSB]

   An LSB conforming implementation shall provide the architecture
   specific data interfaces for Math specified in Table 11-36,
   with the full mandatory functionality as described in the
   referenced underlying specification.


In A.5. libm

Change:

   Table A-2. libm Function Interfaces
   ...
   clog10[ISOC99]		clog10f[ISOC99]
   clog10l[ISOC99]
   drem[ISOC99]			dremf[ISOC99]
   dreml[ISOC99]
   finite[SUSv2]		finitef[ISOC99]
   finitel[ISOC99]
   gamma[SUSv2]			gammaf[ISOC99]
   gammal[ISOC99]
   j0f[ISOC99]			j0l[ISOC99]
   j1f[ISOC99]			j1l[ISOC99]
   jnf[ISOC99]			jnl[ISOC99]
   lgamma_r[ISOC99]		lgammaf_r[ISOC99]
   lgammal_r[ISOC99]
   pow10[ISOC99]		pow10f[ISOC99]
   pow10l[ISOC99]
   significand[ISOC99]		significandf[ISOC99]
   significandl[ISOC99]
   sincos[ISOC99]		sincosf[ISOC99]
   sincosl[ISOC99]
   y0f[ISOC99]			y0l[ISOC99]
   y1f[ISOC99]			y1l[ISOC99]
   ynf[ISOC99]			ynl[ISOC99]

To:

   Table A-6. libm Function Interfaces
   ...
   clog10(GLIBC_2.2.5)[LSB]		clog10f(GLIBC_2.2.5)[LSB]
   clog10l(GLIBC_2.2.5)[LSB]
   drem(GLIBC_2.2.5)[LSB]		dremf(GLIBC_2.2.5)[LSB]
   dreml(GLIBC_2.2.5)[LSB]
   finite(GLIBC_2.2.5)[LSB]		finitef(GLIBC_2.2.5)[LSB]
   finitel(GLIBC_2.2.5)[LSB]
   gamma(GLIBC_2.2.5)[LSB]		gammaf(GLIBC_2.2.5)[LSB]
   gammal(GLIBC_2.2.5)[LSB]
   j0f(GLIBC_2.2.5)[LSB]		j0l(GLIBC_2.2.5)[LSB]
   j1f(GLIBC_2.2.5)[LSB]		j1l(GLIBC_2.2.5)[LSB]
   jnf(GLIBC_2.2.5)[LSB]		jnl(GLIBC_2.2.5)[LSB]
   lgamma_r(GLIBC_2.2.5)[LSB]		lgammaf_r(GLIBC_2.2.5)[LSB]
   lgammal_r(GLIBC_2.2.5)[LSB]
   pow10(GLIBC_2.2.5)[LSB]		pow10f(GLIBC_2.2.5)[LSB]
   pow10l(GLIBC_2.2.5)[LSB]
   significand(GLIBC_2.2.5)[LSB]	significandf(GLIBC_2.2.5)[LSB]
   significandl(GLIBC_2.2.5)[LSB]
   sincos(GLIBC_2.2.5)[LSB]		sincosf(GLIBC_2.2.5)[LSB]
   sincosl(GLIBC_2.2.5)[LSB]
   y0f(GLIBC_2.2.5)[LSB]		y0l(GLIBC_2.2.5)[LSB]
   y1f(GLIBC_2.2.5)[LSB]		y1l(GLIBC_2.2.5)[LSB]
   ynf(GLIBC_2.2.5)[LSB]		ynl(GLIBC_2.2.5)[LSB]

NOTE: prior to LSB 3.2 interfaces that did not list LSB as the governing
specification did not appear in the Appendices in the architecture
specifications so the entries listed above had the noted values but did
not actually display.

