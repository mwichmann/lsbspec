#!/usr/bin/perl

use Carp;
use Getopt::Long;
use DBI;
use HTML::Entities;

use Env qw(LSBUSER LSBDBPASSWD LSBDB LSBDBHOST);

sub usage()
{
print STDERR "mkstandardsgmltable -a <archname>\n";
die;
}

sub quote($)
{
	my ($type) = @_;
	return $type if ($type =~ /^'.*'$/);
	my @tlist = split(/,/, $type);
	foreach $t (@tlist) {
		$t = "'$t'" if ($t !~ /^'.*'$/);
	}
	return join(',', @tlist);
}

# Uncomment to trace SQL statments
#$trace=1;

#
# 1) process the arguments
#
my $Stype="'Standard','Reference'";
GetOptions(	"a=s" => \$archname, 
		"s=s" => \$specids, 
		"x=s" => \$exclids, 
		"t=s" => \$Stype, 
	  );
if( !$archname && !$specids ) { usage(); }

#
# 2) Establish connection to the database
#
$dbh = DBI->connect('DBI:mysql:database='.$LSBDB.';host='.$LSBDBHOST, $LSBUSER, $LSBDBPASSWD)
    or die "Couldn't connect to database: ".DBI->errstr;

#
# 3) get & print the architecture info
#
if( $archname ) {
	$select = "SELECT * FROM Architecture WHERE ";
	$select.= "Architecture.Aname=".$dbh->quote($archname);
	print STDERR $select,"\n" if $trace;
	$sth = $dbh->prepare($select) or die "Couldn't prepare $select query: ".DBI->errstr;
	$sth->execute or die "Couldn't execute $select query: ".DBI->errstr;
	
	$entry=$sth->fetchrow_hashref;
	$sth->finish;
	$Aid=$entry->{'Aid'};
	
	if( not $entry->{'Aname'} ) {
		die "Unsupported architecture";
	}
} else {
	$Aid=0;
}

# check Stype is quoted properly
$Stype = quote($Stype);

$select = "SELECT * FROM Standard ";
$select.= "WHERE Stype in ($Stype) ";
$select.= "AND ( Sarch=$Aid OR Sarch=1 ) ";
if( $specids ) {
	$select.= "AND Sname IN ( $specids ) ";
}
if( $exclids ) {
	$select.= "AND Sname NOT IN ( $exclids ) ";
}
# $select .= "AND Sname != 'LSB' ";
$select.= "ORDER BY Sshort";
print STDERR $select,"\n" if $trace;

$sth = $dbh->prepare($select) or die "Couldn't prepare $select query: ".DBI->errstr;
$sth->execute or die "Couldn't execute $select query: ".DBI->errstr;

printf("<!-- Start of generated text - do not edit! -->\n");
printf("<!-- generated from the LSB specification database by mkstandardsgmltable -->\n");

print "<THEAD>\n";
print "<ROW>";
print "<ENTRY>Name</ENTRY><ENTRY>Title</ENTRY><ENTRY>URL</ENTRY>";
print "</ROW>";
print "</THEAD>\n";
print "<TBODY>\n";
for(1..$sth->rows) {
	$entry=$sth->fetchrow_hashref;
	print "<ROW>";
	# Don't print the nickname. It may be confusing
	#printf "<ENTRY>%s</ENTRY>",$entry->{'Sname'};
	printf "<ENTRY ID=\"std.%s\" XREFLABEL=\"%s\">%s</ENTRY>",makeid($entry->{'Sname'}),$entry->{'Sshort'},$entry->{'Sshort'};
	printf "<ENTRY>%s</ENTRY", $entry->{'Sfull'};
	printf "<ENTRY><ULINK URL=\"%s\">%s</ULINK></ENTRY>",
					encode_entities($entry->{'Surl'},"%&"), 
					encode_entities($entry->{'Surl'});
	#printf "<ENTRY>%s</ENTRY>",$entry->{'Sdescription'};
	print "</ROW>\n";
}
$sth->finish;
$dbh->disconnect;

print "</TBODY>\n";
printf("<!-- End of text generated from database -->\n");

sub makeid {
	my ($name) = @_;
	$name =~ s/\s+/./g;
	$name =~ s/[^A-Za-z0-9.]+/./g;
	# finally, remove any repeated . (e.g. "RPC...XDR" which arose from "RPC & XDR")
	$name =~ s/\.\.+/./g;
	return $name;
}
