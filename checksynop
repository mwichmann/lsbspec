#! /usr/bin/perl

#
# checksyn.pl
#  - read an SGML/XML page (usually a fragemnt of a doc, with no DTD)
#  - locate the function synopsis, if there is one
#  - check the synopsis against the LSB database.
#
#
# (c) 2004, Nick Stoughton, MSB Associates
#
# 
use XML::Simple;
use DBI;
use Env qw(LSBUSER LSBDBPASSWD LSBDB LSBDBHOST);
use File::Temp qw(tempfile);
use Data::Dumper;
use strict;
use Getopt::Long;

my $lsbversion;
my $verbose = 1;
my $dbh = DBI->connect('DBI:mysql:database='.$LSBDB.';host='.$LSBDBHOST, $LSBUSER, $LSBDBPASSWD)
    or die "Couldn't connect to database: ".DBI->errstr;

sub usage()
{
die "Usage: checksynop -v <lsbversion> [<file> ...]\n";
}

GetOptions(	"v=s" => \$lsbversion );

if( !$lsbversion ) { usage(); }
	
foreach my $file (@ARGV) {
	checksynopsis($file, $dbh);
}
1;

sub checksynopsis($$)
{
	my ($file, $dbh) = @_;
	my $fail = 0;

	print ("$file ... ") if ($verbose);
	$file = convert_to_xml($file);
	my $parsed = XMLin($file);
	my $funcname = $parsed->
				{'REFSYNOPSISDIV'}->
				{'FUNCSYNOPSIS'}->
				{'FUNCPROTOTYPE'}->
				{'FUNCDEF'}->
				{'FUNCTION'}->
				{'content'};
	my $functype = trim($parsed->
				{'REFSYNOPSISDIV'}->
				{'FUNCSYNOPSIS'}->
				{'FUNCPROTOTYPE'}->
				{'FUNCDEF'}->
				{'content'});
	my $args = $parsed->
				{'REFSYNOPSISDIV'}->
				{'FUNCSYNOPSIS'}->
				{'FUNCPROTOTYPE'}->
				{'PARAMDEF'};
	#
	# we want $args to be an array ref, even if there was only one
	# paramdef (it can be undef if this is a <void> or <varargs>
	# case)
	#
	if (defined ($args) && ref($args) ne "ARRAY") {
		$args = [ $args ];
	}
	#
	# also check for <void> and <varargs> cases
	#
	my $void = $parsed->
				{'REFSYNOPSISDIV'}->
				{'FUNCSYNOPSIS'}->
				{'FUNCPROTOTYPE'}->
				{'VOID'};
	my $tvarargs = $parsed->
				{'REFSYNOPSISDIV'}->
				{'FUNCSYNOPSIS'}->
				{'FUNCPROTOTYPE'}->
				{'VARARGS'};
	#
	# add varargs to the params ...
	#
	if (defined($tvarargs)) {
		push (@$args, { 'content' => '...' });
	}
	if (defined($void)) {
		$args = [ { 'content' => "void", } ];
	}
	#
	# now find the Interface in the DB
	#
	my $sql = "select * from Interface ";
	$sql .= "LEFT JOIN Type on Tid=Ireturn ";
	$sql .= "where ";
	$sql .= "Iname='$funcname' and ";
	$sql .= "Itype='function' and ";
	$sql .= "(Isrconly ='Yes' OR Iisdeprecated='Yes'";
	$sql .= "OR ( (AIappearedin <= '$lsbversion' and AIappearedin<>'') ";
	$sql .= "AND (AIwithdrawnin IS NULL OR AIwithdrawnin >'$lsbversion') ) ) ";

	my $sth = $dbh->prepare($sql) or die "Couldn't prepare $sql query: ".DBI->errstr;
	$sth->execute or die "Couldn't execute $sql query: ".DBI->errstr;
	if ($sth->rows() == 0) {
		$sth->finish;
		printf STDERR "%s: no such interface\n", $funcname;
		return;
	}
	my $entry = $sth->fetchrow_hashref();
	$sth->finish;
	my $dbtype = displaytyperef($entry);
	$dbtype = "void" if ($dbtype eq "");
	if ($dbtype ne $functype) {
		$fail++;
		printf("%s: doc has return type '%s', db has '%s'\n",
			$funcname, $functype, $dbtype);
	}
	#
	# and now the args ...
	#
	# we need to check this stuff both ways: 
	# i.e. are all the params in the doc in the database that way?
	# AND are all the params in the database also in the doc?
	#
	my @dbtypes = ();
	my $Iid = $entry->{'Iid'};
	$sql = "select * from Type, Parameter ";
	$sql .= "where Pint=$Iid and Ptype=Tid order by Ppos";
	$sth = $dbh->prepare($sql) or die "Couldn't prepare $sql query: ".DBI->errstr;
	$sth->execute or die "Couldn't execute $sql query: ".DBI->errstr;
	while (($entry = $sth->fetchrow_hashref())) {
		push (@dbtypes, displaytyperef($entry));
	}
	$sth->finish;
	my $pos = 0;
	foreach my $arg (@$args) {
		my $argtype = trim($arg->{'content'});
		$dbtype = $dbtypes[$pos];
		$dbtype = "void" if ($dbtype eq "");
		if ($dbtype ne $argtype) {
			$fail++;
			printf("%s: arg %d: according to the doc type is '%s', db has '%s'\n",
					$funcname, $pos, $argtype, $dbtype);
		}
		$pos++;
	}
	# and the other way too ...
	$pos = 0;
	if ($fail) {
		goto out;
	}
	foreach my $dbtype (@dbtypes) {
		my $argtype = trim($args->[$pos]->{'content'});
		if ($dbtype ne $argtype) {
			$fail++;
			printf("%s: arg %d: according to the db type is '%s', doc has '%s'\n",
					$funcname, $pos, $dbtype, $argtype);
		}
		$pos++;
	}
out:	print "NOT " if ($fail);
	print "OK\n";
}

sub convert_to_xml($)
{
	my ($file) = @_;
	my $xml;
	my $fh;
	
	$fh = new File::Temp("/tmp/toxmlXXXXXX");
	$xml = $fh->filename;

	my $hdr = 
'<!DOCTYPE REFENTRY PUBLIC "-//OASIS//DTD DocBook V4.1//EN" [
<!ENTITY % funcprototype.element "IGNORE">
<!ELEMENT FuncPrototype - O (FuncDef, (Void | (ParamDef*, VarArgs?)))>
<!ENTITY % entities SYSTEM "/home/nick/LSB/lsbspec/entities">
%entities;
]>
';
	print $fh $hdr;
	open IN,"<$file" || die "unable to open $file";
	while (<IN>) {
		print $fh $_;
	}
	close IN;
	close $fh;
	$xml = `osx -c /etc/sgml/catalog -xno-nl-in-tag $xml`;
	return $xml;
}
	
sub displaytyperef($)
{
my ($param) = @_;
my($select,$sth,$type);
my ($tselect, $tmselect, $Tid, $tmh, $tmentry, $nameonly);
my ($tth, $TMtypeid, $th, $entry);
my $retval = "";

if( $$param{'Pconst'} eq "Yes" ) {
	$retval .= "const ";
	}

if( $$param{'Ttype'} eq "Intrinsic" ) {
	$retval .= $$param{'Tname'};
	return $retval;
	}

if( $$param{'Ttype'} eq "Literal" ) {
	$retval .= $$param{'Tname'};
	return $retval;
	}

if( $$param{'Ttype'} eq "Const" ) {
	$select = "SELECT * FROM Type WHERE Tid=".$$param{'Tbasetype'};
	$sth = $dbh->prepare($select) or die "Couldn't prepare $select query: ".DBI->errstr;
	$sth->execute or die "Couldn't execute $select query: ".DBI->errstr;
	$type = $sth->fetchrow_hashref;
	$sth->finish;
	if( $type->{'Ttype'} eq "Pointer" ) {
		$retval .= displaytyperef($type);
		$retval .= "const ";
	} else {
		$retval .= "const ";
		$retval .= displaytyperef($type);
	}
	return $retval;
	}

if( $$param{'Ttype'} eq "Pointer" ) {
	$select = "SELECT * FROM Type WHERE Tid=".$$param{'Tbasetype'};
	$sth = $dbh->prepare($select) or die "Couldn't prepare $select query: ".DBI->errstr;
	$sth->execute or die "Couldn't execute $select query: ".DBI->errstr;
	$type = $sth->fetchrow_hashref;
	$sth->finish;
	$retval .= displaytyperef($type);
	$retval .= " *";
	return $retval;
	}

if( $$param{'Ttype'} eq "Struct" ) {
	$retval .= "struct ".$$param{'Tname'};
	return $retval;
	}

if( $$param{'Ttype'} eq "Typedef" ) {
	$retval .= $$param{'Tname'};
	return $retval;
	}

if( $$param{'Ttype'} eq "Union" ) {
	$retval .= "union ".$$param{'Tname'};
	return $retval;
	}

if( $$param{'Ttype'} eq "Enum" ) {
	$retval .= "enum ".$$param{'Tname'};
	return $retval;
	}

if( $$param{'Ttype'} eq "Array" ) {
	my $basetype=$$param{'Tbasetype'};
	$tselect="SELECT * FROM Type WHERE Tid=$basetype";
	$tth = $dbh->prepare($tselect) or die "Couldn't prepare $tselect query: ".DBI->errstr;
	$tth->execute or die "Couldn't execute $tselect query: ".DBI->errstr;
	$type = $tth->fetchrow_hashref;
	$tth->finish;
	if( !$nameonly ) {
		$nameonly=1;
		$retval .= displaytyperef($type);
		$nameonly=0;
	} else {
		$retval .= displaytyperef($type);
		}
	if( $$param{'Tname'} =~ "fptr" ) {
		$$param{'Tname'} =~ s/fptr-//;
		}
	return $retval;
	}

if( $$param{'Ttype'} eq "FuncPtr" ) {
	$select = "SELECT * FROM Type WHERE Tid=".$$param{'Tbasetype'};
	$sth = $dbh->prepare($select) or die "Couldn't prepare $select query: ".DBI->errstr;
	$sth->execute or die "Couldn't execute $select query: ".DBI->errstr;
	$type = $sth->fetchrow_hashref;
	$sth->finish;
	$Tid=$$param{'Tid'};
	$retval .= displaytyperef($type);
	$retval .= "(*";
	if( $$param{'Tname'} =~ "fptr" ) {
		$$param{'Tname'} =~ s/fptr-//;
		}
	#print $$param{'Tname'};
	$retval .= ")";

	$retval .= "(";

	$tmselect="SELECT * FROM TypeMember WHERE TMmemberof=$Tid";
	$tmselect.=" ORDER BY TMposition";
	$tmh = $dbh->prepare($tmselect) or die "Couldn't prepare $tmselect query: ".DBI->errstr;
	$tmh->execute or die "Couldn't execute $tmselect query: ".DBI->errstr;
	if($tmh->rows == 0) {
		$retval .= "void";
	}
	for(1..$tmh->rows) {
		$tmentry = $tmh->fetchrow_hashref;
		$TMtypeid=$tmentry->{'TMtypeid'};
		$tselect="SELECT * FROM Type WHERE Tid=$TMtypeid";
		$th = $dbh->prepare($tselect) or die "Couldn't prepare $tselect query: ".DBI->errstr;
		$th->execute or die "Couldn't execute $tselect query: ".DBI->errstr;
		$entry = $th->fetchrow_hashref;
		$th->finish;
		$nameonly=1;
		displaytype($entry);
		#print $tmentry->{'TMname'};
		if( $tmentry->{'TMarray'} ) {
			$retval .= "[".$tmentry->{'TMarray'}."]";
			}
		if( $_ != $tmh->rows ) {
			$retval .= ",";
			}
		$nameonly=0;
	}
	$tmh->finish;
	
	$retval .= ")\n";
	return $retval;
	}

$retval .= $$param{'Ttype'};
return $retval;
}

sub trim($)
{
	my ($str) = @_;

	$str =~ s/^ *(.*)$/\1/s;
	$str =~ s/\n//gs;
	$str =~ s/  +/ /gs;
	$str =~ s/ *$//s;
	return $str;
}

$dbh->disconnect;
