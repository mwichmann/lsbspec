#!/usr/bin/perl

use Getopt::Long;
use DBI;

use Env qw(LSBUSER LSBDBPASSWD LSBDB LSBDBHOST);

sub usage()
{
print STDERR "mklibsgmltable -a <archname> -v <lsbversion> [-f] [-m modname ] [[-l incllibs] | [-x excllibs ]]\n";
die;
}

sub quotify($)
{
	my ($str) = @_;
	$str =~ s/,/','/g;
	$str = "'" . $str . "'";
	return $str;
}

# Uncomment to trace SQL statments
#$trace=1;

#
# 1) process the arguments
#
$numcols=1;
$dodesc=0;
GetOptions("a=s" => \$archname,
	   "f" => \$future,
	   "l=s" => \$inclib,
	   "m=s" => \$module,
	   "v=s" => \$lsbversion,
	   "x=s" => \$excllib);

if( !$archname ) { usage(); }
if( !$lsbversion ) { usage(); }
if( $inclib && $excllib ) { usage(); }

#
# 2) Establish connection to the database
#
$dbh = DBI->connect('DBI:mysql:database='.$LSBDB.';host='.$LSBDBHOST, $LSBUSER, $LSBDBPASSWD)
    or die "Couldn't connect to database: ".DBI->errstr;

#
# 3) get & print the architecture info
#
$select = "SELECT * FROM Architecture ";
$select.= "WHERE Architecture.Aname=".$dbh->quote($archname);
print STDERR $select,"\n" if $trace;
$sth = $dbh->prepare($select) or die "Couldn't prepare $select query: ".DBI->errstr;
$sth->execute or die "Couldn't execute $select query: ".DBI->errstr;

$entry=$sth->fetchrow_hashref;
$sth->finish;
$Aid=0;
if( $entry->{'Aid'} ) {
	$Aid=$entry->{'Aid'};
}

if( (not $entry->{'Aname'}) and ($archname ne 'None') ) {
	die "Unsupported architecture";
}

$Aname=$entry->{'Aname'};

if( $archname eq 'None' ) {
	$Aid=1;
}

#
# 4) Get the data
#
$select = "SELECT * FROM Library ";
if( $module ) {
	$select.= "LEFT JOIN ModLib ON MLlid=Lid ";
	$select.= "LEFT JOIN Module ON MLmid=Mid ";
}
$select.= "LEFT JOIN ArchLib ON Lid=ALlid ";
if( $future ) {
	$select.= "WHERE (Lcandidatefor<>'' OR (ALappearedin <= '$lsbversion' AND ALappearedin<>'' ";
	$select.= "AND (ALwithdrawnin IS NULL OR ALwithdrawnin > '$lsbversion') ) ) ";
} else {
	$select.= "WHERE (ALappearedin <= '$lsbversion' AND ALappearedin<>'' ";
	$select.= "AND (ALwithdrawnin IS NULL OR ALwithdrawnin > '$lsbversion') ) ";
}
if( $module ) {

	$select.= "AND Mname IN (".quotify($module).") ";
}
if( $inclib ) {
	$select.= "AND Lname IN (".$inclib.") ";
}
if( $excllib ) {
	$select.= "AND Lname NOT IN (".$excllib.") ";
}
$select.= "AND ALaid=$Aid";
#$select .=" ORDER BY Lname ";
#printf STDERR $select,"\n";
$sth = $dbh->prepare($select) or die "Couldn't prepare $select query: ".DBI->errstr;
$sth->execute or die "Couldn't execute $select query: ".DBI->errstr;

printf("<!-- Start of text generated from database -->\n");
printf("<!-- generated from the LSB specification database -->\n");
printf("<!--    by \$Header: mklibsgmltable 1.10 2004/08/16 20:09:13 anderson Exp $- -->\n");
my $now_string = localtime;
printf("<!--    at %s -->\n", $now_string );

print "<TBODY>\n";

if( $archname ne 'None' ) {
	for(1..$sth->rows) {
		$entry=$sth->fetchrow_hashref;
		if( $entry->{'ALrunname'} eq "" ) {
			next;
			}
		print "<ROW>";
		printf "<ENTRY ID=\"lib.%s\" XREFLABEL=\"%s\">%s</ENTRY>",
			makeid($entry->{'Lname'}),
			$entry->{'ALrunname'},
			$entry->{'Lname'};
		printf "<ENTRY>%s</ENTRY>",$entry->{'ALrunname'};
		print "</ROW>\n";
	}
}
else {
	for(1..$sth->rows) {
		$entry=$sth->fetchrow_hashref;
		if( $entry->{'ALrunname'} ne "" ) {
			next;
		}
		print "<ROW>";
		printf "<ENTRY ID=\"lib.%s\" XREFLABEL=\"%s\">%s</ENTRY>",
			makeid($entry->{'Lname'}),
			"See archLSB",
			$entry->{'Lname'};
		printf "<ENTRY>%s</ENTRY>","See archLSB";
		print "</ROW>\n";
	}
}
$sth->finish;
$dbh->disconnect;

print "</TBODY>\n";
printf("<!-- End of text generated from database -->\n");
printf("<!--    by \$Header: mklibsgmltable 1.10 2004/08/16 20:09:13 anderson Exp $- -->\n");

sub makeid {
	my ($name) = @_;
	$name =~ s/\s+/./g;
	$name =~ s/[^A-Za-z0-9.]+/./g;
	# finally, remove any repeated . (e.g. "RPC...XDR" which arose from "RPC & XDR")
	$name =~ s/\.\.+/./g;
	return $name;
}
