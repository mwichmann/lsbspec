#!/usr/bin/perl

use Getopt::Long;
use Mysql;

use Env qw(LSBUSER LSBDBPASSWD LSBDB LSBDBHOST);

sub usage()
{
print STDERR "mklibsgmltable -a <archname> [-f] [-m modname ] [[-l incllibs] | [-x excllibs ]]\n";
die;
}

# Uncomment to trace SQL statments
#$trace=1;

#
# 1) process the arguments
#
$numcols=1;
$dodesc=0;
GetOptions("a=s" => \$archname,
	   "f" => \$future,
	   "l=s" => \$inclib,
	   "m=s" => \$module,
	   "x=s" => \$excllib);

if( !$archname ) { usage(); }
if( $inclib && $excllib ) { usage(); }

#
# 2) Establish connection to the database
#
$Dbh = Mysql->connect($LSBDBHOST,$LSBDB,$LSBUSER, $LSBDBPASSWD) || die $Mysql::db_errstr;

#
# 3) get & print the architecture info
#
$select = "SELECT * FROM Architecture ";
$select.= "WHERE Architecture.Aname=".$Dbh->quote($archname);
print STDERR $select,"\n" if $trace;
$sth = $Dbh->query($select) || die $select."\n".$Dbh->errmsg();

%entry=$sth->fetchhash;
$Aid=0;
if( $entry{'Aid'} ) {
	$Aid=$entry{'Aid'};
	}
$Aname=$entry{'Aname'};

#
# 4) Get the data
#
$select = "SELECT * FROM Library ";
if( $module ) {
	$select.= "LEFT JOIN ModLib ON MLlid=Lid ";
	$select.= "LEFT JOIN Module ON MLmid=Mid ";
}
$select.= "LEFT JOIN ArchLib ON Lid=ALlid ";
if( $future ) {
	$select.= "WHERE ( Lstdstatus='Included' OR Lstdstatus='Future' ) ";
} else {
	$select.= "WHERE Lstdstatus='Included' ";
}
if( $module ) {
	$select.= "AND Mname='".$module."' ";
}
if( $inclib ) {
	$select.= "AND Lname IN (".$inclib.") ";
}
if( $excllib ) {
	$select.= "AND Lname NOT IN (".$excllib.") ";
}
$select.= "AND ALaid=$Aid";
#$select .=" ORDER BY Lname ";
#printf STDERR $select,"\n";
$sth = $Dbh->query($select) || die $Dbh->errmsg();

printf("<!-- Start of text generated from database -->\n");
printf("<!-- generated from the LSB specification database -->\n");
printf("<!--    by \$Header: mklibsgmltable 1.10 2004/08/16 20:09:13 anderson Exp $- -->\n");
my $now_string = localtime;
printf("<!--    at %s -->\n", $now_string );

print "<TBODY>\n";
for(1..$sth->numrows) {
	%entry=$sth->fetchhash;
	if( $entry{'ALrunname'} eq "" ) {
		next;
		}
	print "<ROW>";
	printf "<ENTRY ID=\"lib.%s\" XREFLABEL=\"%s\">%s</ENTRY>",
		makeid($entry{'Lname'}),
		$entry{'ALrunname'},
		$entry{'Lname'};
	printf "<ENTRY>%s</ENTRY>",$entry{'ALrunname'};
	print "</ROW>\n";
}
print "</TBODY>\n";
printf("<!-- End of text generated from database -->\n");
printf("<!--    by \$Header: mklibsgmltable 1.10 2004/08/16 20:09:13 anderson Exp $- -->\n");

sub makeid {
	my ($name) = @_;
	$name =~ s/\s+/./g;
	$name =~ s/[^A-Za-z0-9.]+/./g;
	# finally, remove any repeated . (e.g. "RPC...XDR" which arose from "RPC & XDR")
	$name =~ s/\.\.+/./g;
	return $name;
}
