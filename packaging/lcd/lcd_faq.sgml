<!DOCTYPE BOOK PUBLIC "-//OASIS//DTD DocBook V3.1//EN" >
<book>
  <article>
    <artheader>
    <author>
      <firstname>Albert</firstname>
      <surname>den Haan</surname>
	<affiliation>
	  <orgname>Corel Corporation</orgname>
	  <address><email>albertdh@sourceforge.net</email></address>
	  <address><email>albertd@corel.com</email></address>
	</affiliation>
    </author>
    <title>LSB LCD task-force FAQ</title>
    <subtitle>Frequently Asked Questions of the Lowest Common Denominator packaging task-force of
    the Linux Standards Base</subtitle>
    <revhistory>
      <revision>
	<revnumber>$Revision: 1.3 $</revnumber>
	<date>$Date: 2001-03-01 22:27:06 $</date>
      </Revision>
    </revhistory>
    </artheader>
    <abstract>
      <para>Frequently asked questions (with answers) about the lowest
      common denominator packaging task-force and its work.</para>
      <para>Some of this material is based on a previous <ulink
      url="http://www.linuxbase.org/spec/faq.html">LSB FAQ</ulink>.</para>
    </abstract>

    <sect1>
      <title>This document</title>
      <para>Because this document is a work in progress please excuse
any inconsistencies or inaccuracies you may find.  Please bring them to
our attention (with fixes and rationales if possible) and we will do
our best to address them.</para>
      <para>Here are some known problems and unfinished
work:
<variablelist>
	  <varlistentry>
	    <term>Longevity</term>
	    <listitem>
	      <para>The longevity of the LCD work-products depend on when
the Unified packaging task-force's stuff becomes available.  Therefore
we have no idea how long the LCD will be needed for.  Therefore
&mdash; even though the first priority is to get
something workable out quickly &mdash; more than
one version may be necessary to provide features missed on the
previous passes.</para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>benefits</term>
	    <listitem>
	      <para>The benefits of a single LSB based packaging system
are so obvious to me (albertd) that its hard to write them all down.
The advantages are not limited to the LCD work either.  Help?</para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </para>
    </sect1>
    <sect1>
      <title>The task-force</title>
      <sect2>
	<title>How does the task-force work?</title> 

	<para>This task-force is just getting started (i.e. in Feb
	2001) so our working style is still being determined.  We
	already have a mailing list and a CVS repository to publish
	our work items in.  </para> 

	<para>Occasionally people may actually gather together
	physically to work on task-force business.  Minutes of those
	meetings will be published on the mailing list and the
	web-site.  </para>
      </sect2>
      <sect2>
	<title>Where do I subscribe to the mailing list?</title>
	<para>At Source Forge's subscriptions page for Lsb-taskforce1 <ulink
	url="http://lists.sourceforge.net/mailman/listinfo/lsb-taskforce1">
	"http://lists.sourceforge.net/mailman/listinfo/lsb-taskforce1</ulink>.</para>
      </sect2>
      <sect2>
	<title>Where do I find archives of the mailing list?</title>
	<para>At Source Forge's archives
	pages<ulink
	url="http://lists.sourceforge.net/archives//lsb-taskforce1/">http://lists.sourceforge.net/archives//lsb-taskforce1/</ulink>.</para>
      </sect2>
      <sect2>
	<title>Is there a task-force web-site?</title>
	<para> Not yet.  </para>
	<para> For now minutes and such will be published on the Linux
	Standard Base's <ulink
	url="http://www.linuxbase.org/"></ulink> web-site; particularly
	on talks page <ulink
	url="http://www.linuxbase.org/talks/mindex.html"></ulink></para>
      </sect2>
      <sect2>
	<title>Where do I find archives of the work-group meeting
	minutes?</title> <para> On the Linux Standard Base's talks page
	<ulink
	url="http://www.linuxbase.org/talks/mindex.html"></ulink></para>
      </sect2>
      <sect2>
	<title>How to Contribute.</title>
	<para>The LSB LCD task-force is set of volunteers that have
	banded
	together to get a cross distribution packaging system working.</para>
	<para>You can contribute to the LSB LCD standard and
	implementations in a few ways:  
          <itemizedlist>
	    <listitem><simpara>Participate in the discussions on the LSB LCD
<ulink
url="http://lists.sourceforge.net/lists/listinfo/lsb-taskforce1">email
lists</ulink>
	  </simpara></listitem>
	    <listitem><simpara>Contribute code and patches for your
favourite distributions implementation.
	  </simpara></listitem>
	    <listitem><simpara>Package your favourite bit of software
using the tools so we can test this stuff.
	  </simpara></listitem>
	    <listitem><simpara>Cheer us on?</simpara></listitem>
	</itemizedlist>
</para>
      </sect2>
    </sect1>

    <sect1>
      <title>Goals</title>
      <sect2>
	<title>What are your goals? (General)</title>
	<para>To quickly implement a simple package management system
	for as many Linux distributions as possible that will install
	and manage software packages using:
        <itemizedlist>
	    <listitem><simpara>Common archive format for both source and binary package formats.</simpara></listitem>
	    <listitem><simpara>A common dependency structure.</simpara></listitem>
	    <listitem><simpara>Tools and libraries already available on most if not all distributions.</simpara></listitem>
	  </itemizedlist></para>
	<para>Some specific work products are: <itemizedlist>
	    <listitem><simpara>Documentation of the goals, design decisions (and
	    their rationales) in the mailing lists and CVS </simpara></listitem>
	    <listitem><simpara>Reference implementations of the package system
	    for more than 2 distributions.</simpara></listitem>
	    <listitem><simpara>Reference implementations of package construction
	    systems for trivial and reasonably complex systems to
	    deliver.</simpara></listitem>
	  </itemizedlist>
</para>
      </sect2>

      <sect2>
	<title>What is a "Reference Implementation?"</title>
	<para>A "Reference Implementation" is an implementation
	intended for correctness and clarity of exposition rather than
	efficiency or elegance. </para>
	<para>Clarity and correctness will allow this task-force to
	play with ideas in an explicit way and share the results in a
	concrete form.  Other implementations can work on the
	efficiency and elegance aspects once we know what is
	"correct"</para>
      </sect2>
      
      <sect2>
	<title>How long is this standard expected to be useful?</title>
	<para>The expectation is that it will not last very long but
	we may be surprised.  This standard is expected to be a
	learning experience to show everyone what package management
	features are essential and how useful a common packaging
	standard will be. </para>
	<para>The lessons learned here will undoubtedly affect the
	next generation "unified" package manager of another LSB
	packaging task-force.</para>
      </sect2>
    </sect1>

    <sect1>
      <title>Decisions Made</title>
      <para>Because this task-force is focused on building working
      implementations quickly many of the decisions on what to make
      part of the "standard" are being made purely on pragmatic
      considerations.  If an aspect of what would be needed as part of
      the system already has a working implementation that is widely
      available, it may just become part of the "standard" as it is to
      speed the building of reference implementations. </para>
      <sect2>
	<title>What file format will the binary packages use?</title>
	<para>A specific version of the RPM binary package format.
	This is expected to be a version compatible with both the
	current RPM v3 and v4 package manager implementations
	currently in existence.</para>
	<sect3>
	  <title>Why the RPM file format?</title> 
	  <para>Pragmatism.  The RPM binary
	  package file format is a proven, robust, backward and
	  forward compatible format.  It's currently used by many
	  distributions and is understood boy others.</para>
	</sect3>
      <sect2>
	<title>What file format will the source packages use?</title>
	<para>An ad-hoc gzip compressed GNU tarball with an lsb-pkg-construct shell (sh) script in its root.  Details to be determined.</para>
      </sect2>

      <sect2>
	<title>What is the base software package in the trivial package example?</title> 
	<para>The  trivial package example is intended to be just enough to test out the
	packaging system from end to end from building to delivery to installation.  </para>

	<para> The GNU example "Hello World" software project should
	be enough :). It has executable and documentation components
	and some dependence on LSB mandated libraries. </para>

      </sect2>
      <sect2>
	<title>What is the trivial package example?</title> 
	<para>A
	simple "Hello World" example would be enough to test out the
	packaging system from end to end.  The GNU example "Hello
	World" software project should be enough. </para>
      </sect2>
      <sect2>
	<title>What is the "reasonably complex" package example?</title> 
	<para>GNU "Hello World" :). </para>
 	<para>Seriously however, we need a chunk of software that is: <itemizedlist>
	    <listitem>
	      <simpara>
delivered in several parts: some needed by the others and others optional.</simpara>
	    </listitem>
	    <listitem>
	      <simpara>of manageable size.</simpara>
	    </listitem>
	    <listitem>
	      <simpara>easy to test from a packaging standpoint.</simpara>
	    </listitem>
	    <listitem>
	      <simpara>already works on a number of distros.</simpara>
	    </listitem>
	  </itemizedlist>
</para>
     </sect2>
    </sect1>

    <sect1>
      <title>Design Decisions Remaining</title>
      <sect2>
	<title>How to to hack up rpm-lint to make it an LSB-LCD verifier</title>
	<para>It looks like Frederic Lepied's rpm-lint already can be told to consider alternate rule sets to verify.  The actual rules an LSB-LCD compliant packages must satisfy are yet to be determined and coded for rpm-lint. </para>
      </sect2>
    </sect1>
    <sect1>
      <title>ISV Questions.</title>
      <sect2>
	<title>What is an ISV?</title>
	<para>An Independent Software Vendor.  An ISV is any
organization that has a software packages to install, but (probably)
does not control an installtion environment (e.g. Linux distribution) itself.</para>
      </sect2>
	<sect2>
	  <title>As an ISV do I have to supply my
application in RPM format to be LSB compliant</title>
	  <para>No. ISV's are not obligated to ship their software in the RPM format.
They can use any other format, or even write their own custom
installer. However using the LSB recommended format will probably make
life easier for themselves and their users.</para>
	  <para>Please note that just having LCD compliant packages will
not automatically assure that the packaged software will install
properly or work as required on all systems with implementations of
the LCD packaging system.  One, implementations of the LSB spec and
the LCD packaging system will vary somewhat in areas outside the
standards that may be important to your software. Two, errors do
happen and the faster they are discovered the cheaper it is to fix
them.  Quality assurance checks should still be
performed for each release that you wish to claim compatibility
with.</para>
	  <para>That said, conformance with the LSB standard and using
the LCD packaging system will save effort and time.  The LSB limits
the range of systems to develop for and the LCD packaging system
reduces the installation complexity and duplication to the lowest
common denominator by design.</para>
	</sect2>
</sect1>
    <sect1>
      <title>Other Questions</title>
	<sect2>
	  <title>I like to use packager &lt;foo&gt; instead of
RPM!</title>
	  <para>The LSB does not specify the program `rpm' nor the
RPM database, but
instead the RPM file format. How the LSB compliant packages are
processed by the distributions during installation is up to
them. Using conversion programs such as alien it is possible to
convert the format to .tgz or .deb files and use other package
management programs other than rpm. </para>
<para>This arrangement was agreed up on
by the major distributions including deb based ones (eg Debian, Storm,
Corel) as well as RPM based ones (Red Hat, SuSE, TurboLinux, Caldera,
Mandrake).
</para>
	</sect2>
	<sect2>
	  <title>But some features of the RPM format can't be done by format &lt;X&gt;!</title>
	  <para>For compatibility reasons with Debian dpkg systems using alien, we
will also sharply restrict what kind of features can be
included in LSB binary packages.  For example: trigger scripts and
relocatable file-system payloads are not going to be allowed in LSB
binary package.</para>
	  <para>One of the tasks of this task-force is to build an
official LCD package verifier to check all statically verifiable
packaging rules for certification purposes.  Currently it looks like an extension of
Rpmlint will do the job.</para>
	</sect2>
	<sect2>
	  <title>What about this new RPM/deb merged packaging format I've heard about?</title>
	  <para>The use of the RPM format is intended to be an interim measure. The
work on this new format has not been completed yet. It will probably
be adopted by the LSB in the future when it is ready.</para>
	  <para>The second LSB packaging task-force is looking after
this task.  Its email list is at <ulink
	url="http://lists.sourceforge.net/mailman/listinfo/lsb-taskforce2">
	"http://lists.sourceforge.net/mailman/listinfo/lsb-taskforce2</ulink></para>
	</sect2>
	<sect2>
	  <title>I don't like RPMs because I've tried using an RPM for distribution &lt;a&gt; and it didn't work on distribution &lt;b&gt;</title>
	  <para>This is a problem associated with the release
structure and context that a package was created for
and not the actual packaging format. These problems are due to
differences between different distributions such as directory layout
and ABI differences between versions of libraries installed. </para>
<para>Parts of
the LSB specification such as the File Hierarchy Standard (FHS) and
the specification of various ABIs attempt to remove these problems.
One of the LCD work-products is a set of release specific meta packages
that document and enforce the sets of native packages that best
implement the current LSB Standard. </para>
<para>  These packages are intended as a best effort attempt to
make the dependency systems work for us in the short term.  Later
iterations will refine both the LSB compliance of the individual
distributions and the sophistication of the dependency network.</para>
	</sect2>
	<sect2>
	  <title>Why aren't categories of packages (such as
System, Development, Networking) defined in the LSB</title>
	  <para>This is considered outside the scope of the LSB. It
does not affect the ability 
for packages to install and run on different distributions. </para>
<para>However, more sophisticated dependency networks between LSB
packages may turn out to be necessary to describe optional portions of
the LSB specification.  This does not seem to be necessary yet so we
will duck the problem for as long as is possible.</para>
	</sect2>
	<sect2>
	  <title>What dependencies can be specified in an LSB compliant package?</title>
	  <para>The package should only be dependent on the base LSB system (eg
LSB-2.0) being present and other LSB packages. </para>
<para> In the short term we
expect that only packages from the same or co-operating ISVs will have
inter-dependencies because no official forum exists for standardizing
such dependencies.  We expect that when there is enough experience around to
determine a need then standards will appear.</para>
	</sect2>
    </sect1>
  </article>
</book>

<!--
Local Variables:
mode: sgml
End:
-->
