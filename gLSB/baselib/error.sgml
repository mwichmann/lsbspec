<REFENTRY ID="baselib-error-n"> <REFMETA>
<REFENTRYTITLE>error</REFENTRYTITLE>
<REFMISCINFO>Base Libraries</REFMISCINFO>
</REFMETA>
<REFNAMEDIV>
<REFNAME>error</REFNAME>
<REFPURPOSE>
analyze and disperse compiler error messages
</REFPURPOSE>
</REFNAMEDIV>
<REFSYNOPSISDIV>
<REFSYNOPSISDIVINFO>
<DATE>2 April 2001</DATE>
</REFSYNOPSISDIVINFO>
<SYNOPSIS>
error [-n] [-s] [-q] [-v] [-t suffixlist] [-I ignorefile] [name]
</SYNOPSIS>
</REFSYNOPSISDIV>
<REFSECT1>
<REFSECT1INFO>
<DATE>2 April 2001</DATE>
</REFSECT1INFO>
<TITLE>Description
</TITLE>
<PARA>
Error analyzes and optionally disperses the diagnostic error messages          produced by a number of compilers and language processors to the source
file and line where the errors occurred.  It can replace the painful,          traditional methods of scribbling abbreviations of errors on paper, and
permits error messages and source code to be viewed simultaneously without
machinations of multiple windows in a screen editor.
</PARA><PARA>
Options are:
</PARA>
<VARIABLELIST>

<VARLISTENTRY>
<TERM>
-n
</TERM>
<LISTITEM>
<PARA>
 Do not touch any files; all error messages are sent to the standard output
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>
-q
</TERM>
<LISTITEM>
<PARA>
The user is queried whether s/he wants to touch the file.  A
``y'' or ``n'' to the question is necessary to continue.  Absence
of the -q option implies that all referenced files (except those
referring to discarded error messages) are to be touched. 
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>
-v   
</TERM>
<LISTITEM>
<PARA>
After all files have been touched, overlay the visual editor
vi(1) with it set up to edit all files touched, and positioned in
the first touched file at the first error.  If vi(1) can't be
found, try ex(1) or ed(1) from standard places.
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>
-t   
</TERM>
<LISTITEM>
<PARA>
Take the following argument as a suffix list.  Files whose suffixes
do not appear in the suffix list are not touched.  The suffix list
is dot separated, and ``*'' wildcards work.  Thus the suffix list:
</PARA><PARA>
.c.y.foo*.h
</PARA><PARA>
allows error to touch files ending with ``.c'', ``.y'', ``.foo*''
and ``.y''.
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>
-s   
</TERM>
<LISTITEM>
<PARA>
Print out statistics regarding the error categorization.  Not too useful.
</PARA>
</LISTITEM>
</VARLISTENTRY>
</VARIABLELIST>

<PARA>
Error looks at the error messages, either from the specified file name or
from the standard input, and:
<ITEMIZEDLIST MARK=BULLET>
<LISTITEM>
<PARA>
attempts to determine which language processor produced each error message
</PARA>
</LISTITEM>
<LISTITEM>
<PARA>
determines the source file and line number to which the error message refers
</PARA>
</LISTITEM>
<LISTITEM>
<PARA>
determines if the error message is to be ignored or not
</PARA>
</LISTITEM>
<LISTITEM>
<PARA>
inserts the (possibly slightly modified) error message into the source file 
as a comment on the line preceding to which the line the error message refers.
</PARA>
</LISTITEM>
</ITEMIZEDLIST>
</PARA><PARA>
Error messages that can't be categorized by language processor or content
are not inserted into any file, but are sent to the standard output. Error 
touches source files only after all input has been read.
</PARA><PARA>
Error is intended to be run with its standard input connected via a pipe
to the error message source.  Some language processors put error messages
on their standard error file; others put their messages on the standard
output.  Hence, both error sources should be piped together into error.
For example, when using the csh(1) syntax,
</PARA><PARA>
      make -s lint | error -q -v
</PARA><PARA>
will analyze all the error messages produced by whatever programs make(1)
runs when making lint.
</PARA><PARA>
Error knows about the error messages produced by: make(1),  cc(1),
cpp(1),  ccom(1),  as(1),  ld(1),  lint(1),  pi(1),  pc(1),  f77(1),  and
DEC Western Research Modula-2. Error knows a standard format for error
messages produced by the language processors, so is sensitive to changes
in these formats.  For all languages except Pascal, error messages are
restricted to be on one line.  Some error messages refer to more than one
line in more than one files; error will duplicate the error message and
insert it at all of the places referenced.
</PARA><PARA>
Error will do one of six things with error messages.
</PARA>

<VARIABLELIST>
<VARLISTENTRY>
<TERM>
synchronize
</TERM>
<LISTITEM>
<PARA>
Some language processors produce short errors describing
which file it is processing.  Error uses these to determine
the file name for languages that don't include the file name
in each error message.  These synchronization messages are
consumed entirely by error.
</PARA>
</LISTITEM>
</VARLISTENTRY>
   
<VARLISTENTRY>
<TERM>
discard  
</TERM>
<LISTITEM>
<PARA>
Error messages from lint(1) that refer to one of the two
lint(1) libraries, /usr/libdata/lint/llib-lc and
/usr/libdata/lint/llib-port are discarded, to prevent accidently
touching these libraries.  Again, these error messages
are consumed entirely by error.
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>
nullify 
</TERM>
<LISTITEM>
<PARA>
Error messages from lint(1) can be nullified if they refer to
a specific function, which is known to generate diagnostics
which are not interesting.  Nullified error messages are not
inserted into the source file, but are written to the standard output.         The names of functions to ignore are taken from
either the file named .errorrc in the users's home directory,
or from the file named by the -I option.  If the file does
not exist, no error messages are nullified.  If the file does
exist, there must be one function name per line.
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>
not file specific
</TERM>
<LISTITEM>
<PARA>
Error messages that can't be intuited are grouped together,
and written to the standard output before any files are
touched.  They will not be inserted into any source file.
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>
file specific
</TERM>
<LISTITEM>
<PARA>
Error message that refer to a specific file, but to no specific line,          are written to the standard output when that file
is touched.
</PARA>
</LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM>
true errors
</TERM>
<LISTITEM>
<PARA>
Error messages that can be intuited are candidates for insertion
into the file to which they refer.
</PARA>
</LISTITEM>
</VARLISTENTRY>
</VARIABLELIST>
<PARA>
Only true error messages are candidates for inserting into the file they
refer to.  Other error messages are consumed entirely by error or are
written to the standard output.  Error inserts the error messages into
the source file on the line preceding the line the language processor
found in error.  Each error message is turned into a one line comment for
the language, and is internally flagged with the string ``###'' at the
beginning of the error, and ``%%%'' at the end of the error.  This makes
pattern searching for errors easier with an editor, and allows the messages    to be easily removed.  In addition, each error message contains the
source line number for the line the message refers to.  A reasonably formatted source program can be recompiled with the error messages still in
it, without having the error messages themselves cause future errors.
For poorly formatted source programs in free format languages, such as C
or Pascal, it is possible to insert a comment into another comment, which
can wreak havoc with a future compilation.  To avoid this, programs with
comments and source on the same line should be formatted so that language
statements appear before comments.
</PARA><PARA>
Error catches interrupt and terminate signals, and if in the insertion
phase, will orderly terminate what it is doing.
</PARA>
</REFSECT1>


<REFSECT1>
<TITLE>
Files
</TITLE>
<PARA>
~/.errorrc  function names to ignore for lint(1) error messages
</PARA><PARA>
/dev/tty    user's teletype
</PARA>
</REFSECT1>

<REFSECT1>
<TITLE>
Bugs
</TITLE>
<PARA>
Opens the teletype directly to do user querying.
</PARA><PARA>
Source files with links make a new copy of the file with only one link to it.
</PARA><PARA>
Changing a language processor's format of error messages may cause error to 
not understand the error message.
</PARA><PARA>
Error, since it is purely mechanical, will not filter out subsequent errors 
caused by `floodgating' initiated by one syntactically trivial error.  Humans
are still much better at discarding these related errors.
</PARA><PARA>
Pascal error messages belong after the lines affected (error puts them 
before).  The alignment of the `\' marking the point of error is also
disturbed by error.
</PARA><PARA>
Error was designed for work on CRT's at reasonably high speed.  It is less 
pleasant on slow speed terminals, and has never been used on hardcopy 
terminals.
</PARA>
</REFSECT1>
<!-- This data is part of a licensed program from BERKELEY SOFTWARE DESIGN, INC. -->
<!-- Portions are copyrighted by BSDI, The Regents of the University of California, -->
<!-- Massachusetts Institute of Technology, Free Software Foundation, and others.  -->
</REFENTRY>










