<REFENTRY ID="baselib-pam-start"> <REFMETA>
<REFENTRYTITLE>pam_start</REFENTRYTITLE>
<REFMISCINFO>Base Libraries</REFMISCINFO>
</REFMETA> 
<REFNAMEDIV>
<REFNAME>pam_start</REFNAME>
<REFPURPOSE>
initialize the PAM library
</REFPURPOSE>
</REFNAMEDIV>
<REFSYNOPSISDIV>
<REFSYNOPSISDIVINFO>
<DATE>27 September 2002</DATE>
</REFSYNOPSISDIVINFO>
<FUNCSYNOPSIS>
<FUNCSYNOPSISINFO>
#include &lt;security/pam_appl.h&gt;
</FUNCSYNOPSISINFO>
<FUNCPROTOTYPE>
 <FUNCDEF>extern int 
  <FUNCTION>pam_start</FUNCTION></FUNCDEF>
 <PARAMDEF>const char 
  <PARAMETER><REPLACEABLE>*service_name</REPLACEABLE></PARAMETER></PARAMDEF>
 <PARAMDEF>const char 
  <PARAMETER><REPLACEABLE>*user</REPLACEABLE></PARAMETER></PARAMDEF>
 <PARAMDEF>const <FUNCPARAMS>struct <STRUCTNAME>pam_conv</STRUCTNAME> 
  <PARAMETER>*pam_conversation</PARAMETER></FUNCPARAMS></PARAMDEF>
 <PARAMDEF>pam_handle_t 
  <PARAMETER><REPLACEABLE>**pamh</REPLACEABLE></PARAMETER></PARAMDEF>
</FUNCPROTOTYPE>
</FUNCSYNOPSIS>
</REFSYNOPSISDIV>
<REFSECT1>
<REFSECT1INFO>
<DATE>27 September 2002</DATE>
</REFSECT1INFO>
<TITLE>Description
</TITLE>
<PARA>
<FUNCTION>pam_start</FUNCTION> is used to initialize the PAM 
library. It must be called prior to any other usage of the PAM 
library. On success, <PARAMETER>*pamh</PARAMETER> becomes a handle 
that provides continuity for successive calls to the PAM library. 
<FUNCTION>pam_start</FUNCTION> expects arguments as follows: the 
<PARAMETER>service_name</PARAMETER> of the program, the 
<PARAMETER>username</PARAMETER> of the individual to be
authenticated, a pointer to an application-supplied
<STRUCTNAME>pam_conv</STRUCTNAME> structure, and a pointer to a
<PARAMETER>pam_handle_t</PARAMETER> pointer.
</PARA>
<PARA>
An application must provide the <EMPHASIS>conversation function</EMPHASIS> 
used for direct communication between a loaded module and the application. 
The application also typically provides a means for the module to prompt 
the user for a password, etc.
</PARA>
<PARA>
The structure, pam_conv, is defined to be,
<SYNOPSIS>
  struct pam_conv {
               int (*conv) (int num_msg,
                            const struct pam_message * *msg,
                            struct pam_response * *resp,
                            void *appdata_ptr);
               void *appdata_ptr;
  };
</SYNOPSIS>
It is initialized by the application before it is passed to the
library. The contents of this structure are attached to the
<PARAMETER>*pamh</PARAMETER> handle. The point of this argument is to
provide a mechanism for any loaded module to interact directly with the
application program; this is why it is called a conversation structure.
</PARA>
<PARA>
When a module calls the referenced <FUNCTION>conv</FUNCTION> function, 
<PARAMETER>appdata_ptr</PARAMETER> is set to the second element of this
structure.
</PARA>
<PARA>
The other arguments of a call to <FUNCTION>conv</FUNCTION> 
concern the information exchanged by module and application. 
<PARAMETER>num_msg</PARAMETER> holds the length of the array of
pointers passed via <PARAMETER>msg</PARAMETER>. On success,
the pointer <PARAMETER>resp</PARAMETER> points to an array of
<PARAMETER>num_msg</PARAMETER> <STRUCTNAME>pam_response</STRUCTNAME>
structures, holding the application-supplied text. Note that 
<PARAMETER>resp</PARAMETER> is a struct 
<STRUCTNAME>pam_response</STRUCTNAME> array and not an array of 
pointers.
</PARA>
</REFSECT1>

<REFSECT1>
<TITLE>Return Value</TITLE>
<VARIABLELIST>
<VARLISTENTRY>
<TERM>
PAM_SUCCESS
</TERM>
<LISTITEM>
<PARA>
Success.
</PARA>
</LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>
PAM_BUF_ERR
</TERM>
<LISTITEM>
<PARA>
Memory allocation error.
</PARA>
</LISTITEM>
</VARLISTENTRY>
<VARLISTENTRY>
<TERM>
PAM_ABORT
</TERM>
<LISTITEM>
<PARA>
Internal failure.
</PARA>
</LISTITEM>
</VARLISTENTRY>
</VARIABLELIST>
</REFSECT1>
<REFSECT1>
<TITLE>ERRORS</TITLE>
<PARA>
May be translated to text with <FUNCTION>pam_strerror</FUNCTION>.
</PARA>
</REFSECT1>
</REFENTRY>

<!--
Portions taken from the Linux-PAM Application Guide which contains
the following Copyright message.

    Copyright (C) Andrew G. Morgan 1996-9.  All rights reserved.

Redistribution and use in source (sgml) and binary (derived) forms,
with or without modification, are permitted provided that the
following conditions are met:

1. Redistributions of source code must retain the above copyright
   notice, and the entire permission notice in its entirety,
   including the disclaimer of warranties.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.

3. The name of the author may not be used to endorse or promote
   products derived from this software without specific prior
   written permission.

ALTERNATIVELY, this product may be distributed under the terms of the
GNU General Public License, in which case the provisions of the GNU
GPL are required INSTEAD OF the above restrictions.  (This clause is
necessary due to a potential bad interaction between the GNU GPL and
the restrictions contained in a BSD-style copyright.)

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
DAMAGE.

 -->

