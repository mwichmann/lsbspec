<REFENTRY ID="baselib-gethostbyname-3"> <REFMETA>
<REFENTRYTITLE>gethostbyname</REFENTRYTITLE>
<REFMISCINFO>Base Libraries</REFMISCINFO>
</REFMETA>
<REFNAMEDIV>
<REFNAME>gethostbyname</REFNAME>
<REFPURPOSE>
get network host entry
</REFPURPOSE>
</REFNAMEDIV>
<REFSYNOPSISDIV>
<REFSYNOPSISDIVINFO>
<DATE>2 April 2001</DATE>
</REFSYNOPSISDIVINFO>
<FUNCSYNOPSIS>
<FUNCSYNOPSISINFO>
#include &lt;netdb.h&gt;
</FUNCSYNOPSISINFO>
<FUNCPROTOTYPE>
 <FUNCDEF>struct 
  <FUNCTION><STRUCTNAME>hostent</STRUCTNAME> 
  *gethostbyname</FUNCTION></FUNCDEF>
 <PARAMDEF>const char 
  <PARAMETER><REPLACEABLE>name</REPLACEABLE></PARAMETER></PARAMDEF>
</FUNCPROTOTYPE>
</FUNCSYNOPSIS>
</REFSYNOPSISDIV>
<REFSECT1>
<REFSECT1INFO>
<DATE>2 April 2001</DATE>
</REFSECT1INFO>
<TITLE>Description
</TITLE>
<PARA>
<FUNCTION>gethostbyname</FUNCTION> returns a 
<STRUCTNAME>hostent</STRUCTNAME> structure for the given host name. Here, 
<PARAMETER>name</PARAMETER> is either a host name, or an IPv4 address 
in standard dot notation, or an IPv6 address in colon (and possibly dot) 
notation. (See <CITETITLE PUBWORK="ARTICLE">RFC 1884</CITETITLE> for the 
description of IPv6 addresses.) If <PARAMETER>name</PARAMETER> is an 
IPv4 or IPv6 address, no lookup is performed and 
<FUNCTION>gethostbyname</FUNCTION> simply copies 
<PARAMETER>name</PARAMETER> into the <STRUCTFIELD>h_name</STRUCTFIELD> 
field and its struct <STRUCTFIELD>in_addr</STRUCTFIELD> equivalent into the 
<STRUCTFIELD>h_addr_list</STRUCTFIELD>[0] field of the returned 
<STRUCTNAME>hostent</STRUCTNAME> structure. If 
<PARAMETER>name</PARAMETER> doesn't end in a dot and the environment 
variable <VARNAME>HOSTALIASES</VARNAME> is set, the alias file pointed to 
by <VARNAME>HOSTALIASES</VARNAME> will first be searched for 
<PARAMETER>name</PARAMETER> (see <FUNCTION>hostname</FUNCTION>(7) for 
the file format). The current domain and its parents are searched unless 
<PARAMETER>name</PARAMETER> ends in a dot.
</PARA>
<PARA>
The domain name queries carried out by <FUNCTION>gethostbyname</FUNCTION> 
use a combination of any or all of the name server 
<FUNCTION>named</FUNCTION>(8), a broken out line from 
<FILENAME>/etc/hosts</FILENAME>, and the <EMPHASIS>Network Information 
Service</EMPHASIS> (NIS or YP), depending upon the contents of the order 
line in <FILENAME>/etc/host.conf</FILENAME>. (See 
<FUNCTION>resolv</FUNCTION>+(8)). The default action is to query 
<FUNCTION>named</FUNCTION>(8), followed by <FILENAME>/etc/hosts</FILENAME>.
</PARA><PARA>
The <STRUCTNAME>hostent</STRUCTNAME> structure is defined in 
<FILENAME>netdb.h</FILENAME> as follows:
<SYNOPSIS>
  struct hostent {
              char  *h_name;        /* official name of host */
              char  **h_aliases;    /* alias list */
              int   h_addrtype;     /* host address type */
              int   h_length;       /* length of address */
              char  **h_addr_list;  /* list of addresses */
  }

  #define  h_addr  h_addr_list[0]   /* for backward compatibility */
</SYNOPSIS>
</PARA>
</REFSECT1>
<REFSECT1>
<TITLE>Return Value
</TITLE>
<PARA>
<FUNCTION>gethostbyname</FUNCTION> returns the 
<STRUCTNAME>hostent</STRUCTNAME> structure or a <LITERAL>NULL</LITERAL> 
pointer if an error occurs. On error, the <VARNAME>h_errno</VARNAME> 
variable holds an error number.
</PARA>
</REFSECT1>
<REFSECT1>
<TITLE>Errors
</TITLE>
<VARIABLELIST>
<VARLISTENTRY>
<TERM>
ENOMEM
</TERM>
<LISTITEM>
<PARA>
Insufficient memory to complete the operation. 
</PARA>
</LISTITEM>
</VARLISTENTRY>
</VARIABLELIST>

<!--	  LDP GENERAL PUBLIC LICENSE  -->
<!--        Version 1a, November 1998   -->

</REFSECT1>
</REFENTRY>

