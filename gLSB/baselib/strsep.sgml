<REFENTRY ID="baselib-strsep-3"> <REFMETA>
<REFENTRYTITLE>strsep</REFENTRYTITLE>
<REFMISCINFO>Base Libraries</REFMISCINFO>
</REFMETA>
<REFNAMEDIV>
<REFNAME>strsep</REFNAME>
<REFPURPOSE>
extract token from string
</REFPURPOSE>
</REFNAMEDIV>
<REFSYNOPSISDIV>
<REFSYNOPSISDIVINFO>
<DATE>2 April 2001</DATE>
</REFSYNOPSISDIVINFO>
<SYNOPSIS>
#include &lt;string.h>

char *strsep(char **stringp, const char *delim);
</SYNOPSIS>
</REFSYNOPSISDIV>
<REFSECT1>
<REFSECT1INFO>
<DATE>2 April 2001</DATE>
</REFSECT1INFO>
<TITLE>Description
</TITLE>
<PARA>
If  *stringp  is  NULL, the strsep() function returns NULL
and does nothing else. Otherwise, this function finds  the
first  token  in  the  string  *stringp,  where tokens are
delimited by symbols in the string delim.  This  token  is
terminated  with  a  `\0'  character  (by  overwriting the
delimiter) and *stringp  is  updated  to  point  past  the
token.  In case no delimiter was found, the token is taken
to be the entire string *stringp,  and  *stringp  is  made
NULL.
</PARA>
</REFSECT1>
<REFSECT1>
<TITLE>RETURN VALUE
</TITLE>
<PARA>
The strsep() function returns a pointer to the token, that
is, it returns the original value of *stringp.
</PARA>
</REFSECT1>
<REFSECT1>
<TITLE>NOTES
</TITLE>
<PARA>
The strsep() function was introduced as a replacement  for
strtok(),  since  the  latter  cannot handle empty fields.
However, strtok() conforms to ANSI-C  and  hence  is  more
portable.
</PARA>
</REFSECT1>
<REFSECT1>
<TITLE>BUGS
</TITLE>
<PARA>
This  function suffers from the same problems as strtok().
In particular, it modifies the original string. Avoid  it.
</PARA>

<!--	  LDP GENERAL PUBLIC LICENSE  -->
<!--        Version 1a, November 1998   -->

</REFSECT1>
</REFENTRY>








