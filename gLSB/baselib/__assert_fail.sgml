<REFENTRY ID="baselib---assert-fail-1"> <REFMETA>
<REFENTRYTITLE>__assert_fail</REFENTRYTITLE>
<REFMISCINFO>Base Libraries</REFMISCINFO>
</REFMETA>
<REFNAMEDIV>
<REFNAME>__assert_fail
</REFNAME>
<REFPURPOSE>abort the program after false assertion
</REFPURPOSE>
</REFNAMEDIV>
<REFSYNOPSISDIV>
<REFSYNOPSISDIVINFO>
<DATE>30 January 2000</DATE>
</REFSYNOPSISDIVINFO>
<FUNCSYNOPSIS>
<FUNCPROTOTYPE>
 <FUNCDEF>void 
  <FUNCTION>__assert_fail</FUNCTION></FUNCDEF>
 <PARAMDEF>const char 
  <PARAMETER><REPLACEABLE>*assertion</REPLACEABLE></PARAMETER></PARAMDEF>
 <PARAMDEF>const char 
  <PARAMETER><REPLACEABLE>*file</REPLACEABLE></PARAMETER></PARAMDEF>
 <PARAMDEF>unsigned int 
  <PARAMETER><REPLACEABLE>line</REPLACEABLE></PARAMETER></PARAMDEF>
 <PARAMDEF>const char 
  <PARAMETER><REPLACEABLE>*function</REPLACEABLE></PARAMETER></PARAMDEF>
</FUNCPROTOTYPE>
</FUNCSYNOPSIS>
</REFSYNOPSISDIV>
<REFSECT1>
<REFSECT1INFO>
<DATE>30 January 2000</DATE>
</REFSECT1INFO>
<TITLE>Description
</TITLE>
<PARA>
<FUNCTION>__assert_fail</FUNCTION> receives a string containing the expression 
<PARAMETER>assertion</PARAMETER>, the filename <PARAMETER>file</PARAMETER>, 
and the line number <PARAMETER>line</PARAMETER>, and prints a message on the
standard error stream.  For example:
<BLOCKQUOTE>
<PARA>
a.c:10: foobar: Assertion `a == b' failed.
</PARA>
</BLOCKQUOTE>
<FUNCTION>__assert_fail</FUNCTION> then aborts program execution via a 
call to <FUNCTION>abort</FUNCTION>. The exact form of the message is up 
to the implementation.
</PARA>
<PARA>
If <PARAMETER>function</PARAMETER> is <LITERAL>NULL</LITERAL>, then omit 
information about the function.
</PARA><PARA>
<PARAMETER>assertion</PARAMETER>, <PARAMETER>file</PARAMETER>, and
<PARAMETER>line</PARAMETER> must be non-<LITERAL>NULL</LITERAL>.
</PARA>
<PARA>
<FUNCTION>__assert_fail</FUNCTION> is not in the source standard; 
it is only in the binary standard.
</PARA>
</REFSECT1>
</REFENTRY>
