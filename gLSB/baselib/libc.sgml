<!-- Start of text generated from database -->
<!-- generated from the LSB specification database -->
<!--    by $Header: /cvsroot/lsb/spec/mklibspec,v 1.34 2002/04/12 20:12:28 anderson Exp 0 -->
<!--    at Mon Apr 15 19:51:07 2002 -->
<SECT1 ID=libc>
<TITLE>Interfaces for libc</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libc Definition</TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Library:</ENTRY>
<ENTRY>libc</ENTRY>
</ROW>
<ROW>
<ENTRY>SONAME:</ENTRY>
<ENTRY>See psLSB.</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The behavior of the interfaces in this library is specified by the following standards.<SIMPLELIST COLUMNS=1>
<MEMBER>
ISO/IEC 9899: 1999, Programming Languages --C<FOOTNOTE ID="std-131-25">
<PARA>
ISO/IEC 9899: 1999, Programming Languages --C</PARA>
</FOOTNOTE>
</MEMBER>
<MEMBER>
Large File Support<FOOTNOTE ID="std-131-35">
<PARA>
Large File Support</PARA>
</FOOTNOTE>
</MEMBER>
<MEMBER>
Linux Standard Base<FOOTNOTE ID="std-131-10">
<PARA>
Linux Standard Base</PARA>
</FOOTNOTE>
</MEMBER>
<MEMBER>
IEEE Std POSIX.1-1996 [ISO/IEC 9945-1:1996]<FOOTNOTE ID="std-131-3">
<PARA>
IEEE Std POSIX.1-1996 [ISO/IEC 9945-1:1996]</PARA>
</FOOTNOTE>
</MEMBER>
<MEMBER>
CAE Specification, February 1997, Networking Services (XNS), Issue 5
(ISBN: 1-85912-165-9, C523)<FOOTNOTE ID="std-131-15">
<PARA>
CAE Specification, February 1997, Networking Services (XNS), Issue 5
(ISBN: 1-85912-165-9, C523)</PARA>
</FOOTNOTE>
</MEMBER>
<MEMBER>
CAE Specification, January 1997, System Interfaces and Headers (XSH),
Issue 5 (ISBN: 1-85912-181-0, C606)<FOOTNOTE ID="std-131-5">
<PARA>
CAE Specification, January 1997, System Interfaces and Headers (XSH),
Issue 5 (ISBN: 1-85912-181-0, C606)</PARA>
</FOOTNOTE>
</MEMBER>
<MEMBER>
System V Interface Definition, Issue 3<FOOTNOTE ID="std-131-21">
<PARA>
System V Interface Definition, Issue 3</PARA>
</FOOTNOTE>
</MEMBER>
<MEMBER>
System V Interface Definition,Fourth Edition<FOOTNOTE ID="std-131-46">
<PARA>
System V Interface Definition,Fourth Edition</PARA>
</FOOTNOTE>
</MEMBER>
</SIMPLELIST>
</PARA>
<SECT2>
<TITLE>RPC Interfaces</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libc - RPC Interfaces Function Interfaces</TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>authnone_create(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-46"></ENTRY><ENTRY>svcerr_auth(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-21"></ENTRY><ENTRY>xdr_bytes(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-21"></ENTRY><ENTRY>xdr_opaque(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-21"></ENTRY><ENTRY>xdr_u_short(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-21"></ENTRY></ROW>
<ROW><ENTRY>clnt_create(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-46"></ENTRY><ENTRY>svcerr_decode(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-21"></ENTRY><ENTRY>xdr_callhdr(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-21"></ENTRY><ENTRY>xdr_opaque_auth(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-21"></ENTRY><ENTRY>xdr_union(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-21"></ENTRY></ROW>
<ROW><ENTRY>clnt_pcreateerror(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-46"></ENTRY><ENTRY>svcerr_noproc(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-21"></ENTRY><ENTRY>xdr_callmsg(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-21"></ENTRY><ENTRY>xdr_pointer(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-21"></ENTRY><ENTRY>xdr_vector(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-21"></ENTRY></ROW>
<ROW><ENTRY>clnt_perrno(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-46"></ENTRY><ENTRY>svcerr_noprog(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-21"></ENTRY><ENTRY>xdr_char(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-21"></ENTRY><ENTRY>xdr_reference(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-21"></ENTRY><ENTRY>xdr_void(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-21"></ENTRY></ROW>
<ROW><ENTRY>clnt_perror(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-46"></ENTRY><ENTRY>svcerr_progvers(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-21"></ENTRY><ENTRY>xdr_double(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-21"></ENTRY><ENTRY>xdr_rejected_reply(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-21"></ENTRY><ENTRY>xdr_wrapstring(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-21"></ENTRY></ROW>
<ROW><ENTRY>clnt_spcreateerror(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-46"></ENTRY><ENTRY>svcerr_systemerr(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-21"></ENTRY><ENTRY>xdr_enum(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-21"></ENTRY><ENTRY>xdr_replymsg(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-21"></ENTRY><ENTRY>xdrmem_create(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-21"></ENTRY></ROW>
<ROW><ENTRY>clnt_sperrno(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-46"></ENTRY><ENTRY>svcerr_weakauth(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-21"></ENTRY><ENTRY>xdr_float(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-21"></ENTRY><ENTRY>xdr_short(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-21"></ENTRY><ENTRY>xdrrec_create(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-21"></ENTRY></ROW>
<ROW><ENTRY>clnt_sperror(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-46"></ENTRY><ENTRY>xdr_accepted_reply(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-21"></ENTRY><ENTRY>xdr_free(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-21"></ENTRY><ENTRY>xdr_string(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-21"></ENTRY><ENTRY>xdrrec_eof(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-21"></ENTRY></ROW>
<ROW><ENTRY>key_decryptsession(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-21"></ENTRY><ENTRY>xdr_array(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-21"></ENTRY><ENTRY>xdr_int(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-21"></ENTRY><ENTRY>xdr_u_char(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-21"></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>svc_getreqset(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-21"></ENTRY><ENTRY>xdr_bool(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-21"></ENTRY><ENTRY>xdr_long(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-21"></ENTRY><ENTRY>xdr_u_long(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-21"></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>System Calls</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libc - System Calls Function Interfaces</TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>__fxstat(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>fchown(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getwd(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>putmsg(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>setrlimit(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>__getpgid(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>fcntl(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>initgroups(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>pwrite(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>setrlimit64<FOOTNOTEREF LINKEND="std-131-35"></ENTRY></ROW>
<ROW><ENTRY>__lxstat(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>fdatasync(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>ioctl(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>read(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>setsid(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>__xmknod(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>fdetach(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>kill(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>readdir(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>setuid(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>__xstat(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>flock(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>killpg(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>readlink(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>sleep(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>access(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>fork(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>lchown(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>readv(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>statfs(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY></ROW>
<ROW><ENTRY>acct(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>fstatfs(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>link(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>rename(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>statvfs(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>alarm(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>fsync(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>lockf(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>rmdir(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>stime(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY></ROW>
<ROW><ENTRY>brk(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>ftime(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>lseek(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>sbrk(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>symlink(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>chdir(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>ftruncate(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>mkdir(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>sched_get_priority_max(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>sync(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>chmod(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getcontext(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>mkfifo(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>sched_get_priority_min(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>sysconf(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>chown(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getegid(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>mlock(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>sched_getparam(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>time(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>chroot(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>geteuid(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>mlockall(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>sched_getscheduler(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>times(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>clock(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getgid(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>mmap(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>sched_rr_get_interval(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>truncate(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>close(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getgroups(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>mprotect(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>sched_setparam(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>ulimit(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>closedir(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getitimer(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>msync(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>sched_setscheduler(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>umask(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>creat(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getloadavg(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>munlock(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>sched_yield(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>uname(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>dup(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getmsg(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>munlockall(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>select(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY>unlink(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY></ROW>
<ROW><ENTRY>dup2(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getpagesize(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>munmap(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>setcontext(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>utime(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>execl(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getpgid(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>nanosleep(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>setegid(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>utimes(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>execle(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getpgrp(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>nice(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>seteuid(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>vfork(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>execlp(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getpid(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>open(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>setgid(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>wait(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>execv(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getppid(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>opendir(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>setitimer(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>wait3(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>execve(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getpriority(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>pathconf(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>setpgid(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>wait4(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY></ROW>
<ROW><ENTRY>execvp(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getrlimit(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>pause(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>setpgrp(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>waitid(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>exit(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getrusage(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>pipe(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>setpriority(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>waitpid(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>fchdir(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getsid(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>poll(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>setregid(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>write(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>fchmod(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getuid(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>pread(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>setreuid(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>writev(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>Standard I/O</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libc - Standard I/O Function Interfaces</TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>_IO_feof(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>fgetpos(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>fsetpos(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>putc(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>snprintf(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>_IO_getc(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>fgets(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>fstatvfs(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>putc_unlocked(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>sprintf(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>_IO_putc(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>fgetwc_unlocked(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>ftell(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>putchar(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>sscanf(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>_IO_puts(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>fileno(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>ftello(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>putchar_unlocked(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>telldir(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>alphasort(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>flockfile(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>fwrite(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>puts(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>tempnam(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>clearerr(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>fopen(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getc(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>putw(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>ungetc(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>ctermid(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>fprintf(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getc_unlocked(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>remove(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>vasprintf(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY></ROW>
<ROW><ENTRY>fclose(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>fputc(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getchar(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>rewind(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>vdprintf(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY></ROW>
<ROW><ENTRY>fdopen(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>fputs(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getchar_unlocked(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>rewinddir(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>vfprintf(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>feof(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>fread(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>gets(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>scanf(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>vprintf(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>ferror(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>freopen(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getw(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>seekdir(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>vsnprintf(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>fflush(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>fscanf(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>pclose(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>setbuf(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>vsprintf(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>fflush_unlocked(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>fseek(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>popen(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>setbuffer(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>wprintf(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-25"></ENTRY></ROW>
<ROW><ENTRY>fgetc(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>fseeko(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>printf(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>setvbuf(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>wscanf(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-25"></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>Data Symbols</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libc - Standard I/O Data Interfaces</TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>stderr<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>stdin<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>stdout<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>Signal Handling</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libc - Signal Handling Function Interfaces</TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>__libc_current_sigrtmax(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>sigaddset(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>sighold(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>sigpause(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>sigsuspend(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>__libc_current_sigrtmin(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>sigaltstack(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>sigignore(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>sigpending(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>sigtimedwait(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>__sigsetjmp(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>sigandset(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>siginterrupt(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>sigprocmask(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>sigwait(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>__sysv_signal(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>sigblock(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>sigisemptyset(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>sigqueue(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>sigwaitinfo(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>bsd_signal(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>sigdelset(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>sigismember(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>sigrelse(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>psignal(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>sigemptyset(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>siglongjmp(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>sigreturn(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>raise(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>sigfillset(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>signal(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>sigset(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>sigaction(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>siggetmask(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>sigorset(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>sigstack(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>Data Symbols</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libc - Signal Handling Data Interfaces</TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>_sys_siglist<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY></ENTRY><ENTRY></ENTRY><ENTRY></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>Standard Library</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libc - Standard Library Function Interfaces</TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>_Exit(GLIBC_2.1.1)<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY>erand48(GLIBC_2.1.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>hsearch(GLIBC_2.1.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>malloc(GLIBC_2.1.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>srand48(GLIBC_2.1.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>__assert_fail(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>err(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>htonl(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY>memmem(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>srandom(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>__cxa_atexit(GLIBC_2.1.3)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>error(GLIBC_2.1.3)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>htons(GLIBC_2.1.3)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY>mkstemp(GLIBC_2.1.3)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>strtod(GLIBC_2.1.3)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>__errno_location(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>errx(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>imaxabs(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY>mktemp(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>strtol(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>__fpending(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>fcvt(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>imaxdiv(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY>mrand48(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>strtoul(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>__getpagesize(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>fmtmsg(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>inet_addr(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY>nftw(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>swapcontext(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>__sysconf(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>fnmatch(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>inet_aton(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY>nrand48(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>syslog(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>_exit(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>fpathconf(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>inet_ntoa(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY>ntohl(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY>system(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY></ROW>
<ROW><ENTRY>_longjmp(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>free(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>initstate(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>ntohs(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY>textdomain(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY></ROW>
<ROW><ENTRY>_setjmp(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>ftrylockfile(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>insque(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>openlog(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>tfind(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>a64l(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>ftw(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>isatty(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>perror(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>tmpfile(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>abort(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>funlockfile(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>isblank(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>posix_memalign(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-3"></ENTRY><ENTRY>tmpnam(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>abs(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>gcvt(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>isinf(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY>ptsname(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>tsearch(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>atexit(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getcwd(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>isinfl(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY>putenv(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>ttyname(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>atof(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getdate(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>isnan(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY>qsort(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>ttyname_r(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>atoi(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getenv(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>isnanf(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY>rand(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>twalk(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>atol(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getlogin(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>isnanl(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY>rand_r(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>unlockpt(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>basename(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getopt(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>jrand48(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>random(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>unsetenv<FOOTNOTEREF LINKEND="std-131-10"></ENTRY></ROW>
<ROW><ENTRY>bindtextdomain(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>getopt_long(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>l64a(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>random_r(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>usleep(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>bsearch(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getopt_long_only(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>labs(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>realloc(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>verrx(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY></ROW>
<ROW><ENTRY>calloc(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getsubopt(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>lcong48(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>realpath(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>vsyslog<FOOTNOTEREF LINKEND="std-131-10"></ENTRY></ROW>
<ROW><ENTRY>closelog(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>gettimeofday(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>ldiv(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>remque(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>warn(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY></ROW>
<ROW><ENTRY>confstr(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>glob(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>lfind(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>seed48(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>warnx(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY></ROW>
<ROW><ENTRY>cuserid(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>glob64(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>llabs(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY>setenv<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>wordexp(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>daemon(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>globfree(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>lldiv(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY>sethostid(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>wordfree(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>dirname(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>globfree64(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>longjmp(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>sethostname(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>div(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>grantpt(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>lrand48(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>setlogmask(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>drand48(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>hcreate(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>lsearch(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>setstate(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>ecvt(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>hdestroy(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>makecontext(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>srand(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>Data Symbols</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libc - Standard Library Data Interfaces</TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>__environ<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>_sys_errlist<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>getdate_err<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>opterr<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>optopt<FOOTNOTEREF LINKEND="std-131-10"></ENTRY></ROW>
<ROW><ENTRY>_environ<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>environ<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>optarg<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>optind<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>Localization Functions</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libc - Localization Functions Function Interfaces</TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>__dcgettext(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>catgets(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>dcgettext(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>iconv(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>nl_langinfo(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>catclose(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>catopen(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>gettext(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>localeconv(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>setlocale(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>Data Symbols</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libc - Localization Functions Data Interfaces</TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>_nl_msg_cat_cntr<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY></ENTRY><ENTRY></ENTRY><ENTRY></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>Socket Interface</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libc - Socket Interface Function Interfaces</TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>accept(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY>gethostid(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>listen(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY>sendmsg(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY>socketpair(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY></ROW>
<ROW><ENTRY>bind(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY>gethostname(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY>recv(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY>sendto(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>bindresvport(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>getpeername(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY>recvfrom(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY>setsockopt(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>connect(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY>getsockname(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY>recvmsg(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY>shutdown(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>gethostbyname_r(GLIBC_2.1.2)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>getsockopt(GLIBC_2.1.2)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY>send(GLIBC_2.1.2)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY>socket(GLIBC_2.1.2)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>Data Symbols</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libc - Socket Interface Data Interfaces</TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>h_errno<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY></ENTRY><ENTRY></ENTRY><ENTRY></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>Wide Characters</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libc - Wide Characters Function Interfaces</TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>btowc(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>mbsrtowcs(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>wcpcpy(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>wcsnlen(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>wcstoull(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-25"></ENTRY></ROW>
<ROW><ENTRY>fgetwc(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>mbstowcs(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>wcpncpy(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>wcsnrtombs(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>wcstoumax(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-25"></ENTRY></ROW>
<ROW><ENTRY>fgetws(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY>mbtowc(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>wcrtomb(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>wcspbrk(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY>wcstouq(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY></ROW>
<ROW><ENTRY>fputwc(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY>putwc(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY>wcscasecmp(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>wcsrchr(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>wcswcs(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>fputws(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY>putwchar(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY>wcscat(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>wcsrtombs(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>wcswidth(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>fwide(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY>swprintf(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>wcschr(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>wcsspn(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>wcsxfrm(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>fwprintf(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>swscanf(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY>wcscmp(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>wcsstr(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>wctob(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>fwscanf(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY>towctrans(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>wcscoll(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>wcstod(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>wctomb(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>getwc(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY>towlower(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY>wcscpy(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>wcstof(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY>wctrans(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>getwchar(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>towupper(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>wcscspn(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>wcstoimax(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY>wctype(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>iconv_close(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>ungetwc(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY>wcsdup(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>wcstok(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>wcwidth(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>iconv_open(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>vfwprintf(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY>wcsftime(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY>wcstol(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>wmemchr(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>mblen(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>vfwscanf(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY>wcslen(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>wcstold(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY>wmemcmp(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>mbrlen(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>vswprintf(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY>wcsncasecmp(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>wcstoll(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY>wmemcpy(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>mbrtowc(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>vswscanf(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY>wcsncat(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>wcstombs(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>wmemmove(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>mbsinit(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>vwprintf(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY>wcsncmp(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>wcstoq(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>wmemset(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>mbsnrtowcs(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>vwscanf(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY>wcsncpy(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>wcstoul(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>String Functions</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libc - String Functions Function Interfaces</TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>__mempcpy(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>bzero(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>strcasestr(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>strncasecmp(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>strtoimax(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-25"></ENTRY></ROW>
<ROW><ENTRY>__rawmemchr(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>ffs(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>strcat(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>strncat(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>strtok(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>__stpcpy(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>index(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>strchr(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>strncmp(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>strtok_r(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY></ROW>
<ROW><ENTRY>__strdup(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>memccpy(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>strcmp(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>strncpy(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>strtold(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-25"></ENTRY></ROW>
<ROW><ENTRY>__strtod_internal(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>memchr(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>strcoll(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>strndup(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>strtoll(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-25"></ENTRY></ROW>
<ROW><ENTRY>__strtof_internal(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>memcmp(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>strcpy(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>strnlen(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>strtoq(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY></ROW>
<ROW><ENTRY>__strtok_r(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>memcpy(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>strcspn(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>strpbrk(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>strtoull(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-25"></ENTRY></ROW>
<ROW><ENTRY>__strtol_internal(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>memmove(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>strdup(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>strptime(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>strtoumax(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-25"></ENTRY></ROW>
<ROW><ENTRY>__strtold_internal(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>memrchr(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>strerror(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>strrchr(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>strtouq(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY></ROW>
<ROW><ENTRY>__strtoll_internal(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>memset(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>strerror_r(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>strsep(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>strverscmp(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY></ROW>
<ROW><ENTRY>__strtoul_internal(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>rindex(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>strfmon(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>strsignal(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>strxfrm(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>__strtoull_internal(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>stpcpy(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>strfry(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>strspn(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>swab(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>bcmp(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>stpncpy(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>strftime(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>strstr(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>bcopy(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>strcasecmp(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>strlen(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>strtof(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>IPC Functions</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libc - IPC Functions Function Interfaces</TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>ftok(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>msgrcv(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>semget(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>shmctl(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>msgctl(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>msgsnd(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>semop(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>shmdt(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>msgget(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>semctl(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>shmat(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>shmget(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>Regular Expressions</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libc - Regular Expressions Function Interfaces</TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>advance(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>re_exec(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>regerror(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>regfree(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>re_comp(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>regcomp(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>regexec(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>step(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>Data Symbols</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libc - Regular Expressions Data Interfaces</TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>loc1<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>loc2<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>locs<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>Character Type Functions</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libc - Character Type Functions Function Interfaces</TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>__ctype_get_mb_cur_max(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>isdigit(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>iswalnum(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>iswlower(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>toascii(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>_tolower(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>isgraph(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>iswalpha(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>iswprint(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>tolower(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>_toupper(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>islower(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>iswblank(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>iswpunct(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>toupper(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>isalnum(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>isprint(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>iswcntrl(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>iswspace(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>isalpha(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>ispunct(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>iswctype(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>iswupper(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>isascii(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>isspace(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>iswdigit(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>iswxdigit(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>iscntrl(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>isupper(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>iswgraph(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>isxdigit(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>Data Symbols</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libc - Character Type Functions Data Interfaces</TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>__ctype_b<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>__ctype_tolower<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>__ctype_toupper<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>Time Manipulation</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libc - Time Manipulation Function Interfaces</TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>adjtime(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>asctime_r(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>difftime(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>localtime(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>tzset(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>adjtimex(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>ctime(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>gmtime(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>localtime_r(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>ualarm(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>asctime(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>ctime_r(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>gmtime_r(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>mktime(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>Data Symbols</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libc - Time Manipulation Data Interfaces</TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>__daylight<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>__tzname<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>timezone<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>__timezone<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>daylight<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>tzname<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>Terminal Interface Functions</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libc - Terminal Interface Functions Function Interfaces</TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>cfgetispeed(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>cfsetispeed(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>tcdrain(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>tcgetattr(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>tcsendbreak(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>cfgetospeed(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>cfsetospeed(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>tcflow(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>tcgetpgrp(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>tcsetattr(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>cfmakeraw(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>cfsetspeed(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>tcflush(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>tcgetsid(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>tcsetpgrp(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>System Database Interface</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libc - System Database Interface Function Interfaces</TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>endgrent(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getgrent(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getprotoent(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>getutent(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>sethostent(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY></ROW>
<ROW><ENTRY>endhostent(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY>getgrgid(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getpwent(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getutent_r(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>setmntent(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY></ROW>
<ROW><ENTRY>endnetent(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY>getgrnam(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getpwnam(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getutxent(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>setnetent(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY></ROW>
<ROW><ENTRY>endprotoent(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY>gethostbyaddr(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY>getpwuid(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getutxid(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>setprotoent(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY></ROW>
<ROW><ENTRY>endpwent(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>gethostbyname(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>getpwuid_r(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getutxline(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>setpwent(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>endservent(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY>getnetbyaddr(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY>getservbyname(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>pututxline(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>setservent(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY></ROW>
<ROW><ENTRY>endutent(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getprotobyname(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>getservbyport(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY>setgrent(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>setutent(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY></ROW>
<ROW><ENTRY>endutxent(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getprotobynumber(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY>getservent(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>setgroups(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>setutxent(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>Language Support</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libc - Language Support Function Interfaces</TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>__libc_start_main(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>_obstack_begin(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>_obstack_newchunk(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>obstack_free(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>Large File Support</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libc - Large File Support Function Interfaces</TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>__fxstat64(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>fopen64(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-35"></ENTRY><ENTRY>ftello64(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-35"></ENTRY><ENTRY>mkstemp64(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-35"></ENTRY><ENTRY>readdir64(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-35"></ENTRY></ROW>
<ROW><ENTRY>__lxstat64(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>freopen64(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-35"></ENTRY><ENTRY>ftruncate64(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-35"></ENTRY><ENTRY>mmap64(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-35"></ENTRY><ENTRY>tmpfile64(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-35"></ENTRY></ROW>
<ROW><ENTRY>__xstat64(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>fseeko64(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-35"></ENTRY><ENTRY>ftw64(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-35"></ENTRY><ENTRY>nftw64(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-35"></ENTRY><ENTRY>truncate64(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-35"></ENTRY></ROW>
<ROW><ENTRY>alphasort64(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>fsetpos64(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-35"></ENTRY><ENTRY>getrlimit64(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-35"></ENTRY><ENTRY>open64(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-35"></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>creat64(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-35"></ENTRY><ENTRY>fstatfs64(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-35"></ENTRY><ENTRY>lockf64(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-35"></ENTRY><ENTRY>pread64(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-35"></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>fgetpos64(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-35"></ENTRY><ENTRY>fstatvfs64(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-35"></ENTRY><ENTRY>lseek64(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-35"></ENTRY><ENTRY>pwrite64(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-35"></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>libc - deprecated</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libc - libc - deprecated Function Interfaces</TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>__bzero(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>__sigpause(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>__wcstol_internal(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>__wcstoul_internal(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>__mbrlen(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>__wcstod_internal(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>__wcstold_internal(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>__wcstoull_internal(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>__secure_getenv(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>__wcstof_internal(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>__wcstoll_internal(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>Data Symbols</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE>libc - libc - deprecated Data Interfaces</TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>_IO_2_1_stderr_<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>_IO_2_1_stdin_<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>_IO_2_1_stdout_<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
</SECT1>
<SECT1 ID=libc-ddefs>
<TITLE>Data Definitions for libc</TITLE>
<PARA>
</PARA>
<SECT2>
<TITLE>assert.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define assert(expr) /**/
</SCREEN>
</SECT2>
<SECT2>
<TITLE>ctype.h</TITLE>
<PARA>
</PARA>
<SCREEN>






enum
{
  _ISupper, _ISlower, _ISalpha, _ISdigit, _ISxdigit, _ISspace, _ISprint,
    _ISgraph, _ISblank, _IScntrl, _ISpunct, _ISalnum
}
 ;
</SCREEN>
</SECT2>
<SECT2>
<TITLE>dirent.h</TITLE>
<PARA>
</PARA>
<SCREEN>






typedef struct __dirstream DIR;





struct dirent
{
  long d_ino;
  off_t d_off;
  unsigned short d_reclen;
  char d_name[256];
}
 ;
struct dirent64
{
  uint64_t d_ino;
  int64_t d_off;
  unsigned short d_reclen;
  unsigned char d_type;
  char d_name[1];
}
 ;
</SCREEN>
</SECT2>
<SECT2>
<TITLE>errno.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define errno	(*__errno_location())



#define EPERM	1
#define ECHILD	10
#define ENETDOWN	100
#define ENETUNREACH	101
#define ENETRESET	102
#define ECONNABORTED	103
#define ECONNRESET	104
#define ENOBUFS	105
#define EISCONN	106
#define ENOTCONN	107
#define ESHUTDOWN	108
#define ETOOMANYREFS	109
#define EAGAIN	11
#define ETIMEDOUT	110
#define ECONNREFUSED	111
#define EHOSTDOWN	112
#define EHOSTUNREACH	113
#define EALREADY	114
#define EINPROGRESS	115
#define ESTALE	116
#define EUCLEAN	117
#define ENOTNAM	118
#define ENAVAIL	119
#define ENOMEM	12
#define EISNAM	120
#define EREMOTEIO	121
#define EDQUOT	122
#define ENOMEDIUM	123
#define EMEDIUMTYPE	124
#define ECANCELED	125
#define EACCES	13
#define EFAULT	14
#define ENOTBLK	15
#define EBUSY	16
#define EEXIST	17
#define EXDEV	18
#define ENODEV	19
#define ENOENT	2
#define ENOTDIR	20
#define EISDIR	21
#define EINVAL	22
#define ENFILE	23
#define EMFILE	24
#define ENOTTY	25
#define ETXTBSY	26
#define EFBIG	27
#define ENOSPC	28
#define ESPIPE	29
#define ESRCH	3
#define EROFS	30
#define EMLINK	31
#define EPIPE	32
#define EDOM	33
#define ERANGE	34
#define EDEADLK	35
#define ENAMETOOLONG	36
#define ENOLCK	37
#define ENOSYS	38
#define ENOTEMPTY	39
#define EINTR	4
#define ELOOP	40
#define ENOMSG	42
#define EIDRM	43
#define ECHRNG	44
#define EL2NSYNC	45
#define EL3HLT	46
#define EL3RST	47
#define ELNRNG	48
#define EUNATCH	49
#define EIO	5
#define ENOANO	55
#define EBADRQC	56
#define EBADSLT	57
#define EBFONT	59
#define ENXIO	6
#define ENOSTR	60
#define ENODATA	61
#define ETIME	62
#define ENOSR	63
#define ENONET	64
#define ENOPKG	65
#define EREMOTE	66
#define ENOLINK	67
#define EADV	68
#define ESRMNT	69
#define E2BIG	7
#define ECOMM	70
#define EPROTO	71
#define EMULTIHOP	72
#define EDOTDOT	73
#define EBADMSG	74
#define EOVERFLOW	75
#define ENOTUNIQ	76
#define EBADFD	77
#define EREMCHG	78
#define ELIBACC	79
#define ENOEXEC	8
#define ELIBBAD	80
#define ELIBSCN	81
#define ELIBMAX	82
#define ELIBEXEC	83
#define EILSEQ	84
#define ERESTART	85
#define ESTRPIPE	86
#define EUSERS	87
#define ENOTSOCK	88
#define EDESTADDRREQ	89
#define EBADF	9
#define EMSGSIZE	90
#define EPROTOTYPE	91
#define ENOPROTOOPT	92
#define EPROTONOSUPPORT	93
#define ESOCKTNOSUPPORT	94
#define EOPNOTSUPP	95
#define EPFNOSUPPORT	96
#define EAFNOSUPPORT	97
#define EADDRINUSE	98
#define EADDRNOTAVAIL	99
#define EWOULDBLOCK	EAGAIN
#define EDEADLOCK	EDEADLK
#define ENOTSUP	EOPNOTSUPP
</SCREEN>
</SECT2>
<SECT2>
<TITLE>fcntl.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define O_RDONLY	00
#define O_ACCMODE	0003
#define O_WRONLY	01
#define O_CREAT	0100
#define O_TRUNC	01000
#define O_SYNC	010000
#define O_RDWR	02
#define O_EXCL	0200
#define O_APPEND	02000
#define O_ASYNC	020000
#define O_NOCTTY	0400
#define O_NONBLOCK	04000
#define O_NDELAY	04000


struct flock
{
  short l_type;
  short l_whence;
  off_t l_start;
  off_t l_len;
  pid_t l_pid;
}
 ;
struct flock64
{
  short l_type;
  short l_whence;
  loff_t l_start;
  loff_t l_len;
  pid_t l_pid;
}
 ;






#define F_DUPFD	0
#define F_RDLCK	0
#define F_WRLCK	1
#define F_GETFD	1
#define F_SETFD	2
#define F_UNLCK	2
#define F_GETFL	3
#define F_SETFL	4
#define F_GETLK	5
#define F_SETLK	6
#define F_SETLKW	7
#define F_SETOWN	8
#define F_GETOWN	9
</SCREEN>
</SECT2>
<SECT2>
<TITLE>fmtmsg.h</TITLE>
<PARA>
</PARA>
<SCREEN>




#define MM_HARD	1
#define MM_NRECOV	128
#define MM_UTIL	16
#define MM_SOFT	2
#define MM_OPSYS	32
#define MM_FIRM	4
#define MM_RECOVER	64
#define MM_APPL	8



#define MM_NOSEV	0
#define MM_HALT	1
#define MM_ERROR	2



#define MM_NULLLBL	((char *) 0)
</SCREEN>
</SECT2>
<SECT2>
<TITLE>fnmatch.h</TITLE>
<PARA>
</PARA>
<SCREEN>




#define FNM_PATHNAME	(1<<0)
#define FNM_NOESCAPE	(1<<1)
#define FNM_PERIOD	(1<<2)
#define FNM_NOMATCH	1
</SCREEN>
</SECT2>
<SECT2>
<TITLE>ftw.h</TITLE>
<PARA>
</PARA>
<SCREEN>




#define FTW_D	FTW_D
#define FTW_DNR	FTW_DNR
#define FTW_DP	FTW_DP
#define FTW_F	FTW_F
#define FTW_NS	FTW_NS
#define FTW_SL	FTW_SL
#define FTW_SLN	FTW_SLN


enum
{
  FTW_F, FTW_D, FTW_DNR, FTW_NS, FTW_SL, FTW_DP, FTW_SLN
}
 ;


enum
{
  FTW_PHYS, FTW_MOUNT, FTW_CHDIR, FTW_DEPTH
}
 ;


struct FTW
{
  int base;
  int level;
}
 ;


typedef int (*__ftw_func_t) (char *__filename, struct stat * __status,
			     int __flag);
typedef int (*__ftw64_func_t) (char *__filename, struct stat64 * __status,
			       int __flag);
typedef int (*__nftw_func_t) (char *__filename, struct stat * __status,
			      int __flag, struct FTW * __info);
typedef int (*__nftw64_func_t) (char *__filename, struct stat64 * __status,
				int __flag, struct FTW * __info);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>getopt.h</TITLE>
<PARA>
</PARA>
<SCREEN>



struct option
{
  char *name;
  int has_arg;
  int *flag;
  int val;
}
 ;
</SCREEN>
</SECT2>
<SECT2>
<TITLE>glob.h</TITLE>
<PARA>
</PARA>
<SCREEN>






typedef struct
{
  __size_t gl_pathc;
  char **gl_pathv;
  __size_t gl_offs;
  int gl_flags;
  void (*gl_closedir) (void);
  struct dirent *(*gl_readdir) (void);
  void *(*gl_opendir) (void);
  int (*gl_lstat) (void);
  int (*gl_stat) (void);
}
glob_t;


typedef struct
{
  __size_t gl_pathc;
  char **gl_pathv;
  __size_t gl_offs;
  int gl_flags;
  void (*gl_closedir) (void);
  struct dirent *(*gl_readdir) (void);
  void *(*gl_opendir) (void);
  int (*gl_lstat) (void);
  int (*gl_stat) (void);
}
glob64_t;
#define GLOB_ERR	(1<<0)
#define GLOB_MARK	(1<<1)
#define GLOB_BRACE	(1<<10)
#define GLOB_NOMAGIC	(1<<11)
#define GLOB_TILDE	(1<<12)
#define GLOB_ONLYDIR	(1<<13)
#define GLOB_TILDE_CHECK	(1<<14)
#define GLOB_NOSORT	(1<<2)
#define GLOB_DOOFFS	(1<<3)
#define GLOB_NOCHECK	(1<<4)
#define GLOB_APPEND	(1<<5)
#define GLOB_NOESCAPE	(1<<6)
#define GLOB_PERIOD	(1<<7)
#define GLOB_MAGCHAR	(1<<8)
#define GLOB_ALTDIRFUNC	(1<<9)



#define GLOB_NOSPACE	1
#define GLOB_ABORTED	2
#define GLOB_NOMATCH	3
#define GLOB_NOSYS	4
</SCREEN>
</SECT2>
<SECT2>
<TITLE>grp.h</TITLE>
<PARA>
</PARA>
<SCREEN>



struct group
{
  char *gr_name;
  char *gr_passwd;
  gid_t gr_gid;
  char **gr_mem;
}
 ;
</SCREEN>
</SECT2>
<SECT2>
<TITLE>iconv.h</TITLE>
<PARA>
</PARA>
<SCREEN>






typedef void *iconv_t;
</SCREEN>
</SECT2>
<SECT2>
<TITLE>inttypes.h</TITLE>
<PARA>
</PARA>
<SCREEN>






typedef lldiv_t imaxdiv_t;
typedef int int32_t;
typedef long long intmax_t;
typedef unsigned long long uintmax_t;
typedef unsigned int uint32_t;
typedef long long uint64_t;
</SCREEN>
</SECT2>
<SECT2>
<TITLE>locale.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define LC_CTYPE	0
#define LC_NUMERIC	1
#define LC_TELEPHONE	10
#define LC_MEASUREMENT	11
#define LC_IDENTIFICATION	12
#define LC_TIME	2
#define LC_COLLATE	3
#define LC_MONETARY	4
#define LC_MESSAGES	5
#define LC_ALL	6
#define LC_PAPER	7
#define LC_NAME	8
#define LC_ADDRESS	9





struct lconv
{
  char *decimal_point;
  char *thousands_sep;
  char *grouping;
  char *int_curr_symbol;
  char *currency_symbol;
  char *mon_decimal_point;
  char *mon_thousands_sep;
  char *mon_grouping;
  char *positive_sign;
  char *negative_sign;
  char int_frac_digits;
  char frac_digits;
  char p_cs_precedes;
  char p_sep_by_space;
  char n_cs_precedes;
  char n_sep_by_space;
  char p_sign_posn;
  char n_sign_posn;
}
 ;
</SCREEN>
</SECT2>
<SECT2>
<TITLE>math.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define HUGE_VAL	0x7FF00000UL


struct exception
{
  int type;
  char *name;
  double arg1;
  double arg2;
  double retval;
}
 ;
#define M_1_PI	0.31830988618379067154
#define M_LOG10E	0.43429448190325182765
#define M_2_PI	0.63661977236758134308
#define M_LN2	0.69314718055994530942
#define M_SQRT1_2	0.70710678118654752440
#define M_PI_4	0.78539816339744830962
#define M_2_SQRTPI	1.12837916709551257390
#define M_SQRT2	1.41421356237309504880
#define M_LOG2E	1.4426950408889634074
#define M_PI_2	1.57079632679489661923
#define M_LN10	2.30258509299404568402
#define M_E	2.7182818284590452354
#define M_PI	3.14159265358979323846
</SCREEN>
</SECT2>
<SECT2>
<TITLE>netdb.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define h_addr	h_addr_list[0]


struct servent
{
  char *s_name;
  char **s_aliases;
  int s_port;
  char *s_proto;
}
 ;
struct hostent
{
  char *h_name;
  char **h_aliases;
  int h_addrtype;
  socklen_t h_length;
  char **h_addr_list;
}
 ;
</SCREEN>
</SECT2>
<SECT2>
<TITLE>netinet/in.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define INADDR_ANY	0





struct in_addr
{
  uint32_t s_addr;
}
 ;


struct sockaddr_in
{
  sa_family_t sin_family;
  unsigned short sin_port;
  struct in_addr sin_addr;
  unsigned char __pad[1];
}
 ;
</SCREEN>
</SECT2>
<SECT2>
<TITLE>nl_types.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define NL_SETD	1
#define NL_CAT_LOCALE	1





typedef void *nl_catd;


typedef int nl_item;
</SCREEN>
</SECT2>
<SECT2>
<TITLE>pwd.h</TITLE>
<PARA>
</PARA>
<SCREEN>






struct passwd
{
  char *pw_name;
  char *pw_passwd;
  uid_t pw_uid;
  gid_t pw_gid;
  char *pw_gecos;
  char *pw_dir;
  char *pw_shell;
}
 ;
</SCREEN>
</SECT2>
<SECT2>
<TITLE>regex.h</TITLE>
<PARA>
</PARA>
<SCREEN>




#define RE_SYNTAX_GNU_AWK	((RE_SYNTAX_POSIX_EXTENDED|RE_BACKSLASH_ESCAPE_IN_LISTS|RE_DEBUG)&amp  ~(RE_DOT_NOT_NULL | RE_INTERVALS | RE_CONTEXT_INDEP_OPS))
#define RE_BACKSLASH_ESCAPE_IN_LISTS	((unsigned long int)1)
#define RE_BK_PLUS_QM	(RE_BACKSLASH_ESCAPE_IN_LISTS<<1)
#define RE_SYNTAX_AWK	(RE_BACKSLASH_ESCAPE_IN_LISTS|RE_DOT_NOT_NULL|RE_NO_BK_PARENS| RE_NO_BK_REFS| RE_NO_BK_VBAR| RE_NO_EMPTY_RANGES| RE_DOT_NEWLINE| RE_CONTEXT_INDEP_ANCHORS| RE_UNMATCHED_RIGHT_PAREN_ORD | RE_NO_GNU_OPS)
#define RE_CHAR_CLASSES	(RE_BK_PLUS_QM<<1)
#define RE_SYNTAX_GREP	(RE_BK_PLUS_QM|RE_CHAR_CLASSES|RE_HAT_LISTS_NOT_NEWLINE|RE_INTERVALS|RE_NEWLINE_ALT)
#define RE_CONTEXT_INDEP_ANCHORS	(RE_CHAR_CLASSES<<1)
#define RE_SYNTAX_EGREP	(RE_CHAR_CLASSES|RE_CONTEXT_INDEP_ANCHORS| RE_CONTEXT_INDEP_OPS|RE_HAT_LISTS_NOT_NEWLINE|RE_NEWLINE_ALT|RE_NO_BK_PARENS|RE_NO_BK_VBAR)
#define RE_CONTEXT_INVALID_OPS	(RE_CONTEXT_INDEP_OPS<<1)
#define RE_DOT_NEWLINE	(RE_CONTEXT_INVALID_OPS<<1)
#define RE_DOT_NOT_NULL	(RE_DOT_NEWLINE<<1)
#define RE_HAT_LISTS_NOT_NEWLINE	(RE_DOT_NOT_NULL<<1)
#define RE_LIMITED_OPS	(RE_INTERVALS<<1)
#define RE_NEWLINE_ALT	(RE_LIMITED_OPS<<1)
#define RE_NO_BK_BRACES	(RE_NEWLINE_ALT<<1)
#define RE_NO_BK_PARENS	(RE_NO_BK_BRACES<<1)
#define RE_NO_BK_REFS	(RE_NO_BK_PARENS<<1)
#define RE_NO_BK_VBAR	(RE_NO_BK_REFS<<1)
#define RE_NO_EMPTY_RANGES	(RE_NO_BK_VBAR<<1)
#define RE_UNMATCHED_RIGHT_PAREN_ORD	(RE_NO_EMPTY_RANGES<<1)
#define RE_SYNTAX_POSIX_EGREP	(RE_SYNTAX_EGREP|RE_INTERVALS|RE_NO_BK_BRACES|RE_INVALID_INTERVAL_ORD)
#define RE_SYNTAX_POSIX_AWK	(RE_SYNTAX_POSIX_EXTENDED|RE_BACKSLASH_ESCAPE_IN_LISTS|RE_INTERVALS|RE_NO_GNU_OPS)
#define RE_SYNTAX_POSIX_BASIC	(_RE_SYNTAX_POSIX_COMMON|RE_BK_PLUS_QM)
#define RE_SYNTAX_POSIX_EXTENDED	(_RE_SYNTAX_POSIX_COMMON|RE_CONTEXT_INDEP_ANCHORS|RE_CONTEXT_INDEP_OPS|RE_NO_BK_BRACES|RE_NO_BK_PARENS|RE_NO_BK_VBAR|RE_CONTEXT_INVALID_OPS|RE_UNMATCHED_RIGHT_PAREN_ORD)
#define RE_SYNTAX_POSIX_MINIMAL_EXTENDED	(_RE_SYNTAX_POSIX_COMMON|RE_CONTEXT_INDEP_ANCHORS|RE_CONTEXT_INVALID_OPS|RE_NO_BK_BRACES|RE_NO_BK_PARENS|RE_NO_BK_REFS|RE_NO_BK_VBAR|RE_UNMATCHED_RIGHT_PAREN_ORD)
#define RE_SYNTAX_POSIX_MINIMAL_BASIC	(_RE_SYNTAX_POSIX_COMMON|RE_LIMITED_OPS)
#define RE_SYNTAX_ED	RE_SYNTAX_POSIX_BASIC
#define RE_SYNTAX_SED	RE_SYNTAX_POSIX_BASIC


typedef unsigned long reg_syntax_t;





typedef struct re_pattern_buffer
{
  unsigned char *buffer;
  unsigned long allocated;
  unsigned long used;
  reg_syntax_t syntax;
  char *fastmap;
  char *translate;
  size_t re_nsub;
  unsigned int can_be_null;
  unsigned int regs_allocated;
  unsigned int fastmap_accurate;
  unsigned int no_sub;
  unsigned int not_bol;
  unsigned int not_eol;
  unsigned int newline_anchor;
}
regex_t;
typedef int regoff_t;
typedef struct
{
  regoff_t rm_so;
  regoff_t rm_eo;
}
regmatch_t;
#define REG_NOTEOL	(1<<1)
#define REG_ICASE	(REG_EXTENDED<<1)
#define REG_NEWLINE	(REG_ICASE<<1)
#define REG_NOSUB	(REG_NEWLINE<<1)
#define REG_NOMATCH	-1
#define REG_EXTENDED	1
#define REG_NOTBOL	1
</SCREEN>
</SECT2>
<SECT2>
<TITLE>sched.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define SCHED_OTHER	0
#define SCHED_FIFO	1
#define SCHED_RR	2
</SCREEN>
</SECT2>
<SECT2>
<TITLE>search.h</TITLE>
<PARA>
</PARA>
<SCREEN>






typedef struct entry
{
  char *key;
  void *data;
}
ENTRY;
typedef void (*__action_fn_t) (void *__nodep, VISIT __value, int __level);
typedef enum
{
  FIND, ENTER
}
ACTION;
typedef enum
{
  preorder, postorder, endorder, leaf
}
VISIT;
</SCREEN>
</SECT2>
<SECT2>
<TITLE>setjmp.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define setjmp(env)	_setjmp(env)
#define sigsetjmp(a,b)	__sigsetjmp(a,b)





typedef int __jmp_buf[6];


struct __jmp_buf_tag
{
  __jmp_buf __jmpbuf;
  int __mask_was_saved;
  sigset_t __saved_mask;
}
 ;


typedef struct __jmp_buf_tag jmp_buf[1];
typedef jmp_buf sigjmp_buf;
</SCREEN>
</SECT2>
<SECT2>
<TITLE>signal.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define SIGRTMAX	(__libc_current_sigrtmax ())
#define SIGRTMIN	(__libc_current_sigrtmin ())
#define SIGEV_SIGNAL	0
#define SIG_BLOCK	0
#define SIG_UNBLOCK	1
#define SIG_SETMASK	2
#define SIGEV_THREAD	2


typedef int sig_atomic_t;
struct sigstack
{
  void *ss_sp;
  int ss_onstack;
}
 ;
#define SIG_ERR	((__sighandler_t)-1)
#define SIG_DFL	((__sighandler_t)0)
#define SIG_IGN	((__sighandler_t)1)
#define SIGHUP	1
#define SIGUSR1	10
#define SIGSEGV	11
#define SIGUSR2	12
#define SIGPIPE	13
#define SIGALRM	14
#define SIGTERM	15
#define SIGSTKFLT	16
#define SIGCHLD	17
#define SIGCONT	18
#define SIGSTOP	19
#define SIGINT	2
#define SIGTSTP	20
#define SIGTTIN	21
#define SIGTTOU	22
#define SIGURG	23
#define SIGXCPU	24
#define SIGXFSZ	25
#define SIGVTALRM	26
#define SIGPROF	27
#define SIGWINCH	28
#define SIGIO	29
#define SIGQUIT	3
#define SIGPWR	30
#define SIGSYS	31
#define SIGUNUSED	31
#define SIGILL	4
#define SIGTRAP	5
#define SIGABRT	6
#define SIGIOT	6
#define SIGBUS	7
#define SIGFPE	8
#define SIGKILL	9
#define SIGCLD	SIGCHLD
#define SIGPOLL	SIGIO





typedef void (*__sighandler_t) (void);
#define SV_ONSTACK	(1<<0)
#define SV_INTERRUPT	(1<<1)
#define SV_RESETHAND	(1<<2)


typedef union sigval
{
  int sival_int;
  void *sival_ptr;
}
sigval_t;
#define SIGEV_NONE	1


union _sigev_un
{
  int _pad[SI_PAD_SIZE];
  struct
  {
    void (*sigev_thread_func) (void);
    void *_attribute;
  }
  _sigev_thread;
}
 ;
typedef struct sigevent
{
  sigval_t sigev_value;
  int sigev_signo;
  int sigev_notify;
  union _sigev_un _sigev_un;
}
sigevent_t;
#define SI_QUEUE	-1
#define SI_TIMER	-2
#define SI_MESGQ	-3
#define SI_ASYNCIO	-4
#define SI_USER	0


typedef struct siginfo
{
  int si_signo;
  int si_errno;
  int si_code;
  union
  {
    int _pad[SI_PAD_SIZE];
    struct
    {
      pid_t si_pid;
      uid_t si_uid;
    }
    _kill;
    struct
    {
      unsigned int _timer1;
      unsigned int _timer2;
    }
    _timer;
    struct
    {
      pid_t _pid;
      uid_t _uid;
      sigval_t _sigval;
    }
    _rt;
    struct
    {
      pid_t _pid;
      uid_t _uid;
      int _status;
      clock_t _utime;
      clock_t _stime;
    }
    _sigchld;
    struct
    {
      void *_addr;
    }
    _sigfault;
    struct
    {
      int _band;
      int _fd;
    }
    _sigpoll;
  }
  _sifields;
}
siginfo_t;
#define _NSIG	64


typedef struct
{
  unsigned long sig[_NSIG_WORDS];
}
sigset_t;
#define SA_NOCLDSTOP	0x00000001
#define SA_NOCLDWAIT	0x00000002
#define SA_SIGINFO	0x00000004
#define SA_ONSTACK	0x08000000
#define SA_RESTART	0x10000000
#define SA_INTERRUPT	0x20000000
#define SA_NODEFER	0x40000000
#define SA_RESETHAND	0x80000000
#define SA_NOMASK	SA_NODEFER
#define SA_ONESHOT	SA_RESETHAND


struct sigaction
{
  union
  {
    __sighandler_t _sa_handler;
    void (*_sa_sigaction) (void);
  }
  __sigaction_handler;
  unsigned long sa_flags;
  void (*sa_restorer) (void);
  sigset_t sa_mask;
}
 ;


typedef struct sigaltstack
{
  void *ss_sp;
  int ss_flags;
  size_t ss_size;
}
stack_t;


struct _fpreg
{
  unsigned short significand[4];
  unsigned short exponent;
}
 ;
struct _fpxreg
{
  unsigned short significand[4];
  unsigned short exponent;
  unsigned short padding[3];
}
 ;
struct _xmmreg
{
  unsigned long element[4];
}
 ;


struct _fpstate
{
  unsigned long cw;
  unsigned long sw;
  unsigned long tag;
  unsigned long ipoff;
  unsigned long cssel;
  unsigned long dataoff;
  unsigned long datasel;
  struct _fpreg _st[8];
  unsigned short status;
  unsigned short magic;
  unsigned long _fxsr_env[6];
  unsigned long mxcsr;
  unsigned long reserved;
  struct _fpxreg _fxsr_st[8];
  struct _xmmreg _xmm[8];
  unsigned long padding[56];
}
 ;


struct sigcontext
{
  unsigned short gs;
  unsigned short __gsh;
  unsigned short fs;
  unsigned short __fsh;
  unsigned short es;
  unsigned short __esh;
  unsigned short ds;
  unsigned short __dsh;
  unsigned long edi;
  unsigned long esi;
  unsigned long ebp;
  unsigned long esp;
  unsigned long ebx;
  unsigned long edx;
  unsigned long ecx;
  unsigned long eax;
  unsigned long trapno;
  unsigned long err;
  unsigned long eip;
  unsigned short cs;
  unsigned short __csh;
  unsigned long eflags;
  unsigned long esp_at_signal;
  unsigned short ss;
  unsigned short __ssh;
  struct _fpstate fpstate;
  unsigned long oldmask;
  unsigned long cr2;
}
 ;
</SCREEN>
</SECT2>
<SECT2>
<TITLE>stdio.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define EOF	(-1)
#define P_tmpdir	"/tmp"
#define FOPEN_MAX	16
#define L_tmpnam	20
#define FILENAME_MAX	4096
#define BUFSIZ	8192
#define L_cuserid	9
#define L_ctermid	9


typedef struct _IO_FILE *FILE;
typedef off_t fpos_t;
typedef off64_t fpos64_t;



#define _IOFBF	0
#define _IOLBF	1
#define _IONBF	2
</SCREEN>
</SECT2>
<SECT2>
<TITLE>stdlib.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define MB_CUR_MAX	(__ctype_get_mb_cur_max())
#define EXIT_SUCCESS	0
#define EXIT_FAILURE	1
#define RAND_MAX	2147483647


typedef int (*__compar_fn_t) (void);


typedef struct
{
  int quot;
  int rem;
}
div_t;


typedef struct
{
  long quot;
  long rem;
}
ldiv_t;


typedef struct
{
  long quot;
  long rem;
}
lldiv_t;
</SCREEN>
</SECT2>
<SECT2>
<TITLE>sys/ioctl.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define FIONREAD	0x541B
</SCREEN>
</SECT2>
<SECT2>
<TITLE>sys/ipc.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define IPC_PRIVATE	((key_t)0)
#define IPC_RMID	0
#define IPC_CREAT	00001000
#define IPC_EXCL	00002000
#define IPC_NOWAIT	00004000
#define IPC_SET	1
#define IPC_STAT	2


struct sembuf
{
  short sem_num;
  short sem_op;
  short sem_flg;
}
 ;
struct ipc_perm
{
  key_t key;
  uid_t uid;
  gid_t gid;
  uid_t cuid;
  gid_t cgid;
  mode_t mode;
  unsigned short seq;
}
 ;
</SCREEN>
</SECT2>
<SECT2>
<TITLE>sys/mman.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define MAP_FAILED	((void*)-1)
#define PROT_NONE	0x0
#define MAP_SHARED	0x01
#define MAP_PRIVATE	0x02
#define PROT_READ	0x1
#define MAP_FIXED	0x10
#define PROT_WRITE	0x2
#define PROT_EXEC	0x4
#define MCL_CURRENT	1
#define MS_ASYNC	1
#define MS_INVALIDATE	2
#define MCL_FUTURE	2
#define MS_SYNC	4
</SCREEN>
</SECT2>
<SECT2>
<TITLE>sys/msg.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define MSG_NOERROR	010000





typedef unsigned long msgqnum_t;
typedef unsigned long msglen_t;


struct msqid_ds
{
  struct ipc_perm msg_perm;
  time_t msg_stime;
  unsigned long __unused1;
  time_t msg_rtime;
  unsigned long __unused2;
  time_t msg_ctime;
  unsigned long __unused3;
  unsigned long __msg_cbytes;
  msgqnum_t msg_qnum;
  msglen_t msg_qbytes;
  pid_t msg_lspid;
  pid_t msg_lrpid;
  unsigned long __unused4;
  unsigned long __unused5;
}
 ;
</SCREEN>
</SECT2>
<SECT2>
<TITLE>sys/resource.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define RLIM_INFINITY	(~0UL)
#define RLIM_SAVED_CUR	-1
#define RLIM_SAVED_MAX	-1
#define RUSAGE_SELF	0
#define RLIMIT_CPU	0
#define RLIMIT_FSIZE	1
#define RLIMIT_DATA	2
#define RLIMIT_STACK	3
#define RLIMIT_CORE	4
#define RLIMIT_NOFILE	7
#define RLIMIT_AS	9





typedef unsigned long rlim_t;


struct rlimit
{
  rlim_t rlim_cur;
  rlim_t rlim_max;
}
 ;
struct rlimit64
{
  rlim_t rlim_cur;
  rlim_t rlim_max;
}
 ;


struct rusage
{
  struct timeval ru_utime;
  struct timeval ru_stime;
  long ru_maxrss;
  long ru_ixrss;
  long ru_idrss;
  long ru_isrss;
  long ru_minflt;
  long ru_majflt;
  long ru_nswap;
  long ru_inblock;
  long ru_oublock;
  long ru_msgsnd;
  long ru_msgrcv;
  long ru_nsignals;
  long ru_nvcsw;
  long ru_nivcsw;
}
 ;
</SCREEN>
</SECT2>
<SECT2>
<TITLE>sys/sem.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define SEM_UNDO	0x1000
#define GETPID	11
#define GETVAL	12
#define GETALL	13
#define GETNCNT	14
#define GETZCNT	15
#define SETVAL	16
#define SETALL	17


struct semid_ds
{
  struct ipc_perm sem_perm;
  time_t sem_otime;
  unsigned long __unused1;
  time_t sem_ctime;
  unsigned long __unused2;
  unsigned long sem_nsems;
  unsigned long __unused3;
  unsigned long __unused4;
}
 ;
</SCREEN>
</SECT2>
<SECT2>
<TITLE>sys/shm.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define SHMLBA	(__getpagesize())
#define SHM_RND	020000
#define SHM_RDONLY	4096





typedef unsigned long shmatt_t;


struct shmid_ds
{
  struct ipc_perm shm_perm;
  int shm_segsz;
  time_t shm_atime;
  unsigned long __unused1;
  time_t shm_dtime;
  unsigned long __unused2;
  time_t shm_ctime;
  unsigned long __unused3;
  pid_t shm_cpid;
  pid_t shm_lpid;
  shmatt_t shm_nattch;
  unsigned long __unused4;
  unsigned long __unused5;
}
 ;
</SCREEN>
</SECT2>
<SECT2>
<TITLE>sys/socket.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define MSG_WAITALL	0x100
#define MSG_TRUNC	0x20
#define MSG_EOR	0x80
#define MSG_OOB	1
#define MSG_PEEK	2
#define MSG_DONTROUTE	4
#define MSG_CTRUNC	8
#define PF_INET	AF_INET
#define PF_INET6	AF_INET6
#define SHUT_RD	SHUT_RD
#define SHUT_RDWR	SHUT_RDWR
#define SHUT_WR	SHUT_WR


struct linger
{
  int l_onoff;
  int l_linger;
}
 ;
struct cmsghdr
{
  size_t cmsg_len;
  int cmsg_level;
  int cmsg_type;
}
 ;
struct iovec
{
  void *iov_base;
  size_t iov_len;
}
 ;


typedef unsigned short sa_family_t;
typedef unsigned int socklen_t;


struct sockaddr
{
  sa_family_t sa_family;
  char sa_data[14];
}
 ;


struct msghdr
{
  void *msg_name;
  int msg_namelen;
  struct iovec *msg_iov;
  size_t msg_iovlen;
  void *msg_control;
  size_t msg_controllen;
  unsigned int msg_flags;
}
 ;
#define AF_UNSPEC	0
#define AF_LOCAL	1
#define AF_UNIX	1
#define AF_INET6	10
#define AF_INET	2
#define AF_AX25	3
#define AF_IPX	4
#define AF_APPLETALK	5
#define AF_NETROM	6
#define AF_BRIDGE	7
#define AF_ATMPVC	8
#define AF_X25	9



#define SOCK_STREAM	1
#define SOCK_PACKET	10
#define SOCK_DGRAM	2
#define SOCK_RAW	3
#define SOCK_RDM	4
#define SOCK_SEQPACKET	5



#define SOL_IP	0
#define SOL_SOCKET	1
#define SO_DEBUG	1
#define SO_OOBINLINE	10
#define SO_NO_CHECK	11
#define SO_PRIORITY	12
#define SO_LINGER	13
#define SOL_UDP	17
#define SO_REUSEADDR	2
#define SOL_RAW	255
#define SO_TYPE	3
#define SO_ERROR	4
#define SO_DONTROUTE	5
#define SOL_TCP	6
#define SO_BROADCAST	6
#define SO_SNDBUF	7
#define SO_RCVBUF	8
#define SO_KEEPALIVE	9
</SCREEN>
</SECT2>
<SECT2>
<TITLE>sys/stat.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define S_ISBLK(m)	(((m)&amp S_IFMT)==S_IFBLK)
#define S_ISCHR(m)	(((m)&amp S_IFMT)==S_IFCHR)
#define S_ISDIR(m)	(((m)&amp S_IFMT)==S_IFDIR)
#define S_ISFIFO(m)	(((m)&amp S_IFMT)==S_IFIFO)
#define S_ISLNK(m)	(((m)&amp S_IFMT)==S_IFLNK)
#define S_ISREG(m)	(((m)&amp S_IFMT)==S_IFREG)
#define S_ISSOCK(m)	(((m)&amp S_IFMT)==S_IFSOCK)
#define S_TYPEISSEM(buf)	((buf)->st_mode - (buf)->st_mode)
#define S_TYPEISMQ(buf)	((buf)->st_mode - (buf)->st_mode)
#define S_TYPEISSHM(buf)	((buf)->st_mode - (buf)->st_mode)
#define S_IRWXU	(S_IREAD|S_IWRITE|S_IEXEC)
#define S_IROTH	(S_IRGRP>>3)
#define S_IRGRP	(S_IRUSR>>3)
#define S_IRWXO	(S_IRWXG>>3)
#define S_IRWXG	(S_IRWXU>>3)
#define S_IWOTH	(S_IWGRP>>3)
#define S_IWGRP	(S_IWUSR>>3)
#define S_IXOTH	(S_IXGRP>>3)
#define S_IXGRP	(S_IXUSR>>3)
#define S_ISVTX	01000
#define S_IXUSR	0x0040
#define S_IWUSR	0x0080
#define S_IRUSR	0x0100
#define S_ISGID	0x0400
#define S_ISUID	0x0800
#define S_IFIFO	0x1000
#define S_IFCHR	0x2000
#define S_IFDIR	0x4000
#define S_IFBLK	0x6000
#define S_IFREG	0x8000
#define S_IFLNK	0xa000
#define S_IFSOCK	0xc000
#define S_IFMT	0xf000
#define S_IREAD	S_IRUSR
#define S_IWRITE	S_IWUSR
#define S_IEXEC	S_IXUSR


struct stat
{
  unsigned short st_dev;
  unsigned short __pad1;
  unsigned long st_ino;
  unsigned short st_mode;
  unsigned short st_nlink;
  unsigned short st_uid;
  unsigned short st_gid;
  unsigned short st_rdev;
  unsigned short __pad2;
  unsigned long st_size;
  unsigned long st_blksize;
  unsigned long st_blocks;
  unsigned long st_atime;
  unsigned long __unused1;
  unsigned long st_mtime;
  unsigned long __unused2;
  unsigned long st_ctime;
  unsigned long __unused3;
  unsigned long __unused4;
  unsigned long __unused5;
}
 ;
struct stat64
{
  unsigned short st_dev;
  unsigned char __pad0[1];
  unsigned long __st_ino;
  unsigned int st_mode;
  unsigned int st_nlink;
  unsigned long st_uid;
  unsigned long st_gid;
  unsigned short st_rdev;
  unsigned char __pad3[1];
  long st_size;
  unsigned long st_blksize;
  unsigned long st_blocks;
  unsigned long __pad4;
  unsigned long st_atime;
  unsigned long __pad5;
  unsigned long st_mtime;
  unsigned long __pad6;
  unsigned long st_ctime;
  unsigned long __pad7;
  unsigned long st_ino;
}
 ;
</SCREEN>
</SECT2>
<SECT2>
<TITLE>sys/time.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define ITIMER_REAL	0
#define ITIMER_VIRTUAL	1
#define ITIMER_PROF	2


struct timezone
{
  int tz_minuteswest;
  int tz_dsttime;
}
 ;








struct timespec
{
  time_t tv_sec;
  long tv_nsec;
}
 ;





struct timeval
{
  time_t tv_sec;
  suseconds_t tv_usec;
}
 ;


struct itimerval
{
  struct timeval it_interval;
  struct timeval it_value;
}
 ;
struct itimerspec
{
  struct timespec it_interval;
  struct timespec it_value;
}
 ;
</SCREEN>
</SECT2>
<SECT2>
<TITLE>sys/timeb.h</TITLE>
<PARA>
</PARA>
<SCREEN>



struct timeb
{
  time_t time;
  unsigned short millitm;
  short timezone;
  short dstflag;
}
 ;
</SCREEN>
</SECT2>
<SECT2>
<TITLE>sys/times.h</TITLE>
<PARA>
</PARA>
<SCREEN>



struct tms
{
  clock_t tms_utime;
  clock_t tms_stime;
  clock_t tms_cutime;
  clock_t tms_cstime;
}
 ;
</SCREEN>
</SECT2>
<SECT2>
<TITLE>sys/utsname.h</TITLE>
<PARA>
</PARA>
<SCREEN>



struct utsname
{
  char sysname[65];
  char nodename[65];
  char release[65];
  char version[65];
  char machine[65];
}
 ;
</SCREEN>
</SECT2>
<SECT2>
<TITLE>sys/wait.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define WIFSIGNALED(status)	(!WIFSTOPPED(status) &amp & !WIFEXITED(status))
#define WIFSTOPPED(status)	(((status) &amp  0xff) == 0x7f)
#define WEXITSTATUS(status)	(((status) &amp  0xff00) >> 8)
#define WTERMSIG(status)	((status) &amp  0x7f)
#define WCOREDUMP(status)	((status) &amp  0x80)
#define WIFEXITED(status)	(WTERMSIG(status) == 0)
#define WNOHANG	0x00000001
#define WUNTRACED	0x00000002
#define WCOREFLAG	0x80
#define WSTOPSIG(status)	WEXITSTATUS(status)


typedef enum
{
  P_ALL, P_PID, P_PGID
}
idtype_t;
</SCREEN>
</SECT2>
<SECT2>
<TITLE>syslog.h</TITLE>
<PARA>
</PARA>
<SCREEN>




#define LOG_EMERG	0
#define LOG_ALERT	1
#define LOG_CRIT	2
#define LOG_ERR	3
#define LOG_WARNING	4
#define LOG_NOTICE	5
#define LOG_INFO	6
#define LOG_DEBUG	7



#define LOG_KERN	(0<<3)
#define LOG_AUTHPRIV	(10<<3)
#define LOG_FTP	(11<<3)
#define LOG_USER	(1<<3)
#define LOG_MAIL	(2<<3)
#define LOG_DAEMON	(3<<3)
#define LOG_AUTH	(4<<3)
#define LOG_SYSLOG	(5<<3)
#define LOG_LPR	(6<<3)
#define LOG_NEWS	(7<<3)
#define LOG_UUCP	(8<<3)
#define LOG_CRON	(9<<3)



#define LOG_LOCAL0	(16<<3)
#define LOG_LOCAL1	(17<<3)
#define LOG_LOCAL2	(18<<3)
#define LOG_LOCAL3	(19<<3)
#define LOG_LOCAL4	(20<<3)
#define LOG_LOCAL5	(21<<3)
#define LOG_LOCAL6	(22<<3)
#define LOG_LOCAL7	(23<<3)



#define LOG_UPTO(pri)	((1 << ((pri)+1)) - 1)
#define LOG_MASK(pri)	(1 << (pri))



#define LOG_PID	0x01
#define LOG_CONS	0x02
#define LOG_ODELAY	0x04
#define LOG_NDELAY	0x08
#define LOG_NOWAIT	0x10
#define LOG_PERROR	0x20
</SCREEN>
</SECT2>
<SECT2>
<TITLE>termios.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define TCIFLUSH	0
#define TCSANOW	0
#define TCOOFF	0
#define TAB0	0000000
#define VT0	0000000
#define CR0	0000000
#define FF0	0000000
#define NL0	0000000
#define BS0	0000000
#define OPOST	0000001
#define OLCUC	0000002
#define ONLCR	0000004
#define XCASE	0000004
#define OCRNL	0000010
#define ONOCR	0000020
#define ONLRET	0000040
#define OFILL	0000100
#define OFDEL	0000200
#define NLDLY	0000400
#define NL1	0000400
#define CR1	0001000
#define IUCLC	0001000
#define CR2	0002000
#define CR3	0003000
#define CRDLY	0003000
#define TAB1	0004000
#define TAB2	0010000
#define TABDLY	0014000
#define TAB3	0014000
#define BSDLY	0020000
#define BS1	0020000
#define VTDLY	0040000
#define VT1	0040000
#define FFDLY	0100000
#define FF1	0100000
#define TCSADRAIN	1
#define TCOON	1
#define TCOFLUSH	1
#define TCIOFLUSH	2
#define TCSAFLUSH	2
#define TCIOFF	2
#define TCION	3





typedef int speed_t;
typedef unsigned char cc_t;
typedef unsigned int tcflag_t;
#define NCCS	32


struct termios
{
  tcflag_t c_iflag;
  tcflag_t c_oflag;
  tcflag_t c_cflag;
  tcflag_t c_lflag;
  cc_t c_line;
  cc_t c_cc[NCCS];
  speed_t c_ispeed;
  speed_t c_ospeed;
}
 ;
#define VINTR	0
#define VQUIT	1
#define VSUSP	10
#define VEOL	11
#define VREPRINT	12
#define VDISCARD	13
#define VWERASE	14
#define VLNEXT	15
#define VEOL2	16
#define VERASE	2
#define VKILL	3
#define VEOF	4
#define VMIN	6
#define VSWTC	7
#define VSTART	8
#define VSTOP	9



#define IGNBRK	0000001
#define BRKINT	0000002
#define IGNPAR	0000004
#define PARMRK	0000010
#define INPCK	0000020
#define ISTRIP	0000040
#define INLCR	0000100
#define IGNCR	0000200
#define ICRNL	0000400
#define IXON	0002000
#define IXANY	0004000
#define IXOFF	0010000
#define IMAXBEL	0020000






#define CS5	0000000
#define CS6	0000020
#define CS7	0000040
#define CS8	0000060
#define CSIZE	0000060
#define CSTOPB	0000100
#define CREAD	0000200
#define PARENB	0000400
#define PARODD	0001000
#define HUPCL	0002000
#define CLOCAL	0004000
#define VTIME	5



#define ISIG	0000001
#define ICANON	0000002
#define ECHO	0000010
#define ECHOE	0000020
#define ECHOK	0000040
#define ECHONL	0000100
#define NOFLSH	0000200
#define TOSTOP	0000400
#define ECHOCTL	0001000
#define ECHOPRT	0002000
#define ECHOKE	0004000
#define FLUSHO	0010000
#define PENDIN	0040000
#define IEXTEN	0100000



#define B0	0000000
#define B50	0000001
#define B75	0000002
#define B110	0000003
#define B134	0000004
#define B150	0000005
#define B200	0000006
#define B300	0000007
#define B600	0000010
#define B1200	0000011
#define B1800	0000012
#define B2400	0000013
#define B4800	0000014
#define B9600	0000015
#define B19200	0000016
#define B38400	0000017
</SCREEN>
</SECT2>
<SECT2>
<TITLE>time.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define CLOCK_REALTIME	0
#define TIMER_ABSTIME	1
#define CLOCKS_PER_SEC	1000000l


struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;
  long tm_gmtoff;
  char *tm_zone;
}
 ;
</SCREEN>
</SECT2>
<SECT2>
<TITLE>ucontext.h</TITLE>
<PARA>
</PARA>
<SCREEN>






typedef int greg_t;





typedef greg_t gregset_t[19];





struct _libc_fpreg
{
  unsigned short significand[4];
  unsigned short exponent;
}
 ;





struct _libc_fpstate
{
  unsigned long cw;
  unsigned long sw;
  unsigned long tag;
  unsigned long ipoff;
  unsigned long cssel;
  unsigned long dataoff;
  unsigned long datasel;
  struct _libc_fpreg _st[8];
  unsigned long status;
}
 ;
typedef struct _libc_fpstate
{
  unsigned long cw;
  unsigned long sw;
  unsigned long tag;
  unsigned long ipoff;
  unsigned long cssel;
  unsigned long dataoff;
  unsigned long datasel;
  struct _libc_fpreg _st[8];
  unsigned long status;
}
fpregset_t;


typedef struct mcontext
{
  gregset_t gregs;
  fpregset_t fpregs;
  unsigned long oldmask;
  unsigned long cr2;
}
mcontext_t;


typedef struct ucontext
{
  unsigned long uc_flags;
  struct ucontext *uc_link;
  stack_t uc_stack;
  mcontext_t uc_mcontext;
  sigset_t uc_sigmask;
  struct _libc_fpstate __fpregs_mem;
}
ucontext_t;
</SCREEN>
</SECT2>
<SECT2>
<TITLE>ulimit.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define UL_GETFSIZE	1
#define UL_SETFSIZE	2
</SCREEN>
</SECT2>
<SECT2>
<TITLE>unistd.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define STDIN_FILENO	0
#define SEEK_SET	0
#define STDOUT_FILENO	1
#define SEEK_CUR	1
#define STDERR_FILENO	2
#define SEEK_END	2


typedef long long off64_t;
typedef int *intptr_t;
#define F_OK	0
#define X_OK	1
#define W_OK	2
#define R_OK	4



#define _POSIX_MAPPED_FILES	1
#define _POSIX_SYNCHRONIZED_IO	1
#define _POSIX_FSYNC	1
#define _POSIX_MEMLOCK_RANGE	1
#define _POSIX_MESSAGE_PASSING	1
#define _POSIX_REALTIME_SIGNALS	1
#define _POSIX_SHARED_MEMORY_OBJECTS	1
#define _POSIX_ASYNCHRONOUS_IO	1
#define _POSIX_TIMERS	1
#define _POSIX_MEMLOCK	1
#define _POSIX_MEMORY_PROTECTION	1
#define _POSIX_PRIORITY_SCHEDULING	1
#define _POSIX_SEMAPHORES	1
#define _POSIX2_VERSION	199209L
#define _POSIX2_C_VERSION	199209L
#define _POSIX_VERSION	199506L



#define _PC_LINK_MAX	0
#define _PC_MAX_CANON	1
#define _PC_ASYNC_IO	10
#define _PC_PRIO_IO	11
#define _PC_FILESIZEBITS	13
#define _PC_MAX_INPUT	2
#define _PC_NAME_MAX	3
#define _PC_PATH_MAX	4
#define _PC_PIPE_BUF	5
#define _PC_CHOWN_RESTRICTED	6
#define _PC_NO_TRUNC	7
#define _PC_VDISABLE	8
#define _PC_SYNC_IO	9



#define _SC_ARG_MAX	0
#define _SC_CHILD_MAX	1
#define _SC_PRIORITY_SCHEDULING	10
#define _SC_TIMERS	11
#define _SC_ASYNCHRONOUS_IO	12
#define _SC_XBS5_ILP32_OFF32	125
#define _SC_XBS5_ILP32_OFFBIG	126
#define _SC_XBS5_LP64_OFF64	127
#define _SC_XBS5_LPBIG_OFFBIG	128
#define _SC_XOPEN_LEGACY	129
#define _SC_PRIORITIZED_IO	13
#define _SC_XOPEN_REALTIME	130
#define _SC_SYNCHRONIZED_IO	14
#define _SC_MAPPED_FILES	16
#define _SC_MEMLOCK	17
#define _SC_MEMLOCK_RANGE	18
#define _SC_MEMORY_PROTECTION	19
#define _SC_CLK_TCK	2
#define _SC_MESSAGE_PASSING	20
#define _SC_SEMAPHORES	21
#define _SC_SHARED_MEMORY_OBJECTS	22
#define _SC_AIO_LISTIO_MAX	23
#define _SC_AIO_MAX	24
#define _SC_AIO_PRIO_DELTA_MAX	25
#define _SC_DELAYTIMER_MAX	26
#define _SC_MQ_OPEN_MAX	27
#define _SC_MQ_PRIO_MAX	28
#define _SC_VERSION	29
#define _SC_NGROUPS_MAX	3
#define _SC_PAGESIZE	30
#define _SC_RTSIG_MAX	31
#define _SC_SEM_NSEMS_MAX	32
#define _SC_SEM_VALUE_MAX	33
#define _SC_SIGQUEUE_MAX	34
#define _SC_TIMER_MAX	35
#define _SC_BC_BASE_MAX	36
#define _SC_BC_DIM_MAX	37
#define _SC_BC_SCALE_MAX	38
#define _SC_BC_STRING_MAX	39
#define _SC_OPEN_MAX	4
#define _SC_COLL_WEIGHTS_MAX	40
#define _SC_EXPR_NEST_MAX	42
#define _SC_LINE_MAX	43
#define _SC_RE_DUP_MAX	44
#define _SC_2_VERSION	46
#define _SC_2_C_BIND	47
#define _SC_2_C_DEV	48
#define _SC_2_FORT_DEV	49
#define _SC_STREAM_MAX	5
#define _SC_2_FORT_RUN	50
#define _SC_2_SW_DEV	51
#define _SC_2_LOCALEDEF	52
#define _SC_TZNAME_MAX	6
#define _SC_THREADS	67
#define _SC_THREAD_SAFE_FUNCTIONS	68
#define _SC_JOB_CONTROL	7
#define _SC_THREAD_DESTRUCTOR_ITERATIONS	73
#define _SC_THREAD_KEYS_MAX	74
#define _SC_THREAD_STACK_MIN	75
#define _SC_THREAD_THREADS_MAX	76
#define _SC_THREAD_ATTR_STACKADDR	77
#define _SC_THREAD_ATTR_STACKSIZE	78
#define _SC_THREAD_PRIORITY_SCHEDULING	79
#define _SC_SAVED_IDS	8
#define _SC_THREAD_PRIO_INHERIT	80
#define _SC_THREAD_PRIO_PROTECT	81
#define _SC_THREAD_PROCESS_SHARED	82
#define _SC_PASS_MAX	88
#define _SC_XOPEN_VERSION	89
#define _SC_REALTIME_SIGNALS	9
#define _SC_XOPEN_CRYPT	92
#define _SC_XOPEN_ENH_I18N	93
#define _SC_XOPEN_SHM	94
#define _SC_2_C_VERSION	96
#define _SC_2_UPE	97



#define _CS_PATH	0
#define _CS_XBS5_ILP32_OFF32_CFLAGS	1100
#define _CS_XBS5_ILP32_OFF32_LDFLAGS	1101
#define _CS_XBS5_ILP32_OFF32_LIBS	1102
#define _CS_XBS5_ILP32_OFF32_LINTFLAGS	1103
#define _CS_XBS5_ILP32_OFFBIG_CFLAGS	1104
#define _CS_XBS5_ILP32_OFFBIG_LDFLAGS	1105
#define _CS_XBS5_ILP32_OFFBIG_LIBS	1106
#define _CS_XBS5_ILP32_OFFBIG_LINTFLAGS	1107
#define _CS_XBS5_LP64_OFF64_CFLAGS	1108
#define _CS_XBS5_LP64_OFF64_LDFLAGS	1109
#define _CS_XBS5_LP64_OFF64_LIBS	1110
#define _CS_XBS5_LP64_OFF64_LINTFLAGS	1111
#define _CS_XBS5_LPBIG_OFFBIG_CFLAGS	1112
#define _CS_XBS5_LPBIG_OFFBIG_LDFLAGS	1113
#define _CS_XBS5_LPBIG_OFFBIG_LIBS	1114
#define _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS	1115



#define _XOPEN_REALTIME	1
#define _XOPEN_XPG4	1
#define _XOPEN_XCU_VERSION	4
#define _XOPEN_VERSION	500
</SCREEN>
</SECT2>
<SECT2>
<TITLE>utime.h</TITLE>
<PARA>
</PARA>
<SCREEN>



struct utimbuf
{
  time_t actime;
  time_t modtime;
}
 ;
</SCREEN>
</SECT2>
<SECT2>
<TITLE>wchar.h</TITLE>
<PARA>
</PARA>
<SCREEN>

#define WEOF	(0xffffffffu)
#define WCHAR_MAX	__WCHAR_MAX
#define WCHAR_MIN	__WCHAR_MIN





typedef struct
{
  int count;
  wint_t value;
}
mbstate_t;
</SCREEN>
</SECT2>
<SECT2>
<TITLE>wctype.h</TITLE>
<PARA>
</PARA>
<SCREEN>



typedef unsigned long wctype_t;
typedef int wctrans_t;
</SCREEN>
</SECT2>
<SECT2>
<TITLE>wordexp.h</TITLE>
<PARA>
</PARA>
<SCREEN>






enum
{
  WRDE_DOOFFS, WRDE_APPEND, WRDE_NOCMD, WRDE_REUSE, WRDE_SHOWERR, WRDE_UNDEF,
    __WRDE_FLAGS
}
 ;


typedef struct
{
  int we_wordc;
  char **we_wordv;
  int we_offs;
}
wordexp_t;


enum
{
  WRDE_NOSYS, WRDE_NOSPACE, WRDE_BADCHAR, WRDE_BADVAL, WRDE_CMDSUB,
    WRDE_SYNTAX
}
 ;
</SCREEN>
</SECT2>
</SECT1>
<SECT1 ID=libcman>
<TITLE>Interfaces Definitions for libc</TITLE>
<PARA>
</PARA>
include(_IO_2_1_stderr_.sgml)
include(_IO_2_1_stdin_.sgml)
include(_IO_2_1_stdout_.sgml)
include(_IO_feof.sgml)
include(_IO_getc.sgml)
include(_IO_putc.sgml)
include(_IO_puts.sgml)
include(__assert_fail.sgml)
include(__bzero.sgml)
include(__ctype_b.sgml)
include(__ctype_get_mb_cur_max.sgml)
include(__ctype_tolower.sgml)
include(__ctype_toupper.sgml)
include(__cxa_atexit.sgml)
include(__daylight.sgml)
include(__dcgettext.sgml)
include(__environ.sgml)
include(__errno_location.sgml)
include(__fpending.sgml)
include(__fxstat.sgml)
include(__fxstat64.sgml)
include(__getpagesize.sgml)
include(__getpgid.sgml)
include(__libc_current_sigrtmax.sgml)
include(__libc_current_sigrtmin.sgml)
include(__libc_start_main.sgml)
include(__lxstat.sgml)
include(__lxstat64.sgml)
include(__mbrlen.sgml)
include(__mempcpy.sgml)
include(__rawmemchr.sgml)
include(__secure_getenv.sgml)
include(__sigpause.sgml)
include(__sigsetjmp.sgml)
include(__stpcpy.sgml)
include(__strdup.sgml)
include(__strtod_internal.sgml)
include(__strtof_internal.sgml)
include(__strtok_r.sgml)
include(__strtol_internal.sgml)
include(__strtold_internal.sgml)
include(__strtoll_internal.sgml)
include(__strtoul_internal.sgml)
include(__strtoull_internal.sgml)
include(__sysconf.sgml)
include(__sysv_signal.sgml)
include(__timezone.sgml)
include(__tzname.sgml)
include(__wcstod_internal.sgml)
include(__wcstof_internal.sgml)
include(__wcstol_internal.sgml)
include(__wcstold_internal.sgml)
include(__wcstoll_internal.sgml)
include(__wcstoul_internal.sgml)
include(__wcstoull_internal.sgml)
include(__xmknod.sgml)
include(__xstat.sgml)
include(__xstat64.sgml)
include(_environ.sgml)
include(_nl_msg_cat_cntr.sgml)
include(_obstack_begin.sgml)
include(_obstack_newchunk.sgml)
include(_sys_errlist.sgml)
include(_sys_siglist.sgml)
include(acct.sgml)
include(adjtime.sgml)
include(adjtimex.sgml)
include(alphasort.sgml)
include(alphasort64.sgml)
include(bindresvport.sgml)
include(bindtextdomain.sgml)
include(cfmakeraw.sgml)
include(cfsetspeed.sgml)
include(daemon.sgml)
include(dcgettext.sgml)
include(err.sgml)
include(error.sgml)
include(errx.sgml)
include(flock.sgml)
include(fstatfs.sgml)
include(fwprintf.sgml)
include(gethostbyname.sgml)
include(gethostbyname_r.sgml)
include(getloadavg.sgml)
include(getopt.sgml)
include(getopt_long.sgml)
include(getopt_long_only.sgml)
include(getprotobyname.sgml)
include(getprotoent.sgml)
include(getservbyname.sgml)
include(getservent.sgml)
include(gettext.sgml)
include(getutent.sgml)
include(getutent_r.sgml)
include(glob64.sgml)
include(globfree64.sgml)
include(initgroups.sgml)
include(isblank.sgml)
include(iswblank.sgml)
include(iswctype.sgml)
include(kill.sgml)
include(mbsnrtowcs.sgml)
include(memmem.sgml)
include(memrchr.sgml)
include(obstack_free.sgml)
include(opterr.sgml)
include(optind.sgml)
include(optopt.sgml)
include(psignal.sgml)
include(random_r.sgml)
include(setbuffer.sgml)
include(setegid.sgml)
include(setenv.sgml)
include(seteuid.sgml)
include(setgroups.sgml)
include(sethostid.sgml)
include(sethostname.sgml)
include(setmntent.sgml)
include(setutent.sgml)
include(sigandset.sgml)
include(sigblock.sgml)
include(siggetmask.sgml)
include(sigisemptyset.sgml)
include(sigorset.sgml)
include(sigreturn.sgml)
include(statfs.sgml)
include(stime.sgml)
include(stpcpy.sgml)
include(stpncpy.sgml)
include(strcasestr.sgml)
include(strerror_r.sgml)
include(strfry.sgml)
include(strndup.sgml)
include(strnlen.sgml)
include(strsep.sgml)
include(strsignal.sgml)
include(strtok_r.sgml)
include(strtoq.sgml)
include(strtouq.sgml)
include(strverscmp.sgml)
include(system.sgml)
include(textdomain.sgml)
include(unlink.sgml)
include(unsetenv.sgml)
include(vasprintf.sgml)
include(vdprintf.sgml)
include(verrx.sgml)
include(vsyslog.sgml)
include(wait4.sgml)
include(warn.sgml)
include(warnx.sgml)
include(wcpcpy.sgml)
include(wcpncpy.sgml)
include(wcscasecmp.sgml)
include(wcsdup.sgml)
include(wcsncasecmp.sgml)
include(wcsnlen.sgml)
include(wcsnrtombs.sgml)
include(wcstoq.sgml)
include(wcstouq.sgml)
</SECT1>
<!-- End of text generated from database -->
<!--    by $Header: /cvsroot/lsb/spec/mklibspec,v 1.34 2002/04/12 20:12:28 anderson Exp 0 -->
