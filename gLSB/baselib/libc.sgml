<!-- Start of text generated from database -->
<!-- generated from the LSB specification database -->
<!--    by $Header: /cvsroot/lsb/spec/mklibspec,v 1.21 2001/04/25 23:58:49 anderson Exp 0 -->
<!--    at Thu May  3 22:43:53 2001 -->
<SECT1 ID=libc>
<TITLE>libc</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=2>
<TBODY>
<ROW>
<ENTRY>Library:</ENTRY>
<ENTRY>libc</ENTRY>
</ROW>
<ROW>
<ENTRY>Runtime Path:</ENTRY>
<ENTRY>libc.so.6</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>
The behaviour of the interfaces in this library is specified by the following Standards.<SIMPLELIST COLUMNS=1>
<MEMBER>
ISO/IEC 9899: 1999, Programming Languages --C<FOOTNOTE ID="std-131-25">
<PARA>
ISO/IEC 9899: 1999, Programming Languages --C</PARA>
</FOOTNOTE>
</MEMBER>
<MEMBER>
Large File Support<FOOTNOTE ID="std-131-35">
<PARA>
Large File Support</PARA>
</FOOTNOTE>
</MEMBER>
<MEMBER>
Linux Standard Base<FOOTNOTE ID="std-131-10">
<PARA>
Linux Standard Base</PARA>
</FOOTNOTE>
</MEMBER>
<MEMBER>
IEEE Std POSIX.1-1996 [ISO/IEC 9945-1:1996]<FOOTNOTE ID="std-131-3">
<PARA>
IEEE Std POSIX.1-1996 [ISO/IEC 9945-1:1996]</PARA>
</FOOTNOTE>
</MEMBER>
<MEMBER>
CAE Specification, February 1997, Networking Services (XNS), Issue 5
(ISBN: 1-85912-165-9, C523)<FOOTNOTE ID="std-131-15">
<PARA>
CAE Specification, February 1997, Networking Services (XNS), Issue 5
(ISBN: 1-85912-165-9, C523)</PARA>
</FOOTNOTE>
</MEMBER>
<MEMBER>
CAE Specification, January 1997, System Interfaces and Headers (XSH),
Issue 5 (ISBN: 1-85912-181-0, C606)<FOOTNOTE ID="std-131-5">
<PARA>
CAE Specification, January 1997, System Interfaces and Headers (XSH),
Issue 5 (ISBN: 1-85912-181-0, C606)</PARA>
</FOOTNOTE>
</MEMBER>
</SIMPLELIST>
</PARA>
<SECT2>
<TITLE>System Calls</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>__fxstat(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>fchown(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getwd(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>putmsg(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>setrlimit(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>__getpgid(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>fcntl(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>initgroups(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>pwrite(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>setsid(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>__lxstat(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>fdatasync(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>ioctl(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>read(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>setuid(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>__xmknod(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>fdetach(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>kill(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>readdir(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>sleep(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>__xstat(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>flock(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>killpg(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>readlink(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>statfs(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY></ROW>
<ROW><ENTRY>access(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>fork(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>lchown(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>readv(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>statvfs(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>acct(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>fstatfs(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>link(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>rename(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>stime(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY></ROW>
<ROW><ENTRY>alarm(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>fsync(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>lockf(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>rmdir(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>symlink(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>brk(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>ftime(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>lseek(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>sbrk(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>sync(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>chdir(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>ftruncate(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>mkdir(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>sched_get_priority_max(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>sysconf(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>chmod(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getcontext(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>mkfifo(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>sched_get_priority_min(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>time(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>chown(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getegid(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>mlock(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>sched_getparam(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>times(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>chroot(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>geteuid(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>mlockall(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>sched_getscheduler(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>truncate(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>clock(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getgid(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>mmap(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>sched_rr_get_interval(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>ulimit(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>close(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getgroups(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>mprotect(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>sched_setparam(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>umask(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>closedir(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getitimer(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>msync(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>sched_setscheduler(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>uname(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>creat(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getloadavg<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>munlock(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>sched_yield(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>unlink(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>dup(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getmsg(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>munlockall(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>select(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY>utime(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>dup2(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getpagesize(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>munmap(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>setcontext<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>utimes(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>execl(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getpgid(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>nanosleep(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>setegid(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>vfork(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>execle(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getpgrp(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>nice(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>seteuid(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>wait(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>execlp(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getpid(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>open(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>setgid(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>wait3(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>execv(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getppid(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>opendir(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>setitimer(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>wait4(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY></ROW>
<ROW><ENTRY>execve(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getpriority(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>pathconf(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>setpgid(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>waitid(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>execvp(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getrlimit(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>pause(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>setpgrp(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>waitpid(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>exit(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getrusage(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>pipe(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>setpriority(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>write(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>fchdir(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getsid(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>poll(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>setregid(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>writev(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>fchmod(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getuid(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>pread(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>setreuid(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>Data Symbols</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>errno<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY></ENTRY><ENTRY></ENTRY><ENTRY></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>Standard I/O</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>_IO_feof(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>fgetpos(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>fstatvfs(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>putc_unlocked(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>sprintf(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>_IO_getc(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>fgets(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>ftell(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>putchar(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>sscanf(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>_IO_putc(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>fileno(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>ftello(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>putchar_unlocked(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>telldir(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>_IO_puts(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>flockfile(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>fwrite(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>puts(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>tempnam(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>alphasort(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>fopen(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getc(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>putw(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>ungetc(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>clearerr(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>fprintf(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getc_unlocked(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>remove(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>vasprintf(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY></ROW>
<ROW><ENTRY>ctermid(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>fputc(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getchar(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>rewind(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>vdprintf(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY></ROW>
<ROW><ENTRY>fclose(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>fputs(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getchar_unlocked(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>rewinddir(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>vfprintf(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>fdopen(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>fread(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>gets(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>scanf(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>vprintf(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>feof(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>freopen(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getw(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>seekdir(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>vsnprintf(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>ferror(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>fscanf(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>pclose(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>setbuf(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>vsprintf(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>fflush(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>fseek(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>popen(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>setbuffer(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>wprintf<FOOTNOTEREF LINKEND="std-131-25"></ENTRY></ROW>
<ROW><ENTRY>fflush_unlocked(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>fseeko(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>printf(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>setvbuf(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>wscanf<FOOTNOTEREF LINKEND="std-131-25"></ENTRY></ROW>
<ROW><ENTRY>fgetc(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>fsetpos(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>putc(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>snprintf(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>Data Symbols</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>_IO_2_1_stderr_<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>_IO_2_1_stdout_<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>stdin<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>_IO_2_1_stdin_<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>stderr<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>stdout<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>Signal Handling</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>__libc_current_sigrtmax(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>sigaction(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>siggetmask(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>sigorset(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>sigstack(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>__libc_current_sigrtmin(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>sigaddset(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>sighold(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>sigpause(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>sigsuspend(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>__sigpause(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>sigaltstack(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>sigignore(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>sigpending(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>sigtimedwait(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>__sigsetjmp(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>sigandset(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>siginterrupt(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>sigprocmask(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>sigwait(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>__sysv_signal(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>sigblock(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>sigisemptyset(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>sigqueue(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>sigwaitinfo(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>bsd_signal(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>sigdelset(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>sigismember(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>sigrelse(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>psignal(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>sigemptyset(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>siglongjmp(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>sigreturn(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>raise(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>sigfillset(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>signal(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>sigset(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>Data Symbols</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>_sys_siglist<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY></ENTRY><ENTRY></ENTRY><ENTRY></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>Standard Library</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>_Exit(GLIBC_2.1.1)<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY>div(GLIBC_2.1.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>globfree(GLIBC_2.1.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>llabs(GLIBC_2.1.1)<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY>sethostname(GLIBC_2.1.1)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY></ROW>
<ROW><ENTRY>__assert_fail(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>drand48(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>globfree64(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>lldiv(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY>setstate(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>__bzero(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>ecvt(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>grantpt(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>longjmp(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>srand(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>__cxa_atexit(GLIBC_2.1.3)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>erand48(GLIBC_2.1.3)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>hcreate(GLIBC_2.1.3)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>lrand48(GLIBC_2.1.3)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>srand48(GLIBC_2.1.3)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>__errno_location(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>err(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>hdestroy(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>lsearch(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>srandom(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>__fpending(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>error(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>hsearch(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>makecontext(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>strtod(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>__secure_getenv(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>errx(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>htonl(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY>malloc(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>strtol(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>__sysconf<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>fcvt()<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>htons()<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY>memmem()<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>strtoul()<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>_exit(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>fmtmsg(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>imaxabs<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY>mkstemp(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>swapcontext(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>_longjmp(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>fnmatch(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>imaxdiv<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY>mktemp(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>syslog(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>_setjmp(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>fpathconf(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>inet_addr(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY>mrand48(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>system(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>a64l(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>free(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>inet_aton(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY>nftw(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>textdomain(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY></ROW>
<ROW><ENTRY>abort(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>ftrylockfile(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>inet_ntoa(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY>nrand48(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>tfind(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>abs(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>ftw(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>initstate(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>ntohl(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY>tmpfile(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>atexit(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>funlockfile(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>insque(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>ntohs(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY>tmpnam(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>atof(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>gcvt(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>isatty(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>openlog(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>tsearch(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>atoi(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getcwd(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>isblank(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY>perror(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>ttyname(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>atol(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getdate(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>isinf(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY>ptsname(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>ttyname_r(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>basename(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getenv(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>isinfl(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY>putenv(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>twalk(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>bindtextdomain(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>getlogin(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>isnan(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY>qsort(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>unlockpt(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>bsearch(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getopt(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>isnanf(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY>rand(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>usleep(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>calloc(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getopt_long(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>isnanl(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY>random(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>verrx(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY></ROW>
<ROW><ENTRY>closelog(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getopt_long_only(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>jrand48(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>realloc(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>warn(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY></ROW>
<ROW><ENTRY>confstr(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getsubopt(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>l64a(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>realpath(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>warnx(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY></ROW>
<ROW><ENTRY>cuserid(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>gettimeofday(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>labs(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>remque(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>wordexp(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>daemon(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>glob(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>ldiv(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>seed48(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>wordfree(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>dirname(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>glob64(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>lfind(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>sethostid(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>Data Symbols</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>__environ<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>_sys_errlist<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>getdate_err<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>opterr<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>optopt<FOOTNOTEREF LINKEND="std-131-10"></ENTRY></ROW>
<ROW><ENTRY>_environ<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>environ<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>optarg<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>optind<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>Localization Functions</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>__dcgettext(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>catgets(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>dcgettext(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>iconv(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>nl_langinfo(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>catclose(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>catopen(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>gettext(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>localeconv(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>setlocale(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>Data Symbols</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>_nl_msg_cat_cntr<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY></ENTRY><ENTRY></ENTRY><ENTRY></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>Socket Interface</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>_h_errno(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>gethostid(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>listen(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY>sendmsg(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY>socketpair(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY></ROW>
<ROW><ENTRY>accept(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY>gethostname(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY>recv(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY>sendto(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>bind(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY>getpeername(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY>recvfrom(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY>setsockopt(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>bindresvport(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>getsockname(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY>recvmsg(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY>shutdown(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>connect(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY>getsockopt(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY>send(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY>socket(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>Data Symbols</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>h_errno<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY></ENTRY><ENTRY></ENTRY><ENTRY></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>Wide Characters</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>__mbrlen(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>mbrlen(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>vwscanf<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY>wcsnlen(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>wcstoumax(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-25"></ENTRY></ROW>
<ROW><ENTRY>__wcstod_internal(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>mbrtowc(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>wcpcpy(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>wcsnrtombs(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>wcstouq(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY></ROW>
<ROW><ENTRY>__wcstof_internal(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>mbsinit(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>wcpncpy(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>wcspbrk(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY>wcswcs(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>__wcstol_internal(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>mbsnrtowcs(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>wcrtomb(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>wcsrchr(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>wcswidth(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>__wcstold_internal(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>mbsrtowcs(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>wcscasecmp(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>wcsrtombs(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>wcsxfrm(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>__wcstoll_internal(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>mbstowcs(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>wcscat(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>wcsspn(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>wctob(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>__wcstoul_internal(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>mbtowc(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>wcschr(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>wcsstr(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>wctomb(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>__wcstoull_internal(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>putwc<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY>wcscmp(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>wcstod(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>wctrans(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>btowc(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>putwchar<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY>wcscoll(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>wcstof(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY>wctype(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>fgetws<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY>swprintf<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>wcscpy()<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>wcstoimax()<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY>wcwidth()<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>fputwc<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY>swscanf<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY>wcscspn()<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>wcstok()<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>wmemchr()<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>fputws<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY>towctrans()<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>wcsdup()<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>wcstol()<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>wmemcmp()<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>fwide<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY>towlower()<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY>wcsftime<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY>wcstold()<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY>wmemcpy()<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>fwprintf<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY>towupper()<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>wcslen()<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>wcstoll()<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY>wmemmove()<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>fwscanf<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY>ungetwc<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY>wcsncasecmp()<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>wcstombs()<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>wmemset()<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>iconv_close(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>vfwprintf<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY>wcsncat(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>wcstoq(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>iconv_open(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>vswscanf<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY>wcsncmp(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>wcstoul(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>mblen(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>vwprintf<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY>wcsncpy(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>wcstoull(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>String Functions</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>__rawmemchr(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>ffs(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>strcat(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>strncat(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>strtok(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>__stpcpy(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>index(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>strchr(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>strncmp(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>strtok_r(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY></ROW>
<ROW><ENTRY>__strdup(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>memccpy(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>strcmp(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>strncpy(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>strtold(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-25"></ENTRY></ROW>
<ROW><ENTRY>__strtod_internal(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>memchr(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>strcoll(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>strndup(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>strtoll(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-25"></ENTRY></ROW>
<ROW><ENTRY>__strtof_internal(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>memcmp(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>strcpy(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>strnlen(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>strtoq(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY></ROW>
<ROW><ENTRY>__strtok_r(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>memcpy(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>strcspn(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>strpbrk(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>strtoull(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-25"></ENTRY></ROW>
<ROW><ENTRY>__strtol_internal(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>memmove(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>strdup(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>strptime(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>strtoumax(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-25"></ENTRY></ROW>
<ROW><ENTRY>__strtold_internal(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>memrchr<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>strerror(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>strrchr(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>strtouq(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY></ROW>
<ROW><ENTRY>__strtoll_internal(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>memset(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>strerror_r(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>strsep(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>strverscmp(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY></ROW>
<ROW><ENTRY>__strtoul_internal(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>rindex(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>strfmon(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>strsignal(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>strxfrm(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>__strtoull_internal(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>stpcpy(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>strfry(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>strspn(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>swab(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>bcmp(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>stpncpy(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>strftime(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>strstr(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>bcopy(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>strcasecmp(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>strlen(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>strtof(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>bzero(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>strcasestr(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>strncasecmp(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>strtoimax(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-25"></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>IPC Functions</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>ftok(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>msgrcv(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>semget(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>shmctl(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>msgctl(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>msgsnd(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>semop(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>shmdt(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>msgget(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>semctl(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>shmat(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>shmget(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>Regular Expressions</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>advance(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>re_exec(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>regerror(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>regfree(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>re_comp(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>regcomp(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>regexec(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>step(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>Data Symbols</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>loc1<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>loc2<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>locs<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>Character Type Functions</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>__ctype_get_mb_cur_max(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>isdigit(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>iswalnum(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>iswlower(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>toascii(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>_tolower(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>isgraph(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>iswalpha(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>iswprint(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>tolower(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>_toupper(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>islower(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>iswblank(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>iswpunct(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>toupper(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>isalnum(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>isprint(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>iswcntrl(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>iswspace(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>isalpha(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>ispunct(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>iswctype(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>iswupper(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>isascii(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>isspace(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>iswdigit(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>iswxdigit(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>iscntrl(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>isupper(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>iswgraph(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>isxdigit(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>Data Symbols</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>__ctype_b<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>__ctype_tolower<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>__ctype_toupper<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>Time Function</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>adjtime(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>ctime(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>gmtime(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>tzname(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>adjtimex(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>daylight(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>localtime(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>tzset(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>asctime(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>difftime(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>mktime(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>ualarm(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>Data Symbols</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>timezone<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY></ENTRY><ENTRY></ENTRY><ENTRY></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>Terminal Interface Functions</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>cfgetispeed(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>cfsetispeed(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>tcdrain(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>tcgetattr(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>tcsendbreak(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>cfgetospeed(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>cfsetospeed(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>tcflow(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>tcgetpgrp(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>tcsetattr(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>cfmakeraw(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>cfsetspeed(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>tcflush(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>tcgetsid(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>tcsetpgrp(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>System Database Interface</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>endhostent(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY>getgrgid(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getprotobynumber(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY>getutxent(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>setnetent(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY></ROW>
<ROW><ENTRY>endnetent(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY>getgrnam(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getprotoent(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>getutxid(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>setprotoent(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY></ROW>
<ROW><ENTRY>endprotoent(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY>gethostbyaddr(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY>getservbyname(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>getutxline(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>setservent(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY></ROW>
<ROW><ENTRY>endservent(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY>gethostbyname(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>getservbyport(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY>pututxline(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>setutent(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY></ROW>
<ROW><ENTRY>endutent(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getnetbyaddr(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY>getservent(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>sethostent(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-15"></ENTRY><ENTRY>setutxent(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY></ROW>
<ROW><ENTRY>endutxent(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getprotobyname(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>getutent(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>setmntent(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>User/Group Management</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>endgrent(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getgrent(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getpwnam(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>setgrent(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>endpwent(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getpwent(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>getpwuid(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY>setpwent(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-5"></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>ELF Magic</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>__mempcpy(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>_obstack_begin(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>_obstack_newchunk(GLIBC_2.0)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>obstack_free<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
<SECT2>
<TITLE>Large File Support</TITLE>
<PARA>
</PARA>
<TABLE>
<TITLE></TITLE>
<TGROUP COLS=5>
<TBODY>
<ROW><ENTRY>__fxstat64(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>fopen64(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-35"></ENTRY><ENTRY>ftello64(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-35"></ENTRY><ENTRY>mkstemp64<FOOTNOTEREF LINKEND="std-131-35"></ENTRY><ENTRY>tmpfile64(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-35"></ENTRY></ROW>
<ROW><ENTRY>__lxstat64(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>freopen64(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-35"></ENTRY><ENTRY>ftruncate64(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-35"></ENTRY><ENTRY>mmap64(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-35"></ENTRY><ENTRY>truncate64(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-35"></ENTRY></ROW>
<ROW><ENTRY>__xstat64(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>fseeko64(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-35"></ENTRY><ENTRY>ftw64(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-35"></ENTRY><ENTRY>nftw64(GLIBC_2.2)<FOOTNOTEREF LINKEND="std-131-35"></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>alphasort64(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-10"></ENTRY><ENTRY>fsetpos64(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-35"></ENTRY><ENTRY>getrlimit64(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-35"></ENTRY><ENTRY>open64(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-35"></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>creat64(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-35"></ENTRY><ENTRY>fstatfs64(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-35"></ENTRY><ENTRY>lockf64(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-35"></ENTRY><ENTRY>pwrite64(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-35"></ENTRY><ENTRY></ENTRY></ROW>
<ROW><ENTRY>fgetpos64(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-35"></ENTRY><ENTRY>fstatvfs64(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-35"></ENTRY><ENTRY>lseek64(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-35"></ENTRY><ENTRY>readdir64(GLIBC_2.1)<FOOTNOTEREF LINKEND="std-131-35"></ENTRY><ENTRY></ENTRY></ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECT2>
</SECT1>
<SECT1 ID=libc-ddefs>
<TITLE> Data Definitions for libc</TITLE>
<PARA>
</PARA>
<SECT2>
<TITLE>assert.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 11 Default HeaderGroup for assert.h
 */

void __assert_fail(char *, char *, unsigned int, char *);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>ctype.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 14 Default HeaderGroup for ctype.h
 */

unsigned short *__ctype_b;
__int32_t *__ctype_tolower;
__int32_t *__ctype_toupper;
int _tolower(int);
int _toupper(int);
int isalnum(int);
int isalpha(int);
int isascii(int);
int iscntrl(int);
int isdigit(int);
int isgraph(int);
int islower(int);
int isprint(int);
int ispunct(int);
int isspace(int);
int isupper(int);
int isxdigit(int);
int toascii(int);
int tolower(int);
int toupper(int);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>dirent.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 15 Default HeaderGroup for dirent.h
 */
typedef struct __dirstream DIR;


void rewinddir(DIR *);
void seekdir(DIR *, long);
long telldir(DIR *);
int closedir(DIR *);
DIR *opendir(char *);
struct dirent *readdir(DIR *);
struct dirent64 *readdir64(DIR *);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>fcntl.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 18 Default HeaderGroup for fcntl.h
 */

int creat(char *, __mode_t);
int creat64(char *, __mode_t);
int fcntl(int, int, ...);
int open(char *, int, ...);
int open64(char *, int, ...);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>fnmatch.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 20 Default HeaderGroup for fnmatch.h
 */

int fnmatch(char *, char *, int);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>ftw.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 21 Default HeaderGroup for ftw.h
 */
typedef int (*__ftw_func_t) (char *__filename, struct stat * __status,
			     int __flag)
;

typedef int (*__ftw64_func_t) (char *__filename, struct stat64 * __status,
			       int __flag)
;

typedef int (*__nftw_func_t) (char *__filename, struct stat * __status,
			      int __flag, struct FTW * __info)
;

typedef int (*__nftw64_func_t) (char *__filename, struct stat64 * __status,
				int __flag, struct FTW * __info)
;


int ftw(char *, __ftw_func_t, int);
int ftw64(char *, __ftw64_func_t, int);
int nftw(char *, __nftw_func_t, int, int);
int nftw64(char *, __nftw64_func_t, int, int);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>glob.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 3 Default HeaderGroup for glob.h
 */
typedef struct {
    __size_t gl_pathc;
    char **gl_pathv;
    __size_t gl_offs;
    int gl_flags;
    void (*gl_closedir) ();
    struct dirent64 *(*gl_readdir) ();
    void *(*gl_opendir) ();
    int (*gl_lstat) ();
    int (*gl_stat) ();
} glob_t;

typedef struct {
    __size_t gl_pathc;
    char **gl_pathv;
    __size_t gl_offs;
    int gl_flags;
    void (*gl_closedir) ();
    struct dirent64 *(*gl_readdir) ();
    void *(*gl_opendir) ();
    int (*gl_lstat) ();
    int (*gl_stat) ();
} glob64_t;


int glob(char *, int, int, glob_t *);
int glob64(char *, int, int, glob64_t *);
void globfree(glob_t *);
void globfree64(glob64_t *);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>grp.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 4 Default HeaderGroup for grp.h
 */
struct group {
    char *gr_name;
    char *gr_passwd;
    __gid_t gr_gid;
    char **gr_mem;
};


void endgrent(void);
struct group *getgrent(void);
struct group *getgrgid(__gid_t);
struct group *getgrnam(char *);
void setgrent(void);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>iconv.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 22 Default HeaderGroup for iconv.h
 */
typedef void *iconv_t;


size_t iconv(iconv_t, char **, size_t *, char **, size_t *);
int iconv_close(iconv_t);
iconv_t iconv_open(char *, char *);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>inttypes.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 23 Default HeaderGroup for inttypes.h
 */
typedef lldiv_t imaxdiv_t;

typedef long long intmax_t;

typedef unsigned long long uintmax_t;


intmax_t strtoimax(char *, char **, int);
uintmax_t strtoumax(char *, char **, int);
intmax_t wcstoimax(wchar_t *, wchar_t * *, int);
uintmax_t wcstoumax(wchar_t *, wchar_t * *, int);
intmax_t imaxabs(intmax_t);
imaxdiv_t imaxdiv(intmax_t, intmax_t);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>langinfo.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 25 Default HeaderGroup for langinfo.h
 */

char *nl_langinfo(nl_item);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>locale.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 27 Default HeaderGroup for locale.h
 */
struct lconv {
    char *decimal_point;
    char *thousands_sep;
    char *grouping;
    char *int_curr_symbol;
    char *currency_symbol;
    char *mon_decimal_point;
    char *mon_thousands_sep;
    char *mon_grouping;
    char *positive_sign;
    char *negative_sign;
    char int_frac_digits;
    char frac_digits;
    char p_cs_precedes;
    char p_sep_by_space;
    char n_cs_precedes;
    char n_sep_by_space;
    char p_sign_posn;
    char n_sign_posn;
};


struct lconv *localeconv(void);
char *setlocale(int, char *);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>monetary.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 30 Default HeaderGroup for monetary.h
 */

ssize_t strfmon(char *, size_t, char *, ...);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>nl_types.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 32 Default HeaderGroup for nl_types.h
 */
typedef void *nl_catd;

typedef int nl_item;


int catclose(nl_catd);
char *catgets(nl_catd, int, int, char *);
nl_catd catopen(char *, int);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>pwd.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 34 Default HeaderGroup for pwd.h
 */
struct passwd {
    char *pw_name;
    char *pw_passwd;
    __uid_t pw_uid;
    __gid_t pw_gid;
    char *pw_gecos;
    char *pw_dir;
    char *pw_shell;
};


void endpwent(void);
struct passwd *getpwent(void);
struct passwd *getpwnam(char *);
struct passwd *getpwuid(__uid_t);
void setpwent(void);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>regex.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 35 Default HeaderGroup for regex.h
 */
typedef unsigned long reg_syntax_t;

typedef struct re_pattern_buffer {
    unsigned char *buffer;
    unsigned long allocated;
    unsigned long used;
    reg_syntax_t syntax;
    char *fastmap;
    char *translate;
    size_t re_nsub;
    unsigned int can_be_null;
    unsigned int regs_allocated;
    unsigned int fastmap_accurate;
    unsigned int no_sub;
    unsigned int not_bol;
    unsigned int not_eol;
    unsigned int newline_anchor;
} regex_t;

typedef int regoff_t;

typedef struct {
    regoff_t rm_so;
    regoff_t rm_eo;
} regmatch_t;


int regcomp(regex_t *, char *, int);
size_t regerror(int, regex_t *, char *, size_t);
int regexec(regex_t *, char *, size_t, regmatch_t, int);
void regfree(regex_t *);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>regexp.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 36 Default HeaderGroup for regexp.h
 */

char *loc1;
char *loc2;
char *locs;
int advance(char *, char *);
int step(char *, char *);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>sched.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 37 Default HeaderGroup for sched.h
 */

int sched_get_priority_max(int);
int sched_get_priority_min(int);
int sched_getparam(__pid_t, struct sched_param *);
int sched_getscheduler(__pid_t);
int sched_rr_get_interval(__pid_t, struct timespec *);
int sched_setparam(__pid_t, struct sched_param *);
int sched_setscheduler(__pid_t, int, struct sched_param *);
int sched_yield(void);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>search.h</TITLE>
<PARA>
</PARA>
<SCREEN>
typedef enum {
    FIND,
    ENTER
} ACTION;

typedef enum {
    preorder,
    postorder,
    endorder,
    leaf
} VISIT;

/*
 * 38 Default HeaderGroup for search.h
 */
typedef struct entry {
    char *key;
    void *data;
} ENTRY;

typedef void (*__action_fn_t) (void *__nodep, VISIT __value, int __level)
;


int hcreate(size_t);
ENTRY *hsearch(ENTRY, ACTION);
void insque(void *, void *);
void *lfind(void *, void *, size_t *, size_t, __compar_fn_t);
void *lsearch(void *, void *, size_t *, size_t, __compar_fn_t);
void remque(void *);
void hdestroy(void);
void *tfind(void *, void **, __compar_fn_t);
void *tsearch(void *, void **, __compar_fn_t);
void twalk(void *, __action_fn_t);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>setjmp.h</TITLE>
<PARA>
</PARA>
<SCREEN>
typedef int __jmp_buf;

/*
 * 40 Default HeaderGroup for setjmp.h
 */
typedef struct __jmp_buf_tag {
    __jmp_buf __jmpbuf;
    int __mask_was_saved;
    __sigset_t __saved_mask;
} jmp_buf;

typedef jmp_buf sigjmp_buf;


int __sigsetjmp(jmp_buf, int);
void longjmp(jmp_buf, int);
void siglongjmp(sigjmp_buf, int);
void _longjmp(jmp_buf, int);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>signal.h</TITLE>
<PARA>
</PARA>
<SCREEN>
typedef union sigval {
    int sival_int;
    void *sival_ptr;
} sigval_t;

/*
 * 41 Default HeaderGroup for signal.h
 */
typedef void (*__sighandler_t) ()
;

struct sigevent {
    sigval_t sigev_value;
    int sigev_signo;
    int sigev_notify;
};

typedef struct {
    unsigned long __val[1];
} __sigset_t;

typedef __sigset_t sigset_t;

struct sigaction;

typedef struct {
    int si_band;
    int si_fd;
    struct _sifields;
    struct _sigpoll;
} siginfo_t;

struct sigaltstack {
    void *ss_sp;
    int ss_flags;
    size_t ss_size;
};

struct sigstack {
    void *ss_sp;
    int ss_onstack;
};


int __libc_current_sigrtmax(void);
int __libc_current_sigrtmin(void);
int __sigpause(int, int);
__sighandler_t __sysv_signal(int, __sighandler_t);
int killpg(__pid_t, int);
int raise(int);
int sigaddset(sigset_t *, int);
int sigdelset(sigset_t *, int);
int sigemptyset(sigset_t *);
int sigfillset(sigset_t *);
int sighold(int);
int sigignore(int);
int siginterrupt(int, int);
int sigismember(sigset_t *, int);
int sigpending(sigset_t *);
int sigrelse(int);
__sighandler_t sigset(int, __sighandler_t);
int sigstack(struct sigstack *, struct sigstack *);
int sigaction(int, struct sigaction *, struct sigaction *);
int sigwait(sigset_t *, int *);
int kill(__pid_t, int);
int sigaltstack(struct sigaltstack *, struct sigaltstack *);
__sighandler_t signal(int, __sighandler_t);
int sigprocmask(int, sigset_t *, sigset_t *);
int sigsuspend(sigset_t *);
int sigqueue(__pid_t, int, union sigval);
int sigwaitinfo(sigset_t *, siginfo_t *);
int sigtimedwait(sigset_t *, siginfo_t *, struct timespec *);
__sighandler_t bsd_signal(int, __sighandler_t);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>stdio.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 42 Default HeaderGroup for stdio.h
 */
typedef struct _IO_FILE FILE;

typedef __off_t fpos_t;

typedef __off64_t fpos64_t;


void clearerr(FILE *);
int fclose(FILE *);
FILE *fdopen(int, char *);
int fileno(FILE *);
FILE *fopen(char *, char *);
int fprintf(FILE *, char *, ...);
int fputc(int, FILE *);
FILE *freopen(char *, char *, FILE *);
FILE *freopen64(char *, char *, FILE *);
int fscanf(FILE *, char *, ...);
int fseek(FILE *, long, int);
int fseeko(FILE *, __off_t, int);
int fseeko64(FILE *, __off64_t, int);
__off_t ftello(FILE *);
__off64_t ftello64(FILE *);
int getchar(void);
int getchar_unlocked(void);
int getw(FILE *);
int pclose(FILE *);
void perror(char *);
FILE *popen(char *, char *);
int printf(char *, ...);
int putc_unlocked(int, FILE *);
int putchar(int);
int putchar_unlocked(int);
int putw(int, FILE *);
int remove(char *);
void rewind(FILE *);
int scanf(char *, ...);
void setbuf(FILE *, char *);
int sprintf(char *, char *, ...);
int sscanf(char *, char *, ...);
FILE *stderr;
FILE *stdin;
FILE *stdout;
char *tempnam(char *, char *);
FILE *tmpfile64(void);
FILE *tmpfile(void);
char *tmpnam(char *);
int vfprintf(FILE *, char *, __gnuc_va_list);
int vprintf(char *, __gnuc_va_list);
int feof(FILE *);
int ferror(FILE *);
int fflush(FILE *);
int fgetc(FILE *);
int fgetpos(FILE *, fpos_t *);
char *fgets(char *, int, FILE *);
int fputs(char *, FILE *);
size_t fread(void *, size_t, size_t, FILE *);
int fsetpos(FILE *, fpos_t *);
long ftell(FILE *);
size_t fwrite(void *, size_t, size_t, FILE *);
int getc(FILE *);
char *gets(char *);
int putc(int, FILE *);
int puts(char *);
int setvbuf(FILE *, char *, int, size_t);
int snprintf(char *, size_t, char *, ...);
int ungetc(int, FILE *);
int vsnprintf(char *, size_t, char *, __gnuc_va_list);
int vsprintf(char *, char *, __gnuc_va_list);
void flockfile(FILE *);
int fgetpos64(FILE *, fpos64_t *);
FILE *fopen64(char *, char *);
int fsetpos64(FILE *, fpos64_t *);
int ftrylockfile(FILE *);
void funlockfile(FILE *);
int getc_unlocked(FILE *);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>stdlib.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 43 Default HeaderGroup for stdlib.h
 */
typedef struct {
    long quot;
    long rem;
} lldiv_t;

typedef struct {
    int quot;
    int rem;
} div_t;

typedef struct {
    long quot;
    long rem;
} ldiv_t;

typedef int (*__compar_fn_t) ()
;


char *__secure_getenv(char *);
double __strtod_internal(char *, char **, int);
float __strtof_internal(char *, char **, int);
long __strtol_internal(char *, char **, int, int);
long double __strtold_internal(char *, char **, int);
long long __strtoll_internal(char *, char **, int, int);
unsigned long __strtoul_internal(char *, char **, int, int);
unsigned long long __strtoull_internal(char *, char **, int, int);
long a64l(char *);
void abort(void);
int abs(int);
int atexit(void);
double atof(char *);
int atoi(char *);
long atol(char *);
void *bsearch(void *, void *, size_t, size_t, __compar_fn_t);
div_t div(int, int);
double drand48(void);
char *ecvt(double, int, int *, int *);
double erand48(unsigned short);
void exit(int);
char *fcvt(double, int, int *, int *);
char *gcvt(double, int, char *);
char *getenv(char *);
int getsubopt(char **, char **, char **);
int grantpt(int);
long jrand48(unsigned short);
char *l64a(long);
long labs(long);
ldiv_t ldiv(long, long);
long long llabs(long long);
lldiv_t lldiv(long long, long long);
long lrand48(void);
int mblen(char *, size_t);
size_t mbstowcs(wchar_t *, char *, size_t);
int mbtowc(wchar_t *, char *, size_t);
int mkstemp(char *);
char *mktemp(char *);
long mrand48(void);
long nrand48(unsigned short);
char *ptsname(int);
int putenv(char *);
void qsort(void *, size_t, size_t, __compar_fn_t);
int rand(void);
unsigned short *seed48(unsigned short);
void srand48(long);
int unlockpt(int);
size_t wcstombs(char *, wchar_t *, size_t);
int wctomb(char *, wchar_t);
int system(char *);
void setkey(char *);
void *calloc(size_t, size_t);
void free(void *);
void *initstate(unsigned int, void *, size_t);
void *malloc(size_t);
int32_t random(void);
void *realloc(void *, size_t);
void *setstate(void *);
void srand(unsigned int);
void srandom(unsigned int);
double strtod(char *, char **);
float strtof(char *, char **);
long strtol(char *, char **, int);
long double strtold(char *, char **);
long long strtoll(char *, char **, int);
unsigned long strtoul(char *, char **, int);
unsigned long long strtoull(char *, char **, int);
void _Exit(int);
size_t __ctype_get_mb_cur_max(void);
char *realpath(char *, char *);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>string.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 44 Default HeaderGroup for string.h
 */

void __bzero(void *, size_t);
char *__strdup(char *);
char *__strtok_r(char *, char *, char **);
void bcopy(void *, void *, size_t);
void *memchr(void *, int, size_t);
int memcmp(void *, void *, size_t);
void *memcpy(void *, void *, size_t);
void *memmove(void *, void *, size_t);
void *memset(void *, int, size_t);
char *strcat(char *, char *);
char *strchr(char *, int);
int strcmp(char *, char *);
int strcoll(char *, char *);
char *strcpy(char *, char *);
size_t strcspn(char *, char *);
char *strerror(int);
size_t strlen(char *);
char *strncat(char *, char *, size_t);
int strncmp(char *, char *, size_t);
char *strncpy(char *, char *, size_t);
char *strpbrk(char *, char *);
char *strrchr(char *, int);
size_t strspn(char *, char *);
char *strstr(char *, char *);
char *strtok(char *, char *);
size_t strxfrm(char *, char *, size_t);
int bcmp(void *, void *, size_t);
void bzero(void *, size_t);
int ffs(int);
char *index(char *, int);
void *memccpy(void *, void *, int, size_t);
char *rindex(char *, int);
int strcasecmp(char *, char *);
char *strdup(char *);
int strncasecmp(char *, char *, size_t);
char *strtok_r(char *, char *, char **);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>sys/ipc.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 49 Default HeaderGroup for sys/ipc.h
 */

key_t ftok(char *, int);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>sys/mman.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 56 Default HeaderGroup for sys/mman.h
 */

int msync(void *, size_t, int);
int mlock(void *, size_t);
int mlockall(int);
void *mmap(void *, size_t, int, int, int, __off_t);
int mprotect(void *, size_t, int);
int munlock(void *, size_t);
int munlockall(void);
int munmap(void *, size_t);
void *mmap64(void *, size_t, int, int, int, __off64_t);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>sys/msg.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 50 Default HeaderGroup for sys/msg.h
 */

int msgctl(int, int, struct msqid_ds *);
int msgget(key_t, int);
int msgrcv(int, void *, size_t, long, int);
int msgsnd(int, void *, size_t, int);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>sys/resource.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 57 Default HeaderGroup for sys/resource.h
 */

int getpriority(,, int);
int getrlimit64(,, struct rlimit64 *);
int setpriority(,, int, int);
int setrlimit(,, struct rlimit *);
int getrlimit(,, struct rlimit *);
int getrusage(,, struct rusage *);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>sys/sem.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 47 Default HeaderGroup for sys/sem.h
 */
struct sembuf {
    short sem_num;
    short sem_op;
    short sem_flg;
};


int semctl(int, int, int, ...);
int semget(key_t, int, int);
int semop(int, struct sembuf *, unsigned int);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>sys/shm.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 51 Default HeaderGroup for sys/shm.h
 */

void *shmat(int, void *, int);
int shmctl(int, int, struct shmid_ds *);
int shmdt(void *);
int shmget(key_t, size_t, int);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>sys/socket.h</TITLE>
<PARA>
</PARA>
<SCREEN>
typedef unsigned short sa_family_t;

typedef unsigned int socklen_t;

/*
 * 48 Default HeaderGroup for sys/socket.h
 */
struct sockaddr {
    sa_family_t sa_family;
    char sa_data[1];
};

struct msghdr {
    void *msg_name;
    socklen_t msg_namelen;
    struct iovec *msg_iov;
    size_t msg_iovlen;
    void *msg_control;
    size_t msg_controllen;
    int msg_flags;
};


int bind(int, struct sockaddr *, socklen_t);
int getsockname(int, struct sockaddr *, socklen_t *);
int listen(int, unsigned int);
int setsockopt(int, int, int, void *, socklen_t);
int accept(int, struct sockaddr *, socklen_t *);
int connect(int, struct sockaddr *, socklen_t);
int recv(int, void *, size_t, int);
int recvfrom(int, void *, size_t, int, struct sockaddr *, socklen_t *);
int recvmsg(int, struct msghdr *, int);
int send(int, void *, size_t, int);
int sendmsg(int, struct msghdr *, int);
int sendto(int, void *, size_t, int, struct sockaddr *, socklen_t);
int getpeername(int, struct sockaddr *, socklen_t *);
int getsockopt(int, int, int, void *, socklen_t *);
int shutdown(int, int);
int socket(int, int, int);
int socketpair(int, int, int, int);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>sys/stat.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 52 Default HeaderGroup for sys/stat.h
 */

int __fxstat(int, int, struct stat *);
int __fxstat64(int, int, struct stat64 *);
int __lxstat(int, char *, struct stat *);
int __lxstat64(int, char *, struct stat64 *);
int __xmknod(int, char *, __mode_t, __dev_t *);
int __xstat(int, char *, struct stat *);
int __xstat64(int, char *, struct stat64 *);
int mkfifo(char *, __mode_t);
int chmod(char *, __mode_t);
int fchmod(int, __mode_t);
int mkdir(char *, __mode_t);
__mode_t umask(__mode_t);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>sys/times.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 53 Default HeaderGroup for sys/times.h
 */
struct tms {
    clock_t tms_utime;
    clock_t tms_stime;
    clock_t tms_cutime;
    clock_t tms_cstime;
};


clock_t times(struct tms *);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>sys/utsname.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 54 Default HeaderGroup for sys/utsname.h
 */
struct utsname {
    char sysname[1];
    char nodename[1];
    char release[1];
    char version[1];
    char machine[1];
    char __domainname[1];
};


int uname(struct utsname *);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>sys/wait.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 55 Default HeaderGroup for sys/wait.h
 */
typedef enum {
    P_ALL,
    P_PID,
    P_PGID
} idtype_t;


int waitid(idtype_t, __id_t, siginfo_t *, int);
__pid_t wait(int *);
__pid_t waitpid(__pid_t, int *, int);
__pid_t wait3(int *, int, struct rusage *);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>termios.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 59 Default HeaderGroup for termios.h
 */

cfgetispeed(struct termios *);
cfgetospeed(struct termios *);
int cfsetispeed(struct termios *,);
int cfsetospeed(struct termios *,);
int tcflow(int, int);
int tcflush(int, int);
__pid_t tcgetsid(int);
int tcsendbreak(int, int);
int tcsetattr(int, int, struct termios *);
int tcdrain(int);
int tcgetattr(int, struct termios *);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>time.h</TITLE>
<PARA>
</PARA>
<SCREEN>
typedef long __clock_t;

/*
 * 60 Default HeaderGroup for time.h
 */
struct timespec {
    long tv_sec;
    long tv_nsec;
};

struct tm {
    int tm_sec;
    int tm_min;
    int tm_hour;
    int tm_mday;
    int tm_mon;
    int tm_year;
    int tm_wday;
    int tm_yday;
    int tm_isdst;
    long __tm_gmtoff;
    char *__tm_zone;
};

typedef __clock_t clock_t;

typedef __time_t time_t;


char *asctime(struct tm *);
clock_t clock(void);
char *ctime(time_t *);
double difftime(time_t, time_t);
struct tm *getdate(char *);
int getdate_err;
struct tm *gmtime(time_t *);
struct tm *localtime(time_t *);
time_t mktime(struct tm *);
size_t strftime(char *, size_t, char *, struct tm *);
char *strptime(char *, char *, struct tm *);
time_t time(time_t *);
int nanosleep(struct timespec *, struct timespec *);
int daylight();
long timezone;
char *tzname();
void tzset(void);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>ulimit.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 61 Default HeaderGroup for ulimit.h
 */

long ulimit(int, ...);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>unistd.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 62 Default HeaderGroup for unistd.h
 */
typedef __ssize_t ssize_t;

typedef __pid_t pid_t;

typedef __off_t off_t;


char **__environ;
__pid_t __getpgid(__pid_t);
void _exit(int);
int acct(char *);
unsigned int alarm(unsigned int);
int chown(char *, __uid_t, __gid_t);
int chroot(char *);
size_t confstr(int, char *, size_t);
char *ctermid(char *);
char *cuserid(char *);
int daemon(int, int);
int execl(char *, char *, ...);
int execle(char *, char *, ...);
int execlp(char *, char *, ...);
int execv(char *, char *);
int execvp(char *, char *);
int fdatasync(int);
int ftruncate64(int, __off64_t);
long gethostid(void);
char *getlogin(void);
__pid_t getpgrp(void);
__pid_t getsid(__pid_t);
char *getwd(char *);
int lockf(int, int, __off_t);
int lockf64(int, int, __off64_t);
int nice(int);
int rename(char *, char *);
int sethostid(long);
int sethostname(char *, size_t);
int setpgrp(void);
void swab(void *, void *, ssize_t);
int sync(void);
__pid_t tcgetpgrp(int);
int tcsetpgrp(int, __pid_t);
int truncate(char *, __off_t);
int truncate64(char *, __off64_t);
char *ttyname(int);
unsigned int ualarm(unsigned int, unsigned int);
void usleep(unsigned int);
int close(int);
int fsync(int);
__off_t lseek(int, __off_t, int);
int pause(void);
ssize_t read(int, void *, size_t);
ssize_t write(int, void *, size_t);
char *crypt(char *, char *);
void encrypt(char *, int);
int access(char *, int);
int brk(void *);
int chdir(char *);
int dup(int);
int dup2(int, int);
int execve(char *, char *, char *);
int fchdir(int);
int fchown(int, __uid_t, __gid_t);
__pid_t fork(void);
__gid_t getegid(void);
__uid_t geteuid(void);
__gid_t getgid(void);
int getgroups(int, __gid_t);
int gethostname(char *, size_t);
__pid_t getpgid(__pid_t);
__pid_t getpid(void);
__uid_t getuid(void);
int lchown(char *, __uid_t, __gid_t);
int link(char *, char *);
long pathconf(char *, int);
int pipe(int);
int readlink(char *, char *, size_t);
int rmdir(char *);
void *sbrk(ptrdiff_t);
int setgid(__gid_t);
int setpgid(__pid_t, __pid_t);
int setregid(__gid_t, __gid_t);
int setreuid(__uid_t, __uid_t);
__pid_t setsid(void);
int setuid(__uid_t);
unsigned int sleep(unsigned int);
int symlink(char *, char *);
long sysconf(int);
int unlink(char *);
__pid_t vfork(void);
ssize_t pread(int, void *, size_t, __off_t);
ssize_t pwrite(int, void *, size_t, __off_t);
long fpathconf(int, int);
int ftruncate(int, __off_t);
char *getcwd(char *, size_t);
int getpagesize(void);
__pid_t getppid(void);
int isatty(int);
__off64_t lseek64(int, __off64_t, int);
ssize_t pwrite64(int, void *, size_t, __off64_t);
int ttyname_r(int, char *, size_t);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>utime.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 63 Default HeaderGroup for utime.h
 */
struct utimbuf {
    __time_t actime;
    __time_t modtime;
};


int utime(char *, struct utimbuf *);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>wchar.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 64 Default HeaderGroup for wchar.h
 */
typedef long wchar_t;

typedef unsigned int wint_t;

typedef struct {
    int count;
    wint_t value;
} mbstate_t;


size_t __mbrlen(char *, size_t, mbstate_t *);
double __wcstod_internal(wchar_t *, wchar_t * *, int);
float __wcstof_internal(wchar_t *, wchar_t * *, int);
long __wcstol_internal(wchar_t *, wchar_t * *, int, int);
long double __wcstold_internal(wchar_t *, wchar_t * *, int);
long long __wcstoll_internal(wchar_t *, wchar_t * *, int, int);
unsigned long __wcstoul_internal(wchar_t *, wchar_t * *, int, int);
unsigned long long __wcstoull_internal(wchar_t *, wchar_t * *, int, int);
wchar_t *wcscat(wchar_t *, wchar_t *);
wchar_t *wcschr(wchar_t *, wchar_t);
int wcscmp(wchar_t *, wchar_t *);
int wcscoll(wchar_t *, wchar_t *);
wchar_t *wcscpy(wchar_t *, wchar_t *);
size_t wcscspn(wchar_t *, wchar_t *);
wchar_t *wcsncat(wchar_t *, wchar_t *, size_t);
int wcsncmp(wchar_t *, wchar_t *, size_t);
wchar_t *wcsncpy(wchar_t *, wchar_t *, size_t);
wchar_t *wcspbrk(wchar_t *, wchar_t *);
wchar_t *wcsrchr(wchar_t *, wchar_t);
size_t wcsspn(wchar_t *, wchar_t *);
wchar_t *wcsstr(wchar_t *, wchar_t *);
wchar_t *wcstok(wchar_t *, wchar_t *, wchar_t * *);
int wcswidth(wchar_t *, size_t);
size_t wcsxfrm(wchar_t *, wchar_t *, size_t);
int wctob(wint_t);
int wcwidth(wint_t);
wchar_t *wmemchr(wchar_t *, wchar_t, size_t);
int wmemcmp(wchar_t *, wchar_t *, size_t);
wchar_t *wmemcpy(wchar_t *, wchar_t *, size_t);
wchar_t *wmemmove(wchar_t *, wchar_t *, size_t);
wchar_t *wmemset(wchar_t *, wchar_t, size_t);
size_t mbrlen(char *, size_t, mbstate_t *);
size_t mbrtowc(wchar_t *, char *, size_t, mbstate_t *);
int mbsinit(mbstate_t *);
size_t mbsrtowcs(wchar_t *, char **, size_t, mbstate_t *);
size_t wcrtomb(char *, wchar_t, mbstate_t *);
size_t wcslen(wchar_t *);
size_t wcsrtombs(char *, wchar_t * *, size_t, mbstate_t *);
double wcstod(wchar_t *, wchar_t * *);
long wcstol(wchar_t *, wchar_t * *, int);
unsigned long wcstoul(wchar_t *, wchar_t * *, int);
long long wcstoll(wchar_t *, wchar_t * *, int);
unsigned long long wcstoull(wchar_t *, wchar_t * *, int);
wint_t btowc(int);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>wctype.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 65 Default HeaderGroup for wctype.h
 */
typedef unsigned long wctype_t;

typedef __int32_t *wctrans_t;


wint_t towlower(wint_t);
wint_t towupper(wint_t);
wctrans_t wctrans(char *);
int iswalnum(wint_t);
int iswalpha(wint_t);
int iswcntrl(wint_t);
int iswctype(wint_t, wctype_t);
int iswdigit(wint_t);
int iswgraph(wint_t);
int iswlower(wint_t);
int iswprint(wint_t);
int iswpunct(wint_t);
int iswspace(wint_t);
int iswupper(wint_t);
int iswxdigit(wint_t);
wctype_t wctype(char *);
wint_t towctrans(wint_t, wctrans_t);
</SCREEN>
</SECT2>
<SECT2>
<TITLE>wordexp.h</TITLE>
<PARA>
</PARA>
<SCREEN>
/*
 * 66 Default HeaderGroup for wordexp.h
 */
typedef struct {
    int we_wordc;
    char **we_wordv;
    int we_offs;
} wordexp_t;


int wordexp(char *, wordexp_t *, int);
void wordfree(wordexp_t *);
</SCREEN>
</SECT2>
</SECT1>
<!-- End of text generated from database -->
<!--    by $Header: /cvsroot/lsb/spec/mklibspec,v 1.21 2001/04/25 23:58:49 anderson Exp 0 -->
