<REFENTRY ID="baselib-strtok-r-3"> <REFMETA>
<REFENTRYTITLE>strtok_r</REFENTRYTITLE>
<REFMISCINFO>Base Libraries</REFMISCINFO>
</REFMETA>
<REFNAMEDIV>
<REFNAME>strtok_r
</REFNAME>
<REFPURPOSE>
extract tokens from strings
</REFPURPOSE>
</REFNAMEDIV>

<REFSYNOPSISDIV>
<REFSYNOPSISDIVINFO>
<DATE>13 April 2001</DATE>
</REFSYNOPSISDIVINFO>
<SYNOPSIS>
#include &lt;string.h>

char *strtok_r(char *s, const char *delim, char **ptrptr);
</SYNOPSIS>
</REFSYNOPSISDIV>

<REFSECT1>
<REFSECT1INFO>
<DATE>13 April 2001</DATE>
</REFSECT1INFO>
<TITLE>Description
</TITLE>
<PARA>
A `token' is a nonempty string of characters not occurring in the string delim, followed by \0 or by a character occurring in delim.
</PARA><PARA>

The strtok_r() function can be used to parse the string s into tokens. The first call to strtok_r() should have s as its first argument. Subsequent calls should have the first argument set to NULL. Each call returns a pointer to the next token, or NULL when no more tokens are found.
</PARA><PARA>
If a token ends with a delimiter, this delimiting character is overwritten with a \0 and a pointer to the next character is saved for the next call to strtok_r(). The delimiter string delim may be different for each call.
</PARA><PARA>
ptrptr is a user allocated char* pointer. It must be the same while parsing the same string.
</PARA>
</REFSECT1>

<REFSECT1>
<TITLE>Bugs
</TITLE>
<PARA>
Never use this function. If you do, note that:
</PARA><PARA>
It modifies its first argument.
</PARA><PARA>
The identity of the delimiting character is lost.
</PARA><PARA>
This function cannot be used on constant strings.
</PARA>
</REFSECT1>

<REFSECT1>
<TITLE>Return Value
</TITLE>
<PARA>
The strtok_r() function returns a pointer to the next token, or NULL if there are no more tokens.
</PARA>
</REFSECT1>
<!--	  LDP GENERAL PUBLIC LICENSE  -->
<!--        Version 1a, November 1998   -->
</REFENTRY>
