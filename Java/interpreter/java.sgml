<PART ID="java">
<TITLE>Java Interpreter</TITLE>

<CHAPTER ID="java-int">
<TITLE>Java Interpreter</TITLE>

<SECT1 ID="javaintro">
<TITLE>Introduction</TITLE>
<PARA>
The Java interpreter API is described in the
<xref linkend="std.Java">,
with the following requirements for an LSB conforming runtime.
</PARA>
</SECT1>

<SECT1 ID="java-location">
<TITLE>Java Interpreter Location</TITLE>
<PARA>
The Java interpreter binary, or a link to the binary, 
shall exist at <filename>/usr/bin/java</filename>.
</PARA>
</SECT1>

<SECT1 ID="java-version">
<TITLE>Java Interpreter Version</TITLE>
<PARA>
The default installed Java version shall be Java 6 Platform Standard Edition or greater.
Applications can depend on the Java 6 Platform SE interfaces.
</PARA>
</SECT1>

<SECT1 ID="java-oper" XRefLabel="Operators and Functions">
<TITLE>Operators and Functions</TITLE>
<PARA>
Core Java operators, subroutines, and built-in functions
shall be present and shall operate as defined in 
<xref linkend="std.Java">.
</PARA>
</SECT1>

<SECT1 ID=java-command XRefLabel="Java Command">
<TITLE>Java Interpreter Command</TITLE>
<PARA>
This section contains a description of the 
<command>java</command> command.
</PARA>

<REFENTRY id="java-man">
<REFMETA>
<REFENTRYTITLE>java</REFENTRYTITLE>
</REFMETA>
<REFNAMEDIV>
<REFNAME>java</REFNAME>
<REFPURPOSE>
launch a Java application
</REFPURPOSE>
</REFNAMEDIV>

<REFSYNOPSISDIV>
<CMDSYNOPSIS>
<COMMAND>java</COMMAND>
<ARG>-?</ARG>
<ARG>-Dproperty=value</ARG>
<ARG>-classpath</ARG>
<ARG>-cp</ARG>
<ARG>-help</ARG>
<ARG>-jar file.jar</ARG>
<ARG>-version</ARG>
<ARG rep=repeat>arguments</ARG>
</CMDSYNOPSIS>
</REFSYNOPSISDIV>

<REFSECT1>
<TITLE>Description</TITLE>
<PARA>
The <COMMAND>java</COMMAND> command 
shall launch a Java application
by initializing a Java runtime environment,
loading the class specified on the command line,
and calling the main method of that class.
</PARA>

<para>
The method's declaration must be as follows.
</para>

<PARA>
<literal>
public static void main(String args[])
</literal>
</para>

<para>
By default, the first argument specified 
that is not an option shall be the
fully-qualified name of the class to invoke.
This behavior may be changed by the
addition of the 
<parameter>-jar</parameter> option,
in which case the first argument specified 
that is not an option shall be 
the name of a JAR file.
Any arguments specified 
after the class name or JAR file name
that are not command-line options
are passed to the main function.
</para>

<para>
The Java runtime shall search for the 
classes used, including the startup class,
in three locations: the bootstrap class path,
the extensions that are currently installed,
and the user class path.
</para>


</REFSECT1>

<REFSECT1>
<TITLE>Options</TITLE>
<variablelist>

<varlistentry>
<term><parameter>-?</parameter></term>
<listitem>
<para>
This option is a synonym for
<parameter>-help</parameter>.
</para>
</listitem>
</varlistentry>


<varlistentry>
<term><parameter>-classpath classpath</parameter></term>
<listitem>

<para>
This option shall specify 
a list of locations to search for class files,
including directories, JAR files, and ZIP files.
Locations in the class path shall be delimited
by colons (<literal>:</literal>).
</para>

<para>
The <parameter>-classpath</parameter> option
shall override 
the <envar>CLASSPATH</envar> environment variable.
If the <parameter>-classpath</parameter> option
is not specified and
<envar>CLASSPATH</envar> is not set,
then the user class path shall simply consist of
the current directory (<filename>.</filename>).
</para>


<para>
The class path element <filename>*</filename>
shall specify all files in the current directory
with the extension <filename>.jar</filename>.
or <filename>.JAR</filename>.
Example: if the only JAR files in the directory 
<filename>foo</filename>
are <filename>bar.jar</filename>
and <filename>bas.JAR</filename>,
then the class path element 
<literal>foo/*</literal> shall be equivalent to
<literal>bar.jar:bas.JAR</literal>.
The order of JAR files in this case shall be unspecified.
The <envar>CLASSPATH</envar> environment variable
functions in the same way.
</para>

<para>
Wildcards in the class path shall be expanded before
the initialization of the Java virtual machine.
However, Java programs can examine unexpanded wildcards
if they query the environment. Example:
<literal>System.getenv("CLASSPATH")</literal>.
</para>

</listitem>
</varlistentry>


<varlistentry>
<term><parameter>-cp classpath</parameter></term>
<listitem>
<para>
This option is a synonym for
<parameter>-classpath</parameter>.
</para>
</listitem>
</varlistentry>


<varlistentry>
<term><parameter>-Dproperty=value</parameter></term>
<listitem><para>
This option shall set the value of a system property.
</para></listitem>
</varlistentry>


<varlistentry>
<term><parameter>-help</parameter></term>
<listitem>
<para>
This option shall display usage information
for the command, then exit.
</para>
</listitem>
</varlistentry>


<varlistentry>
<term><parameter>-jar jarfile</parameter></term>
<listitem>

<para>
This option shall specify a JAR file
containing a program to execute.
Its first argument must be the name of a JAR file
with both class and resource files.
The JAR file's manifest must contain a line
of this form:
<literal>Main-Class: classname</literal>.
The class name
<replaceable>classname</replaceable>
must specify the class containing the main function
for the application.
</para>

<para>
If this option is specified,
all other user class path settings shall be ignored.
</para>

<para> 
JAR files that can be specified with this option
shall also be runnable without this option
by setting their execute permissions.
</para>

</listitem>
</varlistentry>


<varlistentry>
<term><parameter>-version</parameter></term>
<listitem>

<para>
This option shall display version information
for the command, then exit.
</para>

</listitem>
</varlistentry>

</variablelist>
</REFSECT1>

</REFENTRY>

</SECT1>

</CHAPTER>
</PART>
