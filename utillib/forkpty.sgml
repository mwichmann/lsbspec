<REFENTRY ID="libutil-forkpty-3"> <REFMETA>
<REFENTRYTITLE>forkpty</REFENTRYTITLE>
<REFMISCINFO>Base Libraries</REFMISCINFO>
</REFMETA>
<REFNAMEDIV>
<REFNAME>forkpty
</REFNAME>
<REFPURPOSE>find and open an available pseudo-tty
</REFPURPOSE>
<INDEXTERM ID="ix-libutil-forkpty-3"><PRIMARY>forkpty</PRIMARY></INDEXTERM>
</REFNAMEDIV>
<REFSYNOPSISDIV>
<REFSYNOPSISDIVINFO>
<DATE>08 February 2001</DATE>
</REFSYNOPSISDIVINFO>
<SYNOPSIS>
int forkpty (int *<replaceable class="parameter" >amaster</replaceable>, 
	char *<replaceable class="parameter" >name</replaceable>,
	struct termios *<replaceable class="parameter" >termp</replaceable>,
	struct winsize *<replaceable class="parameter" >winp</replaceable>)
</SYNOPSIS>
</REFSYNOPSISDIV>
<REFSECT1>
<REFSECT1INFO>
<DATE>08 February 2001</DATE>
</REFSECT1INFO>
<TITLE>Description
</TITLE>
<PARA>
The forkpty() function joins openpty(), fork(), and login_tty() to
create a new process operating on a pseudo-tty.  The file descriptor of
the master side of the pseudo-tty is returned in amaster, and null or the 
filename of the slave in name.  If non-null, the termp and winp 
parameters will determine the terminal attributes and window size
of the slave side of the pseudo-tty.
</PARA>
</REFSECT1>
<refsect1>
<title>
Return value
</title>
<para>
0         Success for the child process.
pid       Parent process receives the PID of its child process.
</para>
</refsect1>
<refsect1>
<title>
Errors
</title>
<para>
-1        Not successful, see errno.
</para>
</refsect1>
</REFENTRY>
